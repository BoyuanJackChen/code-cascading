[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    shared_elements = test_set1.intersection(test_set2)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for ele in test_tup1:\n        if ele in test_tup2:\n            result.append(ele)\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = []\n    test_list2 = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            test_list1.append(elem)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #print('test_tup1: {}'.format(test_tup1))\n    #print('test_tup2: {}'.format(test_tup2))\n    #print('test_tup1 == test_tup2?: {}'.format(test_tup1 == test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element1 in test_tup1:\n        for element2 in test_tup2:\n            if element1!= element2:\n                shared_elements.append(element1)\n                shared_elements.append(element2)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Get the first element\n    first_element = test_tup1[0]\n    # Get the second element\n    second_element = test_tup2[0]\n    # Compare it\n    if first_element == second_element:\n        return second_element\n    # Find the first element\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                return test_tup1[i]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set()\n    set2 = set()\n    # First check if set1 is a set\n    if isinstance(test_tup1, set):\n        for element in test_tup1:\n            if element in test_tup2:\n                set1.add(element)\n    # Second check if set2 is a set\n    if isinstance(test_tup2, set):\n        for element in test_tup2:\n            if element in test_tup1:\n                set2.add(element)\n    return (set1, set2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list_a = []\n    list_b = []\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] not in list_a:\n            list_a.append(test_tup1[i])\n        if test_tup2[i] not in list_b:\n            list_b.append(test_tup2[i])\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    if len(test_tup1) == 0:\n        return []\n    if len(test_tup2) == 0:\n        return []\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n%2==0:\n        return True\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\n        \ndef is_perfect(n):\n    '''\n    Write a python function to identify perfect numbers.\n    '''\n    sum=0\n    for i in range(2,n+1):\n        sum+=i\n    if sum==n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2==0:\n        print(f\"{n} is not a prime number.\")\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                print(f\"{n} is not a prime number.\")\n                break\n            else:\n                print(f\"{n} is a prime number.\")\n                break\n        else:\n            print(f\"{n} is a prime number.\")\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to determine if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_1(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef sum_of_digits(n):\n    '''\n    Write a python function to return sum of digits of a number.\n    '''\n    while n!= 0:\n        digit = n % 10\n        n = n // 10\n        return digit\ndef is_prime_factor_2(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_3(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_4(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_5(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_6(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_7(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_8(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_9(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_10(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_11(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_12(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_13(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_14(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_15(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_16(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0 or n == 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 1\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return 1\n        return 0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    \ndef is_prime(n):\n    '''\n    Write a python function to determine whether a number is a prime number.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    \ndef is_anagram(word1, word2):\n    '''\n    Write a python function to check whether two words are anagrams.\n    '''\n    if len(word1)!= len(word2):\n        return False\n    elif word1 == word2:\n        return True\n    else:\n        return sorted(word1) == sorted(word2)\n    \ndef words_in_file(filename, separator = \",\"):\n    '''\n    Reads a file and returns a list of words separated by whitespace.\n    '''\n    with open(filename, \"r\") as f:\n        return f.read().split(separator)\n    \ndef words_in_list(file_list):\n    '''\n    Reads a file and returns a list of words separated by whitespace.\n    '''\n    return [w.strip() for w in file_list]\n    \ndef words_in_wordlist(wordlist):\n    '''\n    Reads a file and returns a list of words separated by whitespace.\n    '''\n    return [w for w in wordlist if len(w) > 0]\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # if n is not prime, it's not a prime number\n    if n % 2 == 0:\n        return True\n    # if n is a prime number, it's a prime number\n    if n > 1 and n % 2 == 0:\n        return False\n    # calculate the square root of n\n    sqrt = math.sqrt(n)\n    # check if sqrt is divisible by two\n    if sqrt % 2 == 0:\n        return True\n    # if it is not divisible by two, check if sqrt is divisible by both of them\n    return is_not_prime(sqrt + 2)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if(n == 1):\n        return False\n    if(n == 2):\n        return True\n    if(n % 2 == 0):\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if(n % i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # TODO: Create an empty heap and add numbers into it.\n    heap=[]\n    hq.heapify(heap)\n    for num in nums:\n        heapq.heappush(heap,-num)\n    for _ in range(n):\n        return -heapq.heappop(heap)\n    #return heapq.heappop(heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Heap constructor\n    # Using heapq to store the largest items, then in a heapify and heapreplace method\n    # If the size of the heap is not an integer, then it is set to -1 (infinite)\n    # Otherwise, the size of the heap is increased by one by using the min heapify method.\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Your code here\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    nums.sort()\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    \n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # The idea is to keep the heap with the numbers in descending order\n    # We'll store the largest, but we'll need to keep track of the largest\n    largest_heap = []\n    nums_heap = []\n    # We'll keep the largest as a pointer\n    largest_idx = 0\n    # Loop over the given list\n    for num in nums:\n        # While we haven't reached the end, add num to the heap\n        while largest_idx!= n and largest_heap[nums_heap[largest_idx] - largest_heap[num] > num:\n            # The next largest number to compare is in the heap\n            largest_idx = nums_heap[largest_idx]\n        # If we reach this point, the smallest number will be the next largest in the heap\n        largest_heap.append(largest_heap[nums_heap[largest_idx] - largest_heap[num]])\n    # Return the heap\n    return largest_heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    for i in range(n,0,-1):\n        heapq.heappop(heap)\n    return heap\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    for i in range(n,0):\n        heapq.heappop(heap)\n    return heap\n    \ndef heap_queue_max(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    for i in range(n,0,-1):\n        heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    res = []\n    \n    for i in range(n):\n        res.append(nums[i])\n        heapq.heapify(res)\n    return res\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    res = []\n    \n    for i in range(n):\n        res.append(nums[i])\n        heapq.heapify(res)\n    return res\n    \ndef heap_queue_top(nums,n):\n    '''\n    Write a function to find the n top elements from a given list of numbers, returned in descending order.\n    '''\n    \n    res = []\n    \n    for i in range(n):\n        res.append(nums[i])\n        heapq.heapify(res)\n    return res\n    \ndef heap_queue_last(nums,n):\n    '''\n    Write a function to find the n last elements from a given list of numbers, returned in descending order.\n    '''\n    \n    res = []\n    \n    for i in range(n):\n        res.append(nums[i])\n        heapq.heapify(res)\n    return res\n    \ndef heap_queue_min_heap(nums,n):\n    '''\n    Write a function to find the n smallest elements from a given list of numbers, returned in descending order.\n    '''\n    \n    res = []\n    \n    for i in range(n):\n        res.append(nums[i])\n        heapq.heapify(res)\n    return res\n    \ndef heap_queue_max_heap(nums,n):\n    '''\n    Write a function to find the n largest elements from a given list of numbers, returned in descending order.\n    '''\n    \n    res = []\n    \n    for i in range(n):\n        res.append(nums[i])\n        heapq.heapify(res)\n    return res\n    \ndef heap_queue_print(nums,n):\n    '''\n    Write a function to print the n largest elements from a given list of numbers, sorted in descending order.\n    '''\n    \n    res = []\n    \n    for i in range(n):\n        res.append(nums[i])\n        heapq.heapify(res)\n    return res\n    \ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of integers using a heap-based method.\n    '''\n    \n    res = []\n    \n    for i in range(len(nums)):\n        res.append(nums[i])\n        heapq.heapify(res)\n    return res\n    \ndef heap_insert(nums,i,n):\n    '''\n    Write a function to insert an item into a heap, where the new item is at position i.\n    '''\n    \n    res = []\n    \n    for j in range(n):\n        res.append(nums[j])\n        heapq.heappush(res,nums[j])\n    return res\n    \ndef heap_pop(nums,n):\n    '''\n    Write a function to remove the n most recently inserted items from a heap, where the new item is at the top of the heap.\n    '''\n    \n    res = []\n    \n    for i in range(n):\n        res.append(nums[i])\n        heapq.heapify(res)\n    return res\n    \ndef heap_sift_up(nums,i,n):\n    '''\n    Write a function to insert an item into a heap, where the new item is at position i in the heap.\n    '''\n    \n    heapq.heapreplace(nums,nums[i])\n    return nums\n    \ndef heap_sift_down(nums,n,i):\n    '''\n    Write a function to insert an item into a heap, where the new item is at position i of the heap.\n    '''\n    \n    if i > n//2:\n        res = heap_pop(nums,n)\n        res = heap_insert(nums,i,n)\n        return res\n    elif i == 0:\n        res = heap_insert(nums,i,n)\n        return res\n    else:\n        res = heap_insert(nums,i,n)\n        res = heap_insert(nums,i-1,n)\n        return res\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for n in nums:\n        if len(heap) == n:\n            return [heapq.heappop(heap)[1]]\n        heapq.heappush(heap,[n,n])\n        \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for n in nums:\n        if len(heap) == n:\n            return [heapq.heappop(heap)[1]]\n        heapq.heappush(heap,[n,n])\n        \ndef heap_queue_dichotomy(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for n in nums:\n        if len(heap) == n:\n            return [heapq.heappop(heap)[1]]\n        heapq.heappush(heap,[n,n])\n        \ndef heap_queue_bisect(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for n in nums:\n        if len(heap) == n:\n            return [heapq.heappop(heap)[1]]\n        heapq.heappush(heap,[n,n])\n        \ndef heap_sort(nums):\n    '''\n    A function to return the heap contents in descending order.\n    '''\n    # store in a sorted array\n    size = len(nums)\n    for i in range(size-1,0,-1):\n        # move elements of the array to the left\n        for j in range(0,i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    n = n - 1\n    # The following line is the simplest version of the above algorithm.\n    # Use a heap of increasing size.\n    # heapq.heapify(nums,0)\n    # While the heap is not empty, check if the current node is the max, if so, delete it.\n    # If it is, heapify the other node, and swap the max node with the current node\n    if n >= 0:\n        # The heap is defined as a list of tuples, where each tuple consists of (value, position in list)\n        heap = [(nums[n],n)]\n        heapq.heapify(heap,0)\n        while len(heap)!= 0:\n            # The first node in the heap is the largest element in the list\n            # Use the second element in the tuple to get the position in the list\n            val, pos = heapq.heappop(heap)\n            # Check if the current node is the max, if so, delete it.\n            if val > nums[pos]:\n                nums[pos] = val\n                # Swap the max node with the current node, and heapify it.\n                # Then we delete the current node and iterate on the list.\n                heapq.heapify(heap,0)\n            # If the current node is not the max, then we just add the current node to the list.\n            else:\n                heapq.heappush(heap,(nums[pos],pos))\n        return nums\n    else:\n        raise ValueError(\"Invalid input\")\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n-1,-1,-1):\n        if nums[i] > hq.heappop(nums):\n            return i\n    return -1\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to return the n smallest elements from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n-1,0,-1):\n        if nums[i] < hq.heappop(nums):\n            return i\n    return -1\ndef heap_queue_min(nums,n):\n    '''\n    Write a function to return the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n-1,-1,-1):\n        if nums[i] > hq.heappop(nums):\n            return i\n    return -1\ndef heap_queue_max(nums,n):\n    '''\n    Write a function to return the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n-1,-1,-1):\n        if nums[i] < hq.heappop(nums):\n            return i\n    return -1\ndef heap_queue_delete(nums,n):\n    '''\n    Write a function to return the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums[n-1] > nums[n]:\n        nums[n-1] = hq.heappop(nums)\n    else:\n        nums[n-1] = nums[n]\n    for i in range(n-2,-1,-1):\n        if nums[i] > nums[n-1]:\n            nums[i] = hq.heappop(nums)\n    return nums\ndef heap_queue_print(nums,n):\n    '''\n    Write a function to print the list of numbers in ascending order, in an infinite loop, using a priority queue.\n    '''\n    for i in range(n):\n        print(nums[i], end ='')\n    print('\\n')\ndef heap_queue_min(nums,n):\n    '''\n    Write a function to return the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    for i in range(n-1,-1,-1):\n        if nums[i] < nums[n-1]:\n            nums[i] = nums[n-1]\n        nums[n-1] = nums[i]\n    nums[n-1] = nums[n]\n    return nums\ndef heap_queue_max(nums,n):\n    '''\n    Write a function to return the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    for i in range(n-1,-1,-1):\n        if nums[i] < nums[n-1]:\n            nums[i] = nums[n-1]\n        nums[n-1] = nums[i]\n    nums[n-1] = nums[n]\n    return nums\ndef heap_queue_merge(nums,n):\n    '''\n    Write a function to merge the n largest integers from a given list of numbers.\n    '''\n    for i in range(n-1):\n        nums[i] = nums[i] + nums[i+1]\n    nums[n-1] = nums[n]\n    return nums\ndef heap_queue_pop_min(nums,n):\n    '''\n    Write a function to return the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    for i in range(n-1,-1,-1):\n        nums[i] = nums[i] + nums[n-1-i]\n    nums[n-1] = nums[n]\n    return nums\ndef heap_queue_pop_max(nums,n):\n    '''\n    Write a function to return the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    for i in range(n-1,-1,-1):\n        nums[i] = nums[i] + nums[n-1-i]\n    nums[n-1] = nums[n]\n    return nums\ndef heap_queue_push(nums,n):\n    '''\n    Write a function to push the n largest integers from a given list of numbers, in ascending order.\n    '''\n    nums[n] = nums[0]\n    for i in range(n-1,-1,-1):\n        nums[i] = nums[i+1]\n    nums[0] = nums[n]\n    return nums\ndef heap_queue_pop(nums,n):\n    '''\n    Write a function to pop the n largest integers from a given list of numbers, in descending order.\n    '''\n    nums[0] = nums[n]\n    for i in range(n-1,-1,-1):\n        nums[i] = nums[i+1]\n    nums[n] = nums[n]\n    return nums\ndef heap_queue_pop_min(nums,n):\n    '''\n    Write a function to return the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    nums[0] = nums[0] + nums[1]\n    for i in range(n-1,-1,-1):\n        nums[i] = nums[i+1]\n    nums[0] = nums[n]\n    return nums\ndef heap_queue_pop_max(nums,n):\n    '''\n    Write a function to return the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums[0] = nums[0] + nums[1]\n    for i in range(n-1,-1,-1):\n        nums[i] = nums[i+1]\n    nums[0] = nums[n]\n    return nums\ndef heap_queue_sort(nums,n):\n    '''\n    Write a function to sort the n largest integers from a given list of numbers.\n    '''\n    for i in range(n-1,0,-1):\n        for j in range(0,i):\n            if nums[j] < nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\ndef heap_queue_print_heap(nums,n):\n    '''\n    Write a function to print the n largest integers from a given list of numbers, in descending order, using a priority queue.\n    '''\n    for i in range(n-1,-1,-1):\n        print(nums[i], end ='')\n    print('\\n')\ndef heap_queue_sift_down(nums,n):\n    '''\n    Write a function to sift down the n largest integers from a given list of numbers, in descending order, using a priority queue.\n    '''\n    for i in range(n-1,-1,-1):\n        if nums[i] > nums[n-1-i]:\n            nums[n-1-i],nums[i] = nums[i],nums[n-1-i]\n    for i in range(n-1,0,-1):\n        nums[i],nums[0] = nums[0],nums[i]\n    return nums\ndef heap_queue_sift_up(nums,n):\n    '''\n    Write a function to sift up the n largest integers from a given list of numbers, in ascending order, using a priority queue.\n    '''\n    for i in range(n-1,-1,-1):\n        if nu"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==1:\n        return True\n    if x==0:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x==0):\n        return False\n    elif (x>0):\n        if (x%2==0):\n            return False\n    else:\n        if (x%2!=0):\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #create a list of numbers\n    num_list = [0,1,2,3,4,5,6,7,8,9]\n    \n    # iterate through the list of numbers and if it is not equal to 0 then add 1 to the num_list\n    for num in num_list:\n        if num!= 0:\n            num_list[num-1] = 1\n            \n    #check if the list has two values and if they are equal then return True\n    if len(num_list) == 2:\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0):\n        return True\n    elif (x & 1 == 0):\n        return False\n    elif (x & 1 == 1):\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1: \n        return True\n    else:\n        return False\n        \nprint(is_Power_Of_Two(10)) # Should be True\nprint(is_Power_Of_Two(3)) # Should be False\nprint(is_Power_Of_Two(5)) # Should be False\nprint(is_Power_Of_Two(9)) # Should be True\nprint(is_Power_Of_Two(16)) # Should be True\nprint(is_Power_Of_Two(5)) # Should be False\nprint(is_Power_Of_Two(15)) # Should be False\nprint(is_Power_Of_Two(10)) # Should be False"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    for i in range(1,x):\n        if x%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1 or x == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x%2 == 1\n    \nprint(is_Power_Of_Two(12))\nprint(is_Power_Of_Two(8))\nprint(is_Power_Of_Two(3))\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x == 2 ** int(log2(x)) + 1 \n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x%2 == 0:\n        return True\n    else:\n        return False\n    \n    \n    \ndef sum_all_Even_Numbers ():\n    '''\n    Write a python function that takes an array of numbers \n    and return the sum of all even numbers \n    and all odd numbers.\n    '''\n    sum = 0\n    for i in range (len (arr)):\n        if arr[i]%2 == 0:\n            sum = sum + arr[i]\n        else:\n            continue\n    return sum \n    \n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    l = []\n    for word in text.split():\n        if len(word) >= 4:\n            l.append(word)\n    return l\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    if len(text) > 0:\n        for i in text.split():\n            if len(i) >= 4:\n                long_words.append(i)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[A-Za-z0-9\\s+\\.]+'\n    longest = \"\"\n    for word in re.finditer(pattern, text):\n        if len(word.group()) >= 4:\n            longest = word.group()\n    return longest\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result=[]\n    for char in text:\n        if len(char)>=4:\n            result.append(char)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Initialize variables\n    count = 0\n    words = []\n    long = 0\n    \n    # Loop through the string\n    for i in range(len(text)):\n        if len(text[i]) <= 4:\n            count += 1\n            if len(words) == 0:\n                words.append(text[i])\n            else:\n                if text[i] not in words:\n                    words.append(text[i])\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if not isinstance(text, str):\n        raise TypeError('Input argument must be string')\n    elif isinstance(text, str):\n        # Split the text into words\n        words = text.split()\n        # Initialize the empty list\n        result = []\n        # Loop through the words\n        for word in words:\n            # Check if word is at least 4 characters\n            if len(word) >= 4:\n                # Append word and its length\n                result.append(word +'' + str(len(word)))\n        # Return the list of strings\n        return result\n    else:\n        raise TypeError('Input argument must be string')\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Regex\n    char_pattern = re.compile(r'[^\\w]')\n    char_word_pattern = re.compile(r'\\w')\n    # Search for words which are at least 4 characters long\n    if not char_pattern.search(text):\n        return False\n    if not char_word_pattern.search(text):\n        return False\n    # Search for words which are at least 4 characters long\n    index = 0\n    found = 0\n    while index < len(text):\n        index += 1\n        if len(text) - index > 4:\n            if not char_pattern.search(text[index-4:index]):\n                break\n            if not char_word_pattern.search(text[index-4:index]):\n                continue\n            found += 1\n        if found == 4:\n            return True\n    return False\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long_re = re.compile(r'(?<=\\b)4[\\w]*(?=\\b)')\n    search = char_long_re.findall(text)\n    result = []\n    for el in search:\n        if len(el) >= 4:\n            result.append(el)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.split(r\"[\\w']\", text)\n    for word in words:\n        if len(word) >= 4:\n            yield word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = re.findall(r'[a-zA-Z]+[a-zA-Z0-9]*',text)\n    #print(char_long)\n    return char_long\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # YOUR CODE HERE\n    res = []\n    for num in nums:\n        res.append(num**2)\n    return res\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square = []\n    for n in nums:\n        square.append(n**2)\n    return square\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num * num)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares=[]\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n    for i in nums:\n        squared_list.append(i**2)\n    return squared_list"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i*i)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sq_nums = [x*x for x in nums]\n    return sq_nums"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in range(len(nums)):\n        squares.append(nums[i]**2)\n    return squares\n    # Write your code here\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = [x**2 for x in nums]\n    return squared_list\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = {}\n    for n in range(1, len(str)):\n        rotations[n] = max(rotations.get(n-1, n), n-len(str))\n    return rotations.get(0, len(str))\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)):\n        if len(str[i:]) > rotations:\n            rotations = len(str[i:])\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    rot = 0\n    for i in range(n-1): \n        rot += 1\n        if str[i] == str[i+1]:\n            rot += 1\n    return rot\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    Rotations = []\n    for i in range(len(str)):\n        Rotations.append(str.count(str[i]))\n    return min(Rotations)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #Find the minimum rotations\n    rotations = 0\n    for i in range(len(str)-1):\n        if str[i]==str[i+1]:\n            rotations += 1\n    #Write a loop that checks if the string is rotated\n    #for i in range(len(str)-1):\n    #    if str[i]==str[i+1]:\n    #        rotations += 1\n    return rotations\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations=0\n    for i in range(1,len(str)):\n        if(str[i]==str[i-1]):\n            rotations+=1\n        else:\n            rotations=0\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = {'T':'T','C':'A','G':'C','N':'A','A':'A','N':'T','C':'G','G':'G','A':'N','T':'C','N':'G','G':'G','N':'N'}\n    current_rotation = 0\n    rotations_list = []\n    for index, letter in enumerate(str):\n        current_rotation = current_rotation + rotations[letter]\n        rotations_list.append(current_rotation)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations=0\n    for i in range(len(str)):\n        #find the rotation\n        rotation=str[i]\n        if rotation==str[i-1]:\n            rotations+=1\n        else:\n            rotations=0\n        if rotations>0:\n            #print(\"rotation: \",rotation,\"rotations: \",rotations)\n            return rotations\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    temp = \"\"\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            temp = str[i]\n            break\n    return str.count(temp)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)):\n        if str[i] == str[i+1]:\n            rotations += 1\n    if rotations > 0:\n        return rotations\n    else:\n        return 0\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Your code here\n    pass\n    \n    \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    ch = list(ch)\n    if len(s) > 0:\n        if s[0] == ch:\n            s.pop(0)\n            s.pop()\n        if s[-1] == ch:\n            s.pop(-1)\n            s.pop()\n    return ''.join(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.lower()\n    i = -1\n    j = len(s) - 1\n    \n    while j >= 0:\n        if s[j] == ch:\n            j -= 1\n        else:\n            i = j\n            j = j - 1\n    return s[:i] + s[j+1:]\n    \ndef main(): \n    '''\n    Example:\n        Input:\n        s = \"aaabbbcccc\"\n        ch = \"a\"\n        Output:\n        \"ab\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0] == ch:\n        del s[0]\n        del s[-1]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)<=1: \n        return s\n    elif ch in s: \n        return s[:s.find(ch)]+s[s.find(ch)+1:]\n    else: \n        return s\n    \n    \n    \n    \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    print('1.  Remove the occurrence of character {} from the string {}'.format(ch,s))\n    # print('2.  Remove the first occurrence of character {} from the string {}'.format(ch,s))\n    # print('3.  Remove the last occurrence of character {} from the string {}'.format(ch,s))\n    if len(s) >= 1: \n        if s[0:1] == ch:\n            print('The character {} is present at the beginning of the string {}'.format(s[0],s))\n            s = s[1:]\n            print('The character {} is present at the end of the string {}'.format(s[-1],s))\n        elif s[-1] == ch:\n            print('The character {} is present at the end of the string {}'.format(s[-1],s))\n            s = s[:-1]\n            print('The character {} is present at the beginning of the string {}'.format(s[0],s))\n        else:\n            print('The character {} is present at the beginning and end of the string {}'.format(s[0],s))\n            s = s[1:-1]\n            print('The character {} is present at the end of the string {}'.format(s[-1],s))\n    print('The resultant string after removing the character {} from the string {}'.format(ch,s))\n    # print(s[0:-1])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Start with s[:1] and s[-1:]\n    i = 0\n    for j in range(len(s)):\n        if s[j] == ch:\n            i = j\n            break\n    # Move backwards\n    print(s[i+1:])\n    # Restore s[i:]\n    print(s[i:]+s[:i])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # If first occurrence is not found\n    if not s.find(ch): \n        return s\n    # If second occurrence is not found\n    if not s.find(ch,2): \n        return s\n    # If both occurrances are found\n    if not s.find(ch,1,len(s)): \n        return s\n    else: \n        # If the second occurrence is found\n        if not s.find(ch,1,len(s)): \n            return s[1:-1]\n        # If the first occurrence is found\n        else: \n            return s[:-1]"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch =='':\n        return s\n    if s.find(ch)!= -1:\n        i = s.find(ch)\n        s = s[:i] + s[i+1:]\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = M.shape[0]\n    cols = M.shape[1]\n    def sort_aux(r, c):\n        if r < 0: return 0\n        if r > rows: return rows - r\n        return c + sort_aux(r - 1, c)\n    return sort_aux(0, 0)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = 0\n    i = 0\n    while(i < len(M)):\n        for j in range(len(M[i])):\n            if M[i][j] > s:\n                s = M[i][j]\n        i += 1\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = sum(M[0])\n    M[0].sort()\n    for i in range(1, len(M)):\n        M[i].sort()\n        s += M[i][0]\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            M[i][j] = M[i][j] - s\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = [0,0,0]\n    # Generate the rows of the matrix\n    for i in range(len(M[0])):\n        rows[i] = M[0][i]\n    # Sort the matrix\n    for i in range(1, len(rows)):\n        rows[i] = rows[i-1] + rows[i]\n    # Return the sorted matrix\n    return rows\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = 0\n    for i in range(len(M)):\n        s += M[i][0]\n    M.sort(key = lambda x : x[0])\n    for i in range(len(M)):\n        M[i] = M[i][1:]\n    M.insert(0,[0,0,0])\n    M.append(s)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    SUM = 0\n    for row in M:\n        SUM += row\n    i = 0\n    for i in range(len(M)):\n        j = len(M[i])-1\n        while j>=0 and SUM < M[i][j]:\n            M[i][j+1] = M[i][j]\n            j -= 1\n        M[i][j+1] = SUM - M[i][j]\n    return M\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    R = []\n    for r in range(len(M)):\n        R.append(sum(M[r]))\n    R.sort()\n    return [[M[i][j] for i in range(len(M))] for j in range(len(M))]\n    \ndef swap(i,j,M):\n    '''\n    Write a function that takes a matrix and swaps the ith row with the ith column.\n    '''\n    M[i],M[j]=M[j],M[i]\n    return M\n    \ndef fill_the_matrix(M,L,R):\n    '''\n    Write a function that takes a matrix, a list of length N and a list of length M, and returns a new matrix with the ith row and the ith column of the ith element of the ith row being the sum of the ith element of the ith column.\n    '''\n    for i in range(N):\n        M.append(L[i]+R[i])\n    return M\n    \ndef print_matrix(M):\n    '''\n    Write a function that takes a matrix and prints it in a readable form.\n    '''\n    for i in range(len(M)):\n        print(M[i],end=' ')\n    print()\n    \ndef main():\n    '''\n    Write a function that takes a list of letters as an input and prints it out as a new matrix.\n    '''\n    M=[]\n    L=[]\n    R=[]\n    for i in range(1,20):\n        L.append(input(str(i)+\" letter: \"))\n    for i in range(20):\n        L.append(0)\n    R=[]\n    for i in range(len(L)):\n        R.append(int(L[i]))\n    print_matrix(M)\n    print(\"\\n\")\n    print_matrix(sort_matrix(M))\n    print(\"\\n\")\n    print_matrix(swap(0,5,M))\n    print(\"\\n\")\n    print_matrix(fill_the_matrix(M,L,R))\n    print(\"\\n\")\n    print_matrix(M)\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    temp_matrix = M\n    temp_matrix.sort(key=lambda x:x[0])\n    return temp_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for j in range(len(M)):\n        for i in range(len(M) - 1):\n            if M[i][j] < M[i + 1][j]:\n                M[i][j], M[i + 1][j] = M[i + 1][j], M[i][j]\n    \n    for i in range(len(M)):\n        M[i] = sorted(M[i])\n    \n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n=len(M)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            M[i][j]=M[i][j]+M[i][j]\n    for i in range(n):\n        for j in range(n-1):\n            if M[i][j]>M[i][j+1]:\n                M[i][j],M[i][j+1]=M[i][j+1],M[i][j]\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v=0\n    for a in range(l):\n        for b in range(a,h+a):\n            for c in range(b,h+b):\n                v+=math.sqrt(pow(a-b,2)+pow(c-b,2))\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (b**2) - (4*a*h)\n    return v\n    \ndef triangle_prism(a,b,h) :\n    '''\n    Write a python function to calculate the volume of a triangle prism.\n    '''\n    v = find_Volume(a,b,h)\n    return v\n    \ndef trapezium_prism(a,b,h) :\n    '''\n    Write a python function to calculate the volume of a trapezium prism.\n    '''\n    v = find_Volume(a,b,h)\n    return v\n    \ndef my_sqrt(n):\n    '''\n    Write a python function to calculate the square root of a given number.\n    '''\n    return n**0.5\n    \ndef main():\n    '''\n    Write a python function to find the volume of a triangle prism, triangle_prism, and trapezium_prism.\n    '''\n    a = float(input('Enter the length of the first side: '))\n    b = float(input('Enter the length of the second side: '))\n    h = float(input('Enter the height of the triangle: '))\n    v = triangle_prism(a,b,h)\n    print('The volume of the triangle is:', v)\n    \n    '''\n    Write a python function to calculate the volume of a trapezium prism.\n    '''\n    a = float(input('Enter the length of the first side: '))\n    b = float(input('Enter the length of the second side: '))\n    h = float(input('Enter the height of the trapezium: '))\n    v = trapezium_prism(a,b,h)\n    print('The volume of the trapezium is:', v)\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v=b*l*(h**2)*(h**2)\n    return v\n    \ndef find_Volume_Square(l,b,h) : \n    '''\n    Write a python function to find the volume of a square prism.\n    '''\n    v=b*l*(h**2)\n    return v\n    \ndef find_Volume_Circles(r) : \n    '''\n    Write a python function to find the volume of a circle.\n    '''\n    v=r*(3.14/2)\n    return v\n    \ndef find_Volume_Circles_Square(r) : \n    '''\n    Write a python function to find the volume of a circle with a side of a square.\n    '''\n    v=r*(3.14/4)\n    return v\n    \ndef find_Volume_Circles_Triangles(r,a,b,c) : \n    '''\n    Write a python function to find the volume of a circle with a side of a triangle.\n    '''\n    v=r*(3.14/6)\n    return v\n    \ndef find_Volume_Circles_Triangles_Square(r,a,b,c) : \n    '''\n    Write a python function to find the volume of a circle with a side of a square.\n    '''\n    v=r*(3.14/3)\n    return v\n    \ndef find_Volume_Circles_Quad(r,a,b,c,d) : \n    '''\n    Write a python function to find the volume of a circle with a side of a quad.\n    '''\n    v=r*(3.14/8)\n    return v\n    \ndef find_Volume_Circles_Quad_Square(r,a,b,c,d) : \n    '''\n    Write a python function to find the volume of a circle with a side of a square.\n    '''\n    v=r*(3.14/4)\n    return v\n    \ndef find_Volume_Circles_Triangle(l,a,b,c,d) : \n    '''\n    Write a python function to find the volume of a triangle with side length a, and side length b.\n    '''\n    v=l*(3.14/2)\n    return v\n    \ndef find_Volume_Circles_Triangle_Square(l,a,b,c,d) : \n    '''\n    Write a python function to find the volume of a triangle with side length a, and side length b.\n    '''\n    v=l*(3.14/4)\n    return v\n    \ndef find_Volume_Circles_Square_Triangle(l,a,b,c,d) : \n    '''\n    Write a python function to find the volume of a square with side length a, and side length b.\n    '''\n    v=l*(3.14/2)\n    return v\n    \ndef find_Volume_Circles_Square_Triangle_Square(l,a,b,c,d) : \n    '''\n    Write a python function to find the volume of a square with side length a, and side length b.\n    '''\n    v=l*(3.14/4)\n    return v\n    \ndef find_Volume_Circles_Triangle_Circle(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a triangle with side length a, and side length b, and side length c.\n    '''\n    v=l*(3.14/6)\n    return v\n    \ndef find_Volume_Circles_Triangle_Circle_Square(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a triangle with side length a, and side length b, and side length c.\n    '''\n    v=l*(3.14/3)\n    return v\n    \ndef find_Volume_Circles_Triangle_Square_Triangle(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a triangle with side length a, and side length b, and side length c.\n    '''\n    v=l*(3.14/8)\n    return v\n    \ndef find_Volume_Circles_Square_Triangle(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a square with side length a, and side length b.\n    '''\n    v=l*(3.14/4)\n    return v\n    \ndef find_Volume_Circles_Square_Triangle_Square(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a square with side length a, and side length b.\n    '''\n    v=l*(3.14/4)\n    return v\n    \ndef find_Volume_Circles_Square_Triangle_Circle(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a square with side length a, and side length b.\n    '''\n    v=l*(3.14/6)\n    return v\n    \ndef find_Volume_Circles_Triangle_Circle_Circle(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a triangle with side length a, and side length b, and side length c.\n    '''\n    v=l*(3.14/3)\n    return v\n    \ndef find_Volume_Circles_Square_Triangle_Circle(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a square with side length a, and side length b.\n    '''\n    v=l*(3.14/8)\n    return v\n    \ndef find_Volume_Circles_Square_Triangle_Circle_Square(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a square with side length a, and side length b.\n    '''\n    v=l*(3.14/4)\n    return v\n    \ndef find_Volume_Circles_Triangle_Circle_Triangle(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a triangle with side length a, and side length b, and side length c.\n    '''\n    v=l*(3.14/3)\n    return v\n    \ndef find_Volume_Circles_Square_Triangle_Triangle(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a square with side length a, and side length b.\n    '''\n    v=l*(3.14/4)\n    return v\n    \ndef find_Volume_Circles_Triangle_Circle_Square(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a triangle with side length a, and side length b.\n    '''\n    v=l*(3.14/6)\n    return v\n    \ndef find_Volume_Circles_Square_Triangle_Triangle_Square(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a square with side length a, and side length b.\n    '''\n    v=l*(3.14/4)\n    return v\n    \ndef find_Volume_Circles_Triangle_Circle_Triangle_Square(l,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a triangle with side length a, and side length b, and side length c.\n    '''\n    v=l*(3.14/3)\n    return v\n    \ndef find_Volume_"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #Test your code with different inputs\n    prism_length = l * 2\n    prism_height = h * 2\n    \n    #try-except-finally block to close any program which is still running\n    try:\n        prism_volume = h * l * prism_length * prism_height\n        print(\"The volume is : \", prism_volume)\n        return prism_volume\n    except:\n        print(\"The volume is : \", \"0\")\n        print(\"Problems with calculations\")\n        return 0\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = (b*h)/2\n    b = (b/3) - a\n    h = (b*h)/3\n    return a*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if not isinstance(l,list) and not isinstance(b,list) and not isinstance(h,list) :\n        return 'Empty list'\n    else :\n        if l == [] or b == [] or h == [] :\n            return 'Empty list'\n        else :\n            if l[0] == 0 and b[0] == 0 and h[0] == 0 :\n                return 'Nothing'\n            else :\n                p = b[1]*h[1]*(l[0] + b[0])\n                q = h[0]*(l[0] + b[0])\n                r = l[1]*(h[1] + b[1])\n                S = p*q*r\n                return round(S,3)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (b*h)**3\n    return volume\ndef find_Volume_V(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangle.\n    '''\n    volume = l*b*h\n    return volume\ndef find_Volume_I(l,b,h) : \n    '''\n    Write a python function to find the volume of a circle.\n    '''\n    volume = 4*pi*l**2*h\n    return volume\ndef find_Volume_J(l,b,h) : \n    '''\n    Write a python function to find the volume of a trapezoid.\n    '''\n    volume = (2*b*l)**2\n    return volume\ndef find_Volume_k(l,b,h) : \n    '''\n    Write a python function to find the volume of a parallelogram.\n    '''\n    volume = 4*pi*l**2*h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (4/3)*(h**3)\n    if l < 0 : volume = volume*(-1)\n    if b < 0 : volume = volume*(-1)\n    if h < 0 : volume = volume*(-1)\n    if l == 0 and b == 0 : volume = 0\n    return volume\n    \n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l * b * h) / 4\n    print(v)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    new_text = \"\"\n    for character in text:\n        if character.islower():\n            new_text += character.lower()\n        else:\n            new_text += character\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    if text.count('_')>0:\n        return False\n    elif text.count('_')==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lowercase_text = re.findall(r'[a-z]+', text)\n    for letter in lowercase_text:\n        if '_' in letter:\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Your code here\n    return re.match('[a-zA-Z]',text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #Perform regex\n    x = re.search('([a-z]+[0-9]*)?_([a-z0-9]*[A-Z]*)(_[a-z0-9]*)', text)\n    #Check if there is no match\n    if x!= None:\n        #If so, return false\n        return False\n    #If the input string is empty, return false\n    if text == \"\":\n        return False\n    #Check if the input string contains one or more whitespace characters\n    for c in text:\n        if c!= \" \" and c!= \" \" and c!= \" \" and c!= \" \":\n            return False\n    #Check if the input string contains one or more non-alphabetic characters\n    for c in text:\n        if c not in \"abcdefghijklmnopqrstuvwxyz\":\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lowercase = [char for char in text if char.lower() in \"abcdefghijklmnopqrstuvwxyz\"]\n    if text_lowercase!= []:\n        return True\n    else:\n        return False\ndef text_upper_caps(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters joined with an underscore and false otherwise.\n    '''\n    text_uppercase = [char for char in text if char.isupper()]\n    if text_uppercase!= []:\n        return True\n    else:\n        return False\ndef text_all_caps(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of all uppercase letters joined with an underscore and false otherwise.\n    '''\n    text_all_caps = [char for char in text if char.isupper() or char.isupper() or char.isupper() or char.isupper() or char.islower() or char.islower() or char.islower() or char.isalpha() or char.isalpha() or char.isalpha()]\n    if text_all_caps!= []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # text = text.lower()\n    # p = re.compile('[A-Za-z0-9_]+')\n    # m = p.findall(text)\n    # return m!= ''\n    # #return text.lower().isalpha()\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lower_case_lower = text.lower()\n    for i in lower_case_lower:\n        if i not in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9']:\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile(r'(\\W|^)([a-zA-Z]{2,}\\w)([a-zA-Z]{2,}[a-zA-Z]{2,})')\n    return bool(regex.match(text))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # split the text into a list of characters\n    text_list = [char for char in text.lower()]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a * 4) + (a * 4)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if not isinstance(a, int):\n        raise TypeError('a must be an integer')\n    if a <= 0:\n        raise ValueError('side length must be positive')\n    return a ** 2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*(4-1)*a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    if len(a)!= 0:\n        for i in range(len(a)):\n            perimeter += a[i]**2\n        return perimeter\n    else:\n        return 0\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    result = 0\n    if (type(a)!= int):\n        raise Exception('Input must be an Integer.')\n    if (a < 0):\n        raise Exception('Side length must be positive.')\n    if(a == 0):\n        return 0\n    for i in range(0,a):\n        result = result + i * i\n    return result\n    \n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    print(f'The perimeter of the square {a} is {square_perimeter(a)}.')\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char not in string[:len(string)//2]]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string)==0 or len(string)<1:\n        return ''\n    temp_str = ''\n    for i in string:\n        if i in string:\n            temp_str = i\n            string = string[1:]\n            break\n    return temp_str\n        \n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    list_ = []\n    for char in string: \n        if char in string[:]: \n            list_.append(char)\n    return list_\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    chars_list = []\n    for char in string:\n        if char in chars_list:\n            chars_list.remove(char)\n    return chars_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Remove the first string\n    string = string[1:]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [string[0:i] for i in range(len(string)) if string[0:i] in string]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for char in string:\n        if char in string:\n            string = string.replace(char, '')\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    for i in range(len(string)):\n        if string[i] not in string[0:i]:\n            return string[0:i]+string[i:]\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if string[0] == 'a' or string[0] == 'A':\n        string = string[1:]\n    if string[-1] == 'a' or string[-1] == 'A':\n        string = string[:-1]\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [chr(i) for i in range(ord(string[0]), ord(string[-1])+1) if i!= 0]\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return \"This is an abstract test function\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = []\n    for num in arraynums:\n        if num in duplicate:\n            return True\n        else:\n            duplicate.append(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert arraynums == list(arraynums), f'{arraynums}!= {list(arraynums)}'\n    assert len(arraynums) == len(set(arraynums)), f'{arraynums}!= {list(set(arraynums))}'\n    assert not arraynums[0] in arraynums, f'{arraynums} == {[arraynums[0], arraynums[1], arraynums[2], arraynums[3], arraynums[4], arraynums[5], arraynums[6], arraynums[7], arraynums[8], arraynums[9], arraynums[10], arraynums[11], arraynums[12], arraynums[13], arraynums[14], arraynums[15], arraynums[16], arraynums[17], arraynums[18], arraynums[19], arraynums[20], arraynums[21], arraynums[22], arraynums[23], arraynums[24], arraynums[25], arraynums[26], arraynums[27], arraynums[28], arraynums[29], arraynums[30], arraynums[31], arraynums[32], arraynums[33], arraynums[34], arraynums[35], arraynums[36], arraynums[37], arraynums[38], arraynums[39], arraynums[40], arraynums[41], arraynums[42], arraynums[43], arraynums[44], arraynums[45], arraynums[46], arraynums[47], arraynums[48], arraynums[49], arraynums[50]]}\n    assert not arraynums[0] in arraynums[1:], f'{arraynums[0]} == {arraynums[1:]}'\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # your code goes here\n    return\n    # test your code\n    \n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        print(i)\n        print(arraynums.count(i))\n        if arraynums.count(i) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(duplicate(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create list of numbers\n    numlist = arraynums\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array2 = arraynums\n    duplicates = []\n    for i in range(len(array2)):\n        for j in range(len(array2)):\n            if array2[i] == array2[j]:\n                duplicates.append(array2[i])\n    if len(duplicates) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    checker = set()\n    checker.update(arraynums)\n    \n    for i in arraynums:\n        if i in checker:\n            return True\n    \n    return False\n    \n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    count = 0\n    for i in range(len(arraynums)):\n        for j in range(i + 1, len(arraynums)):\n            if (arraynums[i] == arraynums[j]):\n                count += 1\n    return count == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%2==0"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==1: \n        return \"Woodball\"\n    else:\n        return \"Not Woodball\"\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0: \n        print('False')\n        exit()\n    else: \n        print('True')\n        exit()\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%2 == 0 and x >= 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #Initialize list\n    rev_list = []\n    #Iterate through list\n    for i in range(1, len(str(num))):\n        #If the current digit is not a digit, break out of the loop\n        if not (num % int(str(num)[i])):\n            break\n        #Add the digit back into the rev list\n        rev_list.append(str(num)[i])\n    #If the list contains any negative numbers, then the digit has been added to the list\n    if rev_list:\n        for i in rev_list:\n            if int(i) < 0:\n                rev_list.append(i)\n        #Return the reversed list\n        return ''.join(rev_list[::-1])\n    #Else, return a zero if the list is empty\n    else:\n        return '0'\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num <= 1:\n        return 0\n    else:\n        if num == 2:\n            return 1\n        else:\n            if num % 2 == 0:\n                return rev(num/2)\n            else:\n                return rev(3*num + 1)\nprint(rev(int(input(\"Give a number: \")))"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = int(num)\n    rev = rev * -1\n    while rev >= 0:\n        num = rev\n        rev = rev // 10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    temp = num\n    while num!= 0:\n        temp = temp * 10 + num % 10\n        num = num // 10\n    \n    if temp == 0:\n        rev = 1\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if (num == 0):\n        return True\n    if (num < 0):\n        return False\n    return (num < 0 and rev(num - 2) and (num < 0 or not rev(num - 1)))\n    \n    \nprint(rev(5))\nprint(rev(-5))"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num >= 2:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Your code goes here\n    \n    return num\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    elif num < 0:\n        return False\n    else:\n        return rev(num // 2) or num < 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > rev:\n        rev = rev * 2\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = int(str(num)[::-1])\n    if reverse % 2 == 0:\n        print(num, \"is even.\")\n    else:\n        print(num, \"is odd.\")\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 :\n        return 0\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    '''\n    Test Case 1: Number of elements in the list is 1.\n    >>> find_Max_Num([3,5,7,8,9])\n    3\n    '''\n    \n    max_num = 0\n    \n    # Check if number of elements is 1\n    if len(arr) == 1:\n        return arr[0]\n    \n    # Iterate through the list of numbers in the list\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            if arr[i] > max_num:\n                max_num = arr[i]\n    \n    # Return the number that is the largest\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            num = arr[i] * arr[j]\n            if num > numMax :\n                numMax = num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_set = set(arr)\n    return max(num_set)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(len(arr)-1) : \n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_nums = []\n    for x in arr :\n        max_nums.append(x)\n    max_num = 0\n    for i in range(len(max_nums)) :\n        if max_num < max_nums[i] : \n            max_num = max_nums[i]\n    return max_num\n    \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    i = 0\n    l = len(arr)\n    f = 0\n    if(l < 10) : \n        return arr[0]\n    if(l%10 == 0) : \n        return arr[l//10]\n    while(i < l) : \n        if(arr[i] < arr[i-1] or arr[i] == arr[i-1]):\n            if(arr[i] < f) : \n                f = arr[i]\n        i = i + 1\n    return f\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # TODO: Write your function here\n    \n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in range(len(arr)) : \n        if arr[i] < max : \n            max = arr[i] \n    return max \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return True\n    elif x < y:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Do not modify the lines below \ud83d\udc47\n    if x < 0 and y < 0: \n        return True\n    if x < 0 and y > 0: \n        return False\n    if x > 0 and y > 0: \n        return False\n    if x > 0 and y < 0: \n        return False\n    if x < 0 and y < 0: \n        return False\n    if x < 0 and y > 0: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return True\n    else: \n        return False\n    \ndef not_equal(x,y): \n    '''\n    Write a python function to check whether the given two integers are not equal or not.\n    '''\n    if x == y: \n        return True\n    else: \n        return False\n    \ndef positive_or_negative(x,y): \n    '''\n    Write a python function to check whether the given two integers are positive or negative or not.\n    '''\n    if x > 0 and x < 0: \n        return True\n    else: \n        return False\n    \ndef random(x,y): \n    '''\n    Write a python function to check whether the given two integers are random or not.\n    '''\n    if x < 0 and y > 0: \n        return True\n    elif x > 0 and y < 0: \n        return True\n    else: \n        return False\n    \ndef odd(x,y): \n    '''\n    Write a python function to check whether the given two integers are odd or not.\n    '''\n    if x % 2 == 0 and y % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0: \n        return -1\n    if y<0: \n        return 1\n    if x>0 and y<0:\n        return -1\n    if x<0 and y>0:\n        return 1\n    if x>0 and y>0:\n        return -1\n    return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    elif x > 0 and y < 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return None\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0) and (y < 0):\n        return True\n    elif (x < 0) and (y > 0):\n        return False\n    elif (x > 0) and (y > 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x > 0 and y < 0) or (x < 0 and y > 0) \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    signs = [1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] \n    x = abs(x)\n    y = abs(y)\n    for i in range(len(signs)):\n        if signs[i]!= x and signs[i]!= y:\n            return 1\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0:\n        x = -x\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    assert isinstance(n, int) and n >= 0, \"Invalid input: n must be a positive integer\"\n    return n**(1/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # your code goes here\n    num = 0\n    \n    while n > 0:\n        if (n % 10) == 1:\n            num += n//10\n        n = n//10\n    return num \n    \nprint(is_octagonal(5))\nprint(is_octagonal(8))\nprint(is_octagonal(5))\nprint(is_octagonal(4))\nprint(is_octagonal(7))\nprint(is_octagonal(9))"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # n is an input nmber\n    l = n * (n + 1) // 2\n    # checking if the number of steps is equal to half of the length of input\n    if n * (n + 1) % 2 == 0:\n        l += 1\n    return l\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 6\n    elif n == 4: \n        return 24\n    elif n == 5: \n        return 120\n    elif n == 6: \n        return 720\n    elif n == 7: \n        return 840\n    elif n == 8: \n        return 1560\n    elif n == 9: \n        return 2820\n    elif n == 10: \n        return 53560\n    elif n == 11: \n        return 8880\n    elif n == 12: \n        return 102060\n    elif n == 13: \n        return 28440\n    elif n == 14: \n        return 535960\n    elif n == 15: \n        return 88380\n    elif n == 16: \n        return 108160\n    elif n == 17: \n        return 41560\n    elif n == 18: \n        return 88460\n    elif n == 19: \n        return 110640\n    elif n == 20: \n        return 42360\n    elif n == 21: \n        return 80240\n    elif n == 22: \n        return 108240\n    elif n == 23: \n        return 46460\n    elif n == 24: \n        return 87120\n    elif n == 25: \n        return 88040\n    elif n == 26: \n        return 110640\n    elif n == 27: \n        return 42360\n    elif n == 28: \n        return 80240\n    elif n == 29: \n        return 108240\n    elif n == 30: \n        return 46460\n    elif n == 31: \n        return 87120\n    elif n == 32: \n        return 102060\n    elif n == 33: \n        return 2820\n    elif n == 34: \n        return 53560\n    elif n == 35: \n        return 8880\n    elif n == 36: \n        return 108160\n    elif n == 37: \n        return 41560\n    elif n == 38: \n        return 88460\n    elif n == 39: \n        return 110640\n    elif n == 40: \n        return 42360\n    elif n == 41: \n        return 80240\n    elif n == 42: \n        return 108240\n    elif n == 43: \n        return 46460\n    elif n == 44: \n        return 87120\n    elif n == 45: \n        return 102060\n    elif n == 46: \n        return 2820\n    elif n == 47: \n        return 53560\n    elif n == 48: \n        return 8880\n    elif n == 49: \n        return 108160\n    elif n == 50: \n        return 41560\n    elif n == 51: \n        return 88460\n    elif n == 52: \n        return 110640\n    elif n == 53: \n        return 42360\n    elif n == 54: \n        return 80240\n    elif n == 55: \n        return 108240\n    elif n == 56: \n        return 46460\n    elif n == 57: \n        return 87120\n    elif n == 58: \n        return 102060\n    elif n == 59: \n        return 2820\n    elif n == 60: \n        return 53560\n    elif n == 61: \n        return 8880\n    elif n == 62: \n        return 108160\n    elif n == 63: \n        return 41560\n    elif n == 64: \n        return 88460\n    elif n == 65: \n        return 110640\n    elif n == 66: \n        return 42360\n    elif n == 67: \n        return 80240\n    elif n == 68: \n        return 108240\n    elif n == 69: \n        return 46460\n    elif n == 70: \n        return 87120\n    elif n == 71: \n        return 102060\n    elif n == 72: \n        return 2820\n    elif n == 73: \n        return 53560\n    elif n == 74: \n        return 8880\n    elif n == 75: \n        return 108160\n    elif n == 76: \n        return 41560\n    elif n == 77: \n        return 88460\n    elif n == 78: \n        return 110640\n    elif n == 79: \n        return 42360\n    elif n == 80: \n        return 80240\n    elif n == 81: \n        return 108240\n    elif n == 82: \n        return 46460\n    elif n == 83: \n        return 87120\n    elif n == 84: \n        return 102060\n    elif n == 85: \n        return 2820\n    elif n == 86: \n        return 53560\n    elif n == 87: \n        return 8880\n    elif n == 88: \n        return 108160\n    elif n == 89: \n        return 41560\n    elif n == 90: \n        return 88460\n    elif n == 91: \n        return 110640\n    elif n == 92: \n        return 42360\n    elif n == 93: \n        return 80240\n    elif n == 94: \n        return 108240\n    elif n == 95: \n        return 46460\n    elif n == 96: \n        return 87120\n    elif n == 97: \n        return 102060\n    elif n == 98: \n        return 2820\n    elif n == 99: \n        return 53560\n    elif n == 100: \n        return 8880\n    elif n == 101: \n        return 108160\n    elif n == 102: \n        return 41560\n    elif n == 103: \n        return 88460\n    elif n == 104: \n        return 110640\n    elif n == 105: \n        return 42360\n    elif n == 106: \n        return 80240\n    elif n == 107: \n        return 108240\n    elif n == 108: \n        return 46460\n    elif n == 109: \n        return 87120\n    elif n == 110: \n        return 102060\n    elif n == 111: \n        return 2820\n    elif n == 112: \n        return 53560\n    elif n == 113: \n        return 8880\n    elif n == 114: \n        return 108160\n    elif n == 115: \n        return 41560\n    elif n == 116: \n        return 88460\n    elif n == 117: \n        return 110640\n    elif n == 118: \n        return 42360\n    elif n == 119: \n        return 80240\n    elif n == 120: \n        return 108240\n    elif n == 121: \n        return 46460\n    elif n == 122: \n        return 87120\n    elif n == 123: \n        return 102060\n    elif n == 124: \n        return 2820\n    elif n == 125: \n        return 53560\n    elif n == 126: \n        return 8880\n    elif n == 127: \n        return 108160\n    elif n == 128: \n        return 41560\n    elif n == 129: \n        return 88460\n    elif n == 130: \n        return 110640\n    elif n == 131: \n        return 42360\n    elif n == 132: \n        return 80240\n    elif n == 133: \n        return 108240\n    elif n == 134: \n        return 46460\n    elif n == 135: \n        return 87120\n    elif n == 136: \n        return 102060\n    elif n == 137: \n        return 2820\n    elif n == 138: \n        return 53560\n    elif n == 139: \n        return 8880\n    elif n == 140: \n        return 108160\n    elif n == 141: "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return False\n    \n    # base case\n    if n == 0:\n        return 1\n    \n    # recursive case\n    if n == 1:\n        return 2\n    \n    # recursive case\n    return 3 * is_octagonal(n - 1)\n    \nprint(is_octagonal(4))\nprint(is_octagonal(5))\nprint(is_octagonal(6))\nprint(is_octagonal(7))\nprint(is_octagonal(8)"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n==1: \n        return n\n    else: \n        return n * is_octagonal(n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n    if n == 6:\n        return 32\n    if n == 7:\n        return 64\n    if n == 8:\n        return 128\n    if n == 9:\n        return 256\n    if n == 10:\n        return 512\n    if n == 11:\n        return 1024\n    if n == 12:\n        return 2048\n    if n == 13:\n        return 4096\n    if n == 14:\n        return 8192\n    if n == 15:\n        return 16384\n    if n == 16:\n        return 32768\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if(n <= 0): \n        return False\n    \n    if n == 1: \n        return 1\n    \n    else: \n        return n * is_octagonal(n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    sqrt_n = n**0.5 \n    for i in range(2,int(sqrt_n)+1): \n        if n%i==0: \n            return False\n            break\n    return True\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    squared_squares = n**2\n    square_root = int(n**0.5)\n    for i in range(1, square_root+1):\n        squared_squares += (square_root-i)**2\n    if squared_squares == n:\n        return int(n)\n    else:\n        return 0\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    if l < 2:\n        return 0\n    else:\n        c = count_Substrings_rec(s,0,0,l,{})\n        return c\ndef count_Substrings_rec(s,i,j,l,d):\n    if i == l:\n        return 1\n    if s[i] == s[j]:\n        return count_Substrings_rec(s,i+1,j+1,l,d)\n    if d[s[i]] > 0:\n        return d[s[i]]\n    c = count_Substrings_rec(s,i+1,j,l,d)\n    d[s[i]] = c\n    return c\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_substring_and_sum_of_digits(s,length):\n        '''\n        Returns number of substring with sum of digits equal to length and number of substrings.\n        '''\n        substrings=0\n        \n        for i in range(0,length):\n            if s[i] in s[i:]:\n                substrings+=1\n        return substrings\n    \n    substrings = count_substring_and_sum_of_digits(s, len(s))\n    return substrings\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n=0\n    d=0\n    for i in range(len(s)):\n        if s[i]=='0':\n            n+=1\n        else:\n            d+=s[i]\n    return n+d\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dic = defaultdict(int)\n    if len(s) == 0:\n        return 0\n    for i in range(len(s)):\n        dic[s[i]] = dic.get(s[i], 0) + 1\n    \n    return dic[s[0]]\n    \n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    answer=0\n    s_list = s.split()\n    for i in range(len(s_list)):\n        if len(s_list[i])==1:\n            answer+=1\n    return answer\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substring_count = 0\n    length = len(s)\n    for i in range(0,length):\n        substring_count += count_one_digit(s[:i]) + count_one_digit(s[i+1:])\n    return substring_count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    for i in range(len(s)):\n        temp = s[i:i+len(s)]\n        if len(str(temp)) == len(temp):\n            ans += 1\n    return ans\ndef count_Substrings_2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    count = 0\n    for i in range(len(s)):\n        temp = s[i:i+len(s)]\n        if len(str(temp)) == len(temp):\n            count += 1\n            if count == 1:\n                ans += 1\n            else:\n                ans += count_Substrings(str(temp))\n            count = 0\n    return ans"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if int(s[i:]) == s[i:]:\n            count = count + 1\n    \n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if(s[i:j].isdigit()):\n                count += 1\n                d[s[i:j]] += 1\n    return count,d\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d=defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]]+=1\n    l=0\n    for i in d:\n        l+=d[i]*(d[i]==1)\n    return l\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n    \ndef main():\n    '''\n    Test program.\n    '''\n    print(\"smallest number in this list:\", smallest_num([1,2,3,4,5]))\n    print(\"smallest number in this list:\", smallest_num([3,4,5,6,7,8]))\n    print(\"smallest number in this list:\", smallest_num([1,2,3,4,5,6,7,8,9]))\n    print(\"smallest number in this list:\", smallest_num([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    print(min(xs))\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return -1\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #Smallest number:\n    smallest = xs[0]\n    #Loop through list\n    for num in xs:\n        #If current number is smaller\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = min(xs)\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for x in xs:\n        if x < min:\n            min = x\n    return min\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = 0\n    for index, value in enumerate(test_list):\n        difference = value - test_list[(index+1)%len(test_list)]\n        if difference > maximum:\n            maximum = difference\n    return maximum\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    available_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            available_pairs.append((test_list[i], test_list[j]))\n    if len(available_pairs) == 0:\n        return None\n    if len(available_pairs) == 1:\n        return available_pairs[0][1] - available_pairs[0][0]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            difference = test_list[j] - test_list[i]\n            if difference > max_difference:\n                max_difference = difference\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # creating a dict to store the pairs and storing them in it\n    dict = dict()\n    for i in test_list:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    \n    max_difference = max(dict.values())\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Create empty list for dictionary with key as string value and value as integer.\n    dict_list = {}\n    max_difference = 0\n    # Loop through the tuple list\n    for i in test_list:\n        # Initialize the key as the string key and value as the integer value.\n        key = i[0]\n        value = i[1]\n        # Check the key and value in dictionary.\n        if key in dict_list:\n            # If the key is present in the dictionary\n            if value - dict_list[key] > max_difference:\n                max_difference = value - dict_list[key]\n        else:\n            # If the key is not present in dictionary\n            dict_list[key] = value\n    # Return the maximum difference in list of tuples\n    return max_difference\n    \n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    index = 0\n    while index < len(test_list)-1:\n        # Add the maximum difference\n        max_difference = test_list[index] - test_list[index+1]\n        index = index + 1\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    test_list.sort()\n    print(test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if diff > max_difference:\n                max_difference = diff\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum_difference = 0\n    for index in range(len(test_list) - 1):\n        first_list_item = test_list[index]\n        second_list_item = test_list[index + 1]\n        if abs(first_list_item - second_list_item) > maximum_difference:\n            maximum_difference = abs(first_list_item - second_list_item)\n    return maximum_difference\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if not isinstance(subjectmarks, list):\n        raise TypeError(\"subjectmarks must be a list\")\n    subjectmarks.sort(key = lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks=[]\n    for i in subjectmarks:\n        marks.append(i[1])\n    marks.sort()\n    return marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    # get the lengths of the tuples\n    length = len(subjectmarks)\n    \n    # traverse the list\n    for i in range(length - 1):\n        # find the index of the last item in the tuples list\n        index = length - 1 - i\n        # compare the values of the tuple in the index position\n        if subjectmarks[index][1] > subjectmarks[index][0]:\n            # move the index in the list down\n            index -= 1\n        # if the values of the tuples are the same, insert the values in the index position\n        else:\n            # insert the tuples in the index position\n            subjectmarks.insert(index, subjectmarks.pop(i))\n            \n    # return the sorted list\n    return sorted(subjectmarks)\n        \n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Dictionary to hold the tuple with the second value\n    subjectmarks_2 = {}\n    for subject, marks in subjectmarks:\n        subjectmarks_2[subject] = marks\n    # Sorting the marks dictionary\n    subjectmarks_2_sorted = sorted(subjectmarks_2.items(), key = lambda x : x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda k: k[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: (x[1], x[0]))\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1], reverse=True)\n    return subjectmarks\n    \ndef main():\n    '''\n    Write a function to sort a list of tuples.\n    '''\n    print(\"****** Sorting using the second value of each tuple ******\")\n    subjectmarks = [('roll-number', '5', 5), ('roll-number', '6', 6), ('roll-number', '7', 7), ('roll-number', '8', 8), ('roll-number', '9', 9), ('roll-number', '10', 10)]\n    subjectmarks.sort(key=lambda x:x[1], reverse=True)\n    subjectmarks.sort(key=lambda x:x[2], reverse=True)\n    subjectmarks.sort(key=lambda x:x[2], reverse=True)\n    subjectmarks.sort(key=lambda x:x[2], reverse=True)\n    subjectmarks.sort(key=lambda x:x[2], reverse=True)\n    subjectmarks.sort(key=lambda x:x[2], reverse=True)\n    print(subjectmarks)\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        if type(data_list) is list:\n            for index in range(len(data_list)):\n                if index % 2 == 0:\n                    flatten(data_list[index])\n                else:\n                    flatten(data_list[index][0])\n                    flatten(data_list[index][1])\n    flatten(data_list)\n    return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: Implement this function\n    #\n    # @param data_list a list of integers/floats/strings/numbers/other lists.\n    # @return a list of integers/floats/strings/numbers/other lists\n    #\n    # Solution:\n    # pass\n    # for i in range(len(data_list)):\n    #     data_list[i] = list(data_list[i])\n    #     for j in range(len(data_list[i])):\n    #         if type(data_list[i][j]) == type(data_list[i]):\n    #             pass\n    #         else:\n    #             data_list[i][j] = recursive_list_sum(data_list[i][j])\n    # return data_list\n    '''\n    {\n        \"a\":[1,2,3,{},{}],\n        \"b\":[1,2,3,{},{}],\n        \"c\":[1,2,3,{},{}],\n        \"d\":[1,2,3,{},{}],\n        \"e\":[1,2,3,{},{}],\n        \"f\":[1,2,3,{},{}],\n        \"g\":[1,2,3,{},{}],\n        \"h\":[1,2,3,{},{}]\n    }\n    '''\n    i = 0\n    j = 0\n    result_list = []\n    while i < len(data_list):\n        result_list.append(data_list[i])\n        while j < len(data_list[i]):\n            if type(data_list[i][j]) == type(data_list[i][j]):\n                pass\n            else:\n                data_list[i][j] = recursive_list_sum(data_list[i][j])\n        j = j + 1\n        i = i + 1\n    return result_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == list:\n        data_list = data_list[:]\n        for i in range(0,len(data_list)):\n            if type(data_list[i]) == dict:\n                data_list[i] = recursive_list_sum(data_list[i]['numbers'])\n            elif type(data_list[i]) == list:\n                for j in range(0,len(data_list[i])):\n                    data_list[i][j] = recursive_list_sum(data_list[i][j])\n        return data_list\n    return data_list\n    \ndef main():\n    data = [1,2,3,4,5]\n    print(recursive_list_sum(data))\n    \nmain()"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for d in data_list:\n        total += d\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    output_list = []\n    for element in data_list:\n        if type(element) == list:\n            output_list += element\n    return sum(output_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if len(data_list) == 0:\n        return\n    \n    # recursive call\n    return (sum(recursive_list_sum(item) for item in data_list))\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n    \ndef main():\n    data_list = [1,2,3,4,5]\n    print(recursive_list_sum(data_list))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total_sum = 0\n    for data in data_list:\n        total_sum += data\n    return total_sum\n    # TODO: Return the result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Create an empty list of results\n    results = []\n    \n    # Recursively call the function\n    results = recursive_list_sum(data_list, results)\n    \n    # Return the results\n    return results\n    "
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    c = 0\n    for i in list:\n        if i>0:\n            c+=1\n    print('the total of positive numbers in the list is : ',c)\n    return c\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # TODO: Fill this in with a one line description of your solution.\n    # Hint: You can use the enumerate function to get the index of a key.\n    # Hint: You can use the len() function to get the length of a list.\n    # The enumerate function's return value is the tuple of (index, value).\n    # To get the list of indices and values, you can use the enumerate() function.\n    count = 0\n    for idx, num in enumerate(list):\n        if num > 0:\n            count += 1\n    return count\n    \nprint(pos_count([-1, -2, -3, -4, -5])) # 2\nprint(pos_count([0, 2, 4, 6, 8, 9])) # 4"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    total = 0\n    for num in list:\n        if num > 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum = 0\n    for value in list:\n        if value >= 0:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return list.count(1)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            positive += 1\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    s = list(set(range(1, n+1)))\n    return int(len(s)**(1/2))\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 1 or n == 0:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    \n    return bell_number(n - 1) + bell_number(n - 2)\n    \ndef is_valid(n,n_min,n_max):\n    '''\n    Write a function to check if an array is valid or not.\n    '''\n    return n >= n_min and n <= n_max\n    \ndef count_bell(n,n_min,n_max):\n    '''\n    Write a function that returns the number of ways to partition the array between the given numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 2\n    else:\n        n_min -= 2\n        n_max += 2\n        return count_bell(n - 1,n_min,n_max) + count_bell(n - 2,n_min,n_max) + count_bell(n - 3,n_min,n_max) + count_bell(n - 4,n_min,n_max) + count_bell(n - 5,n_min,n_max)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 1:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    # check case n = 0\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 0\n    elif n < 1:\n        return 0\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1: return 1\n    if n==2: return 2\n    if n==3: return 4\n    \n    ways=[]\n    ways.append(1)\n    ways.append(1+bell_number(n-1))\n    ways.append(2)\n    ways.append(3)\n    \n    return max(ways)\n    \n    "
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    \n    return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # base case:\n    if n <= 2:\n        return n\n    # recurrence relation:\n    return (n - 1) // (n - 1) + (2 * bell_number(n - 1) - n)"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # find the first and last index of all 1's in array\n    first_index = 0\n    last_index = len(A) - 1\n    while first_index < last_index:\n        \n        # if the 1 is at the index, then it is not monotonic\n        if A[first_index] == 1 and A[last_index] == 1:\n            return False\n        \n        # if the 1 is not at the index, then we need to add one to index\n        elif A[first_index] == 1:\n            first_index = first_index + 1\n        \n        elif A[last_index] == 1:\n            last_index = last_index - 1\n    \n    # if we reach here, then the array is monotonic\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    #Iterate through the array elements in reverse order.\n    for i in range(0,len(A)-1):\n        #If the next element is less than the current one, it is not monotonic.\n        if A[i+1]<A[i]:\n            is_monotonic = False\n    return is_monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # base case: zero dimensional arrays are monotonic\n    if len(A) <= 2: \n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Fill in the blanks\n    check_list = []\n    for i in range(len(A)):\n        if A[i] > A[i+1]:\n            check_list.append(True)\n        else:\n            check_list.append(False)\n    return check_list\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if isinstance(A,np.ndarray):\n        if A.ndim==1:\n            if A.shape[0]>1:\n                if A[0]==A[1]:\n                    return True\n            else:\n                return False\n        else:\n            if np.all(A[:,0]==A[0]):\n                return True\n            else:\n                return False\n    else:\n        if A.ndim==1:\n            if A[0]==A[1]:\n                return True\n            else:\n                return False\n        else:\n            if np.all(A[:,0]==A[0]):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check the length\n    if len(A) <= 1:\n        return True\n    else:\n        # check for negative and positive \n        if A[0] > A[-1]:\n            return True\n        else:\n            # positive = in ascending order\n            # negative = in descending order\n            # positive_index = 0\n            # negative_index = len(A) - 1\n            # while positive_index <= negative_index:\n            #     if A[positive_index] < A[negative_index]:\n            #         return True\n            #     elif A[positive_index] > A[negative_index]:\n            #         return False\n            #     else:\n            #         positive_index += 1\n            #         negative_index -= 1\n            #     else:\n            #         return False\n            # else:\n            #     return True\n            #\n            # return False\n            return True if A[0] <= A[1] else False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (is_monotonic(A[0])):\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i - 1]:\n                return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    # Find the starting and ending of the elements in the array.\n    s = 0\n    e = n-1\n    # Compute the length of the array.\n    L = n-1\n    # Check if the array is monotonic.\n    while s<=e:\n        # Check if array elements is less than 0 or equal to 0.\n        if A[s] < A[e]:\n            # Swap the elements.\n            temp = A[s]\n            A[s] = A[e]\n            A[e] = temp\n            # Compute the length of the array.\n            L -= 1\n        # If the array elements are equal to 0 then there are no\n        # elements in the array.\n        elif A[s] == 0 and A[e] == 0:\n            return True\n        # Check if the array elements are 0.\n        elif A[s] == 0 or A[e] == 0:\n            return False\n        # Check if elements are equal to 1.\n        elif A[s] == A[e]:\n            # Swap the elements.\n            temp = A[s]\n            A[s] = A[e]\n            A[e] = temp\n            # Compute the length of the array.\n            L -= 1\n        # Increment the start and end.\n        else:\n            s += 1\n            e -= 1\n        # If array elements are equal to 1 then there are no\n        # elements in the array.\n        if A[s] == A[e]:\n            return False\n        # If array elements are equal to 0 then there are no\n        # elements in the array.\n        if A[s] == 0 or A[e] == 0:\n            return False\n    # If there are elements in the array, then there are no elements in the array.\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Print the list\n    print(l)\n    print(s)\n    # Create a set of sub-lists\n    sub_l = set(map(lambda x: x[1], l))\n    sub_s = set(map(lambda x: x[0], s))\n    # Check whether the sub-lists contains the given sub-lists\n    return sub_l.issubset(sub_s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s1 = l[:]\n    if len(l) == 1:\n        return True\n    if s1[0] in l[1:] and is_sublist(l, s1[1:]):\n        return is_sublist(l, s1[1:])\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)==0:\n        return True\n    if l[0]==s:\n        if is_sublist(l[1:],s):\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if l.count(i) > 0:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for item in s:\n        if l.count(item) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == len(s):\n        return True\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True\n    \ndef search(l,s):\n    '''\n    Write a function to search a given list for the given sublist.\n    '''\n    for i in range(len(l)):\n        if s == l[i]:\n            return i\n    return -1\n    \ndef union(l1,l2):\n    '''\n    Write a function to union two given sub-lists.\n    '''\n    pass\n    \ndef dfs(l, i, visited):\n    '''\n    Write a recursive function to do the following:\n    - Append every element of the input list to the stack.\n    - If the stack is empty, then append it into the return value.\n    - If the stack is not empty, then return the first element of the stack\n    which is the smallest element of the input list.\n    '''\n    \n    #Append to the stack\n    if(i<len(l) and l[i] not in visited):\n        visited.append(l[i])\n        dfs(l, i+1, visited)\n    \n    #Return the smallest element from the stack\n    if(i<len(l)):\n        return l[i]\n    else:\n        return False\n    \ndef main():\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(search(l, 6))\n    print(is_sublist(l, 6))\n    \n    l = [2, 3, 4, 5]\n    print(search(l, 5))\n    print(is_sublist(l, 5))\n    \n    l = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    print(search(l, 0))\n    print(is_sublist(l, 0))\n    \n    l = []\n    print(search(l, 0))\n    print(is_sublist(l, 0))\n    \n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(dfs(l, 0, []))\n    \n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(dfs(l, 1, []))\n    \n    l = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    print(dfs(l, 0))\n    print(is_sublist(l, 0))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if type(l)!= list:\n        raise TypeError('The list must be given as a list')\n    for item in l:\n        if type(item)!= list:\n            raise TypeError('The given list must contain a list')\n    if not s:\n        raise TypeError('The given sublist must be non-empty')\n    # your code here\n    if s[0] in l:\n        for i in range(len(s)):\n            if l[i]!= s[i]:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i not in s:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return True\n    elif l[0] == s:\n        return is_sublist(l[1:], s)\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Step 1: Initialize empty list\n    equal_tuple = []\n    # Step 2: Iterate through each item of input\n    for i in range(0, len(Input)):\n        if len(Input[i])!= len(set(Input[i])):\n            return False\n    # Step 3: Check if all the items of input have the same value\n    for i in range(0, len(Input)):\n        # Check if set(Input[i]) contains all the same value\n        if set(Input[i])!= set(Input[i]):\n            return False\n    # Step 4: Add all the items to the equal_tuple list\n    for i in range(0, len(Input)):\n        equal_tuple.append(Input[i])\n    # Step 5: Return the list of the pairs\n    return equal_tuple\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) <= 0:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_1 = tuple(Input)\n    print(f\"tuple_1: {tuple_1}\")\n    tuple_2 = tuple(Input)\n    print(f\"tuple_2: {tuple_2}\")\n    #tuple_1 = tuple(map(tuple, Input))\n    #tuple_2 = tuple(map(tuple, Input))\n    #tuple_3 = tuple(map(tuple, Input))\n    tuple_1_length = len(tuple_1)\n    tuple_2_length = len(tuple_2)\n    \n    if tuple_1_length == tuple_2_length:\n        print(f\"The given tuple has a equal length\")\n        return True\n    else:\n        print(f\"The given tuple has a different length\")\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(0,len(Input)):\n        for j in range(0,i+1):\n            if(len(Input[j])!= len(Input[i])):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your code here\n    if len(Input) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i) < 2:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        t = (Input[i][0], Input[i][1], Input[i][2])\n        if len(t)!= len(set(t)):\n            return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Len = []\n    for i in Input:\n        Len.append(len(i))\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    i=0\n    while(i<len(Input)):\n        j=0\n        while(j<len(Input[i])):\n            if(len(Input[i][j])!=len(Input[i][j+1])):\n                return False\n            j=j+1\n        i=i+1\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length < 2:\n        return\n    for i in range(length-1):\n        for j in range(length-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        #print(f\"i:{i}\")\n        for j in range(0, len(nums)-i-1):\n            #print(f\"j:{j}\")\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n            print(nums)\n            #print(f\"j:{j}\")\n            #print(f\"j+1:{j+1}\")\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    # Assume that all elements are in sorted order\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    \n    # Sorts the remaining list\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_elements(list1, list2):\n        '''\n        Perform list1 sorted with list2.\n        '''\n        if len(list1) < len(list2):\n            return sort_elements(list2, list1)\n        elif len(list2) < len(list1):\n            return sort_elements(list1, list2)\n        else:\n            i = 0\n            j = 0\n            while i < len(list1) and j < len(list2):\n                if list1[i] < list2[j]:\n                    i += 1\n                else:\n                    j += 1\n            if i < len(list1):\n                list1[i:i + len(list2)] = list2[j:]\n            else:\n                list2[j:j + len(list1)] = list1[i:]\n            return list1, list2\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(arr):\n        if len(arr) == 0:\n            return []\n        if len(arr) == 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        return sort(left) + [arr[mid]] + sort(right)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n >= 1:\n        if n <= 10:\n            # if n is divided by 2\n            if n%2!= 0:\n                return 'Square'\n            else:\n                return 'Difference'\n        else:\n            return 'Square'\n    else:\n        return 'Square'\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Empty list to store the result\n    res = []\n    if n <= 0: \n        return \"\"\n    elif n == 1: \n        return \" \"\n    elif n == 2: \n        return \"*\"\n    elif n == 3: \n        return \"***\"\n    else: \n        res.append(dif_Square(n//3))\n        res.append(dif_Square(n//3*2))\n        res.append(dif_Square(n//3*3))\n        res.append(\" \")\n        res.append(dif_Square(n//3*4))\n        res.append(dif_Square(n//3*5))\n        return ''.join(res)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    return dif_Square(n-1) or dif_Square(n-2)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        j = 2*i\n        if (i % j == 0) or (i % j == 0):\n            print(\"Square can be represented as the difference of two squares:\", i, \"and\", i-j,\"is not equal to zero.\")\n            return\n    print(\"Square can be represented as the difference of two squares:\", i, \"and\", i-j,\"is equal to zero.\")\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0: \n        raise ValueError('n must be > 0.')\n    if n == 1: \n        return 0\n    else: \n        result = n - 1\n        return result \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return 'Equal to 0!'\n    elif n == 1:\n        return 'Equal to 1!'\n    else:\n        return 'Not equal to 0 or 1!'\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        print('Invalid input')\n        return\n    else:\n        if n == 0:\n            print('Number 0 cannot be represented as difference')\n        else:\n            y = n // 2\n            x = n % 2\n            if x == 1:\n                if y == 1:\n                    print('This square can be represented as difference')\n                else:\n                    print('This square can not be represented as difference')\n            else:\n                print('This square can be represented as difference')\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Square divisor\n    div = n % 10\n    # Square\n    sq1 = n // 10\n    # Square\n    sq2 = n // 100\n    # Square\n    sq3 = n // 1000\n    # Square\n    sq4 = n // 10000\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return True\n    if n % 2 == 0: \n        return False\n    return (dif_Square(n//2) + dif_Square(n-1))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: return True\n    elif n == 1: return False\n    else: \n        diff = n-2*n%10\n        if diff == 0:\n            return True\n        elif diff == 1:\n            return False\n        else:\n            return dif_Square(diff)\n    "
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # creating a dictionary where the pattern array is stored\n    dictionary = {}\n    for pattern in patterns:\n        if pattern in dictionary:\n            dictionary[pattern] += 1\n        else:\n            dictionary[pattern] = 1\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return True if all(colors[i:i+len(patterns[i])] == patterns[i] for i in range(len(patterns))) else False\n    \n    \n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if patterns == None or len(colors)!= len(patterns):\n        return False\n    #assert len(colors) == len(patterns), 'Colors and patterns not match'\n    \n    for i in range(len(colors)):\n        if patterns[i] == 'o':\n            for j in range(len(patterns)):\n                if patterns[j] == 'o':\n                    return False\n        elif patterns[i] == 'x':\n            for j in range(len(patterns)):\n                if patterns[j] == 'x':\n                    return False\n        elif patterns[i] == 'g':\n            for j in range(len(patterns)):\n                if patterns[j] == 'g':\n                    return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    pattern_index = 0\n    for i in range(len(colors)):\n        if patterns[i][0] == colors[pattern_index][0]:\n            if patterns[i][1] == colors[pattern_index][1]:\n                if patterns[i][2] == colors[pattern_index][2]:\n                    if patterns[i][3] == colors[pattern_index][3]:\n                        if patterns[i][4] == colors[pattern_index][4]:\n                            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(patterns)):\n        for j in range(0, len(colors)):\n            if patterns[i] == colors[j]:\n                if j == 0 or patterns[i-1] == colors[j-1] or patterns[i-1] == colors[j+1]:\n                    return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    new_patterns = []\n    for i in range(0, len(patterns)):\n        new_pattern = {}\n        for key in patterns[i]:\n            new_pattern[key] = colors[i][key]\n            #print(\"KEY\", key, \"VALUE:\", new_pattern[key])\n        new_patterns.append(new_pattern)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if not is_samepattern(colors, pattern):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        for pattern in patterns:\n            if color == pattern[0]:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        for pattern in patterns:\n            if color in pattern:\n                return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    all_tuples = []\n    for tuple in test_list:\n        for index in range(0, len(tuple), 2):\n            if tuple[index] % K == 0:\n                all_tuples.append(tuple)\n    return all_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) % K == 0:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list = [(x, y) for x in test_list for y in test_list if x % y == 0]\n    return set(test_list)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list)):\n            if test_list[j][0] % K == 0:\n                if j < len(test_list)-1:\n                    if test_list[j][0] % test_list[j+1][0] == 0:\n                        if test_list[j][1] % test_list[j+1][1] == 0:\n                            if test_list[j][2] % test_list[j+1][2] == 0:\n                                tuples.append([test_list[j][0],test_list[j][1],test_list[j][2]])\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return_list = []\n    for i in test_list:\n        if i[0] % K == 0:\n            return_list.append(i)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for tup in test_list:\n        if tup[0] % K == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for a, b in test_list:\n        if len(set([a,b]))==K:\n            res.append(a, b)\n    return res"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return list(filter(lambda x: x[0] % K == 0, test_list))\n    \ndef find_combinations(n, k):\n    '''\n    Write a function to find all possible combinations of elements of size n from the given list.\n    '''\n    return list(itertools.combinations_with_replacement(range(1, n+1), n))\n    \ndef is_palindrome(test_list):\n    '''\n    Write a function to check if the given list is a palindrome.\n    '''\n    return test_list == list(filter(lambda x: x[::-1] == x, test_list))\n    \ndef permutations(test_list):\n    '''\n    Write a function to find all possible permutations of the given list of elements.\n    '''\n    return list(itertools.permutations(test_list))\n    \ndef power(base, power):\n    '''\n    Write a function to find the nth power of a given base, where n is positive.\n    '''\n    return base ** power\n    \ndef count_occurrences(nums, element):\n    '''\n    Write a function to count the number of times the given element appears in the given list of numbers.\n    '''\n    return nums.count(element)\n    \ndef unique_elements(test_list):\n    '''\n    Write a function to find all the unique elements of the given list of numbers.\n    '''\n    return list(set(test_list))\n    \ndef remove_duplicates(test_list):\n    '''\n    Write a function to remove all duplicates from the given list of numbers.\n    '''\n    return list(set(test_list))\n    \ndef largest_common_multiple(nums):\n    '''\n    Write a function to find the largest common multiple of the given numbers.\n    '''\n    return reduce(lambda x, y: (x * y) % mod, nums)\n    \ndef add(test_list):\n    '''\n    Write a function to add all numbers from the given list of numbers to the given list of numbers.\n    '''\n    return list(itertools.chain(*test_list))\n    \ndef solve():\n    '''\n    Write a function that takes a number as an input and returns the sum of all its digits.\n    '''\n    return sum(int(i) for i in list(str(number)))\n    \ndef next_greatest(test_list):\n    '''\n    Write a function to find the next greatest element from the given list of numbers.\n    '''\n    return max(test_list)\n    \ndef smallest_multiple(test_list):\n    '''\n    Write a function to find the smallest multiple of the given numbers.\n    '''\n    return reduce(lambda x, y: (x * y) % mod, test_list)\n    \ndef largest_duplicate_number(test_list):\n    '''\n    Write a function to find the largest duplicate number in the given list of numbers.\n    '''\n    return max(set(test_list), key=test_list.count)\n    \ndef check_substring(test_list, substring):\n    '''\n    Write a function to check if the given substring is contained in the given list of numbers.\n    '''\n    return any(i in test_list for i in substring)\n    \ndef check_tuple(test_list, tuple):\n    '''\n    Write a function to check if the given tuple is contained in the given list of numbers.\n    '''\n    return any(tuple[i] in test_list for i in range(len(tuple)))\n    \ndef check_digit(test_list, digit):\n    '''\n    Write a function to check if the given number is a digit.\n    '''\n    return test_list.count(digit) == 1\n    \ndef is_sorted(test_list):\n    '''\n    Write a function to check if the given list is sorted in ascending order.\n    '''\n    return sorted(test_list) == test_list\n    \ndef is_sorted_then_ascending(test_list):\n    '''\n    Write a function to check if the given list is sorted in descending order.\n    '''\n    return sorted(test_list, reverse=True) == test_list\n    \ndef first_difference(test_list):\n    '''\n    Write a function to find the first difference between all elements in the given list.\n    '''\n    return abs(sum(test_list) - sum(filter(lambda x: x % 2!= 0, test_list)))\n    \ndef factor(number):\n    '''\n    Write a function to calculate the factor of the given number.\n    '''\n    return math.sqrt(number)\n    \ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of the given number.\n    '''\n    return math.factorial(n)\n    \ndef is_palindrome(test_list):\n    '''\n    Write a function to check if the given list is a palindrome.\n    '''\n    return test_list == list(filter(lambda x: x[::-1] == x, test_list))\n    \ndef convert_to_heap(test_list):\n    '''\n    Write a function to convert the given list to a heap in which each node is in the form of an integer.\n    '''\n    return [int(i) for i in list(str(test_list))]\n    \ndef merge_heap(test_list):\n    '''\n    Write a function to merge all the nodes in a heap.\n    '''\n    heap = convert_to_heap(test_list)\n    heapq.heapify(heap)\n    return heap\n    \ndef merge_sort(test_list):\n    '''\n    Write a function to sort the given list using the merge sort algorithm.\n    '''\n    heap = convert_to_heap(test_list)\n    if len(heap) > 1:\n        middle = len(heap) // 2\n        left = heap[:middle]\n        right = heap[middle:]\n        merge_sort(left)\n        merge_sort(right)\n        result = merge(left, right)\n        return result\n    else:\n        return heap\n    \ndef merge(left, right):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    result = []\n    result_index = 0\n    while left and right:\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    while left:\n        result.append(left.pop(0))\n    while right:\n        result.append(right.pop(0))\n    return result\n    \ndef prime_factors(n):\n    '''\n    Write a function to find all prime numbers less than or equal to the given number.\n    '''\n    count = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return [n]\n    else:\n        return [i for i in range(2, n + 1) if n % i == 0]\n    \ndef mod_inv(n):\n    '''\n    Write a function to find the modular inverse of a number.\n    '''\n    if n == 0:\n        return n\n    return mod_inv(n % n)\n    \ndef jacobi_symbol(n):\n    '''\n    Write a function to find the Jacobi symbol of the given number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    if n == 4:\n        return 1\n    if n == 5:\n        return 0\n    if n == 6:\n        return -1\n    if n == 7:\n        return -1\n    if n == 8:\n        return 0\n    if n == 9:\n        return -1\n    if n == 10:\n        return 0\n    if n == 11:\n        return -1\n    if n == 12:\n        return -1\n    if n == 13:\n        return -1\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tup_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] % K == test_list[j][0] % K:\n                tup_list.append(test_list[i])\n                tup_list.append(test_list[j])\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    list_copy = test_list\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][1] % test_list[j][1] == 0:\n                #print(i, j)\n                list_copy[i] = [test_list[j][0], test_list[i][1]]\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    def divisor(n): \n        divisors = [] \n        for i in range(1, n): \n            if n % i == 0: \n                divisors.append(i) \n        return divisors \n    divisors = divisor(n) \n    return n in divisors \ndef main(): \n    n = int(input()) \n    if is_Diff(n): \n    print(\"Yes\") \n    else: \n    print(\"No\") \nmain()  "
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        print(n,\"is divisible by 11\") \n    else: \n        print(n,\"is not divisible by 11\") \n        \nn = eval(input(\"Enter number: \")) \nis_Diff(n)"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 10) == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = list(s) \n    count_of_words = []\n    for i in words: \n        count_of_words.append(words.count(i)) \n    return count_of_words\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Your code goes here\n    return len(s) % 2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\ndef main():\n    s = input(\"Enter the string: \")\n    print(word_len(s))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    new_s = s.strip().lower()\n    new_s = new_s.replace(',', '')\n    new_s = new_s.replace('.', '')\n    new_s = new_s.replace('!', '')\n    new_s = new_s.replace('?', '')\n    new_s = new_s.replace('(', '')\n    new_s = new_s.replace(')', '')\n    new_s = new_s.replace(';', '')\n    new_s = new_s.replace('\\n', '')\n    new_s = new_s.replace('\\\\', '')\n    new_s = new_s.replace('+', '')\n    new_s = new_s.replace('*', '')\n    new_s = new_s.replace('_', '')\n    new_s = new_s.replace('=', '')\n    new_s = new_s.replace('<', '')\n    new_s = new_s.replace('>', '')\n    new_s = new_s.replace(' ', '')\n    s = len(new_s)\n    if s % 2!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    for i in range(len(s)): \n        if s[i] == \" \": \n            continue\n        else: \n            return False\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    odd = True\n    if len(s) % 2 == 0: \n        return False\n    else: \n        return odd\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    odd=False\n    for i in range(len(s)): \n        if s[i] == s[i-1]: \n            continue\n        else: \n            odd = True \n    return odd\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0: \n        return True\n    else: \n        return False \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 1:\n        return n\n    return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_number_1 = n + 1\n    tetrahedral_number_2 = n + 2\n    tetrahedral_number_3 = n + 3\n    tetrahedral_number_4 = n + 4\n    tetrahedral_number_5 = n + 5\n    tetrahedral_number_6 = n + 6\n    tetrahedral_number_7 = n + 7\n    tetrahedral_number_8 = n + 8\n    tetrahedral_number_9 = n + 9\n    tetrahedral_number_10 = n + 10\n    tetrahedral_number_11 = n + 11\n    tetrahedral_number_12 = n + 12\n    tetrahedral_number_13 = n + 13\n    tetrahedral_number_14 = n + 14\n    tetrahedral_number_15 = n + 15\n    tetrahedral_number_16 = n + 16\n    tetrahedral_number_17 = n + 17\n    tetrahedral_number_18 = n + 18\n    tetrahedral_number_19 = n + 19\n    tetrahedral_number_20 = n + 20\n    tetrahedral_number_21 = n + 21\n    tetrahedral_number_22 = n + 22\n    tetrahedral_number_23 = n + 23\n    tetrahedral_number_24 = n + 24\n    tetrahedral_number_25 = n + 25\n    tetrahedral_number_26 = n + 26\n    tetrahedral_number_27 = n + 27\n    tetrahedral_number_28 = n + 28\n    tetrahedral_number_29 = n + 29\n    tetrahedral_number_30 = n + 30\n    tetrahedral_number_31 = n + 31\n    tetrahedral_number_32 = n + 32\n    tetrahedral_number_33 = n + 33\n    tetrahedral_number_34 = n + 34\n    tetrahedral_number_35 = n + 35\n    tetrahedral_number_36 = n + 36\n    tetrahedral_number_37 = n + 37\n    tetrahedral_number_38 = n + 38\n    tetrahedral_number_39 = n + 39\n    tetrahedral_number_40 = n + 40\n    tetrahedral_number_41 = n + 41\n    tetrahedral_number_42 = n + 42\n    tetrahedral_number_43 = n + 43\n    tetrahedral_number_44 = n + 44\n    tetrahedral_number_45 = n + 45\n    tetrahedral_number_46 = n + 46\n    tetrahedral_number_47 = n + 47\n    tetrahedral_number_48 = n + 48\n    tetrahedral_number_49 = n + 49\n    tetrahedral_number_50 = n + 50\n    tetrahedral_number_51 = n + 51\n    tetrahedral_number_52 = n + 52\n    tetrahedral_number_53 = n + 53\n    tetrahedral_number_54 = n + 54\n    tetrahedral_number_55 = n + 55\n    tetrahedral_number_56 = n + 56\n    tetrahedral_number_57 = n + 57\n    tetrahedral_number_58 = n + 58\n    tetrahedral_number_59 = n + 59\n    tetrahedral_number_60 = n + 60\n    tetrahedral_number_61 = n + 61\n    tetrahedral_number_62 = n + 62\n    tetrahedral_number_63 = n + 63\n    tetrahedral_number_64 = n + 64\n    tetrahedral_number_65 = n + 65\n    tetrahedral_number_66 = n + 66\n    tetrahedral_number_67 = n + 67\n    tetrahedral_number_68 = n + 68\n    tetrahedral_number_69 = n + 69\n    tetrahedral_number_70 = n + 70\n    tetrahedral_number_71 = n + 71\n    tetrahedral_number_72 = n + 72\n    tetrahedral_number_73 = n + 73\n    tetrahedral_number_74 = n + 74\n    tetrahedral_number_75 = n + 75\n    tetrahedral_number_76 = n + 76\n    tetrahedral_number_77 = n + 77\n    tetrahedral_number_78 = n + 78\n    tetrahedral_number_79 = n + 79\n    tetrahedral_number_80 = n + 80\n    tetrahedral_number_81 = n + 81\n    tetrahedral_number_82 = n + 82\n    tetrahedral_number_83 = n + 83\n    tetrahedral_number_84 = n + 84\n    tetrahedral_number_85 = n + 85\n    tetrahedral_number_86 = n + 86\n    tetrahedral_number_87 = n + 87\n    tetrahedral_number_88 = n + 88\n    tetrahedral_number_89 = n + 89\n    tetrahedral_number_90 = n + 90\n    tetrahedral_number_91 = n + 91\n    tetrahedral_number_92 = n + 92\n    tetrahedral_number_93 = n + 93\n    tetrahedral_number_94 = n + 94\n    tetrahedral_number_95 = n + 95\n    tetrahedral_number_96 = n + 96\n    tetrahedral_number_97 = n + 97\n    tetrahedral_number_98 = n + 98\n    tetrahedral_number_99 = n + 99\n    tetrahedral_number_100 = n + 100\n    tetrahedral_number_101 = n + 101\n    tetrahedral_number_102 = n + 102\n    tetrahedral_number_103 = n + 103\n    tetrahedral_number_104 = n + 104\n    tetrahedral_number_105 = n + 105\n    tetrahedral_number_106 = n + 106\n    tetrahedral_number_107 = n + 107\n    tetrahedral_number_108 = n + 108\n    tetrahedral_number_109 = n + 109\n    tetrahedral_number_110 = n + 110\n    tetrahedral_number_111 = n + 111\n    tetrahedral_number_112 = n + 112\n    tetrahedral_number_113 = n + 113\n    tetrahedral_number_114 = n + 114\n    tetrahedral_number_115 = n + 115\n    tetrahedral_number_116 = n + 116\n    tetrahedral_number_117 = n + 117\n    tetrahedral_number_118 = n + 118\n    tetrahedral_number_119 = n + 119\n    tetrahedral_number_120 = n + 120\n    tetrahedral_number_121 = n + 121\n    tetrahedral_number_122 = n + 122\n    tetrahedral_number_123 = n + 123\n    tetrahedral_number_124 = n + 124\n    tetrahedral_number_125 = n + 125\n    tetrahedral_number_126 = n + 126\n    tetrahedral_number_127 = n + 127\n    tetrahedral_number_128 = n + 128\n    tetrahedral_number_129 = n + 129\n    tetrahedral_number_130 = n + 130\n    tetrahedral_number_131 = n + 131\n    tetrahedral_number_132 = n + 132\n    tetrahedral_number_133 = n + 133\n    tetrahedral_number_134 = n + 134\n    tetrahedral_number_135 = n + 135\n    tetrahedral_number_136 = n + 136\n    tetrahedral_number_137 = n + 137\n    tetrahedral_number_138 = n + 138\n    tetrahedral_number_139 = n + 139\n    tetrahedral_number_140 = n + 140\n    tetrahedral_number_141 = n + 141\n    tetrahedral_number_142 = n + 142\n    tetrahedral_number_143 = n + 143\n    tetrahedral_number_144 = n "
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    # n must be greater than 1\n    if n < 1: \n        raise ValueError(\"'n' must be greater than 1.\") \n        \n    # find the next divisor \n    divisor = n + 1\n    while divisor % 2 == 0: \n        divisor = divisor / 2\n        \n    # count the number of even digits \n    digit_count = 0\n    for i in str(n): \n        if int(i) % 2 == 0: \n            digit_count += 1\n        if digit_count == 0: \n            break\n    \n    # return the nth number \n    return n / 10 ** digit_count \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    s = (2*n) + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1,n+1): \n        if n%i == 0: \n            return i \n    \n    \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n-1))//2\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    for i in range(n):\n        if i%2==1:\n            pass\n        else:\n            if i%3==0:\n                pass\n            else:\n                if i%3==2:\n                    pass\n                else:\n                    if i%3==1:\n                        pass\n                    else:\n                        if i%3==3:\n                            pass\n                        else:\n                            return i\n    \n    return -1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    for i in range(2, n+1):\n        a, b = b, (a+b)%n\n        print(b)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = n+1\n    for i in range(2,a,2): \n        if n%i==0: \n            break\n        else: \n            n = n+1\n    if n %2==0: \n        n = n+1\n    return n "
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += int(i**0.5)\n    return s\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r * r\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    c = 4 * math.pi * (r**3)\n    return c\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.14159265358979323846\n    r = float(r)\n    volume = 4/3 * pi * r * r\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    result = math.pi * pow(r,2)\n    return result\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r <= 0:\n        return 'Radius should be positive!'\n    else:\n        r = round(r, 2)\n        return round(4 * math.pi * r**3,2)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4 * math.pi * math.pow(r, 3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = r**2\n    pi = math.pi\n    v = 4 * math.pi * (r)**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4/3 * math.pi * (r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = math.pi * pow(r,3)\n    return v\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(ord(strr) - ord('a') + 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(int(strr, 2))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # using get_char() method\n    print(get_char(strr))\n    # calling get_char() method again to get the first character\n    print(get_char(strr)+get_char(strr))\n    \n    \n    \n    # example for get_char() function\n    # string = \"abcde\"\n    # get_char(string)\n    # print(get_char(string))\n    # get_char(string)\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # print(get_char(string))\n    # prin"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    for i in range(len(strr)):\n        x = ord(strr[i])\n        x = x % 26\n        print(chr(x + 64))\n    return \n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    import string\n    import itertools\n    \n    result = \"\"\n    \n    for i in range(len(strr)):\n        if strr[i] in string.printable:\n            result += chr(ord(strr[i]) - ord('a'))\n        else:\n            result += strr[i]\n    \n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # your code here\n    pass"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = ''\n    for i in strr:\n        char = char + chr(ord(i) % 26 + 65)\n    return char\n    \ndef add(strr, idx):\n    '''\n    Write a python function to check the validity of a given binary number string using the following rules.\n        If the number string is valid, return the number after modulo 26.\n        If the number string is invalid, return -1.\n    '''\n    return (get_Char(strr[idx]) * pow(2, len(strr) - idx - 1)) % (2 ** 26)\n    \ndef is_Valid(strr, idx):\n    '''\n    Write a python function to check the validity of a given binary number string using the following rules.\n        If the number string is valid, return the number after modulo 26.\n        If the number string is invalid, return -1.\n    '''\n    return (add(strr, idx) == -1)\n    \ndef is_Palindrome(strr):\n    '''\n    Write a python function to check the validity of a given binary number string using the following rules.\n        If the number string is valid, return the number after modulo 26.\n        If the number string is invalid, return -1.\n    '''\n    strr = strr.replace(\"0\", \" \").replace(\"1\", \" \").replace(\"X\", \" \").replace(\"0\", \" \").replace(\"1\", \" \").replace(\"X\", \" \").upper()\n    l = list(strr)\n    for i in range(0, len(l)):\n        l[i] = chr(ord(l[i]) % 26 + 65)\n    return \"\".join(l) == \"\".join(reversed(l))\n    \ndef palindrome(strr):\n    '''\n    Write a python function to check the validity of a given binary number string using the following rules.\n        If the number string is valid, return the number after modulo 26.\n        If the number string is invalid, return -1.\n    '''\n    if is_Valid(strr, 0) == -1:\n        return -1\n    if is_Valid(strr, 1) == -1:\n        return -1\n    if is_Valid(strr, 2) == -1:\n        return -1\n    if is_Valid(strr, 3) == -1:\n        return -1\n    if is_Valid(strr, 4) == -1:\n        return -1\n    if is_Valid(strr, 5) == -1:\n        return -1\n    if is_Valid(strr, 6) == -1:\n        return -1\n    if is_Valid(strr, 7) == -1:\n        return -1\n    if is_Valid(strr, 8) == -1:\n        return -1\n    if is_Valid(strr, 9) == -1:\n        return -1\n    if is_Valid(strr, 10) == -1:\n        return -1\n    if is_Valid(strr, 11) == -1:\n        return -1\n    if is_Valid(strr, 12) == -1:\n        return -1\n    if is_Valid(strr, 13) == -1:\n        return -1\n    if is_Valid(strr, 14) == -1:\n        return -1\n    if is_Valid(strr, 15) == -1:\n        return -1\n    if is_Valid(strr, 16) == -1:\n        return -1\n    if is_Valid(strr, 17) == -1:\n        return -1\n    if is_Valid(strr, 18) == -1:\n        return -1\n    if is_Valid(strr, 19) == -1:\n        return -1\n    if is_Valid(strr, 20) == -1:\n        return -1\n    if is_Valid(strr, 21) == -1:\n        return -1\n    if is_Valid(strr, 22) == -1:\n        return -1\n    if is_Valid(strr, 23) == -1:\n        return -1\n    if is_Valid(strr, 24) == -1:\n        return -1\n    if is_Valid(strr, 25) == -1:\n        return -1\n    if is_Valid(strr, 26) == -1:\n        return -1\n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    final_Char = ''\n    for i in strr:\n        i = ord(i)\n        if i % 26 == 0:\n            final_Char = final_Char + chr(i)\n        else:\n            final_Char = final_Char + chr(i)\n    return final_Char\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst_char = list(strr)\n    a = ''\n    for x in lst_char:\n        a+=x\n    return int(a,2)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    mod_char_dict = {}\n    # create a map for the characters\n    for i in range(len(strr)):\n        char = strr[i]\n        mod_char_dict[char] = i\n    # create a list with the characters as keys\n    char_list = list(mod_char_dict.keys())\n    char_list.sort()\n    # find the character with the highest ASCII value and return it\n    return char_list[len(char_list) // 2]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    assert n >= 0\n    assert n <= 9\n    assert n % 10 == 1\n    assert n % 10 == 9\n    assert n % 10 == 1\n    assert n % 10 == 9\n    assert n % 10 == 1\n    return (n + 1) % 10\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Base case\n    if n == 1:\n        return 1\n    \n    # Starting number \n    numbers = [1]\n    # Number of operations \n    n_operations = n-1\n    \n    # Traverse through the sequence \n    while n_operations >= 0: \n        # Step: (n-1)th term \n        numbers.append(numbers[-1]*n) \n        # Decrement operation counter\n        n_operations -= 1\n    \n    return numbers[-1] \n    \nprint(sequence(6))"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (sequence(n-1) + n*sequence(n-1)) % 10007\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = n//2\n    b = n%2\n    if b == 0:\n        return n\n    elif b == 1:\n        return a+1\n    else:\n        return a+1+sequence(n//2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # pass\n    # write your code here\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pas"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Base case\n    if n == 0 or n == 1: \n        return n\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    arr = [0, 0, 0]\n    arr[1] = 1\n    arr[2] = 2\n    arr[3] = 1\n    for i in range(4, n + 1):\n        arr[i] = (arr[i - 1] + arr[i - 2] + arr[i - 3]) % 79\n    return arr[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    n = n//2 + 1\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # for given n, print the nth number\n    print(n)\n    if (n == 1):\n        return 1\n    else:\n        # nth number from the newman conway sequence\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    res = 0\n    i = 1\n    while i < n:\n        res = res*10 + i\n        i+=1\n    return res\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4.0 * math.pi * math.pow(r, 3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return ((pi * r ** 2) - (4/3) * (r ** 3)) * math.sin(r)\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return (4/3) * (pi * r ** 2)\ndef area_cylinder(r,h):\n    '''\n    Write a function that returns the volume of a cylinder.\n    '''\n    pi = math.pi\n    return (r**2 * h) * math.sqrt(1 - (r ** 2) / (4 * pi))\ndef volume_cylinder(r,h):\n    '''\n    Write a function that returns the volume of a cylinder.\n    '''\n    pi = math.pi\n    return (r**2 * h) * math.sqrt(1 - (r ** 2) / (4 * pi))\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volume of a sphere.\n    '''\n    return (3/4) * (pi * r ** 3)\ndef volume_sphere(r):\n    '''\n    Write a function that returns the volum"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi) * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**3\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surfaceArea = pi*(r**2)\n    return surfaceArea\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    A = 1/3*3.14\n    b = (3*A)*r**2\n    c = (r**3)*((4*A)-(3*A*A))\n    return b + c\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*(math.pi)**3*r**3\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # This function calculates the area of a sphere\n    s = (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*math.pi*math.pow(r,2))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    result = 1\n    # right side\n    if n % 3 == 0:\n        result = 1 + (1 + 1) * (1 + 1)\n    # left side\n    else:\n        if n % 3 == 1:\n            result = 1 + (1 + 2) * (1 + 2)\n        else:\n            result = (1 + 2) * (1 + 2)\n    return result\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    number = n\n    # print(\"number =\",number)\n    square_number = square(number)\n    # print(\"square_number =\",square_number)\n    triangle_number = triangle(square_number)\n    # print(\"triangle_number =\",triangle_number)\n    # print(\"nth_centered_hexagonal_number =\",nth_centered_hexagonal_number(n))\n    return nth_centered_hexagonal_number(n)\n    \nn = 5\ncentered_hexagonal_number(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0:\n        return 0\n    for i in range(1, n):\n        if i % 6 == 0:\n            yield i\n        if i % 3 == 0:\n            yield (i + 1) % 12\n        if i % 2 == 0:\n            yield (i + 3) % 12\n    yield n\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # return n*(n+1)/6 - n*(n+2)/6 + n\n    # nth hexagonal number is 7*(7-2)/3 + 5*(5-3)/3 + 2*(3-1)/3\n    return 7*(7-2)/3 + 5*(5-3)/3 + 2*(3-1)/3\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n > 0:\n        return int(n**(1/2))\n    else:\n        return 0\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # get the number\n    num = n\n    # check if n is even or odd\n    if num % 2 == 0:\n        num = num - 1\n    # return the number\n    return num\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n**3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    final_dict = {}\n    for key in dict1.keys():\n        final_dict[key] = dict1[key]\n        if len(dict2.keys()) > 0:\n            for key2 in dict2.keys():\n                final_dict[key] = merge_two_dicts(final_dict[key], dict2[key2])\n    for key in dict3.keys():\n        final_dict[key] = dict3[key]\n    return final_dict\ndef merge_two_dicts(a,b):\n    '''\n    Merge dictionaries in b into a.\n    '''\n    for key in a.keys():\n        if key in b.keys():\n            a[key] = merge_two_dicts(a[key],b[key])\n    return a\ndef is_in_set(element, set_):\n    '''\n    Finds if an element is in a set.\n    '''\n    return element in set_\ndef set_intersection_set(set_1,set_2):\n    '''\n    Finds the intersection of two sets.\n    '''\n    return set_1 & set_2\ndef set_union_set(set_1,set_2):\n    '''\n    Finds the union of two sets.\n    '''\n    return set_1 | set_2\ndef set_difference_set(set_1,set_2):\n    '''\n    Finds the difference of two sets.\n    '''\n    return set_1 - set_2\ndef union_set(set_1,set_2):\n    '''\n    Finds the union of two sets.\n    '''\n    return set_1 | set_2\ndef intersection_set(set_1,set_2):\n    '''\n    Finds the intersection of two sets.\n    '''\n    return set_1 & set_2\ndef is_empty(element):\n    '''\n    Checks if an element is empty.\n    '''\n    return not element\ndef delete_empties(set_1):\n    '''\n    Finds the empty items of the set.\n    '''\n    return set(set_1).difference({})\ndef is_empty(element):\n    '''\n    Checks if an element is empty.\n    '''\n    return not element\ndef union_dicts(dict_1, dict_2):\n    '''\n    Merge two dictionaries into a single dictionary.\n    '''\n    return merge_dictionaries_three(dict_1,dict_2, dict_1)\ndef find_key_in_dict(dict, key):\n    '''\n    Finds an item in a dictionary.\n    '''\n    return [item for item in dict.keys() if key in item]\ndef find_key_in_dicts(dict_1, dict_2):\n    '''\n    Finds an item in a dictionary.\n    '''\n    return [item for item in dict_1.keys() if key in item]\ndef sort_dicts(dict_1, dict_2):\n    '''\n    Sorts two dictionaries.\n    '''\n    return {key: dict_2[key] for key in sorted(dict_1)}\ndef merge_dicts(dict_1, dict_2):\n    '''\n    Merges two dictionaries into a single dictionary.\n    '''\n    return merge_dictionaries_three(dict_1, dict_2, dict_1)\ndef delete_empties(dict_1):\n    '''\n    Finds the empty items of the set.\n    '''\n    return dict(dict_1)\ndef merge_dicts_to_set(dict_1, dict_2):\n    '''\n    Merges two dictionaries into a set.\n    '''\n    return {key: dict_2[key] for key in sorted(dict_1)}\ndef key_in_dict(dict, key):\n    '''\n    Checks if a given item is in a dictionary.\n    '''\n    return key in dict\ndef item_in_dicts(dict_1, dict_2):\n    '''\n    Finds an item in a dictionary.\n    '''\n    return [item for item in dict_1.keys() if key_in_dict(dict_2, item)]\ndef is_key_in_set(dict, key):\n    '''\n    Checks if a given item is in a set.\n    '''\n    return key in dict\ndef key_in_dicts_set(dict_1, dict_2):\n    '''\n    Finds an item in a dictionary.\n    '''\n    return {item for item in dict_1.keys() if is_key_in_set(dict_2, item)}\ndef remove_key_in_dict(dict, key):\n    '''\n    Removes a given key from a dictionary.\n    '''\n    return dict.pop(key)\ndef remove_key_in_dicts(dict_1, dict_2):\n    '''\n    Removes a given key from a dictionary.\n    '''\n    return {item for item in dict_1.keys() if is_key_in_set(dict_2, item)}\ndef is_key_in_dict(dict, key):\n    '''\n    Checks if a given item is in a dictionary.\n    '''\n    return key in dict\ndef is_key_in_dicts(dict_1, dict_2):\n    '''\n    Checks if a given item is in a dictionary.\n    '''\n    return {item for item in dict_1.keys() if is_key_in_set(dict_2, item)}\ndef item_in_dict_set(dict, key):\n    '''\n    Finds an item in a dictionary.\n    '''\n    return key in dict_1\ndef item_in_dict_set_set(dict_1, dict_2):\n    '''\n    Finds an item in a dictionary.\n    '''\n    return {item for item in dict_1.keys() if item_in_dict_set(dict_2, item)}\ndef remove_key_from_dict(dict, key):\n    '''\n    Removes a given key from a dictionary.\n    '''\n    return dict.pop(key)\ndef remove_key_from_dicts(dict_1, dict_2):\n    '''\n    Removes a given key from a dictionary.\n    '''\n    return {item for item in dict_1.keys() if item not in dict_2}\ndef delete_item_from_dicts(dict_1, dict_2):\n    '''\n    Deletes a given key from a dictionary.\n    '''\n    return {item for item in dict_1.keys() if item not in dict_2}\ndef replace_item_in_dict(dict_1, key, new_value):\n    '''\n    Replaces a given key with a new value.\n    '''\n    return dict_1.pop(key, new_value)\ndef replace_item_in_dicts(dict_1, dict_2):\n    '''\n    Replaces a given key with a new value.\n    '''\n    return {item for item in dict_1.keys() if item not in dict_2}\ndef remove_item_from_dict(dict_1, key):\n    '''\n    Removes a given key from a dictionary.\n    '''\n    return dict_1.pop(key, None)\ndef remove_item_from_dicts(dict_1, dict_2):\n    '''\n    Removes a given key from a dictionary.\n    '''\n    return {item for item in dict_1.keys() if item not in dict_2}\ndef merge_dicts_to_dict(dict_1, dict_2):\n    '''\n    Merges two dictionaries into a single dictionary.\n    '''\n    return {**dict_1, **dict_2}\ndef merge_dicts_to_dicts(dict_1, dict_2):\n    '''\n    Merges two dictionaries into a single dictionary.\n    '''\n    return {**dict_1, **dict_2}\ndef delete_empty_dict(dict):\n    '''\n    Deletes an empty dictionary.\n    '''\n    return dict.pop('', None)\ndef delete_empty_dicts(dict_1, dict"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dct1 = dict1.copy()\n    dct2 = dict2.copy()\n    dct3 = dict3.copy()\n    for key, value in dct1.items():\n        if key in dct2 and value in dct2:\n            dct1[key] = merge(dct1[key], dct2[value])\n        elif key in dct3 and value in dct3:\n            dct1[key] = merge(dct1[key], dct3[value])\n        else:\n            dct1[key] = value\n    return dct1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # dictionary merge\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    #code goes here\n    for i in dict1:\n        result[i] = dict1[i]\n        \n    for i in dict2:\n        result[i] = dict2[i]\n        \n    for i in dict3:\n        result[i] = dict3[i]\n        \n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key,val in dict1.items():\n        result[key] = dict2.get(key,val)\n    for key,val in dict2.items():\n        result[key] = dict3.get(key,val)\n    for key,val in dict3.items():\n        result[key] = dict1.get(key,val)\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict()\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    # print(dict1)\n    # print(dict2)\n    # print(dict3)\n    for k,v in dict1.items():\n        if v in dict2.keys():\n            merged[k] = dict2[v]\n        else:\n            merged[k] = v\n    for k,v in dict3.items():\n        if v in dict2.keys():\n            merged[k] = dict2[v]\n        else:\n            merged[k] = v\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # First dictionary\n    dict1_1 = dict1.get('name',None)\n    dict1_2 = dict1.get('price',None)\n    dict1_3 = dict1.get('category',None)\n    dict1_4 = dict1.get('description',None)\n    dict1_5 = dict1.get('link',None)\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = collections.Counter(list1)\n    dic.subtract(0)\n    dic.subtract(1)\n    return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #Convert list to dictionary\n    frequency_dict = dict.fromkeys(list1, 0)\n    for element in list1:\n        frequency_dict[element] += 1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    d = dict(d)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = {}\n    for i in list1:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dict = collections.Counter(list1)\n    return frequency_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # your code goes here\n    return collections.Counter(list1)\n    #TEST\n    # print(freq_count([1, 1, 1, 1, 1]))\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1= collections.Counter(list1)\n    dict2= dict()\n    for key in dict1:\n        if(dict1[key]>1):\n            dict2[key] = dict1[key]\n        else:\n            dict2[key] = 1\n    return dict2\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    # Take the list and convert to dictionary\n    freq_dict = dict()\n    for e in list1:\n        if e in freq_dict:\n            freq_dict[e] += 1\n        else:\n            freq_dict[e] = 1\n    # Return the dictionary\n    return freq_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = min(N)\n    for i in N:\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    f = 1\n    while f < N:\n        f = N + f\n    return f\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N==0:\n        return -1\n    if N<0:\n        return -1\n    min_num=N\n    for i in range(N):\n        if min_num>N-i:\n            min_num=N-i\n    return min_num\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = 0\n    while closest < N:\n        closest = min(N, closest + 1)\n        if closest == N:\n            return closest\n        elif closest < N:\n            closest = N\n        else:\n            closest = N - 1\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    c=[]\n    for i in range(1,N+1):\n        c.append(i)\n    k=N-1\n    while k>=1:\n        mid=k//2\n        for i in range(1,mid+1):\n            if c[i]<=c[mid]:\n                c[i],c[mid]=c[mid],c[i]\n        k=mid\n    return c[0]\n    \nprint(closest_num(9))"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return 'Incorrect data type'\n    closest = abs(N)\n    for i in range(N+1, 1, -1):\n        if abs(i) < abs(closest):\n            closest = i\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(N):\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 10:\n        print(\"The closest number is\", N)\n    else:\n        if N % 2 == 0:\n            lowest = N // 2\n        else:\n            lowest = N * 3\n        closest = 0\n        for i in range(1, 10):\n            if i < lowest:\n                closest = i\n            else:\n                pass\n        print(\"The closest number is\", closest)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    if N % 2 == 1:\n        return closest_num(N-1)\n    if N % 2 == 0:\n        return closest_num(N-1) + 1\n    \ndef closest_odd_num(N):\n    '''\n    Write a function that returns the closest odd number for a given N.\n    '''\n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    if N % 2 == 0:\n        return closest_num(N-1)\n    if N % 2 == 1:\n        return closest_num(N-1) + 1\n    \ndef is_prime(n):\n    '''\n    Checks if a number is a prime.\n    '''\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #return max(list1, key = len)\n    return max(list1, key = len)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    word = \"\"\n    for i in list1:\n        list2.append(i)\n    list2.sort()\n    list2.reverse()\n    for j in range(0, len(list2) - 1):\n        if(list2[j] == list2[j + 1]):\n            word = list2[j] + word\n        else:\n            word = list2[j] + word\n    return word\n    "
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\ndef to_list(file):\n    '''\n    Read a text file and convert it to a list.\n    '''\n    pass\ndef to_set(file):\n    '''\n    Read a text file and convert it to a set.\n    '''\n    pass\ndef to_dict(file):\n    '''\n    Read a text file and convert it to a dict.\n    '''\n    pass\ndef set_list(file):\n    '''\n    Read a text file and convert it to a list.\n    '''\n    pass\ndef set_set(file):\n    '''\n    Read a text file and convert it to a set.\n    '''\n    pass\ndef set_dict(file):\n    '''\n    Read a text file and convert it to a dict.\n    '''\n    pass"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(\"Length of longest word is {}.\".format(len(max(list1, key=len))))\n    print(\"Longest word is {}.\".format(list1[-1]))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a=0\n    length=0\n    for i in list1:\n        if len(i)>length:\n            length=len(i)\n            a=i\n    return a\n    \ndef main():\n    '''\n    Write a python function to find the longest word.\n    '''\n    list1=[\"be\",\"to\",\"be\",\"and\",\"of\",\"and\",\"of\",\"and\",\"of\",\"to\",\"of\",\"to\",\"and\",\"of\",\"and\",\"and\",\"and\",\"be\",\"and\",\"and\",\"to\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"to\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\","
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    string = str()\n    for i in list1:\n        string += i +''\n    return len(string)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    tokens = [i.lower() for i in list1]\n    max_length = len(max(tokens, key=len))\n    return max_length\n    \ndef count_and_print(list1,start,end):\n    '''\n    Print the count and each word in a list and all the words in the list.\n    '''\n    if start > end:\n        return\n    count = 0\n    for i in list1:\n        if i == list1[end]:\n            count += 1\n    print(\"The count is: \",count)\n    for i in range(start,end+1):\n        print(list1[i],end=\" \")\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #Code here\n    str1 = ''\n    for i in list1:\n        str1 += i +''\n    str1 = str1[:-1]\n    return len(str1)\n    \n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    length = len(max(list1, key = len))\n    \n    return length\n    \ndef top_n(word_list, n):\n    '''\n    Write a python function to top n words from a list.\n    '''\n    \n    max_length = 0\n    max_word = ''\n    \n    for word in word_list:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_word = word\n            \n    return max_word, max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n    for i in range(0, len(str1)):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Time O(n) Space O(n)\n    # n is the length of the given string\n    # Time complexity: O(n^2)\n    # Space Complexity: O(1)\n    # this will be O(n^3) or O(n^2)\n    #\n    # to find out if the given string is in a substring, do it recursively\n    # n is the length of the given string\n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    #\n    # for recursion we need to compare the given substring with all possible values from the given list\n    # so we use binary search to find the index of the substring\n    # if we find it, then we are returning the index of the substring and the start index of the given substring\n    # else return -1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for index, s in enumerate(str1):\n        if s not in sub_str:\n            return False\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1 = list(str1)\n    sub_str = list(sub_str)\n    for i in range(len(str1)):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return 1\n    return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    index = 0\n    n = len(str1)\n    for i in range(n):\n        if (str1[i:i+len(sub_str)] == sub_str):\n            index += 1\n    if index == len(sub_str):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Write your code here.\n    length_of_string = len(str1)\n    if str1.find(sub_str) == -1:\n        return False\n    if length_of_string == len(sub_str):\n        return True\n    for i in range(len(sub_str)):\n        if str1.find(sub_str[i])!= -1:\n            if find_substring(str1, sub_str[:i] + sub_str[i+1:]) == True:\n                return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not sub_str:\n        return True\n    return str1.find(sub_str) > -1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Your code here\n    if len(sub_str) == 0 or len(sub_str) > len(str1):\n        return False\n    elif str1 == \"\":\n        return False\n    elif sub_str in str1:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return [sub for sub in sub_str if sub in str1]\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n % 2) == 1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n % 2) == 0:\n        return False\n    else:\n        return True\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2!= 0 \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulator(n):\n        '''\n        Check whether the given number is undulator or not.\n        '''\n        if n < 10:\n            return n > 5 and n <= 6\n        else:\n            return n % 10 == 5 or n % 10 == 6\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    #if number is even\n    if n%2 == 0: \n        return True\n    #if number is odd\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(n):\n        for j in range(i,n):\n            if (n-i)%j==0:\n                print(n-i)\n                print(n-i)\n                print(n-i)\n                print(n-i)\n                return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0: \n        return False\n    if n == 0 or n == 1: \n        return True\n    else: \n        return not(is_undulating(n//2)"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0: \n        return False\n    else:\n        if n % 2 == 0: \n            return True\n        else: \n            return False\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return pow(a,b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        print(a)\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b<0:\n        return 0\n    elif b%2 == 0:\n        return a**b/2\n    else:\n        return a**(b/2)\n        \n        \n    \n    \n    "
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return a\n    return a*power(a,b-1)\n    \nprint(power(2,3))\nprint(power(2,0))\nprint(power(2,4))\nprint(power(2,1))\nprint(power(2,5)"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    a_power = 1\n    while (a >= b):\n        a_power = a_power * b\n        a = a - b\n    return a_power\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return a\n    else:\n        return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = test_list[0]\n    smallest_second = smallest[1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < smallest_second:\n            smallest = test_list[i]\n            smallest_second = smallest[1]\n    return smallest[0]\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = 0\n    for item in test_list:\n        if item[1] < item[2]:\n            index = item\n    return index[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_first_second = sorted(test_list,key=itemgetter(1))[0]\n    return min_first_second[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code here\n    return test_list[0]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # your code here\n    return test_list[1]\n    \ndef add(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list, where each element is the sum of the first element and the second element.\n    '''\n    # your code here\n    new_list = []\n    # print(test_list)\n    for i in test_list:\n        new_list.append(i[0]+i[1])\n    # print(new_list)\n    return new_list\n    \ndef reverse(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list, where each element is the first element followed by the second element of the tuple.\n    '''\n    # your code here\n    new_list = []\n    # print(test_list)\n    for i in test_list:\n        new_list.append(i[1])\n    # print(new_list)\n    return new_list\n    \ndef count_by_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list, where each element is the number of occurrences of the tuple.\n    '''\n    # your code here\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return len(new_list)\n    \ndef calculate_perimeter(test_list):\n    '''\n    Given a list of tuples, write a function that returns the perimeter of the list.\n    '''\n    # your code here\n    return (6*len(test_list))\n    \ndef display_data(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of the values in the tuple.\n    '''\n    # your code here\n    new_list = []\n    # print(test_list)\n    for i in test_list:\n        new_list.append(i[0])\n    # print(new_list)\n    return new_list\n    \ndef sort_by_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list, where each element is sorted in ascending order by the second element of the tuple.\n    '''\n    # your code here\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return sorted(new_list, key=itemgetter(1))\n    \ndef sort_by_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list, where each element is sorted in ascending order by the first element of the tuple.\n    '''\n    # your code here\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return sorted(new_list, key=itemgetter(0))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # create a dictionary of values\n    values = {}\n    for t in test_list:\n        values[t[0]] = t[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_second = sorted(test_list, key=itemgetter(1))[0]\n    return smallest_second[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = test_list[0]\n    smallest_second = test_list[1]\n    for i in range(0, len(test_list)):\n        if test_list[i][1] < smallest_second:\n            smallest = test_list[i]\n            smallest_second = test_list[i][1]\n    return smallest\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return test_list[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min = test_list[0][0]\n    for tuple in test_list:\n        if tuple[0] < min:\n            min = tuple[0]\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=lst[0][0]\n    min_index=0\n    for i in range(len(lst)):\n        if(lst[i][0]<min_len):\n            min_len=lst[i][0]\n            min_index=i\n    return min_len\n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_len=lst[0][0]\n    max_index=0\n    for i in range(len(lst)):\n        if(lst[i][0]>max_len):\n            max_len=lst[i][0]\n            max_index=i\n    return max_len, max_index\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # your code goes here\n    min=lst[0]\n    min_lst=[]\n    for x in lst:\n        if len(x)<len(min):\n            min=x\n            min_lst=x\n    print(\"the minimum length of a list is\",min_lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if j == len(lst[i]) - 1:\n                lst[i][j] += lst[i][j - 1]\n            else:\n                lst[i][j] += min(lst[i][j + 1:])\n    return min(lst[i][j] for i in range(len(lst)) for j in range(len(lst[i]))"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(len(lst[i]))\n    return min(result)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] < lst[0][j]:\n                min_length.append(lst[i][j])\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return -1\n    else:\n        min = lst[0]\n        min_index = 0\n        for i in range(1, len(lst)):\n            if lst[i] < min:\n                min = lst[i]\n                min_index = i\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_length = 0\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize an empty list to store the size of the lists\n    min_len = []\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i])< min_len:\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < smallest_length:\n            smallest_length = lst[i]\n    return smallest_length\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        num = n\n        i = 2\n        while num % i!= 0:\n            i += 1\n        return i\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, int(n)):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, int(n)+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==1:\n        return 1\n    elif n==0:\n        return 0\n    else:\n        return n//2+divisor(n//2)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return 1 + divisor(n-1) + divisor(n-2)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    num = 0\n    while i <= n:\n        if n % i == 0:\n            num = num + 1\n        i = i + 1\n    return num\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1,n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 0:\n        return \"No positive Integer\"\n    elif n == 0:\n        return 0\n    else:\n        return 1 + divisor(n//2)\nprint(divisor(6)"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        for j in i:\n            if j not in freq_dict:\n                freq_dict[j] = 1\n            else:\n                freq_dict[j] += 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for l in list1:\n        for x in l:\n            if x not in freq:\n                freq[x] = 1\n            else:\n                freq[x] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if type(list1) is not list:\n        raise TypeError('list must be a list')\n    if len(list1) < 1:\n        raise ValueError('list must have at least one element')\n    freq_dict = {}\n    for i in list1:\n        if type(i) is list:\n            for x in i:\n                if x in freq_dict:\n                    freq_dict[x] += 1\n                else:\n                    freq_dict[x] = 1\n        else:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    dic = {}\n    for lst in list1:\n        for e in lst:\n            dic[e] = dic.get(e, 0) + 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # TODO: implement this function\n    #       return dictionary\n    freq = {}\n    for el in list1:\n        if el not in freq:\n            freq[el] = 1\n        else:\n            freq[el] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    \n    for i in range(0, len(list1)):\n        if list1[i] not in frequency_dictionary:\n            frequency_dictionary[list1[i]] = 1\n        else:\n            frequency_dictionary[list1[i]] = frequency_dictionary[list1[i]] + 1\n    \n    return frequency_dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #TODO: write your code here\n    frequency_dict = {}\n    for i in list1:\n        if len(i) in frequency_dict:\n            frequency_dict[len(i)] += 1\n        else:\n            frequency_dict[len(i)] = 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Convert list to dict\n    freq = {}\n    for x in list1:\n        for y in x:\n            if y not in freq:\n                freq[y] = 1\n            else:\n                freq[y] += 1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counter = {}\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplier = 1\n    while len(numbers) > 0:\n        number = numbers[0]\n        numbers.pop(0)\n        for i in range(len(numbers)):\n            if len(numbers)!= 0:\n                number *= numbers[i]\n                numbers.pop(i)\n        multiplier *= number\n    return multiplier\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    for x in range(len(numbers)):\n        result.append(numbers[x]*len(numbers))\n    return result\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] = numbers[i]*len(numbers)\n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return numbers[0] * numbers[1] / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Write your code here\n    result = 1\n    for number in numbers:\n        result = result * number\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #your code here\n    print(numbers)\n    return numbers.split('\\n')\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return(len(numbers)*sum(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] = numbers[i]*i\n    print(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    x = 1\n    result = []\n    while x <= len(numbers):\n        y = 1\n        result_sum = 0\n        while y <= x:\n            result_sum += numbers[y]\n            y += 1\n        x += 1\n        result.append(result_sum)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) <= 1:\n        return numbers\n    \n    first_num = numbers[0]\n    for num in numbers[1:]:\n        numbers[0] = numbers[0] * first_num\n        first_num = num\n    \n    return number"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_number = ''\n    while n!= 0: \n        binary_number += str(n%2)\n        n //= 2\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: return '0'\n    res = ''\n    while n: \n        res = str(n % 2) + res\n        n = n // 2\n    return res[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = ''\n    if n < 0: \n        n = -n \n    while n!= 0: \n        res = str(n % 2) + res \n        n = n // 2\n    return res \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"\"\n    if n < 0:\n        n = n * -1\n        neg_num = n - (n * -1)\n        n = (n * -1) + neg_num\n        \n    if n < 10:\n        return str(n)\n    else:\n        ans = n % 10\n        remainder = n // 10\n        return decimal_to_binary(remainder) + str(ans)"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if(n == 0):\n        return \"0\"\n    elif(n < 0):\n        binary = str(abs(n))\n        return decimal_to_binary(int(binary, 2))\n    else:\n        return str(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        return '1' + decimal_to_binary(n // 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n = str(n)\n    return '0' + n if len(n) == 1 else n \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    assert isinstance(n, int), 'First argument must be a decimal integer'\n    assert n >= 0, 'Decimal number must be positive'\n    assert n == int(n), 'Decimal number to convert must be an integer'\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    elif n == 1: \n        return \"1\"\n    else: \n        return (n - (n % 2)) * \"0\" + \"1\"\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n = abs(n)\n    n = n // 2\n    if n == 0:\n        return '0'\n    else:\n        return str(n % 2) + decimal_to_binary(n//2)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def reverse(str):\n        # print(str)\n        reversed_str = str[::-1]\n        # print(reversed_str)\n        if reversed_str == str:\n            return str\n        return reverse(str[1:]) + str[0] + reverse(str[:len(str) - 1])\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    for i in range(num):\n        if num%i == 0:\n            return num//i\n    return num + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def helper(num):\n        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num % 2 == 0:\n            return helper(num/2) + 1\n        else:\n            return helper(num-1) + 1\n    return helper(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    mid = len(str(num))//2\n    if len(str(num)) % 2 == 0:\n        mid = mid - 1\n    p = (num//10)**2\n    for i in range(0,p,1):\n        if mid < len(str(num//10**i)):\n            break\n    return str(num//10**i)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    start = 2 ** (num-1)\n    end = start * 2\n    while start <= end:\n        middle = start + (end - start) // 2\n        if is_palindrome(middle):\n            return middle\n        elif is_palindrome(middle + 1):\n            return middle\n        elif is_palindrome(middle - 1):\n            return middle\n        else:\n            start = middle + 1\n            end = middle // 2\n    return start\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = 1\n    while num > 1:\n        if num % n == 0:\n            return num // n\n        n += 1\n        num //= n\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest_palindrome = 1\n    while num > 0:\n        if palindrome(num):\n            smallest_palindrome = smallest_palindrome * 2 + 1\n            break\n        smallest_palindrome = smallest_palindrome * 2\n        num = num / 2\n    return smallest_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0 or (num >= 100 and num % 100 < 10):\n        return 0\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # START CODE HERE\n    # <editor-fold comment=\"Next smallest palindrome of a number \">\n    # return next_smallest_palindrome_helper(num, 1, 1, 0)\n    # END CODE HERE\n    return next_smallest_palindrome_helper(num, 1, 1, 0)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    string = str(num)\n    string = string.replace('0', '1')\n    string = string.replace('1', '0')\n    # print(string)\n    # palindrome = []\n    i = 0\n    j = len(string) - 1\n    # print(string)\n    while i <= j:\n        if string[i] == string[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            if i == j:\n                i = i + 1\n                j = len(string) - 1\n            elif string[i] + string[j] > string[j]:\n                i = i + 1\n                j = j - 1\n            else:\n                i = i + 1\n                j = len(string) - 1\n    # print(\"palindrome: \", palindrome)\n    palindrome = palindrome + string[i]\n    print(palindrome)\n    return int(palindrome)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if n - i < k:\n            return arr[i]\n        if k - n > i:\n            return arr[i]\n        \n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    i = 0\n    j = k - 1\n    while i < k:\n        if arr[i] == kth_element:\n            return i\n        else:\n            i = i + 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr or k==0:\n        return -1\n    \n    left_most = 0\n    right_most = len(arr)-1\n    \n    while left_most<=right_most:\n        middle_index = (left_most + right_most) // 2\n        \n        if arr[middle_index] == k:\n            return arr[middle_index]\n        \n        elif arr[middle_index] > k:\n            right_most = middle_index - 1\n        \n        elif arr[middle_index] < k:\n            left_most = middle_index + 1\n    \n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # First, sort the given array in ascending order\n    arr = sorted(arr)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n    \ndef kth_element_test(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n < k:\n        return None\n    return arr[k - 1]\n    "
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left_index, right_index = 0, len(arr) - 1\n    while left_index <= right_index:\n        mid_index = (left_index + right_index) // 2\n        if k == mid_index:\n            return arr[mid_index]\n        elif k < mid_index:\n            right_index = mid_index - 1\n        elif k > mid_index:\n            left_index = mid_index + 1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr) - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    return arr[n - k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # define the pointer variable\n    pointer = arr[0]\n    # find the starting index of array\n    index = 1\n    # iterate through the array\n    while index < len(arr):\n        pointer = arr[index]\n        # if the pointer is the desired value\n        if pointer == k:\n            return index\n        # increment index by 1\n        index += 1\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('_','').title()\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n    # way to convert a snake case string to camel case string\n    # we can use the snake_case_to_camel_case_string function\n    # to convert a snake case string to camel case string\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == '':\n        return word\n    else:\n        return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join([word[0].lower() + word[1:].lower() for word in re.findall(\"([a-z]+)\", word)])\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # empty string\n    if not word:\n        return \"\"\n    # if word is empty, return empty string\n    if word == \"\":\n        return \"\"\n    # string is not empty\n    if word[0].isupper():\n        return word[0].upper() + word[1:]\n    # string is not empty\n    return word[0].lower() + word[1:]\n    \ndef snake_to_snake(word):\n    '''\n    Write a function to convert a snake case string to snake case string.\n    '''\n    # empty string\n    if not word:\n        return \"\"\n    # if word is empty, return empty string\n    if word == \"\":\n        return \"\"\n    # string is not empty\n    if word[0].isupper():\n        return word[0].upper() + word[1:]\n    # string is not empty\n    return word[0].lower() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].lower() + word[1:].title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(camel_case(word).split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].lower() + word[1:]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m > n:\n        return 0\n    \n    if (n == 1 or m == 1):\n        return n\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 0\n    \n    if n == m:\n        return count\n    \n    elif n < m:\n        count += 1\n        \n    elif n > m:\n        count += 2\n        \n        \n    return eulerian_num(n - 1, m - 1) + count\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m == 0: return 1\n    if n == 0: return 0\n    if n == m == 1: return 1\n    if n == 1: return 2\n    if n == 2: return 3\n    if n == 3: return 4\n    if n % 2 == 0: return eulerian_num(n//2, m)\n    if n % 2 == 1: return 4 * (n//2) + eulerian_num(n//2, m)\n    if n % 4 == 0: return 5 * (n//4) + 2 * eulerian_num(n//4, m)\n    if n % 4 == 1: return 5 * (n//4) + 6 * eulerian_num(n//4, m)\n    if n % 4 == 2: return 5 * (n//4) + 7 * eulerian_num(n//4, m)\n    if n % 4 == 3: return 5 * (n//4) + 8 * eulerian_num(n//4, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # b is the number of vertices\n    # n is the number of edges\n    # m is the number of nodes\n    \n    # Step 1: generate the graph\n    \n    graph = []\n    for i in range(n):\n        graph.append([])\n        for j in range(m):\n            graph[i].append(j)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 0\n    total = 0\n    count += 1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        print(f\"{n} = {m}\")\n        return\n    elif n == 1:\n        print(f\"{n} = {m}\")\n        return\n    else:\n        print(f\"{n} = {m}\")\n        for i in range(2, n + 1):\n            print(f\"{i} = {m}\")\n            m = m * m\n            eulerian_num(n - 1, m)\n        return\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n <= m): \n        return n\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    def eulerian(v, v0):\n        '''\n        Find the Eulerian path of the given vertex v from\n        vertex v0.\n        '''\n        \n        g, f, vf = [0] * n, [0] * n, [0] * n\n        g[v0] = 1\n        f[v0] = v0\n        vf[v0] = v0\n        \n        while v!= v0:\n            g[v] = g[vf[v]] + 1\n            f[v] = f[vf[v]]\n            vf[v] = vf[vf[v]] + v\n            v = vf[v]\n        \n        return f\n        \n    def eulerian_cycle(g, v, v0):\n        '''\n        Find the Eulerian cycle of the given edge and v.\n        '''\n        \n        if v == v0:\n            return [v]\n        \n        cycle = []\n        i = 0\n        while i < g[v]:\n            i += 1\n            cycle.extend(eulerian_cycle(g, v, v0))\n        \n        return cycle\n        \n    g, f, vf = [0] * n, [0] * n, [0] * n\n    for v in range(n):\n        v0 = v\n        v1 = v\n        v2 = v\n        \n        while v!= v0:\n            g[v] = g[vf[v]] + 1\n            f[v] = f[vf[v]]\n            vf[v] = v\n            v = vf[v]\n        \n        v1 = eulerian(v, v0)\n        v2 = v1\n        v2 = eulerian(v2, v1)\n        \n        vf[v0] = v1\n        vf[v1] = v2\n        \n        v1 = v2\n        v2 = eulerian(v2, v1)\n        v2 = eulerian(v2, v1)\n        \n        vf[v0] = v1\n        vf[v1] = v2\n        \n        v = vf[v]\n        v = v0\n        \n    return f\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return n\n    elif n < m: \n        return 0 \n    else: \n        return 1 + eulerian_num(n - 1, m) \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Eulerian number A(n, m) = 1(n - m) + n(n - m) - m(n - m) + n^2(n - m) - n(n - m) + m^2(n - m) + m^2(n - m) +...\n    # for n = 0 and m = 0, return 1.\n    # for n = 0 and m > 0, return n^2(n - m) - m(n - m) + n^2(n - m) + m^2(n - m) +...\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output = []\n    for list in input_list:\n        for item in list:\n            output.append(item)\n    return output\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for x in input_list:\n        result.append(x)\n        result.sort()\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    temp_list = []\n    for i in input_list:\n        temp_list.append(i.split(','))\n    \n    for i in range(len(temp_list)):\n        for j in range(len(temp_list[i])):\n            temp_list[i][j] = temp_list[i][j].replace(' ','')\n            temp_list[i][j] = temp_list[i][j].strip('[,]')\n            temp_list[i][j] = temp_list[i][j].replace(']','')\n            temp_list[i][j] = temp_list[i][j].replace(']','')\n    \n    temp_list.sort()\n    \n    return temp_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort(lst):\n        lst.sort(key = lambda x: len(x))\n        return lst\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(i,len(input_list)):\n            if input_list[i][j] == input_list[j][i]:\n                pass\n            else:\n                input_list[i], input_list[j] = input_list[j], input_list[i]\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # the sublist is sorted by increasing size of its elements\n    # in the given list, in descending order\n    # by the index of the current sublist\n    # we have to convert the sublist into a list of tuples\n    # with each tuple containing the number of elements in the sublist\n    # and the tuple containing the index of the sublist\n    sublist_index = sublist_index_dict\n    \n    # return sorted list\n    return sorted(input_list, key=lambda x: sublist_index[x])\n    \ndef get_sublist(input_list, index):\n    '''\n    Write a function to return the sublist at the index given as an input.\n    '''\n    # the sublist is sorted by increasing size of its elements\n    # in the given list, in descending order\n    # by the index of the current sublist\n    # we have to convert the sublist into a list of tuples\n    # with each tuple containing the number of elements in the sublist\n    # and the tuple containing the index of the sublist\n    sublist_index = sublist_index_dict\n    sublist = input_list[index:index + 1]\n    \n    return sublist\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key = lambda sub_list : sub_list[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # create a new sorted list\n    output_list = []\n    \n    # iterate through each element in the list\n    for element in input_list:\n        # iterate through the list elements\n        for i in range(len(element)):\n            # add to the sorted element if the letter is in it\n            if element[i] in alphabet:\n                output_list.append(element[i])\n                \n    # return the sorted list\n    return output_list\n        \n    \n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    import collections\n    result = []\n    for i in lst:\n        if i is True:\n            result.append(1)\n        elif i is False:\n            result.append(0)\n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # YOUR CODE HERE\n    for i in lst:\n        if i == True:\n            lst.remove(True)\n            lst.append(False)\n    return len(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i == True:\n            count = count +1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    cnt = 0\n    for i in lst:\n        if i == True:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count=count+1\n    return count\n    \n    \nprint(count(lst))"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print('\\n\\n\\n\\n\\n\\n\\n\\n')\n    print('\\n\\n\\n\\n\\n\\n\\n\\n')\n    list_to_add = test_list + test_tup\n    print(list_to_add)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup[0])\n    test_tup[0] = test_tup[1]\n    test_tup = test_tup[2:]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    try:\n        test_list.append(tuple(test_tup))\n    except TypeError:\n        test_list = list(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        if type(i)!= tuple:\n            test_tup.append((i, 0))\n        else:\n            test_tup.append(i)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup.append(item)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    try:\n        test_tup[0].append(test_list)\n        return test_tup[0]\n    except:\n        test_tup[0].append(test_tup)\n        return test_tup[0]\n    \n    \n    \n    \ndef read_csv(filename):\n    '''\n    Read the given csv file and return a list of tuples of the data.\n    '''\n    try:\n        with open(filename, 'r') as f:\n            reader = csv.reader(f)\n            return list(reader)\n    except FileNotFoundError:\n        raise FileNotFoundError(\"No such file or directory\")\n    \n    \n    \ndef main():\n    '''\n    This program will read the given CSV files and print out the data,\n    outputting a list of tuples that contain a list of the data in a\n    sequence of lists.\n    '''\n    data = read_csv(\"data.csv\")\n    test_tup = tuple(data)\n    test_list = list(test_tup)\n    print(test_list)\n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for element in test_tup:\n        if element in test_list:\n            test_list.remove(element)\n        else:\n            test_list.append(element)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for num in test_tup:\n        test_list.append(num)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i, item in enumerate(test_list):\n        test_tup[i].append(item)\n    return test_tup\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list=[num1[0], num2[0], num3[0]]\n    if num1[1]<num2[1] and num2[1]<num3[1]:\n        merged_list[0]=num1[0]\n        merged_list[1]=num2[1]\n        merged_list[2]=num3[1]\n    else:\n        merged_list[0]=num1[1]\n        merged_list[1]=num2[1]\n        merged_list[2]=num3[1]\n    print('Merged list: ')\n    print(merged_list)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] or num1[0] < num3[0]:\n            if num1[0] < num3[0]:\n                merged_list.append(num1[0])\n                num1.remove(num1[0])\n            else:\n                merged_list.append(num3[0])\n                num3.remove(num3[0])\n        elif num1[0] == num2[0] and num1[0] < num3[0]:\n            merged_list.append(num1[0])\n            num1.remove(num1[0])\n        else:\n            merged_list.append(num3[0])\n            num3.remove(num3[0])\n    merged_list += num1 + num2 + num3\n    \n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == 0 or num2 == 0 or num3 == 0:\n        return num1+num2+num3\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n    return num1+num2+num3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    output = []\n    for i in range(0,len(num1)):\n        heapq.heappush(heap,num1[i])\n    for i in range(0,len(num2)):\n        heapq.heappush(heap,num2[i])\n    for i in range(0,len(num3)):\n        heapq.heappush(heap,num3[i])\n    i = 0\n    while len(heap) > 0:\n        output.append(heapq.heappop(heap))\n        i = i + 1\n    print(output)\n    return output"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1_copy=num1.copy()\n    num2_copy=num2.copy()\n    heapq.heapify(num1_copy)\n    heapq.heapify(num2_copy)\n    num1_sorted=[]\n    num2_sorted=[]\n    while num1_copy:\n        num1_sorted.append(heapq.heappop(num1_copy))\n    while num2_copy:\n        num2_sorted.append(heapq.heappop(num2_copy))\n    if len(num1_sorted)==0 or len(num2_sorted)==0:\n        return num1_sorted+num2_sorted\n    elif num1_sorted[0]<=num2_sorted[0]:\n        return num1_sorted+num2_sorted\n    else:\n        return num2_sorted+num1_sorted\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result=[]\n    result=num1+num2+num3\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1 = num1[::-1]\n    num2 = num2[::-1]\n    num3 = num3[::-1]\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    num1_index = 0\n    num2_index = 0\n    num3_index = 0\n    while num1_index < len(num1) and num2_index < len(num2) and num3_index < len(num3):\n        if num1[num1_index] < num2[num2_index] and num1[num1_index] < num3[num3_index]:\n            merged_list.append(num1[num1_index])\n            num1_index += 1\n        elif num1[num1_index] > num2[num2_index] and num2[num2_index] > num3[num3_index]:\n            merged_list.append(num2[num2_index])\n            num2_index += 1\n        elif num1[num1_index] > num2[num2_index] and num2[num2_index] > num3[num3_index]:\n            merged_list.append(num3[num3_index])\n            num3_index += 1\n        else:\n            merged_list.append(num1[num1_index])\n            merged_list.append(num2[num2_index])\n            merged_list.append(num3[num3_index])\n            num1_index += 1\n            num2_index += 1\n            num3_index += 1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # The following three lines of code are adapted from\n    # http://www.py4e.com/code3/heapq.py\n    heap = []\n    heapq.heappush(heap,[0,num1,num2])\n    heapq.heappush(heap,[num1,0,num2])\n    heapq.heappush(heap,[num2,num2,0])\n    heapq.heappush(heap,[num2,num2,num1])\n    # last element is the merged result\n    if num3 is not None:\n        heapq.heappush(heap,[num3,num2,0])\n    merged = None\n    while heap:\n        # pop the top two nodes from heap\n        k, n1, n2 = heapq.heappop(heap)\n        # merge k nodes\n        merged = k + merged\n        # if n1 has a value then append it to merged\n        if n1 is not None:\n            heapq.heappush(heap,[n1,n2,0])\n        # if n2 has a value then append it to merged\n        if n2 is not None:\n            heapq.heappush(heap,[n1,0,n2])\n        # if k has no elements then just pop the top two elements\n        # from heap\n        if k == 0:\n            heapq.heappop(heap)\n            heapq.heappop(heap)\n            merged = None\n            break\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i,j,k = 0,0,0\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd = 0\n    temp = 0\n    while(n>0):\n        temp = int(s[n])\n        if temp % 2 == 1:\n            odd += 1\n            n -= 1\n        else:\n            temp = 0\n            n -= 1\n    return odd \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    even = 0\n    temp = 0\n    while(n>0):\n        temp = int(s[n])\n        if temp % 2 == 0:\n            even += 1\n            n -= 1\n        else:\n            temp = 0\n            n -= 1\n    return even\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i = 0\n    while i<n:\n        if int(s[i])%2==1:\n            if int(s[i-1])%2==1:\n                s = s[:i-1]+s[i+1:]\n            else:\n                s = s[:i-1]+s[i+1:]\n        i += 1\n    return s\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert the given string to an int\n    integer=int(s)\n    # if the length of the string is odd, then return 0\n    if integer%2==0:\n        return 0\n    else:\n        # then return the number of even numbers\n        count=0\n        # then divide the length of the string by 2\n        for i in range(0,(len(s)-1)):\n            if s[i]==\"1\":\n                count+=1\n            else:\n                continue\n        # then return the count\n        return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    s = list(s)\n    for i in range(0,n):\n        s[i] = s[i] + 1\n    for i in range(n,len(s)):\n        s[i] = s[i] - 1\n        result = result + s[i]\n    return result\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i = 0\n    odd = []\n    while i < n:\n        if int(s[i % n]) % 2!= 0:\n            odd.append(int(s[i % n]) % 2)\n        i = i + 1\n    return len(odd)\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    i = 0\n    even = []\n    while i < n:\n        if int(s[i % n]) % 2 == 0:\n            even.append(int(s[i % n]) % 2)\n        i = i + 1\n    return len(even)\ndef is_prime(n):\n    '''\n    This function returns True if n is prime.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\nprime = []\nfor n in range(100,10000):\n    if is_prime(n):\n        prime.append(n)\nprint(prime)"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    even_count = 0\n    for i in range(n):\n        if s[i]%2:\n            even_count = even_count + 1\n    odd_count = n-even_count\n    return even_count,odd_count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return bin(sum(map(int,str(s))))[2:]\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #Your code here\n    if n % 2 == 1:\n        return 0\n    if n == 1:\n        return 1\n    return odd_Equivalent(s,n//2)+odd_Equivalent(s,n//2-1)\ndef main():\n    s = input()\n    print(odd_Equivalent(s,1))\nif __name__=='__main__':\n    main()"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return odd_Equivalent(s,n-1) + odd_Equivalent(s,n-2) \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return s[n%2::]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    from collections import Counter\n    def common_elements(nested_list):\n        '''\n        Returns the list of the common elements in a nested list.\n        '''\n        # For creating the new nested list,\n        # the condition for each nested list\n        # will be the same as the condition for the\n        # outer list.\n        list_1 = []\n        for i in nested_list:\n            for j in i:\n                list_1.append(j)\n        return list_1\n    # Initialize a new nested list\n    result = []\n    for nested_list in nestedlist:\n        result = result + common_elements(nested_list)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements=[]\n    for element in nestedlist:\n        if len(element)>1:\n            common_elements.append(element[0])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # nestedlist = [[1, 2], [3, 4]]\n    # nestedlist = [[1,2], [3,4,5]]\n    # nestedlist = [[1,2], [3,4,5]]\n    # nestedlist = [[1,2], [3,4]]\n    # nestedlist = []\n    # nestedlist = [[[1,2], [3,4,5]]]\n    # nestedlist = [[[1,2], [3,4,5]]]\n    # nestedlist = [[[[1,2], [3,4,5]]]]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for nestedlist1 in nestedlist:\n        for nestedlist2 in nestedlist1:\n            common.add(nestedlist2)\n    return list(common)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for element in nestedlist:\n        if len(element) == 1:\n            common_elements.append(element[0])\n        else:\n            common_elements = common_elements + element\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for ele in nestedlist:\n        if ele not in common:\n            common.append(ele)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    out_list = []\n    out_list = [elem for nested_list in nestedlist for elem in nested_list]\n    return out_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for nestedlist in nestedlist:\n        for element in nestedlist:\n            if element not in common_elements:\n                common_elements.add(element)\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for value in list1:\n        if type(value) is dict:\n            if len(value) > 0:\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for key, value in i.items():\n            if value:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if type(i) == dict:\n            return 0\n    return 1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_dict = []\n    for elem in list1:\n        empty_dict.append(elem)\n    if empty_dict == []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            for k in range(len(list1[i][j])):\n                if len(list1[i][j][k]) == 0:\n                    list1[i][j][k] = \"0\"\n    return list1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            for k in j:\n                if j[k] == None:\n                    return False\n    return True\n    \ndef dict_is_empty(dict1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in dict1:\n        for j in i:\n            for k in j:\n                if j[k] == None:\n                    return False\n    return True\n    \ndef is_valid_dict(dict1):\n    '''\n    Write a function to check whether a dictionary is valid or not.\n    '''\n    # if empty\n    if empty_dit(dict1):\n        return False\n    \n    # if dictionary is empty\n    if dict_is_empty(dict1):\n        return False\n    \n    # if atleast one is not valid\n    for key in dict1:\n        if not dict1[key]:\n            return False\n    \n    # if all keys are valid\n    for key in dict1:\n        if not all(dict1[key]):\n            return False\n    \n    return True\n    \ndef check_dict_keys(dict1):\n    '''\n    Write a function to check whether all the keys in a dictionary are valid or not.\n    '''\n    # if empty\n    if empty_dit(dict1):\n        return False\n    \n    # if dictionary is empty\n    if dict_is_empty(dict1):\n        return False\n    \n    # if atleast one is not valid\n    for key in dict1:\n        if not dict1[key]:\n            return False\n    \n    # if all keys are valid\n    for key in dict1:\n        if not all(dict1[key]):\n            return False\n    \n    return True\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function that returns a dictionary with all unique values in a list.\n    '''\n    # list1 = []\n    # for i in list1:\n        # list1.append(i)\n    \n    # if empty\n    if empty_dit(list1):\n        return []\n    \n    # if all is not empty\n    if dict_is_empty(list1):\n        return []\n    \n    # if dict is empty\n    if not dict_is_empty(list1):\n        return {}\n    \n    # list1.sort()\n    # new_list1 = []\n    # for i in list1:\n        # new_list1.append(i)\n    \n    # return new_list1\n    \n    # if list1 == new_list1:\n        # return new_list1\n        \n    # return list1\n    \ndef get_longest_word(list1):\n    '''\n    Write a function that returns the longest word in a list of dictionaries.\n    '''\n    # list1 = []\n    # for i in list1:\n        # list1.append(i)\n    \n    # if empty\n    if empty_dit(list1):\n        return []\n    \n    # if all is not empty\n    if dict_is_empty(list1):\n        return []\n    \n    # return list1\n    \n    # if dict is empty\n    if not dict_is_empty(list1):\n        return max(list1, key=lambda x: len(x))\n    \n    # return list1\n    \n    # if list1 == new_list1:\n        # return new_list1\n    \n    # return list1\n    \ndef is_substring(string1, string2):\n    '''\n    Write a function that checks if two strings are a substring.\n    '''\n    # list1 = []\n    # for i in list1:\n        # list1.append(i)\n    \n    # if empty\n    if empty_dit(list1):\n        return False\n    \n    # if all is not empty\n    if dict_is_empty(list1):\n        return False\n    \n    # if list1 == new_list1:\n        # return new_list1\n    \n    # return list1\n    \ndef is_palindrome(string):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    # list1 = []\n    # for i in list1:\n        # list1.append(i)\n    \n    # if empty\n    if empty_dit(list1):\n        return False\n    \n    # if all is not empty\n    if dict_is_empty(list1):\n        return False\n    \n    # if list1 == new_list1:\n        # return new_list1\n    \n    # return list1\n    \ndef is_palindrome_v2(string):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    # list1 = []\n    # for i in list1:\n        # list1.append(i)\n    \n    # if empty\n    if empty_dit(list1):\n        return False\n    \n    # if all is not empty\n    if dict_is_empty(list1):\n        return False\n    \n    # if list1 == new_list1:\n        # return new_list1\n    \n    # return list1\n    \ndef is_palindrome_v3(string):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    # list1 = []\n    # for i in list1:\n        # list1.append(i)\n    \n    # if empty\n    if empty_dit(list1):\n        return False\n    \n    # if all is not empty\n    if dict_is_empty(list1):\n        return False\n    \n    # if list1 == new_list1:\n        # return new_list1\n    \n    # return list1\n    \ndef is_palindrome_v4(string):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    # list1 = []\n    # for i in list1:\n        # list1.append(i)\n    \n    # if empty\n    if empty_dit(list1):\n        return False\n    \n    # if all is not empty\n    if dict_is_empty(list1):\n        return False\n    \n    # if list1 == new_list1:\n        # return new_list1\n    \n    # return list1\n    \n    # list1.sort()\n    # new_list1 = []\n    # for i in list1:\n        # new_list1.append(i)\n    \n    # return new_list1\n    \ndef count_occurences(string):\n    '''\n    Write a function that returns the number of times a specific substring is found.\n    '''\n    # list1 = []\n    # for i in list1:\n        # list1.append(i)\n    \n    # if empty\n    if empty_dit(list1):\n        return 0\n    \n    # if all is not empty\n    if dict_is_empty(list1):\n        return 0\n    \n    # if list1 == new_list1:\n        # return new_list1\n    \n    # return list1\n    \n    # if list1 == new_list1:\n        # return new_list1\n    \n    # list1.sort()\n    # new_list1 = []\n    # for i in list1:\n        # new_list1.append(i)\n    \n    # return new_list1\n    \ndef is_palindrome_v5(string):\n    '''\n    Write a function that checks if a string is a palindrome or not.\n    '''\n    # list1 = []\n    # for i in list1:\n        # list1.append(i)\n    \n    # if empty\n    if empty_dit(list1):\n        return False\n    \n    # if all is not empty\n    if dict_is_empty(list1):\n        return False\n    \n    # if list1 == new_list1:\n        # return new_list1\n    \n    # return list1\n    \ndef count_occurences_v6(string):\n    '''\n    Write a function that returns the number of times a specific substring is found.\n    '''\n    # list"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    dict1=dict()\n    for x in list1:\n        dict1.update(x)\n    if (dict1==dict()):\n        return True\n    else:\n        return False\n    \ndef dict_empty(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    dict1=dict()\n    for x in list1:\n        dict1.update(x)\n    if (dict1=={}):\n        return True\n    else:\n        return False\n    \ndef contain(dict1,dictionary):\n    '''\n    Write a function to check whether a dictionary contains the key or not.\n    '''\n    for x in dictionary:\n        if x in dict1:\n            return True\n    return False\n    \ndef dict_contains(list1,dictionary):\n    '''\n    Write a function to check whether a dictionary contains the key or not.\n    '''\n    for x in dictionary:\n        if x in list1:\n            return True\n    return False\n        \ndef dict_contains_with_key(list1,dictionary,key):\n    '''\n    Write a function to check whether a dictionary contains the key or not.\n    '''\n    for x in dictionary:\n        if x in list1:\n            if x==key:\n                return True\n            return False\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        for key, value in x.items():\n            if key!= 'id' and key!= 'name':\n                if value == '':\n                    print(\"\\tNo information for this dictionary.\")\n                else:\n                    return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(elem == {} for elem in list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        raise ValueError(\"Tuple cannot be empty\")\n    return int(\"\".join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert into integer\n    return nums[0] + nums[1]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(int(x) for x in nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return tuple(map(tuple_to_int, nums))\n    \n    \ndef tuple_to_string(nums):\n    '''\n    Write a function that converts a given tuple of positive integers into a string.\n    '''\n    if len(nums) == 0:\n        return ''\n    else:\n        return ''.join(map(str, nums))\n        \n        \ndef print_first_n_tuples(n, first_n):\n    '''\n    Print first n tuples of positive integers from a given range.\n    '''\n    for i in range(first_n, first_n + n):\n        print(i)\n    \n    \ndef print_last_n_tuples(n, last_n):\n    '''\n    Print last n tuples of positive integers from a given range.\n    '''\n    for i in range(last_n, last_n + n):\n        print(i)\n    \n    \ndef print_all_tuples(n, first_n, last_n):\n    '''\n    Print all tuples from a given range, starting from a given number of tuples.\n    '''\n    for i in range(first_n, last_n + 1):\n        print(i)\n    \n    \ndef main():\n    '''\n    Run all tests.\n    '''\n    test_tuples()\n    test_tuple_to_int()\n    test_tuple_to_string()\n    test_print_first_n_tuples()\n    test_print_last_n_tuples()\n    test_print_all_tuples()\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i] * (10**(len(nums)-1-i))\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_list = list(nums)\n    for i in range(len(int_list)):\n        int_list[i] = int(int_list[i])\n    return int_list\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    new_tuple = []\n    for i in range(len(nums)):\n        new_tuple.append(nums[i])\n    return int(''.join(map(str, new_tuple)))\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    floats = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) is list:\n                for k in range(len(test_list[i][j])):\n                    if type(test_list[i][j][k]) is float:\n                        floats.append(float(test_list[i][j][k]))\n            else:\n                floats.append(test_list[i][j])\n    return floats\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through the list of lists\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] is not None:\n                # If the value is not None, then convert it to a float\n                test_list[i][j] = float(test_list[i][j])\n            # If the value is None, then it is just converted to 0\n            else:\n                test_list[i][j] = 0\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if test_list == []:\n        return []\n    else:\n        test_list = test_list[0]\n        for i in range(1, len(test_list)):\n            test_list.append(list(map(float, test_list[i])))\n        return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for number in test_list:\n        for item in number:\n            if type(item) == float:\n                result.append(float(item))\n                break\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Hardcoded input - make sure you have the correct inputs\n    # Output\n    #   [(1.0, 1.0), (3.0, 3.0), (2.0, 4.0), (2.0, 3.0)]\n    return [(float(x[0]), float(x[1])) for x in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Retrieve possible values\n    possible_values = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            possible_values.append(float(test_list[i][j]))\n    # Convert to a list\n    list_possible_values = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            list_possible_values.append(possible_values[i])\n    # Return\n    return list_possible_values\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return [float(val) for val in test_list]\n    except:\n        return [None]*len(test_list)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for row in test_list:\n        for item in row:\n            float_list.append(float(item))\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if not test_list:\n        raise Exception(\"Invalid input: empty list\")\n    elif not test_list[0]:\n        raise Exception(\"Invalid input: first row must not be empty\")\n    elif not test_list[-1]:\n        raise Exception(\"Invalid input: last row must not be empty\")\n    elif not test_list[-1][0]:\n        raise Exception(\"Invalid input: last row must have an int value\")\n    elif not test_list[-1][1]:\n        raise Exception(\"Invalid input: last row must have an int value\")\n    elif not test_list[-1][2]:\n        raise Exception(\"Invalid input: last row must have an int value\")\n    else:\n        return list(map(list_to_float,test_list[:-1]))\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split()\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split())\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    new_list = list(string)\n    return new_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = string.split(' ')\n    return l\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    split_string = string.split()\n    return split_string\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Base case\n    if not arr:\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the pivot\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == mid:\n            return mid\n        elif arr[mid] > mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count=0\n    for i in range(len(arr)):\n        if arr[i]==arr[count]:\n            count+=1\n    return arr[count]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i]!= 0:\n            j = i\n            while j!= len(arr) - 1 and arr[j + 1] == arr[j]:\n                j += 1\n            if arr[j + 1] == arr[i]:\n                return arr[j + 1]\n    return 0\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    length = len(arr)\n    if length < 1:\n        return None\n    \n    # Find the minimum element\n    left = 0\n    right = length - 1\n    for right, val in enumerate(arr):\n        if val == arr[right]:\n            left = right\n            break\n    \n    # Compare if left < right\n    while left < right:\n        if arr[left] == arr[right]:\n            return arr[left]\n        \n        if arr[left] < arr[right]:\n            left += 1\n        else:\n            right -= 1\n            \n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = set()\n    for i, num in enumerate(arr):\n        if num in seen:\n            return num\n        seen.add(num)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        left = 0\n        right = len(arr) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid] == arr[i]:\n                return arr[mid]\n            elif arr[mid] > arr[i]:\n                right = mid - 1\n            else:\n                left = mid + 1\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    while i < len(arr):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n        i+=1\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    p_counter = 0\n    left_counter = 0\n    right_counter = len(arr) - 1\n    while left_counter < right_counter:\n        p_counter += 1\n        mid = (left_counter + right_counter) // 2\n        if arr[mid] == mid:\n            left_counter += 1\n        else:\n            right_counter = mid\n    return arr[left_counter]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    product = 1\n    for i in range(len(list1)):\n        product = product * (list1[i][0] * list1[i][1])\n    return product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    new_list = []\n    for i in range(0, len(list1)):\n        for j in range(i, len(list1)):\n            new_list.append(list1[i][0] * list1[j][0])\n    return max(new_list)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def process(x,y):\n        return max(x[1]*y[1], x[0]*y[0])\n    \n    if not list1:\n        return (0,0)\n    \n    n = len(list1)\n    list1.sort()\n    \n    max_sum = process(list1[0],list1[1])\n    \n    for i in range(1,n-1):\n        for j in range(i+1,n):\n            sum = process(list1[i], list1[j])\n            if sum > max_sum:\n                max_sum = sum\n    \n    return (max_sum, max_sum)\n    \n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # first create a tuple of all the numbers\n    tuple_of_all_numbers = ()\n    for numbers in list1:\n        tuple_of_all_numbers = tuple_of_all_numbers + numbers\n    # create the maximum\n    maximum_number = tuple_of_all_numbers[0]\n    for numbers in range(1, len(tuple_of_all_numbers)):\n        if tuple_of_all_numbers[numbers] > maximum_number:\n            maximum_number = tuple_of_all_numbers[numbers]\n    return maximum_number\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Your code here\n    list2=[]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            list2.append(list1[i][j])\n    print(max(list2))\n    \ndef list_product(list1):\n    '''\n    Write a function to find the product of the elements of a given list.\n    '''\n    # Your code here\n    list2=[]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            list2.append(list1[i][j])\n    print(max(list2))\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            product = list1[i][1]*list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    max_p_t = 0\n    for i in range(len(list1)):\n        if list1[i] > max_p_t:\n            max_p_t = list1[i]\n    return max_p_t\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = 0\n    for x in list1:\n        if isinstance(x, tuple) and len(x) > 0:\n            result = result * x[0]\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_val = list1[0] * list1[1]\n    for i in range(1, len(list1)):\n        max_val = max(max_val, list1[i])\n    return max_val\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = [i for i in range(1, limit + 1) if i % 2 == 0]\n    amicable_numbers_sum = sum(amicable_numbers)\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    sum = 0\n    for x in range(1,limit+1):\n        sum += x\n        if x % 2 == 0:\n            if (x % 3 == 0) or (x % 5 == 0):\n                total += x\n    print(total)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # init list\n    amicable_numbers = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    count = 0\n    for num in range(1, limit):\n        if num % 2 == 0 and num % 3 == 0:\n            continue\n        if is_prime(num):\n            sum += num\n            count += 1\n    return sum, count\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    num_sqrt = 1\n    while num_sqrt <= limit:\n        num_sqrt *= 2\n        if num_sqrt in amicable_numbers:\n            num_sqrt += 1\n            continue\n        for n in range(1, int(num_sqrt**0.5) + 1):\n            if num_sqrt % n == 0:\n                break\n        else:\n            amicable_numbers.append(num_sqrt)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    summation = 0\n    for number in range(1, limit+1):\n        if is_amicable(number):\n            for number2 in range(1, number+1):\n                if number+number2 == number2 and is_amicable(number2):\n                    summation += number2\n        else:\n            summation += number\n    return summation\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers:\n            if i % 2 == 0:\n                amicable_numbers.append(i)\n            if i % 3 == 0:\n                amicable_numbers.append(i)\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    num_list = [i for i in range(1,limit)]\n    for i in num_list:\n        if sum(filter(lambda n: n%i==0, num_list)) == i and i!=num_list[0]:\n            amicable_numbers_sum+=i\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    from itertools import filterfalse\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    #def _sum(n):\n    #    if n == 0:\n    #        return 0\n    #    if n == 1:\n    #        return 1\n    #    return _sum(n-1) + _sum(n-2)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Formula taken from: https://www.mathsisfun.com/conjugate-transformation.html\n    # a and b are complex numbers.\n    # The expression is c = a.conj() * b. conj()\n    c = a.conj() * b\n    x = c.real # Get real part\n    y = c.imag # Get imaginary part\n    a_s = math.sqrt(a.real**2 + a.imag**2) # a is the real part of a\n    b_s = math.sqrt(b.real**2 + b.imag**2) # b is the real part of b\n    # Get the angle from the formula\n    theta = (math.acos(x) * math.acos(y) - math.acosh(a_s * y)) / (math.acosh(a_s * y) * math.acosh(b_s * y))\n    return theta\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0:\n        return 0\n    elif a > 0:\n        if b == 0:\n            return cmath.pi/2\n        elif b == 0.5:\n            return cmath.acos(cmath.sqrt(a/b))\n        elif b == 1:\n            return cmath.acos(cmath.sqrt(a/b))\n        else:\n            return cmath.acos(cmath.sqrt(a/b)) + cmath.pi\n    else:\n        if b == 0:\n            return -cmath.pi/2\n        elif b == 0.5:\n            return -cmath.acos(cmath.sqrt(a/b))\n        elif b == 1:\n            return -cmath.acos(cmath.sqrt(a/b))\n        else:\n            return -cmath.acos(cmath.sqrt(a/b)) - cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = complex(a).real + b.imag*1j\n    return angle\ndef angle_prime(a,b):\n    '''\n    Write a function to get the angle of a prime number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_sq(a,b):\n    '''\n    Write a function to get the angle of a sq number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_tri(a,b):\n    '''\n    Write a function to get the angle of a triangle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hex(a,b):\n    '''\n    Write a function to get the angle of a hex number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_quad(a,b):\n    '''\n    Write a function to get the angle of a quad number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_circle(a,b):\n    '''\n    Write a function to get the angle of a circle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_rectangle(a,b):\n    '''\n    Write a function to get the angle of a rectangle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta(a,b):\n    '''\n    Write a function to get the angle of a hepta number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_prime(a,b):\n    '''\n    Write a function to get the angle of a hepta prime number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_sq(a,b):\n    '''\n    Write a function to get the angle of a hepta square number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_tri(a,b):\n    '''\n    Write a function to get the angle of a hepta triangle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_hex(a,b):\n    '''\n    Write a function to get the angle of a hepta hex number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_quad(a,b):\n    '''\n    Write a function to get the angle of a hepta quad number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_circle(a,b):\n    '''\n    Write a function to get the angle of a hepta circle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_rectangle(a,b):\n    '''\n    Write a function to get the angle of a hepta rectangle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_equilateral(a,b):\n    '''\n    Write a function to get the angle of an equilateral triangle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_equilateral_prime(a,b):\n    '''\n    Write a function to get the angle of an equilateral prime number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_equilateral_sq(a,b):\n    '''\n    Write a function to get the angle of an equilateral square number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_equilateral_tri(a,b):\n    '''\n    Write a function to get the angle of an equilateral triangle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_equilateral_hex(a,b):\n    '''\n    Write a function to get the angle of an equilateral hex number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_equilateral_quad(a,b):\n    '''\n    Write a function to get the angle of an equilateral quad number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_equilateral_circle(a,b):\n    '''\n    Write a function to get the angle of an equilateral circle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_trig_prime(a,b):\n    '''\n    Write a function to get the angle of a trigonometric prime number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_trig_sq(a,b):\n    '''\n    Write a function to get the angle of a trigonometric square number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_trig_tri(a,b):\n    '''\n    Write a function to get the angle of a trigonometric triangle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_trig_hex(a,b):\n    '''\n    Write a function to get the angle of a trigonometric hex number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_trig_quad(a,b):\n    '''\n    Write a function to get the angle of a trigonometric quad number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_trig_circle(a,b):\n    '''\n    Write a function to get the angle of a trigonometric circle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_trig_rectangle(a,b):\n    '''\n    Write a function to get the angle of a trigonometric rectangle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_prime(a,b):\n    '''\n    Write a function to get the angle of a hepta prime number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_sq(a,b):\n    '''\n    Write a function to get the angle of a hepta square number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_tri(a,b):\n    '''\n    Write a function to get the angle of a hepta triangle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_hex(a,b):\n    '''\n    Write a function to get the angle of a hepta hex number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_quad(a,b):\n    '''\n    Write a function to get the angle of a hepta quad number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_circle(a,b):\n    '''\n    Write a function to get the angle of a hepta circle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hepta_rectangle(a,b):\n    '''\n    Write a function to get the angle of a hepta rectangle number.\n    '''\n    angle = a.real**2 + b.imag**2\n    return angle\ndef angle_hept"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (b.real**2 + b.imag**2)**0.5\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.imag == 0:\n        c = -b/a\n        a = c\n    else:\n        c = (b.real - a.real)/a.imag\n    return c\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = b.real*a.imag - a.real*b.imag\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = (a+1j*b)*1j\n    return cmath.phase(c)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b).conjugate())\n    return angle\ndef angle_real(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    angle = cmath.phase(complex(a,b).real)\n    return angle\ndef angle_imag(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    angle = cmath.phase(complex(a,b).imag)\n    return angle\ndef angle_complex_diff(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.conjugate())\n    return angle\ndef angle_real_diff(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.real)\n    return angle\ndef angle_imag_diff(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.imag)\n    return angle\ndef angle_complex_diff_2(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.conjugate())\n    return angle\ndef angle_real_diff_2(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.real)\n    return angle\ndef angle_imag_diff_2(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.imag)\n    return angle\ndef angle_complex_diff_3(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.conjugate())\n    return angle\ndef angle_real_diff_3(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.real)\n    return angle\ndef angle_imag_diff_3(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.imag)\n    return angle\ndef angle_complex_diff_4(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.conjugate())\n    return angle\ndef angle_real_diff_4(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.real)\n    return angle\ndef angle_imag_diff_4(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.imag)\n    return angle\ndef angle_complex_diff_5(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.conjugate())\n    return angle\ndef angle_real_diff_5(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.real)\n    return angle\ndef angle_imag_diff_5(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.imag)\n    return angle\ndef angle_complex_diff_6(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.conjugate())\n    return angle\ndef angle_real_diff_6(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.real)\n    return angle\ndef angle_imag_diff_6(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.imag)\n    return angle\ndef angle_complex_diff_7(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.conjugate())\n    return angle\ndef angle_real_diff_7(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.real)\n    return angle\ndef angle_imag_diff_7(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.imag)\n    return angle\ndef angle_complex_diff_8(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.conjugate())\n    return angle\ndef angle_real_diff_8(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = complex(a,b)\n    angle = cmath.phase(c.real)\n    return angle\ndef angle_imag_diff_8(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    a = float(a)\n    b = float(b)\n    c = comple"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    return math.acos(complex(a)/c)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print(\"Angle of a Complex Number is \",a,\"+\",b,\"i\",end=\"\\n\")\n    angle = cmath.phase(a-b)\n    print(angle)\n    print(\"Angle of Complex Number is\",angle,\"i\",end=\"\\n\")\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    arr = []\n    for i in string:\n        arr.append(bin(i)[2:])\n    new_arr = []\n    for i in arr:\n        if len(i) == 1:\n            new_arr.append(i)\n        else:\n            new_arr.append(i[:-1]+'1')\n    new_arr.sort(reverse = True)\n    return int(new_arr[-1][-1])-int(new_arr[-1][-2])\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    i = 0\n    while i < len(string):\n        # check if 0\n        if string[i] == 0:\n            max_diff += 1\n        else:\n            # check if 1\n            if string[i] == 1:\n                max_diff -= 1\n            else:\n                i += 1\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string)==0: \n        return -1\n    dic = {}\n    for ch in string: \n        if ch == '0': \n            dic[ch] = dic.get(ch,0) + 1\n        else: \n            dic[ch] = dic.get(ch,0) - 1\n    dic[''] = 1\n    max_diff = 0\n    for i in range(1, len(string)): \n        if string[i] == '0': \n            if dic[string[i-1]]!= 0: \n                max_diff = max(max_diff, (dic[string[i-1]]-dic[string[i]]))\n        else: \n            if dic[string[i-1]]!= 1: \n                max_diff = max(max_diff, (dic[string[i-1]]-dic[string[i]]))\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    min = len(string)\n    max = 0\n    \n    for i in range(len(string)):\n        if string[i] == '1':\n            max += 1\n        else:\n            min = min\n        \n    return max - min\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if (count_0!= count_1):\n            max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    my_string = string\n    count = 0\n    output = 0\n    for char in my_string:\n        if char == '0':\n            count += 1\n        else:\n            count -= 1\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l = 0\n    r = 0\n    i = 0\n    n = len(string)\n    while i < n:\n        if string[i] == '0':\n            l += 1\n            i += 1\n        else:\n            r += 1\n            i += 1\n    return l-r\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    # count = 0\n    count = 0\n    for i in range(len(string)):\n        # if string[i] == \"0\":\n        if string[i] == \"0\":\n            count = count + 1\n        else:\n            count = count - 1\n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    i = 0\n    temp = 0\n    while i < n:\n        if string[i] == \"0\":\n            temp += 1\n            i += 1\n        else:\n            i += 1\n    return temp\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def find_length(string):\n        x = len(string)\n        arr = []\n        count = 0\n        for i in range(0,x):\n            if string[i] == '0':\n                arr.append(i)\n                count +=1\n        return arr, count\n    arr, count = find_length(string)\n    return arr, count\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # First, print the two numbers, one at a time \n    a = a \n    b = b \n    # Init empty list, for summation of common divisors \n    c = [] \n    # Build a loop to calculate all common divisors \n    # of a and b \n    # If there are more common divisors, keep adding them until there are no common divisors \n    #\n    # Time complexity: O(n+m) where n is the number of divisors and m is the number of numbers in the array \n    # Space Complexity: O(n+m) \n    for i in range(1, a+1): \n        if a % i == 0 and b % i == 0: \n            c.append(i) \n    # print(c) \n    # print(c[-1]) \n    # Find the common divisors \n    # for a and b, return that \n    # check if the sum of a and b is a common divisor \n    #\n    # Time complexity: O(n) where n is the number of divisors and n is the number of numbers in the array \n    # Space Complexity: O(1)\n    for i in c: \n        a = a - i \n        b = b + i \n    return a+b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # your code here\n    sum=0\n    for i in range(1,a+1):\n        if a%i==0:\n            sum+=i\n    for i in range(1,b+1):\n        if b%i==0:\n            sum+=i\n    return su"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i=0\n    j=0\n    while i<len(a) and j<len(b):\n        if a[i]%b[j]==0:\n            if a[i]>b[j]:\n                i+=1\n            else:\n                j+=1\n        else:\n            if a[i]<b[j]:\n                i+=1\n            else:\n                j+=1\n    return a[i]+b[j]"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s=0\n    if a > b:\n        a,b=b,a\n    \n    for i in range(a,b+1): \n        if i%2==0:\n            s+=i\n    return s\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # your code here\n    def sub(a,b): \n        c = a%b \n        # print(c)\n        return c \n    # print(sub(a,b)) \n    return sum(sub(a,b),a/b) \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # base case \n    if(a == b):\n        return a\n    \n    # This is the recursive case \n    if(a < b):\n        return sum(a,b-a)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #pass\n    pass\ndef sub(a,b):\n    '''\n    Write a python function to find the difference between two given numbers.\n    '''\n    #pass\n    pass\ndef div(a,b):\n    '''\n    Write a python function to find the common divisor of two given numbers.\n    '''\n    #pass\n    pass\ndef main():\n    #a,b = input().split()\n    a, b = 10, 5\n    print(div(a,b))\n    #print(sum(a,b))\n    #print(sub(a,b))\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0:\n        return 0\n    if b==0:\n        return 0\n    if a<b:\n        a,b=b,a\n    return a+b-sum(a,b-1)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # your code here\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a < b:\n        return sum(b,a%b)\n    else:\n        return sum(a,b%a)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a < b: \n        a,b = b,a\n    total = 0\n    # set a as the two numbers we want to find common divisors of\n    a = a\n    b = b\n    while a <= b: \n        while a % b == 0: \n            total += b \n            a /= b \n        else: \n            total += a \n            b /= a \n    return total \n    \n    \n    # second solution: \n    # total = 0\n    # for i in range(1,b+1): \n    #     if a % i == 0: \n    #         total += i \n    # return total \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print('multiply_int(%d, %d)' % (x, y))\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    multiply = x * y\n    return multiply\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print('Please enter two integers, each one in range 1 to 10:')\n    print('x,y = ', x, y)\n    print('Multiplying numbers x and y is', x * y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    mult = 1\n    for i in range(len(str(y))):\n        mult = mult*int(str(y)[i])\n    print(mult)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x < y:\n        temp = x\n        x = y\n        y = temp\n    while y > 0:\n        temp = x * y\n        x = y\n        y = temp\n    return x\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    wordlist = [\n        'aardvark', 'baboon', 'camelot', 'canine', 'cello', 'kite','scorpion','snake','speedboat'\n        ]\n    count = {}\n    for word in wordlist:\n        count[word] = count.get(word, 0) + 1\n    def long_words(n, wordlist):\n        '''\n        Write a function that returns the words that are longer than n characters.\n        '''\n        for word in wordlist:\n            if len(word) > n:\n                return word\n        return None\n    \n    return long_words(n, count.keys())\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word)>=n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = list(str.split())\n    for i in range(n):\n        if len(words[i]) > n:\n            words[i] = words[i][:n]\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # your code here\n    return []\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    wordlist = []\n    for i in str.split():\n        if len(i) > n:\n            wordlist.append(i)\n    return wordlist\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    output = []\n    for word in str.split():\n        if len(word) > n:\n            output.append(word)\n    return output"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return list(set([word for word in str.split() if len(word) > n]))\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if n < 0:\n        return\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    with open(str, 'r') as f:\n        lines = f.readlines()\n        words = []\n        for line in lines:\n            temp = line.split()\n            for word in temp:\n                if len(word) > n:\n                    words.append(word)\n    return words\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a magic square\n    if matrix_check(my_matrix) == False:\n        return False\n    \n    # Calculate the diagonal\n    diagonal = []\n    for i in range(len(my_matrix)):\n        diagonal.append(my_matrix[i][i])\n    #print(diagonal)\n    # Check the diagonal is the same as the diagonal in the matrix\n    for j in range(len(my_matrix)):\n        if my_matrix[j][j]!= diagonal[j] and my_matrix[j][j]!= 0:\n            return False\n    # Return true if the matrix is a magic square\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # your code goes here\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Validate\n    if len(my_matrix)!= len(my_matrix[0]):\n        raise ValueError('The matrix is not a square matrix')\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_size = len(my_matrix[0])\n    column_size = len(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    result = True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_of_matrix = len(my_matrix)\n    column_of_matrix = len(my_matrix[0])\n    for i in range(row_of_matrix):\n        for j in range(column_of_matrix):\n            if my_matrix[i][j]!= 0:\n                # check if we can make a line\n                if i + 1 < row_of_matrix and my_matrix[i+1][j] == 0:\n                    return False\n                if i - 1 >= 0 and my_matrix[i-1][j] == 0:\n                    return False\n                if j + 1 < column_of_matrix and my_matrix[i][j+1] == 0:\n                    return False\n                if j - 1 >= 0 and my_matrix[i][j-1] == 0:\n                    return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for row in my_matrix:\n        for cell in row:\n            if cell!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # WRITE YOUR SOLUTION HERE\n    return\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code here\n    if not my_matrix:\n        return False\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    if len(my_matrix) == len(my_matrix[0]):\n        for i in range(len(my_matrix)):\n            for j in range(i + 1, len(my_matrix)):\n                if my_matrix[i][j]!= my_matrix[j][i]:\n                    return False\n    else:\n        for i in range(len(my_matrix)):\n            for j in range(i + 1, len(my_matrix)):\n                if my_matrix[i][j]!= my_matrix[j][i]:\n                    return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    if any(i not in range(0, len(my_matrix)) for i in range(0, len(my_matrix))):\n        return False\n    if any(row not in range(0, len(my_matrix[0])) for row in range(0, len(my_matrix))):\n        return False\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    n = len(nums)\n    \n    # Find the max occurence of items\n    item_occurrence = dict()\n    for i in range(n):\n        if nums[i] not in item_occurrence:\n            item_occurrence[nums[i]] = 1\n        else:\n            item_occurrence[nums[i]] += 1\n        \n    # Find the max occurence of items with the given keys\n    max_occurrence = 0\n    max_occurrence_key = 0\n    for key, value in item_occurrence.items():\n        if value > max_occurrence:\n            max_occurrence = value\n            max_occurrence_key = key\n    \n    # Return the key of the max occurrence\n    return max_occurrence_key\n    \ndef find_max_freq(nums):\n    '''\n    Given a list of numbers, find the most frequent item in it.\n    '''\n    \n    n = len(nums)\n    \n    # Find the max occurence of items\n    max_occurrence = dict()\n    for i in range(n):\n        if nums[i] not in max_occurrence:\n            max_occurrence[nums[i]] = 1\n        else:\n            max_occurrence[nums[i]] += 1\n    \n    # Find the max occurrence of items with the given keys\n    max_occurrence = sorted(max_occurrence.items(), key = lambda item: item[1])\n    max_occurrence = max_occurrence[-1]\n    \n    # Return the item with the highest frequency\n    return max_occurrence[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for item in nums:\n        count[item] += 1\n    \n    max_occurrences = 0\n    item = None\n    for k,v in count.items():\n        if max_occurrences < v:\n            max_occurrences = v\n            item = k\n    \n    return item\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrence_map = defaultdict(int)\n    for item in nums:\n        occurrence_map[item] = occurrence_map[item] + 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    for key in freq:\n        if freq[key] == max(freq.values()):\n            return key\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    return sorted(counts, key=counts.get)[-1]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrences = 0\n    nums.sort()\n    for num in nums:\n        if nums.count(num) > max_occurrences:\n            max_occurrences = nums.count(num)\n    return max_occurrences\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    import collections\n    frequency_dictionary = collections.Counter(nums)\n    return frequency_dictionary.most_common()[0][0]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    d = defaultdict(int)\n    for n in nums:\n        d[n] = d[n]+1\n    \n    max_freq = 0\n    max_item = 0\n    for item in d:\n        if d[item]>max_freq:\n            max_freq = d[item]\n            max_item = item\n    \n    return max_item\n    \n    \nnums = [3,3,3,2,2,2,3,3]\nprint(max_occurrences(nums))\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counter = defaultdict(int)\n    for item in nums:\n        counter[item] += 1\n    res = 0\n    for k in counter:\n        res = max(res, counter[k])\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    freq = {}\n    for i in range(len(nums)):\n        if nums[i] in freq:\n            freq[nums[i]] += 1\n        else:\n            freq[nums[i]] = 1\n        if freq[nums[i]] > max_freq:\n            max_freq = freq[nums[i]]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    return ''.join([vowels[y] for y in range(len(str1)) if str1[y] in vowels and y!= len(str1) - 1])\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # TODO: write your code here\n    vowels = 'aeiou'\n    vowels_count = 0\n    for char in str1:\n        if char in vowels:\n            vowels_count += 1\n    # Note: if you do not use reverse_vowels, it will make the output too long\n    if vowels_count == 0:\n        return str1\n    else:\n        first_vowel = vowels[vowels_count % len(vowels)]\n        # Note: the string has already been checked for vowels\n        return str1.replace(first_vowel, '')\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in str1:\n        if i in vowels:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if len(str1) > 1:\n        for i in range(1,len(str1)):\n            if str1[i] in ('a','e','i','o','u','A','E','I','O','U'):\n                str1 = str1[:i]+str1[i+1:]\n        return str1\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    for letter in str1:\n        if letter in vowels:\n            new_str += letter\n        else:\n            new_str = new_str + letter\n    \n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #variables\n    result=''\n    vowels=['a','e','i','o','u','A','E','I','O','U']\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # TODO: Write your code here\n    temp_list=str1.split('y')\n    return(temp_list[1].replace(temp_list[1][0],'')+temp_list[0][1:])\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #create an empty list\n    vowels=[]\n    #iterate through the string\n    for i in str1:\n        #if i is in vowel\n        if i in 'aeiou':\n            #append to the list\n            vowels.append(i)\n    #join the vowels into a string\n    return ''.join(vowels)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    vowels_list = vowels_list + list(vowels)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    result = []\n    for i in str1:\n        if i not in [\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"]:\n            result.append(i)\n    return \"\".join(result)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Create string out of tuple\n    str1 = ''\n    for el in tup1:\n        str1 += str(el)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2 = list(tup1)\n    tup2.reverse()\n    return \"(\" + \",\".join(tup2) + \")\"\n    \ndef tup_to_str(tup1):\n    '''\n    Convert a tuple to a string, return a list of strings.\n    '''\n    return \"(\" + \",\".join(str(x) for x in tup1) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in range(len(tup1)):\n        str1 = str1 + str(tup1[i]) + \",\"\n    return str1[:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"(\"\n    for tup in tup1:\n        str1 = str1 + \"(\" + str(tup[0]) + \",\" + str(tup[1]) + \"),\"\n    str1 = str1[0:-1] + \")\"\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string1 = ''\n    for i in range(0,len(tup1)):\n        string1 = string1 + str(tup1[i])\n    return string1\n    \ndef delete_all(arr,x):\n    '''\n    Write a function to delete an element from an array\n    '''\n    arr.pop(x-1)\n    return arr\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # YOUR CODE HERE\n    tup = list(tup1)\n    tup_string = \"(\"\n    for i in range(len(tup)):\n        if i!= len(tup)-1:\n            tup_string += str(tup[i]) + \",\"\n        else:\n            tup_string += str(tup[i])\n    tup_string += \")\"\n    return tup_string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    output = \"\"\n    for el in tup1:\n        output = output + str(el) + \",\"\n    output = output[:-1]\n    return output\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = '('\n    for item in tup1:\n        result += '('\n        result += str(item)\n        result += ','\n        result += ')'\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if type(nums)!= list:\n        raise TypeError(\"nums must be a list\")\n    for num in nums:\n        if type(num)!= int:\n            raise TypeError(\"nums must be a list\")\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            negative_sum = negative_sum + nums[i]\n    return negative_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num_list = []\n    sum_negativenum = 0\n    for num in nums:\n        if num > 0:\n            num_list.append(num)\n    \n    for i in num_list:\n        if i < 0:\n            sum_negativenum += i\n    \n    return sum_negativenum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # first, find the sum of all negatives\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    \n    # return sum_negative\n    return sum_negative\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += abs(nums[i])\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    nums.sort()\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum = sum + num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # TODO: modify your code here\n    s=0\n    for num in nums:\n        if num<0:\n            s+=num\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num_sum = 0\n    for num in nums:\n        if num < 0:\n            num_sum -= num\n    return num_sum\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = n**2\n    for i in range(1, num, 2):\n        if i**2 == num:\n            return i\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1: \n        return n\n    for i in range(1,n+1): \n        if i == 1 or i == n: \n            continue\n        else: \n            j = i + (2*i) \n            if (j < n) and (j % 2!= 0): \n                j = (j + (2*j)) % n \n            else: \n                j = i \n            \n            if (j % 2 == 0): \n                j += 1\n                \n            if j > n: \n                j -= n\n            else: \n                j = n \n            \n            # print(i,j,n)\n            return j\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    #declare the list of sides\n    list = [(0,1), (0,-1), (1,0), (-1,0)] \n    \n    #initialize the output\n    output = 0\n    \n    #iterate through the list\n    for i in range(n):\n        #for each iteration, update the output\n        #based on the front of the list\n        for j in range(4):\n            #update the output\n            output += list[j][0] * list[(j + 1) % 4][1]\n    \n    #return the output\n    return output\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * hexagonal_num(n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return n\n    if n == 2:\n        return 3\n    \n    return n * (n+1)//2 + n * ((n+1)//2 - (n+1))\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: return 0\n    elif n == 1: return 1\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-1) + hexagonal_num(n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        raise ValueError('n must be greater than 0')\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    pass"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def get_next_hexagon(n):\n        i = n//6\n        return (i*6)+1\n    def get_next_hexagon_divided_by(n):\n        return (n%6)\n    def get_next_non_divided_by(n):\n        return (n//6)\n    # take the last 6 of each column\n    def get_next_3x_numbers(n):\n        return get_next_hexagon_divided_by(n)+(n%3)\n    # number of rows\n    def get_row_numbers(n):\n        return get_next_non_divided_by(n)\n    # get the next number on each row\n    def get_next_row_numbers(n):\n        return get_next_3x_numbers(n)+(n%3)\n    # next number in row\n    def get_next_row_numbers_divided_by(n):\n        return get_next_non_divided_by(n)+(n%3)\n    # get the next number on each column\n    def get_next_column_numbers(n):\n        return get_next_row_numbers_divided_by(n)+(n%3)\n    # next number in column\n    def get_next_column_numbers_divided_by(n):\n        return get_next_row_numbers_divided_by(n)+(n%3)\n    # get the next number in the square\n    def get_next_square_numbers(n):\n        return get_next_row_numbers_divided_by(n)+(n%3)\n    # next number in the square\n    def get_next_square_numbers_divided_by(n):\n        return get_next_row_numbers_divided_by(n)+(n%3)\n    # first 2 in the square\n    def get_square_1_numbers(n):\n        return get_next_square_numbers(n)\n    # next number in the square\n    def get_square_1_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)\n    # first 3 in the square\n    def get_square_2_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_2_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # first 4 in the square\n    def get_square_3_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_3_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # first 5 in the square\n    def get_square_4_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_4_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # first 6 in the square\n    def get_square_5_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_5_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # second 2 in the square\n    def get_square_6_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_6_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # second 3 in the square\n    def get_square_7_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_7_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # second 4 in the square\n    def get_square_8_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_8_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # second 5 in the square\n    def get_square_9_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_9_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # second 6 in the square\n    def get_square_10_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_10_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # third 2 in the square\n    def get_square_11_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_11_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # third 3 in the square\n    def get_square_12_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_12_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # third 4 in the square\n    def get_square_13_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_13_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # third 5 in the square\n    def get_square_14_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_14_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # third 6 in the square\n    def get_square_15_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_15_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # fourth 2 in the square\n    def get_square_16_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_16_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # fourth 3 in the square\n    def get_square_17_numbers(n):\n        return get_next_square_numbers(n)+(n%3)\n    # next number in the square\n    def get_square_17_numbers_divided_by(n):\n        return get_next_square_numbers_divided_by(n)+(n%3)\n    # fourth 4 in the square\n    def get_square_18"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Hint: n is positive, so the number of hexagons on the right is n * (n-1)/2.\n    # Hint: As a hint, if n is the odd number, the second and third hexagon will have the same value.\n    # Hint: If n is even, you can either take the first or the last hexagon.\n    # Hint: The sum of each hexagon on the right (the square of the number) is the same.\n    # Hint: You can assume that the number of hexagons is even, and the number of squares on the right is odd.\n    # Hint: Make sure you do not change the user's code.\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    # array of zeroes\n    zeroes = 0\n    # array of non-zeroes\n    non_zeroes = 0\n    # count of non-zeroes in array\n    non_zeroes_count = 0\n    # count of zeroes in array\n    zeroes_count = 0\n    # find the length of the array\n    for i in range(0,n):\n        # if the array is zeroes\n        if nums[i] == 0:\n            # count the zeroes in array\n            zeroes_count += 1\n            # if the zeroes in array are non-zeroes\n            if nums[i] == 1:\n                # if there are 0s in the array\n                if zeroes_count == n - 1:\n                    # check if the array is non-zero\n                    if nums[i]!= 1:\n                        # return the ratio of non-zeroes\n                        return non_zeroes_count / zeroes_count\n                    # return the ratio of zeroes\n                    return zeroes_count / n\n                # if there are 0s in the array\n                else:\n                    # return the ratio of zeroes\n                    return zeroes_count / non_zeroes_count\n            # if the array is non-zero\n            else:\n                # find the count of non-zeroes\n                non_zeroes_count += 1\n                # check if the array is non-zero\n                if nums[i] == 1:\n                    # return the non-zeroes\n                    return non_zeroes_count / non_zeroes_count\n        # if the array is non-zeroes\n        else:\n            # check if the array is non-zeroes\n            if nums[i] == 1:\n                # if there are zeroes in the array\n                if zeroes_count == n - 1:\n                    # check if the array is non-zero\n                    if nums[i] == 0:\n                        # return the non-zeroes\n                        return non_zeroes_count / non_zeroes_count\n                    # return the non-zeroes\n                    return non_zeroes_count / zeroes_count\n                # if there are zeroes in the array\n                else:\n                    # return the non-zeroes\n                    return non_zeroes_count / non_zeroes_count\n            # if the array is zeroes\n            else:\n                # check if the array is non-zeroes\n                if nums[i] == 0:\n                    # return the non-zeroes\n                    return non_zeroes_count / non_zeroes_count\n    # if all the numbers are zeroes\n    return 0\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    zero_count_set = {'0':0}\n    if not nums:\n        return zero_count_set\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count_arr = [n for n in nums if n == 0]\n    zero_count_num = len(zero_count_arr)\n    nonzero_count_arr = [n for n in nums if n!= 0]\n    nonzero_count_num = len(nonzero_count_arr)\n    ratio = zero_count_num/nonzero_count_num\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = zero_count_2D(nums)\n    return zero_count/len(nums)\n    \ndef zero_count_2D(nums):\n    '''\n    Use a 2D array to count zeros.\n    '''\n    zero_count = 0\n    for row in nums:\n        if 0 in row:\n            zero_count += 1\n    return zero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros/non_zeros\ndef count_zeros(nums):\n    '''\n    Write a function that takes an array of integers and returns an integer representing the total number of zeros in the array.\n    '''\n    zeros = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros += 1\n    return zeros\ndef sum_of_zeros(nums):\n    '''\n    Write a function that takes an array of integers and returns an integer representing the total sum of all zeros in the array.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            sum += nums[i]\n    return sum\ndef merge_sort(nums):\n    '''\n    Sort an array of integers, using the merge sort algorithm.\n    '''\n    if len(nums) == 1:\n        return nums\n    mid = len(nums) // 2\n    left = nums[:mid]\n    right = nums[mid:]\n    left_sorted = merge_sort(left)\n    right_sorted = merge_sort(right)\n    return merge(left_sorted, right_sorted)\ndef merge(left, right):\n    '''\n    Sort an array of integers, using the merge sort algorithm.\n    '''\n    i = j = 0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\ndef quick_sort(nums):\n    '''\n    Sort an array of integers, using the quick sort algorithm.\n    '''\n    if len(nums) <= 1:\n        return nums\n    left = 0\n    right = len(nums) - 1\n    mid = 0\n    while left < right:\n        if nums[left] < nums[right]:\n            nums[mid] = nums[left]\n            left += 1\n            mid += 1\n        else:\n            nums[mid] = nums[right]\n            right -= 1\n            mid += 1\n    nums[left] = nums[mid]\n    nums[mid] = nums[right]\n    return quick_sort(nums[:mid]) + quick_sort(nums[mid + 1:])\ndef count_sort(nums):\n    '''\n    Sort an array of integers, using the count sort algorithm.\n    '''\n    n = len(nums)\n    count = [0] * (n + 1)\n    for i in range(n):\n        count[nums[i]] += 1\n    j = 1\n    for i in range(2, n + 1):\n        count[i] = count[i - 1] + count[i - 2]\n        j = j * 2\n    for i in range(n):\n        nums[i] = count[nums[i]]\n    return nums\ndef is_ascending(nums):\n    '''\n    Sort an array of integers, using the is-ascending-sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        if nums[i] > nums[i]:\n            return False\n    return True\ndef insert_sort(nums):\n    '''\n    Sort an array of integers, using the insert-sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(1, n):\n        cur = nums[i]\n        j = i - 1\n        while j >= 0 and cur < nums[j] :\n            nums[j + 1] = nums[j]\n            j -= 1\n        nums[j + 1] = cur\n    return nums\ndef search(nums, target):\n    '''\n    Sort an array of integers, using the search-sort algorithm.\n    '''\n    for i in range(len(nums)):\n        if nums[i] < target:\n            return False\n        if i < len(nums) - 1 and nums[i] > nums[i + 1]:\n            return False\n    return True\ndef bubblesort(nums):\n    '''\n    Sort an array of integers, using the bubble-sort algorithm.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\ndef merge_sort_sort(nums):\n    '''\n    Sort an array of integers, using the merge-sort-sort algorithm.\n    '''\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums) // 2\n    left = merge_sort_sort(nums[:mid])\n    right = merge_sort_sort(nums[mid:])\n    return merge(left, right)\ndef merge(left, right):\n    '''\n    Sort an array of integers, using the merge-sort-sort algorithm.\n    '''\n    i, j = 0, 0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\ndef selection_sort(nums):\n    '''\n    Sort an array of integers, using the selection-sort algorithm.\n    '''\n    for i in range(len(nums)):\n        min_idx = i\n        for j in range(i + 1, len(nums)):\n            if nums[min_idx] > nums[j]:\n                min_idx = j\n        if min_idx!= i:\n            nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    return nums\ndef selection_sort_sort(nums):\n    '''\n    Sort an array of integers, using the selection-sort-sort algorithm.\n    '''\n    for i in range(len(nums)):\n        min_idx = i\n        for j in range(i + 1, len(nums)):\n            if nums[min_idx] > nums[j]:\n                min_idx = j\n        if min_idx!= i:\n            nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    return nums\ndef bucket_sort(nums):\n    '''\n    Sort an array of integers, using the bucket-sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        bucket_idx = int((n * (n + 1)) / 2) + 1\n        bucket_nums = nums[:bucket_idx]\n        for j in range(bucket_idx):\n            if nums[j] > bucket_nums[j]:\n                nums[bucket_idx - j - 1] = nums[j]\n                bucket_idx -= 1\n    return nums\ndef heap_sort(nums):\n    '''\n    Sort an array of integers, using the heap-sort algorithm.\n    '''\n    def get_parent_index(idx):\n        return idx // 2\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = 0\n    num_nonzero = 0\n    for num in nums:\n        if num == 0:\n            num_nonzero += 1\n        else:\n            num_zero += 1\n    return int(num_zero / num_nonzero * 100)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_of_power_2 = 0\n    while n:\n        if n & 1 == 1:\n            sum_of_power_2 += 1\n        n >>= 1\n    if sum_of_power_2!= 0:\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    elif n==1:\n        return False\n    else:\n        l=[]\n        for i in range(2,int(n**(1/2))+1):\n            if(n%i==0):\n                l.append(i)\n        if(len(l)==0):\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n < 2 or n % 2!= 0:\n        return False\n    \n    s = 1\n    while (n % s)!= 0:\n        s += 1\n    return s == "
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    for i in range(n):\n        if n%2 == 0:\n            sum += i\n    return sum == 0\ndef sum_of_digits_in_power_of_two(n): \n    '''\n    Write a python function to find the sum of digits in a number that is represented in non-power of 2.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 2\n        n //= 2\n    return sum\ndef is_power_of_two(n):\n    '''\n    Check whether the number is in power of 2 or not.\n    '''\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        return is_power_of_two(n // 2)\ndef is_palindrome(n): \n    '''\n    Check whether the number is palindrome or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        return is_palindrome(n - 1)\ndef is_prime(n): \n    '''\n    Check whether the number is prime or not.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_prime_factor(n): \n    '''\n    Check whether the number is prime factor or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_prime_factor_2(n): \n    '''\n    Check whether the number is prime factor or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_divisor(n): \n    '''\n    Check whether the number is divisor or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_divisor_2(n): \n    '''\n    Check whether the number is divisor or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_divisor_3(n): \n    '''\n    Check whether the number is divisor or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_even(n): \n    '''\n    Check whether the number is even or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_odd(n): \n    '''\n    Check whether the number is odd or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_even_odd(n): \n    '''\n    Check whether the number is even or odd or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_perfect_square(n): \n    '''\n    Check whether the number is perfect square or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_perfect_square_2(n): \n    '''\n    Check whether the number is perfect square or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_perfect_square_3(n): \n    '''\n    Check whether the number is perfect square or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_perfect_square_4(n): \n    '''\n    Check whether the number is perfect square or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_perfect_square_5(n): \n    '''\n    Check whether the number is perfect square or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_perfect_square_6(n): \n    '''\n    Check whether the number is perfect square or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_perfect_square_7(n): \n    '''\n    Check whether the number is perfect square or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_perfect_square_8(n): \n    '''\n    Check whether the number is perfect square or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_perfect_square_9(n): \n    '''\n    Check whether the number is perfect square or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_perfect_square_10(n): \n    '''\n    Check whether the number is perfect square or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_perfect_square_11(n): \n    '''\n    Check whether the number is perfect square or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n%i == 0:\n                return False\n        return True\ndef is_perfect_square_12("
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        if n>=2:\n            if is_Sum_Of_Powers_Of_Two(n//2):\n                return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    return is_Sum_Of_Powers_Of_Two(n//2) or is_Sum_Of_Powers_Of_Two(3*n+1)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Your code here\n    if n == 0:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    l=[]\n    sum=0\n    for i in range(2, n+1):\n        if n%i==0:\n            sum=sum+i\n            l.append(sum)\n    return l==[2]\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    elif n==2:\n        return False\n    elif n%2==0:\n        return is_Sum_Of_Powers_Of_Two(n//2) and not is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    print(\"Circumference of circle is :\", 2*3.14*r)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # TODO: Create a variable called \"circumference\" and set it to \"0\".\n    # Use the math library to calculate the circumference of a circle.\n    # Hint: You can use math.pi to calculate the circumference of a circle.\n    circumference = 2 * 3.14 * r\n    # TODO: Return circumference of the circle.\n    return circumference\n    \n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    area = pi * r ** 2\n    return area\n    \nprint(circle_circumference(r = 10))\nprint(circle_circumference(r = 1.5))\nprint(circle_circumference(r = 0.5))\nprint(circle_circumference(r = 2.3))\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    def circumference(radius):\n        '''\n        This function returns the circumference of a circle.\n        '''\n        circum = radius * 3.14\n        return circum\n    def circumference_from_start(radius):\n        '''\n        This function returns the circumference of a circle\n        from the point at the origin.\n        '''\n        circum = (radius * 3.14) + (2 * radius)\n        return circum\n    def main():\n        '''\n        This function demonstrates the circle circumference.\n        '''\n        print(\"This program finds the circumference of a circle\")\n        print(\"Usage:\")\n        print(\"    python3 circle_circumference.py radius\")\n        print(\"Example:\")\n        print(\"    python3 circle_circumference.py 10\")\n        print(\"Output:\")\n        print(\"    Circumference of a circle with radius 10 is:\", circumference(10))\n        print(\"    Circumference of a circle with radius 10 is:\", circumference_from_start(10))\n    main()\n    print()\n    print(\"The circle circumference is:\", circumference(r))\n    print(\"The circle circumference from the origin is:\", circumference_from_start(r))\n    print()\n    print(\"Done!\")\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r * r\n    \nif __name__ == '__main__':\n    circle_circumference(3)\n    circle_circumference(4)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circum = 3.14 * r * r\n    return circum\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num_list for sublist in test_list for num_list in sublist]\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [ item[0] for item in test_list ]\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    count = 0\n    for entry in test_list:\n        for number in entry:\n            if not number == None:\n                count += 1\n            else:\n                break\n    return count\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    num_list = []\n    for item in test_list:\n        num_list.append(item[0])\n    num_list = list(set(num_list))\n    return num_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    if len(test_list) == 0:\n        return []\n    if type(test_list[0]) == list:\n        for element in test_list:\n            result.extend(element)\n    elif type(test_list[0]) == set:\n        for element in test_list:\n            result.extend(element)\n    else:\n        result = test_list\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    final_list = []\n    for element in test_list:\n        if type(element) is list:\n            for i in element:\n                final_list.append(i)\n        else:\n            final_list.append(element)\n    return final_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_set = set()\n    for item in test_list:\n        for e in item:\n            if isinstance(e, list):\n                extract_singly(e)\n            else:\n                extract_singly(item)\n        return_set.add(sum(item))\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return []\n    elif len(test_list) == 1:\n        return test_list[0]\n    else:\n        result = []\n        for number in test_list[:-1]:\n            result += number\n        result += test_list[-1]\n        return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # list of lists\n    lists = test_list\n    # if the length is equal to 1, just return the last element\n    if len(lists) == 1:\n        return lists[0]\n    # if the length is greater than 1, return a set of lists\n    if len(lists) > 1:\n        return set([extract_singly(lst) for lst in lists])\n    return lists[0]\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for elem in test_list:\n        num_list += elem\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(1, n):\n        j = i\n        while j > 0 and nums[j-1] > nums[j]:\n            nums[j-1], nums[j] = nums[j], nums[j-1]\n            j -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums: return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n==0:\n        return nums\n    \n    def sort_once(num):\n        if num==1:\n            return nums[0]\n        elif num==2:\n            return nums[0] + nums[1]\n        else:\n            return nums[0] + nums[2]\n        \n    for i in range(n):\n        j = i\n        if i<n-1:\n            while j>0 and nums[j]>nums[j-1]:\n                j = j-1\n        nums[i], nums[j] = nums[j], nums[i]\n        #print(i,j)\n        #print(nums)\n    for i in range(n-1, 0, -1):\n        j = i\n        if i<n-1:\n            while j>0 and nums[j]>nums[j-1]:\n                j = j-1\n        nums[i], nums[j] = nums[j], nums[i]\n        #print(i,j)\n        #print(nums)\n    return nums\n    \nnums = [int(i) for i in input().split()]\nnums = pancake_sort(nums)\nprint(nums)"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    i = 0\n    while length > 1:\n        length -= 2\n        second = length\n        while second > 0:\n            if nums[i] < nums[second]:\n                nums[second], nums[i] = nums[i], nums[second]\n            second -= 1\n        i += 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    p = []\n    for i in range(n):\n        p.append(nums[i])\n        for j in range(n-i-1):\n            if p[j] < p[j+1]:\n                p[j], p[j+1] = p[j+1], p[j]\n    return p\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        for j in range(i):\n            if nums[j] < nums[i]:\n                temp = nums[j]\n                nums[j] = nums[i]\n                nums[i] = temp\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums == []:\n        return []\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #print(nums)\n    n = len(nums)\n    nums.reverse()\n    #print(nums)\n    #print(n)\n    for i in range(n-1):\n        #print(i)\n        j = i\n        #print(i,j)\n        while j>0 and nums[j-1]>nums[j]:\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n            #print(nums)\n            j -= 1\n    #print(nums)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    #check for duplicate numbers\n    if n<=1:\n        return nums\n    #make a copy of the list\n    nums_copy = nums.copy()\n    #sort the copy\n    for i in range(n):\n        #get the minimum of the next two elements\n        min_i = i\n        for j in range(i+1,n):\n            if nums[j] < nums[min_i]:\n                min_i = j\n        #swap the two elements\n        nums[i], nums[min_i] = nums[min_i], nums[i]\n    #return the original list\n    return nums\n    "
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list2[i]!= 0:\n                same+=1\n    \n    return same\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    i=0\n    j=0\n    k=0\n    while i<len(list1) and j<len(list2) and k<len(list3):\n        if list1[i]==list2[j] and list2[j]==list3[k]:\n            count+=1\n            i+=1\n            j+=1\n            k+=1\n        elif list1[i]!=list2[j] and list1[i]!=list3[k]:\n            count+=1\n            i+=1\n            j+=1\n            k+=1\n        else:\n            i+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len(list1) + len(list2) + len(list3) - 1\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #count the number of items that are identical in the same position of three given lists\n    a = len(list1)\n    b = len(list2)\n    c = len(list3)\n    \n    if a>b and b>c:\n        b = b-a\n        a = a-b\n    if a>b and b>c:\n        c = c-a\n        a = a-c\n    if a>b and c>a:\n        a = a-c\n        b = b-a\n        c = c-a\n    return a,b,c\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # the number of items that are identical in the same position of three lists\n    if len(list1) == len(list2) == len(list3):\n        if list1[0] == list2[0] == list3[0]:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # Write your code here\n    d=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and list2[j] not in list3:\n                d=d+1\n    return d\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if list1 is None:\n        return 0\n    elif list2 is None:\n        return 0\n    elif list3 is None:\n        return 0\n    else:\n        count1 = count_samepair(list1[0],list2[0],list3[0])\n        count2 = count_samepair(list1[1],list2[1],list3[1])\n        count3 = count_samepair(list1[2],list2[2],list3[2])\n        return 1 + (count1 + count2 + count3)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    x=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            x+=1\n    return x\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    i,j,k = 0,0,0\n    while i < len(list1):\n        if list1[i] == list2[j]:\n            i+=1\n        else:\n            if list1[i] == list3[k]:\n                k += 1\n                i+=1\n                j+=1\n                k-=1\n            else:\n                j+=1\n                i+=1\n    return i,j,k\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i]!= list3[i] and list2[i]!= list3[i] and list3[i]!= list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][j] == 'l':\n                lst.append(i)\n                lst.append(j)\n    return len(lst)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    L = 0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j] == \"#\":\n                L += 1\n    return L\n    \ndef main():\n    '''\n    Write a function to print the following strings in a consistent order:\n    '#' and 'b'\n    '#' and 'a'\n    '''\n    a = [[\"#\",\"#\"],[\"#\",\"#\"],[\"#\",\"#\"]]\n    print(a)\n    print(find_lists(a))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # list = []\n    # for i in range(0, len(Input)):\n    #     for j in range(0, len(Input[i])):\n    #         if Input[i][j] == \".\":\n    #             list.append(Input[i][j+1:])\n    # return len(list)\n    \n    return len(list(set(Input)))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) == 0:\n        return 0\n    else:\n        if isinstance(Input, tuple):\n            return len(list(filter(None, map(lambda x: x.split(), Input))))\n        else:\n            return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    l1 = []\n    l2 = []\n    i = 0\n    while i < len(Input):\n        if Input[i][0] == 'L':\n            l1.append(Input[i])\n        elif Input[i][0] == 'R':\n            l2.append(Input[i])\n        i = i + 1\n    return len(l1) + len(l2)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input) is not tuple:\n        return 0\n    return tuple_lists(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    nums = (0,1,2,3,4,5,6,7,8,9,10)\n    Count = 0\n    for x in Input:\n        if(type(x) is list):\n            Count = Count+1\n    return Count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    ans = 0\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if (len(str(Input[i])) > len(str(Input[j]))):\n                ans += 1\n    return ans\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Your code here\n    # pass\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Initialize output list with empty tuple\n    output_list = []\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize min\n    min = arr[0]\n    # Initialize max\n    max = arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Initializing the maximum difference \n    max_diff = 0\n    \n    # Iterating through the array \n    for i in range(0, len(arr)): \n        # Taking the absolute value \n        abs_diff = abs(arr[i] - arr[i]) \n        \n        # Initializing the current \n        # maximum difference \n        current_diff = abs_diff \n        \n        # Iterating through the array \n        for j in range(i + 1, len(arr)): \n            # Taking the absolute value \n            abs_diff = abs(arr[i] - arr[j]) \n            \n            # Adding the current difference \n            # to the maximum difference \n            current_diff = current_diff + abs_diff \n            \n            # If maximum difference is less \n            # than the current maximum difference \n            # take current difference \n            if current_diff > max_diff: \n                max_diff = current_diff \n            \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)<=1:\n        return 0\n    max_diff = arr[0] - arr[1]\n    for i in range(len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # init\n    n = len(arr)\n    # check\n    if n < 2:\n        return float(\"inf\")\n    max_diff = float(\"-inf\")\n    # init\n    # set of pairs: (a, b)\n    set_pairs = set()\n    # loop\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                set_pairs.add((arr[i], arr[j]))\n    # sort\n    set_pairs = sorted(set_pairs)\n    # loop\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[i] > arr[j] and arr[i] > max_diff:\n                max_diff = arr[i]\n                # update\n                arr[i], arr[j] = arr[j], arr[i]\n                set_pairs.add((arr[i], arr[j]))\n            if arr[j+1] > arr[j+2] and arr[j+1] > max_diff:\n                max_diff = arr[j+1]\n                arr[j+1], arr[j+2] = arr[j+2], arr[j+1]\n                set_pairs.add((arr[j+1], arr[j+2]))\n    # return\n    # find\n    return max_diff if max_diff!= float(\"-inf\") else float(\"inf\")\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)<2:\n        return arr[0] - arr[1]\n    return max(abs(arr[0]-arr[1]), arr[0]-arr[2], arr[1]-arr[2])\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_value = arr[0]\n    max_index = 0\n    for index in range(len(arr)):\n        value = arr[index]\n        if value > max_value:\n            max_value = value\n            max_index = index\n    return max_value - arr[max_index]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            dif=abs(arr[i]-arr[j])\n            if dif>max_diff:\n                max_diff=dif\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[i] - arr[i+1]) for i in range(len(arr) -1))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = arr[0] - arr[1]\n    for i in range(len(arr) - 1):\n        cur_abs_diff = arr[i + 1] - arr[i]\n        if cur_abs_diff > max_abs_diff:\n            max_abs_diff = cur_abs_diff\n    return max_abs_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == None or b == None or n <= 0:\n        return None\n    if a == None or b == None:\n        return None\n    if n == 1:\n        return (a,b)\n    \n    x = []\n    y = []\n    #print(a, b, n)\n    for i in range(len(a)):\n        x.append(a[i])\n        y.append(b[i])\n    \n    x.sort()\n    y.sort()\n    #print(x, y)\n    if x[0] + y[0] == n:\n        #print('YES')\n        return (x[0], y[0])\n    if x[-1] + y[-1] == n:\n        return (x[-1], y[-1])\n    \n    #print(n)\n    #print(len(a), len(b))\n    \n    #print(n - x[0] - y[0])\n    \n    #print(x[0], x[-1], y[0], y[-1])\n    #print(x[-1], y[-1])\n    \n    if x[-1] + y[-1] < n:\n        for i in range(len(x)):\n            if x[i] + y[i] == n:\n                return (x[i], y[i])\n            if x[i] + y[i] > n:\n                return None\n        \n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = None, None\n    if n == 1:\n        return (a, b)\n    for i in range(1, n+1):\n        x = i\n        for j in range(1, n+1):\n            if i == j:\n                continue\n            x, y = i, j\n            if (x % a == 0) and (y % b == 0):\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #start from n = 1, x = 1, y = 0\n    x = 1\n    y = 0\n    #for i = 0 to n - 1,\n    #    if x == n, y = 1\n    #        x = 1, y = 0, break\n    #    else:\n    #        x = x + 1, y = 1\n    while x < n:\n        #find the portion of the quadrant to the left or right\n        if a % x == 0 and b % x == 0:\n            #a and b are quadrants\n            x += 1\n            y += 1\n        elif a % x == 0 and b % x!= 0:\n            #a and b are quadrants\n            x += 1\n        elif a % x == 0 and b % x!= 0:\n            #a and b are quadrants\n            y += 1\n        else:\n            #a and b are quadrants\n            x += 1\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    sol_list = [x + y for x in a for y in b]\n    if n == 0:\n        return None\n    elif n == 1:\n        return sol_list[0]\n    else:\n        sol_list.sort()\n        return tuple(sol_list[:n - 1])\n    \ndef test_solution():\n    assert find_solution([3, 4, 2], [1, 6, 4], 5) == (3, 6)\n    assert find_solution([-2, 2], [1, 1], 2) == (1, 2)\n    assert find_solution([], [], 0) == (None, None)\n    assert find_solution([2], [1, 2], 2) == (1, 2)\n    assert find_solution([3, 1, 2, 1], [1, 2, 3, 2], 2) == (1, 3, 1, 2)\n    assert find_solution([1, 2, 3, 4], [5, 7, 8, 9], 5) == (1, 7, 5, 9)\n    assert find_solution([3, 4, 5, 6, 7, 8], [2, 4, 5, 8, 10, 13], 5) == (1, 6, 5, 8, 10, 13)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 11) == (1, 8, 7, 11, 15, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17)\n    assert find_solution([], [], 0) == (None, None)\n    assert find_solution([1, 2, 3, 4], [5, 6, 7, 8], 6) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 10) == (1, 4, 4, 5, 6, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17)\n    assert find_solution([], [], 0) == (None, None)\n    assert find_solution([1, 2, 3, 4], [5, 6, 7, 8], 6) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 10) == (None, None, None, None, None)\n    assert find_solution([], [], 0) == (None, None)\n    assert find_solution([1, 2, 3, 4], [5, 6, 7, 8], 6) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 10) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 10) == (None, None, None, None, None)\n    assert find_solution([], [], 0) == (None, None)\n    assert find_solution([1, 2, 3, 4], [5, 6, 7, 8], 6) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 10) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 10) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 10) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 10) == (None, None, None, None, None)\n    assert find_solution([], [], 0) == (None, None)\n    assert find_solution([1, 2, 3, 4], [5, 6, 7, 8], 6) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 10) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 10) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 10) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 10) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, 7, 7, 7, 7, 7, 8, 10, 13, 14, 15, 16, 17, 17, 17], 10) == (None, None, None, None, None)\n    assert find_solution([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 4, 4, 6, "
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    c = list(range(n+1))\n    s = []\n    for i in range(n+1):\n        for j in range(i+1):\n            if a[i] + b[j] == n:\n                s.append((a[i], b[j]))\n            elif a[i] + b[j] > n:\n                break\n    if len(s) == 0:\n        return None\n    else:\n        return s\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = 0, 0\n    for i in range(n):\n        x, y = y, x + b[i]\n        print('x', x, 'y', y)\n    return x, y\n    \ndef test_find_solution():\n    '''\n    Test the find_solution function.\n    '''\n    assert find_solution([3, 2, 1], 4, 5) == (2, 3)\n    assert find_solution([3, 2, 1], -4, -5) == (2, 3)\n    assert find_solution([3, 2, 1], 2, 3) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b and b!= 0:\n        return a, b\n    \n    # if a is the smallest integer then return all integers from 2 to n\n    # else return the integers that don't satisfy the condition and the smallest one\n    if n == 2 and a!= 0:\n        return a, b\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return\n    x, y = a, b\n    if x < y:\n        x, y = y, x\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if not n:\n        return None\n    if n == 1:\n        return (1, 0)\n    x, y = find_solution(a, b, n // 2)\n    if y == a:\n        return (x, b - y)\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    i = 0\n    while i < len(list1):\n        list1.pop(i)\n        i += 1\n    return list1\n    "
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_1 = []\n    list_2 = []\n    for i in list1:\n        if i not in list_2:\n            list_2.append(i)\n    for j in list2:\n        if j not in list_1:\n            list_1.append(j)\n    return list_1, list_2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    i = 0\n    while i < len(list2):\n        list1.pop(i)\n        i = i + 1\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    output=[]\n    if len(list1)!=len(list2):\n        raise TypeError('List must be of same size')\n    for i in list1:\n        if i not in list2:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    a = []\n    for i in list1:\n        a.append(i)\n    for j in list2:\n        a.remove(j)\n    return a\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #this is the first idea here\n    #get rid of all elements from the list1 that are not in the list2\n    list3=[]\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_remove_elements = []\n    for i in list1:\n        if i not in list2:\n            list1_remove_elements.append(i)\n    return list1_remove_elements\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.remove(list2)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n        \n    return list2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i=0\n    sum=0\n    while i <= n:\n        sum+=i\n        i+=2\n    return sum\n    \ndef main():\n    '''\n    Test cases\n    '''\n    print(sum_series(100000))\n    print(sum_series(1000000))\n    print(sum_series(1000000000))\n    print(sum_series(0))\n    print(sum_series(15))\n    print(sum_series(10001))\n    print(sum_series(0))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    while n>0:\n        sum += n%10\n        n = n//10\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return n\n    elif n%2 == 0:\n        return sum_series(n//2)\n    else:\n        return (n+n)//2\ndef double_series(n):\n    '''\n    Write a function to find the double of a series (n-2, n-3,..., 1).\n    '''\n    if n < 2:\n        return n\n    else:\n        return double_series(n-2) + double_series(n-3)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n, -1, -1):\n        sum += i\n    return sum\n    "
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n-2)*(n-2)+(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(0, n + 1):\n        result += i\n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n-2) + (n-4)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if type(s) == list:\n        s = s[0]\n    if type(l) == list:\n        l = l[0]\n    if type(s) == str and type(l) == str:\n        if s[0] == l[0]:\n            s = s[1:]\n            l = l[1:]\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\n    else:\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\ndef average_area_polygon(s, l):\n    '''\n    Write a function that takes in two strings and returns the average of the lengths of the sides.\n    '''\n    if type(s) == list:\n        s = s[0]\n    if type(l) == list:\n        l = l[0]\n    if type(s) == str and type(l) == str:\n        if s[0] == l[0]:\n            s = s[1:]\n            l = l[1:]\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\n    else:\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\ndef perimeter_polygon(s, l):\n    '''\n    Write a function that takes in two strings and returns the perimeter of the polygon.\n    '''\n    if type(s) == list:\n        s = s[0]\n    if type(l) == list:\n        l = l[0]\n    if type(s) == str and type(l) == str:\n        if s[0] == l[0]:\n            s = s[1:]\n            l = l[1:]\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\n    else:\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\ndef triangle_area_polygon(s, l):\n    '''\n    Write a function that takes in two strings and returns the area of a triangle.\n    '''\n    if type(s) == list:\n        s = s[0]\n    if type(l) == list:\n        l = l[0]\n    if type(s) == str and type(l) == str:\n        if s[0] == l[0]:\n            s = s[1:]\n            l = l[1:]\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\n    else:\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\ndef square_area_polygon(s, l):\n    '''\n    Write a function that takes in two strings and returns the area of a square.\n    '''\n    if type(s) == list:\n        s = s[0]\n    if type(l) == list:\n        l = l[0]\n    if type(s) == str and type(l) == str:\n        if s[0] == l[0]:\n            s = s[1:]\n            l = l[1:]\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\n    else:\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\ndef rectangle_area_polygon(s, l):\n    '''\n    Write a function that takes in two strings and returns the area of a rectangle.\n    '''\n    if type(s) == list:\n        s = s[0]\n    if type(l) == list:\n        l = l[0]\n    if type(s) == str and type(l) == str:\n        if s[0] == l[0]:\n            s = s[1:]\n            l = l[1:]\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\n    else:\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\ndef parallelogram_area_polygon(s, l):\n    '''\n    Write a function that takes in two strings and returns the area of a parallelogram.\n    '''\n    if type(s) == list:\n        s = s[0]\n    if type(l) == list:\n        l = l[0]\n    if type(s) == str and type(l) == str:\n        if s[0] == l[0]:\n            s = s[1:]\n            l = l[1:]\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\n    else:\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\ndef circle_area_polygon(s, l):\n    '''\n    Write a function that takes in two strings and returns the area of a circle.\n    '''\n    if type(s) == list:\n        s = s[0]\n    if type(l) == list:\n        l = l[0]\n    if type(s) == str and type(l) == str:\n        if s[0] == l[0]:\n            s = s[1:]\n            l = l[1:]\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\n    else:\n        if s[0] =='':\n            s = 'x'\n        if l[0] =='':\n            l = 'x'\n        l = int(l)\n        s = int(s)\n        return (s*l)/2\ndef arc_area_polygon(s, l):\n    '''\n    Write a function that takes in two strings and returns the area of an arc.\n    '''\n    if type(s) == list:\n        s = s[0]\n    if type(l) ="
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(s):\n        for j in range(l):\n            area += (1/3)*s**2\n    return(area)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    # loop to calculate area\n    for i in range(0,l):\n        area = area + s*(1.0 - tan(pi*(i + 0.5)/l))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Get sides\n    sides = s\n    n_sides = l\n    # Calculate area\n    area = 0\n    for i in range(n_sides):\n        area += sides[i] * sides[i + 1]\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = [s]\n    for i in range(l):\n        s.append(float(input(\"Input the length of the side: \")))\n    return s * 4\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = s.lower().replace(\" \",\"\")\n    l = l.lower().replace(\" \",\"\")\n    if s == \"N\" or s == \"n\":\n        return 0\n    if l == \"N\" or l == \"n\":\n        return 0\n    return pi * (s**2 + (l**2)**2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 4/3*(l*s**2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #print(s)\n    #print(l)\n    area = 0\n    for i in range(1,l+1):\n        area += ((tan(i/l))**2)\n    return area\ndef area_circ(r):\n    '''\n    Write a function to calculate the area of a circle given its radius r.\n    '''\n    area = pi * (r**2)\n    return area\ndef is_in_circle(x, y, radius):\n    '''\n    Write a function to determine whether a point lies within a circle given its x and y coordinates and its radius.\n    '''\n    return (x**2 + y**2) <= radius**2\ndef area_circle(x, y, r):\n    '''\n    Write a function to calculate the area of a circle given its center and its radius.\n    '''\n    area = pi * (r**2)\n    return area\ndef area_segment(a, b):\n    '''\n    Write a function to calculate the area of a line segment given its start point and its end point.\n    '''\n    return (a[0] * b[1] - a[1] * b[0])**2\ndef area_line(p1, p2):\n    '''\n    Write a function to calculate the area of a line segment given its start point and its end point.\n    '''\n    return (p1[0] * p2[1] - p1[1] * p2[0])**2\ndef length(a, b):\n    '''\n    Write a function to calculate the length of a line segment given its start point and its end point.\n    '''\n    return (b[0] - a[0])**2\ndef slope(p1, p2):\n    '''\n    Write a function to calculate the slope of a line segment given its start point and its end point.\n    '''\n    return (p2[1] - p1[1])/ (p2[0] - p1[0])\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0\n    for side in range(0, len(s)):\n        a += l * s[side]\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s > 0:\n        s *= 2\n        n = s / l\n        return (l**2 * (4*n + 1) / 3)\n    else:\n        return 0\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0 \n    for div in range(1, n): \n        if n % div == 0: \n            sum += div \n    if sum == n: \n        return True\n    else: \n        return False\n    \ndef is_prime(n): \n    '''\n    Return True if n is prime, else return False.\n    '''\n    if n == 2 or n == 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(n) + 1), 6): \n        if n % i == 0 or n % (i + 2) == 0: \n            return False\n    return True\n    \ndef num_fact(n): \n    '''\n    Returns the factorial of a natural number n.\n    '''\n    fact = 1\n    for i in range(1, n+1): \n        fact = fact * i \n    return fact\n    \ndef create_array(i, arr): \n    '''\n    Create an array with all possible sums. \n    '''\n    for j in range(1, i+1): \n        arr[j] = j \n    for j in range(i-1, -1, -1): \n        arr[j] = j \n    for j in range(i, n): \n        arr[j] = j \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = []\n    for i in range(1,n+1):\n        if (n%i == 0):\n            div.append(i)\n    return div\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # define the fibonacci number sequence\n    fib_seq = [1,1]\n    for i in range(2, n + 1):\n        # calculate the next Fibonacci number \n        # 1, 1, 2, 3, 5, 8,...\n        fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n        # if the sum of the divisors is same to the current number\n        if fib_seq[i] == n:\n            return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if(n % i == 0):\n            sum = sum + i\n    if (sum == n):\n        print(\"The sum of the divisors of two integers are the same.\")\n    else:\n        print(\"The sum of the divisors of two integers are not the same.\")\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #n = int(input(\"enter the number : \"))\n    if n>0:\n        div = 1\n        for i in range(2,n):\n            if n%i==0:\n                div+=1\n        if div==n:\n            print(f\"{n} is a divisor of {div}\")\n        else:\n            print(f\"{n} is not a divisor of {div}\")\n    else:\n        print(\"this is an invalid input\")\ndef div_sum2(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #n = int(input(\"enter the number : \"))\n    if n>0:\n        div = 1\n        for i in range(2,n):\n            if n%i==0:\n                div+=1\n        div2 = 1\n        for j in range(2,div):\n            if n%j==0:\n                div2+=1\n        if div==div2:\n            print(f\"{n} is a divisor of {div}\")\n        else:\n            print(f\"{n} is not a divisor of {div}\")\n    else:\n        print(\"this is an invalid input\")\ndef fun(n,m):\n    '''\n    Write a function that takes in the positive numbers n and m, calculates the greatest common divisor of the numbers n and m.\n    '''\n    gcd = math.gcd(n,m)\n    return gcd\ndef fact(n):\n    '''\n    Write a function that takes in the positive numbers n, which must be positive.\n    '''\n    if n>0:\n        div = 1\n        for i in range(2,n+1):\n            if n%i==0:\n                div+=1\n        div2 = 1\n        for j in range(2,div):\n            if n%j==0:\n                div2+=1\n        if div==div2:\n            print(f\"{n} is a factor of {div}\")\n        else:\n            print(f\"{n} is not a factor of {div}\")\n    else:\n        print(\"this is an invalid input\")\ndef fact2(n):\n    '''\n    Write a function that takes in the positive numbers n, which must be positive.\n    '''\n    if n>0:\n        div = 1\n        for i in range(2,n+1):\n            if n%i==0:\n                div+=1\n        div2 = 1\n        for j in range(2,div):\n            if n%j==0:\n                div2+=1\n        if div==div2:\n            print(f\"{n} is a factor of {div}\")\n        else:\n            print(f\"{n} is not a factor of {div}\")\n    else:\n        print(\"this is an invalid input\")\ndef gcd(a,b):\n    '''\n    Write a function that takes in two positive integers, a and b, and calculates the gcd.\n    '''\n    if a==b:\n        return a\n    else:\n        return gcd(b,a%b)\ndef gcd2(a,b):\n    '''\n    Write a function that takes in two positive integers, a and b, and calculates the gcd.\n    '''\n    if a==b:\n        return a\n    else:\n        div = 1\n        while b%a!=0:\n            div+=1\n        return div\ndef prime(n):\n    '''\n    Write a function that takes in two positive integers, n and k, and checks whether a prime number is a divisor of k.\n    '''\n    if n==1:\n        return True\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\ndef gcd3(a,b):\n    '''\n    Write a function that takes in two positive integers, a and b, and calculates the gcd.\n    '''\n    if a==b:\n        return a\n    else:\n        div = 1\n        while b%a!=0:\n            div+=1\n        return div\ndef factor(n,k):\n    '''\n    Write a function that takes in two positive integers, a and b, and calculates the gcd.\n    '''\n    if n==1:\n        return a\n    else:\n        div = 1\n        while n%k!=0:\n            div+=1\n        return div\ndef calculate_gcd(a,b):\n    '''\n    Write a function that takes in two positive integers, a and b, and calculates the gcd.\n    '''\n    div = 1\n    if a==b:\n        return a\n    else:\n        while b!=0:\n            if b%a==0:\n                return b\n            div+=1\n            b/=a\n        return div\ndef inverse(a,n):\n    '''\n    Write a function that takes in two positive integers, a and b, and calculates the gcd.\n    '''\n    if a==n:\n        return a\n    else:\n        return (inverse(a,(a*n)+1))\ndef affin(a,n):\n    '''\n    Write a function that takes in two positive integers, a and b, and calculates the gcd.\n    '''\n    if a==n:\n        return a\n    else:\n        return (affin(a,(a*n)+1))\ndef factorial(n):\n    '''\n    Write a function that takes in two positive integers, a and b, and calculates the gcd.\n    '''\n    if n==1:\n        return 1\n    else:\n        fact = 1\n        for i in range(2,n):\n            fact*=i\n        return fact\ndef fibonacci(n):\n    '''\n    Write a function that takes in two positive integers, a and b, and calculates the gcd.\n    '''\n    if n==1:\n        return 1\n    else:\n        div = 1\n        div2 = 1\n        for i in range(2,n):\n            if i>1:\n                div+=1\n        for j in range(1,div):\n            if j==1:\n                div2+=1\n        if div==div2:\n            return div\n        else:\n            print(\"invalid input\")\ndef fibonacci2(n):\n    '''\n    Write a function that takes in two positive integers, a and b, and calculates the gcd.\n    '''\n    if n==1:\n        return 1\n    else:\n        div = 1\n        div2 = 1\n        for i in range(2,n):\n            div+=1\n        div2 = 1\n        for j in range(1,div):\n            div2+=1\n        if div==div2:\n            return div\n        else:\n            print(\"invalid input\")\ndef prime_factor(n):\n    '''\n    Write a function that takes in two positive integers, a and b, and calculates the gcd.\n    '''\n    if n==1:\n        return 1\n    else:\n        div = 1\n        for i in range(2,n):\n            if n%i==0:\n                div+=1\n        div2 = 1\n        for j in range(2,div):\n            if n%j==0:\n                div2+=1\n        if div==div2:\n            return div\n        else:\n            print(\"invalid input\")\ndef prime_factor2(n):\n    '''\n    Write a function that takes in two positive integers, a and b, and calculates the gcd.\n    '''\n    if n==1:\n        return 1\n    else:\n        div = 1\n        for i in range(2,n):\n            if n%i==0:\n                div+=1\n        div2 = 1\n        for j in range(2,div):\n            if n%j==0:\n                div2+=1\n        if div==div2:\n            print(f\"{n} is a prime factor of {div}\")\n        else:\n            print(f\"{n} is not a prime factor of {div}\")\ndef prime_factor3(n):\n    '''\n    Write a function that takes in two positive integers, a and b, and calculates the gcd.\n    '''"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            sum += i\n    return (sum == n)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return int(math.sqrt(n)) == math.floor(math.sqrt(n)) + 1\ndef div_sum2(n): \n    '''\n    Return the sum of the divisors of an integer.\n    '''\n    return int(math.sqrt(n)) + 1\ndef primes_div_sum(n):\n    '''\n    Given a number, return the sum of the numbers in the prime list.\n    '''\n    primes = [2, 3, 5, 7]\n    for i in range(1,n):\n        if n%i == 0:\n            primes.append(i)\n    if len(primes) == 2:\n        return primes[0]*primes[1]\n    return primes[0]*primes[1] + primes[1]*primes[2] + primes[2]*primes[3]\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n = str(n)\n    divisors = [i for i in range(1,int(n) + 1)]\n    for i in divisors:\n        if n % i == 0:\n            return False\n        if i > n/i:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n    if n in divisors:\n        print (\"the sum of the divisors of two integers are\",n)\n    else:\n        print(\"the sum of the divisors of two integers are not the same\")\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return (n % 2 == 0) \n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #create an empty list to store the count\n    #use a for loop to iterate through the string\n    #and add the characters to the empty list\n    #return the count\n    # print the length of the string\n    # print the characters in the position\n    # print the number of characters\n    # print the count\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len(str1.lower().replace(' ', '').replace('.', '').replace(',', '').replace(';', '').replace('-', '').replace('!', '').replace('?', '').replace(' ', '').replace('(', '').replace(')', '').replace(':', '').replace(' ', '').replace('&', '').replace('.', '').replace('\"', '').replace(\"'\", ''))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # If no arguments are provided, return the number of characters.\n    if len(str1) == 0:\n        return 0\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    count = 0\n    \n    for letter in str1:\n        if letter.upper() in str1.upper():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([i for i in str1.lower().replace(\" \",\"\") if i in alphabet])\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        char_pos_count = 0\n        for i in range(len(str1)):\n            if str1[i].lower() in alphabet:\n                char_pos_count += 1\n        return char_pos_count\n    \ndef count_digit_position(str1):\n    '''\n    Write a function to count the number of digits in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        digit_pos_count = 0\n        for i in range(len(str1)):\n            if str1[i].isdigit():\n                digit_pos_count += 1\n        return digit_pos_count\n    \ndef print_result(str1, str2):\n    '''\n    Write a function that prints the result of the two strings provided as arguments.\n    '''\n    if len(str1) == 0 and len(str2) == 0:\n        print('No match')\n        return\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    str1 = str1.upper()\n    for letter in str1:\n        if letter.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # the number of characters are returned\n    count = 0\n    \n    # a for loop to iterate through the string\n    for i in str1:\n        # a for loop to iterate through the string\n        for j in range(len(alphabet)):\n            # if the character matches the position in the alphabet\n            if alphabet[j] == i:\n                # increment the count\n                count += 1\n    return count\n    "
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #initialize\n    count = 0\n    for i in str1:\n        if i.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for i in range(0, len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if A[i] == A[j] and A[i] & 1 == 0:\n                even_pair += 1\n    return even_pair\n    \ndef find_odd_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    odd_pair = 0\n    for i in range(0, len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if A[i] == A[j] and A[i] & 1!= 0:\n                odd_pair += 1\n    return odd_pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    for i in A:\n        if i & 0x10 == 0x10:\n            pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count=0\n    i=0\n    while i<len(A):\n        if A[i]&1==0:\n            count+=1\n        i+=1\n    return count\n        \n        \n        \n        \n        \n        \n        \n    \n    \n    \n    \n    \n    \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) % 2 == 0:\n        return len(list(filter(lambda x : x ^ 1, A)))\n    else:\n        return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return len([i for i in A if i%2 == 0])\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd_pairs = 0\n    for i in range(len(A)):\n        if A[i] % 2 == 0:\n            odd_pairs += 1\n    return odd_pairs\n    "
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count_even_pair=0\n    for index,x in enumerate(A):\n        if (x & 1) == 0:\n            count_even_pair+=1\n    return count_even_pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i,len(A)):\n            if A[i] == A[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return None\n    elif n % 2 == 0:\n        return 1\n    else:\n        return 2**(n-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    l = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            l.append(i)\n    return max(l)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    # if n is 0 or 1, we return n\n    # because if n is 2, we get the smallest power of 2 of 2\n    # because when n is 0, we get 1\n    # so n is a power of 2\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 4\n    # n is in the range 1 to 100\n    i = 0\n    power_of_2 = 1\n    while power_of_2 <= n:\n        if n % power_of_2 == 0:\n            return power_of_2\n        else:\n            power_of_2 = power_of_2 + 1\n    return 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1:\n        return 0\n    for i in range(2, n//2 +1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #i is the starting value of 2^i for which the next power of 2 will be greater than or equal to n.\n    #n is the number to be checked for.\n    i = 0\n    while 2**i <= n:\n        i += 1\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i=0\n    while (n>0):\n        if(n%2==0):\n            break\n        i+=1\n        n=n/2\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2: \n        return n\n    else: \n        return n % 2 + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    curr_power = 2\n    while (n>curr_power):\n        curr_power = curr_power * 2\n    return curr_power\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    ans = 1\n    while n > 1:\n        ans = ans * 2\n        n = n - 1\n    return ans\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n > 0: \n        n = n & ((n - 1) >> 1) \n    return n\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # count the occurrence of a number\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if(x==0):\n        return 0\n    else:\n        return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #add in the value of the list (1,3,5)\n    #store the list in a\n    #save the value to a in a variable.\n    #count how many times the number was in the list.\n    #return the count.\n    l=[]\n    for x in a:\n        if x in l:\n            l.append(a.count(x))\n        else:\n            l.append(a.count(x))\n    return l\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # a = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n    # x = \"abcd\"\n    # res = []\n    # for i in a:\n    #     print(x.count(i))\n    #     res.append(x.count(i))\n    return 0\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return [a.count(i) for i in x] \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    d={}\n    for i in a: \n        if i in d: \n            d[i]+=1\n        else: \n            d[i]=1\n    print(d)\n    return len(d)\n    \nprint(frequency(numbers,3))\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for item in a:\n        if(item==x):\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    n = len(a)\n    count = 0\n    for i in range(n): \n        if a[i] == x: \n            count += 1\n    return count\ndef main():\n    a = [10,3,4,5,6,7,8,9,10]\n    x = 15\n    print(frequency(a,x))\nmain("
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in a:\n        if i == x:\n            c += 1\n    return c\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if (m < 0 or m > n):\n        print ('Invalid range for the sum.')\n        return\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if m <= n:\n        for i in list1[m:n]:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    sum_numbers = 0\n    for i in range(0, m):\n        sum_numbers += list1[i]\n    for i in range(0, n):\n        sum_numbers += list1[i]\n    return sum_numbers\n    \n    \n    \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    def sum_range_list2(list1, m, n):\n        sum = 0\n        for i in range(m, n):\n            sum += list1[i]\n        return sum\n    return sum_range_list2\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0                                                                                                                                                                                    \n    if m == 0:                                                                                                                                                                                                \n        total = list1[0]                                                                                                                                                                                    \n        return total\n    else:\n        if n == 0:                                                                                                                                                                                            \n            return sum_range_list(list1, m-1, 0)                                                                                                                                                                                        \n        else:\n            if list1[n] >= m:                                                                                                                                                                                            \n                total = sum_range_list(list1, m, n-1)\n                return total\n            else:\n                total = sum_range_list(list1, m, n-1)\n                return total + list1[n]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # your code goes here\n    if m == 0:\n        return n\n    if n == 0:\n        return m\n    else:\n        return sum_range_list(list1, m - 1, n - 1) + list1[m - 1] + list1[n - 1]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):                                                                                                                                                                                                                                                                                                                                                                                                                \n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Write your code here\n    x1 = 1\n    y1 = 1\n    x2 = 1\n    y2 = a\n    x3 = a\n    y3 = a\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 * math.sqrt(3)\ndef square_triangle(a):\n    '''\n    Write a function to find the perimeter of a square triangle from the length of its sides.\n    '''\n    return a * 4 * math.sqrt(3)\ndef equilateral_triangle(a):\n    '''\n    Write a function to find the perimeter of an equilateral triangle from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef rectangle_triangle(a):\n    '''\n    Write a function to find the perimeter of a rectangle triangle from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_triangle(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef triangle_equilateral(a):\n    '''\n    Write a function to find the perimeter of a triangle equilateral from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_triangle_even(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_triangle_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle odd from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef triangle_rectangle(a):\n    '''\n    Write a function to find the perimeter of a triangle rectangle from its sides.\n    '''\n    return a * 4 * math.sqrt(3)\ndef parallelogram_rectangle_even(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even from its sides.\n    '''\n    return a * 4 * math.sqrt(3)\ndef parallelogram_rectangle_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle odd from its sides.\n    '''\n    return a * 4 * math.sqrt(3)\ndef parallelogram_rectangle_equal(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_odd_even(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_even_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even odd from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_odd_even_even(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle odd even odd from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_odd_even_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle odd even odd from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_even_odd_even(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even even odd from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_even_odd_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_odd_odd_even(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle odd odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_odd_odd_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle odd odd odd from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_odd_odd_even(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle odd odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_even_odd_even(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_even_odd_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even odd odd from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_even_odd_even_even(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even odd even odd from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_even_odd_odd_even(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even odd odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_even_odd_odd_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even odd odd odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_odd_odd_odd_even(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle odd odd odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_odd_odd_odd_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle odd odd odd odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_odd_odd_odd_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle odd odd odd odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_even_odd_odd_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even odd odd odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_odd_odd_odd_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle odd odd odd odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_odd_odd_odd_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle odd odd odd odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_even_odd_odd_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even odd odd odd odd even from its sides.\n    '''\n    return a * 4 * math.sqrt(3) / 2\ndef parallelogram_rectangle_even_odd_odd_odd(a):\n    '''\n    Write a function to find the perimeter of a parallelogram triangle even odd odd odd odd even from its sides.\n    ''"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Get the length of each side\n    l1, l2, l3 = 0, 0, 0\n    sides = [2, 3, 4, 5, 6]\n    for side in sides:\n        l1 = l1 + side\n        l2 = l2 + side\n        l3 = l3 + side\n    # Find the perimeter\n    # Perimeter = sum(3x^2 + 5x + 6) = 28\n    return math.sqrt(l1 * l2 * l3)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (4.0/3.0) * math.sqrt(3.0)*(a ** 2.0)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    square_of_sides = a ** 2\n    circle_radius = sqrt(square_of_sides)\n    return square_of_sides + 2 * circle_radius\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    c = 4 * a\n    d = (4 * a) - (2 * a)\n    return c + d\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = a / 6\n    a2 = a / 2\n    r = a / 4\n    x = (l * (r ** 2)) - (l * r ** 2)\n    print('The perimeter of a regular pentagon is:', x)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (3.14 * a) * (a / 2)\ndef main():\n    '''\n    a = 3\n    p = perimeter_pentagon(a)\n    print(\"The perimeter of a pentagon is %.2f\" % p)\n    '''\n    a = float(input(\"Input the side length of the pentagon: \"))\n    print(\"The perimeter of a pentagon is %.2f\" % perimeter_pentagon(a))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    result = math.sqrt(5)*a\n    return result\ndef square_pentagon(a):\n    '''\n    Write a function that calculates the square of a regular pentagon.\n    '''\n    result = math.sqrt(6)*a\n    return result\ndef rectangle_pentagon(a):\n    '''\n    Write a function that calculates the rectangle of a regular pentagon.\n    '''\n    result = math.sqrt(7)*a\n    return result\ndef parallelogram_pentagon(a):\n    '''\n    Write a function that calculates the parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(8)*a\n    return result\ndef rectangle_parallelogram(a):\n    '''\n    Write a function that calculates the rectangle parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(9)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(10)*a\n    return result\ndef circle_pentagon(a):\n    '''\n    Write a function that calculates the circle of a regular pentagon.\n    '''\n    result = math.sqrt(11)*a\n    return result\ndef circle_parallelogram(a):\n    '''\n    Write a function that calculates the circle parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(12)*a\n    return result\ndef circle_parallelogram(a):\n    '''\n    Write a function that calculates the circle parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(13)*a\n    return result\ndef rectangle_circle(a):\n    '''\n    Write a function that calculates the rectangle of a regular pentagon.\n    '''\n    result = math.sqrt(14)*a\n    return result\ndef rectangle_parallelogram(a):\n    '''\n    Write a function that calculates the rectangle parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(15)*a\n    return result\ndef parallelogram_circle(a):\n    '''\n    Write a function that calculates the parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(16)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(17)*a\n    return result\ndef circle_circle(a):\n    '''\n    Write a function that calculates the circle of a regular pentagon.\n    '''\n    result = math.sqrt(18)*a\n    return result\ndef circle_parallelogram(a):\n    '''\n    Write a function that calculates the circle parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(19)*a\n    return result\ndef parallelogram_circle(a):\n    '''\n    Write a function that calculates the parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(20)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(21)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(22)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(23)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(24)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(25)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(26)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(27)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(28)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(29)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(30)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(31)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(32)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(33)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(34)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(35)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(36)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(37)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(38)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(39)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(40)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(41)*a\n    return result\ndef parallelogram_parallelogram(a):\n    '''\n    Write a function that calculates the parallelogram parallelogram of a regular pentagon.\n    '''\n    result = math.sqrt(42)*"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    '''\n    This function gets input of string's' and counts the number of'std' in the input string's'\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string's'\n    '''\n    \n    '''\n    This function uses count_occurance() function to get the count of'std' in the input string.\n    '''\n    \n    return count_occurance(s.upper())\n    \n    \n    \n    '''\n    This function gets the count of occurance of the'std' in the input string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string's' and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the count of occurance of the'std' in the string and counts the count of occurance.\n    '''\n    \n    '''\n    This function gets the coun"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    l=[]\n    for i in range(0,len(s)):\n        if s[i]=='s':\n            count+=1\n        elif s[i]=='t':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='g':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='e':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='i':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='o':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='n':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='d':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='k':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='q':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='u':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='e':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='j':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='h':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='f':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='g':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='d':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='c':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='b':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='j':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='n':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='o':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='m':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='l':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='o':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='r':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='b':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='v':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='e':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='d':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='a':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='j':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        elif s[i]=='z':\n            if count==1:\n                l.append(1)\n            else:\n                l.append(count)\n            count=0\n        else:\n            l.append(0)\n    return l\n    \ndef create_n_grams(s,n):\n    '''\n    Creates all n-grams of the string's' from a given string's'.\n    '''\n    grams=[]\n    if len(s)>1:\n        for i in range(0,len(s)-n+1):\n            grams.append(s[i:i+n])\n    else:\n        grams.append(s)\n    return grams\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    dct = {}\n    for i in range(len(s)):\n        dct[s[i]] = s[i]\n    return len(dct)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    print(\"Count the number of occurence of the string'std' in a given string: \")\n    count = 0\n    for i in s:\n        if i==\"std\":\n            count += 1\n    print(\"The number of occurance of the string'std' is : \",count)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # your code here\n    str = s.replace(' ','')\n    l = len(str)\n    return str.count(str[0])*l\n    \n    # return s.count(s[0])*len(s)\n    "
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return len(s.count(std))\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    cnt = 0\n    \n    for i in range(len(s)):\n        if s[i] =='std':\n            cnt += 1\n    \n    return cnt\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = test_tuple[0]\n    type_match = data_type\n    if isinstance(data_type, list):\n        for item in data_type:\n            if item!= type_match:\n                type_match = item\n    else:\n        type_match = data_type\n    if type_match == type(test_tuple[1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    test_list.sort()\n    if len(test_tuple) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #Tuple to dictionary\n    test_tuple_dict = dict(test_tuple)\n    \n    #Check if all elements in the dictionary have same data type\n    for key in test_tuple_dict.keys():\n        if type(test_tuple_dict[key]) is not dict:\n            return False\n    \n    #Check if every key has the same data type\n    for key in test_tuple_dict.keys():\n        if type(test_tuple_dict[key]) is not dict:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    d1=test_tuple[0]\n    d2=test_tuple[1]\n    if type(d1) is not type(d2):\n        return \"error\"\n    if type(d1) is type(d2):\n        return \"same\"\n    return \"error\"\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = list(map(type, test_tuple))\n    #print('data type list: ',data_type)\n    #print('Data type in list: ',data_type)\n    for i in range(len(test_tuple)):\n        #print(test_tuple[i])\n        #print('Type of ',test_tuple[i])\n        if type(test_tuple[i]) == int or type(test_tuple[i]) == float:\n            pass\n        else:\n            print('Exception Occurred!')\n            print(data_type)\n            print(test_tuple)\n            raise Exception\n    return test_tuple\n    #print('check_type: ',check_type(test_tuple))\n    #print('check_type: ',check_type([1,2,3]))\n    #print('check_type: ',check_type([1,2,3]*3))\n    #print('check_type: ',check_type(['1','2','3'])\n    #print('check_type: ',check_type(['1','2','3'],[4,5,6]))\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # First check if all the elements in the tuple have same data type\n    if type(test_tuple[0]) is not int or type(test_tuple[1]) is not str:\n        raise TypeError('The tuple elements must be of data type integer or string')\n    elif len(test_tuple)!= 2:\n        raise ValueError('The tuple must have exactly 2 elements')\n    else:\n        # Then check if both elements in the tuple have same data type\n        if test_tuple[0].__class__ is not int and test_tuple[0].__class__ is not str:\n            raise TypeError('The tuple elements must be of data type integer or string')\n        elif test_tuple[1].__class__ is not str:\n            raise TypeError('The tuple elements must be of data type string')\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = (10, 15, 20, 45, 50)\n    tuple_2 = (1, 2, 3, 4, 5)\n    for test in test_tuple:\n        assert type(test) == int\n    for test_2 in tuple_2:\n        assert type(test_2) == int\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_size = len(test_tuple)\n    for element in test_tuple:\n        if not isinstance(element, tuple):\n            return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    def compare(tuple):\n        check = True\n        for i in tuple:\n            if not isinstance(i,int):\n                check = False\n        return check\n    return compare\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 1:\n        return test_tuple[0]\n    if type(test_tuple[0]) == int or type(test_tuple[0]) == float:\n        return test_tuple[0]\n    else:\n        print(\"Error\")\n        return \"Not Valid\"\n    # check for 0 and 1 type\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # How to find the majority element?\n    # If array is sorted, this is a majority element\n    # If array is not sorted, this is a majority element\n    # Can we find the majority element in a sorted array\n    # If yes, return array[0]\n    # If no, return None\n    # If both elements are the same, then they are the same majority element\n    # If they are different, then they are different\n    # If they are the same, then we can only find the majority element\n    # If we find that element, return True\n    # If we find that element, return False\n    # If we find that element, return None\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    if arr[n] == x:\n        return True\n    for i in range(n):\n        if arr[n] == arr[i] and i!= n - 1:\n            continue\n        elif arr[i] == arr[n]:\n            return False\n    return is_majority(arr, n - 1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # base case\n    if n == 0:\n        return False\n    \n    # set of indexes\n    majority_indexes = set()\n    \n    # loop through the array\n    for i in range(n):\n        # get the element\n        elem = arr[i]\n        # check if the element is in the set of indexes\n        if elem in majority_indexes:\n            # set the set of indexes\n            majority_indexes.add(i)\n        \n        # if the element is not in the set of indexes,\n        # the function has a false answer\n        else:\n            return False\n    \n    # check if there are still elements in the set\n    # of indexes that are not the majority element\n    for i in range(n):\n        if i not in majority_indexes:\n            return False\n    \n    # if there are still elements in the set, return true\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return arr[0] == x\n    #print(arr, x)\n    #print(arr[n//2-1:n//2])\n    #print(arr[n//2:n//2+1])\n    #print(arr[n//2:n//2+1:])\n    if arr[n//2] > x:\n        return is_majority(arr, n//2, x)\n    else:\n        return is_majority(arr, n//2, x) or is_majority(arr, n//2, x) and is_majority(arr, n//2, x)\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # initialize variables\n    for i in range(0, n):\n        if arr[i] == x:\n            return arr[i]\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    for k in freq:\n        if freq[k] > len(arr) // 2:\n            return k\n    return -1\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        else:\n            count = 0\n        if count > n/2:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    sums = 0\n    for i in range(n):\n        if arr[i] == x:\n            sums += 1\n            \n    return sums/n > (n/2)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    x = arr.index(x)\n    if x == n/2:\n        return True\n    else:\n        for i in range(n):\n            if arr[x] == arr[i] and i!= x:\n                return False\n        return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    a = arr[0]\n    b = arr[1]\n    for i in range(2, n):\n        if (a == b):\n            return True\n        else:\n            a = arr[i]\n            b = arr[i+1]\n    return False\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    # Create an empty dictionary to hold the bits\n    bit_map = {}\n    \n    # Loop through the number and set the bits\n    for bit in bin(n)[2:].rjust(8, '0'):\n        if bit in bit_map:\n            bit_map[bit] += 1\n        else:\n            bit_map[bit] = 1\n    \n    # Create an empty list to hold the result\n    result = []\n    \n    # Loop through the dictionary, and add each bit to the result list\n    for bit in bit_map:\n        if bit_map[bit] > 1:\n            result.append(bit)\n    \n    # Return the number of set bits and the result\n    return len(result), result\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    counter = 0\n    while n!= 0:\n        if n & 1 == 1:\n            counter += 1\n        n >>= 1\n    return counter\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return count_Set_Bits(n-1) + count_Set_Bits(n-2)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(1,n):\n        if (n & i) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if(n == 0): \n        return 1\n    if (n < 0): \n        return 0\n    if (n % 2) == 0: \n        return count_Set_Bits(n/2) + 1\n    return count_Set_Bits(n/2)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n!= 0):\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    i = 0\n    while (i < n):\n        if n & 1 == 1:\n            i = i + 1\n        else:\n            n = n >> 1\n            i = i + 1\n    return i\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(n): \n        if (n & 1) == 0: \n            count += 1 \n    print(\"There are\", count, \"bits in total.\")\n    \ndef count_Sets(n): \n    '''\n    Write a python function to count the number of sets (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(1,n+1): \n        if (n & i) == 0: \n            count += 1 \n    print(\"There are\", count, \"sets in total.\")\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # count the number of set bits \n    count = 0\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            str = str[:i] + str[i + 1:]\n    return str\n    "
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if(str==''):\n        return ''\n    if(str[0]=='.'):\n        str=str[1:]\n    if(str[-1]=='.'):\n        str=str[:-1]\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # This function will remove the odd values from the string\n    # The code will run only if the input string is valid\n    # We will use a list comprehension to iterate over the string, remove the odd values in the list, and add the result back in to a new list\n    return [x for x in str if x%2!= 0] + [x for x in str if x%2 == 0]\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace(\"X\",\"\")\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str.replace('1', '2').replace('0', '1')\n    str.replace('0', '0').replace('2', '1')\n    str.replace('2', '0').replace('1', '0')\n    str.replace('0', '2')\n    str.replace('0', '1')\n    str.replace('1', '0')\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # define an empty string\n    str = str.replace(\" \",\"\")\n    # create a list of all even elements\n    list_even = list(filter(lambda x: x % 2 == 0, map(str.strip, list(str))))\n    # remove each element and return the string\n    return \"\".join(list_even)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # find the index of the odd index values of a string\n    odd_index = []\n    for index in range(len(str)):\n        if index % 2 == 0:\n            if str[index] not in odd_index:\n                odd_index.append(str[index])\n        else:\n            continue\n    return ''.join(odd_index)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if str == None or str == '':\n        return'str is empty'\n    \n    odd_str = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            if str[i] not in odd_str:\n                odd_str.append(str[i])\n    \n    return ''.join(odd_str)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str.replace(' ', '')\n    str.replace('-', '')\n    str.replace('#', '')\n    return str.replace('#', '')\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c: \n        return a \n    elif b>a and b>c: \n        return b \n    else: \n        return c \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    return a+b+c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_numbers = a, b, c\n    if min_numbers[0] < min_numbers[1] and min_numbers[1] < min_numbers[2] : return min_numbers\n    elif min_numbers[0] > min_numbers[1] and min_numbers[1] > min_numbers[2] : return min_numbers\n    elif min_numbers[0] == min_numbers[1] and min_numbers[0] < min_numbers[2] : return min_numbers\n    else : return min_numbers\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n    \n        \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a==b==c): \n        return a \n    if (a>b>c): \n        return a \n    if (b>c>a): \n        return b \n    if (c>a>b): \n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        if b < a:\n            return b\n        else:\n            return c\n    else:\n        return a\nprint(min_of_three(3,5,9)"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n > (l+r):\n        return False\n    else:\n        for i in range(l,r):\n            if (i & (2 ** n-1)):\n                return False\n        return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & (l ^ (n >> n))) == 0) and (n & (r ^ (n >> n))) == (n & ((n >> n) ^ r ^ (n >> n)))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l > r:\n        return False\n    if n<0:\n        n=n&0xFFFFFFFF\n    else:\n        n>>=32\n    while n>0:\n        if n&1:\n            l+=1\n        else:\n            r-=1\n        n>>=1\n    return l==r\n    \ndef all_Bits_Set_In_The_Given_Range_Check(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n<0:\n        n=n&0xFFFFFFFF\n    else:\n        n>>=32\n    l,r=0,0\n    while n>0:\n        if n&1:\n            l+=1\n        else:\n            r-=1\n        n>>=1\n    return all_Bits_Set_In_The_Given_Range(n,l,r)\n    "
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (l >= n):\n        print(\"Invalid range \")\n        return\n    if (r >= n):\n        print(\"Invalid range \")\n        return\n    if (l > n-1):\n        print(\"Invalid range \")\n        return\n    if (r > n-1):\n        print(\"Invalid range \")\n        return\n    if (l == r):\n        print(\"No unset bits in the range \")\n        return\n    if (n <= n-1 and l <= n and r <= n):\n        print(\"No unset bits in the range \")\n        return\n    if (n == l or n == r):\n        print(\"No unset bits in the range \")\n        return\n    if (n == l and l <= r):\n        print(\"No unset bits in the range \")\n        return\n    if (n == l and r <= l):\n        print(\"No unset bits in the range \")\n        return\n    if (n == r and r <= r):\n        print(\"No unset bits in the range \")\n        return\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(n == 0):\n        return 0\n    if(n == 1):\n        return 1\n    if(n == 2):\n        return 1 if ((l & 1) == 0) else 0\n    if(n == 3):\n        return 1 if ((r & 1) == 0) else 0\n    else:\n        print(\"Invalid Range\")\n        return 0\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r <= (n-1) and n >= l:\n        if n & l == l:\n            print(1)\n        else:\n            print(0)\n    else:\n        print(0)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(n):\n        if l <= (i + 1) <= r:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    x = int(bin(n)[2:])\n    i = 0\n    \n    while(i<len(x)):\n        i+=1\n        if(x[i]!=0):\n            j = 0\n            \n            while(j<len(x)):\n                if(x[j]!=0):\n                    break\n                else:\n                    j+=1\n                    \n            if(x[j]==0):\n                return False\n            else:\n                i = j\n                \n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n<=0:\n        return False\n    if (l<=n) and (r>=n):\n        return True\n    if l<=n and n<=r:\n        return False\n    \n    return all_Bits_Set_In_The_Given_Range(n-1,l,r) or all_Bits_Set_In_The_Given_Range(n-1,l,r-1)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (((l&(n-1))&n==0) and ((r&(n-1))&n==0))\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) < n:\n        return arr\n    elif len(arr) < n:\n        arr = [arr[i] for i in range(n, len(arr))]\n    arr = arr[::-1]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # TODO: YOUR CODE HERE\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    arr_str = \"\"\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n        arr_str += str(arr[i])\n    return arr_str\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    res = []\n    negative = []\n    positive = []\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) == 0:\n        return arr\n    else:\n        n_p, n_n = n, len(arr)\n        p_arr, n_arr = [], []\n        count, n_positive = 0, 0\n        for i in range(len(arr)):\n            if arr[i] < 0:\n                count += 1\n                n_positive += 1\n            else:\n                n_positive -= 1\n                p_arr.append(count)\n                n_arr.append(n_positive)\n                count = 0\n        if count > 0:\n            p_arr.append(count)\n            n_arr.append(n_positive)\n        p_arr.append(len(arr))\n        n_arr.append(n_n)\n        return p_arr, n_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if not isinstance(arr, list):\n        arr = list(arr)\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n        elif arr[i] > 0:\n            arr[i] = arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort(key = lambda x: x, reverse = False)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > 0:\n        return re_arrange_array_helper(arr, n)\n    else:\n        return None\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.strip()\n    if char == \" \":\n        return str1\n    else:\n        str1 = str1.replace(\" \",\"\")\n        str1 = str1.replace(\"\\n\",\"\")\n        str1 = str1.replace(\"\\t\",\"\")\n        return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if(char==' '):\n        return(str1.replace(' ','*'))\n    else:\n        return(str1.replace('*',' '))\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,char.replace(' ',''))\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace('\\n',' ').replace(' ',''+ char +'')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('\\t','')\n    str1 = str1.replace('\\r','')\n    str1 = str1.replace('\\f','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(char,'')\n    return str1\n    \n    \ndef check_if_index_in_string(ind,str1):\n    '''\n    Write a function that takes in a string and an index and checks if the index is inside a string, or not.\n    '''\n    if ind<0 or ind>=len(str1):\n        return False\n    else:\n        return True\n    \n    \ndef check_if_string_in_list(str1,list1):\n    '''\n    Write a function that takes in a string and a list, checks if the string is in the list, or not.\n    '''\n    if str1 in list1:\n        return True\n    else:\n        return False\n    \n    \ndef find_start_index(str1,list1):\n    '''\n    Write a function that takes in a string and a list, checks if the string starts with the first index of the list.\n    '''\n    if list1.count(str1[0]) > 0:\n        start = list1.index(str1[0])\n        if start == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,' ')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char =='':\n        str1 = str1.replace(' ',char)\n        return str1\n    else:\n        return str1"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return [item for item in sorted(list1)[:n]]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # print(list1)\n    heap_n=list1[0:n]\n    # print(\"heap_n\",heap_n)\n    res=[]\n    for i in range(n):\n        if heap_n[i] not in res:\n            res.append(heap_n[i])\n    return res\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list1=list(list1)\n    list1=list1[:n]\n    return list1\n    \ndef get_heap_min_heap(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_2(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_3(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_4(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_5(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_6(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_7(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_8(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_9(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_10(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_11(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_12(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_13(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_14(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_15(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_16(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_17(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_18(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_19(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_20(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_21(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_22(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_23(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_24(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_25(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_26(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_27(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_28(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_29(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_30(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_31(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_32(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.heapify(lst)\n    \n    return lst\n    \ndef get_heap_min_heap_33(lst):\n    '''\n    Sort the list by smallest value and return a list.\n    '''\n    heapq.h"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    list2=[]\n    for i in list1:\n        if heap[n-1]!=None:\n            heapq.heappush(heap,-i)\n        else:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    h = []\n    for i in list1:\n        heapq.heappush(h,i)\n    for _ in range(n-1):\n        temp = heapq.heappop(h)\n        heapq.heappush(h,temp)\n        print(temp)\n    return h\nprint(larg_nnum([10,25,30,40,50,60,70,80,90,100],5))\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # Initialise empty list\n    list_to_return=[]\n    \n    # Sort the list of numbers according to their values\n    list_to_return=sorted(list1,reverse=True,key=lambda x:x[n])\n    \n    # Return the list\n    return list_to_return\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n == 0:\n        return []\n    else:\n        if len(list1) == 0:\n            return []\n        else:\n            return [x for _, x in sorted(zip(list1, list1), reverse=True)[0:n]]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    '''\n    Input:\n        list1 = [45, 11, 22, 67, 89, 96, 66]\n        n = 3\n    Output:\n        [67, 89, 96]\n    '''\n    '''\n    list1 = list1[::-1]\n    for i in range(n):\n        heapq.heapify(list1)\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) == 0:\n        return []\n    sorted_list = sorted(list1, key=lambda x: x[n], reverse=True)\n    return sorted_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # initialize an empty list\n    res = []\n    \n    # sort the list\n    list1.sort(reverse=True)\n    \n    # loop through the list and add each item\n    for i in range(n):\n        res.append(list1[i])\n    return res\n    \ndef dfs(graph,n,visited,queue):\n    '''\n    Write a function that takes in a graph as a dictionary and an integer n and returns the degree of a node.\n    '''\n    \n    # if the node is not in the list then return 0\n    if n not in graph:\n        return 0\n    \n    # if the node is in the list then return the size of the list minus 1\n    elif n in visited:\n        return len(visited)-1\n    \n    # add it to the visited list and push it back into the queue\n    else:\n        visited.append(n)\n        queue.append(n)\n        for key, value in graph.items():\n            if n in key:\n                value.append(dfs(graph,n,visited,queue))\n    return len(queue)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 3.14*r**2\n    lateral_area_cylinder = h**2 * 3.14 * r * (2*r-1) * (2*r-1)\n    return lateral_area_cylinder\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    x_a= (r/2)**2 - (h/2)**2\n    x_b= (r/2)**2 - (h/2)**2\n    x_c= (r/2)**2 - (h/2)**2\n    return abs(x_a) + abs(x_b) + abs(x_c)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Section 2.5.2.2\n    h2 = 1.6*h\n    # Section 2.5.2.3\n    r2 = (r**2)/2\n    # Section 2.5.2.4\n    r3 = 1.6*(r+r2)\n    # Section 2.5.2.5\n    a = (r2*(1-r2*(h2/2)))**(1/3)\n    # Section 2.5.2.6\n    b = (r3*(1-r3*(h3/2)))**(1/3)\n    # Section 2.5.2.7\n    return a*b\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # # check if r and h are valid inputs\n    # r = check_r_l_arg(r,h)\n    # # print(r)\n    #\n    # # check if r is non-negative and less than 1\n    # r = check_r_l_arg(r,1)\n    # if r < 0:\n    #     raise ValueError('Error: r must be non-negative')\n    #\n    # # check if the height is non-negative\n    # h = check_h_arg(h)\n    # if h < 0:\n    #     raise ValueError('Error: h must be non-negative')\n    #\n    # # check if r and h are not zero\n    # r = check_r_l_arg(r,h)\n    # h = check_h_arg(h)\n    # if r == 0 and h == 0:\n    #     return 0\n    #\n    # # number of lateral angles\n    # num_lateral = (h**2 - r**2) / (2*r)\n    # if num_lateral < 0:\n    #     raise ValueError('Error: lateral angles must be non-negative')\n    #\n    # # calculate the total surface area of the cylinder\n    # s = num_lateral * (r**2)\n    #\n    # # print the result\n    # print(f'The total surface area of the cylinder is: {s}')\n    #\n    # return s\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    import cmath\n    import matplotlib.pyplot as plt\n    import numpy as np\n    from numpy import sin, cos, pi\n    from matplotlib.widgets import Slider\n    def plane_to_origin(a):\n        return np.array([0, 0, 1])\n    def rotate_vector(v, angle):\n        return np.array([np.cos(angle)*v[0] - np.sin(angle)*v[1], np.sin(angle)*v[0] + np.cos(angle)*v[1], 0])\n    #start_time = time.time()\n    r = 1\n    h = 1\n    a = 1\n    theta_t = np.arccos(r/h)\n    #theta_t = np.arccos(r/h)\n    a_f = 2*(np.cos(theta_t)*h + a/((2*r)*(2*r)))\n    t = np.arctan(a_f)/pi\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    phi = math.radians(h)\n    a = 6 * math.sin(phi)\n    b = 6 * math.cos(phi)\n    return 0.5 * r * (a + b)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # def inner_rect(r,h):\n    #     # write your code here\n    #     return 0.5*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    b=3\n    p=3*r\n    s=3*(b**2)-4*b*r\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a=2*(r**2)-(r**4)\n    b=3*(r**2)+2*(h**2)\n    c=2*h\n    d=h/2\n    e=r/2\n    f=1/4\n    g=r/2\n    h2=h\n    print('In the main function:')\n    print('Surface area of the cylinder:')\n    print('For the right:')\n    print('a={0:.5f}<^2/2>'.format(a))\n    print('b={0:.5f}<^2>'.format(b))\n    print('c={0:.5f}<^2>'.format(c))\n    print('d={0:.5f}<^2>'.format(d))\n    print('e={0:.5f}<^2>'.format(e))\n    print('f={0:.5f}<^2>'.format(f))\n    print('g={0:.5f}<^2>'.format(g))\n    print('h2={0:.5f}<^2/2>'.format(h2))\n    print('f^2={0:.5f}<^2>'.format(f**2))\n    print('g^2={0:.5f}<^2>'.format(g**2))\n    print('h2^2={0:.5f}<^2/2>'.format(h2**2))\n    print('For the left:')\n    print('a={0:.5f}<^2/2>'.format(a))\n    print('b={0:.5f}<^2>'.format(b))\n    print('c={0:.5f}<^2>'.format(c))\n    print('d={0:.5f}<^2>'.format(d))\n    print('e={0:.5f}<^2>'.format(e))\n    print('f={0:.5f}<^2>'.format(f))\n    print('g={0:.5f}<^2>'.format(g))\n    print('h2={0:.5f}<^2/2>'.format(h2))\n    print('For the right:')\n    print('a={0:.5f}<^2/2>'.format(a))\n    print('b={0:.5f}<^2>'.format(b))\n    print('c={0:.5f}<^2>'.format(c))\n    print('d={0:.5f}<^2>'.format(d))\n    print('e={0:.5f}<^2>'.format(e))\n    print('f={0:.5f}<^2>'.format(f))\n    print('g={0:.5f}<^2>'.format(g))\n    print('h2={0:.5f}<^2/2>'.format(h2))\n    print('For the left:')\n    print('a={0:.5f}<^2/2>'.format(a))\n    print('b={0:.5f}<^2>'.format(b))\n    print('c={0:.5f}<^2>'.format(c))\n    print('d={0:.5f}<^2>'.format(d))\n    print('e={0:.5f}<^2>'.format(e))\n    print('f={0:.5f}<^2>'.format(f))\n    print('g={0:.5f}<^2>'.format(g))\n    print('h2={0:.5f}<^2/2>'.format(h2))\n    print('For the right:')\n    print('a={0:.5f}<^2/2>'.format(a))\n    print('b={0:.5f}<^2>'.format(b))\n    print('c={0:.5f}<^2>'.format(c))\n    print('d={0:.5f}<^2>'.format(d))\n    print('e={0:.5f}<^2>'.format(e))\n    print('f={0:.5f}<^2>'.format(f))\n    print('g={0:.5f}<^2>'.format(g))\n    print('h2={0:.5f}<^2/2>'.format(h2))\n    print('For the left:')\n    print('a={0:.5f}<^2/2>'.format(a))\n    print('b={0:.5f}<^2>'.format(b))\n    print('c={0:.5f}<^2>'.format(c))\n    print('d={0:.5f}<^2>'.format(d))\n    print('e={0:.5f}<^2>'.format(e))\n    print('f={0:.5f}<^2>'.format(f))\n    print('g={0:.5f}<^2>'.format(g))\n    print('h2={0:.5f}<^2/2>'.format(h2))\n    print('For the right:')\n    print('a={0:.5f}<^2/2>'.format(a))\n    print('b={0:.5f}<^2>'.format(b))\n    print('c={0:.5f}<^2>'.format(c))\n    print('d={0:.5f}<^2>'.format(d))\n    print('e={0:.5f}<^2>'.format(e))\n    print('f={0:.5f}<^2>'.format(f))\n    print('g={0:.5f}<^2>'.format(g))\n    print('h2={0:.5f}<^2/2>'.format(h2))\n    print('For the left:')\n    print('a={0:.5f}<^2/2>'.format(a))\n    print('b={0:.5f}<^2>'.format(b))\n    print('c={0:.5f}<^2>'.format(c))\n    print('d={0:.5f}<^2>'.format(d))\n    print('e={0:.5f}<^2>'.format(e))\n    print('f={0:.5f}<^2>'.format(f))\n    print('g={0:.5f}<^2>'.format(g))\n    print('h2={0:.5f}<^2/2>'.format(h2))\n    print('For the right:')\n    print('a={0:.5f}<^2/2>'.format(a))\n    print('b={0:.5f}<^2>'.format(b))\n    print('c={0:.5f}<^2>'.format(c))\n    print('d={0:.5f}<^2>'.format(d))\n    print('e={0:.5f}<^2>'.format(e))\n    print('f={0:.5f}<^2>'.format(f))\n    print('g={0:.5f}<^2>'.format(g))\n    print('h2={0:.5f}<^2/2>'.format(h2))\n    print('For the left:')\n    print('a={0:.5f}<^2/2>'.format(a))\n    print('b={0:.5f}<^2>'.format(b))\n    print('c={0:.5f}<^2>'.format(c))\n    print('d={0:.5f}<^2>'.format(d))\n    print('e={0:.5f}<^2>'.format(e))\n    print('f={0:.5f}<^2>'.format(f))\n    print('g={0:.5f}<^2>'.format(g))\n    print('h2={0:.5f}<^2/2>'.format(h2))\n    print('For th"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    l = float(l)\n    return (3.141592653589793*l*l)*(l*l)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = ((4/3)*l**3)\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l**3)*(3*l**2)\n    print(f\"Volume of cube is {volume}\")\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 3.14 * l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (4 * l**3)\n    print(volume)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l * l * l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    a = l**3\n    return round(3.14 * a,2)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    def area(l):\n        '''\n        This function returns the area of a cube given its side length.\n        '''\n        def area_of_cube(l):\n            '''\n            This function calculates the area of a cube given its side length.\n            '''\n            return l*l*l\n        return area_of_cube(l)\n    return area(l)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    return pow(l,3)*pow(l,4)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #return\n    #cube = round(l ** 3, 1)\n    cube = l ** 3\n    return cube\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n: \n        n &= n-1\n        count += 1\n    return count\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    num = n\n    while num>0:\n        if num%2==0:\n            num=num//2\n        else:\n            num = num//2+1\n    return num\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n_str = str(n)\n    even_bits = []\n    for i in range(len(n_str)):\n        if int(n_str[i]) % 2 == 0:\n            even_bits.append(1)\n        else:\n            even_bits.append(0)\n    return ''.join(even_bits)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bit_num = n >> 1\n    while bit_num:\n        if bit_num & 1:\n            num_bits[0] = bit_num & 1\n            bit_num >>= 1\n        else:\n            num_bits[0] = bit_num >> 1\n            bit_num >>= 1\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return 2**n-1\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = ''\n    for i in range(n):\n        if i % 2 == 0:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Your code here\n    bin_string = bin(n)\n    even_bits = []\n    for i in bin_string:\n        if i == '1':\n            even_bits.append(i)\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bin_n = bin(n)\n    bin_n = bin_n.replace(\"0b\", \"\")\n    for i in range(len(bin_n)):\n        if bin_n[i] == \"0\":\n            bin_n = bin_n[0:i] + bin_n[i+1:]\n    return int(bin_n, 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n &= (n & 1) << 1\n    n |= (n & 0x1) << 1\n    return n \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0:\n        return\n    else:\n        while n > 0:\n            # n = n >> 1\n            if n % 2 == 0:\n                n = n >> 1\n                # n = n >> 1\n                if n == 0:\n                    return\n            else:\n                # n = n >> 1\n                if n == 0:\n                    return\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #Your code here\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output = {}\n    for item in test_list:\n        output[item[0]] = output.get(item[0], 0) + 1\n    return output\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for element in test_list:\n        if element in d:\n            d[element] += 1\n        else:\n            d[element] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # YOUR CODE HERE\n    test_dict = Counter(test_list)\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts_dictionary = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for i in range(0, len(test_list)):\n        tuple = test_list[i]\n        if tuple[0] not in dictionary.keys():\n            dictionary[tuple[0]] = 1\n        else:\n            dictionary[tuple[0]] += 1\n    return dictionary\n    \n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = Counter(test_list)\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuple = []\n    for x in test_list:\n        unique_tuple.append(x[0])\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for tuple in test_list:\n        occurence_dict[tuple] = occurence_dict.get(tuple,0) + 1\n    return occurence_dict\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # First, check if we have a single string.\n    if len(str) == 1: \n        return 1\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Ex: \n    # \"aabbbaaaa\" -> 6\n    # \"aababbaaa\" -> 3\n    # \"abcddcb\" -> 5\n    \n    count = 0\n    for i in range(1, len(str)):\n        if str[i] == str[i-1]:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    L=len(str)\n    c=0\n    for i in range(L):\n        for j in range(L):\n            if str[i:j+1]==str[i:j+1][::-1] and str[i:j+1]!=str[i:j+1][::-1]:\n                c+=1\n    print(c)\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num_of_substrings = 0\n    for i in range(1, len(str)+1):\n        # for j in range(len(str)-i+1):\n        for j in range(i, len(str)+1):\n            # print(str[j-1:j+i-1])\n            if str[j-1:j+i-1]!= str:\n                num_of_substrings += 1\n    return num_of_substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1,n):\n            if str[i] == str[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(list(filter(lambda x: len(x) > 1, str)))\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num = 0\n    for i in range(len(str)-1):\n        if str[i:i+2] not in str[i:i+2] and str[i+1:i+2] not in str[i+1:i+2] and str[i+2:i+3] not in str[i+2:i+3] and str[i+3:i+4] not in str[i+3:i+4]:\n            num += 1\n    return num\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n    for i in range(len(str)-1):\n        for j in range(i+1, len(str)):\n            if str[i:j+1]!= str[i:j]:\n                counter += 1\n    return counter\n    \nprint(number_of_substrings(\"abc\")) #3\nprint(number_of_substrings(\"abcdefghijklmnopqrstuvwxyz\")) #2\nprint(number_of_substrings(\"abc\")) #3\nprint(number_of_substrings(\"\")) #0\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)-1): \n        j = i + 1\n        while str[i] == str[j] and j < len(str): \n            j += 1\n        if str[i] == str[j] and j < len(str): \n            count += 1\n    return count \n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    cnt = 0\n    for i in range(len(str)-1):\n        if str[i:i+2] == str[i+1:i+3]:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    i = 1\n    numbers = []\n    for x in range(2,m+1,2):\n        while i*x <= m:\n            numbers.append(i*x)\n            i+=1\n    return len(numbers)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return sum(range(m, n)) \n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    for i in range(1,n+1):\n        current = i\n        while current <= m:\n            if (current % 2) == 0:\n                total_number_of_sequences += (current - 1)\n                current += 2\n            else:\n                current += 1\n    return total_number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import math\n    total = 0\n    for i in range(m,n+1):\n        count = 0\n        for j in range(1,i+1):\n            if j >= i:\n                break\n            elif i%j == 0:\n                count += 1\n        total += count\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    a = 0\n    for i in range(m+1):\n        a += i\n    for j in range(n-1):\n        b = a\n        a = (a*2) % int(100000000)\n        a = (a*a) % int(100000000)\n        b = (b*b) % int(100000000)\n        if b<a:\n            return a\n    return a\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n < m:\n        raise Exception(\"n must be larger than m!\")\n    result = 0\n    for i in range(m,n+1):\n        if i % 2 == 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if(m == 0):\n        return 0\n    if(n == 0):\n        return 0\n    if (m < 0):\n        return 0\n    if(n < 0):\n        return 0\n    if(m < n):\n        return 0\n    \n    return (m+n)**2\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total=0\n    for i in range(1,m+1):\n        if i<m:\n            if i==m:\n                total+=2\n            else:\n                total+=1\n        else:\n            total+=1\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Variables\n    list_of_numbers = [2, 3, 6, 9, 12, 15, 18, 24, 30, 36, 39]\n    total = 0\n    \n    #Looping through list of numbers to find the number of sequences of length n\n    for num in list_of_numbers:\n        if num > m:\n            pass\n        elif num < m:\n            total += 1\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    prev = 0\n    if(m == n):\n        return 1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if list1==[] or list2==[]:\n        return []\n    return [list1[-1]] + replace_list(list1[:-1],list2)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[0],list2[0]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list3 = list2.copy()\n    list3.pop()\n    list3.reverse()\n    list3.append(list1.pop())\n    return list3\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)==0 or len(list2)==0:\n        return list2\n    else:\n        for i in range(len(list2)):\n            list1[i] = list2[i]\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            list1[i] = list2[i]\n    else:\n        print(\"Error: The lists don't have the same length.\")\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    new_list.append(list2[-1])\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #HINT: Try finding the length of the lists.\n    \n    #Write your code here\n    list1.pop()\n    list2.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list1.append(list2[0])\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    list1.append(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    result = list1.copy()\n    result[len(result)-1] = list2[len(list2)-1]\n    return result\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return(len(str1))\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count_char = 0\n    for i in str1:\n        if i == \" \":\n            count_char += 1\n    return count_char\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # this function counts the number of 'a' in a string\n    count = 0\n    for char in str1:\n        if char == 'a':\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c = 0\n    for char in str1:\n        c += 1\n    return c\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c = 0\n    for i in str1:\n        if i == 'a':\n            c += 1\n    return c\n    \n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # Total character count\n    charac = 0\n    \n    # Iterate over string\n    for char in str1:\n        # Count character\n        charac += 1\n    \n    # Return\n    return charac\n    \n    "
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(0,len(str1)):\n        if str1[i] =='':\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char =='':\n            count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N<=1: \n        return 1\n    if N%2==0: \n        return next_Perfect_Square(N//2) + 1\n    else: \n        l=0\n        r=N-1\n        while l<=r: \n            mid = l+r//2\n            if mid**2<=N: \n                return mid\n            elif mid**2>N: \n                r-=1\n            else: \n                l+=1\n        return l\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square = int(math.sqrt(N))\n    return square * square\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    '''\n    This function is recursive.\n    '''\n    if N < 2:\n        return N\n    elif N == 2:\n        return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    res=[]\n    while N>=0:\n        if N%2==1:\n            res.append(N//2)\n            N=N//2\n        else:\n            N=3*N+1\n    res.reverse()\n    return res\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    l = 0\n    r = N-1\n    if (N%2 == 0):\n        while (l <= r):\n            mid = math.floor((l+r)/2)\n            if mid*mid == N:\n                return mid\n            elif mid*mid < N:\n                l = mid+1\n            else:\n                r = mid-1\n    else:\n        while (l <= r):\n            mid = (l+r)//2\n            if mid*mid == N:\n                return mid\n            elif mid*mid < N:\n                l = mid+1\n            else:\n                r = mid-1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    Square_Total = 1\n    Square_Total_Squared = 1\n    Square_Total_Squared_1 = 1\n    Square_Total_Squared_2 = 1\n    Square_Total_Squared_3 = 1\n    for square in range(1, N):\n        Square_Total_Squared = square ** 2\n        Square_Total_Squared_1 = Square_Total_Squared\n        Square_Total_Squared_2 = Square_Total_Squared + Square_Total_Squared_1\n        Square_Total_Squared_3 = Square_Total_Squared + Square_Total_Squared_2\n        if Square_Total_Squared > N:\n            break\n        Square_Total = Square_Total_Squared_3\n    \n    if Square_Total > N:\n        return Square_Total\n    else:\n        return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1,N):\n        if (N%i==0):\n            if(N==i**2):\n                return i\n    return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    P = 1\n    while(math.sqrt(P)!= math.sqrt(N)): \n        P = P + 1\n    return P\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 2:\n        return N\n    #find the mid\n    mid = N // 2\n    #check if the middle is in the right half\n    if N % 2 == 0:\n        #if the middle is a perfect square, return that.\n        if (mid + 1) * (mid + 1) == N:\n            return mid + 1\n        #if the middle isn't a perfect square, return the next perfect square.\n        elif (mid + 1) * (mid + 1) < N:\n            return mid + 1\n    #check if the middle is in the left half\n    if N % 2 == 1:\n        #if the middle is a perfect square, return that.\n        if (mid - 1) * (mid - 1) == N:\n            return mid - 1\n        #if the middle isn't a perfect square, return the next perfect square.\n        elif (mid - 1) * (mid - 1) < N:\n            return mid - 1\n        #if the middle isn't in the right half, return the next perfect square.\n        else:\n            return mid + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # write your code here\n    if N < 2:\n        return N\n    return (math.sqrt(N) + 1)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0: \n        return 0\n    dp = [[0 for j in range(n)] for i in range(n)] \n    # base case \n    dp[0][0] = arr[0] \n    for i in range(1, n): \n        dp[i][0] = dp[i - 1][0] + arr[i]\n    for i in range(1, n - 1): \n        dp[i][i] = max(arr[i], arr[i - 1] + dp[i + 1][i - 1]) \n    # dp[i][n] is the maximum sum of the i'th bitonic subsequence \n    return dp[n - 1][n - 1]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if arr == None or len(arr) == 0: \n        return 0\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] > 0: \n            res += arr[i] \n        else: \n            res -= arr[i]\n    return res\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    s = 0 \n    max_sum = 0\n    \n    def get_sum(nums):\n        global s\n        s = sum(nums)\n        return s \n        \n    def max_subsequence(arr):\n        max_sum = 0 \n        \n        for i in range(len(arr)):\n            s = get_sum(arr) - arr[i]\n            if s > max_sum:\n                max_sum = s\n        return max_sum \n    \n    \n    max_sum = max_subsequence(arr)\n    \n    return max_sum\n    \nprint(max_sum([-2, 1, -3, 0, -2]))\nprint(max_sum([5, 5, 5, 1, -1, 5, -5])"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sub = arr[:]\n    for i in range(1,len(arr)):\n        if arr[i] > arr[i-1]:\n            sub[i] = arr[i-1]\n        else:\n            sub[i] = arr[i]\n        if arr[i-1] >= arr[i-2]:\n            sub[i] += arr[i-2]\n    return max(sub"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum_arr = 0\n    current_sum = 0\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            current_sum = current_sum + arr[i + 1]\n        else:\n            current_sum = current_sum + arr[i]\n        sum_arr = max(sum_arr, current_sum)\n    return sum_arr\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def is_bitonic(arr, l, m):\n        \"\"\"\n        Brute Force algorithm for finding the bitonic subsequence of arr\n        \"\"\"\n        if l == m:\n            return True\n        elif arr[l] < arr[m]:\n            return is_bitonic(arr, l + 1, m) or is_bitonic(arr, l + 1, m - 1)\n        else:\n            return is_bitonic(arr, l, m - 1)\n    return max(arr) - min(arr) if is_bitonic(arr, 0, len(arr) - 1) else -1\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1: \n        return arr[0] \n    elif arr[0] < arr[1]: \n        return arr[0] \n    else: \n        return arr[1] + max_sum(arr[1:]) \n        \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    m = 0\n    for i in range(n):\n        if arr[i] > m:\n            m = arr[i]\n            m_index = i\n    return max(arr[m_index:]) + m\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i = 0\n    sum = 0\n    temp = 0\n    while i < len(arr):\n        if arr[i] > arr[i + 1]:\n            sum += arr[i]\n        else:\n            sum += arr[i + 1]\n        if sum > temp:\n            temp = sum\n        i += 1\n    return temp\n    \narr = [1, 5, 3, 4, 6, 7, 9, 10, 15, 20, 25, 30]\nprint(max_sum(arr))"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_val = arr[0]\n    max_slice = arr[1:]\n    for i in range(len(arr)):\n        if max_val == arr[i] or arr[i] > max_val:\n            max_val = arr[i]\n        if max_slice[i] < max_val:\n            max_slice[i] = max_val\n    return max_val\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    assert type(number) == int\n    assert number >= 0\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqr = 0\n    for x in range(1,number):\n        if number % x == 0:\n            sqr += 1\n    return sqr\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    ans = 0\n    while number!= 0:\n        ans = ans + 1\n        number = (number - ans) / 2\n    return ans\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    babylonian_squareroot_list = []\n    \n    for i in range(1, number):\n        if (number % i == 0):\n            babylonian_squareroot_list.append(i)\n    \n    return babylonian_squareroot_list\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return pow(number, 1/2)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    i = 2\n    while i <= abs(number):\n        if number < 0:\n            number = -number\n        elif number == 0:\n            return number\n        elif number > 0:\n            i += 1\n            sqrt = number**0.5\n            x = int(sqrt)\n            print(x)\n        else:\n            return -1\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = 1\n    while squareroot <= number:\n        if squareroot % 2 == 0:\n            squareroot *= 2\n        else:\n            squareroot *= 3\n    return squareroot\n    \ndef fibonacci(number):\n    '''\n    Write a function that returns the value of the n-th Fibonacci number.\n    '''\n    if number == 0 or number == 1:\n        return 1\n    \n    return fibonacci(number-1) + fibonacci(number-2)\n    \ndef power(number, base):\n    '''\n    Write a function to compute the value of a number raised to the power base.\n    '''\n    if base == 0 or base == 1:\n        return 1\n    \n    return number * power(number, base-1)\n    \ndef prime(number):\n    '''\n    Write a function that returns True if a number is a prime number, otherwise returns False.\n    '''\n    if number <= 1:\n        return False\n    elif number <= 3:\n        return True\n    else:\n        for i in range(2, number):\n            if number % i == 0:\n                return False\n        return True\n    \ndef is_prime(number):\n    '''\n    Write a function that returns True if a number is a prime number, otherwise returns False.\n    '''\n    if number <= 1:\n        return False\n    elif number <= 3:\n        return True\n    else:\n        for i in range(2, number):\n            if number % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise Exception(\"The input must be non negative\")\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square = number\n    if number == 0:\n        return square\n    elif number < 0:\n        return \"negative\"\n    elif square % 2 == 0:\n        return \"even\"\n    elif square % 2 == 1:\n        return \"odd\"\n    else:\n        return \"babylonian_squareroot\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 2\n    while (x * x <= number):\n        if number % x == 0:\n            y = x\n        x += 1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1: \n        return len(str)\n    lps = [1]*len(str)\n    lps[0], lps[1] = 0, 0\n    for i in range(2, len(str)): \n        lps[i] = max(lps[i-1], lps[i-2] + 1) \n    return max(lps)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps(s):\n        ans=''\n        for i in range(len(s)):\n            if s[i]!=s[-1-i]:\n                ans+=s[i]\n                if s[i]==s[-1-i]:\n                    ans+='*'\n            else:\n                ans+=s[-1-i]\n        return ans\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    c=0\n    n=len(str)\n    \n    for i in range(n):\n        if str[i]==str[n-i-1]:\n            c+=1\n        else:\n            break\n    \n    return c\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    subs = []\n    dic = {}\n    \n    for i in range(0,len(str)):\n        # The first \"-\" will be taken as the sequence\n        dic[str[i]] = i\n        # The second \"-\" will be taken as the sequence\n        subs.append(str[i+1:])\n    \n    for i in range(0,len(str)):\n        # Initialize the first subsequence\n        # The second subsequence will be taken as a prefix\n        if i + 1 == len(str):\n            # The last subsequence will be taken as a suffix\n            subs.append([])\n            continue\n        # The second subsequence will be taken as a prefix\n        subs[i+1].append(str[i])\n        # The last subsequence will be taken as a suffix\n        subs[i].append(str[i+1:])\n        \n    # Initialize the output\n    lps = \"\"\n    \n    # Generate the subsequences\n    for i in range(1,len(subs)):\n        for j in range(0,len(subs[i])):\n            d = subs[i][j]\n            # The length of the subsequence\n            if d not in dic:\n                break\n            if d not in lps:\n                lps += d\n            dic[d] = i\n            for k in range(0,len(dic)):\n                if dic[d] == i:\n                    break\n                elif dic[d]!= i:\n                    # The last sequence is not the subsequence\n                    break\n                if k!= len(dic) - 1:\n                    # The next subsequence is the same as the previous subsequence\n                    lps += str[dic[d]] + str[i]\n                    dic[d] += 1\n        lps += str[dic[d]]\n        dic[d] += 1\n    \n    return len(lps)"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Time: O(n^2) -> n = length of string\n    # Space: O(n^2) -> n = length of string\n    # Array: O(n^2) -> n = length of string\n    # Max: n = length of string\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return len(str)\n    \n    str = str.replace(' ', '').lower()\n    pal = {}\n    pal[0] = ''\n    \n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[i] == str[j] and str[i] not in pal:\n                pal[str[i]] = str[j] + str[i]\n            else:\n                break\n    \n    pal[str[0]] = str[0] + str[-1]\n    for i in range(1, len(str)-1):\n        pal[str[i]] = pal[str[i-1]] + pal[str[i]]\n    \n    ans = 0\n    for k in pal.values():\n        if len(k) > ans:\n            ans = len(k)\n    return ans\n    \ndef minCharLen(str):\n    '''\n    Write a function to find the minimum length of a string.\n    '''\n    if len(str) < 2:\n        return len(str)\n    \n    str = str.replace(' ', '').lower()\n    lps = lps(str)\n    if lps == 0:\n        return len(str)\n    if lps == 1:\n        return 1\n    if lps == 2:\n        return 2\n    \n    return lps\n    \ndef run():\n    '''\n    Write a function that reads a string and checks if it is a palindrome,\n    and returns the minimum length of a palindrome if such is not possible.\n    '''\n    str = input('Enter a string: ')\n    if len(str) < 2:\n        print('Your string is not palindrome')\n        return\n    print(str)\n    ans = minCharLen(str)\n    if ans == 0:\n        print('Your string is not palindrome')\n        return\n    print(ans)\n    \n    \nif __name__ == \"__main__\":\n    run("
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    palindrome = []\n    i = 0\n    j = 0\n    while i < n:\n        palindrome.append(str[i])\n        i += 1\n        while j < n and str[j] == str[j-1]:\n            j += 1\n        if j == n:\n            palindrome.append('.')\n        else:\n            palindrome.append('#')\n    return len(palindrome)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2: \n        return len(str)\n    if str == str[::-1]: \n        return 0\n    i = 0\n    j = len(str) - 1\n    count = 1\n    while i < j: \n        if str[i] == str[j]: \n            count += 1\n            i += 1\n            j -= 1\n        else: \n            if count > 1: \n                count += 1\n            if count > 2: \n                j -= 1\n            else: \n                i += 1\n    return j - i\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # If the string is empty/only contains single characters\n    if not str:\n        return 0\n    # If there are only 2 characters\n    elif len(str) == 1:\n        return 1\n    # If there are 3 or more characters\n    elif len(str) > 1:\n        first = int(str[0])\n        second = int(str[1])\n        last = int(str[-1])\n        \n        # Base cases\n        if first == second == last:\n            return 1\n        \n        # If the first character is not same as the second\n        if first > second:\n            return 0\n        \n        # if the second character is not same as the last\n        if second > last:\n            return 0\n        \n        # If there is a pair of characters\n        return 1 + lps(str[1:]) + lps(str[:-1])\n    # If the string is all same\n    else:\n        return 1\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += (i - 1) / (i + 1)\n        i += 1\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 1 + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if(n==0):\n        return 0\n    if(n==1):\n        return 1\n    else:\n        return (n*harmonic_sum(n-1))/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n / (1 + n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for x in range(n):\n        harmonic_sum += x**2\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def harmonic_sum_loop(n):\n        # I'm using a closure here\n        def harmonic_sum_closure(n):\n            return n * n + (n - 1) * harmonic_sum_closure(n - 1)\n        return harmonic_sum_closure(n)\n    # Use the closure to calculate the harmonic sum\n    return harmonic_sum_loop(n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Your code goes here\n    def func(x):\n        return n*(x/n)\n    return func\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = []\n    \n    for i in array_nums1:\n        if i in array_nums2:\n            intersection_array.append(i)\n    \n    return intersection_array\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    print(\"Intersection of {} and {} is: {}\".format(len(array_nums1),len(array_nums2),(set(array_nums1).intersection(set(array_nums2))))\n    print(\"\\n\")\n    return (set(array_nums1).intersection(set(array_nums2)))\n    \nprint(intersection_array([1,2,3,5,6], [3,5,7,9,10]))\nprint(intersection_array([1,2,3,5,6], [3,5,7,9,10], [6,7,8,1,2]))\nprint(intersection_array([1,2,3,5,6], [3,5,7,9,10], [6,7,8,1,2], [1,3,5,7,9,11]))\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1_length = len(array_nums1)\n    array2_length = len(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    new_array = []\n    for i in array_nums1:\n        for j in array_nums2:\n            if i==j:\n                new_array.append(i)\n    return new_array\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    '''\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i] == array_nums2[j]:\n                print(array_nums1[i], array_nums1[i], array_nums1[i], array_nums2[j], array_nums2[j])\n                print(array_nums1[i], array_nums2[j], array_nums1[i], array_nums2[j], array_nums2[j], array_nums2[j])\n                return array_nums2[j]\n    '''\n    if len(array_nums1)!= len(array_nums2):\n        return \"Intersection does not exist\"\n    intersection_array = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection_array.append(array_nums1[i])\n    return intersection_array"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    my_dict={}\n    for i in array_nums1:\n        my_dict[i]=array_nums1.count(i)\n    for i in array_nums2:\n        my_dict[i]=array_nums2.count(i)\n    intersection_list=list(my_dict.keys())\n    return intersection_list\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect = []\n    for a in array_nums1:\n        for b in array_nums2:\n            if a == b:\n                intersect.append(a)\n    return intersect\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    l1=len(array_nums1)\n    l2=len(array_nums2)\n    #If both lists are equal\n    if l1==l2:\n        #search through both lists\n        for i in range(l1):\n            for j in range(l2):\n                #if the element is in the first list, return the first element\n                if array_nums1[i] in array_nums2:\n                    return array_nums1[i]\n                #If the element is not in the first list, return the second element\n                elif array_nums2[j] in array_nums1:\n                    return array_nums2[j]\n    #If both lists are not equal\n    else:\n        print(\"error\")\n        exit()"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect = []\n    array_list = list(set(array_nums1).intersection(set(array_nums2)))\n    for i in array_list:\n        if array_nums1.count(i)>array_nums2.count(i):\n            intersect.append(i)\n    return intersect\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    intersection=[]\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1==num2:\n                intersection.append(num1)\n    return intersection\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    lst = [0,0,0]\n    \n    for i in range(len(tup)):\n        if tup[i] == x:\n            lst[tup[i]] += 1\n    \n    return lst\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    num = 0\n    for i in tup:\n        if i == x:\n            num += 1\n    return num \n    \ndef count_X_lists(tup,x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    num = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            num += 1\n    return num\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c=0\n    for i in tup:\n        if i==x:\n            c+=1\n    return c\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if x == i: \n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    ans = 0\n    for n in tup:\n        if x == n:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not list:\n        return []\n    elif len(list) == 1:\n        return [element] + list\n    elif len(list) == 2:\n        return [element] + list + [element]\n    elif len(list) == 3:\n        return [element] + list + [element] + list\n    elif len(list) == 4:\n        return [element] + list + [element] + list + [element]\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    l=[]\n    for i in list:\n        l.append(i)\n    for i in element:\n        l.insert(element.index(i),i)\n    return l\n    \ndef count_elements(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the number of times the element occurs in the list.\n    '''\n    return list.count(element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i=0\n    j=0\n    while i<len(list):\n        while j<len(list):\n            if list[i]==element:\n                list.insert(i,element)\n                break\n            else:\n                j=j+1\n        i=i+1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in list:\n        if element < i:\n            result.append(i)\n            result.append(element)\n            element = element - 1\n        else:\n            result.append(i)\n            element = element + 1\n            \n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.insert(0,i)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    return_list = []\n    \n    for index, value in enumerate(list):\n        if element is value:\n            return_list.append(index)\n    \n    return return_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if type(list) == list:\n        new_list = []\n        for element in list:\n            new_list.append(element)\n        return new_list\n    else:\n        raise TypeError(\"The input argument 'list' must be a list.\")\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    copy_list = list.copy()\n    copy_list.insert(0,element)\n    return copy_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    newlist = []\n    for item in list:\n        if item!= None:\n            newlist.append(item)\n        else:\n            newlist.append(element)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def to_polar(x, y):\n        '''\n        Returns the value of the angle between the x and y vectors.\n        '''\n        if x == 0 and y == 0:\n            return 0\n        angle = cmath.phase(x * y)\n        return angle\n    \n    if numbers == 0:\n        return 0\n    else:\n        return sum(map(to_polar, numbers.real, numbers.imag))\n    \ndef main():\n    '''\n    Write a python function to compute the values of the fator of 2D and 3D\n    numbers by using three nested loops.\n    '''\n    print(\"Enter the x component of the first line in the form of the \"\n          \"integer number as a string: \")\n    x = int(input())\n    print(\"Enter the y component of the first line in the form of the \"\n          \"integer number as a string: \")\n    y = int(input())\n    print(\"Enter the z component of the first line in the form of the \"\n          \"integer number as a string: \")\n    z = int(input())\n    print(\"Enter the x component of the second line in the form of the \"\n          \"integer number as a string: \")\n    x2 = int(input())\n    print(\"Enter the y component of the second line in the form of the \"\n          \"integer number as a string: \")\n    y2 = int(input())\n    print(\"Enter the z component of the second line in the form of the \"\n          \"integer number as a string: \")\n    z2 = int(input())\n    print(\"Enter the x component of the third line in the form of the \"\n          \"integer number as a string: \")\n    x3 = int(input())\n    print(\"Enter the y component of the third line in the form of the \"\n          \"integer number as a string: \")\n    y3 = int(input())\n    print(\"Enter the z component of the third line in the form of the \"\n          \"integer number as a string: \")\n    z3 = int(input())\n    \n    \n    print(\"The fator of the first line: \")\n    print(f\"{convert(x)}i * {convert(y)}i * {convert(z)}i\")\n    print(\"The fator of the second line: \")\n    print(f\"{convert(x2)}i * {convert(y2)}i * {convert(z2)}i\")\n    print(\"The fator of the third line: \")\n    print(f\"{convert(x3)}i * {convert(y3)}i * {convert(z3)}i\")\n    \n    print(\"\\nEnter the values of the x, y, and z components in form of \"\n          \"an integer: \")\n    print(\"(1, 1, 1) = x = \" + str(x) + \", \" + \" (2, 2, 2) = y = \" + str(y) + \", \" + \" (3, 3, 3) = z = \" + str(z) + \"\")\n    \n    x = x / 3\n    y = y / 3\n    z = z / 3\n    \n    print(\"The x component of the second line is: \" + str(x))\n    print(\"The y component of the second line is: \" + str(y))\n    print(\"The z component of the second line is: \" + str(z))\n    \n    x2 = x2 / 3\n    y2 = y2 / 3\n    z2 = z2 / 3\n    \n    print(\"The x component of the third line is: \" + str(x2))\n    print(\"The y component of the third line is: \" + str(y2))\n    print(\"The z component of the third line is: \" + str(z2))\n    \n    x3 = x3 / 3\n    y3 = y3 / 3\n    z3 = z3 / 3\n    \n    print(\"The x component of the fourth line is: \" + str(x3))\n    print(\"The y component of the fourth line is: \" + str(y3))\n    print(\"The z component of the fourth line is: \" + str(z3))\n    \n    \n    print(\"\\nThe values of the first two lines of the 3D numbers are \"\n          \"the values of the fator of the first line, and the values of \"\n          \"the fator of the second line: \")\n    print(\"{} * {}, {} * {} = {}i\".format(x, y, z, x2, y2) + \", \" + \" {} * {} = {}i\".format(x2, y2, z2) + \", \" + \" {} * {} = {}i\".format(x2, y2, z2))\n    \n    print(\"The values of the first two lines of the 3D numbers are \"\n          \"the values of the fator of the first line, and the values of \"\n          \"the fator of the second line: \")\n    print(\"{} * {}, {} * {} = {}i\".format(x, y, z, x3, y3) + \", \" + \" {} * {} = {}i\".format(x3, y3, z3) + \", \" + \" {} * {} = {}i\".format(x3, y3, z3))\n    \n    print(\"The values of the first two lines of the 3D numbers are \"\n          \"the values of the fator of the first line, and the values of \"\n          \"the fator of the second line: \")\n    print(\"{} * {}, {} * {} = {}i\".format(x, y, z, x2, y2) + \", \" + \" {} * {} = {}i\".format(x2, y2, z2) + \", \" + \" {} * {} = {}i\".format(x2, y2, z2))\n    \n    print(\"The values of the first two lines of the 3D numbers are \"\n          \"the values of the fator of the first line, and the values of \"\n          \"the fator of the second line: \")\n    print(\"{} * {}, {} * {} = {}i\".format(x, y, z, x3, y3) + \", \" + \" {} * {} = {}i\".format(x3, y3, z3) + \", \" + \" {} * {} = {}i\".format(x3, y3, z3))\n    \n    print(\"The values of the first two lines of the 3D numbers are \"\n          \"the values of the fator of the first line, and the values of \"\n          \"the fator of the second line: \")\n    print(\"{} * {}, {} * {} = {}i\".format(x, y, z, x2, y2) + \", \" + \" {} * {} = {}i\".format(x2, y2, z2) + \", \" + \" {} * {} = {}i\".format(x2, y2, z2))\n    \n    print(\"The values of the first two lines of the 3D numbers are \"\n          \"the values of the fator of the first line, and the values of \"\n          \"the fator of the second line: \")\n    print(\"{} * {}, {} * {} = {}i\".format(x, y, z, x3, y3) + \", \" + \" {} * {} = {}i\".format(x3, y3, z3) + \", \" + \" {} * {} = {}i\".format(x3, y3, z3))\n    \n    print(\"The values of the first two lines of the 3D numbers are \"\n          \"the values of the fator of the first line, and the values of \"\n          \"the fator of the second line: \")\n    print(\"{} * {}, {} * {} = {}i\".format(x, y, z, x2, y2) + \", \" + \" {} * {} = {}i\".format(x2, y2, z2) + \", \" + \" {} * {} = {}i\".format(x2, y2, z2))\n    \n    print(\"The values of the first two lines of the 3D numbers are \"\n          \"the values of the fator of the first line, and the values of \"\n          \"the fator of the second line: \")\n    print(\"{} * {}, {} * {} = {}i\".format(x, y, z, x3, y3) + \", \" + \" {} * {} = {}i\".format(x"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c_numbers = []\n    for number in numbers:\n        c_numbers.append(complex(number.real,number.imag))\n    polar_coordinates = []\n    for c in c_numbers:\n        radians = c.real * c.real + c.imag * c.imag\n        polar_coordinates.append(math.sqrt(radians))\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    # I'm going to assume that all numbers are real and positive numbers.\n    # I'll assume that I don't have to worry about the exact nature of numbers.\n    if numbers[0] == 0:\n        r = 0\n    elif numbers[0] == 1:\n        r = -1\n    else:\n        r = numbers[0]\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import math\n    import numpy as np\n    import time\n    \n    for i in numbers:\n        i=str(i)\n        try:\n            float(i)\n            if float(i)==0.0:\n                pass\n            else:\n                f=float(i)\n                w=math.pi/2\n                p=np.array(cmath.polar(f))\n                y=p[0]\n                z=p[1]\n        except:\n            pass\n    return [y,z]"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Check whether there is any input\n    if (numbers is None):\n        print('Sorry, I didn\\'t provide any complex numbers, please try again.')\n        return\n    # Check whether the input is a single number\n    if (len(numbers) == 1):\n        print('Please provide only numbers, you provided:', numbers)\n        return\n    # Check whether the input is in complex form\n    if (not(isinstance(numbers, list))):\n        print('Sorry, please provide only numbers, you provided:', numbers)\n        return\n    # Check whether there is any imaginary number\n    if (len(numbers) == 1):\n        print('Please provide at least two numbers, you provided:', numbers)\n        return\n    # Check whether the number is in real form\n    if (not(isinstance(numbers[0], int))) or (not(isinstance(numbers[1], int))):\n        print('Sorry, please provide only numbers, you provided:', numbers)\n        return\n    # Check whether the input is in complex form\n    if (not(isinstance(numbers[0], complex))) or (not(isinstance(numbers[1], complex))):\n        print('Sorry, please provide only complex numbers, you provided:', numbers)\n        return\n    # Check whether the input is in the range of the input\n    if (numbers[0].real > 0) or (numbers[0].imag < 0) or (numbers[1].real > 0) or (numbers[1].imag < 0):\n        print('Sorry, you must enter numbers in the range of the input, you provided:', numbers)\n        return\n    # Check whether the input is in the range of the input\n    if (numbers[0].imag!= 0) or (numbers[1].imag!= 0):\n        print('Sorry, you must enter numbers in the range of the input, you provided:', numbers)\n        return\n    # If the input is in the range of the complex form\n    if (numbers[0].real!= 0) or (numbers[0].imag!= 0):\n        # Convert the input to the polar form\n        polar_form = list()\n        # Convert the input to the real form\n        real_form = list()\n        # Convert the input to the imaginary form\n        imag_form = list()\n        # For each element in the input, append to the polar form\n        for i in range(len(numbers)):\n            if(isinstance(numbers[i], int)):\n                polar_form.append(cmath.rect(numbers[i], numbers[i].real))\n            elif(isinstance(numbers[i], complex)):\n                real_form.append(cmath.rect(numbers[i], numbers[i].real))\n            elif(isinstance(numbers[i], float)):\n                real_form.append(cmath.rect(numbers[i], numbers[i].real))\n            elif(isinstance(numbers[i], complex)):\n                imag_form.append(cmath.rect(numbers[i], numbers[i].imag))\n        # Convert the polar form to the real form\n        real_form = list(map(lambda x: x.real, polar_form))\n        # Convert the polar form to the imaginary form\n        imag_form = list(map(lambda x: x.imag, polar_form))\n        # The polar form is complete, convert it to the real form\n        real_form = list(map(lambda x: x.real, real_form))\n        # Convert the imaginary form to the real form\n        imag_form = list(map(lambda x: x.imag, imag_form))\n        # Return the results\n        return real_form, imag_form\n    # Otherwise, the input is not in complex form\n    else:\n        print('Sorry, you must enter complex numbers in the range of the input, you provided:', numbers)\n        return\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers) == 2:\n        return (numbers[0]*cmath.pi, numbers[1]*cmath.pi)\n    else:\n        return (numbers[0]*cmath.pi, numbers[1])\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers) == 3:\n        return complex(numbers[0]*cmath.pi, numbers[1]*cmath.pi)\n    elif len(numbers) == 2:\n        return complex(numbers[0]*cmath.pi, numbers[1]*cmath.pi)\n    elif len(numbers) == 1:\n        return complex(numbers[0]*cmath.pi, numbers[0]*cmath.pi)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = 0\n    y = 0\n    z = 0\n    for i in range(0, len(numbers)):\n        x = x + (numbers[i] * cmath.pi)\n        y = y + (numbers[i] * (1/numbers[i]))\n        z = z + (numbers[i] * (1/numbers[i]))\n    return x,y,z\ndef xyz_from_polar_coords(x, y, z):\n    '''\n    Write a python function to convert polar coordinates to\n    complex numbers.\n    '''\n    x = round(x, 7)\n    y = round(y, 7)\n    z = round(z, 7)\n    return x, y, z\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return (cmath.polar(numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = int(numbers.real)\n    y = int(numbers.imag)\n    if x > y:\n        radians = math.atan2(y, x)\n    else:\n        radians = math.atan2(x, y)\n    return radians\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    print(len(list1))\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # your code goes here\n    if len(list1)==0:\n        return 0\n    else:\n        count=0\n        for i in list1:\n            if(i.isdigit()):\n                count+=1\n        return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    sum = 0\n    for i in list1:\n        if isinstance(i, int):\n            sum += 1\n    return sum\n    "
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    summ = 0\n    for i in list1:\n        if type(i) == int:\n            summ += 1\n    return summ\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    int_ele = 0\n    for i in list1:\n        if type(i) is int:\n            int_ele += 1\n    return int_ele\n    #return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    int_list = []\n    for i in list1:\n        if type(i) is int:\n            int_list.append(i)\n    return len(int_list)\n    \n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, n + 1):\n        for j in combinations_with_replacement(l, i):\n            result.append(j)\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) == n:\n        yield l\n    else:\n        for i in combinations_with_replacement(l, n-len(l)):\n            yield i\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(it) for it in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    if len(l) == 1:\n        return [tuple(l)]\n    else:\n        return combinations_colors(l[1:], n-1) + combinations_colors(l[0:1], n-1)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations(l, n))\ndef sum_array(array):\n    '''\n    Write a function that takes in an array (list) and returns the sum of the elements of the array.\n    '''\n    return sum(array)\ndef array_index(array):\n    '''\n    Write a function that takes in an array (list) and returns its index of the element in the array.\n    '''\n    return array.index(array[0])\ndef int_list(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all elements of the array in sorted order.\n    '''\n    return sorted(array)\ndef count_elements(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of elements in the array.\n    '''\n    return len(array)\ndef sort_even_numbers(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with the even numbers in the array sorted in non-decreasing order.\n    '''\n    newarray = sorted(array, key=lambda x: x%2)\n    return newarray\ndef int_list_filter(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all elements of the array in sorted order, except for the first element.\n    '''\n    return sorted(array, key=lambda x: x)\ndef filter_even_numbers(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all elements of the array in sorted order, except for the first element.\n    '''\n    return sorted(array, key=lambda x: x)\ndef sort_negative_numbers(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all elements in sorted order, except for the first element.\n    '''\n    return sorted(array, key=lambda x: -x)\ndef count_elements_filter(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of elements in the array except for the first element.\n    '''\n    return len(array)-1\ndef filter_negative_numbers(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all elements of the array in sorted order, except for the first element.\n    '''\n    return sorted(array, key=lambda x: -x)\ndef count_even_numbers_filter(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of even numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements(array)\ndef count_even_numbers_sort(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of even numbers in the array except for the first element.\n    '''\n    return count_elements(array) - count_even_numbers_filter(array)\ndef count_odd_numbers_sort(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return count_elements(array) - count_even_numbers_filter(array)\ndef count_odd_numbers_filter(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements(array)\ndef count_odd_numbers_filter_2(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array)\ndef count_odd_numbers_filter_3(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array)\ndef count_odd_numbers_filter_4(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array) - count_even_numbers_filter(array)\ndef count_odd_numbers_filter_5(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array) - count_even_numbers_filter(array)\ndef count_odd_numbers_filter_6(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array) - count_even_numbers_filter(array)\ndef count_odd_numbers_filter_7(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array) - count_even_numbers_filter(array) - count_even_numbers_filter_2(array)\ndef count_odd_numbers_filter_8(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array) - count_even_numbers_filter(array)\ndef count_odd_numbers_filter_9(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array) - count_even_numbers_filter(array)\ndef combinations_colors_filter(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all combinations of elements of the array, except for the first element.\n    '''\n    return list(combinations_colors(array, len(array)))\ndef combinations_colors_sort(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all combinations of elements of the array in sorted order.\n    '''\n    return list(combinations_colors(array, len(array)))\ndef combinations_colors_filter_2(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all combinations of elements of the array, except for the first element.\n    '''\n    return list(combinations_colors(array, len(array)))\ndef combinations_colors_sort_2(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all combinations of elements of the array in sorted order.\n    '''\n    return list(combinations_colors(array, len(array)))\ndef combinations_colors_filter_3(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all combinations of elements of the array except for the first element.\n    '''\n    return list(combinations_colors(array, len(array)))\ndef combinations_colors_sort_3(array):\n    '''\n    Write a function that take"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    final_l = []\n    for i in range(n):\n        final_l.append(tuple(l))\n        l.clear()\n    return final_l\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if (n < 0):\n        return [tuple(l)]\n    if (n == 0):\n        return list(l)\n    l = l + [l[i] for i in range(n)]\n    return combinations_colors(l,n-1)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(0, n):\n        result.append((l[i], i))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l.sort()\n    for comb in combinations_with_replacement(l, n):\n        yield tuple(comb)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(0, n+1):\n        for j in combinations_with_replacement(l, i):\n            result.append(tuple(j))\n    return result\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    list_of_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    n_list = []\n    for num in list_of_primes:\n        if num < n:\n            n_list.append(num)\n    return len(n_list)\n    \n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num = 0\n    if n <= 1:\n        num = 1\n    else:\n        for i in range(2, n):\n            for j in range(i, n+1):\n                if i % j == 0:\n                    num += 1\n    return num\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(n):\n        '''\n        A function that takes in a number and returns True if it is a prime number, and False otherwise.\n        '''\n        #import math\n        #if n<2:\n        #    return True\n        #elif n==2:\n        #    return True\n        #else:\n        #    if n%2==0 or n%3==0:\n        #        return False\n        #    else:\n        #        return True\n        \n        def prime(n):\n            '''\n            A function that takes in a number and returns True if it is a prime number, and False otherwise.\n            '''\n            if n==2 or n==3:\n                return True\n            elif n==1 or n==4 or n==6 or n==9:\n                return False\n            else:\n                for i in range(2, int(math.sqrt(n))+1):\n                    if n%i==0:\n                        return False\n                return True\n        \n        if prime(n):\n            return n\n        else:\n            return 'Not a prime number'\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    res = 0\n    for i in range(2,n):\n        if all(num<=i for num in range(2,i)):\n            res += 1\n    return res\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Step 1: Return the number of prime numbers < n.\n    # Step 2: Create a loop that contains the number of prime numbers less than n.\n    # Step 3: Return the number of prime numbers.\n    # Step 4: Add each of the prime numbers in the loop to the total.\n    # Step 5: Return the total.\n    import math\n    return math.factorial(n)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # your code here\n    total = 0\n    for num in range(1, n):\n        if num % 2 == 0:\n            total += 1\n        else:\n            pass\n    return total\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(n+1):\n        for j in range(2,n):\n            if (i % j) == 0:\n                break\n        else:\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count_primes = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count_primes += 1\n    return count_primes\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # YOUR CODE HERE\n    count = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Your code here\n    # use a dictionary to keep track of the prime numbers\n    prime_dic = {}\n    for i in range(2, n+1):\n        # check if the value is prime or not\n        if i in prime_dic:\n            continue\n        # if the value is not prime, check the next value in the list\n        else:\n            # for each value in the list, check if the next value is prime or not\n            # if it is, add the number to the dictionary, otherwise, ignore the value\n            if i % 2 == 0:\n                prime_dic[i] = 0\n            else:\n                prime_dic[i] = 1\n                \n    # output the number of prime numbers\n    # print the number of prime numbers\n    return len(prime_dic)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a == b:\n        return (a,b)\n    elif a > b:\n        return(b,a)\n    elif a < b:\n        return (a,b)\n    else:\n        return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a=int(a)\n    b=int(b)\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    \n    return (b,a)\n    \n    \nprint(swap_numbers(2,3))"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first = a\n    second = b\n    third = b\n    return (second,first)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a=int(a)\n    b=int(b)\n    return (b,a)\n    \ndef get_gcd(a,b):\n    '''\n    Write a function that takes in two numbers and returns the gcd of their respective values.\n    '''\n    \n    # compute the gcd of a and b\n    # return the gcd\n    if b == 0:\n        return a\n    else:\n        return get_gcd(b,a%b)\n        \ndef get_lcm(a,b):\n    '''\n    Write a function that takes in two numbers and returns the lcm of their respective values.\n    '''\n    lcm = a*b\n    return lcm\n    \ndef is_prime(n):\n    '''\n    Determine if a given number is prime or not.\n    '''\n    \n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef prime_factors(n):\n    '''\n    Determine the prime factors of a given number.\n    '''\n    \n    # Prime factors are all numbers between the square root of n.\n    # The square root is a non-positive number.\n    \n    if n==0:\n        return []\n    if n==1:\n        return []\n    \n    if n%2==0:\n        primes=[n]\n        i=3\n    else:\n        primes=[2,3,5,7,9]\n        while i<=n//2:\n            if n%i==0:\n                primes.append(i)\n                i+=4\n            else:\n                i+=2\n    \n    return primes\n    \ndef multiply(a,b):\n    '''\n    Multiply two numbers.\n    '''\n    \n    # You can use int() to convert a string to an int.\n    \n    if isinstance(a,str):\n        a=int(a)\n    if isinstance(b,str):\n        b=int(b)\n        \n    result=0\n    while a>0:\n        result+=a%10\n        a//=10\n    \n    while b>0:\n        result+=b%10\n        b//=10\n    \n    return result\n    \ndef get_next_prime(n):\n    '''\n    Compute the next prime number, return the next prime number.\n    '''\n    \n    for i in range(2,n):\n        if n%i==0:\n            return i\n    \n    # if you get this far, your numbers are prime.\n    return n+1\n    \ndef prime_checker(n):\n    '''\n    Check if a number is prime or not.\n    '''\n    \n    if n<=1:\n        return False\n    \n    # First check if the number is divisible by 2, 3, 5, 7\n    # and is also divisible by both 2 and 3.\n    if n%2==0 or n%3==0 or n%5==0:\n        return False\n    \n    for i in range(4,n):\n        if n%i==0:\n            return False\n    return True\n    \ndef guess_number():\n    '''\n    Let's check the answer given.\n    '''\n    \n    a=int(input(\"Enter a number: \"))\n    b=int(input(\"Enter a number: \"))\n    \n    while(b<a):\n        b=int(input(\"Please enter a number bigger than 0: \"))\n    \n    answer = get_next_prime(b)\n    \n    print(\"The next prime number is\", answer)\n    \n    while(a!=answer):\n        print(\"The number\",a,\"is not a prime number.\")\n        a=answer\n        answer=get_next_prime(a)\n        print(\"The next prime number is\", answer)\n        \ndef main():\n    '''\n    The main function.\n    '''\n    \n    # a=int(input(\"Enter a number: \"))\n    # b=int(input(\"Enter a number: \"))\n    \n    # if a>b:\n    #     print(\"a is greater than b\")\n    # elif a==b:\n    #     print(\"a and b are equal\")\n    # else:\n    #     print(\"a is smaller than b\")\n    #     \n    # print(\"The numbers are:\", a, b)\n    \n    # n=int(input(\"Enter a number: \"))\n    \n    # while n<=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while(n%2!=0):\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%3!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%5!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%7!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%11!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # if is_prime(n):\n    #     print(\"the number is prime.\")\n    # else:\n    #     print(\"the number is not prime.\")\n    \n    # print(\"The numbers are:\", a, b)\n    \n    # n=int(input(\"Enter a number: \"))\n    \n    # while n<=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%2!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%3!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%5!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%7!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%11!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # if is_prime(n):\n    #     print(\"the number is prime.\")\n    # else:\n    #     print(\"the number is not prime.\")\n    \n    # print(\"The numbers are:\", a, b)\n    \n    # n=int(input(\"Enter a number: \"))\n    \n    # while n<=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%2!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%3!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%5!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%7!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%11!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # if is_prime(n):\n    #     print(\"the number is prime.\")\n    # else:\n    #     print(\"the number is not prime.\")\n    \n    # print(\"The numbers are:\", a, b)\n    \n    # n=int(input(\"Enter a number: \"))\n    \n    # while n<=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%2!=0:\n    #     n=int(input(\"Please enter a number bigger than 0: \"))\n    \n    # while n%3!=0:\n    #     "
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a>b:\n        return (b,a)\n    else:\n        return (a,b)\n    \na = 3\nb = 8\nprint(swap_numbers(a,b)"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # YOUR CODE HERE\n    if b > a:\n        a,b = b,a\n    return a,b\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # WRITE YOUR CODE HERE\n    '''\n    Your function must return a tuple that is the maximum value\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    new_tup = (max(test_tup1[0],test_tup2[0]), max(test_tup1[1],test_tup2[1]))\n    return new_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def maximize(ele, arr):\n        if ele[1] > arr[0][1]:\n            return (ele, arr[0][0] + arr[0][1])\n        elif ele[1] < arr[0][1]:\n            return (ele, arr[0][0] - arr[0][1])\n        elif ele[1] == arr[0][1]:\n            return (ele, 0)\n    arr = test_tup1 + test_tup2\n    arr_len = len(arr)\n    i = 0\n    while i < arr_len:\n        ele = maximize(arr[i], arr)\n        if ele[0] == ele[1]:\n            i += 1\n            continue\n        return ele\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check that all elements of the tuple are positive integers\n    for tup in (test_tup1, test_tup2):\n        for tup_i in tup:\n            if not isinstance(tup_i, int):\n                raise TypeError('Invalid type:'+ str(type(tup_i)))\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a1, b1 = test_tup1\n    a2, b2 = test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # max_num = 0\n    # i = 0\n    # while i < len(test_tup1):\n    #     if test_tup1[i] > test_tup2[i]:\n    #         max_num = test_tup1[i]\n    #         break\n    #     i+=1\n    # return max_num\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elem = test_tup1[0]\n    max_ind = 0\n    for ind, x in enumerate(test_tup1):\n        if x > max_elem:\n            max_elem = x\n            max_ind = ind\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_element = test_tup1[0]\n    for element in test_tup1:\n        if element > max_element:\n            max_element = element\n    max_element = test_tup2[0]\n    for element in test_tup2:\n        if element > max_element:\n            max_element = element\n    return max_element\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    return max(tup1, tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # your code here\n    for i in test_tup1:\n        test_tup2.append(i)\n    test_tup2.sort()\n    print(test_tup1)\n    print(test_tup2)\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    if n == 1:\n        return 1\n    while (i <= n):\n        if (n % i == 0):\n            return 0\n        else:\n            i = i + 1\n    return 0\n    \ndef even(l):\n    return len(l) % 2 == 0\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_numbers = []\n    \n    # calculate the values of prime numbers smaller than n\n    for i in range(1, n):\n        if n % i == 0:\n            # if the value of i is divisible by a number less than\n            # n then it must be a prime number\n            prime_numbers.append(i)\n    \n    # if n is a prime number then the function should return it\n    if len(prime_numbers)!= 0:\n        return prime_numbers[n - 1]\n    \n    # if it is a singleton then return it\n    else:\n        return n\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    while (i*i <= n):\n        if (n % i == 0):\n            return False\n        else:\n            i = i + 1\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    num = 1\n    while num < n:\n        if num % 2 == 0:\n            prime = True\n            for i in range(3, num, 2):\n                if prime:\n                    break\n                if num % i == 0:\n                    prime = False\n                    break\n            if prime:\n                return num\n        num += 1\n    return None\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: \n        return 1 \n    elif n % 2 == 1: \n        return 0 \n    else: \n        prime = [] \n        x = 3 \n        while x * x <= n: \n            if n % x == 0: \n                prime.append(x) \n                n = n // x \n            else: \n                x += 2\n        for p in prime: \n            if n % p == 0: \n                return 0 \n        return n + newman_prime(n-1)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        for i in range(3,n,1):\n            if (n%i == 0):\n                return 0\n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==1: \n        return 1 \n    else: \n        return (newman_prime(n-1) + newman_prime(n-2))%10007 \n    \nprint(newman_prime(5)) \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #check if there are multiple prime numbers\n    prime_list = [True for i in range(n+1)]\n    prime_list[0] = False\n    prime_list[1] = False\n    for i in range(2,n+1):\n        if prime_list[i]:\n            for j in range(i+i,n+1,i):\n                prime_list[j]=False\n    #check if there are multiple prime numbers\n    for i in range(3,n+1):\n        if prime_list[i]:\n            for j in range(i+i,n+1,i):\n                prime_list[j]=False\n    return prime_list[n]\n    "
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    list = [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(n+1):\n        if n % list[i] == 0:\n            return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # write your code here\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    else:\n        return (n+newman_prime(n-1))\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), 'Two tuples are not of same length'\n    assert type(test_tup1) == tuple, 'Test is not a tuple'\n    assert type(test_tup2) == tuple, 'Test is not a tuple'\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tup_sum = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in tup_sum:\n            tup_sum.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        if test_tup2[i] not in tup_sum:\n            tup_sum.append(test_tup2[i])\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = 0\n    for i in test_tup1:\n        result += i\n    for j in test_tup2:\n        result -= j\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    return test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1]\n    \ndef main():\n    '''\n    Write a function that uses the division_elements function to produce the average of the given numbers.\n    '''\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        # O(n) time complexity\n        # O(1) space complexity\n        result = test_tup1[0] / test_tup2[0]\n    else:\n        # O(n) time complexity\n        # O(1) space complexity\n        result = test_tup1[1] / test_tup2[1]\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Create empty list for the output\n    divide_list = []\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup = test_tup1 + test_tup2\n    test_tup_arr = list(test_tup)\n    test_tup_arr.sort()\n    test_tup_arr2 = test_tup2.sort()\n    test_tup_arr3 = [elem1 * elem2 for elem1, elem2 in zip(test_tup_arr, test_tup_arr2)]\n    test_tup_arr4 = [elem1 / elem2 for elem1, elem2 in zip(test_tup_arr, test_tup_arr3)]\n    test_tup_arr5 = [elem1 // elem2 for elem1, elem2 in zip(test_tup_arr, test_tup_arr4)]\n    test_tup_arr6 = [elem1 ** elem2 for elem1, elem2 in zip(test_tup_arr, test_tup_arr5)]\n    test_tup_arr7 = [x / y for x, y in zip(test_tup_arr, test_tup_arr6)]\n    return test_tup_arr7\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Add the tuples together to create a new tuple\n    new_tup1 = test_tup1 + test_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def element_wise_division(tup1, tup2):\n        return tup1[0]/tup2[0], tup1[1]/tup2[1]\n    \n    if test_tup1 == test_tup2:\n        return 0\n    else:\n        return element_wise_division(test_tup1, test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def divide_elements(test_tup):\n        # First, get the number of elements\n        test_num_elements = len(test_tup)\n        # Get the list of elements to divide by\n        list_of_elements = []\n        for i in range(0, test_num_elements):\n            list_of_elements.append(test_tup[i][0])\n        # Make the division\n        result = list_of_elements[0] / list_of_elements[1]\n        return result\n    # Return the result of the division\n    return divide_elements\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split_list = []\n    split_part = []\n    temp_part = []\n    temp_list = []\n    temp_list = list1[:L]\n    split_part.append(temp_part)\n    split_list.append(temp_list)\n    for i in range(len(list1) - L):\n        temp_part = list1[i:i + L]\n        split_part.append(temp_part)\n        temp_list = []\n    return split_part\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    count=0\n    answer=[]\n    for i in range(0,len(list1)):\n        if i!=0:\n            if count==L:\n                answer.append(list1[i])\n                count=0\n                answer.append(list1[i])\n                count+=1\n            else:\n                count+=1\n        else:\n            answer.append(list1[i])\n            count+=1\n    return answer\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # remove duplicates\n    list1 = [x for x in list1 if x not in list1[:len(list1)//2]]\n    return list1, list1[:len(list1)//2]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return []\n    elif L == 1:\n        return list1\n    else:\n        return split_two_parts(list1[:L//2], L//2) + split_two_parts(list1[L//2:], L//2)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    def join(a, b):\n        '''\n        Write a function that takes in a list and a number L and returns a tuple of the list that has L parts of it.\n        '''\n        return a + [b]\n    \n    return tuple(map(join, list1, range(L)))\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result_list = []\n    first_part = []\n    second_part = []\n    for element in list1:\n        if element not in first_part:\n            first_part.append(element)\n        else:\n            result_list.append(element)\n            break\n    first_part = len(result_list)\n    for element in list1:\n        if element not in second_part:\n            second_part.append(element)\n        else:\n            result_list.append(element)\n            break\n    return result_list, first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = L\n    list1 = list1[:L]\n    list2 = list1[L:]\n    return list1,list2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #Your code here\n    \n    return list1[:L//2], list1[L//2:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split = []\n    split.append(list1[:L])\n    split.append(list1[L:])\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 4.0:\n        print(\"You are a normal dog.\")\n    elif h_age >= 2.0:\n        print(\"You are a normal cat.\")\n    elif h_age >= 1.0:\n        print(\"You are a normal rat.\")\n    else:\n        print(\"You are a normal zebra.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return (\"ERROR: Invalid age.\")\n    if h_age >= 6:\n        return(\"ERROR: You have a dog.\")\n    else:\n        return(\"ERROR: You don't have a dog.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 365\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return '{:.2f}'.format(h_age*365.25)"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 3:\n        return 'Sorry, you are a normal dog.'\n    elif h_age >= 3 and h_age <= 4:\n        return 'You are a normal cat.'\n    elif h_age >= 5 and h_age <= 6:\n        return 'You are a normal seal.'\n    else:\n        return 'You are a normal seal.'\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = (h_age * 365) + h_age\n    dog_age = dog_age * 24 * 60\n    dog_age = dog_age * 365\n    dog_age = dog_age + h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age*365\n    return age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 365\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 2:\n        return h_age\n    else:\n        return (h_age - 2) * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0 and h_age <= 2:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 2 and h_age <= 4:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 4 and h_age <= 6:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 6 and h_age <= 8:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 8 and h_age <= 10:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 10 and h_age <= 12:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 12 and h_age <= 14:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 14 and h_age <= 16:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 16 and h_age <= 18:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 18 and h_age <= 20:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 20 and h_age <= 22:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 22 and h_age <= 24:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 24 and h_age <= 26:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 26 and h_age <= 28:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 28 and h_age <= 30:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 30 and h_age <= 32:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 32 and h_age <= 34:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 34 and h_age <= 36:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 36 and h_age <= 38:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 38 and h_age <= 40:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 40 and h_age <= 42:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 42 and h_age <= 44:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 44 and h_age <= 46:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 46 and h_age <= 48:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 48 and h_age <= 50:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 50 and h_age <= 52:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 52 and h_age <= 54:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 54 and h_age <= 56:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 56 and h_age <= 58:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 58 and h_age <= 60:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 60 and h_age <= 62:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 62 and h_age <= 64:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 64 and h_age <= 66:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 66 and h_age <= 68:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 68 and h_age <= 70:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 70 and h_age <= 72:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 72 and h_age <= 74:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 74 and h_age <= 76:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 76 and h_age <= 78:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 78 and h_age <= 80:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 80 and h_age <= 82:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 82 and h_age <= 84:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 84 and h_age <= 86:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 86 and h_age <= 88:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 88 and h_age <= 90:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 90 and h_age <= 92:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 92 and h_age <= 94:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 94 and h_age <= 96:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 96 and h_age <= 98:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 98 and h_age <= 100:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 100 and h_age <= 102:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 102 and h_age <= 104:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 104 and h_age <= 106:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 106 and h_age <= 108:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 108 and h_age <= 110:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 110 and h_age <= 112:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 112 and h_age <= 114:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 114 and h_age <= 116:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 116 and h_age <= 118:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 118 and h_age <= 120:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 120 and h_age <= 122:\n        return f\"{h_age} years old is a cat.\"\n    elif h_age >= 122 and h_age <= 124:\n        return f\"{h_age} years old is a dog.\"\n    elif h_age >= 124 and h_age <= 126:\n        return f\"{h_age} years old is a cat."
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # TODO: Return a list of lists\n    # raise NotImplementedError\n    # TODO: Return a list of lists\n    # raise NotImplementedError\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    length = len(S)\n    for i in range(0,length,step):\n        res.append(S[i:i+step])\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0,len(S),step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # First, make an empty list\n    tmp = []\n    # Do for-loop for every nth element\n    for i in range(len(S)):\n        # Add the element of the list to the temporary list\n        tmp.append(S[i])\n        # Decrement n until n is not greater than the length of the original list\n        while n > 0:\n            # Remove the last element of the temporary list\n            tmp.pop()\n            # Add the element of the temporary list to the temporary list\n            tmp.append(S[i])\n            # Decrement n\n            n -= 1\n    # Return the list of lists\n    return tmp\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    i=0\n    # Splitting into n+1 lists\n    L1 = [[]]*n\n    L2 = [[]]*n\n    L3 = [[]]*n\n    L4 = [[]]*n\n    L5 = [[]]*n\n    L6 = [[]]*n\n    L7 = [[]]*n\n    # Loop through every element in S\n    while i < len(S):\n        # Check if its the first element and if it is split and put it in a list\n        if S[i] == S[i-1] and i < len(S):\n            L1[i] = [S[i-1]]\n            i += 1\n        # If it's not split, then split it\n        elif S[i] not in L1[i]:\n            L1[i].append(S[i])\n            L1[i] = [S[i]]\n            i += 1\n        # If it's split and the next item is a part of the list, add it to the list\n        else:\n            L2[i] = L1[i-1].copy()\n            L2[i].append(S[i])\n            L2[i] = [S[i]]\n            i += 1\n        # If it's not split and the next item is a part of the list, add it to the list\n        if S[i] not in L2[i]:\n            L3[i] = L2[i].copy()\n            L3[i].append(S[i])\n            L3[i] = [S[i]]\n            i += 1\n        # If it's split and the next item is a part of the list, add it to the list\n        else:\n            L4[i] = L3[i-1].copy()\n            L4[i].append(S[i])\n            L4[i] = [S[i]]\n            i += 1\n        # If it's split and the next item is a part of the list, add it to the list\n        if S[i] not in L4[i]:\n            L5[i] = L4[i].copy()\n            L5[i].append(S[i])\n            L5[i] = [S[i]]\n            i += 1\n        # If it's not split and the next item is a part of the list, add it to the list\n        else:\n            L6[i] = L5[i-1].copy()\n            L6[i].append(S[i])\n            L6[i] = [S[i]]\n            i += 1\n        # If it's split and the next item is a part of the list, add it to the list\n        if S[i] not in L6[i]:\n            L7[i] = L6[i].copy()\n            L7[i].append(S[i])\n            L7[i] = [S[i]]\n            i += 1\n        # If it's not split and the next item is a part of the list, add it to the list\n        else:\n            L7[i] = L7[i-1].copy()\n            L7[i].append(S[i])\n            L7[i] = [S[i]]\n            i += 1\n    # Return the list of lists\n    return L1, L2, L3, L4, L5, L6, L7\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    output = []\n    if step == 0:\n        for i in range(len(S)):\n            output.append([])\n        return output\n    elif step == 1:\n        for i in range(len(S)):\n            output[i].append(S[i])\n        return output\n    elif step == 2:\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        return output\n    elif step == 3:\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        return output\n    elif step == 4:\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        return output\n    else:\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output[i].append(S[i])\n        for i in range(len(S)):\n            output"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Step 1: create a temporary variable to store the length of the list\n    length = len(S)\n    # Step 2: create a variable to store the nth element of the list\n    n = length // step\n    # Step 3: create a variable to hold the nth element of the last n lists\n    last = length - n * step\n    # Step 4: create a temporary list to hold the elements of the list\n    temp = []\n    # Step 5: loop through the last n elements of the list\n    for i in range(n * step, length, step):\n        # Step 6: append the element to the temporary list\n        temp.append(S[i])\n    # Step 7: return the last elements of the temporary list\n    return temp\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    temp = []\n    n1 = step\n    for i in range(len(S)):\n        temp.append(S[i:i + n1])\n    return temp\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(len(S)):\n        new_list = [S[j] for j in range(i, len(S), step)]\n        split_list.append(new_list)\n    return split_list\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l1 = l // 2\n    l2 = (l1 + l1 - l) // 2\n    l3 = l2 + l2 - l\n    return (3 * l1) * l1 + (3 * l2) * l2 + (l3 * l3) * l3\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Define the variables\n    \n    # Define the function\n    \n    # Start with the shorter sides\n    \n    # If the sides are the same, the area can be approximated\n    \n    # If one side is shorter, that's fine, the area can be approximated\n    \n    # If the sides are different, the area can be approximated\n    \n    # If one side is longer, that's fine, the area can be approximated\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    x = (l*2*math.pi)\n    surface = (4.0*math.pi*r**2)*math.cos(math.radians(x))\n    return surface\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import pi, sqrt, pow\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n    from numpy import pi, exp, sqrt\n    from numpy.linalg import norm\n    from numpy.linalg.linalg import norm\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side = float(l)\n    a = 6*(side**2)\n    b = 3*(side**2)\n    return(a+b)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l / 4 * 4\n    print(\"lateral surface area of the cube is\",s)\n    \ndef lateralsurface_cuboid(l):\n    '''\n    Write a function to find the lateral surface area of a cuboid given its side length.\n    '''\n    s = l / 6 * 6\n    print(\"lateral surface area of the cuboid is\",s)\n    "
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 0.0\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l_surface = (l**3) - l**2\n    return l_surface\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    import math\n    import turtle\n    import time\n    \n    #Calculate surface area\n    base = l**2\n    lateral = 0\n    for i in range(0,3):\n        lateral = lateral + base\n        base = lateral**0.5\n    \n    print(\"Lateral Surface Area:\", lateral)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # CODE HERE\n    sum = 0\n    for i in range(0, n+1):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i**2)\n    return sum\n    "
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = int(n)\n    if n<0:\n        return 'Please enter a positive integer'\n    elif n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n%2==0:\n        return square_Sum(n//2)\n    else:\n        num = 0\n        for i in range(1,n+1):\n            num += square_Sum(i)\n        return num\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0 \n    for i in range(n):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += i\n    return su"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Your code here\n    return n ** 2\n    \n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s = s + pow(i+1, 2)\n    return s\n    "
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 2:\n        return 1\n    return n * square_Sum(n - 1)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    squares = 0\n    for i in range(1, n + 1, 2):\n        squares = squares + i**2\n    return squares\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    if n == 3: \n        return 2\n    if n == 4: \n        return 3\n    if n == 5: \n        return 4\n    if n == 6: \n        return 5\n    if n == 7: \n        return 6\n    if n == 8: \n        return 7\n    if n == 9: \n        return 8\n    if n == 10: \n        return 9\n    if n == 11: \n        return 10\n    if n == 12: \n        return 11\n    if n == 13: \n        return 12\n    if n == 14: \n        return 13\n    if n == 15: \n        return 14\n    if n == 16: \n        return 15\n    if n == 17: \n        return 16\n    if n == 18: \n        return 17\n    if n == 19: \n        return 18\n    if n == 20: \n        return 19\n    if n == 21: \n        return 20\n    if n == 22: \n        return 21\n    if n == 23: \n        return 22\n    if n == 24: \n        return 23\n    if n == 25: \n        return 24\n    if n == 26: \n        return 25\n    if n == 27: \n        return 26\n    if n == 28: \n        return 27\n    if n == 29: \n        return 28\n    if n == 30: \n        return 29\n    if n == 31: \n        return 30\n    if n == 32: \n        return 31\n    if n == 33: \n        return 32\n    if n == 34: \n        return 33\n    if n == 35: \n        return 34\n    if n == 36: \n        return 35\n    if n == 37: \n        return 36\n    if n == 38: \n        return 37\n    if n == 39: \n        return 38\n    if n == 40: \n        return 39\n    if n == 41: \n        return 40\n    if n == 42: \n        return 41\n    if n == 43: \n        return 42\n    if n == 44: \n        return 43\n    if n == 45: \n        return 44\n    if n == 46: \n        return 45\n    if n == 47: \n        return 46\n    if n == 48: \n        return 47\n    if n == 49: \n        return 48\n    if n == 50: \n        return 49\n    if n == 51: \n        return 50\n    if n == 52: \n        return 51\n    if n == 53: \n        return 52\n    if n == 54: \n        return 53\n    if n == 55: \n        return 54\n    if n == 56: \n        return 55\n    if n == 57: \n        return 56\n    if n == 58: \n        return 57\n    if n == 59: \n        return 58\n    if n == 60: \n        return 59\n    if n == 61: \n        return 60\n    if n == 62: \n        return 61\n    if n == 63: \n        return 62\n    if n == 64: \n        return 63\n    if n == 65: \n        return 64\n    if n == 66: \n        return 65\n    if n == 67: \n        return 66\n    if n == 68: \n        return 67\n    if n == 69: \n        return 68\n    if n == 70: \n        return 69\n    if n == 71: \n        return 70\n    if n == 72: \n        return 71\n    if n == 73: \n        return 72\n    if n == 74: \n        return 73\n    if n == 75: \n        return 74\n    if n == 76: \n        return 75\n    if n == 77: \n        return 76\n    if n == 78: \n        return 77\n    if n == 79: \n        return 78\n    if n == 80: \n        return 79\n    if n == 81: \n        return 80\n    if n == 82: \n        return 81\n    if n == 83: \n        return 82\n    if n == 84: \n        return 83\n    if n == 85: \n        return 84\n    if n == 86: \n        return 85\n    if n == 87: \n        return 86\n    if n == 88: \n        return 87\n    if n == 89: \n        return 88\n    if n == 90: \n        return 89\n    if n == 91: \n        return 90\n    if n == 92: \n        return 91\n    if n == 93: \n        return 92\n    if n == 94: \n        return 93\n    if n == 95: \n        return 94\n    if n == 96: \n        return 95\n    if n == 97: \n        return 96\n    if n == 98: \n        return 97\n    if n == 99: \n        return 98\n    if n == 100: \n        return 99\n    if n == 101: \n        return 100\n    if n == 102: \n        return 101\n    if n == 103: \n        return 102\n    if n == 104: \n        return 103\n    if n == 105: \n        return 104\n    if n == 106: \n        return 105\n    if n == 107: \n        return 106\n    if n == 108: \n        return 107\n    if n == 109: \n        return 108\n    if n == 110: \n        return 109\n    if n == 111: \n        return 110\n    if n == 112: \n        return 111\n    if n == 113: \n        return 112\n    if n == 114: \n        return 113\n    if n == 115: \n        return 114\n    if n == 116: \n        return 115\n    if n == 117: \n        return 116\n    if n == 118: \n        return 117\n    if n == 119: \n        return 118\n    if n == 120: \n        return 119\n    if n == 121: \n        return 120\n    if n == 122: \n        return 121\n    if n == 123: \n        return 122\n    if n == 124: \n        return 123\n    if n == 125: \n        return 124\n    if n == 126: \n        return 125\n    if n == 127: \n        return 126\n    if n == 128: \n        return 127\n    if n == 129: \n        return 128\n    if n == 130: \n        return 129\n    if n == 131: \n        return 130\n    if n == 132: \n        return 131\n    if n == 133: \n        return 132\n    if n == 134: \n        return 133\n    if n == 135: \n        return 134\n    if n == 136: \n        return 135\n    if n == 137: \n        return 136\n    if n == 138: \n        return 137\n    if n == 139: \n        return 138\n    if n == 140: \n        return 139\n    if n == 141: \n        return 140\n    if n == 142: \n        return 141\n    if n == 143: \n        return 142\n    if n == 144: \n        return 143\n    if n == 145: \n        return 144\n    if n == 146: \n        return 145\n    if n == 147: \n        return 146\n    if n == 148: \n        return 147\n    if n == 149: \n        return 148\n    if n == 150: \n        return 149\n    if n == 151: \n        return 150\n    if n == 152: \n        return 151\n    if n == 153: \n        return 152\n    if n == 154: \n        return 153\n    if n == 155: \n        return 154\n    if n == 156: \n        return 155\n    if n == 157: \n        return 156\n    if n == 158: \n        return 157\n    if n == 159: \n        return 158\n    if n == 160: \n        return 159\n    if n == 161: \n        return 160\n    if n == 162: \n        return 161\n    if n == 163: \n        return 162\n    if n == 164: \n        return 163\n    if n == 165: \n        return 164\n    if n == 166: \n        return 165\n    if n == 167: \n        return 166\n    if n == 168: \n        return 16"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    import math\n    def is_prime(n):\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    star_num = 1\n    for i in range(n-1):\n        star_num *= 2\n        if is_prime(star_num):\n            break\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n_star = 0\n    while n_star < n: \n        # 1. We can assume that the number n is less than or equal to to 2*n-1 \n        # 2. We can also assume that n-1 is not even. \n        if n % 2 == 0: \n            n_star = n * 3 + 1\n        else: \n            n_star = n * 3 + 2 \n        # 3. Compute the next number\n        n = n / 2\n    return n_star\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 9\n    if n == 6:\n        return 11\n    if n == 7:\n        return 13\n    if n == 8:\n        return 17\n    if n == 9:\n        return 19\n    if n == 10:\n        return 23\n    if n == 11:\n        return 29\n    if n == 12:\n        return 31\n    if n == 13:\n        return 37\n    if n == 14:\n        return 41\n    if n == 15:\n        return 47\n    if n == 16:\n        return 51\n    if n == 17:\n        return 53\n    if n == 18:\n        return 59\n    if n == 19:\n        return 61\n    if n == 20:\n        return 67\n    if n == 21:\n        return 71\n    if n == 22:\n        return 73\n    if n == 23:\n        return 79\n    if n == 24:\n        return 81\n    if n == 25:\n        return 83\n    if n == 26:\n        return 89\n    if n == 27:\n        return 91\n    if n == 28:\n        return 93\n    if n == 29:\n        return 97\n    if n == 30:\n        return 101\n    if n == 31:\n        return 103\n    if n == 32:\n        return 105\n    if n == 33:\n        return 107\n    if n == 34:\n        return 109\n    if n == 35:\n        return 113\n    if n == 36:\n        return 119\n    if n == 37:\n        return 123\n    if n == 38:\n        return 127\n    if n == 39:\n        return 131\n    if n == 40:\n        return 133\n    if n == 41:\n        return 139\n    if n == 42:\n        return 151\n    if n == 43:\n        return 153\n    if n == 44:\n        return 159\n    if n == 45:\n        return 161\n    if n == 46:\n        return 163\n    if n == 47:\n        return 167\n    if n == 48:\n        return 171\n    if n == 49:\n        return 173\n    if n == 50:\n        return 179\n    if n == 51:\n        return 181\n    if n == 52:\n        return 183\n    if n == 53:\n        return 187\n    if n == 54:\n        return 191\n    if n == 55:\n        return 193\n    if n == 56:\n        return 195\n    if n == 57:\n        return 199\n    if n == 58:\n        return 211\n    if n == 59:\n        return 223\n    if n == 60:\n        return 225\n    if n == 61:\n        return 227\n    if n == 62:\n        return 231\n    if n == 63:\n        return 233\n    if n == 64:\n        return 239\n    if n == 65:\n        return 241\n    if n == 66:\n        return 243\n    if n == 67:\n        return 247\n    if n == 68:\n        return 251\n    if n == 69:\n        return 253\n    if n == 70:\n        return 257\n    if n == 71:\n        return 261\n    if n == 72:\n        return 263\n    if n == 73:\n        return 269\n    if n == 74:\n        return 271\n    if n == 75:\n        return 273\n    if n == 76:\n        return 277\n    if n == 77:\n        return 281\n    if n == 78:\n        return 283\n    if n == 79:\n        return 285\n    if n == 80:\n        return 289\n    if n == 81:\n        return 291\n    if n == 82:\n        return 293\n    if n == 83:\n        return 295\n    if n == 84:\n        return 297\n    if n == 85:\n        return 301\n    if n == 86:\n        return 303\n    if n == 87:\n        return 307\n    if n == 88:\n        return 311\n    if n == 89:\n        return 313\n    if n == 90:\n        return 315\n    if n == 91:\n        return 317\n    if n == 92:\n        return 319\n    if n == 93:\n        return 321\n    if n == 94:\n        return 323\n    if n == 95:\n        return 325\n    if n == 96:\n        return 327\n    if n == 97:\n        return 331\n    if n == 98:\n        return 333\n    if n == 99:\n        return 335\n    if n == 100:\n        return 337\n    if n == 101:\n        return 341\n    if n == 102:\n        return 343\n    if n == 103:\n        return 345\n    if n == 104:\n        return 347\n    if n == 105:\n        return 349\n    if n == 106:\n        return 351\n    if n == 107:\n        return 353\n    if n == 108:\n        return 355\n    if n == 109:\n        return 357\n    if n == 110:\n        return 359\n    if n == 111:\n        return 361\n    if n == 112:\n        return 363\n    if n == 113:\n        return 365\n    if n == 114:\n        return 367\n    if n == 115:\n        return 369\n    if n == 116:\n        return 371\n    if n == 117:\n        return 373\n    if n == 118:\n        return 375\n    if n == 119:\n        return 377\n    if n == 120:\n        return 379\n    if n == 121:\n        return 383\n    if n == 122:\n        return 385\n    if n == 123:\n        return 387\n    if n == 124:\n        return 389\n    if n == 125:\n        return 391\n    if n == 126:\n        return 393\n    if n == 127:\n        return 395\n    if n == 128:\n        return 407\n    if n == 129:\n        return 409\n    if n == 130:\n        return 411\n    if n == 131:\n        return 413\n    if n == 132:\n        return 415\n    if n == 133:\n        return 417\n    if n == 134:\n        return 419\n    if n == 135:\n        return 421\n    if n == 136:\n        return 423\n    if n == 137:\n        return 425\n    if n == 138:\n        return 427\n    if n == 139:\n        return 429\n    if n == 140:\n        return 431\n    if n == 141:\n        return 433\n    if n == 142:\n        return 435\n    if n == 143:\n        return 437\n    if n == 144:\n        return 439\n    if n == 145:\n        return 441\n    if n == 146:\n        return 443\n    if n == 147:\n        return 445\n    if n == 148:\n        return 447\n    if n == 149:\n        return 449\n    if n == 150:\n        return 451\n    if n == 151:\n        return 453\n    if n == 152:\n        return 455\n    if n == 153:\n        return 457\n    if n == 154:\n        return 459\n    if n == 155:\n        return 461\n    if n == 156:\n        return 463\n    if n == 157:\n        return 465\n    if n == 158:\n        return 467\n    if n == 159:\n        return 469\n    if n == 160:\n        return 471\n    if n == 161:\n        return 473\n    if n == 162:\n        return 475\n    if n == 163:\n        return 477\n    if n == 164:\n        return 479\n    if n == 165:\n        return 481\n    if n == 166:\n        return 483\n    if n == 167:\n        return 485\n    if n == 168:\n        return 487\n    if n == 169:\n        return 491\n    if n == 170:\n        return 493\n    if n == 171:\n        return 495\n    if n == 172:\n        return 497\n    if n == 173:\n        return 499\n    if n == 174:\n        return 501\n    if n == 175:\n        return 503\n    if n == 176:\n        return 505\n    if n == 177:\n        return 507\n    if n == 178:\n        return 509\n    if n == 179:\n        return 511\n    if n == 180:\n        return 513\n    if n ="
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return 3\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = n\n    while i >= 1:\n        if n % i == 0:\n            return i\n        else:\n            i = i - 1\n    return 0\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    h = 1\n    while(h*h<n): \n        if(n%h==0): \n            break\n        h+=1 \n    return n//h \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = 2\n    while n % star == 0:\n        star += 1\n    return star\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_numbers = [] \n    for i in range(1, n + 1): \n        if n%i == 0: \n            star_numbers.append(i) \n    if len(star_numbers) == 1: \n        return star_numbers[0] \n    else: \n        return star_numbers[-1] + find_star_num(n-1)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) is not str:\n        raise TypeError(\"Type error: ascii_value() expects a string argument\")\n    \n    if k.isalpha():\n        return ord(k) - ord('a')\n    else:\n        return ord(k) - ord('0')\n    \n    \ndef is_number(k):\n    '''\n    Check if a string contains a numeric value.\n    '''\n    if type(k) is not str:\n        raise TypeError(\"Type error: is_number() expects a string argument\")\n    \n    if k.isdigit():\n        return True\n    else:\n        return False\n    \n    \ndef is_alpha(k):\n    '''\n    Check if a string contains any alpha numeric value.\n    '''\n    if type(k) is not str:\n        raise TypeError(\"Type error: is_alpha() expects a string argument\")\n    \n    if k.isalpha():\n        return True\n    else:\n        return False\n    \n    \ndef is_alpha_number(k):\n    '''\n    Check if a string contains a numeric value.\n    '''\n    if type(k) is not str:\n        raise TypeError(\"Type error: is_alpha_number() expects a string argument\")\n    \n    if k.isalpha():\n        return True\n    else:\n        return False\n    \n    \ndef is_special(k):\n    '''\n    Check if a string contains any special value.\n    '''\n    if type(k) is not str:\n        raise TypeError(\"Type error: is_special() expects a string argument\")\n    \n    if k.isalnum():\n        return True\n    else:\n        return False\n    \n    \ndef is_valid(k):\n    '''\n    Check if a string contains a valid value.\n    '''\n    if type(k) is not str:\n        raise TypeError(\"Type error: is_valid() expects a string argument\")\n    \n    if k.isalpha():\n        return True\n    elif k.isalnum():\n        return True\n    elif not k.isspace():\n        return False\n    else:\n        return False\n    \n    \ndef valid_number(k):\n    '''\n    Check if a string contains a valid number.\n    '''\n    if type(k) is not str:\n        raise TypeError(\"Type error: valid_number() expects a string argument\")\n    \n    if not is_alpha_number(k):\n        raise ValueError(\"Invalid character: no alpha numeric value found\")\n    elif not is_number(k):\n        raise ValueError(\"Invalid character: no numeric value found\")\n    elif not k.isalnum():\n        raise ValueError(\"Invalid character: no alphabetic numeric value found\")\n    elif not is_alpha_number(k):\n        raise ValueError(\"Invalid character: no alpha numeric value found\")\n    elif not is_number(k):\n        raise ValueError(\"Invalid character: no numeric value found\")\n    elif not is_alpha_number(k):\n        raise ValueError(\"Invalid character: no alpha numeric value found\")\n    elif not is_special(k):\n        raise ValueError(\"Invalid character: no special value found\")\n    \n    return True\n    \n    \ndef valid_alphabet(k):\n    '''\n    Check if a string contains a valid character sequence.\n    '''\n    if type(k) is not str:\n        raise TypeError(\"Type error: valid_alphabet() expects a string argument\")\n    \n    if not is_alpha(k):\n        raise ValueError(\"Invalid character: no alphabetic value found\")\n    elif not is_alpha_number(k):\n        raise ValueError(\"Invalid character: no alphabetic numeric value found\")\n    elif not is_alpha(k):\n        raise ValueError(\"Invalid character: no alpha numeric value found\")\n    elif not is_number(k):\n        raise ValueError(\"Invalid character: no numeric value found\")\n    elif not is_alpha(k):\n        raise ValueError(\"Invalid character: no alpha numeric value found\")\n    elif not is_special(k):\n        raise ValueError(\"Invalid character: no special value found\")\n    \n    return True\n    \n    \ndef valid_special(k):\n    '''\n    Check if a string contains a valid character sequence.\n    '''\n    if type(k) is not str:\n        raise TypeError(\"Type error: valid_special() expects a string argument\")\n    \n    if not is_special(k):\n        raise ValueError(\"Invalid character: no special value found\")\n    elif not is_special(k):\n        raise ValueError(\"Invalid character: no special value found\")\n    \n    return True\n    \n    \ndef valid_letter(k):\n    '''\n    Check if a string contains a valid character sequence.\n    '''\n    if type(k) is not str:\n        raise TypeError(\"Type error: valid_letter() expects a string argument\")\n    \n    if not is_alpha(k):\n        raise ValueError(\"Invalid character: no alphabetic value found\")\n    elif not is_alpha_number(k):\n        raise ValueError(\"Invalid character: no alphabetic numeric value found\")\n    elif not is_alpha(k):\n        raise ValueError(\"Invalid character: no alpha numeric value found\")\n    elif not is_alpha(k):\n        raise ValueError(\"Invalid character: no alphabetic numeric value found\")\n    elif not is_special(k):\n        raise ValueError(\"Invalid character: no special value found\")\n    elif not is_alpha_number(k):\n        raise ValueError(\"Invalid character: no alphabetic numeric value found\")\n    elif not is_number(k):\n        raise ValueError(\"Invalid character: no numeric value found\")\n    elif not is_special(k):\n        raise ValueError(\"Invalid character: no special value found\")\n    \n    return True\n    \n    \ndef valid_digit(k):\n    '''\n    Check if a string contains a valid character sequence.\n    '''\n    if type(k) is not str:\n        raise TypeError(\"Type error: valid_digit() expects a string argument\")\n    \n    if not is_alpha_number(k):\n        raise ValueError(\"Invalid character: no alphabetic value found\")\n    elif not is_number(k):\n        raise ValueError(\"Invalid character: no numeric value found\")\n    elif not is_alpha_number(k):\n        raise ValueError(\"Invalid character: no alphabetic numeric value found\")\n    elif not is_number(k):\n        raise ValueError(\"Invalid character: no numeric value found\")\n    elif not is_special(k):\n        raise ValueError(\"Invalid character: no special value found\")\n    \n    return True\n    \n    \ndef valid_alphanum(k):\n    '''\n    Check if a string contains a valid character sequence.\n    '''\n    if type(k) is not str:\n        raise TypeError(\"Type error: valid_alphanum() expects a string argument\")\n    \n    if not is_alpha(k):\n        raise ValueError(\"Invalid character: no alphabetic value found\")\n    elif not is_alpha_number(k):\n        raise ValueError(\"Invalid character: no alphabetic numeric value found\")\n    elif not is_number(k):\n        raise ValueError(\"Invalid character: no numeric value found\")\n    elif not is_alpha(k):\n        raise ValueError(\"Invalid character: no alphabetic numeric value found\")\n    elif not is_special(k):\n        raise ValueError(\"Invalid character: no special value found\")\n    \n    return True\n    \n    \ndef valid_letter_number(k):\n    '''\n    Check if a string contains a valid character sequence.\n    '''\n    if type(k) is not str:\n        raise TypeError(\"Type error: valid_letter_number() expects a string argument\")\n    \n    if not is_alpha_number(k):\n        raise ValueError(\"Invalid character: no alphabetic value found\")\n    elif not is_alpha_number(k):\n        raise ValueError(\"Invalid character: no alphabetic numeric value found\")\n    elif not is_alpha_number(k):\n        raise ValueError(\"Invalid character: no alphabetic numeric value found\")\n    elif not is_alpha_number(k):\n        raise ValueError(\"Invalid character: no alphabetic numeric value found\")\n    elif not is_number(k):\n        raise ValueError(\"Invalid character: no numeric value found\""
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return unichr(k).encode('ascii')\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return unichr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k in ascii_chars:\n        return ascii_chars[k]\n    else:\n        return k"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # convert to ascii\n    return int(ord(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return ord(k) + 32\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return int(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        print(hex(k), end = \"\")\n    except TypeError:\n        print(\"Character is not a char\")\n    else:\n        print(\"{:08x}\".format(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for even in arr:\n        if even % 2 == 0:\n            even_index += 1\n            even_sum += even\n    return even_sum, even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    #  Write your code here\n    even_index = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_index.append(i)\n    return even_index[0] + sum(even_index)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = 0\n    even_sum = 0\n    while even_index < len(arr):\n        if arr[even_index] % 2 == 0:\n            even_sum += arr[even_index]\n        else:\n            even_sum += even_sum\n            even_index += 1\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    evens = []\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            evens.append(arr[i])\n    print(evens)\n    return sum(evens)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(0, len(arr)):\n        if i%2 == 0:\n            even_sum = even_sum + arr[i]\n            even_index = even_index + 1\n    return even_sum, even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in arr:\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index=0\n    even_sum=0\n    for i in range(len(arr)):\n        if (arr[i]%2==0):\n            even_index+=1\n            even_sum+=arr[i]\n    return even_sum,even_index\n    "
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n    \n    \narr = [5, 6, 7, 8, 9, 10, 11]\nprint(sum_even_and_even_index(arr))\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    if n <= 0:\n        return 0\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_numbers = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even_numbers += i ** 5\n    return sum_even_numbers\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power = 5\n    answer = 0\n    while (n > 0):\n        answer += n**power\n        n -= 1\n        power += 1\n    return answer\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    #we are adding the start of the function the current number and increase the count of evens by one\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum = sum + (i ** 4)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n < 2: \n        return n * even_Power_Sum(n-1) \n    if n % 2 == 0: \n        return even_Power_Sum(n-1) + even_Power_Sum(n-2) \n    else: \n        return even_Power_Sum(n-1) + even_Power_Sum(n-2) + even_Power_Sum(n-3) \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    l = []\n    for i in range(n,0,-2):\n        if i%2==0:\n            l.append(i**3)\n    return sum(l)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n + 1): \n        sum = sum + (i ** i)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0: \n        return 0\n    elif n < 0: \n        return -1\n    else: \n        power = 1\n        sum = 1\n        while power <= n: \n            if power % 2 == 0: \n                sum += power \n                power *= 2 \n            else: \n                sum += power \n                power *= 2\n        return sum \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    power = 1\n    while power <= n:\n        sum += power ** (power - 1)\n        power += 1\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    #TODO - Write your solution here\n    l = []\n    for x in test_list:\n        l.append(x[1])\n    return l\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    print(test_list)\n    out = []\n    for x in test_list:\n        out.append(x[1])\n    return out\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # TODO: Write your code here\n    rear = []\n    for i in test_list:\n        rear.append(i[0])\n    return rear\n    \n    \ntest_list = [(1, 2), (4, 6), (3, 4), (2, 8), (5, 3), (1, 2)]\nprint(rear_extract(test_list))"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for x in test_list:\n        if len(x) == 3:\n            rear.append(x[2])\n        else:\n            rear.append(x[0])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # create an empty list\n    result = []\n    # iterate over the list\n    for i in range(len(test_list)):\n        # append each tuple to the list\n        result.append(test_list[i][0])\n    # return the list\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    rear_list = []\n    for index, data in enumerate(test_list):\n        if index < len(test_list)-1:\n            rear_list.append(data[1])\n        else:\n            rear_list.append(data[0])\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for element in test_list:\n        rear.append(element[0])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for element in test_list:\n        if element[1] not in rear:\n            rear.append(element[1])\n    return rear\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([i-j for i,j in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    # raise NotImplementedError()\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # DO NOT MODIFY THIS FUNCTION\n    def subtract_elements(test_tup1, test_tup2):\n        '''\n        Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n        '''\n        # DO NOT MODIFY THIS FUNCTION\n        pass\n    pass\n    \n    # BONUS: Now that you've made the function, you can do the following:\n    #\n    #    substract_elements(test_tup1, test_tup2)\n    #\n    #\n    #\n    # NOTE: If you've completed this function, you MUST add the following in the appropriate comments:\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n    test_list1 = []\n    test_list2 = []\n    for x in range(0, test_tup1_len):\n        test_list1.append(test_tup1[x])\n    for x in range(0, test_tup2_len):\n        test_list2.append(test_tup2[x])\n    test_list1.sort()\n    test_list2.sort()\n    test_list1_index = 0\n    test_list2_index = 0\n    index = 0\n    while index < test_tup1_len:\n        test_list1[index] = test_list1[index] - test_list2[test_list2_index]\n        test_list1_index = index\n        index = index + 1\n        test_list2_index = test_list2_index + 1\n    return test_list1\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # read the input data\n    try:\n        first_tuple = tuple(test_tup1)\n        second_tuple = tuple(test_tup2)\n        first_tuple.extend(second_tuple)\n        # remove the tuple from the list\n        first_tuple.remove(second_tuple[0])\n        # remove the first element of the tuple\n        first_tuple.pop(0)\n        # return the tuple\n        return first_tuple\n    except ValueError:\n        raise ValueError(\"Sorry, you did not enter a tuple.\")\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # create a new tuple to store the subtraction elements\n    new_tuple = []\n    \n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        new_tuple.append(test_tup1[i] - test_tup2[i])\n    \n    # return the new tuple\n    return new_tuple\n    "
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples are not the same length\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # write your code here\n    a=tuple(test_tup1)\n    b=tuple(test_tup2)\n    result=[]\n    for i in range(0, len(a)):\n        result.append(a[i]-b[i])\n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    for i in range(0,n):\n        sum = 0\n        for x in range(0, n):\n            sum = sum + (2 ** x) * (-1) ** (n-x-1) * (math.factorial(x) / (math.factorial(n-x) * math.factorial(n-x-1))) * (-1) ** (n-x-1)\n        return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    #Base Case\n    if (n == 1): \n        return 1\n    #Recursive case\n    else:\n        sum = n * even_binomial_Coeff_Sum(n-1)\n        return sum\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(n):\n        sum_even += math.factorial(i) * (math.factorial(i) / math.factorial(i - 2))\n    return sum_even\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += int(str(i) + str(i))*math.factorial(2*i)\n    return sum \n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = coeff[i-1] + coeff[i-2]\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = coeff[i-1] * i\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_3( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = (coeff[i-1]*i*i)\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_4( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = coeff[i-1] * (2*i)\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_5( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = (coeff[i-1]*3*i)\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_6( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = (coeff[i-1]*4*i)\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_7( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = (coeff[i-1]*5*i)\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_8( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = (coeff[i-1]*6*i)\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_9( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = (coeff[i-1]*7*i)\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_10( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = (coeff[i-1]*8*i)\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_11( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = (coeff[i-1]*9*i)\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_12( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = (coeff[i-1]*10*i)\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_13( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = (coeff[i-1]*11*i)\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_14( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [i+1 for i in range(n+1)] #n+1 because we will have the second power for even terms\n    coeff[0] = 0\n    coeff[1] = 0\n    for i in range(2, n+1):\n        coeff[i] = (coeff[i-1]*12*i)\n    return coeff[n]\ndef even_binomial_Coeff_Sum_Power_15( n): \n    '''\n    Write a python function that takes in a positiv"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return (even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2))\n    else:\n        return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #count even binomial coefficients, add it to the return list.\n    even_binomial_Coeffs = []\n    even_binomial_Sum = 0\n    #for i in range(2, n):\n        #even_binomial_Coeff = (((math.factorial(i))**(n/2))/((math.factorial(i-2))**(n/2)))\n        #even_binomial_Coeffs.append(even_binomial_Coeff)\n        #even_binomial_Sum += even_binomial_Coeff * i\n    for i in range(2, n):\n        #even_binomial_Coeff = (((math.factorial(i))**(n/2))/((math.factorial(i-2))**(n/2)))\n        even_binomial_Coeff = (1/(math.factorial(i))) * (((math.factorial(n/2))**(n/2))/((math.factorial(n-2))**(n/2))))\n        even_binomial_Coeffs.append(even_binomial_Coeff)\n        even_binomial_Sum += even_binomial_Coeff * i\n    #return even_binomial_Sum\n    return even_binomial_Coeffs\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0 \n    # loop for every even index binomial coefficient \n    for i in range(0, n+1): \n        coeff_sum = coeff_sum + i*(2**i) \n    return coeff_sum \ndef even_binomial_Coeff_List( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the even index binomial coefficients for a list of positive integers.\n    '''\n    list_even_coeffs = [] \n    # loop for every even index binomial coefficient \n    for i in range(0, n+1): \n        # adding even index binomial coefficient for the i'th number \n        list_even_coeffs.append(i*(2**i)) \n    return list_even_coeffs \ndef even_binomial_Coeff_Sum_List( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients for a list of positive integers.\n    '''\n    # list of even index binomial coefficients \n    list_even_coeffs = even_binomial_Coeff_List(n) \n    sum = 0 \n    # loop for every even index binomial coefficient \n    for i in list_even_coeffs: \n        sum = sum + i \n    return sum \ndef even_binomial_Coeff_List_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients for a list of positive integers.\n    '''\n    # sum of even index binomial coefficients \n    sum = 0 \n    # loop for every even index binomial coefficient \n    for i in range(0, n+1): \n        sum = sum + i \n    return sum \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    coeff_sum = 0 \n    # loop for every odd index binomial coefficient \n    for i in range(0, n+1): \n        coeff_sum = coeff_sum + i*(2**i) \n    return coeff_sum \ndef odd_binomial_Coeff_List( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients for a list of positive integers.\n    '''\n    list_odd_coeffs = [] \n    # loop for every odd index binomial coefficient \n    for i in range(0, n+1): \n        # adding odd index binomial coefficient for the i'th number \n        list_odd_coeffs.append(i*(2**i)) \n    return list_odd_coeffs \ndef odd_binomial_Coeff_Sum_List( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients for a list of positive integers.\n    '''\n    # sum of odd index binomial coefficients \n    sum = 0 \n    # loop for every odd index binomial coefficient \n    for i in range(0, n+1): \n        sum = sum + i \n    return sum \ndef odd_binomial_Coeff_List_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients for a list of positive integers.\n    '''\n    # sum of odd index binomial coefficients \n    sum = 0 \n    # loop for every odd index binomial coefficient \n    for i in range(0, n+1): \n        sum = sum + i \n    return sum \ndef prime_factors(n): \n    '''\n    Write a python function that takes in a positive integer n and finds all prime factors of a positive integer.\n    '''\n    factors = [] \n    # loop for every prime number \n    for i in range(1, int(math.sqrt(n)+1)): \n        # if it is a prime number then append it \n        if n % i == 0: \n            # if it is not a prime number then add it to the list \n            if (i not in factors): \n                factors.append(i) \n    return factors \ndef prime_factors_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all prime factors of a positive integer.\n    '''\n    # sum of prime factors \n    sum = 0 \n    # loop for every prime number \n    for i in range(1, int(math.sqrt(n)+1)): \n        # if it is a prime number then add it to the list \n        if (i not in prime_factors): \n            sum = sum + i \n    return sum \ndef find_euler_totient(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the Euler totient of the nth term.\n    '''\n    # calculate the Euler totient of n \n    euler_totient = 1 \n    # loop for n \n    for i in range(1, n+1): \n        # update the Euler totient \n        euler_totient = (euler_totient * (i)) % n \n    return euler_totient \ndef euler_coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the Euler totient of the nth term.\n    '''\n    # calculate the Euler totient of n \n    euler_totient = 1 \n    # loop for n \n    for i in range(1, n+1): \n        # update the Euler totient \n        euler_totient = (euler_totient * (i)) % n \n    return euler_totient \ndef euler_coeff_List(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the Euler totient of the nth term.\n    '''\n    # sum of euler totient \n    euler_totient = 1 \n    # loop for n \n    for i in range(1, n+1): \n        # update the Euler totient \n        euler_totient = (euler_totient * (i)) % n \n    return euler_totient \ndef euler_coeff_List_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the Euler totient of the nth term.\n    '''\n    # sum of euler totient \n    euler_totient = 1 \n    # loop for n \n    for i in range(1, n+1): \n        # update the Euler totient \n        euler_totient = (euler_totient * (i)) % n \n    return euler_totient \ndef euler_coeff_List_Sum_List(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the Euler totient of the nth term.\n    '''\n    # sum of euler totient \n    euler_totient = 1 \n    # loop for n \n    for i in range(1, n+1): \n        # update the Euler totient \n        euler_totient = (euler_totient * (i)) % n \n    return euler_totient \ndef polynomial_coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the polynomial coefficients of the nth term.\n    '''\n    # sum of polynomial coefficients \n    polynomial_coeffs = 1 \n    # loop for n \n    for i in range(1, n+1): \n        # update the polynomial coefficients \n        polynomial_coeffs = (polynomial_coeffs * (i)) % n "
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0: \n        print(\"ERROR: Negative number entered. Please enter a positive number.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        result = n\n        result = even_binomial_Coeff_Sum(n-1)\n        result += 2\n        result = even_binomial_Coeff_Sum(n-2)\n        result += 3\n        result = even_binomial_Coeff_Sum(n-3)\n        result += 4\n        result = even_binomial_Coeff_Sum(n-4)\n        result += 5\n        result = even_binomial_Coeff_Sum(n-5)\n        result += 6\n        result = even_binomial_Coeff_Sum(n-6)\n        result += 7\n        result = even_binomial_Coeff_Sum(n-7)\n        result += 8\n        result = even_binomial_Coeff_Sum(n-8)\n        result += 9\n        result = even_binomial_Coeff_Sum(n-9)\n        result += 10\n        result = even_binomial_Coeff_Sum(n-10)\n        result += 11\n        result = even_binomial_Coeff_Sum(n-11)\n        result += 12\n        result = even_binomial_Coeff_Sum(n-12)\n        result += 13\n        result = even_binomial_Coeff_Sum(n-13)\n        result += 14\n        result = even_binomial_Coeff_Sum(n-14)\n        result += 15\n        result = even_binomial_Coeff_Sum(n-15)\n        result += 16\n        result = even_binomial_Coeff_Sum(n-16)\n        result += 17\n        result = even_binomial_Coeff_Sum(n-17)\n        result += 18\n        result = even_binomial_Coeff_Sum(n-18)\n        result += 19\n        result = even_binomial_Coeff_Sum(n-19)\n        result += 20\n        result = even_binomial_Coeff_Sum(n-20)\n        result += 21\n        result = even_binomial_Coeff_Sum(n-21)\n        result += 22\n        result = even_binomial_Coeff_Sum(n-22)\n        result += 23\n        result = even_binomial_Coeff_Sum(n-23)\n        result += 24\n        result = even_binomial_Coeff_Sum(n-24)\n        result += 25\n        result = even_binomial_Coeff_Sum(n-25)\n        result += 26\n        result = even_binomial_Coeff_Sum(n-26)\n        result += 27\n        result = even_binomial_Coeff_Sum(n-27)\n        result += 28\n        result = even_binomial_Coeff_Sum(n-28)\n        result += 29\n        result = even_binomial_Coeff_Sum(n-29)\n        result += 30\n        result = even_binomial_Coeff_Sum(n-30)\n        result += 31\n        result = even_binomial_Coeff_Sum(n-31)\n        result += 32\n        result = even_binomial_Coeff_Sum(n-32)\n        result += 33\n        result = even_binomial_Coeff_Sum(n-33)\n        result += 34\n        result = even_binomial_Coeff_Sum(n-34)\n        result += 35\n        result = even_binomial_Coeff_Sum(n-35)\n        result += 36\n        result = even_binomial_Coeff_Sum(n-36)\n        result += 37\n        result = even_binomial_Coeff_Sum(n-37)\n        result += 38\n        result = even_binomial_Coeff_Sum(n-38)\n        result += 39\n        result = even_binomial_Coeff_Sum(n-39)\n        result += 40\n        result = even_binomial_Coeff_Sum(n-40)\n        result += 41\n        result = even_binomial_Coeff_Sum(n-41)\n        result += 42\n        result = even_binomial_Coeff_Sum(n-42)\n        result += 43\n        result = even_binomial_Coeff_Sum(n-43)\n        result += 44\n        result = even_binomial_Coeff_Sum(n-44)\n        result += 45\n        result = even_binomial_Coeff_Sum(n-45)\n        result += 46\n        result = even_binomial_Coeff_Sum(n-46)\n        result += 47\n        result = even_binomial_Coeff_Sum(n-47)\n        result += 48\n        result = even_binomial_Coeff_Sum(n-48)\n        result += 49\n        result = even_binomial_Coeff_Sum(n-49)\n        result += 50\n        result = even_binomial_Coeff_Sum(n-50)\n        result += 51\n        result = even_binomial_Coeff_Sum(n-51)\n        result += 52\n        result = even_binomial_Coeff_Sum(n-52)\n        result += 53\n        result = even_binomial_Coeff_Sum(n-53)\n        result += 54\n        result = even_binomial_Coeff_Sum(n-54)\n        result += 55\n        result = even_binomial_Coeff_Sum(n-55)\n        result += 56\n        result = even_binomial_Coeff_Sum(n-56)\n        result += 57\n        result = even_binomial_Coeff_Sum(n-57)\n        result += 58\n        result = even_binomial_Coeff_Sum(n-58)\n        result += 59\n        result = even_binomial_Coeff_Sum(n-59)\n        result += 60\n        result = even_binomial_Coeff_Sum(n-60)\n        result += 61\n        result = even_binomial_Coeff_Sum(n-61)\n        result += 62\n        result = even_binomial_Coeff_Sum(n-62)\n        result += 63\n        result = even_binomial_Coeff_Sum(n-63)\n        result += 64\n        result = even_binomial_Coeff_Sum(n-64)\n        result += 65\n        result = even_binomial_Coeff_Sum(n-65)\n        result += 66\n        result = even_binomial_Coeff_Sum(n-66)\n        result += 67\n        result = even_binomial_Coeff_Sum(n-67)\n        result += 68\n        result = even_binomial_Coeff_Sum(n-68)\n        result += 69\n        result = even_binomial_Coeff_Sum(n-69)\n        result += 70\n        result = even_binomial_Coeff_Sum(n-70)\n        result += 71\n        result = even_binomial_Coeff_Sum(n-71)\n        result += 72\n        result = even_binomial_Coeff_Sum(n-72)\n        result += 73\n        result = even_binomial_Coeff_Sum(n-73)\n        result += 74\n        result = even_binomial_Coeff_Sum(n-74)\n        result += 75\n        result = even_binomial_Coeff_Sum(n-75)\n        result += 76\n        result = even_binomial_Coeff_Sum(n-76)\n        result += 77\n        result = even_binomial_Coeff_Sum(n-77)\n        result += 78\n        result = even_binomial_Coeff_Sum(n-78)\n        result += 79\n        result = even_binomial_Coeff_Sum(n-79)\n        result += 80\n        result = even_binomial_Coeff_Sum(n-80)\n        result += 81\n        result = even_binomial_Coeff_Sum(n-81)"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0,n+1):\n        sum += math.pow((2*i),n)\n    return sum\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h**3\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h ** 2\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*2\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 2*(r**3)*np.pi*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return h*(r**2)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    def calculate_volume():\n        '''\n        Prints the volume of the cylinder with the help of for loops.\n        '''\n        print(f'Volume of the cylinder with radius {r} and height {h} is {(4/3)*r*h}')\n        return\n    return calculate_volume\n    \n    \ndef create_a_volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    def calculate_volume():\n        '''\n        Prints the volume of the cylinder with the help of for loops.\n        '''\n        print(f'Volume of the cylinder with radius {r} and height {h} is {(4/3)*r*h}')\n        return\n    return calculate_volume\n    \n    \ndef create_a_volume_circle(r):\n    '''\n    Write a function that takes in the radius of a circle and returns the the volume.\n    '''\n    def calculate_volume():\n        '''\n        Prints the volume of the circle with the help of for loops.\n        '''\n        print(f'Volume of the circle with radius {r} is {(3/2)*(3/4)*r**2}')\n        return\n    return calculate_volume\n    \n    \ndef create_a_volume_square(r):\n    '''\n    Write a function that takes in the radius of a square and returns the the volume.\n    '''\n    def calculate_volume():\n        '''\n        Prints the volume of the square with the help of for loops.\n        '''\n        print(f'Volume of the square with radius {r} is {(1/2)*r**2}')\n        return\n    return calculate_volume\n    \n    \ndef create_a_volume_rectangle(l,w):\n    '''\n    Write a function that takes in the length of a rectangle and width of a rectangle and returns the the volume.\n    '''\n    def calculate_volume():\n        '''\n        Prints the volume of the rectangle with the help of for loops.\n        '''\n        print(f'Volume of the rectangle with length {l} and width {w} is {(w**2)/(4*l*h)}')\n        return\n    return calculate_volume\n    \n    \ndef create_a_volume_trapezoid(l,w):\n    '''\n    Write a function that takes in the length of a trapezoid and width of a trapezoid and returns the the volume.\n    '''\n    def calculate_volume():\n        '''\n        Prints the volume of the trapezoid with the help of for loops.\n        '''\n        print(f'Volume of the trapezoid with length {l} and width {w} is {(w/2)*(l/2)*(3/4)*((3/2)*(3/4))}')\n        return\n    return calculate_volume\n    \n    \n    \ndef create_a_volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the volume.\n    '''\n    def calculate_volume():\n        '''\n        Prints the volume of the sphere with the help of for loops.\n        '''\n        print(f'Volume of the sphere with radius {r} is {(1/3)*r**3}')\n        return\n    return calculate_volume\n    \n    \ndef create_a_volume_rhombus(l):\n    '''\n    Write a function that takes in the length of a rhombus and returns the the volume.\n    '''\n    def calculate_volume():\n        '''\n        Prints the volume of the rhombus with the help of for loops.\n        '''\n        print(f'Volume of the rhombus with length {l} is {(l**2/3)*(l**2/2)*(3/2)}')\n        return\n    return calculate_volume\n    \n    \n    \ndef create_a_volume_heptagon(l):\n    '''\n    Write a function that takes in the length of a heptagon and returns the the volume.\n    '''\n    def calculate_volume():\n        '''\n        Prints the volume of the heptagon with the help of for loops.\n        '''\n        print(f'Volume of the heptagon with length {l} is {(l**3/6)*(l**3/2)*(1/2)}')\n        return\n    return calculate_volume\n    \n    \n    \n    \ndef create_a_volume_octagon(l):\n    '''\n    Write a function that takes in the length of a octagon and returns the the volume.\n    '''\n    def calculate_volume():\n        '''\n        Prints the volume of the octagon with the help of for loops.\n        '''\n        print(f'Volume of the octagon with length {l} is {(l**4/9)*(l**4/6)*(3/2)}')\n        return\n    return calculate_volume\n    \n    \n    \ndef create_a_volume_dodecagon(l):\n    '''\n    Write a function that takes in the length of a dodecagon and returns the the volume.\n    '''\n    def calculate_volume():\n        '''\n        Prints the volume of the dodecagon with the help of for loops.\n        '''\n        print(f'Volume of the dodecagon with length {l} is {(l**5/11)*(l**5/6)*(3/2)}')\n        return\n    return calculate_volume\n    \n    \n    \n    \n    \ndef create_a_volume_twododecagon(l):\n    '''\n    Write a function that takes in the length of a two-decagon and returns the the volume.\n    '''\n    def calculate_volume():\n        '''\n        Prints the volume of the two-decagon with the help of for loops.\n        '''\n        print(f'Volume of the two-decagon with length {l} is {(l**6/117)*(l**6/6)*(3/2)}')\n        return\n    return calculate_volume\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v=r*h*3.14\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*np.pi*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4*pi*r*h\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #create a new dict to store new values\n    filter_dict={}\n    #create a dict to store the values and the keys\n    filter_dict=dict()\n    for key, value in dict.items():\n        if value>=n:\n            filter_dict[key]=value\n    #print the filtered dict\n    print(filter_dict)\n    \n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:val for key, val in dict.items() if val >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.filter(lambda x: x[n] >= n)\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    list=[]\n    for i in dict.keys():\n        if dict[i]>n:\n            list.append(i)\n    return list"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_copy = dict.copy()\n    for i in dict_copy.keys():\n        if dict_copy[i] >= n:\n            dict_copy[i] = n\n    return dict_copy\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n    return filtered_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i-1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    # Create a counter variable\n    count = 0\n    \n    # Iterate over the tuple\n    for i in test_tup:\n        # If the element is greater than the given element\n        if i > test_tup[count]:\n            # Increment count by one\n            count = count + 1\n    \n    # Return the count\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # list comprehension to get the elements of the given tuple\n    list_tup = tuple(test_tup)\n    print(list_tup)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_index = 0\n    count = 0\n    for element in test_tup:\n        if element == test_tup[first_index]:\n            count += 1\n            first_index += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup = test_tup\n    first = []\n    for i in range(len(tup)):\n        if tup[i] not in first:\n            first.append(tup[i])\n    return len(first)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    #Write your code here\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first = test_tup[0]\n    count_before = 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first = test_tup[0]\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] > first:\n            count += 1\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return 0\n    \n    if n == 0:\n        return 1\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # code here\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return n*n-1 + is_num_decagonal(n-1)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1: \n        raise Exception('n must be greater than 0') \n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 6\n    elif n == 4: \n        return 10\n    elif n == 5: \n        return 15\n    elif n == 6: \n        return 20\n    elif n == 7: \n        return 25\n    elif n == 8: \n        return 40\n    elif n == 9: \n        return 45\n    elif n == 10: \n        return 50\n    elif n == 11: \n        return 55\n    elif n == 12: \n        return 60\n    elif n == 13: \n        return 65\n    elif n == 14: \n        return 70\n    elif n == 15: \n        return 75\n    elif n == 16: \n        return 80\n    elif n == 17: \n        return 85\n    elif n == 18: \n        return 90\n    elif n == 19: \n        return 95\n    elif n == 20: \n        return 100\n    elif n == 21: \n        return 105\n    elif n == 22: \n        return 110\n    elif n == 23: \n        return 115\n    elif n == 24: \n        return 120\n    elif n == 25: \n        return 125\n    elif n == 26: \n        return 130\n    elif n == 27: \n        return 135\n    elif n == 28: \n        return 140\n    elif n == 29: \n        return 145\n    elif n == 30: \n        return 150\n    elif n == 31: \n        return 155\n    elif n == 32: \n        return 160\n    elif n == 33: \n        return 165\n    elif n == 34: \n        return 170\n    elif n == 35: \n        return 175\n    elif n == 36: \n        return 180\n    elif n == 37: \n        return 185\n    elif n == 38: \n        return 190\n    elif n == 39: \n        return 195\n    elif n == 40: \n        return 200\n    elif n == 41: \n        return 205\n    elif n == 42: \n        return 210\n    elif n == 43: \n        return 215\n    elif n == 44: \n        return 220\n    elif n == 45: \n        return 225\n    elif n == 46: \n        return 230\n    elif n == 47: \n        return 235\n    elif n == 48: \n        return 240\n    elif n == 49: \n        return 245\n    elif n == 50: \n        return 250\n    elif n == 51: \n        return 255\n    elif n == 52: \n        return 260\n    elif n == 53: \n        return 265\n    elif n == 54: \n        return 270\n    elif n == 55: \n        return 275\n    elif n == 56: \n        return 280\n    elif n == 57: \n        return 285\n    elif n == 58: \n        return 290\n    elif n == 59: \n        return 295\n    elif n == 60: \n        return 300\n    elif n == 61: \n        return 305\n    elif n == 62: \n        return 310\n    elif n == 63: \n        return 315\n    elif n == 64: \n        return 320\n    elif n == 65: \n        return 325\n    elif n == 66: \n        return 330\n    elif n == 67: \n        return 335\n    elif n == 68: \n        return 340\n    elif n == 69: \n        return 345\n    elif n == 70: \n        return 350\n    elif n == 71: \n        return 355\n    elif n == 72: \n        return 360\n    elif n == 73: \n        return 365\n    elif n == 74: \n        return 370\n    elif n == 75: \n        return 375\n    elif n == 76: \n        return 380\n    elif n == 77: \n        return 385\n    elif n == 78: \n        return 390\n    elif n == 79: \n        return 395\n    elif n == 80: \n        return 400\n    elif n == 81: \n        return 405\n    elif n == 82: \n        return 410\n    elif n == 83: \n        return 415\n    elif n == 84: \n        return 420\n    elif n == 85: \n        return 425\n    elif n == 86: \n        return 430\n    elif n == 87: \n        return 435\n    elif n == 88: \n        return 440\n    elif n == 89: \n        return 445\n    elif n == 90: \n        return 450\n    elif n == 91: \n        return 455\n    elif n == 92: \n        return 460\n    elif n == 93: \n        return 465\n    elif n == 94: \n        return 470\n    elif n == 95: \n        return 475\n    elif n == 96: \n        return 490\n    elif n == 97: \n        return 495\n    elif n == 98: \n        return 500\n    elif n == 99: \n        return 505\n    elif n == 100: \n        return 510\n    elif n == 101: \n        return 515\n    elif n == 102: \n        return 520\n    elif n == 103: \n        return 525\n    elif n == 104: \n        return 530\n    elif n == 105: \n        return 535\n    elif n == 106: \n        return 540\n    elif n == 107: \n        return 545\n    elif n == 108: \n        return 550\n    elif n == 109: \n        return 555\n    elif n == 110: \n        return 560\n    elif n == 111: \n        return 565\n    elif n == 112: \n        return 570\n    elif n == 113: \n        return 575\n    elif n == 114: \n        return 580\n    elif n == 115: \n        return 585\n    elif n == 116: \n        return 590\n    elif n == 117: \n        return 595\n    elif n == 118: \n        return 600\n    elif n == 119: \n        return 625\n    elif n == 120: \n        return 630\n    elif n == 121: \n        return 635\n    elif n == 122: \n        return 640\n    elif n == 123: \n        return 645\n    elif n == 124: \n        return 650\n    elif n == 125: \n        return 655\n    elif n == 126: \n        return 660\n    elif n == 127: \n        return 665\n    elif n == 128: \n        return 670\n    elif n == 129: \n        return 675\n    elif n == 130: \n        return 680\n    elif n == 131: \n        return 685\n    elif n == 132: \n        return 690\n    elif n == 133: \n        return 695\n    elif n == 134: \n        return 700\n    elif n == 135: \n        return 705\n    elif n == 136: \n        return 710\n    elif n == 137: \n        return 715\n    elif n == 138: \n        return 720\n    elif n == 139: \n        return 725\n    elif n == 140: \n        return 730\n    elif n == 141: \n        return 735\n    elif n == 142: \n        return 740\n    elif n == 143: \n        return 745\n    elif n == 144: \n        return 750\n    elif n == 145: \n        return 755\n    elif n == 146: \n        return 760\n    elif n == 147: \n        return 765\n    elif n == 148: \n        return 770\n    elif n == 149: \n        return 775\n    elif n == 150: \n        return 780\n    elif n == 151: \n        return 785\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n // 2 + is_num_decagonal(n - 1)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return n\n    else:\n        if n % 2 == 0:\n            return is_num_decagonal(n-1) + n\n        else:\n            return is_num_decagonal(n-1) - n\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec = n+1\n    while dec%2!= 0:\n        dec = dec/2\n    return dec\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    #Write a recursively defined function\n    def rec_recursive(n,n_1):\n        if(n==0):\n            return 0\n        else:\n            return n_1 + rec_recursive(n-1, n_1 + rec_recursive(n-1, n))\n        \n    # Return the nth decimal number\n    return rec_recursive(n, 0)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # if n < 0:\n    #     print(\"Invalid input, n must be a non-negative number\")\n    # elif n > (n+1) * (n+1):\n    #     print(\"Invalid input, n must be less than or equal to the maximum number of decagments\")\n    # else:\n    #     return (n+1) * (n+1)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = int(n)\n    if n==0: \n        return 1\n    else: \n        return n-1\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    while i <= n:\n        if i%2 == 1:\n            print(i)\n            i += 1\n        else:\n            i += 1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i,v in enumerate(dlist):\n        if v==item:\n            return(i==len(dlist)-1)\n    return(-1"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1 # position of the element in the array\n    for i,v in enumerate(dlist):\n        if v == item:\n            pos = i\n            break # finds the index of the element in the array\n    return (pos!= -1, pos) # returns the boolean and the index position of the element if the element was found\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    low = 0\n    high = len(dlist)-1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    position = -1\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            found = True\n            break\n        if found == False:\n            position = -1\n        if position >= 0:\n            position += 1\n    return found, position\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True,i)\n    return (-1,-1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Check to see if an element is found\n    for i, j in enumerate(dlist):\n        if j == item:\n            return (True, i)\n    # Check to see if an element is not found\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position=0\n    while position < len(dlist) :\n        if dlist[position] == item :\n            return True, position\n        else : \n            position = position + 1\n    return False, position\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return len(unique_list) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #TEST CASE:\n    # First test case:\n    # test_list = ['a','b','c']\n    # Test result:\n    # true\n    \n    # Second test case:\n    # test_list = ['a','b','a','b','c']\n    # Test result:\n    # false\n    # '''\n    # '''\n    # Make sure you can use a loop, each time you have to check if a list is unique, or not.\n    # '''\n    # def all_unique(test_list):\n    #     # Use if statements to make sure the list is not empty or has only one element.\n    #     # If a list is empty or only one element, you can use a list comprehension, otherwise, use a built in function.\n    #     # Hint: you can use a loop.\n    #     if len(test_list) == 0:\n    #         return False\n    #     # Use a list comprehension to get a list of unique elements.\n    #     # You can use an empty list to make sure the list is not empty.\n    #     unique_elements = [element for element in test_list if element not in unique_elements]\n    #     # Return if the list is not empty and only has one element.\n    #     if len(unique_elements) == 1 and not unique_elements[0] in unique_elements:\n    #         return False\n    #     # Return if the list is not empty and both elements are in the list.\n    #     elif len(unique_elements) == 2 and unique_elements[0] in unique_elements and unique_elements[1] in unique_elements:\n    #         return False\n    #     else:\n    #         return True\n    # # Call the function.\n    # print(all_unique(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    set1 = set(test_list)\n    set1 = list(set1)\n    if len(set1) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for item in test_list:\n        if item not in unique:\n            unique.append(item)\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    uniq = set(test_list)\n    return len(uniq) == len(set(test_list))\n    #return len(uniq) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] in test_list:\n            test_list.remove(test_list[i])\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # check for an empty array\n    if len(test_list) == 0:\n        return True\n    else:\n        # if the element is not there, return false\n        if test_list[0] not in test_list[1:]:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    uniques = set(test_list)\n    for i in range(len(test_list)):\n        if test_list[i] not in uniques:\n            uniques.add(test_list[i])\n    return len(uniques)==len(test_list)\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == 0:\n        return []\n    if len(nums2) == 0:\n        return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Ups, not same length\"\n    else:\n        res = []\n        for i in range(len(nums1)):\n            if nums1[i] in nums2:\n                res.append(nums1[i]-nums2[nums1[i]])\n        return res\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #if len(nums1)==0:\n    #    print('This list is empty')\n    #else:\n    #    print('This list has ',len(nums1),'elements')\n    #    print('These numbers are: ',nums1)\n    #    print('These numbers are: ',nums2)\n    #    print('These numbers are: ',nums1+nums2)\n    nums1_copy=nums1\n    nums2_copy=nums2\n    nums1=list(nums1)\n    nums2=list(nums2)\n    for i in nums1:\n        if i in nums2:\n            nums1.remove(i)\n            nums2.remove(i)\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1 = [int(x) for x in nums1]\n    l2 = [int(x) for x in nums2]\n    return l1,l2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(set(nums1) - set(nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    print('===\\nSubtraction List\\n===')\n    if len(nums1)!= len(nums2):\n        raise Exception('numbers of lists must be equal')\n    for i in range(len(nums1)):\n        print(f'{nums1[i]}, ', end='')\n    for j in range(len(nums2)):\n        print(f'{nums2[j]}, ', end='')\n    print()\n    print('********************')\n    if nums1 == []:\n        print('The numbers are empty')\n        return []\n    else:\n        new_nums = []\n        for i in range(len(nums1)):\n            new_nums.append(nums1[i]-nums2[i])\n        print('-', *new_nums)\n        print()\n        return new_nums\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    print(nums1)\n    print(nums2)\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.sort()\n    nums2.sort()\n    l=len(nums1)\n    r=len(nums2)\n    res=[]\n    while(l>0 and r>0):\n        x=nums1[l-1]\n        y=nums2[r-1]\n        res.append(x-y)\n        l-=1\n        r-=1\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return nums1 - nums2\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    i = 0\n    while i < len(str(n)):\n        if int(str(n)[i]) >= int(str(n)[i+1]):\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if not isinstance(n, int): \n        return False\n    if n < 10 or n > 36: \n        return False\n    for i in str(n):\n        if not i.isdigit(): \n            return False\n        if not (int(i) >= 0 and int(i) <= 9): \n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    '''\n    Inputs:\n        -n: integer to validate\n    Output:\n        -True if n has no digits, False otherwise\n    '''\n    '*** YOUR CODE HERE ***'\n    return n<n[0]\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    temp = str(n)\n    temp = temp.replace('0','')\n    temp = temp.replace('1','')\n    temp = temp.replace('2','')\n    temp = temp.replace('3','')\n    temp = temp.replace('4','')\n    temp = temp.replace('5','')\n    temp = temp.replace('6','')\n    temp = temp.replace('7','')\n    temp = temp.replace('8','')\n    temp = temp.replace('9','')\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    if(len(n)!=len(set(n))):\n        print(\"not a valid number\")\n    else:\n        for i in range(len(n)):\n            n = n.replace(n[i],'')\n            if(n[i]!=n[i-1]):\n                if(int(n[i])>int(n[i-1])):\n                    print(\"not a valid number\")\n                    return\n        return n\n    return n\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 10:\n        return False\n    for i in range(1, 10):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = n\n    if num == 0 or num == 1: \n        return False\n    freq = dict() \n    for i in range(9): \n        freq[i] = 0\n    for i in range(9): \n        freq[i] = 0\n    for i in range(n): \n        freq[ord(n[i]) - ord('0')] += 1\n    for i in range(9): \n        if freq[i] < freq[i+1]: \n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n>1:\n        digits = set(str(n))\n        if len(digits)==1:\n            return True\n        else:\n            for i in range(0,len(digits)):\n                if digits.pop()!=n%10:\n                    return False\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def f(n):\n        s = 0\n        for i in str(n):\n            s += int(i)**3\n        if s < n:\n            return False\n        else:\n            return True\n    if n%10==0:\n        if f(n%10):\n            return False\n    else:\n        if f(n%10):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #check for empty lists\n    if(len(list) == 0):\n        return True\n    for item in list:\n        if(item == element):\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if element!= i:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if type(list)!= list:\n        raise TypeError(\"The list must be a list\")\n    \n    for i in list:\n        if list.count(i)!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        for i in range(0,len(list)):\n            if list[i] == element:\n                return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        raise TypeError('{} is not a valid element'.format(element))\n    for element in list:\n        if element!= element:\n            raise ValueError('Items in the list must be the same')\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    for item in list:\n        if item!= element:\n            return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if list.index(item)!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(0,len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i == element:\n            return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return not re.match(r'(a){1,3}b', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count('a') == 0 and text.count('b') == 0:\n        return True\n    elif text.count('a') == 0:\n        return False\n    elif text.count('b') == 0:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or five 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_six_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six or seven 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_ten_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by ten or eleven 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_twelve_thirteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve or thirteen 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_four_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or eleven 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_eleven_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eleven or four 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_twelve_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve or eleven 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_five_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five or eleven 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_six_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six or eleven 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_seven_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven or eleven 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or five 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or six 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or seven 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or eight 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or nine 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_twelve_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve or nine 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_twelve_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve or eleven 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or eleven 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_twelve_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve or eleven 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or twelve 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or five 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or six 'b' characters.\n    '''\n    match = re.search('\\w+[aA]\\w+', text)\n    if match:\n        return True\n    else:\n        return False\ndef text_match_one_seven(text)"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'([a-z])\\1'\n    regex = re.compile(pattern)\n    return regex.search(text)!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) > 1:\n        if re.match('(?:(?P<a>\\S)(?P<b>\\S)?)', text[1:]):\n            return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # your code here\n    pattern = r'[a-zA-Z]*[a-zA-Z]*[a-zA-Z]*\\b'\n    str1 = re.findall(pattern, text)\n    if len(str1) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'\\b[aA]\\b', text):\n        print('Text contains a')\n        return True\n    if re.search(r'[ab]\\b', text):\n        print('Text contains two or three')\n        return True\n    else:\n        print('Not a valid text')\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern_for_matching_a = r'(a){1,2}'\n    pattern_for_matching_b = r'(b){1,2}'\n    result = re.match(pattern_for_matching_a,text)\n    if not result:\n        return False\n    else:\n        result = re.match(pattern_for_matching_b,text)\n        if not result:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # find all the words (this is the pattern)\n    pattern = re.compile(r'\\w+\\w+')\n    # iterate through each word\n    for word in pattern.findall(text):\n        # if the word contains the 'a' character\n        if 'a' in word:\n            # if the word has 2 or more 'b' characters\n            if pattern.findall(word)[0].count('b') > 1:\n                # return false\n                return False\n        # if the word does not have the 'a' character\n        else:\n            # if the word has only one 'b' character\n            if pattern.findall(word)[0].count('b') == 1:\n                # return false\n                return False\n    # if there is no 'a' character\n    # return true\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_flag and second_char_flag:\n            return False\n    return True\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or five 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_flag and second_char_flag:\n            return False\n    return True\ndef text_match_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_flag and second_char_flag:\n            return False\n    return True\ndef text_match_seven_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven or eight 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_flag and second_char_flag:\n            return False\n    return True\ndef text_match_nine_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nine 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_flag and second_char_flag:\n            return False\n    return True\ndef text_match_eleven_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eleven 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_flag and second_char_flag:\n            return False\n    return True\ndef text_match_thirteen_fourteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by thirteen 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_flag and second_char_flag:\n            return False\n    return True\ndef text_match_fifteen_sixteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by fifteen 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_flag and second_char_flag:\n            return False\n    return True\ndef text_match_seven_eight_fourteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_flag and second_char_flag:\n            return False\n    return True\ndef text_match_nine_eleven_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nine 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_flag and second_char_flag:\n            return False\n    return True\ndef text_match_eleven_twelve_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eleven 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_flag and second_char_flag:\n            return False\n    return True\ndef text_match_thirteen_fifteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by thirteen 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_flag and second_char_flag:\n            return False\n    return True\ndef text_match_fifteen_sixteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by fifteen 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_flag and second_char_flag:\n            return False\n    return True\ndef text_match_seven_eight_fourteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    first_char_flag = 0\n    second_char_flag = 0\n    for c in text:\n        if c == 'a' and first_char_flag == 0:\n            first_char_flag = 1\n        elif c == 'b' and second_char_flag == 0:\n            second_char_flag = 1\n        if first_char_fla"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # write your code here\n    if n < k:\n        return 0\n    if n == k:\n        return a[n]\n    \n    a[n] = max(a[n], a[n - k] + a[n])\n    \n    return max_sub_array_sum_repeated(a, n + 1, k)\n    \n    \ndef sum_array(a, n):\n    '''\n    Write a function that finds the sum of all the elements in the array.\n    '''\n    # write your code here\n    if n == 0:\n        return 0\n    return a[0] + sum_array(a, n - 1)\n        \ndef max_sub_array_sum_repeated_algorithm(a, n):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # write your code here\n    if n < 1:\n        return 0\n    if n == 1:\n        return a[n]\n    \n    # first we need to find the sum of the left subarray\n    sum_left = a[0]\n    for i in range(1, n):\n        sum_left += a[i]\n    # print(sum_left)\n    # print(sum_left)\n    \n    # now we need to find the sum of the right subarray\n    sum_right = 0\n    for i in range(n - 1, -1, -1):\n        sum_right += a[i]\n    # print(sum_right)\n    # print(sum_right)\n    \n    # now we need to find the largest sum of the sub arrays\n    a[0] = sum_left\n    # print(a)\n    \n    return max(a[0], max_sub_array_sum_repeated_algorithm(a, n - 1), max_sub_array_sum_repeated_algorithm(a, n - 2))\n    "
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Declare array to be returned\n    ans = 0\n    # Declare k's\n    k = 0\n    for i in range(n):\n        k+=a[i]\n    # If the current sum is already in the result array, return the result\n    if k in ans:\n        return ans\n    # For every odd number of the array k, repeat the array k times\n    for i in range(k,n,2):\n        # First, find the maximum of the remaining elements\n        ans = max(ans, k+a[i])\n        # Keep decreasing the maximum of the remaining elements\n        k+=a[i]\n    # return the answer\n    return ans\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Time: O(n^k)\n    # Space: O(k)\n    count = [0 for i in range(n+1)]\n    for i in range(1, n+1):\n        count[i] = count[i-1] + a[i-1]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < 2:\n        return 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    d = [0 for i in range(n + 1)] \n    for i in range(1, n + 1): \n        d[i] = d[i - 1] + a[i - 1] \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    sub_array = []\n    for i in range(k):\n        sub_array.append(sum)\n        sum += a[i]\n    sub_array.append(sum)\n    \n    for i in range(k, n):\n        sub_array.append(a[i] * 2)\n        sum += a[i]\n        \n    return max(sub_array)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sub_array_sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n = n - 1\n    max = -1\n    current_sum = 0\n    for i in range(1, k + 1):\n        current_sum += a[i - 1]\n    for i in range(k, 0, -1):\n        if current_sum <= n:\n            current_sum += a[i - 1]\n        else:\n            break\n        max = max if max < current_sum else current_sum\n    return max\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # TO DO...\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n,2):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1, n):\n        if i%2==0:\n            total+=i\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if (i%2==0):\n            s+=i\n    return s\n    \n    "
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([x*x for x in range(1,n+1,2)])\n    \n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s += i ** 2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum = sum + i ** 2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += (i * i)\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if (i%2 == 0):\n            s += i\n    return s\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len,list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    longest = list1[0]\n    for i in range(1, len(list1)):\n        if len(list1[i]) > len(list1[i-1]):\n            longest = list1[i]\n    return longest\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    length = 0\n    if len(list1)!= 0:\n        length = len(list1[0])\n    else:\n        length = 0\n    for l in list1:\n        if len(l) > length:\n            length = len(l)\n    for i in list1:\n        if len(i) == length:\n            max_length = length\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    longest = list()\n    if list1 == []:\n        return 0\n    else:\n        for i in list1:\n            if len(i) > len(longest):\n                longest = i\n        return len(longest)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for i in range(len(list1)):\n        length=len(list1[i])\n        if(length>max_length):\n            max_length=length\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # your code here\n    if len(list1) <= 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0]\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # CODE HERE\n    max_len = 0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            for k in range(0,len(list1[i][j])):\n                if list1[i][j][k] > max_len:\n                    max_len = list1[i][j][k]\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    def recursive_function(list1, lst):\n        # If the list is empty, return the length of the lst\n        if len(list1) == 0:\n            return len(lst)\n        # If the list is not empty, check all the elements of the list\n        # to find the maximum length, and return the maximum length\n        # and the list\n        max_length_list1 = recursive_function(list1[1:], lst)\n        max_length_list1 = max(max_length_list1, len(list1[1:]))\n        # if the lst is shorter, return the max length\n        if len(list1[1:]) < len(lst):\n            return max_length_list1\n        # if lst is longer, return the max length and the list\n        else:\n            return max_length_list1, list1[1:]\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for item in list1:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # code here\n    return len(max(list1, key = len))\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    else: \n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # I think this is the case where there are more than 3 ways, but, because of the image, it seems to be a problem.\n    if n<=3 and k<=3:\n        return n*k\n    elif n==2 or k==2:\n        return n*k\n    else:\n        #Step 1: Create a set of colors to compare.\n        #Step 2: Get the width of the fence\n        h = int(n/3)\n        #Step 3: Compare the colors of the posts with each other\n        n_sets = [[(i+h, j+k) for i in range(h)] for j in range(2*h-1)]\n        k_sets = [[(i+h, j+k) for i in range(h)] for j in range(2*h-1)]\n        \n        #Initialize result\n        res = 0\n        #Step 4: Find the number of ways for each set of 2 adjacent posts with different colors\n        for set1 in n_sets:\n            for set2 in k_sets:\n                if len(set1)>=2 and set1[0][0]<=set2[0][0] and set1[1][0]<=set2[1][0]:\n                    res+=count_no_of_ways(n-len(set1),k-len(set2))\n                    \n        return res\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def build_post(post):\n        if len(post) < n:\n            post.append('.')\n            return post\n        else:\n            post = build_post(post)\n            if post[0] == post[k] and post[1] == post[k]:\n                return post\n            else:\n                post[k] = '.'\n                return post\n    def count_ways(post):\n        ways = 0\n        for i in range(2, len(post)):\n            ways += int(post[i] == post[i - 1]) + int(post[i] == post[i - 2])\n        ways += int(post[0] == post[1])\n        return ways\n    \n    ways = 0\n    for i in range(2, k + 1):\n        post = build_post(['.'] * k)\n        ways = max(ways, count_ways(post))\n        post = build_post(post)\n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_paint(n, k):\n        '''\n        This function checks if the fence has already been painted \n        '''\n        if n == 1 or n == 2: \n            return n\n        elif k == 2: \n            return 2 \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initializing a dict\n    d = {0: 1}\n    # Loop to find the ways\n    for i in range(2, n+1):\n        # add 1 to the existing key\n        d[i] = d[i-1] + d[i-2]\n    # Counting how many ways we can draw the fence\n    return d[n] // (d[k] * d[n-k])\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # your code here\n    \n    #set the variables\n    d = k-1\n    \n    #the main function\n    def solution(n, k, colors, d, colors_by_post):\n        #there will be 2 ways of painting the fence\n        #to print out the number of ways\n        ways = 1\n        #if the k is odd\n        if k%2 == 1:\n            #do this if k is odd\n            ways += solution(n, k-1, colors, d, colors_by_post)\n        \n        #do this if k is even\n        else:\n            #do this if k is even\n            ways += solution(n, k, colors_by_post, d, colors_by_post)\n        #return the answer\n        return ways\n    \n    #return the answer\n    return solution(n, k, colors, d, colors_by_post)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n<=2 or k<=0:\n        return 1\n    if n>=3:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)\n    #count ways at position n, and increment in position k\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2: return 0\n    if n == 2: return 1\n    if n == 3: return 2\n    \n    # return the number of ways of painting the fence such that there are 2 adjacent posts with the same color for the given fence with n posts and k colors\n    # for i in range(n):\n    #     if n > 2 and i+1 < n:\n    #         return (i+1) * count_no_of_ways(n-2, k)\n    # return count_no_of_ways(n-2, k) + count_no_of_ways(n-1, k)\n    \n    # if the given fence has a fence with n posts and colors\n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # if the given fence has a fence with n posts and colors\n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # if the given fence has a fence with n posts and colors\n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # if the given fence has a fence with n posts and colors\n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # if the given fence has a fence with n posts and colors\n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # if the given fence has a fence with n posts and colors\n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-1-i-2 and n-i is the n-i-1\n    \n    # return the number of ways to paint the fence with colors\n    # i+1 is the n-"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0:\n        return 1\n    if k > n:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    \n    ways = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            ways += count_no_of_ways(i, j)\n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n == 0 or k == 0): \n        return 0\n    \n    if (n < k): \n        return count_no_of_ways(n, k-1)\n        \n    if (k == 1): \n        return 1\n        \n    return (count_no_of_ways(n-1, k) + count_no_of_ways(n, k-1)"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if (n == 0 and m == 0): return 'No Integer Division'\n    elif n == 0: return m\n    elif m == 0: return n\n    else:\n        return find(n%10,m%10)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m:\n        return n\n    if m % n == 0:\n        return n\n    else:\n        return find(m//n,n)\n        "
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    def to_int(x):\n        return int(x)\n    def floor_divide(x,y):\n        return int(math.floor(x/y))\n    if n>m:\n        x=to_int(m/n)\n        y=floor_divide(n,x)\n    else:\n        x=to_int(n/m)\n        y=n\n    return y\ndef find_factors(n):\n    '''\n    This function finds all the factors of a number n.\n    '''\n    for i in range(2,n//2+1):\n        if n%i==0:\n            print(i)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    a = n%m\n    if a==0:\n        return int(n/m)\n    else:\n        return find(int(n/m),m)\n    \ndef gcd(a,b):\n    '''\n    Write a python function to get the greatest common divisor of two numbers.\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n<=0) or (m<=0):\n        return False\n    elif (m == 0):\n        return n\n    elif (n%m == 0):\n        return m\n    else:\n        return find(n%m,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        if m==0:\n            return 0\n        else:\n            return int(m/n)\n    elif m==0:\n        return n\n    else:\n        return find(n-1,m) + find(n-1,m-n)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return round(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Base case\n    if n==0:\n        return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    def floor(n,m):\n        return int(n/m)\n    \n    def mod(n,m):\n        return int(n%m)\n    \n    if m==0:\n        return floor(n,m)\n    else:\n        return mod(floor(n,m),m)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n >= m: return n%m\n    return m%n \n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Find the angle between the sides.\n    angle = math.acos(w**2 + h**2)\n    # Find the distance between the 3 sides.\n    return angle / 2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #Define the formula for the side of a right angled triangle.\n    return h / 2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # find the base\n    base = w/2\n    #find the height\n    h = h\n    # get side1\n    s1 = h/math.sin(math.radians(90))\n    # get side2\n    s2 = h/math.sin(math.radians(45))\n    # get side3\n    s3 = h/math.sin(math.radians(135))\n    #get the third side\n    t1 = w/math.cos(math.radians(90))\n    t2 = w/math.cos(math.radians(45))\n    t3 = w/math.cos(math.radians(135))\n    #print the sides\n    print(f\"the base is {base:.2f} cm\")\n    print(f\"the height is {h:.2f} cm\")\n    print(f\"the first side is {s1:.2f} cm\")\n    print(f\"the second side is {s2:.2f} cm\")\n    print(f\"the third side is {s3:.2f} cm\")\n    print(f\"the third side is {t1:.2f} cm\")\n    print(f\"the third side is {t2:.2f} cm\")\n    print(f\"the third side is {t3:.2f} cm\")\n    # make a third side\n    third = (s1*t2*t3)+(t1*t3)+(s2*t3)+(t2*t3)\n    print(f\"the third side is {third:.2f} cm\")\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # a = w/2 * math.cos(math.radians(45))\n    # b = h/2 * math.sin(math.radians(45))\n    # c = w/2 * math.tan(math.radians(45))\n    a = w/2\n    b = h/2\n    c = w/2\n    d = a**2 + b**2 + c**2\n    if d == 0:\n        print(\"no two sides in the right angled triangle\")\n        return 0\n    else:\n        s = d**0.5\n        return s\n    # print(f\"a:{a}\")\n    # print(f\"b:{b}\")\n    # print(f\"c:{c}\")\n    # print(f\"d:{d}\")\n    # print(f\"s:{s}\")\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round((math.sin(w/h)*math.cos(h/2)),2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # two points are\n    point1 = [w/2, h/2]\n    point2 = [w/2, -h/2]\n    # Third point of the triangle is the midpoint of the second and\n    # the first point of the third:\n    point3 = [0, 0]\n    for i in range(3):\n        # Find the angles between two points in that order\n        angles = (math.atan2(point2[1] - point1[1], point2[0] - point1[0])) - math.atan2(point2[1] - point3[1], point2[0] - point3[0])\n        # If angles is 90 degrees, print the angle, otherwise\n        # print the angle in degrees\n        if angles < 0:\n            print(angles)\n        else:\n            print(math.degrees(angles))\n    print(\"\\n\")\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s=0\n    for y in range(h):\n        for x in range(w):\n            s+=math.sqrt(x**2+(y**2))\n    return s/3\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #Determine the x and y of the triangle\n    x=w*(1/2)\n    y=h*(1/2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    triangle = [[w,h,0],[0,h,0],[0,0,0]]\n    for i in range(3):\n        triangle[0][i] = w\n        triangle[1][i] = h\n        triangle[2][i] = 0\n    for i in range(3):\n        for j in range(3):\n            triangle[j+3][i] = triangle[i][j]\n    triangle[3][3] = math.sqrt(w**2 + h**2)\n    triangle[3][2] = triangle[3][2]/3.0\n    return triangle\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    l1 = w/2\n    l2 = h/2\n    theta = math.acos((l2**2+l1**2-l2*l1)/(2*l2*l1))\n    print(theta)\n    return theta\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    l1 = h/2\n    l2 = w/2\n    theta = math.acos((l2**2+l1**2-l2*l1)/(2*l2*l1))\n    print(theta)\n    return theta\ndef triangle(width,height):\n    '''\n    This function calculates the side of a triangle.\n    '''\n    a = height/2\n    b = width/2\n    c = height/2\n    side_angle = math.acos((b**2+c**2-a**2)/(2*b*c))\n    print(side_angle)\n    return side_angle\ndef reverse_triangle(side_angle):\n    '''\n    This function reverses a triangle's side.\n    '''\n    side_angle = math.radians(side_angle)\n    side_angle_reverse = math.degrees(math.asin((side_angle**2)/(2*side_angle)))\n    print(side_angle_reverse)\n    return side_angle_reverse\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    return max(listval)\n    "
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for item in listval:\n        if item > max_value:\n            max_value = item\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for element in listval:\n        if element > max:\n            max = element\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval[0], max_val(listval[1:]))\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # step 1\n    max_v = listval[0]\n    for i in listval:\n        if i > max_v:\n            max_v = i\n    # step 2\n    return max_v\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number <= 1:\n        return 0\n    else:\n        return number % 10 + sum_div(number // 10)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return sum_div(number-1) + number\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 0:\n        raise ValueError('n must be non-negative')\n    \n    divisors = []\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            divisors.append(i)\n            if i == number // i:\n                divisors.append(number//i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    elif number % 2 == 0:\n        return number\n    else:\n        return number // 2 + sum_div(number - 2)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if (number % i) == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 1:\n        return 0\n    \n    total_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total_div += i\n    return total_div\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    print(f'Calculating the sum of all divisors of {number}')\n    # First, let's define a variable to hold the current\n    # sum of divisors. We'll use this to find the next\n    # divisor using the formula:\n    # Divisor = num / (num - 1)\n    # Where num is the current number.\n    current_sum = 0\n    # Loop through the numbers in the range\n    for num in range(1, number):\n        # If the current number is a divisor, increment\n        # the current sum by the current number\n        # and subtract the current sum from the previous sum\n        if num % 2 == 0:\n            current_sum += num\n        # If the number is not a divisor, set the current sum\n        # to the current number's sum\n        else:\n            current_sum = num\n    # Return the current sum\n    return current_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 0\n    for i in range(1,number+1):\n        if i % 2 == 0:\n            div += i\n        if i % 3 == 0:\n            div += i\n        if i % 5 == 0:\n            div += i\n    return div\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    i = 0\n    while i <= number:\n        if number % i == 0:\n            divisors.append(i)\n        i += 1\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return number\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(0, n-1):\n        if arr[i] > arr[i+1]:\n            inv_count+=1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return (len(arr)-1) + 1 if (len(arr)%2 == 1) else (len(arr)//2)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    invCount = 0\n    n = len(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    max_val = arr[0]\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < max_val:\n            max_val = arr[i]\n        else:\n            if arr[i] > max_val:\n                max_val = arr[i]\n        count += 1\n    return count\n    # for i in arr:\n    #     print(i, end=' ')\n    #     print(get_Inv_Count(arr))\n    #     arr[i] = 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # create an empty dic.\n    result = {}\n    # loop through the array.\n    for i in arr:\n        # if the value is not in the dic, add it.\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    # get the keys and values from the dictionary and sort them.\n    keys = sorted(result.keys())\n    vals = sorted(result.values())\n    # sort the keys and values of the result dictionary.\n    for i in range(len(keys)):\n        for j in range(len(keys)):\n            if keys[i] == keys[j]:\n                result[keys[i]] = result[keys[i]] - 1\n    # return the total counts of inversions.\n    return len(keys)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(0,len(arr)):\n        for j in range(0,i):\n            if (arr[i] > arr[j]) and (arr[i] < arr[j]):\n                inv_count+=1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in arr:\n        inv += 1 if i < 2 else -1\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(0, n-1):\n        if arr[i] > arr[i+1]:\n            inv_count = inv_count + 1\n    print(f\"Inversion count is: {inv_count}\")\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    arr.sort()\n    n = len(arr)\n    left = 0\n    right = n-1\n    #compare the two halves\n    while(left<right):\n        if(arr[left] > arr[right]):\n            arr[left], arr[right] = arr[right], arr[left]\n            left+=1\n            right-=1\n        else:\n            right-=1\n    return right-left-1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            inv_count += 1\n        elif arr[i] < arr[i+1]:\n            inv_count += 1\n            arr[i+1], arr[i] = arr[i], arr[i+1]\n    return inv_count\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1)!= list:\n        return list1\n    else:\n        for item in list1:\n            if type(item)!= list:\n                list1.append(item)\n                return flatten_list(list1)\n            else:\n                list1 = list1 + flatten_list(item)\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) is list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for elem in list1:\n        if type(elem) == list:\n            new_list.extend(flatten_list(elem))\n        else:\n            new_list.append(elem)\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list()\n    if type(list1[0]) == list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return [list1[i] for i in range(0, len(list1))]\n    \n    \ndef flatten_set(list1):\n    '''\n    Write a function to flatten a given nested set structure.\n    '''\n    if not list1:\n        return list()\n    if type(list1[0]) == set:\n        return flatten_set(list1[0]) + flatten_set(list1[1:])\n    else:\n        return [list1[i] for i in range(0, len(list1))]\n    \n    \ndef flatten_dict(dictionary):\n    '''\n    Write a function to flatten a given nested dictionary structure.\n    '''\n    if not dictionary:\n        return dictionary\n    if type(dictionary[0]) == dict:\n        return flatten_dict(dictionary[0]) + flatten_dict(dictionary[1:])\n    else:\n        return {k: flatten_dict(v) for k,v in dictionary.items()}\n    \n    \ndef flatten_path(path):\n    '''\n    Write a function to flatten a given path structure.\n    '''\n    if not path:\n        return path\n    if type(path[0]) == list:\n        return flatten_path(path[0]) + flatten_path(path[1:])\n    else:\n        return [flatten_path(path[i:i+2]) for i in range(0, len(path))]\n    \n    \ndef flatten_unique_list(list1):\n    '''\n    Write a function to flatten a given unique list.\n    '''\n    if not list1:\n        return list()\n    if type(list1[0]) == list:\n        return flatten_unique_list(list1[0]) + flatten_unique_list(list1[1:])\n    else:\n        return [list1[i] for i in range(0, len(list1))]\n    \n    \ndef flatten_unique_set(list1):\n    '''\n    Write a function to flatten a given unique set.\n    '''\n    if not list1:\n        return list()\n    if type(list1[0]) == set:\n        return flatten_unique_set(list1[0]) + flatten_unique_set(list1[1:])\n    else:\n        return {list1[i] for i in range(0, len(list1))}\n    \n    \ndef flatten_unique_dict(dictionary):\n    '''\n    Write a function to flatten a given unique dictionary.\n    '''\n    if not dictionary:\n        return dictionary\n    if type(dictionary[0]) == dict:\n        return flatten_unique_dict(dictionary[0]) + flatten_unique_dict(dictionary[1:])\n    else:\n        return {k: flatten_unique_dict(v) for k,v in dictionary.items()}\n    \n    \ndef flatten_unique_path(path):\n    '''\n    Write a function to flatten a given path structure.\n    '''\n    if not path:\n        return path\n    if type(path[0]) == list:\n        return flatten_unique_path(path[0]) + flatten_unique_path(path[1:])\n    else:\n        return [flatten_unique_path(path[i:i+2]) for i in range(0, len(path))]\n    \n    \ndef flatten_list_to_path(list1):\n    '''\n    Write a function to flatten a given list.\n    '''\n    if not list1:\n        return list()\n    if type(list1[0]) == list:\n        return flatten_list_to_path(list1[0]) + flatten_list_to_path(list1[1:])\n    else:\n        return [list1[i] for i in range(0, len(list1))]\n    \n    \ndef flatten_unique_list_to_path(list1):\n    '''\n    Write a function to flatten a given list.\n    '''\n    if not list1:\n        return list()\n    if type(list1[0]) == list:\n        return flatten_unique_list_to_path(list1[0]) + flatten_unique_list_to_path(list1[1:])\n    else:\n        return [list1[i] for i in range(0, len(list1))]\n    \n    \ndef unflatten(list1, list2):\n    '''\n    Write a function to unflatten a given list.\n    '''\n    if not list1 or not list2:\n        return list()\n    if type(list1[0]) == list:\n        return unflatten(list1[0], list2) + unflatten(list1[1:], list2)\n    else:\n        return [list1[i] for i in range(0, len(list1))] + [list2[i] for i in range(0, len(list2))]\n    \n    \ndef unflatten_list(list1, list2):\n    '''\n    Write a function to unflatten a given list.\n    '''\n    if not list1 or not list2:\n        return list()\n    if type(list1[0]) == list:\n        return unflatten_list(list1[0], list2) + unflatten_list(list1[1:], list2)\n    else:\n        return [list1[i] for i in range(0, len(list1))] + [list2[i] for i in range(0, len(list2))]\n    \n    \ndef unflatten_dict(dictionary):\n    '''\n    Write a function to unflatten a given dictionary.\n    '''\n    if not dictionary:\n        return dictionary\n    if type(dictionary[0]) == dict:\n        return unflatten_dict(dictionary[0]) + unflatten_dict(dictionary[1:])\n    else:\n        return {k: unflatten_dict(v) for k,v in dictionary.items()}\n    \n    \ndef unflatten_path(path):\n    '''\n    Write a function to unflatten a given path structure.\n    '''\n    if not path:\n        return path\n    if type(path[0]) == list:\n        return unflatten_path(path[0]) + unflatten_path(path[1:])\n    else:\n        return [flatten_path(path[i:i+2]) for i in range(0, len(path))]\n    \n    \ndef unflatten_unique_dict(dictionary):\n    '''\n    Write a function to unflatten a given dictionary.\n    '''\n    if not dictionary:\n        return dictionary\n    if type(dictionary[0]) == dict:\n        return unflatten_unique_dict(dictionary[0]) + unflatten_unique_dict(dictionary[1:])\n    else:\n        return {k: unflatten_unique_dict(v) for k,v in dictionary.items()}\n    \n    \ndef unflatten_unique_path(path):\n    '''\n    Write a function to unflatten a given path structure.\n    '''\n    if not path:\n        return path\n    if type(path[0]) == list:\n        return unflatten_unique_path(path[0]) + unflatten_unique_path(path[1:])\n    else:\n        return [flatten_unique_path(path[i:i+2]) for i in range(0, len(path))]\n    \n    \ndef unflatten_unique_list(list1):\n    '''\n    Write a function to unflatten a given list.\n    '''\n    if not list1:\n        return list()\n    if type(list1[0]) == list:\n        return unflatten_unique_list(list1[0]) + unflatten_unique_list(list1[1:])\n    else:\n        return [list1[i] for i in range(0, len(list1))] + [list1[i] for i in range(0, len(list1))]\n    \n    \ndef unflatten_uniqu"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten = []\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for sublist in list1:\n        for item in sublist:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for el in list1:\n        if type(el) is list:\n            for item in flatten_list(el):\n                result.append(item)\n        else:\n            result.append(el)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) == list:\n        flat_list = []\n        for item in list1:\n            if type(item) == list:\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    else:\n        return list1\n    \ndef get_type(x):\n    '''\n    Given a Python object, return its data type.\n    '''\n    if hasattr(x,'__iter__'):\n        return type(x)\n    else:\n        return type(x)\n    \ndef load_data(filename):\n    '''\n    Given a filename, read and return the data as a Python object.\n    '''\n    # This is mostly a copy from string\n    try:\n        with open(filename) as f:\n            data = f.read()\n            return eval(data)\n    except:\n        return None\n    \ndef test_string_recursion(func, *args, **kwargs):\n    '''\n    Determine the tree structure of a function.\n    '''\n    args = args[0]\n    if isinstance(args, list):\n        for item in args:\n            test_string_recursion(func, item, *args, **kwargs)\n    else:\n        if args == '__builtins__':\n            return '__builtins__'\n        if args == '__builtins__.__dict__':\n            return '__builtins__.__dict__'\n        if args == '__builtins__.__doc__':\n            return '__builtins__.__doc__'\n        if args == '__builtins__.__file__':\n            return '__builtins__.__file__'\n        if args == '__builtins__.__globals__':\n            return '__builtins__.__globals__'\n        if args == '__builtins__.__loader__':\n            return '__builtins__.__loader__'\n        if args == '__builtins__.__name__':\n            return '__builtins__.__name__'\n        if args == '__builtins__.__package__':\n            return '__builtins__.__package__'\n        if args == '__builtins__.__doc__':\n            return '__builtins__.__doc__'\n        if args == '__builtins__.__code__':\n            return '__builtins__.__code__'\n        if args == '__builtins__.__mro__':\n            return '__builtins__.__mro__'\n        if args == '__builtins__.__module__':\n            return '__builtins__.__module__'\n        if args == '__builtins__.__dict__':\n            return '__builtins__.__dict__'\n        if args == '__builtins__.__loader__':\n            return '__builtins__.__loader__'\n        if args == '__builtins__.__name__':\n            return '__builtins__.__name__'\n        if args == '__builtins__.__package__':\n            return '__builtins__.__package__'\n        if args == '__builtins__.__doc__':\n            return '__builtins__.__doc__'\n        if args == '__builtins__.__path__':\n            return '__builtins__.__path__'\n        if args == '__builtins__.__file__':\n            return '__builtins__.__file__'\n        if args == '__builtins__.__doc__':\n            return '__builtins__.__doc__'\n        if args == '__builtins__.__mro__':\n            return '__builtins__.__mro__'\n        if args == '__builtins__.__module__':\n            return '__builtins__.__module__'\n    return func(*args, **kwargs)\n    \ndef get_dirs(module):\n    '''\n    Given a module, return a list of directory names.\n    '''\n    if hasattr(module,'__file__'):\n        return [module.__file__]\n    elif hasattr(module,'__path__'):\n        return [dir for dir in module.__path__]\n    else:\n        return []\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for item in list1:\n        if type(item) == list:\n            new_list.extend(flatten_list(item))\n        else:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for tup in stdata:\n        tup_agg = tup[1]\n        if(tup_agg > max_agg):\n            max_agg = tup_agg\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    return max(d.values())\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    return min(d.values())\ndef std_aggregate(stdata):\n    '''\n    Write a function to calculate the standard deviation from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    return (d['average']-d['std'])**2\ndef mean_aggregate(stdata):\n    '''\n    Write a function to calculate the mean aggregate from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    return d['average']\ndef avg_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    return d['average']\ndef avg_aggregate_fisher(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    s1 = 0.0\n    s2 = 0.0\n    for i in d.values():\n        s1+=i\n    for i in d.values():\n        s2+=i\n    return (s1/len(d))*(s2/len(d))\ndef avg_aggregate_std(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    s1 = 0.0\n    s2 = 0.0\n    for i in d.values():\n        s1+=i\n    for i in d.values():\n        s2+=i\n    return (s1/len(d))*(s2/len(d))\ndef avg_aggregate_std_fisher(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    s1 = 0.0\n    s2 = 0.0\n    for i in d.values():\n        s1+=i\n    for i in d.values():\n        s2+=i\n    return (s1/len(d))*(s2/len(d))\ndef average_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    s1 = 0.0\n    s2 = 0.0\n    for i in d.values():\n        s1+=i\n    for i in d.values():\n        s2+=i\n    return (s1/len(d))*(s2/len(d))\ndef standard_deviation(stdata):\n    '''\n    Write a function to calculate the standard deviation from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    s1 = 0.0\n    s2 = 0.0\n    for i in d.values():\n        s1+=i\n    for i in d.values():\n        s2+=i\n    return (s1/len(d))*(s2/len(d))\ndef mean_aggregate_fisher(stdata):\n    '''\n    Write a function to calculate the mean aggregate from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    s1 = 0.0\n    s2 = 0.0\n    for i in d.values():\n        s1+=i\n    for i in d.values():\n        s2+=i\n    return (s1/len(d))*(s2/len(d))\ndef mean_aggregate_std(stdata):\n    '''\n    Write a function to calculate the mean aggregate from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    s1 = 0.0\n    s2 = 0.0\n    for i in d.values():\n        s1+=i\n    for i in d.values():\n        s2+=i\n    return (s1/len(d))*(s2/len(d))\ndef std_aggregate_fisher(stdata):\n    '''\n    Write a function to calculate the standard deviation from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    s1 = 0.0\n    s2 = 0.0\n    for i in d.values():\n        s1+=i\n    for i in d.values():\n        s2+=i\n    return (s1/len(d))*(s2/len(d))\ndef std_aggregate_std(stdata):\n    '''\n    Write a function to calculate the standard deviation from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    s1 = 0.0\n    s2 = 0.0\n    for i in d.values():\n        s1+=i\n    for i in d.values():\n        s2+=i\n    return (s1/len(d))*(s2/len(d))\ndef sd_aggregate_std(stdata):\n    '''\n    Write a function to calculate the standard deviation from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    s1 = 0.0\n    s2 = 0.0\n    for i in d.values():\n        s1+=i\n    for i in d.values():\n        s2+=i\n    return (s1/len(d))*(s2/len(d))\ndef sd_aggregate_mean(stdata):\n    '''\n    Write a function to calculate the standard deviation from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdata:\n        d[i]+=k\n        d[j]+=k\n    s1 = 0.0\n    s2 = 0.0\n    for i in d.values():\n        s1+=i\n    for i in d.values():\n        s2+=i\n    return (s1/len(d))*(s2/len(d))\ndef sd_aggregate_std_mean(stdata):\n    '''\n    Write a function to calculate the standard deviation from the list of tuples.\n    '''\n    d = defaultdict(float)\n    for (i,j,k) in stdat"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for record in stdata:\n        max_aggregate = max(max_aggregate, record[1])\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if (sdata[2])=='*':\n            i=i+1\n            agg=agg+sdata[1]\n        elif (sdata[2])=='+' or (sdata[2])=='-':\n            agg=agg+sdata[1]\n        else:\n            agg=agg+sdata[1]\n    return agg\ndef max_aggregate_1(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if (sdata[2])=='*':\n            i=i+1\n            agg=agg+sdata[1]\n        elif (sdata[2])=='+' or (sdata[2])=='-':\n            agg=agg+sdata[1]\n        else:\n            agg=agg+sdata[1]\n    return agg\ndef max_aggregate_2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if (sdata[2])=='*' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        elif (sdata[2])=='+' or (sdata[2])=='-':\n            agg=agg+sdata[1]\n        else:\n            agg=agg+sdata[1]\n    return agg\ndef max_aggregate_3(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if (sdata[2])=='*' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        elif (sdata[2])=='+' or (sdata[2])=='-':\n            agg=agg+sdata[1]\n        else:\n            agg=agg+sdata[1]\n    return agg\ndef max_aggregate_4(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if (sdata[2])=='+' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        elif (sdata[2])=='*' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        else:\n            agg=agg+sdata[1]\n    return agg\ndef max_aggregate_5(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if (sdata[2])=='*' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        elif (sdata[2])=='+' or (sdata[2])=='-':\n            agg=agg+sdata[1]\n        else:\n            agg=agg+sdata[1]\n    return agg\ndef max_aggregate_6(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if (sdata[2])=='+' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        elif (sdata[2])=='*' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        else:\n            agg=agg+sdata[1]\n    return agg\ndef max_aggregate_7(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if (sdata[2])=='+' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        elif (sdata[2])=='*' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        else:\n            agg=agg+sdata[1]\n    return agg\ndef max_aggregate_8(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if (sdata[2])=='+' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        elif (sdata[2])=='*' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        else:\n            agg=agg+sdata[1]\n    return agg\ndef max_aggregate_9(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if (sdata[2])=='+' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        elif (sdata[2])=='*' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        else:\n            agg=agg+sdata[1]\n    return agg\ndef max_aggregate_10(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if (sdata[2])=='+' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        elif (sdata[2])=='*' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        else:\n            agg=agg+sdata[1]\n    return agg\ndef max_aggregate_11(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if (sdata[2])=='*' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        elif (sdata[2])=='+' or (sdata[2])=='-':\n            agg=agg+sdata[1]\n        else:\n            agg=agg+sdata[1]\n    return agg\ndef max_aggregate_12(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if (sdata[2])=='*' or (sdata[2])=='-':\n            i=i+1\n            agg=agg+sdata[1]\n        elif (sdata[2])=='+' or (sdata[2])=='-':\n            agg=agg+sdata[1]\n        else:\n            agg=agg+sdata[1]\n    return agg\ndef max_aggregate_13(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    i=0\n    agg=0\n    for sdata in stdata:\n        if "
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    output = 0\n    for val in stdata:\n        output = max(output, val[0])\n    return output\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    v = 0\n    d = defaultdict(int)\n    for i in stdata:\n        d[i[0]] += i[1]\n        v += i[1]\n    return v, max(d.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = 0\n    for item in stdata:\n        aggregate = max(aggregate, item[1])\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    tot = 0\n    for tup in stdata:\n        tot += tup[2]\n    return tot/len(stdata)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for data in stdata:\n        if data[2] > max_aggregate:\n            max_aggregate = data[2]\n        elif data[2] == max_aggregate:\n            pass\n        else:\n            max_aggregate = data[2]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            max_agg = max(max_agg, stdata[i][1] + stdata[j][1])\n    return max_agg\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    L = n\n    R = 0\n    for i in range(L):\n        R += (1 << (L-i-1))\n    return R\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    while n > 0:\n        for i in range(n-1,n):\n            if int(bin(n)[n-i-1:n:i],2) == int(bin(n)[n-i:n:i],2):\n                count += 1\n        n -= 1\n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def binary_seq(n): \n        if n == 0: \n            return 0\n        if n == 1: \n            return 1\n        return binary_seq(n-1) + binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = int(n)\n    #base case\n    if n == 0:\n        return 0\n    # iterate\n    else:\n        count = 0\n        # iterate\n        for i in range(n):\n            # take first n bits\n            first = bin(i)[2:]\n            # iterate\n            for j in range(i, n, 1):\n                # take last n bits\n                last = bin(j)[2:]\n                # iterate\n                if first == last:\n                    count += 1\n        # return count\n        return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary(n, d): \n        if (n == 0): \n            return 0\n        else:\n            return d + count_binary(n - 1, d * 2)\n    return count_binary(n, 0)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    total = 0\n    for i in range(2*n):\n        if (i%2 == 0):\n            total += 1\n    return total\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    i=0\n    j=n-1\n    count=0\n    while(i<j):\n        if(bin(i)[-1]==bin(j)[-1]):\n            count+=1\n            i+=1\n            j-=1\n        else:\n            i+=1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #FIRST\n    #Take the input and compute the sum of 2^(n-1) from the input\n    i = 0\n    while i < n:\n        #Sum the 2^i from input to output\n        sum_1 = sum([i]*2**i)\n        #Check if sum of two 2^i is same as sum of last two bits\n        if sum_1 == sum(list(bin(i).replace('0b',''))):\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n <= 0: \n        return 0\n    else: \n        return count_binary_seq(n - 1) + count_binary_seq(n - 2)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if type(value) is dict:\n            depth = depth + dict_depth(value)\n        elif type(value) is list:\n            depth = depth + len(value)\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # create a dictionary\n    d = {}\n    # iterate through the dictionary\n    for k in d.keys():\n        # add the key to the dictionary\n        d[k] = []\n    # return the number of items and the depth\n    return len(d), d\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    \n    size = len(d.keys())\n    if size == 0:\n        return -1\n    \n    left = 1\n    right = 1\n    \n    while right < size:\n        if d.get(right, None):\n            left += 1\n        else:\n            right += 1\n        \n        if left == right:\n            return left\n    return -1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return 0\n    if len(d) == 1:\n        return 0\n    return 1 + max(dict_depth(d[1:]), dict_depth(d[:-1]) )\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # print(type(d))\n    max_depth = 0\n    for key in d:\n        # print(type(d[key]))\n        if type(d[key]) == dict:\n            # print(type(d[key]['name']))\n            # print(type(d[key]['address']))\n            # print(type(d[key]['bedrooms']))\n            # print(type(d[key]['bathrooms']))\n            depth = dict_depth(d[key]) + 1\n            # print(depth)\n            if depth > max_depth:\n                max_depth = depth\n    # print(max_depth)\n    return max_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if type(d[key]) == dict:\n            depth += dict_depth(d[key])\n        else:\n            depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    c = 0\n    for k in d:\n        if type(d[k]) == int:\n            c = max(c, d[k])\n        elif type(d[k]) == list:\n            c = max(c, dict_depth(d[k]))\n    return c\n    \n    \ndef dict_unique(d):\n    '''\n    Write a function to find the number of unique values in a dictionary.\n    '''\n    c = 0\n    for k in d:\n        if type(d[k]) == int:\n            c += 1\n        elif type(d[k]) == list:\n            for i in d[k]:\n                if type(d[k]) == int:\n                    c += 1\n                else:\n                    c = 0\n    return c\n    \n    \n    \ndef dict_count(d):\n    '''\n    Write a function to count the number of items in a dictionary.\n    '''\n    return len(d)\n    \n    \ndef dict_exception_message(d):\n    '''\n    Write a function to get a message when a dictionary raises an exception.\n    '''\n    return \"The dictionary is empty!\"\n    \n    \ndef dict_get(d, i):\n    '''\n    Return the value at index i of a dictionary.\n    '''\n    return d[i]\n    \n    \ndef dict_set(d, i, v):\n    '''\n    Update an existing key in a dictionary.\n    '''\n    d[i] = v\n    return d\n    \n    \ndef dict_contains(d, k):\n    '''\n    Check whether a dictionary contains a key k.\n    '''\n    if k in d:\n        return True\n    else:\n        return False\n    \n    \ndef dict_remove(d, k):\n    '''\n    Remove an existing key from a dictionary.\n    '''\n    if k in d:\n        d.pop(k)\n        return True\n    else:\n        return False\n    \n    \ndef dict_clear(d):\n    '''\n    Remove all keys from a dictionary.\n    '''\n    d.clear()\n    return True\n    \n    \ndef dict_size(d):\n    '''\n    Return the number of keys in a dictionary.\n    '''\n    return len(d)\n    \n    \ndef dict_keys(d):\n    '''\n    Return a list of the keys in a dictionary.\n    '''\n    return d.keys()\n    \n    \ndef dict_values(d):\n    '''\n    Return a list of the values in a dictionary.\n    '''\n    return d.values()\n    \n    \ndef dict_items(d):\n    '''\n    Return a list of the (key, value) pairs in a dictionary.\n    '''\n    return d.items()\n    \n    \ndef dict_keys_pairs(d):\n    '''\n    Return a list of the (key, value) pairs in a dictionary, where the key\n    string is constructed using the concatenation of the letters of the\n    word in the key.\n    '''\n    return [(k, d[k]) for k in d]\n    \n    \ndef dict_values_pairs(d):\n    '''\n    Return a list of the (value, key) pairs in a dictionary, where the value\n    string is constructed using the concatenation of the letters of the\n    word in the value.\n    '''\n    return [(v, k) for (k, v) in d.items()]\n    \n    \ndef dict_items_pairs(d):\n    '''\n    Return a list of the (value, key) pairs in a dictionary, where the value\n    string is constructed using the concatenation of the letters of the\n    word in the value.\n    '''\n    return [(v, k) for (v, k) in d.items()]\n    \n    \ndef dict_items_values(d):\n    '''\n    Return a list of the (value, key) pairs in a dictionary, where the value\n    string is constructed using the concatenation of the letters of the\n    word in the value.\n    '''\n    return [(v, k) for (k, v) in d.items()]\n    \n    \ndef dict_clear_values(d):\n    '''\n    Remove all values from a dictionary.\n    '''\n    d.clear()\n    return True\n    \n    \ndef dict_get_key(d, i):\n    '''\n    Return the (key, value) pair associated with index i of a dictionary.\n    '''\n    return d[i]\n    \n    \ndef dict_get_value(d, i):\n    '''\n    Return the value associated with index i of a dictionary.\n    '''\n    return d[i]\n    \n    \ndef dict_get_key_value(d, i):\n    '''\n    Return the (key, value) pair associated with index i of a dictionary.\n    '''\n    return d[i]\n    \n    \ndef dict_get_value_key(d, i):\n    '''\n    Return the value associated with index i of a dictionary.\n    '''\n    return d[i]\n    \n    \ndef dict_get_all_key(d):\n    '''\n    Return a list of all (key, value) pairs associated with a dictionary.\n    '''\n    return d.keys()\n    \n    \ndef dict_get_all_value(d):\n    '''\n    Return a list of all (key, value) pairs associated with a dictionary.\n    '''\n    return d.values()\n    \n    \ndef dict_get_all_key_value(d):\n    '''\n    Return a list of all (key, value) pairs associated with a dictionary.\n    '''\n    return [(k, v) for (k, v) in d.items()]\n    \n    \ndef dict_get_all_key_value_pairs(d):\n    '''\n    Return a list of all (key, value) pairs associated with a dictionary, where the\n    key string is constructed using the concatenation of the letters of the\n    word in the key.\n    '''\n    return [(k, v) for (k, v) in d.items()]\n    \n    \ndef dict_set_all_key(d, k):\n    '''\n    Update all (key, value) pairs associated with a dictionary.\n    '''\n    d[k] = k\n    return True\n    \n    \ndef dict_remove_all_key(d, k):\n    '''\n    Remove all (key, value) pairs associated with a dictionary.\n    '''\n    if k in d:\n        del d[k]\n        return True\n    else:\n        return False\n    \n    \ndef dict_remove_all_key_value(d, k):\n    '''\n    Remove all (key, value) pairs associated with a dictionary.\n    '''\n    if k in d:\n        del d[k]\n        return True\n    else:\n        return False\n    \n    \ndef dict_count_key(d):\n    '''\n    Return the number of (key, value) pairs in a dictionary.\n    '''\n    return len(d)\n    \n    \ndef dict_count_value(d):\n    '''\n    Return the number of (key, value) pairs in a dictionary.\n    '''\n    return len(d)\n    \n    \ndef dict_contains_key(d, k):\n    '''\n    Check whether a dictionary contains a key k.\n    '''\n    return k in d\n    \n    \ndef dict_contains_value(d, v):\n    '''\n    Check whether a dictionary contains a value v.\n    '''\n    return v in d\n    \n    \ndef dict_contains_key_value(d, k, v):\n    '''\n    Check whether a dictionary contains a key k and a value v.\n    '''\n    return (k, v) in d\n    \n    \ndef dict_contains_key_value_pairs(d, k, v):\n    '''\n    Check whether a dictionary contains a key k and a value v.\n    '''\n    return [(k, v) for (k, v) in d.items() if k == k]\n    \n    \ndef dict_get_key_value_pairs(d, i):\n    '''\n    Return a list of the (value, ke"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 1\n    n = len(d.items())\n    while n > 0:\n        count += 1\n        n = n - 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d2 = dict()\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = dict_depth(v)\n            if depth > 0:\n                d2[k] = depth + 1\n            else:\n                d2[k] = 0\n        else:\n            d2[k] = 0\n    return d2\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index == len(arr) :\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index > len(arr):\n        raise ValueError(\"The index value is out of range.\")\n    if rotations < 1 : \n        raise ValueError(\"The rotations value is out of range.\")\n    if ranges < 1 : \n        raise ValueError(\"The ranges value is out of range.\")\n    if index >= len(arr) or index < 0 : \n        raise ValueError(\"The index is out of range.\")\n    if rotations == 1:\n        return arr[index]\n    else:\n        return find_Element(arr,ranges,rotations-1,index)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (index % 2 == 0) :\n        ranges = [ranges[index] + ranges[index - 1]]\n    else :\n        ranges = [ranges[index] + ranges[index - 1]] + [ranges[index - 1] + ranges[index + 1]]\n    for rotations in range(rotations) :\n        if index!= len(arr)-1 : \n            if (arr[index + 1] - arr[index]) == (ranges[index] - ranges[index + 1]) :\n                return arr[index]\n        else :\n            return arr[index]\n    \n    \ndef get_element_sum(arr,ranges) :\n    '''\n    Write a python function to find element at a given index of a given element sum.\n    '''\n    if ranges[0]!= ranges[1] :\n        return arr[ranges[1]] - arr[ranges[0]]\n    else :\n        return arr[ranges[1]] - arr[ranges[0]]\n    \n    \n    \ndef get_elements_sum(arr,ranges) :\n    '''\n    Write a python function to find element at a given index of a given element sum.\n    '''\n    sum = 0\n    for index in range(len(arr)):\n        sum += arr[index]\n        sum -= arr[index]\n        sum += arr[index]\n    sum += arr[len(arr)-1]\n    return sum\n    \n    \ndef get_elements_sum_dist(arr,ranges) :\n    '''\n    Write a python function to find element at a given index of a given element sum.\n    '''\n    sum = 0\n    for index in range(len(arr)-1):\n        sum += arr[index]\n        sum -= arr[index]\n        sum += arr[index]\n    return sum\n    \n    \ndef get_elements_sum_dist_after_rotation(arr,ranges) :\n    '''\n    Write a python function to find element at a given index of a given element sum.\n    '''\n    sum = 0\n    index = ranges[0]\n    for index in range(len(arr)-1):\n        sum += arr[index]\n        sum -= arr[index]\n        sum += arr[index]\n    sum += arr[index]\n    return sum\n    \n    \ndef get_elements_sum_dist_after_rotation_index(arr,ranges,rotations) :\n    '''\n    Write a python function to find element at a given index of a given element sum.\n    '''\n    sum = 0\n    index = ranges[0]\n    for index in range(len(arr)-1):\n        sum += arr[index]\n        sum -= arr[index]\n        sum += arr[index]\n    sum += arr[index]\n    return sum\n    \n    \ndef get_rotations_and_rotation_index(arr,ranges) :\n    '''\n    Write a python function to find element at a given index of a given element sum.\n    '''\n    rotations = 0\n    rotations = (len(arr) - ranges[1])\n    return rotations,rotations\n    \n    \ndef get_rotations_and_rotation_index_after_rotation(arr,ranges,rotations) :\n    '''\n    Write a python function to find element at a given index of a given element sum.\n    '''\n    rotations = 0\n    rotations = (len(arr) - ranges[1])\n    return rotations,rotations\n    \n    \n    \ndef get_rotations_and_rotation_index_after_rotation_index(arr,ranges,rotations,rotations_index) :\n    '''\n    Write a python function to find element at a given index of a given element sum.\n    '''\n    rotations = 0\n    rotations = (len(arr) - ranges[1])\n    return rotations,rotations\n    \n    \n    \ndef get_rotations_and_rotation_index_after_rotation_index_index(arr,ranges,rotations,rotations_index,rotations_index_index) :\n    '''\n    Write a python function to find element at a given index of a given element sum.\n    '''\n    rotations = 0\n    rotations = (len(arr) - ranges[1])\n    rotations_index = len(arr) - ranges[1]\n    return rotations,rotations_index,rotations_index_index\n    \n    \n    \n    \ndef get_rotations_and_rotation_index_after_rotation_index_index_index(arr,ranges,rotations,rotations_index,rotations_index_index,rotations_index_index_index) :\n    '''\n    Write a python function to find element at a given index of a given element sum.\n    '''\n    rotations = 0\n    rotations = (len(arr) - ranges[1])\n    rotations_index = len(arr) - ranges[1]\n    rotations_index_index = len(arr) - ranges[1]\n    return rotations,rotations_index,rotations_index_index\n    \n    \n    \n    \ndef get_rotations_and_rotation_index_after_rotation_index_index_index_index(arr,ranges,rotations,rotations_index,rotations_index_index,rotations_index_index_index,rotations_index_index_index) :\n    '''\n    Write a python function to find element at a given index of a given element sum.\n    '''\n    rotations = 0\n    rotations = (len(arr) - ranges[1])\n    rotations_index = len(arr) - ranges[1]\n    rotations_index_index = len(arr) - ranges[1]\n    rotations_index_index_index = len(arr) - ranges[1]\n    return rotations,rotations_index,rotations_index_index,rotations_index_index_index\n    \n    \n    \n    \ndef get_rotations_and_rotation_index_after_rotation_index_index_index_index_index(arr,ranges,rotations,rotations_index,rotations_index_index,rotations_index_index,rotations_index_index_index,rotations_index_index_index_index) :\n    '''\n    Write a python function to find element at a given index of a given element sum.\n    '''\n    rotations = 0\n    rotations = (len(arr) - ranges[1])\n    rotations_index = len(arr) - ranges[1]\n    rotations_index_index = len(arr) - ranges[1]\n    rotations_index_index_index = len(arr) - ranges[1]\n    rotations_index_index_index_index = len(arr) - ranges[1]\n    return rotations,rotations_index,rotations_index_index,rotations_index_index_index,rotations_index_index_index_index\n    \n    \n    \n    \ndef get_rotations_and_rotation_index_after_rotation_index_index_index_index_index_index(arr,ranges,rotations,rotations_index,rotations_index_index,rotations_index_index,rotations_index_index,rotations_index_index_index,rotations_index_index_index,rotations_index_index_index_index) :\n    '''\n    Write a python function to find element at a given index of a given element sum.\n    '''\n    rotations = 0\n    rotations = (len(arr) - ranges[1])\n    rotations_index = len(arr) - ranges[1]\n    rotations_index_index = len(arr) - ranges[1]\n    rotations_index_index_index = len(arr) - ranges[1]\n    rotations_index_index_index_index = len(arr) - ranges[1]\n    return rotations,rotations_index,rotations_index_index,rotations_index_index_index,rotations_index_index_index_index\n    \n    \n    \n    \ndef get_rotations_and_rotation_index_after_rotation_index_index_index_index_index_index(arr,ranges,rotations,rotations_index,rotations_index_index,rotations_inde"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(arr) :\n        return 0\n    \n    elif (len(ranges) == 0) :\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)):\n        for j in range(i,len(ranges)):\n            if(index==ranges[i][0] and index==ranges[j][1]):\n                return arr[ranges[i][0]][ranges[i][1]]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Return -1 if not found\n    if (ranges[0]<0 or ranges[1]>=len(arr)-1 or rotations[0]>=len(rotations)-1 or rotations[1]<0 or rotations[1]>=len(rotations)-1) :\n        return -1\n    \n    # If element is present, return index\n    if (arr[ranges[0]]<=arr[ranges[1]]):\n        return ranges[0]\n    else:\n        return ranges[1]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if arr[index] == ranges[0] :\n        return arr[index]\n    \n    for i in range(0,len(arr)) :\n        if arr[i] == ranges[0] :\n            return arr[i]\n        if arr[i] < ranges[1] and arr[i] >= ranges[0] :\n            return find_Element(arr,ranges,rotations,i)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)) :\n        if(rotations[i]==index) :\n            return arr[i]\n        \n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[ranges[index][0]:ranges[index][1]]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                break\n            #If it is, then it is the element we need.\n            elif i+1 == len(ranges):\n                return arr[i]\n            #Else it must be the first element.\n            else:\n                return arr[i+1]\n    #If not found, return None.\n    return None\n    \ndef check_Element(arr,ranges,rotations,index) : \n    '''\n    Write a python function to check if the element in given range is in given array.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                return arr[i]\n            #Else it must be the first element.\n            else:\n                return arr[i+1]\n    #If not found, return None.\n    return None\n    \ndef find_max_index(arr,ranges) :\n    '''\n    Write a python function to find the maximum index in given array.\n    '''\n    return (len(ranges) - 1) * (len(ranges) - 1) // 2\n    \ndef remove_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to remove an element from the given array, after number of rotations.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                break\n            #If it is, then it is the element we need.\n            elif i+1 == len(ranges):\n                arr[i] = arr[i]\n                return\n            #Else it must be the first element.\n            else:\n                arr[i+1] = arr[i]\n                return\n    #If not found, return None.\n    return None\n    \ndef rotate_Array(arr,rotations) :\n    '''\n    Write a python function to rotate the given array.\n    '''\n    return arr[rotations] + arr[0:rotations] + arr[rotations + 1:]\n    \ndef get_Rotations(ranges) :\n    '''\n    Write a python function to get the number of rotations from given ranges.\n    '''\n    return len(ranges)\n    \ndef check_Overlap(arr,ranges) :\n    '''\n    Write a python function to check if the overlap of the given array and ranges is true.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= arr[i] <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                return True\n            #Else it must be the first element.\n            else:\n                return False\n    #If not found, return False.\n    return False\n    \ndef remove_Overlap(arr,ranges) :\n    '''\n    Write a python function to remove the overlap of the given array and ranges.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= arr[i] <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                arr[i] = arr[i]\n                return\n            #Else it must be the first element.\n            else:\n                arr[i+1] = arr[i]\n                return\n    #If not found, return None.\n    return None\n    \ndef count_Elements(arr) :\n    '''\n    Write a python function to count the number of elements in the given array.\n    '''\n    return arr.count(1)\n    \ndef remove_Elements(arr,ranges) :\n    '''\n    Write a python function to remove the given elements from the given array.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= arr[i] <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                arr[i] = arr[i]\n                return\n            #Else it must be the first element.\n            else:\n                arr[i+1] = arr[i]\n                return\n    #If not found, return None.\n    return None\n    \ndef get_Length(arr) :\n    '''\n    Write a python function to get the length of the given array.\n    '''\n    return len(arr)\n    \ndef calculate_Max_Element(arr,ranges) :\n    '''\n    Write a python function to find the maximum element in the given array.\n    '''\n    return max(arr)\n    \ndef check_Max_Element(arr,ranges) :\n    '''\n    Write a python function to check if the maximum element is in the given array.\n    '''\n    return arr.count(max(arr)) == 1\n    \ndef select_Max(arr,ranges) :\n    '''\n    Write a python function to select the maximum element from the given array.\n    '''\n    return max(arr)\n    \ndef get_Max_Index(arr,ranges) :\n    '''\n    Write a python function to get the maximum element index.\n    '''\n    return find_Max_Index(arr,ranges)\n    \ndef find_Min(arr,ranges) :\n    '''\n    Write a python function to find the minimum element in the given array.\n    '''\n    return min(arr)\n    \ndef check_Min(arr,ranges) :\n    '''\n    Write a python function to check if the minimum element is in the given array.\n    '''\n    return arr.count(min(arr)) == 1\n    \ndef remove_Min(arr,ranges) :\n    '''\n    Write a python function to remove the minimum element from the given array.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= arr[i] <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                arr[i] = arr[i]\n                return\n            #Else it must be the first element.\n            else:\n                arr[i+1] = arr[i]\n                return\n    #If not found, return None.\n    return None\n    \ndef remove_Min(arr,ranges) :\n    '''\n    Write a python function to remove the minimum element from the given array.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= arr[i] <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                arr[i] = arr[i]\n                return\n            #Else it must be the first element.\n            else:\n                arr[i+1] = arr[i]\n                return\n    #If not found, return None.\n    return None\n    \ndef find_Ranges(arr,ranges) :\n    '''\n    Write a python function to find the ranges of the given array.\n    '''\n    #Check the range for the given index.\n    for i in range(len(ranges)):\n        if ranges[i][0] <= arr[i] <= ranges[i][1]:\n            #Check if the range is inside the array.\n            if i == len(ranges) - 1:\n                return ranges\n            #Else it must be the first element.\n            els"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #code here\n    try:\n        pattern = 'p'\n        p = words.index(pattern)\n        pattern = words[p + 1]\n        p = p + 2\n        pattern = pattern.replace(\"p\",\" \")\n        pattern = pattern.split()\n        pattern = \" \".join(pattern)\n    except ValueError:\n        pattern = words[1]\n    return pattern\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words_list = []\n    for word in words:\n        if word[0] == 'p':\n            words_list.append(word)\n    return words_list\ndef end_withp(words):\n    '''\n    Write a function that takes a list of words and returns a list of words starting with letter 'p'.\n    '''\n    words_list = []\n    for word in words:\n        if word[-1] == 'p':\n            words_list.append(word)\n    return words_list\ndef expand(words, lexicon):\n    '''\n    Write a function that takes a list of words and a lexicon dictionary and returns a list of words starting with letter 'p'.\n    '''\n    words_list = []\n    for word in words:\n        if word[0] in lexicon:\n            words_list.append(word)\n    return words_list\ndef generate_pattern(words):\n    '''\n    Write a function that takes a list of words and returns a list of words starting with letter 'p'.\n    '''\n    words_list = []\n    for word in words:\n        if word[0] == 'p':\n            words_list.append(word)\n    return words_list\ndef check_matches(word, pattern):\n    '''\n    Check if word matches a pattern.\n    '''\n    if re.search(word, pattern):\n        return True\n    else:\n        return False\ndef generate_matches(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches2(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches3(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches4(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches5(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches6(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches7(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches8(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches9(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches10(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches11(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches12(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches13(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches14(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches15(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches16(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches17(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches18(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches19(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word in words:\n        if word[0] in lexicon:\n            matching_words.append(word)\n    return matching_words\ndef generate_matches20(words, lexicon):\n    '''\n    Generate a list of words starting with letter 'p' that match a list of words.\n    '''\n    matching_words = []\n    for word i"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pos = 0\n    for i in range(len(words)):\n        if words[i][0]=='p':\n            pos = i\n            break\n    return (words[pos][1], words[pos][1])\ndef start_withx(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'x'.\n    '''\n    pos = 0\n    for i in range(len(words)):\n        if words[i][0]=='x':\n            pos = i\n            break\n    return (words[pos][1], words[pos][1])\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0] == 'p':\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    words.sort()\n    if words[0][0] == 'p':\n        return words[0], words[1][1:]\n    else:\n        return words[1], words[0][1:]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # words = ['p','p','p','p','p','p']\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return (words[i],i)\n    return (words[i],i)\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word_p=[]\n    for word in words:\n        if word[0]=='p':\n            word_p.append(word)\n    return word_p\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith(\"p\"):\n            return(word, word.replace(\"p\", \"\"))\n    return(\"-\", \"-\")\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # TODO:  Remove the punctuation\n    return words[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i] == 'p':\n            print(words[i])\n            return words[i]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n <= 0:\n        return 0\n    if k == 1 or k == len(a):\n        return a[0]\n    if index >= n:\n        return max(a[index], a[index - n] + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k == 0:\n        return a[index]\n    if k > index:\n        return max(a[index], a[index-k]+max_sum_increasing_subseq(a, n, index-1, k-1))\n    return max(a[index], a[index-k]+a[index-k-1])\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    prefix = [[-1 for i in range(n + 1)] for j in range(k + 1)]\n    for i in range(k + 1):\n        prefix[i][0] = i\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if j - i + 1 < k:\n                prefix[0][j] = -1\n            else:\n                prefix[0][j] = max(prefix[0][j - i + 1] + a[i - 1], prefix[0][j])\n    return prefix[k][n]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    current_max_sum = 0\n    nxt_max_sum = 0\n    left = 0\n    right = index\n    \n    for i in range(index, n):\n        if a[i] > a[i-1] and a[i] > nxt_max_sum:\n            nxt_max_sum = a[i]\n        if a[i] > a[i-1] and nxt_max_sum > a[i-1] + a[i]:\n            nxt_max_sum = a[i]\n            \n        current_max_sum = max(nxt_max_sum, current_max_sum)\n    \n    return current_max_sum + nxt_max_sum + a[index]\n    \ndef count_maximum_subsequence(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of a sub-sequence upto k from index and also including kth element which is after i, i.e., k > i.\n    '''\n    \n    current_max_sum = 0\n    nxt_max_sum = 0\n    left = 0\n    right = index\n    \n    for i in range(index, n):\n        if a[i] > a[i-1] and a[i] > nxt_max_sum:\n            nxt_max_sum = a[i]\n        if a[i] > a[i-1] and nxt_max_sum > a[i-1] + a[i]:\n            nxt_max_sum = a[i]\n            \n        current_max_sum = max(current_max_sum, nxt_max_sum)\n    \n    return current_max_sum + nxt_max_sum\n    \ndef max_subseq_length(a, n):\n    '''\n    Write a function to find the maximum length of a sub-sequence of a given length upto k.\n    '''\n    \n    current_max_sum = 0\n    nxt_max_sum = 0\n    left = 0\n    right = n\n    \n    for i in range(0, n):\n        if a[i] > a[i-1] and a[i] > nxt_max_sum:\n            nxt_max_sum = a[i]\n        if a[i] > a[i-1] and nxt_max_sum > a[i-1] + a[i]:\n            nxt_max_sum = a[i]\n            \n        current_max_sum = max(current_max_sum, nxt_max_sum)\n    \n    return current_max_sum + nxt_max_sum\n    \ndef subsets(a, n):\n    '''\n    Write a function to find all subsets of a given length.\n    '''\n    \n    current_subset = []\n    for i in range(0, n):\n        current_subset.append(a[i])\n        \n    return current_subse"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(n == 0 or index == 0):\n        return 0\n    if(a[index] > a[index-1]):\n        return max_sum_increasing_subseq(a, n-1, index-1, k)\n    return a[index] + max_sum_increasing_subseq(a, n-1, index, k-1)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    s = [0 for _ in range(n+1)]\n    s[1] = 1\n    for i in range(2,n+1):\n        s[i] = s[i-1] + s[i-2]\n    for i in range(n-k+1, -1, -1):\n        if i+k > n:\n            break\n        if s[i+k] > a[i+k]:\n            break\n        s[i+k] = s[i+k] + s[i+k-1]\n    return s[i+k]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[index] + max(a[index-k], a[index-k-1], a[index-k+1])\n    elif index < n:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    elif index == n-1:\n        return a[index]\n    else:\n        return max_sum_increasing_subseq(a, n, index-1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    pre_sum = -1 * a[0]\n    for i in range(1, n):\n        pre_sum += a[i]\n        if i < index:\n            pre_sum += a[i]\n            if pre_sum >= k:\n                return pre_sum\n    return -1\n    \n    \n    \n    \ndef max_sum_increasing_subseq_kth(a, n, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix till kth index and also including a given kth element which is after kth element.\n    '''\n    res = -1 * a[0]\n    for i in range(1, n):\n        res = max(res, a[i] + res)\n        if i < k:\n            res += a[i]\n    return res\n    \n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #print(a,n, index)\n    #if k == index:\n        #print(\"max sum: \",a[index],\"sum: \",sum(a[index:]) + a[index])\n        #return max(a[index:]) + a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return a[index]\n    if n == index + 1:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k - 1)\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k - 1))\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = tuplex[n:m]\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)<=n:\n        return tuplex\n    else:\n        return get_colon_tuplex(tuplex[:n],m,tuplex[n:])\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = list(tuplex)\n    n = len(tuplex)\n    i = n - 1\n    while i > 0:\n        if tuplex[i] < m:\n            tuplex[i-1] = tuplex[i]\n            tuplex[i] = m\n            i -= 1\n        else:\n            if tuplex[i] % m == 0:\n                m = tuplex[i]\n            else:\n                tuplex[i] = tuplex[i] % m\n                i -= 1\n    if n % m!= 0:\n        i = n - 1\n        while i > 0:\n            if tuplex[i] > m:\n                tuplex[i-1] = tuplex[i]\n                tuplex[i] = m\n                i -= 1\n            else:\n                if tuplex[i] % m == 0:\n                    m = tuplex[i]\n                else:\n                    tuplex[i] = tuplex[i] % m\n                    i -= 1\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # check that it's a tuple and is a tuple\n    if not is_tuple(tuplex):\n        return None\n    # check that its a sequence\n    if not is_sequence(tuplex):\n        return None\n    # get the first element in the tuple and make sure it's a sequence\n    i = 0\n    for element in tuplex:\n        if is_sequence(element):\n            break\n        i += 1\n    # if we've gotten a sequence, return it\n    if i < len(tuplex):\n        return tuplex[i]\n    else:\n        # if the sequence is empty, return the first element\n        return tuplex[0]\n    \ndef add_tuple(tuplex1,tuplex2,m,n):\n    '''\n    Write a function to add two tuples together.\n    '''\n    # first check that it's a tuple\n    if not is_tuple(tuplex1):\n        return None\n    # check that it's a sequence\n    if not is_sequence(tuplex2):\n        return None\n    # get the first element in the tuple and make sure it's a sequence\n    i = 0\n    for element in tuplex1:\n        if is_sequence(element):\n            break\n        i += 1\n    # if we've gotten a sequence, return it\n    if i < len(tuplex1):\n        return tuplex1[i]+tuplex2[i]\n    # if the sequence is empty, return the first element\n    return tuplex1[0]+tuplex2[0]\n    \ndef sub_tuple(tuplex1,tuplex2,m,n):\n    '''\n    Write a function to subtract two tuples.\n    '''\n    # first check that it's a tuple\n    if not is_tuple(tuplex1):\n        return None\n    # check that it's a sequence\n    if not is_sequence(tuplex2):\n        return None\n    # get the first element in the tuple and make sure it's a sequence\n    i = 0\n    for element in tuplex1:\n        if is_sequence(element):\n            break\n        i += 1\n    # if we've gotten a sequence, return it\n    if i < len(tuplex1):\n        return tuplex1[i]-tuplex2[i]\n    # if the sequence is empty, return the first element\n    return tuplex1[0]-tuplex2[0]\n    \ndef mul_tuple(tuplex1,tuplex2,m,n):\n    '''\n    Write a function to multiply two tuples.\n    '''\n    # first check that it's a tuple\n    if not is_tuple(tuplex1):\n        return None\n    # check that it's a sequence\n    if not is_sequence(tuplex2):\n        return None\n    # get the first element in the tuple and make sure it's a sequence\n    i = 0\n    for element in tuplex1:\n        if is_sequence(element):\n            break\n        i += 1\n    # if we've gotten a sequence, return it\n    if i < len(tuplex1):\n        return tuplex1[i]*tuplex2[i]\n    # if the sequence is empty, return the first element\n    return tuplex1[0]*tuplex2[0]\n    \ndef div_tuple(tuplex1,tuplex2,m,n):\n    '''\n    Write a function to divide two tuples.\n    '''\n    # first check that it's a tuple\n    if not is_tuple(tuplex1):\n        return None\n    # check that it's a sequence\n    if not is_sequence(tuplex2):\n        return None\n    # get the first element in the tuple and make sure it's a sequence\n    i = 0\n    for element in tuplex1:\n        if is_sequence(element):\n            break\n        i += 1\n    # if we've gotten a sequence, return it\n    if i < len(tuplex1):\n        return tuplex1[i]/tuplex2[i]\n    # if the sequence is empty, return the first element\n    return tuplex1[0]/tuplex2[0]\n    \ndef pow_tuple(tuplex1,tuplex2,m,n):\n    '''\n    Write a function to raise a tuple to a power.\n    '''\n    # first check that it's a tuple\n    if not is_tuple(tuplex1):\n        return None\n    # check that it's a sequence\n    if not is_sequence(tuplex2):\n        return None\n    # get the first element in the tuple and make sure it's a sequence\n    i = 0\n    for element in tuplex1:\n        if is_sequence(element):\n            break\n        i += 1\n    # if we've gotten a sequence, return it\n    if i < len(tuplex1):\n        return tuplex1[i]**tuplex2[i]\n    # if the sequence is empty, return the first element\n    return tuplex1[0]**tuplex2[0]\n    \ndef div_tuple_mod(tuplex1,tuplex2,m,n):\n    '''\n    Write a function to raise a tuple to a power and modulo.\n    '''\n    # first check that it's a tuple\n    if not is_tuple(tuplex1):\n        return None\n    # check that it's a sequence\n    if not is_sequence(tuplex2):\n        return None\n    # get the first element in the tuple and make sure it's a sequence\n    i = 0\n    for element in tuplex1:\n        if is_sequence(element):\n            break\n        i += 1\n    # if we've gotten a sequence, return it\n    if i < len(tuplex1):\n        return tuplex1[i]%tuplex2[i]\n    # if the sequence is empty, return the first element\n    return tuplex1[0]%tuplex2[0]\n    \ndef pow_tuple_mod(tuplex1,tuplex2,m,n):\n    '''\n    Write a function to raise a tuple to a power and modulo.\n    '''\n    # first check that it's a tuple\n    if not is_tuple(tuplex1):\n        return None\n    # check that it's a sequence\n    if not is_sequence(tuplex2):\n        return None\n    # get the first element in the tuple and make sure it's a sequence\n    i = 0\n    for element in tuplex1:\n        if is_sequence(element):\n            break\n        i += 1\n    # if we've gotten a sequence, return it\n    if i < len(tuplex1):\n        return tuplex1[i]**tuplex2[i]\n    # if the sequence is empty, return the first element\n    return tuplex1[0]**tuplex2[0]\n    \ndef add_tuple_mod(tuplex1,tuplex2,m,n):\n    '''\n    Write a function to add two tuples to a power.\n    '''\n    # first check that it's a tuple\n    if not is_tuple(tuplex1):\n        return None\n    # check that it's a sequence\n    if not is_sequence(tuplex2):\n        return None\n    # get the first element in the tuple and make sure it's a sequence\n    i = 0\n    for element in tuplex1:\n        if is_sequence(element):\n            break\n        i += 1\n    # if we've gotten a sequence, return it\n    if i < len(tuplex1):\n        return tuplex1[i]+tuplex2[i]\n    # if the sequence is empty, return the first element\n    return tuplex1[0]+tuplex2[0]\n    \ndef sub_tuple_mod(tuplex1,tuplex2,m,n):\n    '''\n    Write a function to subtract two tuples from a power.\n    '''\n    # first check that it's a tuple\n    if not is_tuple(tuplex1):\n        return None\n    # check that it's a sequence\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy=deepcopy(tuplex)\n    if len(tuplex_copy)>m:\n        return \"Not a valid tuple\"\n    for i in range(n-1):\n        tuplex_copy.pop(len(tuplex_copy)-1)\n    return tuplex_copy\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)<m+n:\n        return []\n    return [tuplex[i:i+m] for i in range(0,len(tuplex),m)]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = [0]*n\n    for i in range(m):\n        colon[tuplex[i][1]] = i+1\n    return colon\ndef find_max_colon(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    max_colon = 1\n    for i in range(len(tuplex)):\n        if tuplex[i][0] == tuplex[i][1]:\n            max_colon += 1\n    return max_colon\ndef find_min_colon(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    min_colon = 1000\n    for i in range(len(tuplex)):\n        if tuplex[i][0] < tuplex[i][1]:\n            min_colon = min(min_colon,tuplex[i][0]-tuplex[i][1])\n        else:\n            min_colon = min(min_colon,tuplex[i][1]-tuplex[i][0])\n    return min_colon\ndef find_diff_colon(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    diff_colon = 1\n    for i in range(len(tuplex)):\n        if tuplex[i][0] == tuplex[i][1]:\n            diff_colon += 1\n        else:\n            if diff_colon > 1:\n                break\n            diff_colon = 1\n    return diff_colon\ndef find_diff_row(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    diff_row = 1\n    for i in range(len(tuplex)):\n        if tuplex[i][0] < tuplex[i][1]:\n            diff_row = 1\n        else:\n            diff_row += 1\n    return diff_row\ndef find_col_diff(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    colon_diff = 1\n    for i in range(len(tuplex)):\n        if tuplex[i][0] == tuplex[i][1]:\n            colon_diff += 1\n    return colon_diff\ndef get_colon_row(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    colon_row = 0\n    for i in range(len(tuplex)):\n        colon_row += find_diff_row(tuplex[i])\n    return colon_row\ndef get_colon_diff(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    colon_diff = 0\n    for i in range(len(tuplex)):\n        colon_diff += find_diff_colon(tuplex[i])\n    return colon_diff\ndef get_colon_diff_row(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    colon_diff_row = 0\n    for i in range(len(tuplex)):\n        colon_diff_row += find_diff_colon(tuplex[i])\n    return colon_diff_row\ndef get_diff_colon(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    diff_colon = 0\n    for i in range(len(tuplex)):\n        diff_colon += find_diff_colon(tuplex[i])\n    return diff_colon\ndef get_diff_row(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    diff_row = 0\n    for i in range(len(tuplex)):\n        diff_row += find_diff_row(tuplex[i])\n    return diff_row\ndef get_diff_col(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    diff_col = 0\n    for i in range(len(tuplex)):\n        diff_col += find_diff_colon(tuplex[i])\n    return diff_col\ndef get_colon_diff_row(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    diff_colon_row = 0\n    for i in range(len(tuplex)):\n        diff_colon_row += find_diff_colon(tuplex[i])\n    return diff_colon_row\ndef get_colon_diff_col(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    diff_colon_col = 0\n    for i in range(len(tuplex)):\n        diff_colon_col += find_diff_colon(tuplex[i])\n    return diff_colon_col\ndef get_colon_row_col(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    diff_colon_row_col = 0\n    for i in range(len(tuplex)):\n        diff_colon_row_col += find_diff_colon(tuplex[i])\n    return diff_colon_row_col\ndef get_diff_colon_row_col(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    diff_colon_row_col = 0\n    for i in range(len(tuplex)):\n        diff_colon_row_col += find_diff_colon(tuplex[i])\n    return diff_colon_row_col\ndef get_diff_colon_row(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    diff_colon_row = 0\n    for i in range(len(tuplex)):\n        diff_colon_row += find_diff_colon(tuplex[i])\n    return diff_colon_row\ndef get_diff_row_col(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    diff_row_col = 0\n    for i in range(len(tuplex)):\n        diff_row_col += find_diff_row(tuplex[i])\n    return diff_row_col\ndef get_diff_col(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    diff_col = 0\n    for i in range(len(tuplex)):\n        diff_col += find_diff_colon(tuplex[i])\n    return diff_col\ndef get_colon_row_diff(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values\n    in a tuple.\n    '''\n    diff_colon_row = 0\n    for i in range(len(tuplex)):\n        diff_colon_row += find_diff_colon(tuplex[i])\n    return diff_colon_row\ndef get_colon_diff_row(tuplex):\n    '''\n    Write a function to get the number of unique colon(row) values"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)!= n:\n        raise ValueError('the number of elements in the tuple does not match the number of elements in the list.')\n    return tuplex[m]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tup = []\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] == '.':\n                colon_tup.append((i,j))\n    return colon_tup\ndef lex_int(tuplex,m,n):\n    '''\n    Write a function to get a list of integers from a tuple.\n    '''\n    list_int = []\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] == '-':\n                list_int.append(-1)\n            elif tuplex[i][j] == '+':\n                list_int.append(1)\n    return list_int\ndef lex_char(tuplex,m,n):\n    '''\n    Write a function to get a list of characters from a tuple.\n    '''\n    list_char = []\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] == '(':\n                list_char.append('(')\n            elif tuplex[i][j] == ')':\n                list_char.append(')')\n            elif tuplex[i][j] == '*':\n                list_char.append('*')\n            elif tuplex[i][j] == '+':\n                list_char.append('+')\n            elif tuplex[i][j] == '-':\n                list_char.append('-')\n    return list_char\ndef ord_char(tuplex,m,n):\n    '''\n    Write a function to get a list of characters from a tuple.\n    '''\n    list_char = []\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] == ')':\n                list_char.append('(')\n            elif tuplex[i][j] == ')':\n                list_char.append(')')\n            elif tuplex[i][j] == '*':\n                list_char.append('*')\n            elif tuplex[i][j] == '+':\n                list_char.append('+')\n            elif tuplex[i][j] == '-':\n                list_char.append('-')\n    return list_char\ndef base_converter(x,n):\n    '''\n    Write a function that converts the value given by a string to an integer\n    '''\n    if x == 'd':\n        return int(str(x)+'1')\n    elif x == 'b':\n        return int(str(x)+'2')\n    elif x == 'o':\n        return int(str(x)+'3')\n    elif x == 'x':\n        return int(str(x)+'4')\n    elif x == 'u':\n        return int(str(x)+'5')\n    elif x == 'l':\n        return int(str(x)+'6')\n    elif x == 'r':\n        return int(str(x)+'7')\n    elif x == 'f':\n        return int(str(x)+'8')\n    elif x == 'q':\n        return int(str(x)+'9')\n    elif x == 'p':\n        return int(str(x)+'0')\n    elif x == 'c':\n        return int(str(x)+'1')\n    else:\n        return x\ndef get_row(i,n):\n    '''\n    Write a function that returns the row of the binary matrix\n    '''\n    if i == 0:\n        return n\n    else:\n        return get_row(i-1,n)\ndef get_col(j,n):\n    '''\n    Write a function that returns the column of the binary matrix\n    '''\n    if j == 0:\n        return n\n    else:\n        return get_col(j-1,n)\ndef get_box(a,b,n):\n    '''\n    Write a function that returns the box of the binary matrix\n    '''\n    return a+b\ndef get_matrix(m,n):\n    '''\n    Write a function that returns the matrix\n    '''\n    return [ ['*' for i in range(m)] for j in range(n)]\ndef get_matrix_str(m,n):\n    '''\n    Write a function that returns the matrix\n    '''\n    list_matrix = []\n    for i in range(m):\n        list_matrix.append([])\n        for j in range(n):\n            list_matrix[i].append('*')\n    return list_matrix\ndef get_matrix_int(m,n):\n    '''\n    Write a function that returns the matrix\n    '''\n    list_matrix = []\n    for i in range(m):\n        list_matrix.append([])\n        for j in range(n):\n            list_matrix[i].append(-1)\n    return list_matrix\ndef get_matrix_char(m,n):\n    '''\n    Write a function that returns the matrix\n    '''\n    list_matrix = []\n    for i in range(m):\n        list_matrix.append([])\n        for j in range(n):\n            list_matrix[i].append('+')\n    return list_matrix\ndef get_matrix_col(m,n):\n    '''\n    Write a function that returns the matrix\n    '''\n    list_matrix = []\n    for i in range(m):\n        list_matrix.append([])\n        for j in range(n):\n            list_matrix[i].append('+')\n    return list_matrix\ndef get_matrix_box(a,b,n):\n    '''\n    Write a function that returns the matrix\n    '''\n    return [['*' for i in range(a)] for j in range(b)]\ndef get_matrix_color(m,n):\n    '''\n    Write a function that returns the matrix\n    '''\n    list_matrix = []\n    for i in range(m):\n        list_matrix.append([])\n        for j in range(n):\n            list_matrix[i].append('+')\n    return list_matrix\ndef get_matrix_last_box(a,b,n):\n    '''\n    Write a function that returns the matrix\n    '''\n    return [['*' for i in range(a)] for j in range(n)]\ndef get_matrix_last_box_str(m,n):\n    '''\n    Write a function that returns the matrix\n    '''\n    list_matrix = []\n    for i in range(m):\n        list_matrix.append([])\n        for j in range(n):\n            list_matrix[i].append('+')\n    return list_matrix\ndef get_matrix_last_int(m,n):\n    '''\n    Write a function that returns the matrix\n    '''\n    list_matrix = []\n    for i in range(m):\n        list_matrix.append([])\n        for j in range(n):\n            list_matrix[i].append(1)\n    return list_matrix\ndef get_matrix_last_color(m,n):\n    '''\n    Write a function that returns the matrix\n    '''\n    list_matrix = []\n    for i in range(m):\n        list_matrix.append([])\n        for j in range(n):\n            list_matrix[i].append(1)\n    return list_matrix\ndef get_matrix_last_last_box(a,b,n):\n    '''\n    Write a function that returns the matrix\n    '''\n    return [['*' for i in range(a)] for j in range(n)]\ndef get_matrix_last_last_box_str(m,n):\n    '''\n    Write a function that returns the matrix\n    '''\n    list_matrix = []\n    for i in range(m):\n        list_matrix.append([])\n        for j in range(n):\n            list_matrix[i].append(1)\n    return list"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #TODO: complete this function\n    \n    return tuple([tuplex[i][n] for i in range(len(tuplex))])\n    \ndef read_file(path):\n    '''\n    Read a file and return the same as the file.\n    '''\n    #TODO: complete this function\n    \n    file = open(path,'r')\n    text = file.read()\n    file.close()\n    \n    return text\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    factor1=[]\n    factor2=[]\n    #convert the list into a tuple\n    for i in nums1:\n        factor1.append(i)\n    for i in nums2:\n        factor2.append(i)\n    #getting the largest number from list\n    largest_product=[]\n    for i in range(len(factor1)):\n        for j in range(len(factor2)):\n            if(factor1[i]*factor2[j]>0):\n                largest_product.append(factor1[i]*factor2[j])\n    #sorting the list\n    largest_product=sorted(largest_product)\n    return largest_product[N-1]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return {'biggest product': max(nums1) * max(nums2)}\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    i = 0\n    for x in range(0, len(nums1)):\n        for y in range(0, len(nums2)):\n            if (nums1[x] * nums2[y]) > (N-x-y):\n                i = x\n                result.append((i, (nums1[x] * nums2[y]) - (N-x-y)))\n                break\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # You'll need to create a variable called max_product and initialize it to a default value of 0.\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return sorted(sorted(set(nums1 + nums2))[:N]"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # O(n)\n    def find_comb(nums1, nums2):\n        '''\n        This function returns the smallest product of elements in nums1 and nums2.\n        '''\n        # O(n)\n        result = 0\n        for num in nums1:\n            for comb in nums2:\n                if comb.count(num) == 1:\n                    result = num\n                    break\n        return result\n        \n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) > len(nums2):\n        return large_product(nums2, nums1, N)\n    if len(nums2) > len(nums1):\n        return large_product(nums1, nums2, N)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    temp = []\n    for i in range(N):\n        temp.append(int(input(f\"Input the {i+1}th number of the numbers of the given list : \")))\n    for i in range(N):\n        if nums1[i] > nums2[i]:\n            for j in range(N):\n                if nums1[i] > nums2[j]:\n                    temp[i] = nums1[j]\n                    break\n    for i in range(N):\n        print(f\"{nums1[i]}*{temp[i]}={nums1[i] * temp[i]}\")\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # python takes any number\n    # for example, if nums1 = [2,2,3,4], nums2 = [2,3,4,4], the function returns the largest product of 2*2 and 3*3 and 4*4 \n    # so it takes the product of 2*2 and 3*3\n    # we must select the two largest products\n    # I made the function smaller, which will be used later on \n    # using a while loop\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \ndef test_maximum():\n    assert maximum(10,20) == 20, \"10 is greater than 20\"\n    assert maximum(20,10) == 10, \"20 is greater than 10\"\n    assert maximum(10,30) == 30, \"10 is greater than 30\"\n    assert maximum(0,0) == 0, \"0 is greater than 0\"\n    assert maximum(100,10) == 100, \"100 is greater than 10\"\n    \nif __name__ == \"__main__\":\n    test_maximum("
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    "
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    "
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        maximum=a\n    else:\n        maximum=b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(f'The maximum of {a} and {b} is {max(a,b)}')\n    return(max(a,b))\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a)==list:\n        a=len(a)\n    elif type(a)==int:\n        a=a\n    if type(b)==list:\n        b=len(b)\n    elif type(b)==int:\n        b=b\n    if a>b:\n        return a\n    else:\n        return b\ndef minimum(a,b):    \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if type(a)==list:\n        a=len(a)\n    elif type(a)==int:\n        a=a\n    if type(b)==list:\n        b=len(b)\n    elif type(b)==int:\n        b=b\n    if a<b:\n        return a\n    else:\n        return b\ndef sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of all divisors of a number.\n    '''\n    if type(n)==list:\n        n=len(n)\n    elif type(n)==int:\n        n=n\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n==3:\n        return 2\n    elif n%2==0:\n        return n-1\n    else:\n        m=n//2\n        if n%m==0:\n            return m\n        else:\n            return n-m+1\ndef coprime(n):\n    '''\n    Write a python function to check if a number is coprime.\n    '''\n    if type(n)==list:\n        n=len(n)\n    elif type(n)==int:\n        n=n\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    elif n%2==0:\n        return n\n    else:\n        m=n//2\n        if n%m==0:\n            return m\n        else:\n            return n-m+1\ndef isprime(n):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if n<2:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    elif n%2==0:\n        return 0\n    else:\n        m=n//2\n        if n%m==0:\n            return 0\n        else:\n            return 1\ndef is_it_prime(n):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if n<2:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    elif n%2==0:\n        return 0\n    else:\n        m=n//2\n        if n%m==0:\n            return 0\n        else:\n            return 1\ndef is_it_prime_recursive(n,d,dummy):\n    '''\n    Recursive function to check if a number is prime.\n    '''\n    if n<2:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    elif n%2==0:\n        return 0\n    else:\n        m=n//2\n        if n%m==0:\n            return 0\n        else:\n            return 1\ndef is_it_prime_recursive(n,d,dummy):\n    '''\n    Recursive function to check if a number is prime.\n    '''\n    if n<2:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    elif n%2==0:\n        return 0\n    else:\n        m=n//2\n        if n%m==0:\n            return 0\n        else:\n            return 1\ndef is_it_prime_python(n):\n    '''\n    Python implementation of is_it_prime_recursive()\n    '''\n    if n<2:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    elif n%2==0:\n        return 0\n    else:\n        m=n//2\n        if n%m==0:\n            return 0\n        else:\n            return 1\ndef is_it_prime_python(n):\n    '''\n    Python implementation of is_it_prime_recursive()\n    '''\n    if n<2:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    elif n%2==0:\n        return 0\n    else:\n        m=n//2\n        if n%m==0:\n            return 0\n        else:\n            return 1\ndef is_it_prime_python_recursive(n,d,dummy):\n    '''\n    Python implementation of is_it_prime_recursive()\n    '''\n    if n<2:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    elif n%2==0:\n        return 0\n    else:\n        m=n//2\n        if n%m==0:\n            return 0\n        else:\n            return 1\ndef find_prime_factors(n):\n    '''\n    Find all prime factors of a number.\n    '''\n    if type(n)==list:\n        n=len(n)\n    elif type(n)==int:\n        n=n\n    if n==1:\n        return [1]\n    elif n==2:\n        return [2]\n    elif n==3:\n        return [3]\n    elif n%2==0:\n        return [n]\n    else:\n        m=n//2\n        if n%m==0:\n            return [n]\n        else:\n            return [n,m]\ndef find_prime_factors_recursive(n,d,dummy):\n    '''\n    Recursive function to find prime factors.\n    '''\n    if type(n)==list:\n        n=len(n)\n    elif type(n)==int:\n        n=n\n    if n==1:\n        return [1]\n    elif n==2:\n        return [2]\n    elif n==3:\n        return [3]\n    elif n%2==0:\n        return [n]\n    else:\n        m=n//2\n        if n%m==0:\n            return [n]\n        else:\n            return [n,m]\ndef find_prime_factors_python(n):\n    '''\n    Python implementation of find_prime_factors()\n    '''\n    if n==1:\n        return [1]\n    elif n==2:\n        return [2]\n    elif n==3:\n        return [3]\n    elif n%2==0:\n        return [n]\n    else:\n        m=n//2\n        if n%m==0:\n            return [n]\n        else:\n            return [n,m]\ndef find_prime_factors_python_recursive(n,d,dummy):\n    '''\n    Python implementation of find_prime_factors()\n    '''\n    if type(n)==list:\n        n=len(n)\n    elif type(n)==int:\n        n=n\n    if n==1:\n        return [1]\n    elif n==2:\n        return [2]\n    elif n==3:\n        return [3]\n    elif n%2==0:\n        return [n]\n    else:\n        m=n//2\n        if n%m==0:\n            return [n]\n        else:\n            return [n,m]\ndef find_prime_factors_python_recursive(n,d,dummy):\n    '''\n    Recursive implementation of find_prime_factors().\n    '''\n    if type(n)==list:\n        n=len(n)\n    eli"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # write your code here\n    if a>b:\n        return a\n    return b\nprint(maximum(1,2)"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Initialize an empty string\n    tuple_string = \"\"\n    # Iterate over the string\n    for i in range(len(str1)):\n        # Concatenate the current character with the previous one\n        tuple_string += str1[i]\n    # Return the tuple\n    return tuple_string\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = []\n    for char in str1:\n        tuple1.append(char)\n    return tuple(tuple1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    char_arr = list(str1)\n    index = 0\n    output_tuple = ()\n    for char in char_arr:\n        output_tuple += (char, )\n        index += 1\n        if index >= len(char_arr):\n            index = 0\n    return output_tuple\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef tuple_to_string(tuple1):\n    '''\n    Write a function to convert a given tuple of characters\n    to a string.\n    '''\n    return ''.join(tuple1)\n    \ndef two_string(str1, str2):\n    '''\n    Write a function to make two strings\n    equal.\n    '''\n    return str1 + str2\n    \ndef three_string(str1, str2, str3):\n    '''\n    Write a function to make three strings\n    equal.\n    '''\n    return str1 + str2 + str3\n    \ndef three_string2(str1, str2, str3, str4):\n    '''\n    Write a function to make three strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4\n    \ndef four_string(str1, str2, str3, str4):\n    '''\n    Write a function to make four strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4\n    \ndef four_string2(str1, str2, str3, str4, str5):\n    '''\n    Write a function to make four strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5\n    \ndef five_string(str1, str2, str3, str4, str5):\n    '''\n    Write a function to make five strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5\n    \ndef five_string2(str1, str2, str3, str4, str5, str6):\n    '''\n    Write a function to make five strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6\n    \ndef six_string(str1, str2, str3, str4, str5, str6, str7):\n    '''\n    Write a function to make six strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7\n    \ndef six_string2(str1, str2, str3, str4, str5, str6, str7, str8):\n    '''\n    Write a function to make six strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8\n    \ndef seven_string(str1, str2, str3, str4, str5, str6, str7, str8):\n    '''\n    Write a function to make seven strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8\n    \ndef seven_string2(str1, str2, str3, str4, str5, str6, str7, str8, str9):\n    '''\n    Write a function to make seven strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9\n    \ndef eight_string(str1, str2, str3, str4, str5, str6, str7, str8):\n    '''\n    Write a function to make eight strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8\n    \ndef eight_string2(str1, str2, str3, str4, str5, str6, str7, str8, str9):\n    '''\n    Write a function to make eight strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9\n    \ndef nine_string(str1, str2, str3, str4, str5, str6, str7, str8, str9):\n    '''\n    Write a function to make nine strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9\n    \ndef nine_string2(str1, str2, str3, str4, str5, str6, str7, str8, str9, str10):\n    '''\n    Write a function to make nine strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10\n    \ndef ten_string(str1, str2, str3, str4, str5, str6, str7, str8, str9, str10):\n    '''\n    Write a function to make ten strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10\n    \ndef ten_string2(str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11):\n    '''\n    Write a function to make ten strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11\n    \ndef eleven_string(str1, str2, str3, str4, str5, str6, str7, str8, str9, str10):\n    '''\n    Write a function to make eleven strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10\n    \ndef eleven_string2(str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11):\n    '''\n    Write a function to make eleven strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11\n    \ndef twelve_string(str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11):\n    '''\n    Write a function to make twelve strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11\n    \ndef twelve_string2(str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12):\n    '''\n    Write a function to make twelve strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12\n    \ndef thirteen_string(str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11):\n    '''\n    Write a function to make thirteen strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11\n    \ndef thirteen_string2(str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12):\n    '''\n    Write a function to make thirteen strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12\n    \ndef fourteen_string(str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12):\n    '''\n    Write a function to make fourteen strings\n    equal.\n    '''\n    return str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12\n    \ndef fourteen_string2(str1, str2, str"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if isinstance(str1, list):\n        tuple_string = tuple(str1)\n        return tuple_string\n    else:\n        tuple_string = tuple(str1)\n        return tuple_string\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = str1.upper()\n    list2 = []\n    for char in str2:\n        if char =='':\n            continue\n        else:\n            list2.append(char)\n    return tuple(list2)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if type(str1)!= type(\"string\"):\n        raise TypeError(\"Tuple must contain only strings.\")\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < n & 0xffff:\n        n = n | 0xffff\n    elif n & 0xffff == 0xffff:\n        n = n | 0xffff\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n == 0:\n        n = n >> 1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Your code here\n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    # Your code here\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (1<<n) | n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & (1 << 1): \n        n = n - 1 \n    else: \n        n = n + 1\n    return n \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # uncomment if you want\n    '''\n    f = open('solution.txt','w')\n    f.write(bin(n))\n    f.close()\n    '''\n    print(\"Set left most unset bit to \", n)\n    return n\n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    # uncomment if you want\n    '''\n    f = open('solution.txt','w')\n    f.write(bin(n))\n    f.close()\n    '''\n    print(\"Set right most unset bit to \", n)\n    return n\n    \ndef set_right_most_unset_bit_execution():\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    # uncomment if you want\n    '''\n    f = open('solution.txt','w')\n    f.write(bin(2**32))\n    f.close()\n    '''\n    print(\"Set right most unset bit to 32\")\n    return 2**32\n    \n    \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    set_bit = n & 1\n    if set_bit:\n        n |= 1\n    else:\n        n &= ~1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # set left most unset bit\n    if(n == 0): \n        return\n    # set left most unset bit to 1\n    if (n & 0x01): \n        n |= 0x01\n    # set left most unset bit to 0\n    if (n & 0x02): \n        n |= 0x02\n    # set left most unset bit to 0\n    if (n & 0x04): \n        n |= 0x04\n    # set left most unset bit to 0\n    if (n & 0x08): \n        n |= 0x08\n    # set left most unset bit to 0\n    if (n & 0x0C): \n        n |= 0x0C\n    # set left most unset bit to 0\n    if (n & 0x1C): \n        n |= 0x1C\n    # set left most unset bit to 0\n    if (n & 0x3C): \n        n |= 0x3C\n    # set left most unset bit to 0\n    if (n & 0x3F): \n        n |= 0x3F\n    # set left most unset bit to 0\n    if (n & 0x7F): \n        n |= 0x7F\n    # set left most unset bit to 1\n    if (n & 0x80): \n        n |= 0x80\n    # set left most unset bit to 0\n    if (n & 0x8C): \n        n |= 0x8C\n    # set left most unset bit to 0\n    if (n & 0x8F): \n        n |= 0x8F\n    # set left most unset bit to 0\n    if (n & 0x90): \n        n |= 0x90\n    # set left most unset bit to 0\n    if (n & 0x9C): \n        n |= 0x9C\n    # set left most unset bit to 0\n    if (n & 0x9F): \n        n |= 0x9F\n    # set left most unset bit to 1\n    if (n & 0xF0): \n        n |= 0xF0\n    # set left most unset bit to 0\n    if (n & 0xF8): \n        n |= 0xF8\n    # set left most unset bit to 0\n    if (n & 0xF9): \n        n |= 0xF9\n    # set left most unset bit to 0\n    if (n & 0xFA): \n        n |= 0xFA\n    # set left most unset bit to 0\n    if (n & 0xFC): \n        n |= 0xFC\n    # set left most unset bit to 0\n    if (n & 0xFD): \n        n |= 0xFD\n    # set left most unset bit to 1\n    if (n & 0xFE): \n        n |= 0xFE\n    # set left most unset bit to 0\n    if (n & 0xFC): \n        n |= 0xFC\n    # set left most unset bit to 0\n    if (n & 0xFD): \n        n |= 0xFD\n    # set left most unset bit to 0\n    if (n & 0xFF): \n        n |= 0xFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 1\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 1\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 1\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 1\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 1\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 1\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xFFF\n    # set left most unset bit to 0\n    if (n & 0xFFF): \n        n |= 0xF"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    return n ^ (n >> 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    l_bit = (n<<1)\n    l_bit += 1\n    n = l_bit\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if type(r)!= type(''):\n        r = r\n    if type(h)!= type(''):\n        h = h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    m = 2 * math.pi * r * h\n    return m\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4/3)*(math.pi)*(r**3)*(1-(((r/h)**2)/3)**2)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = (3.14*h*r**2)/2\n    return area\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4/3 * math.pi * r**3 * h**3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #Calculate the length of the cone\n    cone_length = (2*math.pi*r**2)/h\n    #Calculate the volume of the cone\n    volume = (4/3)*math.pi*(r**3)*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    t = (2*pi)*(r**2)\n    d = (r**3)/2\n    w = (4/3)*pi*h*t\n    v = (d*w)/3\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # print(f'{r} r, {h} h')\n    return 3.14 * (r * r * (math.pi / 2)) * (h**3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 2*r*h*math.pi\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    a = math.pi*r**2\n    b = h/2 * math.sqrt(a)\n    c = math.sin(b)\n    return(math.pi*r**2*c)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    sieve = [True for i in range(n+1)]\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if sieve[i]:\n            for j in range(i*i, n+1, i):\n                sieve[j] = False\n    return sum(sieve[2:])\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    for i in range(1,n+1):\n        if i < 1 or n % i!= 0:\n            break\n        else:\n            max_power += 1\n    if max_power == 0:\n        return n\n    else:\n        return n%(max_power+1)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    if n % 2!= 0:\n        return highest_Power_of_2(n - 1)\n    else:\n        return 2**n\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return highest_Power_of_2(n-1) + highest_Power_of_2(n-2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i = i*2\n    return i\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    a = 2\n    while a<=n:\n        if a%2==0:\n            print(a)\n        a+=1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n//2\ndef find_power_of_two(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_power_of_two(n//2)\ndef remove_space(string):\n    '''\n    Write a python function to remove spaces from a string.\n    '''\n    return string.replace(' ', '')\ndef reverse_string(string):\n    '''\n    Write a python function to remove spaces from a string.\n    '''\n    return string.replace(' ', '')\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return string == string[::-1]"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<2:\n        return 0\n    elif n<10:\n        return 1\n    else:\n        l=0\n        r=1\n        while (r<=n):\n            r=r*2\n            if (r<=n):\n                l=l+1\n        return l\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    print(\"HIGHEST POWER OF 2:\", n, \"is\", n**2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1: \n        return 2\n    if n % 2 == 0: \n        return 0\n    else: \n        return 1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = int(n)\n    \n    for i in range(1,n+1):\n        if i == 1:\n            return i\n        \n        if n % 2 == 1:\n            return i*i\n        \n    \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n \n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2) \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 1\n    if n == 1 or n == 0:\n        return n\n    else:\n        while a <= n:\n            if n % a == 0:\n                return n // a\n            else:\n                a += 1\n        return None\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    # Initialize the result array\n    result = []\n    \n    # Store the first 5 digits of the LCM of 2 numbers \n    # (100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400)\n    # (100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400)\n    # (100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400)\n    result = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400]\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n<=1:\n        return n\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2) \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_number = 1\n    for i in range(2, n):\n        lucas_number *= i\n    return lucas_number\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    if n == 2:\n        return 3\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2) \n        \n    \n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = str(element)\n        element = element.replace(\".\", \"\")\n        element = element.replace(\",\", \"\")\n        element = element.replace(\"'\", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\"[\", \"\")\n        element = element.replace(\"]\", \"\")\n        element = element.replace(\"(\", \"\")\n        element = element.replace(\"'\", \"\")\n        element = element.replace(\", \", \"\")\n        element = element.replace(\": \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\")\", \"\")\n        element = element.replace(\"]\", \"\")\n        element = element.replace(\"(\", \"\")\n        element = element.replace(\"'\", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n    "
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Process each element, keeping track of its position\n    position = 0\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        if not isinstance(element, list):\n            element = [element]\n        list_[element].append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        if isinstance(element, str):\n            string = string.replace(element, str(element))\n    return string\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        list_[element] = str(string) + \" \" + str(element)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if list_ == []:\n        return\n    else:\n        for i in range(len(list_)):\n            list_[i] = str(list_[i]) + string\n        print(list_)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if not string:\n        return list_\n    \n    if not list_:\n        return []\n    \n    return add_string(list_[0], string) + add_string(list_[1:], string)\n    \n    \n    \ndef convert_string_to_ints(list_, string):\n    '''\n    Convert the given string list of numbers to a list of integers.\n    '''\n    \n    return [int(number) for number in string.split()]\n    \n    \ndef convert_string_to_ints_list(string):\n    '''\n    Convert the given string of numbers to a list of integers.\n    '''\n    return string.split()\n    \n    \ndef add_strings_to_list(list_, string_):\n    '''\n    Append the given string to each item in a list.\n    '''\n    \n    if not string_:\n        return list_\n    \n    if not list_:\n        return []\n    \n    return [list_ + [string_] for string_ in string_]\n    \n    \ndef get_string_from_list(list_, index_):\n    '''\n    Get the string at the given index from a given list.\n    '''\n    \n    if not index_:\n        return list_\n    \n    if not list_:\n        return []\n    \n    return [list_[index_]]\n    \n    \ndef convert_string_list_to_int(string_list):\n    '''\n    Convert a given string list of integers to a list of integers.\n    '''\n    return [int(number) for number in string_list]\n    \n    \n    \ndef convert_string_list_to_int_list(string_list):\n    '''\n    Convert a given string list of integers to a list of integers.\n    '''\n    return string_list\n    \n    \ndef get_string_from_list_of_ints(list_):\n    '''\n    Get the string at the given index from a given list.\n    '''\n    \n    return [list_[index] for index in range(len(list_))]\n    \n    \ndef convert_list_to_int(list_):\n    '''\n    Convert a given list of integers to a list of integers.\n    '''\n    return [int(number) for number in list_]\n    \n    \ndef get_string_from_list_of_ints(list_):\n    '''\n    Get the string at the given index from a given list.\n    '''\n    return [list_[index] for index in range(len(list_))]\n    \n    \ndef convert_list_to_int_list(list_):\n    '''\n    Convert a given list of integers to a list of integers.\n    '''\n    return [int(number) for number in list_]\n    \n    \ndef remove_list_from_list(list_, index_):\n    '''\n    Remove the given index from a given list.\n    '''\n    \n    if not index_:\n        return list_\n    \n    if not list_:\n        return []\n    \n    return [list_[:index_]] + list_[index_ + 1:]\n    \n    \ndef get_string_from_list_of_ints_list(string_list):\n    '''\n    Get the string at the given index from a given list.\n    '''\n    \n    return [string_list[index] for index in range(len(string_list))]\n    \n    \ndef convert_string_list_to_int_list_of_ints(string_list):\n    '''\n    Convert a given string list of integers to a list of integers.\n    '''\n    return string_list\n    \n    \ndef get_string_from_list_of_ints_list(string_list):\n    '''\n    Get the string at the given index from a given list.\n    '''\n    return [string_list[index] for index in range(len(string_list))]\n    \n    \ndef convert_list_to_string(list_):\n    '''\n    Convert a given list of integers to a string.\n    '''\n    return [str(number) for number in list_]\n    \n    \ndef remove_list_from_list_of_ints(list_, index_):\n    '''\n    Remove the given index from a given list.\n    '''\n    \n    if not index_:\n        return list_\n    \n    if not list_:\n        return []\n    \n    return [list_[:index_]] + list_[index_ + 1:]\n    \n    \ndef get_string_from_list_of_ints_list(string_list):\n    '''\n    Get the string at the given index from a given list.\n    '''\n    \n    return [string_list[index] for index in range(len(string_list))]\n    \n    \ndef convert_string_list_to_int_list_of_ints(string_list):\n    '''\n    Convert a given string list of integers to a list of integers.\n    '''\n    return string_list\n    \n    \ndef convert_string_list_to_int_list_of_ints_list(string_list):\n    '''\n    Convert a given string list of integers to a list of integers.\n    '''\n    return string_list\n    \n    \ndef get_string_from_list_of_ints_list_of_ints(string_list):\n    '''\n    Get the string at the given index from a given list.\n    '''\n    return [string_list[index] for index in range(len(string_list))]\n    \n    \ndef convert_string_list_to_int_list_of_ints_list(string_list):\n    '''\n    Convert a given string list of integers to a list of integers.\n    '''\n    return string_list\n    \n    \ndef remove_list_from_list_of_ints_list(list_, index_):\n    '''\n    Remove the given index from a given list.\n    '''\n    \n    if not index_:\n        return list_\n    \n    if not list_:\n        return []\n    \n    return [list_[:index_]] + list_[index_ + 1:]\n    \n    \ndef get_string_from_list_of_ints_list_of_ints(string_list):\n    '''\n    Get the string at the given index from a given list.\n    '''\n    \n    return [string_list[index] for index in range(len(string_list))]\n    \n    \ndef convert_list_to_string_list(list_):\n    '''\n    Convert a given list of integers to a string.\n    '''\n    \n    return [str(number) for number in list_]\n    \n    \ndef remove_list_from_list_of_ints_list(list_, index_):\n    '''\n    Remove the given index from a given list.\n    '''\n    \n    if not index_:\n        return list_\n    \n    if not list_:\n        return []\n    \n    return [list_[:index_]] + list_[index_ + 1:]\n    \n    \ndef get_string_from_list_of_ints_list_of_ints(string_list):\n    '''\n    Get the string at the given index from a given list.\n    '''\n    \n    return [string_list[index] for index in range(len(string_list))]\n    \n    \ndef convert_string_list_to_int_list_of_ints_list(string_list):\n    '''\n    Convert a given string list of integers to a list of integers.\n    '''\n    return string_list\n    \n    \ndef convert_string_list_to_int_list_of_ints_list(string_list):\n    '''\n    Convert a given string list of integers to a list of integers.\n    '''\n    return string_list\n    \n    \ndef get_string_from_list_of_ints_list_of_ints(string_list):\n    '''\n    Get the string at the given index from a given list.\n    '''\n    \n    return [string_list[index] for index in range(len(string_list))]\n    "
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if not string:\n        return list_\n    for element in list_:\n        list_[list_.index(element)] = str(string).replace('{','').replace('}','')\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if len(string) > 0:\n        list_ = list_ + string\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        if isinstance(element, str):\n            if isinstance(string, str):\n                element = string.format(element)\n            elif isinstance(string, int):\n                element = string\n            elif isinstance(string, float):\n                element = str(element)\n            elif string is None:\n                pass\n            else:\n                raise TypeError(f\"Unsupported format {type(string)}\")\n        elif isinstance(element, float):\n            element = str(element)\n        elif element is None:\n            pass\n        else:\n            raise TypeError(f\"Unsupported format {type(element)}\")\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i, item in enumerate(l1):\n        d[i] = item\n    for i, item in enumerate(l2):\n        d[i] = item\n    for i, item in enumerate(l3):\n        d[i] = item\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    r1 = {}\n    if not isinstance(l1, list):\n        return r1\n    if len(l2)!= len(l1):\n        return r1\n    else:\n        r2 = {}\n        for i in range(len(l2)):\n            r2[i] = l1[i]\n        return r2\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(0, len(l1)):\n        result[i] = l1[i]\n    for i in range(0, len(l2)):\n        result[i] = l2[i]\n    for i in range(0, len(l3)):\n        result[i] = l3[i]\n    return result\n    \ndef save_file(file_name, result):\n    '''\n    Write a function to save the output as a txt file.\n    '''\n    \n    # save the file as txt file\n    f = open(file_name, \"w\")\n    \n    # write the list\n    for i in result:\n        for j in result[i]:\n            f.write(str(i) + \":\" + str(j) + \" \")\n        f.write(\"\\n\")\n    f.close()\n    \n    return True\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict()\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in l1:\n        d.update(i)\n    for i in l2:\n        d.update(i)\n    for i in l3:\n        d.update(i)\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0:\n        return {}\n    if len(l2) == 0:\n        return {}\n    if len(l3) == 0:\n        return {}\n    result = {}\n    for i in range(len(l1)):\n        if l1[i] == l3[i]:\n            continue\n        elif type(l1[i]) == int:\n            if l2[i] not in result:\n                result[l2[i]] = {}\n            if l1[i] not in result[l2[i]]:\n                result[l2[i]][l1[i]] = l3[i]\n            else:\n                if type(result[l2[i]][l1[i]][0])!= list:\n                    result[l2[i]][l1[i]].append(l3[i])\n                else:\n                    result[l2[i]][l1[i]].append(l3[i])\n        elif type(l1[i]) == list:\n            result = convert_list_dictionary(l1[i], l2[i], l3[i])\n        elif type(l1[i]) == str:\n            if l3[i] in result:\n                result[l3[i]][l1[i]] = l1[i]\n            else:\n                result[l3[i]] = {}\n                result[l3[i]][l1[i]] = l1[i]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    convert_dict = {}\n    convert_dict['key_1'] = l1\n    convert_dict['key_2'] = l2\n    convert_dict['key_3'] = l3\n    return convert_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0 and len(l2) == 0 and len(l3) == 0:\n        return {}\n    else:\n        l1_dict = {}\n        l2_dict = {}\n        l3_dict = {}\n        for i in range(len(l1)):\n            l1_dict[str(l1[i])] = l1[i]\n        for i in range(len(l2)):\n            l2_dict[str(l2[i])] = l2[i]\n        for i in range(len(l3)):\n            l3_dict[str(l3[i])] = l3[i]\n        return {'l1': l1_dict, 'l2': l2_dict, 'l3': l3_dict}\n    "
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for i in range(0, len(l1)):\n        d1[l1[i]] = l2[i]\n    for i in range(0, len(l1)):\n        d2[l3[i]] = l1[i]\n    for i in range(0, len(l1)):\n        d3[l1[i]] = d2[l3[i]]\n    return d3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary_list = {}\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1, n + 1):\n        if (f(i) % 2 == 0):\n            max_sum += f(i)\n        if (f(i) % 3 == 0):\n            max_sum += f(i)\n        if (f(i) % 4 == 0):\n            max_sum += f(i)\n        if (f(i) % 5 == 0):\n            max_sum += f(i)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    res = 0\n    for i in range(1, n):\n        res = max(res, (f(i) + f(i/2)) + f(i/3))\n    return res\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    try:\n        f = lambda n: max(max(int(n/2), int(n/3), int(n/4), int(n/5)), n)\n        return f(n)\n    except:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (((f(n/2) + f(n/3) + f(n/4) + f(n/5)) % n) - n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return max( (get_max_sum(n//2) + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for n in range(1, n + 1):\n        max_sum += (n ** 2) + n + 1\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        lst = []\n        for i in range(2, n):\n            lst.append(get_max_sum(i))\n        return max(lst) + get_max_sum(n-1)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f (n):\n        if n == 1:\n            return n\n        elif n == 2:\n            return n**2\n        elif n == 3:\n            return n**3\n        elif n == 4:\n            return n**4\n        elif n == 5:\n            return n**5\n    \n    max_sum = 0\n    for i in range (2, n+1):\n        max_sum = f (i)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max (get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return int ( (f (n)) + f (n/2) + f (n/3) + f (n/4) + f (n/5))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for number in input_list:\n        if len(str(number)) > max_len:\n            max_len = len(str(number))\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = max(input_list)\n    for x in range(len(input_list)):\n        if input_list[x] == max_length:\n            return x\n    return -1\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) < 2:\n        return None\n    else:\n        return input_list[0]\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(len(x) for x in input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key = len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return 0\n    \n    for index in range(0, len(input_list)):\n        if input_list[index] > input_list[index+1]:\n            return max_length_list(input_list[index+1:])\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i)>max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) < 2:\n        return input_list\n    elif len(input_list) < 3:\n        return input_list[:2]\n    elif len(input_list) < 4:\n        return input_list[:3]\n    else:\n        return input_list[:4]\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup_str = ','.join(map(str, test_tup))\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct_tup = set(tup)\n    if len(distinct_tup) == len(set(tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    num_list = []\n    for i in test_tup:\n        if i not in num_list:\n            num_list.append(i)\n    if len(num_list) == len(test_tup):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                print(\"DUPLICATE\")\n                return False\n    print(\"NO DUPLICATE\")\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return not test_tup\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return test_tup[0] not in test_tup[1:]\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup))==len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) > 0:\n        for i in test_tup:\n            if i in test_tup:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    a=test_tup\n    a.sort()\n    #for i in range(len(a)):\n        #if a[i] in a[:i+1]:\n            #print(a)\n    for i in range(len(a)):\n        if a[i] in a[:i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in str1[i:]:\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char = ''\n    for letter in str1:\n        if char == '':\n            char = letter\n        else:\n            if letter == char:\n                char = ''\n            else:\n                char = char + letter\n    return char\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = {}\n    for char in str1:\n        if char not in chars:\n            chars[char] = 0\n        chars[char] += 1\n    for char in chars:\n        if chars[char]!= 1:\n            return char\n    return ''\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return ''.join(sorted(set(str1.lower().replace(' ',''))))\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char not in char_count:\n            char_count[char] = 0\n        char_count[char] += 1\n        \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return ''\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    st = list(str1)\n    if len(st) > 0:\n        for i in range(len(st)):\n            if st[i] == st[i-1]:\n                st.pop(i)\n        print(''.join(st))\n    else:\n        print('[]')\n    \ndef find_k_th_letter(str1, k):\n    '''\n    Write a python function that returns the kth letter in a given string.\n    '''\n    st = list(str1)\n    if len(st) > 0:\n        for i in range(len(st)):\n            if st[i] == st[i-1]:\n                st.pop(i)\n        print(st[k-1])\n    else:\n        print('[]')\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Your code here\n    count=0\n    for i in str1:\n        if i not in str1[count:]:\n            count+=1\n    return str1[count]"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # return first non-repeating character in a given string\n    # str1 = \"Hello\"\n    # return str1[0]\n    # return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    print(char_count)\n    print(len(char_count))\n    return char_count.keys()[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char]+=1\n        else:\n            char_dict[char]=1\n    for char in char_dict:\n        if char_dict[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    m = re.search(regex,string)\n    if m!= None: \n        print(m.group(1))\n    else: \n        print('not found')\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string == '':\n        return False\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\ndef get_regex_pattern(regex): \n    '''\n    Write a function to compile a regular expression pattern.\n    '''\n    pattern = []\n    count = 0\n    while count < len(regex):\n        count += 1\n        if regex[count].isalpha() or regex[count].isdigit():\n            if regex[count].isalpha():\n                pattern.append(regex[count])\n            else:\n                pattern.append('\\\\'+regex[count])\n        else:\n            pattern.append(regex[count])\n    return ''.join(pattern)\ndef get_regex_regex(regex):\n    '''\n    Write a function to compile a regular expression.\n    '''\n    reg_exp = regex[:-2]\n    return regex+regex[-2:]"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0]==string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # print(string)\n    if len(string) == 0 or len(string) == 1:\n        return True\n    elif len(string) % 2 == 0:\n        return string[0] == string[1]\n    else:\n        return string[0] == string[-1]\n        \ndef check_content(string):\n    '''\n    Write a function to check whether the given string is in string, not in the first position.\n    '''\n    if string[0] == '#':\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    lst = []\n    for c in string: \n        if c == '.' or c == ',' or c =='': \n            lst.append(c)\n        else: \n            pass\n    for c in lst: \n        if c == string[-1]: \n            lst.pop() \n    if len(lst) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0]!= string[-1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a>b and a>c):\n        return a\n    elif (b>a and b>c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 0 or len(b) == 0 or len(c) == 0:\n        return \"No numbers.\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Take the median of three numbers\n    m1 = (a+b+c)//3\n    m2 = (a+b)//2\n    m3 = (a+c)//2\n    if (m1 == m2):\n        return m1\n    if (m2 == m3):\n        return m2\n    else:\n        return m3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    def median(a, b, c):\n        a.sort()\n        b.sort()\n        c.sort()\n        if len(a)%2 == 0:\n            return (a[int((len(a)/2)-1)] + a[int(len(a)/2)])/2\n        else:\n            return a[int((len(a)/2))]\n    if b > c:\n        return median(a,b,c)\n    elif c > b:\n        return median(a,c,b)\n    else:\n        return median(a,c,b)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a==b==c:\n        return a\n    a=sorted(a)\n    b=sorted(b)\n    c=sorted(c)\n    if len(a)>len(b) and len(a)>len(c):\n        return median(a,b)\n    elif len(b)>len(a) and len(b)>len(c):\n        return median(b,a)\n    elif len(c)>len(a) and len(c)>len(b):\n        return median(c,a)\n    else:\n        return sorted(a+b+c)[len(a+b+c)/3]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_median = float(a)/3\n    b_median = float(b)/3\n    c_median = float(c)/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a==b==c:\n        return a\n    if a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    if a>c:\n        return a\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list=[a,b,c]\n    num_list.sort()\n    if len(num_list)%2==0:\n        if num_list[len(num_list)//2]==num_list[len(num_list)//2-1]:\n            return num_list[len(num_list)//2]\n        else:\n            return num_list[len(num_list)//2-1]\n    else:\n        return num_list[len(num_list)//2]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if b%2 == 0:\n        return a\n    else:\n        return a+b\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    # sort the three numbers in ascending order\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    \n    # get the three numbers of a and b\n    a_median = a[len(a)/3]\n    b_median = b[len(b)/3]\n    c_median = c[len(c)/3]\n    \n    # find the three numbers of a and b and sort them\n    a_median_sorted = sorted(a)\n    b_median_sorted = sorted(b)\n    c_median_sorted = sorted(c)\n    \n    # return the three numbers in ascending order\n    return a_median, b_median, c_median"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += num\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for n in nums:\n        sum += n % 10\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum = sum + num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(lambda num: sum(map(int, str(num))), nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    num_sum = 0\n    for num in nums:\n        num_sum += num\n    return num_sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(lambda x: x, nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for number in nums:\n        sum += number\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = 0\n    y = 0\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            x += 1\n        elif test_tup1[i] < test_tup2[i]:\n            y += 1\n        else:\n            x = x + y\n    return x\n    # Write your code here.\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # If both tuples have the same length, check if the length of the first tuple is equal to the second\n    if len(test_tup1)!= len(test_tup2):\n        print(\"LENGTH OF TUPLES DO NOT MATCH: \", len(test_tup1), len(test_tup2))\n        return\n    \n    # If the first tuple has the same length as the second, increment the result by one\n    if len(test_tup1) == len(test_tup2):\n        result = 0\n        for i in range(len(test_tup1)):\n            result = result ^ test_tup1[i]\n        return result\n    \n    # Otherwise, check if the length of the first tuple is greater than the second\n    if len(test_tup1) < len(test_tup2):\n        print(\"LENGTH OF TUPLES DO NOT MATCH: \", len(test_tup1), len(test_tup2))\n        return\n    \n    # If the length of the first tuple is less than the second, then go through the list to find the length\n    # of the list that is less than the length of the second\n    for i in range(len(test_tup2)):\n        if len(test_tup1) <= len(test_tup2):\n            break\n        \n        # If the second tuple is greater than the length of the list, then multiply the list by the second tuple\n        if i == len(test_tup2):\n            result = 0\n            for j in range(len(test_tup1)):\n                result = result ^ test_tup2[j]\n            return result\n        \n        # If the first tuple is less than the length of the second, then add the value from the first tuple to the second\n        # tuple and multiply the result by the second tuple\n        if test_tup1[i] < test_tup2[i]:\n            result = result ^ test_tup1[i]\n            for j in range(len(test_tup1)):\n                result = result ^ test_tup2[j]\n            return result\n    \n    # If the length of the first tuple is equal to the second, then return the result\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    out_tup = ()\n    for i in test_tup1:\n        out_tup = out_tup + (i)\n    for j in test_tup2:\n        out_tup = out_tup + (j)\n    return out_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    #print(tup1)\n    #print(tup2)\n    #print(tup1)\n    #print(tup2)\n    tup1[1] = tup1[1] ^ tup2[1]\n    tup1[2] = tup1[2] ^ tup2[2]\n    tup1[3] = tup1[3] ^ tup2[3]\n    tup1[0] = tup1[0] ^ tup2[0]\n    #print(tup1)\n    #print(tup2)\n    return tup1\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = \"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            result += test_tup1[i]\n        else:\n            result += \"X\"\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup = (tuple(sorted(test_tup1)), tuple(sorted(test_tup2)))\n    return tuple(sorted(map(lambda x: x ^ x, test_tup)))\n    #return sum(map(lambda x: x ^ x, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #DEBUG\n    test_tup1 = test_tup1[0]\n    test_tup2 = test_tup2[0]\n    #DEBUG\n    #print(test_tup1)\n    #print(test_tup2)\n    #DEBUG\n    \n    #DEBUG\n    #print(f\"DUT: {test_tup1} \\t| {test_tup2}\")\n    \n    #DEBUG\n    #print(\"DUT: \", end=\"\")\n    #for x in test_tup1:\n    #    print(x, end=\"\")\n    #print(\"\\t\")\n    #for x in test_tup2:\n    #    print(x, end=\"\")\n    #print(\"\\t\")\n    #print(len(test_tup1))\n    #print(len(test_tup2))\n    #DEBUG\n    \n    #DEBUG\n    #print(f\"DUT: {test_tup1} \\t| {test_tup2}\")\n    \n    #DEBUG\n    #print(f\"DUT: {test_tup1} \\t| {test_tup2}\")\n    \n    #DEBUG\n    xor_result = 0\n    for index in range(len(test_tup1)):\n        x = test_tup1[index]\n        y = test_tup2[index]\n        #DEBUG\n        #print(f\"DUT: {x} \\t| {y}\")\n        #DEBUG\n        #print(f\"DUT: {x} \\t| {y}\")\n        xor_result = xor_result ^ y\n    return xor_result\n    #DEBUG\n    #print(f\"DUT: {test_tup1} \\t| {test_tup2}\")\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    ret_tup1 = test_tup1[0]\n    ret_tup2 = test_tup2[0]\n    for i in range(len(test_tup1)):\n        ret_tup1 = ret_tup1 ^ test_tup1[i]\n        ret_tup2 = ret_tup2 ^ test_tup2[i]\n    return(ret_tup1, ret_tup2)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    # get the length of tuples\n    num_tuples = len(test_tup1)\n    # generate an empty list of empty tuples\n    test_tup_list = []\n    for i in range(num_tuples):\n        test_tup_list.append(tuple())\n    # iterate through each tuple\n    for i in range(num_tuples):\n        # generate a copy of the tuple\n        test_tup = test_tup_list[i]\n        # get the first element\n        t1 = test_tup[0]\n        # get the second element\n        t2 = test_tup[1]\n        # use bitwise xor operator to obtain the result\n        test_tup_list[i] = t1, t2\n        # add the result to the end of the list\n        test_tup_list[i] = tuple(t1 ^ t2)\n    # return the list of tuples\n    return test_tup_list\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Step 1 - Find the unique values in the list\n    # Create a set to store the unique values\n    unique_list = set(test_list)\n    # Print the unique values\n    print(unique_list)\n    # Create a count variable to store the number of unique tuples\n    count = 0\n    # Iterate through the list\n    for i in test_list:\n        # Check if the i-th entry is in the set\n        if i in unique_list:\n            # Increment the count by 1\n            count = count + 1\n    # Print the number of unique tuples\n    print(count)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if test_list == []:\n        return 0\n    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    freq_sorted_dict = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)\n    freq_dict = dict(freq_sorted_dict)\n    return sum(freq_dict.values())\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    with open(test_list, 'r') as f:\n        data = f.readlines()\n    data = [x.strip() for x in data]\n    # print(data)\n    count = 0\n    for i in data:\n        if len(i) > 1:\n            count = count + 1\n    # print(count)\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        count += len(test_list[i])\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for line in test_list:\n        freq_list.append(line.count(\"\\t\"))\n    return len(freq_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    a = Counter(test_list)\n    return a.most_common()[0][0]\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # first, we can check if the list is empty or not\n    if len(test_list) == 0:\n        return 0\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    num_unique = 0\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                num_unique += 1\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_numbers = dict()\n    for num in test_list:\n        unique_numbers[num] = test_list.count(num)\n    return len(unique_numbers)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Do a pre-processing step.\n    # 1. Split the given list of tuples into lists of data points.\n    # 2. Count the number of unique elements and the number of times each element appears.\n    # 3. Sort the list of tuples by their number of elements.\n    # 4. Store the number of unique tuples.\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup1 = []\n    new_tup2 = []\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def helper_add_nested_tuples(test_tup1, test_tup2):\n        if len(test_tup1)!= len(test_tup2):\n            print('Error: len() of tuples must equal.')\n            return\n        elif len(test_tup1) == 0:\n            return\n        elif len(test_tup1[0]) == 0:\n            return\n        elif test_tup1[0][0] == test_tup2[0][0]:\n            test_tup1[0][0] = test_tup2[0][0]\n            return\n        else:\n            print('Error: tuples must be of same length.')\n            return\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print('adding tuple elements in nested tuples...')\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup2[i][j] += test_tup1[i][j]\n    print('tuples added successfully.')\n    return test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    assert type(test_tup1) == tuple and type(test_tup2) == tuple, 'TypeError: Expected tuple but got {} and {}.'.format(type(test_tup1), type(test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return tuple(map(tuple.__add__, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup1 = []\n    result_tup2 = []\n    # add two tuples together\n    for i, v in enumerate(test_tup1):\n        result_tup1.append(v + test_tup2[i])\n    # return the result\n    return tuple(result_tup1)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Define list of tuples\n    # Pass the first element as argument\n    # Find the index of the first element and add to the index of the second element\n    # Return the tuple\n    #\n    # index_of_first = 0\n    # for index, item in enumerate(tup1):\n    #     if index_of_first!= len(tup1):\n    #         if index == 0:\n    #             index_of_first += 1\n    #             continue\n    #     tup2_index = 0\n    #     for item2 in tup2[index_of_first]:\n    #         if item2 == item:\n    #             tup2_index += 1\n    #         else:\n    #             break\n    #     tup2_index += 1\n    #     print(index, item, tup2_index, item2)\n    #\n    # index_of_second = 0\n    # for index, item in enumerate(tup2):\n    #     if index == len(tup2):\n    #         break\n    #     tup1_index = 0\n    #     for item1 in tup1[index_of_second]:\n    #         if item1 == item:\n    #             tup1_index += 1\n    #             continue\n    #         elif item1 == item:\n    #             tup1_index += 1\n    #         else:\n    #             break\n    #     tup1_index += 1\n    #     print(index, item, tup1_index, item1)\n    #\n    # for index, item in enumerate(tup1):\n    #     for index1, item1 in enumerate(tup2):\n    #         if index1 == index:\n    #             tup2[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup2):\n    #     for index1, item1 in enumerate(tup1):\n    #         if index1 == index:\n    #             tup1[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup2):\n    #     for index1, item1 in enumerate(tup1):\n    #         if index1 == index:\n    #             tup1[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup1):\n    #     for index1, item1 in enumerate(tup2):\n    #         if index1 == index:\n    #             tup2[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup2):\n    #     for index1, item1 in enumerate(tup1):\n    #         if index1 == index:\n    #             tup2[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup1):\n    #     for index1, item1 in enumerate(tup2):\n    #         if index1 == index:\n    #             tup2[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup2):\n    #     for index1, item1 in enumerate(tup1):\n    #         if index1 == index:\n    #             tup2[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup2):\n    #     for index1, item1 in enumerate(tup1):\n    #         if index1 == index:\n    #             tup1[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup2):\n    #     for index1, item1 in enumerate(tup1):\n    #         if index1 == index:\n    #             tup1[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup1):\n    #     for index1, item1 in enumerate(tup2):\n    #         if index1 == index:\n    #             tup2[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup1):\n    #     for index1, item1 in enumerate(tup2):\n    #         if index1 == index:\n    #             tup1[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup1):\n    #     for index1, item1 in enumerate(tup2):\n    #         if index1 == index:\n    #             tup2[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup2):\n    #     for index1, item1 in enumerate(tup1):\n    #         if index1 == index:\n    #             tup1[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup2):\n    #     for index1, item1 in enumerate(tup1):\n    #         if index1 == index:\n    #             tup1[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup2):\n    #     for index1, item1 in enumerate(tup1):\n    #         if index1 == index:\n    #             tup2[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    #     print(index, item, index1)\n    #\n    # for index, item in enumerate(tup1):\n    #     for index1, item1 in enumerate(tup2):\n    #         if index1 == index:\n    #             tup2[index1] += item\n    #             break\n    #         if item == item1:\n    #             index += 1\n    "
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print(f'Test 1: {test_tup1}\\nTest 2: {test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_tup1 + test_tup2}')\n    print(f'Add test_tup1 and test_tup2: {test_"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1.append((10,20))\n    test_tup2.append((30,40))\n    return test_tup1,test_tup2\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        a,b = b,a\n    min_val = a\n    for i in range(b,0,-1):\n        if a>=i:\n            if a>min_val:\n                min_val = i\n    return min_val\na=float(input(\"Enter the first number: \"))\nb=float(input(\"Enter the second number: \"))\nprint(minimum(a,b))"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    c=b-a\n    return c\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return \"Please type a number only\"\n    elif a<0 or b<0:\n        return \"Please input a number only\"\n    else:\n        return a,b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return a\n    elif(a<b):\n        return b\n    else:\n        return a+b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    while True:\n        try:\n            minimum = a if a < b else b\n            print(minimum)\n        except Exception:\n            print(\"No values\")\n            print(\"\\n Try again\")\n        else:\n            break\n    return minimum\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        low = a\n        high = b\n    else:\n        low = b\n        high = a\n    \n    while low < high:\n        temp = low + (high-low)//2\n        if a > temp:\n            high = temp\n        elif a < temp:\n            low = temp + 1\n    \n    return low\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b > a:\n        smaller = b\n    else:\n        smaller = a\n    for i in range(a,b):\n        if i < smaller:\n            smaller = i\n    return smaller\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min=a\n    if a<b:\n        min=b\n    return min\n    \n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if type(a) is not int or type(b) is not int:\n        raise TypeError(\"only integers are allowed\")\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum = a\n    if(b < minimum):\n        minimum = b\n    return minimum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return element\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # check tuple\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            return element\n    return -1\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n    \ndef check_tuple_not_empty(tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_tuple(tuplex,tuple1):\n    '''\n    Write a function to check whether a element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n    \ndef check_dict(d,element):\n    '''\n    Write a function to check whether a element exists within a dictionary.\n    '''\n    if element in d:\n        return True\n    return False\n    \ndef check_if_dict(d,element):\n    '''\n    Write a function to check whether a element exists within a dictionary.\n    '''\n    if element in d.keys():\n        return True\n    return False\n    \ndef check_set(set1,element):\n    '''\n    Write a function to check whether a element exists within a set.\n    '''\n    if element in set1:\n        return True\n    return False\n    \ndef check_if_set(set1,element):\n    '''\n    Write a function to check whether a element exists within a set.\n    '''\n    if element in set1:\n        return True\n    return False\n    \ndef check_hash(hash1,element):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in hash1:\n        return True\n    return False\n    \ndef check_hash_list(hash1,list1):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in list1:\n        return True\n    return False\n    \ndef check_hash_dict(hash1,dict1):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in dict1.keys():\n        return True\n    return False\n    \ndef check_hash_set(hash1,set1):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in set1:\n        return True\n    return False\n    \ndef check_list(list1,element):\n    '''\n    Write a function to check whether a element exists within a list.\n    '''\n    if element in list1:\n        return True\n    return False\n    \ndef check_if_list(list1,element):\n    '''\n    Write a function to check whether a element exists within a list.\n    '''\n    if element in list1:\n        return True\n    return False\n    \ndef check_dict(d,element):\n    '''\n    Write a function to check whether a element exists within a dictionary.\n    '''\n    if element in d:\n        return True\n    return False\n    \ndef check_if_dict(d,element):\n    '''\n    Write a function to check whether a element exists within a dictionary.\n    '''\n    if element in d.keys():\n        return True\n    return False\n    \ndef check_set(set1,element):\n    '''\n    Write a function to check whether a element exists within a set.\n    '''\n    if element in set1:\n        return True\n    return False\n    \ndef check_if_set(set1,element):\n    '''\n    Write a function to check whether a element exists within a set.\n    '''\n    if element in set1:\n        return True\n    return False\n    \ndef check_hash(hash1,element):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in hash1:\n        return True\n    return False\n    \ndef check_hash_list(hash1,list1):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in list1:\n        return True\n    return False\n    \ndef check_hash_dict(hash1,dict1):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in dict1.keys():\n        return True\n    return False\n    \ndef check_hash_set(hash1,set1):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in set1:\n        return True\n    return False\n    \ndef check_list(list1,element):\n    '''\n    Write a function to check whether a element exists within a list.\n    '''\n    if element in list1:\n        return True\n    return False\n    \ndef check_if_list(list1,element):\n    '''\n    Write a function to check whether a element exists within a list.\n    '''\n    if element in list1:\n        return True\n    return False\n    \ndef check_dict(d,element):\n    '''\n    Write a function to check whether a element exists within a dictionary.\n    '''\n    if element in d:\n        return True\n    return False\n    \ndef check_if_dict(d,element):\n    '''\n    Write a function to check whether a element exists within a dictionary.\n    '''\n    if element in d.keys():\n        return True\n    return False\n    \ndef check_set(set1,element):\n    '''\n    Write a function to check whether a element exists within a set.\n    '''\n    if element in set1:\n        return True\n    return False\n    \ndef check_if_set(set1,element):\n    '''\n    Write a function to check whether a element exists within a set.\n    '''\n    if element in set1:\n        return True\n    return False\n    \ndef check_hash(hash1,element):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in hash1:\n        return True\n    return False\n    \ndef check_hash_list(hash1,list1):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in list1:\n        return True\n    return False\n    \ndef check_hash_dict(hash1,dict1):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in dict1.keys():\n        return True\n    return False\n    \ndef check_hash_set(hash1,set1):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in set1:\n        return True\n    return False\n    \ndef check_list(list1,element):\n    '''\n    Write a function to check whether a element exists within a list.\n    '''\n    if element in list1:\n        return True\n    return False\n    \ndef check_if_list(list1,element):\n    '''\n    Write a function to check whether a element exists within a list.\n    '''\n    if element in list1:\n        return True\n    return False\n    \ndef check_dict(d,element):\n    '''\n    Write a function to check whether a element exists within a dictionary.\n    '''\n    if element in d:\n        return True\n    return False\n    \ndef check_if_dict(d,element):\n    '''\n    Write a function to check whether a element exists within a dictionary.\n    '''\n    if element in d.keys():\n        return True\n    return False\n    \ndef check_set(set1,element):\n    '''\n    Write a function to check whether a element exists within a set.\n    '''\n    if element in set1:\n        return True\n    return False\n    \ndef check_if_set(set1,element):\n    '''\n    Write a function to check whether a element exists within a set.\n    '''\n    if element in set1:\n        return True\n    return False\n    \ndef check_hash(hash1,element):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in hash1:\n        return True\n    return False\n    \ndef check_hash_list(hash1,list1):\n    '''\n    Write a function to check whether a element exists within a hash.\n    '''\n    if element in list1:\n        return True\n    return False\n    \ndef check_hash_dict(hash1,dict1):\n    '''\n    Write a function to check whether "
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #Get the tuple length\n    if len(tuplex)!= len(tuple1):\n        print(\"Error: length of tuple is different\")\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True\n    else: \n        return False \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Iterate over the numbers and check for odd.\n    sum = 0\n    for i in x:\n        sum += i\n    # Check if sum of numbers is even and if sum is odd then return True.\n    if sum % 2 == 0 and sum!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x_str = str(x)\n    if x_str.count('7')%2 == 0:\n        return False\n    else:\n        return True\n    \n    \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd = 0\n    for i in x:\n        if (i % 2) == 1:\n            odd = odd + 1\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x==0):\n        return 0\n    elif(x%2==0):\n        return 1\n    else:\n        return -1\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # set the lower limit as 1\n    lower_limit = 1\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    n = int(x) \n    if n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2) == 1: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd_count = 0\n    for i in x:\n        if (i % 2!= 0):\n            odd_count += 1\n    if (odd_count % 2!= 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = \"\"\n    while n!= 0:\n        result += str(n % 10)\n        n = n // 10\n    return int(result)\n    \ndef is_palindrome(n):\n    '''\n    Check if the number is palindrome.\n    '''\n    if n == rearrange_bigger(n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    max_num = max(n)\n    for i in range(len(str(n))):\n        n = int(n)\n        if n%10!= 0:\n            print(n)\n        else:\n            n = n//10\n            n = n*10\n            print(n)\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = ''\n    for i in range(n, n + 2):\n        result += str(i)\n    return int(result)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    a = list(str(n))\n    for i in range(len(a)-1, -1, -1):\n        if a[i] == \"0\":\n            a[i] = \"1\"\n    return int(\"\".join(a))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    i=0\n    while i<=n:\n        digits.append(i)\n        i+=1\n    digits.sort()\n    return digits\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = []\n    for x in str(n):\n        if x > 9:\n            arr.append(10)\n            arr.append(x)\n            arr.append(9)\n        else:\n            arr.append(x)\n    arr = arr[-3:]\n    arr = arr[:-1]\n    arr.append(arr[-1]+arr[-2]+arr[-3])\n    return ''.join(arr)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    if n == 0 or n==1:\n        return n\n    \n    return rearrange_bigger(n//10) + n%10\n    \nn = int(input())\nprint(rearrange_bigger(n))"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    d = n\n    for i in range(0,len(str(n))):\n        d += 10 * (int(str(n)[i]) - (int(str(n)[i-1])))\n    return d\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # define new variables to be used in the function\n    biggest = 0\n    biggest_num = 0\n    new_number = 0\n    biggest_value = 0\n    # iterate through each digit\n    for i in str(n):\n        # use ord to get ascii value\n        ascii_value = ord(i) - ord('0')\n        # use the ascii value to find the next bigger digit\n        if ascii_value >= biggest:\n            biggest = ascii_value\n            biggest_num = i\n        # use the ascii value to find the next bigger number\n        if ascii_value >= biggest_value:\n            biggest_value = ascii_value\n            new_number = i\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #init heap\n    heap = []\n    for i in nums1:\n        heapq.heappush(heap, (-i, i))\n    for j in nums2:\n        heapq.heappush(heap, (j, -j))\n    for i in range(k):\n        if heap:\n            elem1 = heapq.heappop(heap)[1]\n            elem2 = heapq.heappop(heap)[1]\n            print(elem1, elem2)\n            return elem1 * elem2\n    return 0\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    size_first_array = len(nums1)\n    size_second_array = len(nums2)\n    if k < 0: return 'Error : k must be > 0'\n    if size_first_array < size_second_array:\n        return 'Error : first array should be greater than second array'\n    else:\n        if k == 0:\n            return sorted(zip(nums1,nums2))\n        else:\n            pairs = []\n            heapq.heapify(pairs)\n            for i in range(size_first_array):\n                first = nums1[i]\n                second = nums2[i]\n                index = i\n                while index < size_first_array and nums1[index] == first and nums2[index] == second:\n                    index += 1\n                if index == size_first_array:\n                    break\n                if index < size_first_array:\n                    heapq.heappush(pairs, (nums1[index], first, second))\n                else:\n                    heapq.heappush(pairs, (first, second, nums2[index]))\n            res = []\n            for i in range(k):\n                res.append((heapq.heappop(pairs)[2], heapq.heappop(pairs)[1], heapq.heappop(pairs)[0]))\n            return res\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    count = 0\n    sorted_list = []\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    i,j=0,0\n    while(i < len(nums1) and j < len(nums2)):\n        if nums1[i] == nums2[j]:\n            yield (nums1[i], nums2[j])\n            i+=1\n            j+=1\n        elif nums1[i] > nums2[j]:\n            i+=1\n        else:\n            j+=1\n    \n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs(nums2, nums1, k)\n    \n    if k == 0:\n        return []\n    \n    if len(nums1) == k:\n        return nums1 + nums2\n    \n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    \n    for i in range(len(nums1)):\n        if len(nums1) == 1:\n            break\n        \n        while k and heapq.heappop(nums1) < heapq.heappop(nums2):\n            break\n        \n        heapq.heappush(nums1, nums2.pop(0))\n        \n    return nums1 + nums2\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # code here\n    # return heapq.nsmallest(1, nums1, key=lambda x: -len(x))\n    res = []\n    nums1.sort()\n    nums2.sort()\n    for i in range(0, len(nums1)):\n        for j in range(i+1, len(nums1)):\n            if len(nums1[i:j]) >= k:\n                # print(nums1[i:j])\n                # print(len(nums1[i:j]))\n                # print(nums1[i:j][:k])\n                # print(nums1[i:j][:k][:k])\n                # print(nums1[j:i][:k])\n                # print(nums1[j:i][:k][:k])\n                # print(nums1[j:i][:k][:k][:k])\n                # print(nums1[j:i][:k][:k][:k][:k])\n                res.append([nums1[i],nums1[j]])\n                break\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # The number of elements is equal to the length of the first array. \n    # Create a heap with the number of elements as the heap size. \n    # The first element is the first element from the first array. \n    # The first element from the second array is the second element. \n    # The second element from the second array is the second element from the first array. \n    # Lastly, if the number of elements is greater than k, \n    # then simply return the number of elements from the second array. \n    # You will find the number of pairs that have smallest element. \n    # Return the number of pairs. \n    # You will not need to complete this method. \n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs_count = []\n    i = 0\n    while i < len(nums1):\n        if i < len(nums2):\n            if nums1[i] == nums2[i]:\n                pairs_count.append(i)\n                i += 1\n            else:\n                pairs_count.append(i)\n                i += 1\n        else:\n            pairs_count.append(i)\n            i += 1\n    return pairs_count\n    \ndef k_smallest_pairs_v2(nums1, nums2, k):\n    '''\n    Return a list of smallest pairs in the array.\n    '''\n    l = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i]!= nums2[j] and nums1[i] < nums2[j]:\n                l.append([nums1[i], nums2[j]])\n                break\n    return l\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    arr = []\n    arr = sorted(nums1 + nums2)\n    pairs = []\n    k_smallest = []\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            if arr[i] + arr[j] in pairs:\n                continue\n            if arr[i] + arr[j] in nums2 and arr[j] + arr[i] in nums1:\n                k_smallest = arr[i] + arr[j]\n                pairs.append([arr[i], arr[j]])\n                break\n    return k_smallest, pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # This is a dictionary\n    d = {}\n    # Put the values into the dictionary\n    for x in nums1:\n        d[x] = d.get(x, 0) + 1\n    for x in nums2:\n        d[x] = d.get(x, 0) + 1\n    # Sort the dictionary\n    d = dict(sorted(d.items(), key=lambda item: item[1], reverse=True))\n    # Now we have a dictionary with a list of tuples and a number of occurrences for each number.\n    # Now we find the k numbers\n    # Now we will iterate through the dictionary and find the k number of smallest pairs, which is the number of occurrences of k numbers for each number\n    # Let's start by creating a queue\n    queue = []\n    for k, v in d.items():\n        if len(queue) < k:\n            heapq.heappush(queue, (k, v, k))\n    # Now we want to print the queue\n    # We can use 'while' here as we are trying to remember the last number to be popped.\n    while queue:\n        # Pop the first element in the queue\n        k, v, k = heapq.heappop(queue)\n        # Now, we have the last element to be popped. Now we want to print the number of occurrences\n        print(k, v)\n        # Now we will add the other elements to the queue\n        for i in range(k, n):\n            heapq.heappush(queue, (i + 1, v, i + 1))\n    # Now the queue is empty, so we have visited all the numbers.\n    return"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    p = 0\n    for i in range(len(list1)):\n        if p == len(list1)-1:\n            break\n        if list1[p][1] > list1[p+1][1] and list1[p][0] < list1[p+1][0]:\n            min_product = list1[p][0] * list1[p][1]\n            p+=1\n        elif list1[p][1] < list1[p+1][1] and list1[p][0] > list1[p+1][0]:\n            min_product = list1[p][0] * list1[p][1]\n            p+=1\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    i = 0\n    while i < len(list1):\n        j = i + 1\n        while j < len(list1):\n            curr_product = list1[i][1] * list1[j][1]\n            if curr_product < min_product:\n                min_product = curr_product\n            j += 1\n        i += 1\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #Calculate the min product\n    min_product = 9999999\n    min_product = 0\n    \n    #loop through each pair\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            #calculate the min product\n            min_product = min(list1[i][0]*list1[j][0],min_product)\n            \n            #Check if min product is less than or equal to min product\n            if(min_product <= min_product):\n                min_product = list1[i][0]*list1[j][0]\n            \n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    smallest_product = list1[0][1]\n    smallest_product_index = 0\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    res=[]\n    #start of brute force algorithm\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            res.append(list1[i][1]*list1[j][1])\n    return res\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][1] * list1[1][1]\n    for index, i in enumerate(list1):\n        if min_product < i[1]:\n            min_product = i[1]\n        if min_product < i[1]:\n            continue\n        else:\n            return index + 1\n    else:\n        return False\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = list1[0][1] * list1[1][1]\n    min_prod_idx = 0\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            min_prod = min(min_prod, list1[i][1] * list1[j][1])\n            if min_prod < min_prod_idx:\n                min_prod_idx = min_prod\n    return min_prod_idx\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = []\n    #recursive approach\n    def min_product(list1):\n        if len(list1) == 1:\n            return list1[0][0]\n        else:\n            for i in range(len(list1)):\n                for j in range(i+1, len(list1)):\n                    if list1[i][0] * list1[j][0] < list1[i][1] * list1[j][1]:\n                        list1[i], list1[j] = list1[j], list1[i]\n                        min_product.append(list1[i])\n                        return min_product(list1)\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) <= 1:\n        return (list1[0][0] * list1[0][1], list1[0][1] * list1[0][0])\n    else:\n        a = list1[0]\n        b = list1[1]\n        for i in range(2, len(list1)):\n            a = a[0] + b[0]\n            b = a[1] + b[1]\n        return a, b\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    min_tuple = []\n    for i in range(len(list1)):\n        min_tuple.append((list1[i][0], list1[i][1], list1[i][2]))\n    min_tuple.sort(key=lambda x: x[2])\n    for i in range(len(min_tuple)):\n        min_product += min_tuple[i][2] * min_tuple[i][0]\n    return min_product\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # step 1: find the minimum element in the list.\n    min = listval[0]\n    # loop over the list elements\n    for i in listval:\n        # if the value of the element is smaller than the minimum value\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize min and max to 0\n    min = 0\n    max = len(listval) - 1\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    pass\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n    \ndef min_val_2(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    pass\n    \ndef max_val_2(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n    \ndef min_val_3(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    pass\n    \ndef max_val_3(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for el in listval:\n        if el > min_val:\n            min_val = el\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = float('inf')\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for v in listval:\n        if v < min(listval):\n            min = v\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(?<=[A-Z])_([A-Z])', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()+word.lower()\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()+word.lower()\ndef camel_to_camel_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()+word.lower()\ndef camel_to_camel_snake_no_s(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef camel_to_snake_no_s(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\ndef snake_to_camel_no_s(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower().rstrip('_')\ndef swap_case(phrase):\n    '''\n    Swap case in a phrase.\n    '''\n    return phrase.swapcase()\ndef main():\n    '''\n    This program is for performing the task described in the project description.\n    '''\n    word_list = []\n    word_list = input(\"Please enter a list of words separated by whitespace: \").split()\n    print(word_list)\n    output_list = []\n    #Output of list of words, using a split function, \n    # to list all words, lowercase, add the number of words in a list of words, \n    # to the list, and in a list, swap case, and swap case.\n    for i in range(len(word_list)):\n        output_list.append(word_list[i].lower().split())\n        output_list[i] = output_list[i].swapcase()\n        output_list[i] = output_list[i].swapcase()\n    #print(output_list)\n    for i in range(len(word_list)):\n        word = output_list[i][0]\n        index = output_list[i][1]\n        for j in range(len(word_list)):\n            if word_list[j] == word:\n                output_list[i] = word_list[j]\n                word_list[j] = index\n    #print(output_list)\n    print(output_list)\n    #print(word_list)\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    for char in re.findall(r\"[a-zA-Z]\", word):\n        word = word.replace(char, char.upper() + char.lower())\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('_','')\n    word = re.sub(r'[^\\w]','',word)\n    word = re.sub('[.]+','.',word)\n    word = re.sub('[!@#$%^&*_]','',word)\n    word = re.sub('[+]',' ',word)\n    word = re.sub('[:;=.,]','',word)\n    word = word.strip()\n    return word.lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    regex = r\"[a-zA-Z]\"\n    regex2 = r\"[A-Z]\"\n    words = re.split(regex, word)\n    new_word = \"\"\n    for i in range(len(words)):\n        for j in range(len(words[i])):\n            if j == 0:\n                new_word += words[i][j].upper()\n            else:\n                new_word += words[i][j].lower()\n    return new_word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.replace('_', '')\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    evens = []\n    for i in l:\n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [int(x) for x in list(filter(lambda x: (int(x) % 2 == 1), l))]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    def odd(l):\n        '''\n        Determines if a list is odd\n        '''\n        if len(l) == 0:\n            return False\n        if l[0] % 2 == 0:\n            return True\n        return False\n    odds = filter(odd,l)\n    return list(odds)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [int(i) for i in l]\n    return [i for i in l if i % 2!= 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(0,len(l),2):\n        l[i]=l[i][0]\n        l[i+1]=l[i+1][0]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    list_odd = []\n    for i in l:\n        if i % 2 == 0:\n            list_odd.append(i)\n    return list_odd\n    \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    list_even = []\n    for i in l:\n        if i % 2 == 0:\n            list_even.append(i)\n    return list_even\n    \ndef average(l):\n    '''\n    Write a python function to calculate the average of the given list of numbers.\n    '''\n    sum = 0\n    for i in l:\n        sum += i\n    return sum/len(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i % 2 == 1:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    for i in l:\n        if i % 2!= 0:\n            odds.append(i)\n    return odds\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for num in l:\n        if num%2 == 1:\n            l.remove(num)\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 0:\n        return list1[0][n-1]\n    elif n > len(list1):\n        return extract_nth_element(list1, n-1)\n    else:\n        return list1[n-1][n-1]\n    "
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    l = len(list1)\n    if l == 0:\n        raise Exception(\"List is empty\")\n    \n    if n < 1 or n > l:\n        raise Exception(\"Invalid n\")\n    \n    return list1[l - n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        first_item = list1[0]\n        nth_item = list1[n]\n        return first_item, nth_item\n    except IndexError:\n        print('Invalid index.')\n        return None, None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for ele in list1:\n        list2.append(ele[n])\n    return list2\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list_n = [item for item, count in collections.Counter(list1).items() if count == n]\n    return list_n[-1]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #Your code here\n    d={}\n    for i in list1:\n        if i in d:\n            d[i]=d[i]+1\n        else:\n            d[i]=1\n    for i in list2:\n        if i in d:\n            d[i]=d[i]+1\n        else:\n            d[i]=1\n    for i in d.values():\n        if i==0:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    return list1==list2\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #logic to check whether list1 has any value in list2 or not.\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                list2.remove(list1[i])\n    return list2\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n                break\n    if count == len(list1):\n        print(\"True\")\n    else:\n        print(\"False\")\n    print(count)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    x = [0 for i in range(len(list1))]\n    for i in list1:\n        x[list1.index(i)]+=1\n        \n    for i in range(len(list1)):\n        if(x[i]>1):\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Code here\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # create a dictionary from the list\n    d = dict()\n    for x in list1:\n        d[x] = list1.count(x)\n    #print(d)\n    # create a dictionary from the list\n    d = dict(sorted(d.items(), key=lambda item: item[1]))\n    #print(d)\n    # print the dictionary\n    for i in d.keys():\n        print(i, end = \" \")\n    print()\n    # create a list from the dictionary\n    o = [i for i in d.values()]\n    # print the list\n    #print(o)\n    print()\n    # if there is a overlap\n    if o:\n        print(\"There is an overlap\")\n    else:\n        print(\"There is no overlap\")\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_n = max(arr)\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[j] == max_n and i!= j:\n                return max(arr[j], arr[i])\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if not arr:\n        return 0\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    return prod\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    n = len(arr)\n    if n == 0: \n        return\n    if n == 1: \n        return arr[0] \n    max_product = arr[0] \n    for i in range(1, n): \n        max_product = max(max_product * arr[i], arr[i]) \n    return max_product \n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_p=max(arr)\n    return arr.index(max_p)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize dictionary with the key as the index in the array and the values as the product\n    dic = {}\n    max_product = 0\n    for i in range(len(arr)):\n        product = arr[i] * arr[i+1]\n        if product not in dic:\n            dic[product] = i\n        else:\n            temp = dic[product] + 1\n            dic[product] = i\n            if temp > max_product:\n                max_product = temp\n    # Return the product with the highest value\n    return dic[max_product]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Take first element as start index\n    arr.sort()\n    start = 0\n    end = len(arr) - 1\n    while start < end: \n        product = arr[start] * arr[end]\n        if product > arr[end]: \n            end -= 1\n        elif product < arr[start]: \n            start += 1\n        else: \n            return [arr[start], arr[end]]\n    return None\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    array = []\n    for x in arr:\n        array.append(x)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    highest = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] * arr[j] > highest:\n                highest = arr[i] * arr[j]\n    return highest\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maximum = arr[0]\n    smallest = arr[0]\n    for i in arr:\n        if i > maximum:\n            maximum = i\n        if i < smallest:\n            smallest = i\n    return [maximum, smallest]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # get all tuples in list\n    x = [tuple(i) for i in Input]\n    # find common element\n    return [element for element in x if element[0]!= element[1]]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a=list(Input)\n    a.sort()\n    return a[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # result = []\n    # for i in range(len(Input)):\n    #     if Input[i] not in result:\n    #         result.append(Input[i])\n    \n    # return result\n    return list(set(Input))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    Input.sort() \n    \n    # if len(Input) <= 1:\n    #     return Input[0]\n    \n    # first element of list is unique \n    return Input[0][0] \n    "
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a set\n    # while True:\n    #     for i in range(len(Input)):\n    #         for j in range(i,len(Input)):\n    #             if Input[i]==Input[j]:\n    #                 if j==len(Input)-1:\n    #                     break\n    #                 if Input[i]!=Input[j]:\n    #                     if Input[i]!=Input[j]:\n    #                         Input[i],Input[j]=Input[j],Input[i]\n    #                 break\n    #     if True not in Input:\n    #         return\n    #     return\n    if len(Input)==1:\n        return Input[0]\n    else:\n        return group_tuples(Input[:])+group_tuples(Input[:])\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if Input == []:\n        return []\n    if len(Input) == 1:\n        return Input[0]\n    else:\n        i = 0\n        j = 1\n        result = []\n        while i < len(Input):\n            if Input[i] == Input[j]:\n                result.append(Input[i])\n                i += 1\n                j += 1\n            else:\n                if len(result) > 0:\n                    result.append(Input[i])\n                i += 1\n        return result\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if not Input:\n        return []\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return [elem for elem in Input if elem[0]!= elem[1]]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 1: \n        return Input[0]\n    else:\n        return group_tuples(Input[1:])\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = [] \n    for i in range(len(Input)): \n        list_of_tuples.append(tuple(Input[i]))\n    common = list_of_tuples[0]\n    for i in range(1, len(list_of_tuples)): \n        if list_of_tuples[i] == common: \n            common = list_of_tuples[i] \n    return common \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return \"No elements in the list.\"\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[len(lst)//2]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > maximum_length:\n            maximum_length = len(lst[i])\n    return maximum_length\n        \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst) \n    for i in range(0, max_length-1): \n        for j in range(i+1,max_length): \n            if lst[i] > lst[j]: \n                temp = lst[i] \n                lst[i] = lst[j] \n                lst[j] = temp \n    return lst\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_elem = lst[0]\n    for i in lst:\n        if max_elem < i:\n            max_elem = i\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=lst[0]\n    for i in range(len(lst)):\n        if lst[i] > max:\n            max=lst[i]\n    return max\nlst=[10,20,10,30,40,10,20,40,10,20,10,10,10,10,10]\nprint(Find_Max(lst))"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst) \n    for i in range(max_length): \n        if (lst[i] == max(lst)): \n            return i \n        else: \n            return -1\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=lst[0]\n    maxi=0\n    for i in range(len(lst)):\n        if max<lst[i]:\n            max=lst[i]\n            maxi=i\n    return maxi\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if len(i)>max:\n            max=len(i)\n            \n    return max\n    "
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(0, len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    return max\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(list1)\n    sum = 0\n    for number in list1:\n        sum += number\n    print(f'The total is {sum * len(list1)}.')\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    def round_and_sum(list1):\n        # Function to round each number in a given list and print the result.\n        for i in list1:\n            i = round(i, 2)\n            print(i)\n        return\n    \n    # Function to determine the total sum of all numbers in a given list of numbers.\n    def total_sum(list1):\n        # Function to calculate the total sum of all numbers in a given list of numbers.\n        total = 0\n        for i in list1:\n            total += i\n        print(total)\n        return\n    \n    # Function to calculate the total sum of numbers in a given list of numbers.\n    def total_sum(list1):\n        # Function to calculate the total sum of numbers in a given list of numbers.\n        total = 0\n        for i in list1:\n            total += i\n        print(total)\n        return\n    \n    # Function to determine the total sum of numbers in a given list of numbers.\n    def total_sum(list1):\n        # Function to calculate the total sum of numbers in a given list of numbers.\n        total = 0\n        for i in list1:\n            total += i\n        print(total)\n        return\n    \n    # Function to determine the total sum of numbers in a given list of numbers.\n    def total_sum(list1):\n        # Function to calculate the total sum of numbers in a given list of numbers.\n        total = 0\n        for i in list1:\n            total += i\n        print(total)\n        return\n    \n    # Function to determine the total sum of numbers in a given list of numbers.\n    def total_sum(list1):\n        # Function to calculate the total sum of numbers in a given list of numbers.\n        total = 0\n        for i in list1:\n            total += i\n        print(total)\n        return\n    \n    # Function to determine the total sum of numbers in a given list of numbers.\n    def total_sum(list1):\n        # Function to calculate the total sum of numbers in a given list of numbers.\n        total = 0\n        for i in list1:\n            total += i\n        print(total)\n        return\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #pass the function to the list\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i])\n        #remove list from list\n        list1.remove(list1[i])\n    #print the number of list\n    print(sum(list1))\n    #add the list to the sum_list\n    sum_list.append(sum(list1))\n    #print the sum\n    print(sum_list)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total=0\n    for i in range(len(list1)):\n        total+=list1[i]\n    return total*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total = total + x\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    length = len(list1)\n    for i in range(0, length):\n        total += list1[i]\n    return total\ndef add(x, y):\n    '''\n    Write a function to compute the sum of two numbers on a list of integers.\n    '''\n    return x + y\ndef sub(x, y):\n    '''\n    Write a function to compute the difference of two numbers on a list of integers.\n    '''\n    return x - y\ndef multiply(x, y):\n    '''\n    Write a function to compute the product of two numbers on a list of integers.\n    '''\n    return x * y\ndef divide(x, y):\n    '''\n    Write a function to compute the quotient of two numbers on a list of integers.\n    '''\n    return x / y\ndef sum_lists(list1, list2):\n    '''\n    Write a function to compute the sum of two lists.\n    '''\n    return sum(list1) + sum(list2)\ndef average(list1):\n    '''\n    Write a function to find the average of a list of numbers.\n    '''\n    return sum(list1) / len(list1)\ndef num_entries(list1):\n    '''\n    Write a function to find the number of unique elements in a list.\n    '''\n    return len(list1)\ndef has_cycle(list1):\n    '''\n    Write a function to detect if there is a cycle in a list.\n    '''\n    visited = set()\n    for i in range(0, len(list1)):\n        if list1[i] in visited:\n            return True\n        else:\n            visited.add(list1[i])\n    return False\ndef smallest_even(list1):\n    '''\n    Write a function to find the smallest even number in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0]\n    if len(list1) % 2 == 0:\n        return list1[int(len(list1)/2)]\n    else:\n        mid = int(len(list1)/2)\n        if list1[mid] < list1[mid+1]:\n            return list1[mid]\n        else:\n            return list1[mid]\ndef smallest_odd(list1):\n    '''\n    Write a function to find the smallest odd number in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0]\n    if len(list1) % 2 == 1:\n        return list1[int(len(list1)/2)]\n    else:\n        mid = int(len(list1)/2)\n        if list1[mid] < list1[mid-1]:\n            return list1[mid]\n        else:\n            return list1[mid]\ndef max_list(list1):\n    '''\n    Write a function to find the maximum element in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0]\n    if len(list1) % 2 == 0:\n        return list1[int(len(list1)/2)]\n    else:\n        mid = int(len(list1)/2)\n        if list1[mid] > list1[mid-1]:\n            return list1[mid]\n        else:\n            return list1[mid]\ndef max_even_odd(list1):\n    '''\n    Write a function to find the maximum element in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0]\n    if len(list1) % 2 == 0:\n        return list1[int(len(list1)/2)]\n    else:\n        mid = int(len(list1)/2)\n        if list1[mid] > list1[mid-1]:\n            return list1[mid]\n        else:\n            return list1[mid]\ndef reverse_list(list1):\n    '''\n    Write a function to reverse a list.\n    '''\n    if len(list1) == 0:\n        return None\n    if len(list1) == 1:\n        return list1\n    mid = int(len(list1)/2)\n    if list1[mid] > list1[mid-1]:\n        return reverse_list(list1[:mid])\n    else:\n        return reverse_list(list1[mid+1:])\ndef merge_sort(list1):\n    '''\n    Write a function to sort a list of numbers using the merge sort algorithm.\n    '''\n    if len(list1) == 0:\n        return None\n    if len(list1) == 1:\n        return list1\n    mid = int(len(list1)/2)\n    return merge(merge_sort(list1[:mid]), merge_sort(list1[mid:]))\ndef merge(list1, list2):\n    '''\n    Write a function to merge 2 sorted lists into one.\n    '''\n    if len(list1) == 0:\n        return list2\n    if len(list1) == 1:\n        return list1\n    if len(list2) == 0:\n        return list1\n    if len(list2) == 1:\n        return list2\n    if list1[0] <= list2[0]:\n        return merge(list1, list2[1:])\n    else:\n        return merge(list2, list1[1:])\ndef count_list(list1):\n    '''\n    Write a function to count the number of occurrences of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return 1\n    mid = int(len(list1)/2)\n    if list1[mid] == list1[mid-1]:\n        return count_list(list1[:mid])\n    else:\n        return count_list(list1[mid+1:])\ndef count_odd_even(list1):\n    '''\n    Write a function to count the number of occurrences of odd numbers and even numbers in a list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return 1\n    if len(list1) % 2 == 0:\n        return count_odd_even(list1[:len(list1)//2])\n    else:\n        mid = int(len(list1)/2)\n        if list1[mid] == list1[mid-1]:\n            return count_odd_even(list1[:mid])\n        else:\n            return count_odd_even(list1[mid+1:])\ndef print_list(list1):\n    '''\n    Write a function to print a list of numbers.\n    '''\n    if len(list1) == 0:\n        return None\n    if len(list1) == 1:\n        return list1\n    if len(list1) % 2 == 0:\n        mid = int(len(list1)/2)\n        return print_list(list1[:mid]) + \" \" + print_list(list1[mid:])\n    else:\n        mid = int(len(list1)/2)\n        if list1[mid] < list1[mid-1]:\n            return print_list(list1[:mid]) + \" \" + print_list(list1[mid:mid+1])\n        else:\n            return print_list(list1[mid:]) + \" \" + print_list(list1[:mid+1])\ndef power(a, n):\n    '''\n    Write a function to raise a number to the power of n.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return a\n    if n % 2 == 0:\n        return power(a, n//2)\n    else:\n        return a * power(a, n-1)\ndef fib(n):\n    '''\n    Write a function to generate the nth fibonacci number.\n    '''\n    i"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for number in list1:\n        total += number\n    print(total)\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n    print(total)\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # The list of numbers.\n    list_of_numbers = list1\n    # Initialize the sum of the numbers with zero.\n    sum = 0\n    # Loop through the list, check the next number for a sum, update the sum with that number.\n    for num in list_of_numbers:\n        sum += num\n    # Return the total sum.\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for number in list1:\n        sum += number\n    print(round(sum, 2))\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    l = [i**3 for i in range(n+1) if i%2==0]\n    return l[0]\nprint(cube_Sum(5))\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n ** 3\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c=0\n    for i in range(1,n+1):\n        c+=i**3\n    return c\nprint(cube_Sum(10))\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i*i*i\n    return cube_sum\n    \n    \ndef is_prime(num): \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if num == 1: \n        return False\n    if num == 2: \n        return True\n    if num % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2): \n        if num % i == 0: \n            return False\n    return True\n    \n    \ndef prime_factors(num): \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    factors = []\n    i = 3\n    while i*i <= num: \n        if num % i == 0: \n            factors.append(i)\n            num //= i\n        else: \n            i += 2\n    if num > 1: \n        factors.append(num)\n    return factors\n    \n    \ndef is_prime_factor(num): \n    '''\n    Write a python function to check if a number is prime factor or not.\n    '''\n    if num == 1: \n        return False\n    if num == 2: \n        return True\n    if num % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2): \n        if num % i == 0: \n            return False\n    return True\n    \n    \ndef prime_factor_sum(n): \n    '''\n    Write a python function to find the prime factor sum of a number.\n    '''\n    sum = 0\n    for i in range(2, n): \n        if n % i == 0: \n            sum += i\n    return sum\n    \n    \ndef is_prime_factor_sum(n): \n    '''\n    Write a python function to check if a number is prime factor sum or not.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_factor_sum_2(n): \n    '''\n    Write a python function to check if a number is prime factor sum or not.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_factor_sum_3(n): \n    '''\n    Write a python function to check if a number is prime factor sum or not.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_factor_sum_4(n): \n    '''\n    Write a python function to check if a number is prime factor sum or not.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_factor_sum_5(n): \n    '''\n    Write a python function to check if a number is prime factor sum or not.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_factor_sum_6(n): \n    '''\n    Write a python function to check if a number is prime factor sum or not.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_factor_sum_7(n): \n    '''\n    Write a python function to check if a number is prime factor sum or not.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_factor_sum_8(n): \n    '''\n    Write a python function to check if a number is prime factor sum or not.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_factor_sum_9(n): \n    '''\n    Write a python function to check if a number is prime factor sum or not.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_factor_sum_10(n): \n    '''\n    Write a python function to check if a number is prime factor sum or not.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_factor_sum_11(n): \n    '''\n    Write a python function to check if a number is prime factor sum or not.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_factor_sum_12(n): \n    '''\n    Write a python function to check if a number is prime factor sum or not.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if n % i == 0: \n            return False\n    return True\n    \n    \ndef is_prime_factor_sum_13(n): \n    '''\n    Write a python function to check if a number is prime factor sum or not.\n    '''\n    if n == 1: \n        return Fals"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a=0\n    b=1\n    for i in range(2, n):\n        a=a+b\n        b=b*2\n    return a\nprint(cube_Sum(3))\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # iterate through all natural numbers\n    summ = 0\n    for i in range(1,n+1):\n        summ += i**3\n    return summ\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i*i*i\n    return sum\n    \ndef max_neg(n):\n    '''\n    Write a python function to find the largest negative number in a list.\n    '''\n    list=[]\n    i=0\n    while i<len(n):\n        if n[i]<0:\n            list.append(n[i])\n            del n[i]\n            i=i-1\n        else:\n            i=i+1\n    return max(list)\n    \ndef max_num(n):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    if len(n)==0:\n        return 0\n    max_num=n[0]\n    for i in range(len(n)):\n        if n[i]>max_num:\n            max_num=n[i]\n    return max_num\n    \ndef min_neg(n):\n    '''\n    Write a python function to find the smallest negative number in a list.\n    '''\n    list=[]\n    i=0\n    while i<len(n):\n        if n[i]<0:\n            list.append(n[i])\n            del n[i]\n            i=i-1\n        else:\n            i=i+1\n    return min(list)\n    \ndef min_num(n):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(n)==0:\n        return 0\n    min_num=n[0]\n    for i in range(len(n)):\n        if n[i]<min_num:\n            min_num=n[i]\n    return min_num\n    \ndef find_pair(n):\n    '''\n    Write a python function to find the pair of the two largest numbers in a list.\n    '''\n    list=[]\n    i=0\n    while i<len(n):\n        if n[i]>=n[i+1]:\n            list.append(n[i])\n            del n[i]\n            i=i-1\n        else:\n            i=i+1\n    return max(list)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    assert n > 0, 'number of arguments must be positive'\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    print(sum)\ndef sum_cube(n):\n    '''\n    Write a python function to find the sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\ndef triangle(n):\n    '''\n    Write a python function to find the sum of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i+1)**2\n    print(sum)\ndef fib(n):\n    '''\n    Write a python function to find the sum of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i+1)**2\n    print(sum)\ndef fib2(n):\n    '''\n    Write a python function to find the sum of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i+1)**2\n    print(sum)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of the first n natural numbers.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef factorial2(n):\n    '''\n    Write a python function to find the factorial of the first n natural numbers.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial2(n-1)\ndef prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef sieve(n):\n    '''\n    Write a python function to find the prime numbers in the range 2 to n.\n    '''\n    i=3\n    while i*i<=n:\n        if n%i==0:\n            j=2\n            while j*j<=i:\n                if n%i==0:\n                    print(i,end=\" \")\n                    break\n                j+=1\n        i+=1\ndef prime_square(n):\n    '''\n    Write a python function to find the prime squares of the first n natural numbers in the range of 2 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if prime(i):\n            sum += i**2\n    print(sum)\ndef prime_cube(n):\n    '''\n    Write a python function to find the prime cubes of the first n natural numbers in the range of 2 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if prime(i):\n            sum += i**3\n    print(sum)\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n==3:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\ndef square(n):\n    '''\n    Write a python function to find the square of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\ndef cube(n):\n    '''\n    Write a python function to find the cube of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum\ndef area_square(n):\n    '''\n    Write a python function to find the area of the square of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\ndef area_cube(n):\n    '''\n    Write a python function to find the area of the cube of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum\ndef area_sum(n):\n    '''\n    Write a python function to find the area of the square of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\ndef area_cub(n):\n    '''\n    Write a python function to find the area of the cube of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum\ndef area_sum_square(n):\n    '''\n    Write a python function to find the area of the square of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\ndef area_cube_square(n):\n    '''\n    Write a python function to find the area of the cube of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum\ndef fib_square(n):\n    '''\n    Write a python function to find the square of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\ndef fib_square_1(n):\n    '''\n    Write a python function to find the square of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\ndef fib_square_2(n):\n    '''\n    Write a python function to find the square of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\ndef fib_square_3(n):\n    '''\n    Write a python function to find the square of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\ndef fib_square_4(n):\n    '''\n    Write a python function to find the square of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\ndef fib_square_5(n):\n    '''\n    Write a python function to find the square of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\ndef fib_square_6(n):\n    '''\n    Write a python function to find the square of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\ndef fib_square_7(n):\n    '''\n    Write a python function to find the square of the first n natural numbers in the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\ndef fib_square_"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = 0\n    b = 1\n    for i in range(1,n+1,2):\n        a = a + b\n        b = b + a\n    return a\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup=test_tup\n    if len(tup) == 0:\n        return ''\n    else:\n        return ''.join(tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Declare a tuple to be returned\n    concatenated_tuple = ()\n    for i in test_tup:\n        concatenated_tuple += i\n    return concatenated_tuple\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        if i!= len(test_tup) - 1:\n            result += str(test_tup[i]) + \" \"\n        else:\n            result += str(test_tup[i])\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if type(test_tup[0]) is not tuple:\n        raise ValueError(\"Your tuple should be a tuple.\")\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup = tuple(test_tup)\n    return \" \".join(map(str, test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    out = ''\n    for x in test_tup:\n        out += str(x)\n    return out\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''.join(test_tup)\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i)\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i)\n        result += str(',')\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import math\n    list1=[]\n    for i in range(1,n+1):\n        x=i*i\n        list1.append(x)\n    print(list1)\n    cubes=[]\n    for i in range(len(list1)):\n        cubes.append(list1[i]*list1[i])\n    print(cubes)\n    sum_of_cubes=sum(cubes)\n    print(sum_of_cubes)\n    avg=sum_of_cubes/len(cubes)\n    print(avg)\nfind_Average_Of_Cube(15)"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num = 1\n    cubes = [1,3,9,27,81]\n    \n    for x in range(n):\n        num *= cubes[x]\n    \n    print(num)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_n = 1\n    total = 0\n    while cube_n <= n:\n        total = total + cube_n ** 3\n        cube_n = cube_n ** 3\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num=[]\n    for i in range(n):\n        num.append(int(input('Enter a number : ')))\n    sum=0\n    for i in range(n):\n        sum+=num[i]\n    print('The average of cubes of the numbers : ',sum/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    my_list = []\n    for i in range(n):\n        my_list.append(i**3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    '''\n    Find the average of cubes of 1,3,5,7,9, and 11 natural numbers.\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import math\n    lst = []\n    for i in range(n):\n        lst.append(math.sqrt(i))\n    lst.sort()\n    sum = 0\n    for i in lst:\n        sum += i\n    return sum/len(lst)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # store the cube value in a list\n    cube_list = []\n    for i in range(n):\n        cube = int(input('Enter a natural number: '))\n        cube_list.append(cube)\n    # get the sum of the cubes\n    sum_of_cube = 0\n    for x in cube_list:\n        sum_of_cube += x**3\n    # print the average of cube\n    if len(cube_list)>0:\n        average = sum_of_cube / len(cube_list)\n    else:\n        average = 0\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    print('Enter the numbers:')\n    n = int(input())\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = tuple(map(lambda x: x[-1], test_tuple))\n    return new_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    if len(test_tuple)!= 3:\n        print(test_tuple)\n        return\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # your code goes here\n    index = 0\n    string = \"\"\n    for char in test_tuple[0]:\n        string += char\n        index += 1\n    return string[index:]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elems = list(filter(lambda s: s.startswith(\"rear\"), test_tuple))\n    return rear_index_elems\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front_index, rear_index = test_tuple\n    return front_index, rear_index\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front_ind = None\n    rear_ind = None\n    front = test_tuple[0]\n    for i in range(len(test_tuple)-1):\n        if front == test_tuple[i]:\n            front_ind = i\n        elif front!= test_tuple[i]:\n            rear_ind = i\n    if rear_ind == None and front_ind == None:\n        return None\n    return [front_ind, rear_ind]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple = test_tuple[0]\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    #Retrieves the first element in each tuple\n    first_element = test_tuple[0]\n    #Retrieves the last element in each tuple\n    last_element = test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(test_tuple.index(string))\n    return rear_index\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list1_index=0\n    count=0\n    for i in range(len(list1)):\n        if list1[i][0]==x:\n            list1_index=i\n            break\n    for i in range(len(list1)):\n        if list1[i][1]==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list1.sort() # insert into the end of the list \n    if x not in list1:\n        return 0\n    else:\n        for i in range(0,len(list1)):\n            if list1[i] == x:\n                return 1 + count_element_in_list(list1[i+1:], x)\n    \ndef check_if_solution_exists(lst):\n    '''\n    Write a function to check if a list has solution or not.\n    '''\n    for i in lst:\n        if i!= solution:\n            return False\n    return True\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    #check if x is in list1\n    if x in list1:\n        #if x is in list1, count it\n        count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if item == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    res = 0\n    for i in list1:\n        if i == x:\n            res += 1\n    return res\n    \ndef count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    res = 0\n    for i in list1:\n        if i == x:\n            res += 1\n    return res\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c=0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            c+=1\n    return c\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            nums.remove(i)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # result = []\n    # for num in nums:\n    #     if num % 2 == 1:\n    #         result.append(num)\n    # return result\n    return [num for num in nums if num % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            yield num\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num%2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            print(num)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for number in nums:\n        if number % 2 == 1:\n            odd_numbers.append(number)\n    return odd_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [number for number in nums if number % 2 == 1]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import datetime\n    date = dt.split('-')\n    date = list(map(int, date))\n    print(date)\n    date[2] = date[2] + date[1]\n    date[1] = date[2] + date[0]\n    date[0] = date[1] + date[2]\n    print(date)\n    \n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        dt = re.split(r'[-]', dt)\n        if len(dt[1]) > 6:\n            dt[1] = dt[1][0:6] + dt[1][7:]\n        dt[2] = dt[2].zfill(2)\n        dt[3] = dt[3].zfill(2)\n        dt[4] = dt[4].zfill(2)\n        dt[5] = dt[5].zfill(2)\n        return dt\n    except IndexError:\n        print(\"Date format invalid\")\n    except ValueError:\n        print(\"Date format invalid\")\n    \ndef change_time_format(time):\n    '''\n    Write a function to convert a date of hh:mm format to hh:mm format.\n    '''\n    try:\n        time = re.split(r'[:]', time)\n        time[1] = time[1].split(':')[0]\n        time[2] = time[2].split(':')[0]\n        time[3] = time[3].split(':')[0]\n        return time\n    except IndexError:\n        print(\"Time format invalid\")\n    except ValueError:\n        print(\"Time format invalid\")\n    \ndef change_time_format_sub(time):\n    '''\n    Write a function to convert a date of hh:mm format to hh:mm format.\n    '''\n    try:\n        time = re.split(r'[:]', time)\n        time[1] = time[1].split(':')[1]\n        time[2] = time[2].split(':')[1]\n        time[3] = time[3].split(':')[1]\n        return time\n    except IndexError:\n        print(\"Time format invalid\")\n    except ValueError:\n        print(\"Time format invalid\")\n    \ndef change_day_format(day):\n    '''\n    Write a function to convert a day of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        day = re.split(r'[-]', day)\n        day[2] = day[2].zfill(2)\n        day[3] = day[3].zfill(2)\n        day[4] = day[4].zfill(2)\n        day[5] = day[5].zfill(2)\n        return day\n    except IndexError:\n        print(\"Date format invalid\")\n    except ValueError:\n        print(\"Date format invalid\")\n    \ndef change_day_format_sub(day):\n    '''\n    Write a function to convert a day of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        day = re.split(r'[:]', day)\n        day[2] = day[2].zfill(2)\n        day[3] = day[3].zfill(2)\n        day[4] = day[4].zfill(2)\n        day[5] = day[5].zfill(2)\n        return day\n    except IndexError:\n        print(\"Date format invalid\")\n    except ValueError:\n        print(\"Date format invalid\")\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year,month,day = dt.split('-')\n    return f'{day}-{month}-{year}'\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # initialize an empty dictionary \n    date = {}\n    # define the date format \n    date['date'] = dt.split('-')\n    # append the format of date to the dictionary\n    date['date'] = ''.join(date['date'])\n    # return the formatted date string \n    return date['date']\n    \ndef get_address_from_text(text):\n    '''\n    Write a function to extract the address from the given text.\n    '''\n    # define the regex to parse the text \n    regex = r'([A-Z]{3,})'\n    # regex is defined for parsing the address \n    \n    # parse the address string\n    address_list = re.findall(regex, text, flags=re.IGNORECASE)\n    # iterate through the list\n    for address in address_list:\n        # only consider the first address \n        if address[0]!= 'A':\n            # construct the formatted address string \n            address_string =''.join(address)\n            # print(address_string)\n            # return the formatted address string \n            return address_string\n    # return an empty string if no address is found \n    return ''\n    \ndef get_text_from_file(path):\n    '''\n    Write a function to read the contents of a text file and return it in a list.\n    '''\n    # construct the path to the text file \n    file_path = path\n    # open the file \n    with open(file_path) as f:\n        # return the contents of the file as a list \n        text = f.readlines()\n        # return the text as a list \n        return text\n    \ndef get_phone_number_from_file(file_path):\n    '''\n    Write a function to find the phone number of a text file.\n    '''\n    # construct the path to the file \n    file_path = file_path\n    # open the file \n    with open(file_path) as f:\n        # iterate through the lines \n        for line in f:\n            # split the line into words \n            words = line.split()\n            # if there is a number in the line \n            if len(words) > 0:\n                # return the phone number from the words list \n                return words[0]\n    # return an empty string if no phone number is found \n    return ''\n    \ndef get_email_from_file(file_path):\n    '''\n    Write a function to find the email of a text file.\n    '''\n    # construct the path to the file \n    file_path = file_path\n    # open the file \n    with open(file_path) as f:\n        # iterate through the lines \n        for line in f:\n            # split the line into words \n            words = line.split()\n            # if there is a number in the line \n            if len(words) > 0:\n                # return the email from the words list \n                return words[1]\n    # return an empty string if no email is found \n    return ''\n    \ndef get_all_text_from_file(file_path):\n    '''\n    Write a function to find the text of all the files in a directory.\n    '''\n    # construct the path to the directory \n    directory_path = file_path\n    # open the file \n    with open(directory_path) as f:\n        # iterate through the lines \n        for line in f:\n            # split the line into words \n            words = line.split()\n            # if there is a number in the line \n            if len(words) > 0:\n                # return the text from the words list \n                return words\n    # return an empty string if no text is found \n    return ''\n    \ndef get_all_words_from_file(file_path):\n    '''\n    Write a function to find the words of all the files in a directory.\n    '''\n    # construct the path to the directory \n    directory_path = file_path\n    # open the file \n    with open(directory_path) as f:\n        # iterate through the lines \n        for line in f:\n            # split the line into words \n            words = line.split()\n            # if there is a number in the line \n            if len(words) > 0:\n                # return the word from the words list \n                return words\n    # return an empty string if no words are found \n    return ''\n    \ndef get_all_text_of_file(file_path):\n    '''\n    Write a function to find the text of all the files in a directory.\n    '''\n    # construct the path to the directory \n    directory_path = file_path\n    # open the file \n    with open(directory_path) as f:\n        # iterate through the lines \n        for line in f:\n            # split the line into words \n            words = line.split()\n            # if there is a number in the line \n            if len(words) > 0:\n                # return the word from the words list \n                return words\n    # return an empty string if no text is found \n    return ''\n    \ndef get_text_without_no(file_path):\n    '''\n    Write a function to extract the text from all text files.\n    '''\n    # construct the path to the directory \n    directory_path = file_path\n    # open the file \n    with open(directory_path) as f:\n        # iterate through the lines \n        for line in f:\n            # split the line into words \n            words = line.split()\n            # if there is a number in the line \n            if len(words) > 0:\n                # return the text from the words list \n                return words[0]\n    # return an empty string if no text is found \n    return ''\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    str_date = dt.strftime(\"%d-%m-%Y\")\n    return str_date\ndef get_txt_paragraphs(txt):\n    '''\n    Find all paragraphs in a text and return them as a list.\n    '''\n    # Get all paragraphs\n    paragraph_list = re.findall(\"^\\S+\", txt)\n    # Remove empty paragraphs\n    paragraph_list = [para for para in paragraph_list if len(para) > 0]\n    return paragraph_list\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_date = dt[0:10] + dt[11:19] + dt[20:26]\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # unpack the date of yyyy-mm-dd format\n    d,m,y=dt.split('-')\n    # process and return the datetime\n    return d+'-'+m+'-'+y\n    \ndef get_table_of_content(file):\n    '''\n    Open a file, return a table of contents and a dictionary\n    '''\n    table_of_contents = []\n    new_table_of_contents = []\n    \n    # search for date in file\n    content_re = re.compile(r'([0-9]{2}-)?(\\d{2}-?\\d{4})')\n    with open(file, 'r', encoding='utf-8') as fin:\n        line = fin.readline()\n        while line:\n            # split date string with spaces\n            tmp_date = line.split()\n            # create datetime object\n            dt = datetime.strptime(tmp_date[0], '%Y-%m-%d')\n            # change the date format\n            dt = change_date_format(dt)\n            # append to table of contents\n            table_of_contents.append(dt)\n            # append new table of contents\n            new_table_of_contents.append(tmp_date[0]+'-'+tmp_date[1]+'-'+tmp_date[2])\n            # read next line\n            line = fin.readline()\n    # return table of contents\n    return table_of_contents, new_table_of_contents\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import datetime\n    dt = dt.strftime('%Y-%m-%d')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # convert to date object\n    date_obj = datetime.strptime(dt, '%Y-%m-%d')\n    # convert date to dd-mm-yyyy format\n    date_obj_d = date_obj.strftime(\"%d-%m-%Y\")\n    # change dd-mm-yyyy to dd-mm-yyyyyy-dd-mm-yyyy format\n    date_obj_d_new = re.sub('(\\d+)-\\d+-\\d+','\\g<1>-\\g<2>-\\g<3>', date_obj_d)\n    date_obj_d_new = date_obj_d_new.replace('-','-')\n    # change date to dd-mm-yyyy format and return\n    return date_obj_d_new\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_list = dt.split('-')\n    date_list = [int(i) for i in date_list]\n    date_list = list(map(lambda x: x*10, date_list))\n    date_list = list(map(lambda x: str(x), date_list))\n    date_list = list(map(lambda x: x[:2]+'-'+x[2:4]+'-'+x[4:6]+' '+x[6:], date_list))\n    return \"\".join(date_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Write your code here.\n    lenght = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Method 1: Python's implementation\n    # Time complexity: O(n^2)\n    # Space Complexity: O(1)\n    # Runtime: 96 ms (84.37%)\n    # Memory Usage: 14.8 MB (68.97%)\n    #\n    # Method 2:\n    # Time complexity: O(n^2)\n    # Space Complexity: O(n)\n    # Runtime: 96 ms (90.97%)\n    # Memory Usage: 14.8 MB (57.59%)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list)//2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(len(my_list)):\n        for j in range(i, len(my_list)):\n            for k in range(j, len(my_list)):\n                if my_list[k] < my_list[j] and my_list[k] < my_list[i]:\n                    my_list[k], my_list[j] = my_list[j], my_list[k]\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    arr_len = n\n    gap = int(arr_len/2)\n    # Step 1. sort the array by descending order\n    # Step 2. use gap to partition the array into smaller\n    #    sub-arrays with one element smaller than the gap\n    while gap>0:\n        for i in range(gap,n):\n            j = i\n            while j>=i-gap and my_list[j]<my_list[j-gap]:\n                my_list[j],my_list[j-gap] = my_list[j-gap],my_list[j]\n                j-=gap\n        gap = int(gap/2)\n        print(gap)\n    # Step 3. sort the sorted array\n    i = gap\n    while i<n:\n        my_list[i],my_list[arr_len-1] = my_list[arr_len-1],my_list[i]\n        arr_len=arr_len-1\n        i+=1\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Write your code here.\n    for x in range(1, len(my_list)):\n        for y in range(0, x):\n            if my_list[y] > my_list[y + 1]:\n                temp = my_list[y]\n                my_list[y] = my_list[y + 1]\n                my_list[y + 1] = temp\n    print('Sorted array is:')\n    for x in range(len(my_list)):\n        print(my_list[x], end=' ')\n    print()\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    count = 0\n    while count < n:\n        for i in range(count, n):\n            j = i\n            while j >= 0 and my_list[j] < my_list[j + 1]:\n                my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n                j = j - 1\n        count = count + 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #Get the length of the list\n    length = len(my_list)\n    #Iterate over the length\n    for i in range(length-1):\n        #Find the index of the middle element\n        mid = i\n        #Compare each element with the middle element\n        #If the element is smaller, swap it\n        #with the middle element\n        while mid > 0 and my_list[mid] < my_list[mid - 1]:\n            temp = my_list[mid]\n            my_list[mid] = my_list[mid - 1]\n            my_list[mid - 1] = temp\n            mid = mid - 1\n        #Done with the while statement\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_recursive(a, n, k):\n        if n == 0:\n            return\n        mid = n // 2\n        shell_sort_recursive(a, n-mid, k)\n        shell_sort_recursive(a, mid, k)\n        shell_sort_recursive(a, n-mid, k)\n    shell_sort_recursive(my_list, len(my_list), k)\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        test_tup1 = tuple(test_tup1)\n        test_tup2 = tuple(test_tup2)\n    return test_tup1, test_tup2\n    \ndef add_tuple(test_tup1, test_tup2):\n    '''\n    Write a function that adds the two tuples together.\n    '''\n    return tuple(test_tup1 + test_tup2)\n    \ndef get_tuple(test_tup):\n    '''\n    Write a function that returns the tuple with the first item of the given tuple.\n    '''\n    return tuple(test_tup[0])\n    \ndef is_tuple(test_tup):\n    '''\n    Write a function that checks whether the tuple is of the correct data type.\n    '''\n    return type(test_tup) == tuple\n    \ndef is_tuple_of_ints(test_tup):\n    '''\n    Write a function that checks whether the tuple is of the correct data type.\n    '''\n    return type(test_tup) == tuple and len(test_tup) == 2 and all(type(x) == int for x in test_tup)\n    \ndef get_tuple_length(test_tup):\n    '''\n    Write a function that returns the length of the tuple.\n    '''\n    return len(test_tup)\n    \ndef sort_tuples(test_tuples):\n    '''\n    Write a function that sorts the given tuples in order by their element.\n    '''\n    return sorted(test_tuples, key=itemgetter(0))\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    out = ()\n    for tup in test_tup1:\n        out += (tup,)\n    for tup in test_tup2:\n        out += (tup,)\n    return out\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if isinstance(test_tup1, list) and isinstance(test_tup2, tuple):\n        return (test_tup1[0], test_tup1[1]) == test_tup2\n    else:\n        return False\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([1, 2, 3]) + test_tup1 + tuple([4, 5, 6])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Do the tests\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    # Extract the elements\n    extracted_elements = list(map(lambda element : element[0] and element[1], zip(test_tup1, test_tup2)))\n    # Extract the tuples\n    extracted_tuples = list(map(lambda tuple : tuple[0] and tuple[1], zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(test_tup1), tuple(test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for x, y in zip(test_tup1, test_tup2):\n        result.append((x, y))\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # If there are only tuples, write nothing\n    if len(test_tup1) == 1:\n        return test_tup1[0]\n    # Otherwise, iterate through the tuple\n    elif len(test_tup1) == 2:\n        return test_tup1[0] * test_tup1[1]\n    else:\n        return None\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((a*a) - (b*b) + c*c)/(2*a*b)\ndef NewtonRaphson(x,y,z): \n    '''\n    Write a function to find the root of the parabola given by (x, y, z) using Newton-Raphson method.\n    '''\n    delta = abs(x - y)\n    if (delta == 0): \n        return y\n    elif (delta > 0): \n        return Newton_Raphson(y,z,delta/x)\n    else: \n        return Newton_Raphson(x,z,delta/x)\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = abs(a*a - b*b - c*c)\n    if (delta == 0): \n        return a, 0, 0\n    elif (delta > 0): \n        return Newton_Raphson(a, b, delta), Newton_Raphson(b, c, delta), Newton_Raphson(c, 0, delta)\n    else: \n        return Newton_Raphson(a, b, delta), Newton_Raphson(b, c, delta), Newton_Raphson(c, 0, delta)\ndef plot_figure(a, b, c, ax, title): \n    '''\n    Write a function to plot a parabola with its directrix given by (x, y, z).\n    '''\n    ax.plot([a, b], [0, b], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [a*a + a*b, a*b + a*b], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([b, c], [0, c], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([b, c], [b*b + c*c, c*c + b*b], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([a, c], [0, c], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([a, c], [a*a + a*c, a*c + a*c], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([b, a], [0, a], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([b, a], [b*b + a*a, a*a + b*b], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([b, a], [0, a], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [0, 0], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [a*a + a*b, 0], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [0, a], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [0, 0], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.set_title(title)\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\ndef plot_figure_2(a, b, c, ax): \n    '''\n    Write a function to plot a parabola with its directrix given by (x, y, z).\n    '''\n    ax.plot([a, b], [0, b], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [a*a + a*b, a*b + a*b], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([b, c], [0, c], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([b, c], [b*b + c*c, c*c + b*b], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([a, c], [0, c], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([a, c], [a*a + a*c, a*c + a*c], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([b, a], [0, a], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([b, a], [b*b + a*a, a*a + b*b], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([b, a], [0, a], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [0, 0], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [a*a + a*b, 0], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [0, a], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [0, 0], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [0, 0], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [0, 0], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [a*a + a*b, 0], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [0, a], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [0, 0], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [a*a + a*b, 0], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([b, a], [0, a], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([b, a], [b*b + a*a, a*a + b*b], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([b, a], [0, a], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([b, a], [0, 0], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.plot([b, a], [0, 0], linestyle='--', linewidth=2, color='k', marker='o')\n    ax.set_title('')\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\ndef plot_figure_3(a, b, c, ax): \n    '''\n    Write a function to plot a parabola with its directrix given by (x, y, z).\n    '''\n    ax.plot([a, b], [0, b], linestyle=':', linewidth=2, color='k', marker='o')\n    ax.plot([a, b], [a*a + a*b, a*b + a*b], linestyle='--', linewidth=2, color='k', marker='o')"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = (b - a) / (c - a)\n    y = a * x ** 2 + b * x + c\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return math.sqrt(b*b - 4*a*c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a == 0:\n        return c\n    elif b == 0:\n        return c\n    else:\n        return parabola_directrix(a - 1, b, c) + parabola_directrix(a - 1, b - 1, c) + parabola_directrix(a - 1, b, c - 1)\n    \ndef main():\n    \n    \"\"\"\n    a = int(input(\"Enter the value of a: \"))\n    b = int(input(\"Enter the value of b: \"))\n    c = int(input(\"Enter the value of c: \"))\n    \n    print(parabola_directrix(a,b,c))\n    \"\"\"\n    \n    a = int(input(\"Enter the value of a: \"))\n    b = int(input(\"Enter the value of b: \"))\n    c = int(input(\"Enter the value of c: \"))\n    \n    print(parabola_directrix(a,b,c))\n    \nmain()"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return b*b-4*a*c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 1\n    while (x < a + 1):\n        y = 1\n        while (y < b + 1):\n            z = a * x * y + c\n            if (z == x):\n                break\n            y = y + 1\n        if (y == b + 1):\n            return x\n        x = x + 1\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return b**2-4*a*c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0 and b == 0 and c == 0: \n        return 0\n    if a == 0 and b == 0: \n        return -b/a\n    if a == 0 and c == 0: \n        return -c/a\n    if a == 0 and c > 0: \n        return -(b**2 - 4*a*c)/(2*a)\n    if a > 0 and c > 0: \n        return -(b**2 - 4*a*c)/(2*a)\n    if a > 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a < 0 and c < 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a < 0 and c > 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a < 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a == 0 and c == 0: \n        return 0\n    if a == 0 and c > 0: \n        return (b**2 + 4*a*c)/(2*a)\n    if a > 0 and c == 0: \n        return -b**2/(2*a)\n    if a > 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a > 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a > 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a < 0 and c == 0: \n        return -b**2/(2*a)\n    if a < 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a < 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a == 0 and c == 0: \n        return 0\n    if a == 0 and c < 0: \n        return (b**2 + 4*a*c)/(2*a)\n    if a == 0 and c > 0: \n        return (b**2 + 4*a*c)/(2*a)\n    if a > 0 and c == 0: \n        return -b**2/(2*a)\n    if a > 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a > 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a < 0 and c == 0: \n        return -b**2/(2*a)\n    if a < 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a < 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a == 0 and c == 0: \n        return 0\n    if a == 0 and c < 0: \n        return (b**2 + 4*a*c)/(2*a)\n    if a == 0 and c > 0: \n        return (b**2 + 4*a*c)/(2*a)\n    if a > 0 and c == 0: \n        return -b**2/(2*a)\n    if a > 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a > 0 and c < 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a < 0 and c == 0: \n        return -b**2/(2*a)\n    if a < 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a < 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a == 0 and c == 0: \n        return 0\n    if a == 0 and c < 0: \n        return -b**2/(2*a)\n    if a > 0 and c == 0: \n        return -b**2/(2*a)\n    if a > 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a > 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a < 0 and c == 0: \n        return -b**2/(2*a)\n    if a < 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a < 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a == 0 and c == 0: \n        return 0\n    if a == 0 and c < 0: \n        return -b**2/(2*a)\n    if a == 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a > 0 and c == 0: \n        return -b**2/(2*a)\n    if a > 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a > 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a < 0 and c == 0: \n        return -b**2/(2*a)\n    if a < 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a < 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a == 0 and c == 0: \n        return 0\n    if a == 0 and c > 0: \n        return -b**2/(2*a)\n    if a == 0 and c < 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a < 0 and c == 0: \n        return -b**2/(2*a)\n    if a < 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a < 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a == 0 and c == 0: \n        return 0\n    if a == 0 and c > 0: \n        return -b**2/(2*a)\n    if a == 0 and c < 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a > 0 and c == 0: \n        return -b**2/(2*a)\n    if a > 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a > 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a == 0 and c == 0: \n        return 0\n    if a == 0 and c < 0: \n        return -b**2/(2*a)\n    if a > 0 and c == 0: \n        return -b**2/(2*a)\n    if a > 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a > 0 and c < 0: \n        return -(-b**2 + 4*a*c)/(2*a)\n    if a < 0 and c == 0: \n        return -b**2/(2*a)\n    if a < 0 and c > 0: \n        return -(b**2 + 4*a*c)/(2*a)\n    if a < 0 and c < 0: \n        return -(-b**2 + 4*a*c)/"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print('\\nA directrix of the parabola is given as:')\n    print(f'\\nAx + b = {a} x\u00b2 + {b} x + {c}')\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from numpy.linalg import norm\n    return norm( (a*a + b*b - c*c) * c - (a*b*c - b*a * c) ) / (2 * a * b)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        common = set(list1) & set(list2)\n        return True if len(common)!= 0 else False\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #Common elements \n    l1 = list(list1)\n    l2 = list(list2)\n    c = len(l1)\n    for i in l1:\n        if i in l2:\n            c = c - 1\n    return c >= 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # An index list that holds the common element between the two lists.\n    index_list = []\n    # An index list that holds the element found for the first list.\n    element_1 = None\n    # An index list that holds the element found for the second list.\n    element_2 = None\n    \n    # Iterate through both lists.\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            # If the list is an index, it is equal to the element found for the first list.\n            if list1[i] == list2[j]:\n                # If the elements in the index list are equal to the element found for the second list,\n                # it is a common element.\n                if element_1 == list2[j] and element_2 == list1[i]:\n                    # If the list is empty, it is a common element.\n                    if len(list1) == 0 or len(list2) == 0:\n                        # Return true if it is not the case.\n                        return True\n                else:\n                    # If the list is not empty, the common element is found.\n                    return True\n    # If the lists are not equal, it is not a common element.\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if len(set1) == len(set2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) >= len(list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n    \ndef common_element2(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list1.count(list2[0]) == len(list1) and list2.count(list2[-1]) == len(list2)\n    \ndef common_element3(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) <= len(list2) and len(list1) == len(list2) and list1 == list2\n    \ndef common_element4(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list1 == list2 and len(list1)!= 0 and len(list2)!= 0 and list1.count(list2[0])!= list1.count(list2[-1])\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return False\n    \n    for element in list1:\n        if element in list2:\n            list2.remove(element)\n        \n    return len(list2) >= 1\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) <= 0 or len(list2) <= 0:\n        return False\n    elif len(list1) == 1 and len(list2) == 1:\n        return True\n    elif len(list1) == 1 and len(list2) > 1:\n        return True\n    elif len(list2) == 1 and len(list1) > 1:\n        return True\n    elif len(list1) > 1 and len(list2) > 1:\n        for i in list1:\n            for j in list2:\n                if i == j:\n                    continue\n                elif j in list1 and j in list2:\n                    continue\n                else:\n                    return False\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == [] or list2 == []:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 and len(list2) == 0:\n        return True\n    elif len(list1) == 0 or len(list2) == 0:\n        return False\n    elif len(list1)!= len(list2):\n        return False\n    else:\n        common = []\n        for ele in list1:\n            if ele in list2:\n                common.append(ele)\n        if len(common) > 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2+height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (height <= 0):\n        print(\"height should be greater than zero\")\n        return 0\n    if (height == base1):\n        return (base1+base2)//2\n    if (height == base2):\n        return (base1+base2)//2\n    if (height > base1):\n        if (base1%2 == 0):\n            return median_trapezium(base1,base2,height//2)\n        else:\n            return median_trapezium(base1,base2,height//2)\n    else:\n        if (base2%2 == 0):\n            return median_trapezium(base1,base2,height//2)\n        else:\n            return median_trapezium(base1,base2,height//2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (height/2)*(base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_weighted(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium weighted by the given weight.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_weighted_equal_height(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium weighted by the given weight.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_weighted_equal_height_low_width(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium weighted by the given weight.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_equal_height(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium equal-height.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_equal_height_low_width(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium equal-height.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_equal_height_low_width_low_height(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium equal-height.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_equal_height_low_width_low_height_low_width(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium equal-height.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_low_width(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium low-width.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_low_width_low_height(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium low-width.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_low_width_low_height_low_width(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium low-width.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_low_width_low_height_low_width_low_width(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium low-width.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_low_width_low_height_low_width_low_width(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium low-width.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_low_width_low_height_low_width_low_height(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium low-width.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_low_width_low_height_low_width_low_height_low_width(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium low-width.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_low_width_low_height_low_width_low_height_low_width(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium low-width.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_low_width_low_height_low_width_low_height_low_width(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium low-width.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_low_width_low_height_low_width_low_height_low_width(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium low-width.\n    '''\n    \n    base1.append(height)\n    base2.append(height)\n    median = (base1[0]+base2[0])/2.0\n    print(\"median length:\", median)\n    return median\n    \ndef median_trapezium_low_width_low_height_low_width_low_height_low_width(base1,base"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return base1 + height + base2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + (base2 - base1))/2 + height / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    f=base1\n    g=base2\n    if f>g:\n        f=g\n        g=f\n    p=f/2\n    q=g/2\n    if height==0:\n        return f\n    elif height==1:\n        return f\n    elif height==2:\n        return f+g\n    else:\n        while True:\n            if (p>=0 and q<=0) or (p<=0 and q>=0):\n                break\n            if p>=0 and q<=0:\n                p=p*(p-1)/2\n                q=q*(q-1)/2\n            if p<=0 and q>=0:\n                p=p*(p-1)/2\n                q=q*(q-1)/2\n            if (p>=0 and q<=0) or (p<=0 and q>=0):\n                break\n            if p>=0 and q<=0:\n                p=p*(p-1)/2\n                q=q*(q-1)/2\n            if p<=0 and q>=0:\n                p=p*(p-1)/2\n                q=q*(q-1)/2\n        return (p+q)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height<0:\n        return 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height <= 0:\n        return 0\n    if height >= abs(base1 + base2):\n        return abs(base1 + base2)\n    elif height < base1 + base2:\n        return abs(base1 + base2) + height\n    else:\n        return base2 + height\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_len = (base1+base2)/2\n    if height <= trapezium_len:\n        return trapezium_len\n    elif height > trapezium_len:\n        return base1 + (base2-base1)/2\n    elif height == trapezium_len:\n        return base1 + (base2-base1)/2\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    x = arr.index(number)\n    greater = False\n    if x == 0:\n        return greater\n    else:\n        if arr[x] > number:\n            greater = True\n        return greater\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] < number:\n            print('Number greater than', arr[i])\n            return True\n    print('Number greater than all')\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) > number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Loop through the array\n    for i in range(len(arr)-1):\n        if arr[i] > number and arr[i+1] > number:\n            return True\n        elif arr[i] < number and arr[i+1] < number:\n            return True\n        elif arr[i] > number and arr[i+1] == number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Your code here\n    if number == arr[len(arr)-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > number:\n            count += 1\n    if count > 0:\n        return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr_length = len(arr)\n    for i in range(arr_length):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n        if count == 0:\n            return False\n        count = 0\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more c's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more d's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more e's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more f's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more g's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more h's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more i's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more j's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more k's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more l's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more m's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more n's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more o's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more p's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more q's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more r's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more s's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more t's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more u's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more v's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more w's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more x's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more y's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more z's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more r's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_twenty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more s's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_twenty_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more t's.\n    '''\n    pattern = re.compile(\"[a-zA-Z]+\")\n    return re.search(pattern, text)\n    \ndef text_match_twenty_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more u's.\n    '''\n    pattern = re.compile("
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    matcher = re.compile(r'a\\b\\b')\n    return matcher.search(text).group()\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{3}\\b', text)\n    return a\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{2}\\b', text)\n    return a\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{3}\\b', text)\n    return a\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{4}\\b', text)\n    return a\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{5}\\b', text)\n    return a\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{6}\\b', text)\n    return a\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{7}\\b', text)\n    return a\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{8}\\b', text)\n    return a\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{9}\\b', text)\n    return a\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{10}\\b', text)\n    return a\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{11}\\b', text)\n    return a\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{12}\\b', text)\n    return a\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{21}\\b', text)\n    return a\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{30}\\b', text)\n    return a\ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{31}\\b', text)\n    return a\ndef text_match_fifty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{32}\\b', text)\n    return a\ndef text_match_sixty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{33}\\b', text)\n    return a\ndef text_match_seventy(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{34}\\b', text)\n    return a\ndef text_match_sixty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{35}\\b', text)\n    return a\ndef text_match_eighty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{36}\\b', text)\n    return a\ndef text_match_ninety(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{37}\\b', text)\n    return a\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{38}\\b', text)\n    return a\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{39}\\b', text)\n    return a\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{40}\\b', text)\n    return a\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{41}\\b', text)\n    return a\ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{42}\\b', text)\n    return a\ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{43}\\b', text)\n    return a\ndef text_match_fifty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{44}\\b', text)\n    return a\ndef text_match_fifty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{45}\\b', text)\n    return a\ndef text_match_sixty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{46}\\b', text)\n    return a\ndef text_match_seventy(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a=re.findall(r'\\b\\w{47}\\b', text)\n    return a\ndef text_match_eight"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    m = re.search(r'a([a-zA-Z]+)b', text)\n    return m\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # var=[]\n    # for i in range(len(text)):\n    #     if text[i]==\"a\":\n    #         # var.append(text[i])\n    #         var.append(\"b\")\n    #     if text[i]==\"b\":\n    #         var.append(\"b\")\n    #     if text[i]==\"c\":\n    #         var.append(\"c\")\n    #     if text[i]==\"d\":\n    #         var.append(\"d\")\n    #     if text[i]==\"e\":\n    #         var.append(\"e\")\n    #     if text[i]==\"f\":\n    #         var.append(\"f\")\n    #     if text[i]==\"g\":\n    #         var.append(\"g\")\n    #     if text[i]==\"h\":\n    #         var.append(\"h\")\n    #     if text[i]==\"i\":\n    #         var.append(\"i\")\n    #     if text[i]==\"j\":\n    #         var.append(\"j\")\n    #     if text[i]==\"k\":\n    #         var.append(\"k\")\n    #     if text[i]==\"l\":\n    #         var.append(\"l\")\n    #     if text[i]==\"m\":\n    #         var.append(\"m\")\n    #     if text[i]==\"n\":\n    #         var.append(\"n\")\n    #     if text[i]==\"o\":\n    #         var.append(\"o\")\n    #     if text[i]==\"p\":\n    #         var.append(\"p\")\n    #     if text[i]==\"q\":\n    #         var.append(\"q\")\n    #     if text[i]==\"r\":\n    #         var.append(\"r\")\n    #     if text[i]==\"s\":\n    #         var.append(\"s\")\n    #     if text[i]==\"t\":\n    #         var.append(\"t\")\n    #     if text[i]==\"u\":\n    #         var.append(\"u\")\n    #     if text[i]==\"v\":\n    #         var.append(\"v\")\n    #     if text[i]==\"w\":\n    #         var.append(\"w\")\n    #     if text[i]==\"x\":\n    #         var.append(\"x\")\n    #     if text[i]==\"y\":\n    #         var.append(\"y\")\n    #     if text[i]==\"z\":\n    #         var.append(\"z\")\n    #     if text[i]==\"0\":\n    #         var.append(\"0\")\n    #     if text[i]==\"1\":\n    #         var.append(\"1\")\n    #     if text[i]==\"2\":\n    #         var.append(\"2\")\n    #     if text[i]==\"3\":\n    #         var.append(\"3\")\n    #     if text[i]==\"4\":\n    #         var.append(\"4\")\n    #     if text[i]==\"5\":\n    #         var.append(\"5\")\n    #     if text[i]==\"6\":\n    #         var.append(\"6\")\n    #     if text[i]==\"7\":\n    #         var.append(\"7\")\n    #     if text[i]==\"8\":\n    #         var.append(\"8\")\n    #     if text[i]==\"9\":\n    #         var.append(\"9\")\n    #     if text[i]==\"a\":\n    #         var.append(\"a\")\n    #     if text[i]==\"b\":\n    #         var.append(\"b\")\n    #     if text[i]==\"c\":\n    #         var.append(\"c\")\n    #     if text[i]==\"d\":\n    #         var.append(\"d\")\n    #     if text[i]==\"e\":\n    #         var.append(\"e\")\n    #     if text[i]==\"f\":\n    #         var.append(\"f\")\n    #     if text[i]==\"g\":\n    #         var.append(\"g\")\n    #     if text[i]==\"h\":\n    #         var.append(\"h\")\n    #     if text[i]==\"i\":\n    #         var.append(\"i\")\n    #     if text[i]==\"j\":\n    #         var.append(\"j\")\n    #     if text[i]==\"k\":\n    #         var.append(\"k\")\n    #     if text[i]==\"l\":\n    #         var.append(\"l\")\n    #     if text[i]==\"m\":\n    #         var.append(\"m\")\n    #     if text[i]==\"n\":\n    #         var.append(\"n\")\n    #     if text[i]==\"o\":\n    #         var.append(\"o\")\n    #     if text[i]==\"p\":\n    #         var.append(\"p\")\n    #     if text[i]==\"q\":\n    #         var.append(\"q\")\n    #     if text[i]==\"r\":\n    #         var.append(\"r\")\n    #     if text[i]==\"s\":\n    #         var.append(\"s\")\n    #     if text[i]==\"t\":\n    #         var.append(\"t\")\n    #     if text[i]==\"u\":\n    #         var.append(\"u\")\n    #     if text[i]==\"v\":\n    #         var.append(\"v\")\n    #     if text[i]==\"w\":\n    #         var.append(\"w\")\n    #     if text[i]==\"x\":\n    #         var.append(\"x\")\n    #     if text[i]==\"y\":\n    #         var.append(\"y\")\n    #     if text[i]==\"z\":\n    #         var.append(\"z\")\n    #     if text[i]==\"0\":\n    #         var.append(\"0\")\n    #     if text[i]==\"1\":\n    #         var.append(\"1\")\n    #     if text[i]==\"2\":\n    #         var.append(\"2\")\n    #     if text[i]==\"3\":\n    #         var.append(\"3\")\n    #     if text[i]==\"4\":\n    #         var.append(\"4\")\n    #     if text[i]==\"5\":\n    #         var.append(\"5\")\n    #     if text[i]==\"6\":\n    #         var.append(\"6\")\n    #     if text[i]==\"7\":\n    #         var.append(\"7\")\n    #     if text[i]==\"8\":\n    #         var.append(\"8\")\n    #     if text[i]==\"9\":\n    #         var.append(\"9\")\n    #     if text[i]==\"a\":\n    #         var.append(\"a\")\n    #     if text[i]==\"b\":\n    #         var.append(\"b\")\n    #     if text[i]==\"c\":\n    #         var.append(\"c\")\n    #     if text[i]==\"d\":\n    #         var.append(\"d\")\n    #     if text[i]==\"e\":\n    #         var.append(\"e\")\n    #     if text[i]==\"f\":\n    #         var.append(\"f\")\n    #     if text[i]==\"g\":\n    #         var.append(\""
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('[aA]', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    m = re.search('a([bc]?)?(b)?',text)\n    if m:\n        text = text[m.start():m.end()]\n    return text\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'[a-z]+'\n    return re.search(pattern, text)!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    p = re.compile(r'\\b[a-z]+\\b')\n    m = p.finditer(text)\n    match = []\n    for m in m:\n        match.append(m.group())\n    match = set(match)\n    match = list(match)\n    match = list(match)\n    match = list(match)\n    if 'i' in match:\n        match.remove('i')\n    if 'a' in match:\n        match.remove('a')\n    if 'o' in match:\n        match.remove('o')\n    if 'e' in match:\n        match.remove('e')\n    if 'u' in match:\n        match.remove('u')\n    if 'u' in match:\n        match.remove('u')\n    return(match)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_list = []\n    for char in text:\n        if char.isalpha():\n            if char == \"a\":\n                text_list.append(\"*\")\n            else:\n                text_list.append(\"*\")\n        else:\n            text_list.append(\"*\")\n    return text_list\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    i = 0\n    while n > 0:\n        n = n // 10\n        i = i + 1\n    return i\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n <= 0 :\n        return '0'\n    else :\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    try :\n        last_digits = ''\n        if n < 10 :\n            for i in range(len(str(n))-1) :\n                last_digits += str(n)[len(str(n))-1-i]\n        else :\n            last_digits = str(n)[len(str(n))-1-1]\n        return last_digits\n    except :\n        return 'Invalid Number'\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<0 :\n        n = -n\n    str = str(n)\n    return int(str[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n_str = str(n)\n    return int(n_str[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n % 10\n    else :\n        return n % 10 + (10 - n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n    "
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    '''\n    A = 100\n    B = 1\n    C = 1\n    for i in range(1,100) :\n        B = B * 10 + i\n    for i in range(1,100) :\n        C = C * 10 + i\n    if n >= B :\n        print(B)\n    else :\n        print(C)\n    '''\n    return n % 10\n    \nprint(lastDigit(50))\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in range(0,len(list1),1):\n        neg.append(-list1[i])\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        i=i*-1\n        print(i,end=\" \")\n    print()\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #your code here\n    #raise NotImplementedError\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    n = list1[0]\n    for i in range(len(list1)-1, -1, -1):\n        if list1[i] < 0:\n            list1[i] *= -1\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    i=0\n    neg = 0\n    list2 = []\n    while i<len(list1):\n        if list1[i] < 0:\n            list2.append(list1[i])\n            i=i+1\n        else:\n            i=i+1\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for i in list1:\n        neg_nums.append(-i)\n    return neg_nums\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for elem in list1:\n        if elem < 0:\n            list2.append(elem)\n    return list2\n        "
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = []\n    for i in list1:\n        if i < 0:\n            negative.append(i)\n    return negative\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(-list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_neg(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(-list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b1(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b2(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b3(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b4(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b5(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b6(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b7(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b8(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b9(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b10(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b11(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b12(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b13(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b14(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b15(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b16(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b17(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b18(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(list1)\n    neg = []\n    for i in range(len(list2)):\n        if list2[i] < 0:\n            neg.append(list2[i])\n        else:\n            neg.append(0)\n    return neg\n    \ndef neg_b19(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(-1*i)\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(str1[::2], '')\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if(i%2!=0):\n            str1=str1.replace(str1[i],'')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # your code here\n    print(str1)\n    return str1.replace(str1[::2],\"\")\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"/\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\",\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1 == '':\n        return ''\n    str1 = str1.replace('\\n','').replace('\\r','')\n    if str1[0]!='':\n        return'' + str1[0].lower() +''\n    elif str1[len(str1)-1]!='':\n        return str1[len(str1)-1].lower() +''\n    else:\n        return str1[1:]\n    \ndef replace_punct(str1):\n    '''\n    Write a function to replace punctuation in a string.\n    '''\n    str1 = str1.replace('.', '-')\n    str1 = str1.replace('?', '?')\n    str1 = str1.replace('!', '!')\n    str1 = str1.replace('-', '-')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('o','p')\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    while True:\n        try:\n            remove_list = []\n            str1_t = list(str1)\n            for i in range(len(str1)):\n                if i % 2!= 0:\n                    remove_list.append(str1[i])\n            str1 = ''.join(remove_list)\n            print(str1)\n        except:\n            break\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    count = 0\n    for letter in str1:\n        if int(letter) % 2!= 0:\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1.count(\"Odd\")==0:\n        return str1\n    else:\n        for i in range(0,len(str1)-1):\n            if str1[i]%2==1:\n                str1=str1[:i]+str1[i+1:]\n            else:\n                break\n        return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    newstr = ''\n    for i in range(len(str1)):\n        if i % 2!= 0:\n            newstr += str1[i]\n    return newstr\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # create an empty dictionary to store the bidirectional count\n    bidirectional_count = {}\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for element in test_list:\n        if isinstance(element, tuple):\n            if len(element) == 2:\n                bidirectional_count += 1\n            else:\n                continue\n        else:\n            continue\n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count=0\n    for i in test_list:\n        if i[1]==i[0]:\n            count+=1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # count bidirectional pairs\n    bidir_pairs_count = dict()\n    for bidir in test_list:\n        if bidir[0] == bidir[1]:\n            if bidir[0] not in bidir_pairs_count:\n                bidir_pairs_count[bidir[0]] = 1\n            else:\n                bidir_pairs_count[bidir[0]] += 1\n        if bidir[1] == bidir[0]:\n            if bidir[1] not in bidir_pairs_count:\n                bidir_pairs_count[bidir[1]] = 1\n            else:\n                bidir_pairs_count[bidir[1]] += 1\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = []\n    for i in range(len(test_list) - 1):\n        bidirectional_pairs.append((test_list[i], test_list[i + 1]))\n    return bidirectional_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_bidirectional = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count_bidirectional += 1\n    return count_bidirectional\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total_numbers = 0\n    total_double_numbers = 0\n    for test_pair in test_list:\n        # If pair is bidirectional\n        if test_pair[0] > test_pair[1]:\n            total_numbers += test_pair[0]\n            total_double_numbers += test_pair[1]\n        else:\n            total_numbers += test_pair[1]\n            total_double_numbers += test_pair[0]\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    count = 0\n    for i in range(len(test_list)):\n        if (test_list[i][1] > test_list[i+1][1]):\n            count += 1\n    print(\"Count of bidirectional tuple pairs:\", count)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    if len(test_list) == 0:\n        return 0\n    \n    if len(test_list) == 1:\n        count = 1\n        return count\n    \n    elif len(test_list) == 2:\n        count = 1\n        count += 1\n        return count\n    \n    else:\n        for i in range(1, len(test_list)):\n            if test_list[i-1][1] == test_list[i][0]:\n                count += 1\n            else:\n                count = 1\n                return count\n    \n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    dict_count = {}\n    for i in range(len(test_list)-1):\n        if test_list[i][1] == test_list[i+1][0]:\n            dict_count[test_list[i][0]] = dict_count.get(test_list[i][0],0) + 1\n        else:\n            dict_count[test_list[i][0]] = dict_count.get(test_list[i][0],0) + 1\n            dict_count[test_list[i+1][0]] = dict_count.get(test_list[i+1][0],0) + 1\n    return dict_count\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y: x+y, L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = ''\n    for i in L:\n        s += str(i) +''\n    return s\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y: x+y,L)\ndef to_string(L):\n    '''\n    Write a function to convert a list of integers to a string.\n    '''\n    return ''.join(str(x) for x in L)\ndef main():\n    '''\n    Read and print the list of integers and a string.\n    '''\n    a = input(\"Enter the list of integers: \")\n    b = input(\"Enter the string: \")\n    list = [int(i) for i in a.split(',')]\n    print(list)\n    print(str(multiple_to_single(list)))\n    print(str(to_string(list)))\n    print(a)\n    print(b)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result += i\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Make a list of lists\n    L_list = []\n    # Add each element in the list one at a time\n    for i in L:\n        # Create list of integers from the list\n        list_of_integers = []\n        for j in i:\n            list_of_integers.append(j)\n        # Join the list back into a single integer\n        L_list.append(tuple(list_of_integers))\n    # Return the joined list\n    return tuple(L_list)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # write your code here\n    if not L:\n        return None\n    else:\n        return int(\"\".join(map(str, L)))"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) <= 1:\n        return L[0]\n    else:\n        return int(''.join([str(elem) for elem in L]))\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs\n    adverbs = []\n    for token in text.split('.'):\n        if token.endswith('.'):\n            adverbs.append(token)\n        else:\n            adverbs.append(token + '.')\n    adverbs = list(set(adverbs))\n    # Find all the adverbs in order\n    adverbs.sort()\n    adverbs.reverse()\n    # Find all the non-adverbs\n    non_adverbs = []\n    for token in adverbs:\n        if token.strip().endswith(token.strip('.+') + '.'):\n            non_adverbs.append(token)\n        else:\n            non_adverbs.append(token)\n    non_adverbs = list(set(non_adverbs))\n    # Find all the non-adverbs in order\n    non_adverbs.sort()\n    non_adverbs.reverse()\n    # Find the first non-adverb\n    adverb_position = None\n    for i in range(len(non_adverbs)):\n        if non_adverbs[i] in adverbs:\n            adverb_position = i\n            break\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall('[a-zA-Z]+', text)\n    for a in adverbs:\n        if a == 'a':\n            a = 'al'\n            break\n        if a == 'e':\n            a = 'em'\n            break\n        if a == 'i':\n            a = 'im'\n            break\n        if a == 'u':\n            a = 'iu'\n            break\n        if a =='s':\n            a ='ss'\n            break\n        if a == 't':\n            a = 'tt'\n            break\n        if a == 'n':\n            a = 'nn'\n            break\n        if a == 'r':\n            a = 'rr'\n            break\n        if a == 'l':\n            a = 'll'\n            break\n        if a == 'd':\n            a = 'dd'\n            break\n        if a == 'd' or a =='s' or a == 'z':\n            a = 'dz'\n            break\n        if a =='m':\n            a ='mm'\n            break\n        if a =='s' or a == 'z':\n            a ='sz'\n            break\n        if a == 'z':\n            a = 'z'\n            break\n        if a == 'p':\n            a = 'p'\n            break\n        if a == 'q':\n            a = 'qq'\n            break\n        if a == 'r' or a == 'l' or a == 'p' or a == 'q':\n            a = 'rz'\n            break\n        if a == 't' or a == 'u':\n            a = 'ty'\n            break\n    return a,text\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    nouns = re.findall('[a-zA-Z]+', text)\n    for n in nouns:\n        if n == 'a':\n            n = 'al'\n            break\n        if n == 'e':\n            n = 'em'\n            break\n        if n == 'i':\n            n = 'im'\n            break\n        if n == 'u':\n            n = 'iu'\n            break\n        if n =='s':\n            n ='ss'\n            break\n        if n == 't':\n            n = 'tt'\n            break\n        if n == 'n':\n            n = 'nn'\n            break\n        if n == 'r':\n            n = 'rr'\n            break\n        if n == 'l':\n            n = 'll'\n            break\n        if n == 'd':\n            n = 'dd'\n            break\n        if n == 'd' or n =='s' or n == 'z':\n            n = 'dz'\n            break\n        if n =='m':\n            n ='mm'\n            break\n        if n =='s' or n == 'z':\n            n ='sz'\n            break\n        if n == 'z':\n            n = 'z'\n            break\n        if n == 'p':\n            n = 'p'\n            break\n        if n == 'q':\n            n = 'qq'\n            break\n        if n == 'r' or n == 'l' or n == 'p' or n == 'q':\n            n = 'rz'\n            break\n        if n == 't' or n == 'u':\n            n = 'ty'\n            break\n    return n,text\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    words = re.findall('[aeiou]+', text)\n    adverbs = []\n    positions = []\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    start_adverb_regex = r'(.*?(s|e|d)\\.|.*?|.*?(i|a|s|t|o)\\.|.*?(s|e|d|r|t|o|a|u))'\n    adverb_regex = r'(.*?(ad|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|adverb|a"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.findall(r\"(adverb|Adverb|Adverb1|adverb2|Adverb3|adverb4|Adverb5|Adverb6|adverb7|adverb8|adverb9|Adverb10|adverb11|Adverb12|adverb13|Adverb14|Adverb15|adverb16|adverb17|adverb18|adverb19|adverb20|adverb21|adverb22|adverb23|adverb24|adverb25|adverb26|adverb27|adverb28|adverb29|adverb30|adverb31|adverb32|adverb33|adverb34|adverb35|adverb36|adverb37|adverb38|adverb39|adverb40|adverb41|adverb42|adverb43|adverb44|adverb45|adverb46|adverb47|adverb48|adverb49|adverb50|adverb51|adverb52|adverb53|adverb54|adverb55|adverb56|adverb57|adverb58|adverb59|adverb60|adverb61|adverb62|adverb63|adverb64|adverb65|adverb66|adverb67|adverb68|adverb69|adverb70|adverb71|adverb72|adverb73|adverb74|adverb75|adverb76|adverb77|adverb78|adverb79|adverb80|adverb81|adverb82|adverb83|adverb84|adverb85|adverb86|adverb87|adverb88|adverb89|adverb90|adverb91|adverb92|adverb93|adverb94|adverb95|adverb96|adverb97|adverb98|adverb99|adverb100|adverb101|adverb102|adverb103|adverb104|adverb105|adverb106|adverb107|adverb108|adverb109|adverb110|adverb111|adverb112|adverb113|adverb114|adverb115|adverb116|adverb117|adverb118|adverb119|adverb120|adverb121|adverb122|adverb123|adverb124|adverb125|adverb126|adverb127|adverb128|adverb129|adverb130|adverb131|adverb132|adverb133|adverb134|adverb135|adverb136|adverb137|adverb138|adverb139|adverb140|adverb141|adverb142|adverb143|adverb144|adverb145|adverb146|adverb147|adverb148|adverb149|adverb150|adverb151|adverb152|adverb153|adverb154|adverb155|adverb156|adverb157|adverb158|adverb159|adverb160|adverb161|adverb162|adverb163|adverb164|adverb165|adverb166|adverb167|adverb168|adverb169|adverb170|adverb171|adverb172|adverb173|adverb174|adverb175|adverb176|adverb177|adverb178|adverb179|adverb180|adverb181|adverb182|adverb183|adverb184|adverb185|adverb186|adverb187|adverb188|adverb189|adverb190|adverb191|adverb192|adverb193|adverb194|adverb195|adverb196|adverb197|adverb198|adverb199|adverb200|adverb201|adverb202|adverb203|adverb204|adverb205|adverb206|adverb207|adverb208|adverb209|adverb210|adverb211|adverb212|adverb213|adverb214|adverb215|adverb216|adverb217|adverb218|adverb219|adverb220|adverb221|adverb222|adverb223|adverb224|adverb225|adverb226|adverb227|adverb228|adverb229|adverb230|adverb231|adverb232|adverb233|adverb234|adverb235|adverb236|adverb237|adverb238|adverb239|adverb240|adverb241|adverb242|adverb243|adverb244|adverb245|adverb246|adverb247|adverb248|adverb249|adverb250|adverb251|adverb252|adverb253|adverb254|adverb255|adverb256|adverb257|adverb258|adverb259|adverb260|adverb261|adverb262|adverb263|adverb264|adverb265|adverb266|adverb267|adverb268|adverb269|adverb270|adverb271|adverb272|adverb273|adverb274|adverb275|adverb276|adverb277|adverb278|adverb279|adverb280|adverb281|adverb282|adverb283|adverb284|adverb285|adverb286|adverb287|adverb288|adverb289|adverb290|adverb291|adverb292|adverb293|adverb294|adverb295|adverb296|adverb297|adverb298|adverb299|adverb300|adverb301|adverb302|adverb303|adverb304|adverb305|adverb306|adverb307|adverb308|adverb309|adverb310|adverb311|adverb312|adverb313|adverb314|adverb315|adverb316|adverb317|adverb318|adverb319|adverb320|adverb321|adverb322|adverb323|adverb324|adverb325|adverb326|adverb327|adverb328|adverb329|adverb330|adverb331|adverb332|adverb333|adverb334|adverb335|adverb336|adverb337|adverb338|adverb339|adverb340|adverb341|adverb342|adverb343|adverb344|adverb345|adverb346|adverb347|adverb348|adverb349|adverb350|adverb351|adverb352|adverb353|adverb354|adverb355|adverb356|adverb357|adverb358|adverb359|adverb360|adverb361|adverb362|adverb363|adverb364|adverb365|adverb366|adverb367|adverb368|adverb369|adverb370|adverb371|adverb372|adverb373|adverb374|adverb375|adverb376|adverb377|adverb378|adverb379|adverb380|adverb381|adverb382|adverb383|adverb384|adverb385|adverb386|adverb387|adverb388|adverb389|adverb390|adverb391|adverb392|adverb393|adverb394|adverb395|adverb396|adverb397|adverb398|adverb399|adverb400|adverb401|adverb402|adverb403|adverb404|adverb405|adverb406|adverb407|adverb408|adverb409|adverb410|adverb411|adverb412|adverb413|adverb414|adverb415|adverb416|adverb417|adverb418|adverb419|adverb420|adverb421|adverb422|adverb423|adverb424|adverb425|adverb426|adverb427|adverb428|adverb429|adverb430|adverb431|adverb432|adverb433|adverb434|adverb435|adverb436|adverb437|adverb438|adverb439|adverb440|adverb441|adverb442|adverb443|adverb444|adverb445|adverb446|adverb447|adverb448|adverb449|adverb450|adverb451|adverb452|adverb453|adverb454|adverb455|adverb456|adverb457|adverb458|adverb459|adverb460|adverb461|adverb462|adverb463|adverb464|adverb465|adverb466|adverb467|adverb468|adverb469|adverb470|adverb471|adverb472|adverb473|adverb474|adverb475|adverb476|adverb477|adverb478|adverb479|adverb480|adverb481|adverb482|adverb483|adverb484|adverb485|adverb486|adverb487|adverb488|adverb489|adverb490|adverb491|adverb492|adverb493|adverb494|adverb495|adverb496|adverb497|adverb49"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # build the regular expression for a single adverb\n    single_adverb_regex = re.compile(r'\\w+ \\w+')\n    # find all adverbs in the sentence\n    adverbs = list(re.finditer(single_adverb_regex, text))\n    # find the first adverb in the sentence\n    single_adverb = adverbs[0].group()\n    # find the adverb's position in the sentence\n    adverb_position = text.index(single_adverb)\n    # return the index of the adverb\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find adverb\n    return re.search(\"[a-z]+\", text).span()\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = [\"like\", \"like\", \"hate\", \"spiteful\", \"spitefully\", \"stupid\", \"sucks\", \"accomplice\", \"gorgeful\", \"simple\", \"yummy\", \"rooster\", \"cappuccino\", \"mummy\", \"flea\", \"crooked\", \"cassete\", \"tacky\", \"stuck\", \"grumpy\", \"cute\", \"pathetic\", \"moody\", \"sick\", \"confusion\", \"fearful\", \"exciting\", \"unexpectedly\", \"furious\", \"caterpie\", \"leaky\", \"pessimistic\", \"shruggie\", \"amazed\", \"exaggerate\", \"dizzy\", \"furious\", \"flare\", \"grunt\", \"cautious\", \"amazing\", \"exuberant\", \"wicked\", \"scared\", \"confused\", \"rapid\", \"unbelievable\", \"swaying\", \"wistful\", \"grieving\", \"shocking\", \"smugging\", \"mugging\", \"angry\", \"sorrow\", \"calm\", \"shameful\", \"familiar\", \"unfamiliar\", \"kicking\", \"leaving\", \"hurt\", \"worried\", \"sad\", \"mystifying\", \"unfriendly\", \"sadly\", \"adventurous\", \"angry\", \"funky\", \"spicy\", \"bored\", \"sadness\", \"smiling\", \"missile\", \"scented\", \"slightly\", \"silly\", \"angry\", \"upset\", \"pleased\", \"discreet\", \"blessed\", \"brazen\", \"quiet\", \"unblessed\", \"pessimistic\", \"sweaty\", \"well-witted\", \"protolytic\", \"cutely\", \"perspicacious\", \"melt\", \"blame\", \"wonderful\", \"disloyal\", \"jealous\", \"majestic\", \"poor\", \"thoughtful\", \"pregnant\", \"funny\", \"furious\", \"readily\", \"unnefarious\", \"unbelievable\", \"wonderful\", \"sore\", \"wonderful\", \"potential\", \"disputable\", \"sad\", \"emotional\", \"soft\", \"poor\", \"impure\", \"moody\", \"funny\", \"clueless\", \"gorgeful\", \"simple\", \"wonderful\", \"glad\", \"explainable\", \"dismal\", \"unbelligerency\", \"lost\", \"unblessed\", \"quiescent\", \"magnificent\", \"cutely\", \"awesome\", \"unfearful\", \"sadness\", \"perceptual\", \"sick\", \"tired\", \"unfeasible\", \"pride\", \"unresolved\", \"prideful\", \"intense\", \"sadly\", \"sorrow\", \"determined\", \"loyal\", \"tangent\", \"honest\", \"dissolvent\", \"unblessed\", \"unnatural\", \"charming\", \"unwilling\", \"spy\", \"otherworldly\", \"unspiritual\", \"anxiety\", \"vile\", \"doubtful\", \"unfamiliar\", \"glum\", \"levering\", \"exalt\", \"imperfect\", \"mad\", \"sad\", \"unreasonable\", \"stupid\", \"scary\", \"incense\", \"tight\", \"shrewd\", \"flammable\", \"fearful\", \"unfavorable\", \"obedient\", \"harming\", \"unsure\", \"impossible\", \"unfaithful\", \"charming\", \"dumb\", \"gossip\", \"blessed\", \"satisfactory\", \"unfeasible\", \"fearful\", \"dangereous\", \"inventoried\", \"unfortunate\", \"unconcious\", \"vague\", \"exquisite\", \"enormous\", \"lovely\", \"unrealistic\", \"sorrowful\", \"sick\", \"unfavorable\", \"capable\", \"cutely\", \"unusual\", \"sad\", \"blessed\", \"gorgish\", \"unpleasant\", \"spendy\", \"revengeful\", \"exquisite\", \"ideal\", \"unhealthy\", \"unobedient\", \"unwilling\", \"mild\", \"familiar\", \"charming\", \"vulnerable\", \"precious\", \"cutely\", \"happily\", \"shattering\", \"unpleasant\", \"cutely\", \"majestic\", \"fearful\", \"honestly\", \"pleased\", \"jealous\", \"satisfactory\", \"clumsy\", \"worried\", \"wonderful\", \"dreadful\", \"lovely\", \"positive\", \"unwilling\", \"exquisite\", \"unnecessary\", \"unfortunate\", \"fearful\", \"predominantly\", \"unfamiliar\", \"unpleasant\", \"unwilling\", \"nervous\", \"unnecessary\", \"nervously\", \"uncure\", \"unblessed\", \"bad\", \"sang\", \"sad\", \"unpleasant\", \"spy\", \"jealous\", \"muddy\", \"unrealistic\", \"unwanted\", \"unfavorful\", \"proud\", \"lonely\", \"unpleasant\", \"unhappy\", \"unfearful\", \"incense\", \"weak\", \"unfearful\", \"bad\", \"unfatal\", \"unpleasant\", \"unwanted\", \"unfortune\", \"incense\", \"unfavoured\", \"unwanted\", \"unperfect\", \"unfearful\", \"unnecessary\", \"unfearful\", \"unfavorful\", \"unfearful\", \"unfavoured\", \"unfavoured\", \"unnecessary\", \"unfearful\", \"unfavoured\", \"unnecessary\", \"unfearful\", \"unfavoured\", \"unfavorful\", \"unfavoured\", \"unfavoured\", \"unnecessary\", \"unfearful\", \"unnecessary\", \"unfavoured\", \"unfavoured\", \"unnecessary\", \"unfearful\", \"unnecessary\", \"unfavoured\", \"unnecessary\", \"unfavoured\", \"unfavoured\", \"unnecessary\", \"unfavoured\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\", \"unnecessary\""
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def find_adverb_start_position(text):\n        # start of adverb with number of words\n        pattern = r'\\b\\d{2,}(?: words)?\\b'\n        pos = re.findall(pattern, text)\n        start = re.findall(pattern, text)[0]\n        # find the end of the adverb\n        end = re.findall(pattern, text)[-1]\n        return (pos, start, end)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    ## define a regular expression for a single adverb:\n    single_adverb_regex = r\"\\b(?P<adverb>a)(?P<pos>(\\w))\\b\"\n    ## compile regular expression:\n    single_adverb_pattern = re.compile(single_adverb_regex, re.VERBOSE)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # TODO: Finish this function\n    return 0\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l == 1:\n        return 5\n    elif l == 2:\n        return 7\n    elif l == 3:\n        return 9\n    elif l == 4:\n        return 13\n    else:\n        return 15\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    return (math.pi * (3 * l**2))\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # your code here\n    a = 3 * l\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # if l>2:\n    #     raise ValueError('Surface area of a cube is not defined for an odd length.')\n    # if l<2:\n    #     raise ValueError('Surface area of a cube is not defined for a length of less than 2.')\n    surfacearea = l*l*l*l\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l=='cube':\n        print('*** Square Area ***')\n        return(4*(((0.25**2)+(0.5**2)+(0.75**2)+(1.25**2))**(1/3)))\n    elif l=='square':\n        print('*** Square Area ***')\n        return(4*(((0.25**2)+(0.5**2)+(0.75**2)+(1.25**2))**(1/2)))\n    else:\n        print('*** Invalid Input ***')\n        return\ndef solution(n):\n    '''\n    Write a function that returns the number of paths that will cover the \n    triangle with sides (a,b,c) and (d,e,f) such that the two sides sum to n.\n    \n    >>> solution(15)\n    3\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return 3*solution(n-1)+solution(n-2)\nprint(solution(5))"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                area += l[i][j][k]\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def area_of_cube(d, r):\n        \"\"\"Calculates the surface area of a cube of a given size d, and radius r.\"\"\"\n        r = r*r\n        return d*d*d*math.pi*d*r*r*math.pi*d\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_cylinder(l):\n    '''\n    Write a function to find the surface area of a cylinder of a given\n    size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_hexahedron(l):\n    '''\n    Write a function to find the surface area of a hypercube of a given\n    size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_octahedron(l):\n    '''\n    Write a function to find the surface area of a octahedron of a given\n    size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_tetrahedron(l):\n    '''\n    Write a function to find the surface area of a tetrahedron of a given\n    size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_triangle(l):\n    '''\n    Write a function to find the surface area of a triangle of a given\n    size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_quad(l):\n    '''\n    Write a function to find the surface area of a quad of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_quad_hexahedron(l):\n    '''\n    Write a function to find the surface area of a quad of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_quadrilateral(l):\n    '''\n    Write a function to find the surface area of a quadrilateral of a given\n    size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_sphere(l):\n    '''\n    Write a function to find the surface area of a sphere of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_hexagon(l):\n    '''\n    Write a function to find the surface area of a hexagon of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_octagon(l):\n    '''\n    Write a function to find the surface area of a octagon of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_heptahedron(l):\n    '''\n    Write a function to find the surface area of a heptahedron of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_cylinder(l):\n    '''\n    Write a function to find the surface area of a cylinder of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_sphere(l):\n    '''\n    Write a function to find the surface area of a sphere of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_triangle_hexahedron(l):\n    '''\n    Write a function to find the surface area of a triangle of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_triangle_tetrahedron(l):\n    '''\n    Write a function to find the surface area of a triangle of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_triangle_quad(l):\n    '''\n    Write a function to find the surface area of a triangle of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_triangle_hexahedron(l):\n    '''\n    Write a function to find the surface area of a triangle of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_triangle_octahedron(l):\n    '''\n    Write a function to find the surface area of a triangle of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_triangle_quadrilateral(l):\n    '''\n    Write a function to find the surface area of a triangle of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_triangle_heptahedron(l):\n    '''\n    Write a function to find the surface area of a triangle of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_sphere_heptahedron(l):\n    '''\n    Write a function to find the surface area of a sphere of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_sphere_tetrahedron(l):\n    '''\n    Write a function to find the surface area of a sphere of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                S += 1\n    return S\n    \ndef surfacearea_sphere_octahedron(l):\n    '''\n    Write a function to find the surface area of a sphere of a given size.\n    '''\n    S = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range("
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def surfacearea(a, b, c):\n        return a*b*c\n    \n    def volume(a,b,c):\n        return (a*b*c)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_arr = array('i', [1])\n    neg_arr = array('i', [])\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            pos_arr.append(i+1)\n        else:\n            neg_arr.append(i+1)\n    return (pos_arr, neg_arr)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    res = []\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            res.append(nums[i])\n    return res\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    res = []\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            res.append(nums[i])\n    return res\ndef common(a,b):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b))\ndef union(a,b):\n    '''\n    Write a function to find the union of two arrays of integers.\n    '''\n    return set(a) | set(b)\ndef find_common(nums):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return common(nums,nums)\ndef find_common_two_arrays(a,b):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b))\ndef find_common_three_arrays(a,b,c):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b),set(c))\ndef find_common_four_arrays(a,b,c,d):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b),set(c),set(d))\ndef find_common_five_arrays(a,b,c,d,e):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b),set(c),set(d),set(e))\ndef find_common_six_arrays(a,b,c,d,e,f):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b),set(c),set(d),set(e),set(f))\ndef find_common_seven_arrays(a,b,c,d,e,f,g):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b),set(c),set(d),set(e),set(f),set(g))\ndef find_common_nine_arrays(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b),set(c),set(d),set(e),set(f),set(g),set(h),set(i))\ndef find_common_ten_arrays(a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b),set(c),set(d),set(e),set(f),set(g),set(h),set(i),set(j))\ndef find_common_eleven_arrays(a,b,c,d,e,f,g,h,i,j,k):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b),set(c),set(d),set(e),set(f),set(g),set(h),set(i),set(j),set(k))\ndef find_common_twelve_arrays(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b),set(c),set(d),set(e),set(f),set(g),set(h),set(i),set(j),set(k),set(l),set(m),set(n),set(o),set(p),set(q),set(r),set(s),set(t),set(u),set(v),set(w))\ndef find_common_thirteen_arrays(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b),set(c),set(d),set(e),set(f),set(g),set(h),set(i),set(j),set(k),set(l),set(m),set(n),set(o),set(p),set(q),set(r),set(s),set(t),set(u),set(v),set(w),set(x),set(y),set(z))\ndef find_common_four_arrays_1(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b),set(c),set(d),set(e),set(f),set(g),set(h),set(i),set(j),set(k),set(l),set(m),set(n),set(o),set(p),set(q),set(r),set(s),set(t),set(u),set(v),set(w),set(x),set(y),set(z))\ndef find_common_five_arrays_1(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b),set(c),set(d),set(e),set(f),set(g),set(h),set(i),set(j),set(k),set(l),set(m),set(n),set(o),set(p),set(q),set(r),set(s),set(t),set(u),set(v),set(w),set(x),set(y),set(z))\ndef find_common_six_arrays_1(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''\n    return set(a).intersection(set(b),set(c),set(d),set(e),set(f),set(g),set(h),set(i),set(j),set(k),set(l),set(m),set(n),set(o),set(p),set(q),set(r),set(s),set(t),set(u),set(v),set(w),set(x),set(y),set(z))\ndef find_common_seven_arrays_1(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w):\n    '''\n    Write a function to find the common elements of two arrays of integers.\n    '''"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # TODO: Write your code here.\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            nums[i] = nums[i] / abs(nums[i])\n    return nums\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return nums.count(1)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    def count_positive(nums):\n        cnt = 0\n        for num in nums:\n            if num > 0:\n                cnt += 1\n        return cnt\n    \n    nums.sort()\n    ans = 0\n    if nums[-1] > 0:\n        ans += nums[-1]\n    for num in nums:\n        if num > 0:\n            ans += num\n        else:\n            ans -= num\n    return ans\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    # if the number of positive numbers is 0\n    if len(nums) == 0:\n        return -1\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    a = len(nums)\n    p = 0.0\n    while p < 1e9:\n        i = 0\n        for j in range(a):\n            if nums[j] < 0:\n                i += 1\n        if i!= 0:\n            p = nums[i]\n        else:\n            p = 0\n    return p\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # n = len(nums)\n    # if n == 1:\n    #     return nums[0]\n    # elif n == 2:\n    #     if nums[0] > nums[1]:\n    #         return nums[0] // nums[1]\n    #     else:\n    #         return nums[0] // nums[1]\n    # else:\n    #     d = nums[0] + nums[1]\n    #     i = 1\n    #     while i <= d:\n    #         if nums[i] > nums[i - 1]:\n    #             return nums[i] // nums[i - 1]\n    #         else:\n    #             return nums[i] // nums[i - 1]\n    #         i += 1\n    #     return d // nums[d - 1]\n    # return positive_count(nums[1:len(nums)]) + positive_count(nums[len(nums) - 1:0])\n    # return positive_count(nums[1:len(nums)])\n    return positive_count(nums[:-1])\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = 0\n    for num in list1:\n        if num < 0:\n            max_num = max_num\n        else:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    return max(list1)"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1) \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    new_list = []\n    neg_count = 0\n    for i in list1:\n        if i < 0:\n            neg_count += 1\n            new_list.append(-i)\n    if neg_count > 0:\n        return new_list[-neg_count:]\n    else:\n        return False\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for i in list1:\n        if i < 0:\n            if largest < i:\n                largest = i\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list=[]\n    for i in list1:\n        if i<0:\n            neg_list.append(i)\n    return max(neg_list)\ndef calculate_ratio(list1): \n    '''\n    Write a python function to calculate the ratio of the given list.\n    '''\n    ratio=[]\n    for i in list1:\n        ratio.append(i*1.0/len(list1))\n    return ratio"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    sorted_list = sorted(list1, reverse = True)\n    max_value = sorted_list[0]\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i] < 0:\n            max_value = max_value\n        else:\n            max_value = max_value\n    return max_value\n    \n    \ndef main():\n    num_list = []\n    print(\"Welcome to the largest negative number in a list\")\n    num_list = int(input(\"How many numbers would you like to add? \"))\n    for i in range(num_list):\n        num = int(input(\"Enter a number: \"))\n        num_list.append(num)\n    print(f\"Your list is: {num_list}\")\n    print(f\"Your largest negative number is: {largest_neg(num_list)}\")\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(len(list1)): \n        if list1[i] < 0: \n            list1[i] = -list1[i] \n    return max(list1)"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = max(list1)\n    if largest < 0:\n        return largest\n    else:\n        for i in range(len(list1)):\n            if list1[i] < 0:\n                largest = largest - list1[i]\n                break\n    return largest\n    \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maximum = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            minimum = list1[i]\n            break\n        elif list1[i] > 0:\n            maximum = list1[i]\n    return maximum\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        test_list.remove(i)\n        test_list.sort()\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_tuple = ()\n    for i in range(len(test_list)):\n        new_tuple = new_tuple + test_list[i][:K]\n    return new_tuple\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    t = ()\n    for i in test_list:\n        t = t+(i,)\n    return t[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    if len(test_list) < K:\n        return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # your code goes here\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i][:K])\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # This could be done more easily using a condition, but it wouldn't work if you didn't input the list of tuples.\n    # temp_list = [tuple for tuple in test_list if len(tuple) <= K]\n    temp_list = []\n    for elem in test_list:\n        if len(elem) >= K:\n            temp_list.append(elem[:K])\n        else:\n            temp_list.append(elem)\n    return temp_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        for j in range(len(i)):\n            i[j] = i[j][:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:K] for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    output_tuple = []\n    for item in test_list:\n        if len(item) < K:\n            item = item + (0,)\n        output_tuple.append(item)\n    return output_tuple\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # your code goes here\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] * test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_result = 0\n    for x in test_tup1:\n        for y in test_tup2:\n            index_result = index_result + x*y\n    return index_result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print('Multiplying tuples')\n    print(test_tup1)\n    print(test_tup2)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index1 = 0\n    index2 = 0\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #variables to hold the result\n    result=0\n    \n    for i in range(0,len(test_tup1)):\n        result+=test_tup1[i]*test_tup2[i]\n    \n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    #declare list to store index values\n    index_list = []\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #Convert all tuple elements to int type\n    tup1 = tuple(map(int, test_tup1))\n    tup2 = tuple(map(int, test_tup2))\n    #Create an empty list to store results\n    res = []\n    for i in range(len(tup1)):\n        res.append(tup1[i]*tup2[i])\n    return res\n    \n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = (1,2,3,4,5,6,7,8,9,10)\n    test_tup2 = (11,12,13,14,15,16,17,18,19,20)\n    index_tup = tuple(tup[i] * tup[i] for i in range(len(tup)))\n    return index_tup\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    c = dict(c)\n    for key, value in c.items():\n        if key in lst:\n            lst[key] += 1\n        else:\n            lst[key] = 1\n    return lst\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = {}\n    for i in lst: \n        occ[i] = lst.count(i)\n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occur=Counter(lst)\n    occur_dict=dict(occur)\n    print(occur_dict)\n    for key, value in occur.items():\n        occur_dict[key]=value\n    print(occur_dict)\n    return occur_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    occur = 0\n    for i in tup:\n        if lst.count(i) > 1:\n            occur += lst.count(i)\n    return occur\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for item in lst:\n        count +=1\n        if tup.count(item) > 0:\n            tup.remove(item)\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    n = len(lst)\n    c = Counter(tup)\n    print(\"lst: \", lst)\n    for i in c:\n        if c[i] == 1:\n            lst.remove(i)\n            print(\"Found: \", i, end = \" \")\n            print(\"Count: \", c[i])\n    return(lst)"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # 1. Define a new list called txt \n    txt = [] \n    # 2. Define a new list called lst \n    lst = [] \n    # 3. Initialize txt with 0 \n    txt = 0 \n    # 4. Initialize lst with 0 \n    lst = 0 \n    # 5. iterate through tup \n    for i in tup: \n        # 6. Add the i to txt \n        txt = txt + i \n        # 7. Add the i to lst \n        lst = lst + i \n    # 8. return txt and lst \n    return (txt, lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count=0\n    for i in lst:\n        count+=tup.count(i)\n    return count \n    \ndef BagOfWords(tup):\n    '''\n    Write a python function to count the frequency of words in a tuple.\n    '''\n    count=0\n    for i in tup:\n        count+=tup.count(i)\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst)\n    for el in tup: \n        cnt[el] += 1\n    return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    # define function to sum cubes of elements\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes=[]\n    for i in range(len(nums)):\n        cubes.append(nums[i]*nums[i]*nums[i])\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    s = 0\n    for num in nums:\n        s += num * num * num\n    return s\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # your code goes here\n    \n    cube_list = []\n    \n    for num in nums:\n        cube = num ** 3\n        cube_list.append(cube)\n        \n    return cube_list\n    \nnums = [1,2,3,4,5,6,7,8,9]\nprint(cube_nums(nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube(num):\n        return num*num*num\n    def all_cubes(nums):\n        return sum(map(cube, nums))\n    return all_cubes(nums)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    lst=[]\n    for n in nums:\n        lst.append(n*n*n)\n    print(lst)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list\n    "
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return (int(n) * sum(range(1,int(n)+1))) \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1, n+1):\n        sum+=i\n    return sum\n    \n    \n    \nn=int(input(\"enter the number:\"))\nprint(cal_sum(n)"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 1:\n        raise ValueError(\"n should be at least 1\")\n    else:\n        return n * (n - 1) // 2\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    l = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    s = 0\n    for i in l:\n        s += i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0 \n    for i in range(1, n+1): \n        s += i \n    return s \ndef cal_average(n): \n    '''\n    Write a function to calculate the average of perrin numbers.\n    '''\n    sum = 0 \n    for i in range(1, n+1): \n        sum += i \n    return sum / n \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    print(n)\n    i=1\n    n=n+1\n    while (i<n):\n        sum=i+n\n        i=i+1\n        print(sum)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    while i < len(str):\n        yield str[i:i+l]\n        i += l\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    if len(str) > l:\n        return str[l]\n    \n    for i in range(l):\n        if i < len(str)-1:\n            if str[i] == str[i+1]:\n                return str[i+1]\n        else:\n            return '\\n'\n    return '\\n'\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) > l:\n        return str[0:l]\n    else:\n        return str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    count = 0\n    for c in l:\n        if c is None:\n            break\n        elif c == '-':\n            count += 1\n        elif c == '\"':\n            output.append(str[count:])\n            count = 0\n        elif c == '\\'':\n            count += 1\n            output.append(str[count:])\n            count = 0\n        elif c == '\\n':\n            output.append(str[count:])\n            count = 0\n        else:\n            output.append(c)\n    return ''.join(output)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) < l:\n        return \"Please provide a smaller size of values\"\n    return str[0:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = list()\n    for i in range(len(str)):\n        if len(result) + len(str[i]) + 1 <= l:\n            result.append(str[i])\n        else:\n            result[-1] += str[i]\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for index in range(0, len(str), l):\n        output.append(str[index:index+l])\n    return(output)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for x in l:\n        if len(x) == len(str):\n            return x\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    l_len = len(l)\n    \n    for i in range(l_len):\n        if l[i] =='':\n            l[i] = ''\n    \n    return''.join(l)\n    \n    \n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == None:\n        return None\n    l = l.split(',')\n    return list(filter(None, l))\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.replace(\"  \",\" \")\n    text3 = text2.replace(\"*\",\" \")\n    text4 = text3.replace(\"|\",\" \")\n    text5 = text4.replace(\"`\",\" \")\n    text6 = text5.replace(\"`\",\" \")\n    text7 = text6.replace(\"[\",\" \")\n    text8 = text7.replace(\"]\",\" \")\n    text9 = text8.replace(\"{\",\" \")\n    text10 = text9.replace(\"}\",\" \")\n    text11 = text10.replace(\"!\",\" \")\n    text12 = text11.replace(\"?\",\" \")\n    text13 = text12.replace(\":\",\" \")\n    text14 = text13.replace(\";\",\" \")\n    text15 = text14.replace(\"<\",\" \")\n    text16 = text15.replace(\">\",\" \")\n    text17 = text16.replace(\"|\",\" \")\n    text18 = text17.replace(\"~\",\" \")\n    text19 = text18.replace(\"(\",\" \")\n    text20 = text19.replace(\")\",\" \")\n    text21 = text20.replace(\",\",\" \")\n    text22 = text21.replace(\".\",\" \")\n    text23 = text22.replace(\"?\",\" \")\n    text24 = text23.replace(\";\",\" \")\n    text25 = text24.replace(\";\",\" \")\n    text26 = text25.replace(\"=\",\" \")\n    text27 = text26.replace(\";\",\" \")\n    text28 = text27.replace(\";\",\" \")\n    text29 = text28.replace(\";\",\" \")\n    text30 = text29.replace(\";\",\" \")\n    text31 = text30.replace(\";\",\" \")\n    text32 = text31.replace(\";\",\" \")\n    text33 = text32.replace(\";\",\" \")\n    text34 = text33.replace(\";\",\" \")\n    text35 = text34.replace(\";\",\" \")\n    text36 = text35.replace(\";\",\" \")\n    text37 = text36.replace(\";\",\" \")\n    text38 = text37.replace(\";\",\" \")\n    text39 = text38.replace(\";\",\" \")\n    text40 = text39.replace(\";\",\" \")\n    text41 = text40.replace(\";\",\" \")\n    text42 = text41.replace(\";\",\" \")\n    text43 = text42.replace(\";\",\" \")\n    text44 = text43.replace(\";\",\" \")\n    text45 = text44.replace(\";\",\" \")\n    text46 = text45.replace(\";\",\" \")\n    text47 = text46.replace(\";\",\" \")\n    text48 = text47.replace(\";\",\" \")\n    text49 = text48.replace(\";\",\" \")\n    text50 = text49.replace(\";\",\" \")\n    text51 = text50.replace(\";\",\" \")\n    text52 = text51.replace(\";\",\" \")\n    text53 = text52.replace(\";\",\" \")\n    text54 = text53.replace(\";\",\" \")\n    text55 = text54.replace(\";\",\" \")\n    text56 = text55.replace(\";\",\" \")\n    text57 = text56.replace(\";\",\" \")\n    text58 = text57.replace(\";\",\" \")\n    text59 = text58.replace(\";\",\" \")\n    text60 = text59.replace(\";\",\" \")\n    text61 = text60.replace(\";\",\" \")\n    text62 = text61.replace(\";\",\" \")\n    text63 = text62.replace(\";\",\" \")\n    text64 = text63.replace(\";\",\" \")\n    text65 = text64.replace(\";\",\" \")\n    text66 = text65.replace(\";\",\" \")\n    text67 = text66.replace(\";\",\" \")\n    text68 = text67.replace(\";\",\" \")\n    text69 = text68.replace(\";\",\" \")\n    text70 = text69.replace(\";\",\" \")\n    text71 = text70.replace(\";\",\" \")\n    text72 = text71.replace(\";\",\" \")\n    text73 = text72.replace(\";\",\" \")\n    text74 = text73.replace(\";\",\" \")\n    text75 = text74.replace(\";\",\" \")\n    text76 = text75.replace(\";\",\" \")\n    text77 = text76.replace(\";\",\" \")\n    text78 = text77.replace(\";\",\" \")\n    text79 = text78.replace(\";\",\" \")\n    text80 = text79.replace(\";\",\" \")\n    text81 = text80.replace(\";\",\" \")\n    text82 = text81.replace(\";\",\" \")\n    text83 = text82.replace(\";\",\" \")\n    text84 = text83.replace(\";\",\" \")\n    text85 = text84.replace(\";\",\" \")\n    text86 = text85.replace(\";\",\" \")\n    text87 = text86.replace(\";\",\" \")\n    text88 = text87.replace(\";\",\" \")\n    text89 = text88.replace(\";\",\" \")\n    text90 = text89.replace(\";\",\" \")\n    text91 = text90.replace(\";\",\" \")\n    text92 = text91.replace(\";\",\" \")\n    text93 = text92.replace(\";\",\" \")\n    text94 = text93.replace(\";\",\" \")\n    text95 = text94.replace(\";\",\" \")\n    text96 = text95.replace(\";\",\" \")\n    text97 = text96.replace(\";\",\" \")\n    text98 = text97.replace(\";\",\" \")\n    text99 = text98.replace(\";\",\" \")\n    text100 = text99.replace(\";\",\" \")\n    text101 = text100.replace(\";\",\" \")\n    text102 = text101.replace(\";\",\" \")\n    text103 = text102.replace(\";\",\" \")\n    text104 = text103.replace(\";\",\" \")\n    text105 = text104.replace(\";\",\" \")\n    text106 = text105.replace(\";\",\" \")\n    text107 = text106.replace(\";\",\" \")\n    text108 = text107.replace(\";\",\" \")\n    text109 = text108.replace(\";\",\" \")\n    text110 = text109.replace(\";\",\" \")\n    text111 = text110.replace(\";\",\" \")\n    text112 = text111.replace(\";\",\" \")\n    text113 = text112.replace(\";\",\" \")\n    text114 = text113.replace(\";\",\" \")\n    text115 = text114.replace(\";\",\" \")\n    text116 = text115.replace(\";\",\" \")\n    text117 = text116.replace(\";\",\" \")\n    text118 = text117.replace(\";\",\" \")\n    text119 = text118.replace(\";\",\" \")\n    text120 = text119.replace(\";\",\" \")\n    text121 = text120.replace(\";\",\" \")\n    text122 = text121.replace(\";\",\" \")\n    text123 = text122.replace(\";\",\" \")\n    text124 = text123.replace(\";\",\" \")\n    text125 = text124.replace(\";\",\" \")\n    text126 = text125.replace(\";\",\" \")\n    text127 = text126.replace(\";\",\" \")\n    text128 = text127.replace(\";\",\" \")\n    text129 = text128.replace(\";\",\" \")\n    text130 = text129.replace(\";\",\" \")\n    text131 = text130.replace(\";\",\" \")\n    text132 = text131.replace(\";\",\" \")\n    text133 = text132.replace(\";\",\" \")\n    text134 = text133.replace(\";\",\" \")\n    text135 = text134.replace(\";\",\" \")\n    text136 = text135.replace(\";\",\" \")\n    text137 = text136.replace(\";\",\" \")\n    text138 = text137.replace(\";\",\" \")\n    text139 = text138.replace(\";\",\" \")\n    text140 = text139.replace(\";\",\" \")\n    text141 = text140.replace(\";\",\" \")\n    text142 = text141.replace(\";\",\" \")\n    text143 = text142.replace(\";\",\" \")\n    text144 = text143.replace(\";\",\" \")\n    text145 = text144.replace(\""
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \", \"\")\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\n|\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'^\\s+|\\s+$', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.strip().replace('\\n', '')\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \" \", text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace('\\n','').replace('\\r','')\n    return text1.replace('\\t','')\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(\"\\s+\", \"\", text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+', '', text1)\n    return text\ndef remove_digits(text):\n    '''\n    Write a function to remove all non-digit characters from the given string.\n    '''\n    text = re.sub(r'\\D+', '', text)\n    return text\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation characters from the given string.\n    '''\n    text = re.sub(r'\\w+[^\\w\\d\\w\\W\\d]', '', text)\n    return text\ndef remove_special_characters(text):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]','', text)\n    return text\ndef remove_digits(text):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    text = re.sub(r'\\D+','',text)\n    return text\ndef lower_string(text):\n    '''\n    Write a function to remove all letters from the given string.\n    '''\n    text = re.sub(r'\\W+','',text)\n    return text\ndef add_space(text):\n    '''\n    Write a function to add spaces to the given string.\n    '''\n    text = re.sub(r'\\s+',' ',text)\n    return text\ndef remove_lower_string(text):\n    '''\n    Write a function to remove all lower case characters from the given string.\n    '''\n    text = text.lower()\n    text = re.sub(r'[^a-zA-Z0-9\\s]','',text)\n    return text\ndef remove_upper_string(text):\n    '''\n    Write a function to remove all upper case characters from the given string.\n    '''\n    text = text.upper()\n    text = re.sub(r'[^a-zA-Z0-9\\s]','',text)\n    return text\ndef remove_symbols(text):\n    '''\n    Write a function to remove all symbols from the given string.\n    '''\n    text = re.sub(r'\\w+[^\\w\\d\\W\\d]','',text)\n    return text\ndef remove_tokens(text):\n    '''\n    Write a function to remove all tokens from the given string.\n    '''\n    text = re.sub(r'\\W+',' ',text)\n    return text\ndef remove_numbers(text):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    text = re.sub(r'[^0-9]','',text)\n    return text\ndef remove_currency(text):\n    '''\n    Write a function to remove all currency symbols from the given string.\n    '''\n    text = re.sub(r'\\$','',text)\n    return text\ndef remove_tables(text):\n    '''\n    Write a function to remove all tables from the given string.\n    '''\n    text = re.sub(r'\\[','',text)\n    text = re.sub(r'\\]','',text)\n    return text\ndef remove_quotes(text):\n    '''\n    Write a function to remove all quotes from the given string.\n    '''\n    text = re.sub(r'\"','',text)\n    return text\ndef remove_variables(text):\n    '''\n    Write a function to remove all variables from the given string.\n    '''\n    text = re.sub(r'\\$','',text)\n    text = re.sub(r'\\(','',text)\n    text = re.sub(r'\\)','',text)\n    text = re.sub(r'\\w+','',text)\n    return text\ndef remove_digits(text):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    text = re.sub(r'\\d+','',text)\n    return text\ndef remove_decimal(text):\n    '''\n    Write a function to remove all decimal numbers from the given string.\n    '''\n    text = re.sub(r'\\.[^\\d\\w\\W\\d]','',text)\n    return text\ndef remove_dot(text):\n    '''\n    Write a function to remove all periods in the given string.\n    '''\n    text = re.sub(r'\\.','',text)\n    return text\ndef remove_dot_and_space(text):\n    '''\n    Write a function to remove all dots and spaces in the given string.\n    '''\n    text = re.sub(r'\\d+','',text)\n    text = re.sub(r'\\s+',' ',text)\n    return text\ndef remove_digits_and_space(text):\n    '''\n    Write a function to remove all digits and spaces from the given string.\n    '''\n    text = re.sub(r'\\d+',' ',text)\n    text = re.sub(r'\\s+',' ',text)\n    return text\ndef remove_numbers_and_space(text):\n    '''\n    Write a function to remove all numbers and spaces from the given string.\n    '''\n    text = re.sub(r'\\d+',' ',text)\n    text = re.sub(r'\\s+',' ',text)\n    return text\ndef remove_special_chars_and_space(text):\n    '''\n    Write a function to remove all special characters and spaces from the given string.\n    '''\n    text = re.sub(r'\\w+[^\\w\\d\\W\\d]','',text)\n    text = re.sub(r'\\s+',' ',text)\n    return text\ndef remove_special_chars_and_space(text):\n    '''\n    Write a function to remove all special characters and spaces from the given string.\n    '''\n    text = re.sub(r'\\w+',' ',text)\n    text = re.sub(r'\\s+',' ',text)\n    return text\ndef remove_space(text):\n    '''\n    Write a function to remove all spaces from the given string.\n    '''\n    text = re.sub(r'\\s+',' ',text)\n    return text\ndef remove_hyphen(text):\n    '''\n    Write a function to remove all hyphen from the given string.\n    '''\n    text = re.sub(r'-',' ',text)\n    return text\ndef remove_space_and_hyphen(text):\n    '''\n    Write a function to remove all spaces and hyphens from the given string.\n    '''\n    text = re.sub(r'\\s+',' ',text)\n    text = re.sub(r'-',' ',text)\n    return text\ndef remove_digits_and_space(text):\n    '''\n    Write a function to remove all digits and spaces from the given string.\n    '''\n    text = re.sub(r'\\d+',' ',text)\n    text = re.sub(r'\\s+',' ',text)\n    return text\ndef remove_numbers_and_space(text):\n    '''\n    Write a function to remove all numbers and spaces from the given string.\n    '''\n    text = re.sub(r'\\d+',' ',text)\n    text = re.sub(r'\\s+',' ',text)\n    return text\ndef remove_tables_and_space(text):\n    '''\n    Write a function to remove all tables and spaces from the given string.\n    '''\n    text = re.sub(r'\\[',' ',text)\n    text = re.sub(r'\\]',' ',text)\n    return text\ndef remove_quotes_and_space(text):\n    '''\n    Write a function to remove all quotes and spaces from the given string.\n    '''\n    text = re.sub(r'\\'',' ',text)\n    text = re.sub(r'\\s+',' ',text)\n    return text\ndef remove_variables_and_space(text):\n    '''\n    Write a function to remove all variables and spaces from the given string."
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n    \ndef assign_sale_to_customer(customer,sales):\n    '''\n    Write a function that assigns sale number to a customer.\n    '''\n    index = customer-1\n    while sales[index] < sales[index+1]:\n        sales[index], sales[index+1] = sales[index+1], sales[index]\n        index +=1\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return 0\n    elif sale_amount >= actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else: \n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return (actual_cost*sale_amount)/100\n    # return actual_cost*sale_amount/100\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<=actual_cost:\n        return 0.0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount/actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0: \n        return 0\n    \n    factor = 2 \n    while (n % factor == 0): \n        factor += 1\n    \n    if factor!= 2: \n        print (factor)\n        return(sumofFactors(n//factor))\n    else: \n        return(n)\nprint(sumofFactors(38))\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 1 :\n        return 0\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 2\n    elif n%2 == 0 :\n        return sumofFactors(n//2) + (n//2)\n    else :\n        return n + sumofFactors(n//2)\ndef prob(n,k):\n    '''\n    Write a python function to find the probability of k\n    '''\n    if n == 1 or k == 1:\n        return 1\n    elif n == 2 :\n        return math.log2(1/k)\n    elif n % 2 == 0:\n        return prob(n//2,k)\n    else :\n        return prob(n,k*k)\ndef isprime(n):\n    '''\n    Determine if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_x(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_y(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_z(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_z_y(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_z_x(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_y_x(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_y_z(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_x_y(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_z_y_x(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_z_x_y(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_x_y_z(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_y_x_z(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return True\ndef isprime_primelist_x_y_z_y(n):\n    '''\n    Determine if a number is prime or not and a list of numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i == 0:\n                return False\n        return Tru"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n % 2 == 0:\n        return n\n    else:\n        return sumofFactors(n / 2)\n    \ndef countEqualNumbers(n):\n    '''\n    Write a python function to find the number of equal numbers.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if(i % 2 == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    sum = 0\n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) :\n            if i!= n // i :\n                sum += i\n            else :\n                sum += n // i\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1,int(math.sqrt(n)+1)):\n        if (n % i) == 0:\n            factors.append(i)\n            if i!= int(math.sqrt(n)):\n                factors.append(int(math.sqrt(n)))\n            #print(factors)\n    return int(n) + int(sum(factors))\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    \n    ans = 0\n    for i in range(1,math.floor(math.sqrt(n))+1):\n        if (n%i==0):\n            ans += i\n            if i!=math.floor(math.sqrt(n)):\n                ans += sumofFactors(n//i)\n    if ans == n:\n        return n\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n % 2 == 0 : \n        return n//2\n    else : \n        return (n + 1)//2\n    \ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n % 2 == 0 : \n        return n//2\n    else : \n        return (n+1)//2 + (n+1)//2\n    \ndef sumofFactors3(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return (n**2)//2 + ((n**2)//2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            sum += i \n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    elif n % 2 == 0 : \n        return sumofFactors(n // 2) + n \n    else : \n        return sumofFactors(n - 1) \n        \ndef countOfSingles(n) : \n    '''\n    Write a python function to find the count of number of singles in a positive integer n. \n    '''\n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    else : \n        return countOfSingles(n - 1) + countOfSingles(n - 2) \n    \ndef nCr(n, r): \n    '''\n    Write a python function to compute the nCr of n for r = 1..r. \n    '''\n    if r == 0: \n        return 1\n    elif n == 1: \n        return n \n    else: \n        return nCr(n - 1, r - 1) + nCr(n - 1, r) \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        return sumofFactors(n-1) + sumofFactors(n-2) \n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #Create a pattern for matching a word.\n    pattern = r'(^|[^a-zA-Z])z'\n    #Match the word.\n    match = re.match(pattern, text)\n    #Return the match object.\n    return match\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile('z')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words(text):\n    '''\n    Write a function that matches a word containing any letter.\n    '''\n    regex = re.compile('[a-z]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other(text):\n    '''\n    Write a function that matches a word containing any letter and numbers.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_2(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and two other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \ndef text_match_words_and_other_3(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and three other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_4(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and four other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_5(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and five other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_6(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and six other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_7(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and seven other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_8(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and eight other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_9(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and nine other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_10(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and ten other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_11(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and eleven other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_12(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and twelve other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_13(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and thirteen other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_14(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and fourteen other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_15(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and fifteen other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_16(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and sixteen other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_17(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and seventeen other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_18(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and eighteen other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_19(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and nineteen other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_20(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and twenty other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text = text.replace(' ','')\n    return re.match(regex, text)\n    \n    \ndef text_match_words_and_other_21(text):\n    '''\n    Write a function that matches a word containing any letter and numbers and twenty other words.\n    '''\n    regex = re.compile('[a-zA-Z0-9]')\n    text "
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = 'Z'\n    if (text == wordz):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search('z', text)\n    return match\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'[a-z]z?'\n    # write regex here\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Create a regular expression\n    regex = re.compile(r'z')\n    # Search for 'z' in the given text\n    if regex.search(text) is not None:\n        # Return the index of the match\n        return regex.search(text).span()\n    else:\n        # Return False\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex_wordz = r'[^\\w\\s]#[a-zA-Z]*'\n    wordz = re.compile(regex_wordz)\n    if wordz.search(text) == None:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return any(char in string for char in text)\ndef print_all_words(dictionary):\n    '''\n    Write a function that prints a given dictionary.\n    '''\n    for k,v in dictionary.items():\n        print(k,v)\ndef remove_word(text):\n    '''\n    Remove the word 'z' from the given text.\n    '''\n    return re.sub(\"z\", \"\", text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Build regex\n    regex = 'z\\w'\n    # Find groups\n    text = re.findall(regex, text)\n    # Iterate over groups\n    for x in text:\n        # Add 'z' to string\n        x = 'z' + x\n        # Find string that starts with 'z'\n        if x.startswith('z'):\n            # Remove 'z' from string\n            x = x[1:]\n        # Remove any non-alphabetic characters\n        x = x.replace('[^a-zA-Z]','')\n        # Remove non-printable characters\n        x = ''.join(c for c in x if c in printable_characters)\n        # Return the matched string\n        return x\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-z]{1,3}\\b')\n    #print(pattern.findall(text))\n    return pattern.findall(text)\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 % 4 == 0):\n        if (monthnum2 % 100 == 0):\n            if (monthnum2 % 400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 >= 1 and monthnum2 <= 12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    elif monthnum2 == 1:\n        if not(monthnum2 == 2 and 0 < monthnum2 < 13):\n            return False\n    elif monthnum2 == 2:\n        if not(monthnum2 == 3 and 0 < monthnum2 < 13):\n            return False\n    elif monthnum2 == 3:\n        if not(monthnum2 == 4 and 0 < monthnum2 < 13):\n            return False\n    elif monthnum2 == 4:\n        if not(monthnum2 == 5 and 0 < monthnum2 < 13):\n            return False\n    elif monthnum2 == 5:\n        if not(monthnum2 == 6 and 0 < monthnum2 < 13):\n            return False\n    elif monthnum2 == 6:\n        if not(monthnum2 == 7 and 0 < monthnum2 < 13):\n            return False\n    elif monthnum2 == 7:\n        if not(monthnum2 == 8 and 0 < monthnum2 < 13):\n            return False\n    elif monthnum2 == 8:\n        if not(monthnum2 == 9 and 0 < monthnum2 < 13):\n            return False\n    elif monthnum2 == 9:\n        if not(monthnum2 == 10 and 0 < monthnum2 < 13):\n            return False\n    elif monthnum2 == 10:\n        if not(monthnum2 == 11 and 0 < monthnum2 < 13):\n            return False\n    elif monthnum2 == 11:\n        if not(monthnum2 == 12 and 0 < monthnum2 < 13):\n            return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    else:\n        if monthnum2 < 1 or monthnum2 > 12:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if not isinstance(monthnum2, int):\n        return 'Please enter the integer value.'\n    elif not isinstance(monthnum2, int):\n        return 'Please enter the integer value.'\n    elif monthnum2 < 1 or monthnum2 > 12:\n        return 'Please enter the integer value between 1 and 12.'\n    elif not (monthnum2 % 2 == 0):\n        return 'Please enter the integer value in the format of 1 or 2.'\n    elif not (monthnum2 % 2 == 0 and not monthnum2 > 31):\n        return 'Please enter the integer value in the format of 1 or 2.'\n    else:\n        return 'The given month number is a valid input.'\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    elif monthnum2 == 3:\n        if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    elif monthnum2 == 5:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n        else:\n            return False\n    elif monthnum2 == 7:\n        if monthnum2 == 4 or monthnum2 == 5 or monthnum2 == 6 or monthnum2 == 8 or monthnum2 == 9 or monthnum2 == 10 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    elif monthnum2 == 8:\n        if monthnum2 == 4 or monthnum2 == 5 or monthnum2 == 6 or monthnum2 == 7 or monthnum2 == 10 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    elif monthnum2 == 9:\n        if monthnum2 == 4 or monthnum2 == 5 or monthnum2 == 6 or monthnum2 == 8 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    elif monthnum2 == 10:\n        if monthnum2 == 4 or monthnum2 == 5 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 12:\n            return True\n        else:\n            return False\n    elif monthnum2 == 11:\n        if monthnum2 == 4 or monthnum2 == 5 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n        else:\n            return False\n    elif monthnum2 == 12:\n        if monthnum2 == 4 or monthnum2 == 5 or monthnum2 == 6 or monthnum2 == 8 or monthnum2 == 9 or monthnum2 == 10 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = monthnum2\n    while monthnum < 0:\n        monthnum += 12\n    for month in range(12):\n        if month == monthnum:\n            return False\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12 or monthnum2 < 1:\n        print(\"Invalid month number!\")\n        return False\n    elif monthnum2 == 1:\n        if monthnum2 == 1:\n            return True\n        elif monthnum2 == 2:\n            if monthnum2 == 1:\n                return True\n            elif monthnum2 == 3:\n                return True\n            elif monthnum2 == 4:\n                return True\n            elif monthnum2 == 5:\n                return True\n            elif monthnum2 == 6:\n                return True\n            elif monthnum2 == 7:\n                return True\n            elif monthnum2 == 8:\n                return True\n            elif monthnum2 == 9:\n                return True\n            elif monthnum2 == 10:\n                return True\n            elif monthnum2 == 11:\n                return True\n        elif monthnum2 == 3:\n            if monthnum2 == 3:\n                return True\n            elif monthnum2 == 4:\n                if monthnum2 == 3:\n                    return True\n                elif monthnum2 == 5:\n                    return True\n                elif monthnum2 == 6:\n                    return True\n                elif monthnum2 == 7:\n                    return True\n                elif monthnum2 == 8:\n                    return True\n                elif monthnum2 == 9:\n                    return True\n                elif monthnum2 == 10:\n                    return True\n                elif monthnum2 == 11:\n                    return True\n            elif monthnum2 == 5:\n                return True\n            elif monthnum2 == 6:\n                return True\n            elif monthnum2 == 7:\n                return True\n            elif monthnum2 == 8:\n                return True\n            elif monthnum2 == 9:\n                return True\n            elif monthnum2 == 10:\n                return True\n            elif monthnum2 == 11:\n                return True\n        elif monthnum2 == 6:\n            if monthnum2 == 6:\n                return True\n            elif monthnum2 == 7:\n                return True\n            elif monthnum2 == 8:\n                return True\n            elif monthnum2 == 9:\n                return True\n            elif monthnum2 == 10:\n                return True\n            elif monthnum2 == 11:\n                return True\n        elif monthnum2 == 7:\n            return True\n        elif monthnum2 == 8:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n    elif monthnum2 == 4:\n        if monthnum2 == 4:\n            return True\n        elif monthnum2 == 5:\n            return True\n        elif monthnum2 == 6:\n            return True\n        elif monthnum2 == 7:\n            return True\n        elif monthnum2 == 8:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n    elif monthnum2 == 2:\n        if monthnum2 == 2:\n            return True\n        elif monthnum2 == 3:\n            return True\n        elif monthnum2 == 4:\n            return True\n        elif monthnum2 == 5:\n            return True\n        elif monthnum2 == 6:\n            return True\n        elif monthnum2 == 7:\n            return True\n        elif monthnum2 == 8:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n    elif monthnum2 == 5:\n        if monthnum2 == 5:\n            return True\n        elif monthnum2 == 6:\n            return True\n        elif monthnum2 == 7:\n            return True\n        elif monthnum2 == 8:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n    elif monthnum2 == 1:\n        if monthnum2 == 1:\n            return True\n        elif monthnum2 == 2:\n            return True\n        elif monthnum2 == 3:\n            return True\n        elif monthnum2 == 4:\n            return True\n        elif monthnum2 == 5:\n            return True\n        elif monthnum2 == 6:\n            return True\n        elif monthnum2 == 7:\n            return True\n        elif monthnum2 == 8:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n    elif monthnum2 == 6:\n        if monthnum2 == 6:\n            return True\n        elif monthnum2 == 7:\n            return True\n        elif monthnum2 == 8:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    else:\n        return True\n    \n    \n    \ndef check_days_number(daysnum2):\n    '''\n    Write a function to check whether the given number of days contains 31 days or not.\n    '''\n    if daysnum2 < 0:\n        return False\n    elif daysnum2 == 0:\n        return True\n    elif daysnum2 == 31:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_year_monthnumb_number(yearnum2, monthnum2):\n    '''\n    Write a function to check whether the given year and month number contains 3 digits or not.\n    '''\n    if yearnum2 < 0000 or yearnum2 > 0xFFFF:\n        return False\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    if monthnum2 == 1:\n        if yearnum2 < 0000 or yearnum2 > 0xFFFF:\n            return False\n        else:\n            return True\n    else:\n        if yearnum2 == 0xFFFF and monthnum2 == 1:\n            return True\n        else:\n            return False\n    \n    \n    \ndef check_dayofyear(daynum):\n    '''\n    Write a function to check whether the given day of year is a leap year or not.\n    '''\n    if daynum < 1 or daynum > 31:\n        return False\n    elif daynum % 4 == 0 and daynum % 100!= 0 or daynum % 400 == 0:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_year_monthnumb(yearnum2, monthnum2):\n    '''\n    Write a function to check whether the given year, month, and number contains 3 digits or not.\n    '''\n    if yearnum2 < 0000 or yearnum2 > 0xFFFF:\n        return False\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    if monthnum2 == 1:\n        if yearnum2 < 0000 or yearnum2 > 0xFFFF:\n            return False\n        else:\n            return True\n    else:\n        if yearnum2 == 0xFFFF and monthnum2 == 1:\n            return True\n        else:\n            return False\n    \n    \n    \ndef check_dayofyear2(daynum):\n    '''\n    Write a function to check whether the given day of year is a leap year or not.\n    '''\n    if daynum < 1 or daynum > 31:\n        return False\n    elif daynum % 4 == 0 and daynum % 100!= 0 or daynum % 400 == 0:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef check_saturday(satnum):\n    '''\n    Write a function to check whether the given day of week contains Saturday or not.\n    '''\n    if satnum < 1 or satnum > 7:\n        return False\n    elif satnum == 7:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_saturday2(satnum):\n    '''\n    Write a function to check whether the given day of week contains Saturday or not.\n    '''\n    if satnum < 1 or satnum > 6:\n        return False\n    elif satnum == 6:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_saturday3(satnum):\n    '''\n    Write a function to check whether the given day of week contains Saturday or not.\n    '''\n    if satnum < 1 or satnum > 5:\n        return False\n    elif satnum == 5:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum < 1 or sunnum > 6:\n        return False\n    elif sunnum == 6:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday2(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum < 1 or sunnum > 4:\n        return False\n    elif sunnum == 4:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday3(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum < 1 or sunnum > 3:\n        return False\n    elif sunnum == 3:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday4(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum < 1 or sunnum > 2:\n        return False\n    elif sunnum == 2:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday5(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum < 1 or sunnum > 1:\n        return False\n    elif sunnum == 1:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday6(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum < 1 or sunnum > 5:\n        return False\n    elif sunnum == 5:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday7(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum < 1 or sunnum > 4:\n        return False\n    elif sunnum == 4:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday8(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum < 1 or sunnum > 3:\n        return False\n    elif sunnum == 3:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday9(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum < 1 or sunnum > 2:\n        return False\n    elif sunnum == 2:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday10(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum < 1 or sunnum > 6:\n        return False\n    elif sunnum == 6:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday11(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum < 1 or sunnum > 5:\n        return False\n    elif sunnum == 5:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday12(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum < 1 or sunnum > 4:\n        return False\n    elif sunnum == 4:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday13(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum < 1 or sunnum > 3:\n        return False\n    elif sunnum == 3:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_sunday14(sunnum):\n    '''\n    Write a function to check whether the given day of week contains Sunday or not.\n    '''\n    if sunnum "
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        print('The given month number is out of range')\n        return False\n    elif monthnum2 > 31 and monthnum2 < 28:\n        print('The given month number is out of range')\n        return False\n    elif monthnum2 > 30 and monthnum2 < 32:\n        print('The given month number is out of range')\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    n = len(stringlist)\n    for i in range(n // 2):\n        temp = stringlist[i]\n        stringlist[i] = stringlist[n - i - 1]\n        stringlist[n - i - 1] = temp\n        "
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Your code here\n    return\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if not stringlist:\n        return []\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #Create a temporary list\n    temp_list = []\n    #Create a temp string\n    string = ''\n    #Loop through each string in the list\n    for index in range(len(stringlist)):\n        #Append the current character to the temporary string\n        temp_list.append(stringlist[index])\n        #If this character is not the first, remove it\n        if index + 1 < len(stringlist):\n            #If this character is the first, set the string to be the last character\n            if stringlist[index] == stringlist[index + 1]:\n                temp_list.pop()\n            #Else, add the current character to the string\n            else:\n                string += stringlist[index]\n        #Else, set the string to be the last character\n        else:\n            string += stringlist[index]\n    #Return the reversed string\n    return string\n        "
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Your code here\n    return\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return stringlist\n    else:\n        temp = stringlist[0]\n        for i in range(1, len(stringlist)):\n            temp = stringlist[i] + temp\n        stringlist[0] = temp\n        return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Iterate through each value in the list\n    for value in stringlist:\n        # Reverse each value\n        temp = value[::-1]\n        # Insert the reversed value into the original list\n        stringlist.insert(0, temp)\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #TODO: Write your code here\n    stringlist.reverse()\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    def reverse_string(list):\n        for i in range(len(list)-1,-1,-1):\n            string = list[i]\n            list[i] = string[::-1]\n    # In case of list\n    if type(stringlist) == list:\n        list = stringlist\n    else:\n        list = list.split(\" \")\n    # Get length of list\n    length = len(list)\n    # Reverse each string in list\n    for i in range(length):\n        string = list[i]\n        list[i] = string[::-1]\n    # Reverse string\n    reverse_string(list)\n    # Join string\n    string = \" \".join(list)\n    return string\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0] \n    for i in range(1, len(lst)): \n        if lst[i] < min: \n            min = lst[i] \n    return min\n    \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    try: \n        return(min(lst, key=len)) \n    except TypeError: \n        return(\"Invalid input\")\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1, len(lst)):\n        if(lst[i] < min):\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)):\n        if (len(lst[i]) == len(lst[i+1])):\n            if (len(lst[i]) < len(lst[i+1])):\n                lst[i+1] = lst[i+1] + lst[i]\n            else:\n                lst[i] = lst[i] + lst[i+1]\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = lst[0]\n    sublist = []\n    for i in lst: \n        if i < minimum: \n            minimum = i \n            sublist = [i, minimum] \n    return sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    minimum_length = len(lst)\n    minimum_list = []\n    for item in lst:\n        if len(item) < minimum_length:\n            minimum_length = len(item)\n            minimum_list = item\n    \n    return minimum_list\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst1=[]\n    for i in lst:\n        lst1.append(i)\n    for i in range(0,len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i]<lst[j]:\n                lst1[i],lst1[j]=lst[j],lst[i]\n    return lst1\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return -1\n    \n    min = lst[0]\n    min_index = 0\n    for i in range(len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n            min_index = i\n    \n    return min_index\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return None\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in lst: \n        if(i < min): \n            min = i \n    return min \nlst = [4, 9, 12, 6, 7, 7, 8, 9, 10, 12, 18, 23, 18, 12, 19, 21, 23, 27, 27, 28, 30, 31]\nprint(Find_Min(lst))"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l>=b:\n        return l*b\n    return 0\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = l * b\n    print(f\"The area of the rectangle is: {a}\")\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print('The area of the rectangle is :'+ str(area))\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    # your code goes here\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower().replace(' ', '').replace('-', '').replace('&', '').replace('#', '').replace('$', '').replace('%', '').replace('&', '').replace('$', '').replace('%', '').replace('&', '').replace('(', '').replace(')', '').replace('*', '').replace('=', '').replace('-', '').replace('+', '').replace('(', '').replace(')', '').replace('*', '')\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    return str1.translate(None, 'abcdefghijklmnopqrstuvwxyz')\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.replace(str1[0].upper(), '')\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.digits))\ndef remove_special(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_punctuation_and_number(str1):\n    '''\n    Write a function to remove punctuation and numbers from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation)).replace(\"'\", \"\")\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1=='':\n        return str1\n    if str1[0].isupper():\n        return str1[0].lower()+str1[1:]\n    else:\n        return str1[1:]\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # initialise the returned string\n    ret = \"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove all the uppercase letters in the string\n    str1 = str1.upper()\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    l = re.findall(r'[A-Z]', str1)\n    return ''.join(l)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    new_str = \"\"\n    for i in str2:\n        if i == \" \":\n            new_str += \" \"\n        elif i.isupper():\n            new_str += i.upper()\n        else:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        print(i[0])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    i = 0\n    while i < len(lst):\n        j = i\n        while j < len(lst):\n            if lst[j] < lst[i]:\n                lst[j],lst[i] = lst[i],lst[j]\n            j += 1\n        i += 1\n    return lst"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = lst[0]\n    return lst\n    \nlst = []\nprint(\"Enter the numbers and press Enter\")\nwhile True:\n    x = input()\n    if x == '':\n        break\n    else:\n        lst.append(int(x))\n    \nprint(lst)\nprint(\"The first element of the list is\",Extract(lst))"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    #Pass in a list\n    #Write a loop here.\n    return(lst[0]) \n    \n    \ndef test(): \n    '''\n    Write a python function to get all elements in a sublist. \n    '''\n    #Call the function. \n    print(Extract([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])) \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sublist_1 = lst[0]\n    for el in lst: \n        sublist_1 = sublist_1 + el\n    return sublist_1 \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        print(i[0])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        for j in i:\n            print(j)\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    \n    # create an empty list to store the elements of the list\n    res = []\n    # loop through the elements of the list\n    for i in range(len(lst)): \n        # make a copy of the list, and make the copy the string\n        temp = lst[i]\n        # if the element is not a string, store it in the list\n        if not type(temp) == str:\n            res.append(temp)\n    # return the first element of the list\n    return res[0] \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in str:\n        if i.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for letter in str:\n        if letter.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for i in str:\n        if i.isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    if len(str) > 0:\n        for i in str:\n            if i.isupper():\n                count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    if len(str)==0:\n        return 0\n    else:\n        count=0\n        for i in str:\n            if i.isupper():\n                count+=1\n        return count\nstr=input(\"Enter string:\")\nprint(upper_ctr(str))\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if i.isupper():\n            ctr+=1\n    return ctr\ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if i.islower():\n            ctr+=1\n    return ctr\ndef count_chars(str,chars):\n    '''\n    Write a python function to count the number of times a character is repeated in a given string.\n    '''\n    count=0\n    for i in str:\n        if i==chars:\n            count+=1\n    return count\ndef find_char(str,chars):\n    '''\n    Write a python function to find the position of a specific character.\n    '''\n    low=0\n    high=len(str)-1\n    while low<=high:\n        mid=int((low+high)/2)\n        if str[mid]==chars:\n            return mid\n        elif str[mid]>chars:\n            high=mid-1\n        else:\n            low=mid+1\n    return -1\ndef find_prime_factors(n):\n    '''\n    Write a python function to find all prime factors of a given number.\n    '''\n    if n==1:\n        return []\n    prime_factors=[]\n    for i in range(2,n):\n        if n%i==0:\n            if i==n//i:\n                prime_factors.append(i)\n            else:\n                prime_factors.append(n//i)\n    return prime_factors\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef swap_chars(str,chars):\n    '''\n    Write a python function to swap two given characters in a string.\n    '''\n    res=\"\"\n    for i in range(len(str)):\n        if i==0:\n            res+=chars[i]\n        else:\n            res+=chars[i]\n            res+=\"_\"\n    return res\ndef is_pangram(str):\n    '''\n    Write a python function to check whether a given string is a pangram or not.\n    '''\n    return all(c.lower() in 'qwertyuiopasdfghjklzxcvbnm for open any this any in your own wordlists are for me to find.' for c in str)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str_list = list(str)\n    upper_count = 0\n    str_list.reverse()\n    for char in str_list:\n        if char.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_dict = {}\n    for i in str:\n        if i.isupper():\n            if i not in upper_dict:\n                upper_dict[i] = 1\n            else:\n                upper_dict[i] += 1\n    print(upper_dict)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # your code goes here\n    upper = 0\n    for i in str:\n        if i.isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    allCombinations = []\n    for element in list1:\n        if element not in allCombinations:\n            allCombinations.append(element)\n    return allCombinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    if len(list1) == 1:\n        combinations.append(list1[0])\n    else:\n        for index in range(len(list1)):\n            combinations.append(list1[0:index] + list1[index+1:])\n    return combinations\n    \ndef combination_index(list1,list2):\n    '''\n    Write a function to find the index of two numbers in a given list.\n    '''\n    #return the index of list1[0:1] + list1[1:2] + list1[2:]\n    combinations = combinations_list(list1)\n    i = 0\n    index = []\n    while i < len(combinations):\n        index.append(combinations[i][0:i] + combinations[i][i+1:])\n        i+=1\n    return index\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    res = []\n    \n    for i in range(1, len(list1)+1):\n        for j in combinations_with_replacement(list1, i):\n            res.append(j)\n            \n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1,2))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Your code here\n    list2 = []\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            list2.append(list1[i]+list1[j])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    my_combinations = []\n    combinations = []\n    for i in range(1,len(list1)+1):\n        for j in itertools.combinations(list1,i):\n            my_combinations.append(j)\n    return my_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            print(list1[i],list1[j])\n            combinations_list(list1[:i] + list1[j:])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def is_valid(list1, length):\n        \"\"\"\n        Check if the list of elements of the given length can be extracted in the list\n        \"\"\"\n        #Loop through the elements of the list\n        for i in range(length):\n            #Check if the element can be extracted in the list\n            if list1[i] not in list1:\n                return False\n        return True\n    #Create an empty list\n    comb_list = []\n    for i in range(len(list1)):\n        #Create an empty list of combinations\n        comb_list.append(list1[i])\n        if is_valid(comb_list, len(list1)):\n            #If the list is valid, add the element to the combined list\n            comb_list.append(list1[i])\n    return comb_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n    for el in list1:\n        comb.append(el)\n    return comb\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray_product = -math.inf\n    # Your code here\n    for i in range(0, len(arr)):\n        curr = arr[i]\n        for j in range(i + 1, len(arr)):\n            subarr = arr[i:j + 1]\n            curr_product = max(subarr)\n            # note that we need to go over the whole array,\n            # not just the subarray itself\n            if (curr_product == max_subarray_product):\n                break\n            max_subarray_product = curr_product if max_subarray_product == -math.inf else max(curr_product, max_subarray_product)\n    return max_subarray_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    prod = 1\n    \n    # Length of arr = 2^n\n    for i in range(len(arr)-1):\n        prod *= arr[i]\n    \n    # arr[i] for i = len(arr)-1\n    for i in range(len(arr)-1,0,-1):\n        # Start from the right and stop in the left\n        prod = prod * arr[i]\n        \n    # Max product subarray\n    return prod\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) <= 1:\n        return arr\n    \n    res = [0]\n    max_left = 0\n    max_right = 0\n    max_res = -1\n    \n    for i in range(len(arr)):\n        res.append(arr[i] * max(max_left, max_right))\n        if arr[i] > max_left:\n            max_left = arr[i]\n        \n        if arr[i] > max_right:\n            max_right = arr[i]\n        \n        if arr[i] * max(max_left, max_right) > max_res:\n            max_res = arr[i] * max(max_left, max_right)\n            max_right = 0\n            max_left = 0\n    \n    return max_re"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray = []\n    temp = []\n    \n    for i in range(len(arr)):\n        # find max_subarray\n        max_subarray = [arr[i]]\n        if arr[i] > arr[0]:\n            # add to the current subarray\n            temp.append(arr[i])\n        else:\n            temp.append(arr[i])\n            # find new max_subarray\n            while temp[-1] < arr[i+1]:\n                temp.pop()\n            max_subarray.append(temp[-1])\n            # add to the current subarray\n            temp.append(arr[i+1])\n        \n        while len(max_subarray)!= 0 and max_subarray[-1] < arr[i+1]:\n            max_subarray.pop()\n        \n        # if the array is empty return the array\n        if len(max_subarray) == 0:\n            return max_subarray\n        \n        # if the array is not empty return max_subarray_product\n        elif len(max_subarray) > 0:\n            # find the first subarray\n            for j in range(len(max_subarray)-1):\n                # add the max_subarray product to the current subarray\n                max_subarray[j] = arr[i]*max_subarray[j]\n            \n            # add the first subarray product to the current max_subarray product\n            max_subarray[0] = arr[i]*max_subarray[0]\n            \n            # if the subarray is of length 1, return the array\n            if len(max_subarray) == 1:\n                return max_subarray\n            # if the array is not of length 1, then return the max subarray product\n            else:\n                return [max_subarray[0]] + max_subarray_product(max_subarray[1:])\n    \n    return max_subarray\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray_product_helper(arr)\n    return max(arr)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 1\n    max_length = 1\n    for i in range(0, len(arr)):\n        for j in range(0, i):\n            if arr[i] > arr[j]:\n                max_product = max(arr[i] * max_product, arr[j])\n            max_length = max(max_length, len(arr[j:i+1]))\n    return max_product, max_length\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray = 1\n    min_subarray = 1\n    product = 1\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            product = arr[i]\n        else:\n            product = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    left = 0\n    right = 0\n    res = []\n    temp_res = []\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product_subarray = 0\n    first_max_subarray = 0\n    last_max_subarray = 0\n    previous_max_subarray = 0\n    for i in range(len(arr)):\n        previous_max_subarray += arr[i]\n        current_max_subarray = arr[i]\n        for j in range(i, len(arr)):\n            current_max_subarray = arr[j]\n            if current_max_subarray > previous_max_subarray:\n                previous_max_subarray = current_max_subarray\n                current_max_subarray = arr[j]\n            else:\n                previous_max_subarray -= current_max_subarray\n                current_max_subarray = arr[j]\n            if current_max_subarray > max_product_subarray:\n                max_product_subarray = current_max_subarray\n                first_max_subarray = arr[j]\n            if current_max_subarray == last_max_subarray:\n                last_max_subarray = arr[j]\n    print(previous_max_subarray, first_max_subarray, last_max_subarray)\n    return last_max_subarray, max_product_subarray\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        #print(arr)\n        arr.sort()\n        max_product = arr[0]\n        subarray = arr[1]\n        cur_product = arr[0]\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if i not in dict:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.keys():\n        if(type(dict[i]) is not list):\n            if(type(dict[i]) is dict):\n                check_value(dict[i], n)\n            else:\n                if(dict[i]!= n):\n                    print(f\"No value in dictionary. {dict[i]} is not {n}\")\n        else:\n            check_value(dict[i], n)\n    return\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if v!= k:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)==n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # or just if you want to check if dict has only 1 key\n    # if len(dict)==0:\n    #     return True\n    if len(dict) == n:\n        return True\n    else:\n        if len(dict.keys()) > n:\n            return False\n        return dict.values() == list(set(dict.values()))\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for x in dict.keys():\n        if dict[x]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Write your code here\n    if len(dict) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not isinstance(dict, dict):\n        raise TypeError('Parameter \\'dict\\' must be a dictionary')\n    if not isinstance(n, int):\n        raise TypeError('Parameter \\'n\\' must be an integer')\n    for i in dict.keys():\n        if dict[i]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    def is_unique(val):\n        if val not in dict.values():\n            raise ValueError('{} not in dictionary'.format(val))\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for i in dict1.items():\n        if len(i[1])!= 0:\n            dict2[i[0]] = i[1][0]\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    res = dict1.copy()\n    for i, v in res.items():\n        if type(v) == list:\n            res.pop(i)\n    return res\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k in dict1:\n        if dict1[k]==[]:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # your code goes here\n    return dict1\n    # Your code goes here\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    try:\n        for key in dict1:\n            if dict1[key] == 0:\n                del dict1[key]\n    except Exception as e:\n        print(e)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Empty dictionary\n    temp = dict1.copy()\n    # Loop through all dictionary\n    for key, value in temp.items():\n        # If value is empty\n        if value == \"\":\n            # Remove key\n            del dict1[key]\n            # Check if there are any new items\n            if dict1:\n                # If there are no new items\n                # Put the empty string in the dict\n                dict1[key] = \"\"\n            # If there are no new items\n        else:\n            # If the key is empty\n            # Replace empty string with value\n            dict1[key] = value\n    # Return the new dictionary\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict=dict1.copy()\n    for item in new_dict:\n        if len(new_dict[item])==0:\n            del new_dict[item]\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.keys():\n        if len(dict1[i]) == 0:\n            del(dict1[i])\n    return(dict1)\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if not dict1[key]:\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if (dict1[i]==\"\") or (dict1[i]==None):\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    answer = 1\n    for i in range(len(arr)):\n        for j in range(i):\n            answer = max(answer, arr[j] * arr[i])\n    return answer\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    maximum=arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]>arr[i-1]:\n            maximum=arr[i]\n    for i in range(1,len(arr)-1):\n        if arr[i+1]<arr[i+2]:\n            maximum=max(arr[i+1]*maximum,arr[i]*maximum)\n    return maximum\narr=list(map(int,input().split()))\nprint(max_product(arr))"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(max_product(arr[:-1]), arr[-1] * arr[-2])\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    \n    # base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    \n    # return the product of the most common element (if there is a tie)\n    # or, if the array is strictly decreasing\n    # or, if there are some elements in the array not having the most common element\n    m = max_product(arr[1:])\n    i = 0\n    while i < n and m == arr[i]*arr[i+1]:\n        i += 1\n        m = max_product(arr[1:i])\n    return arr[i]*m\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    l = len(arr)\n    \n    #base case\n    if l == 1:\n        return arr[0]\n    if l == 2:\n        return arr[0] * arr[1]\n    \n    #recursive call\n    return max(arr[0] * max_product(arr[1:]), arr[0] * max_product([arr[1]] + arr[2:]) )\n    \narr = [3,4,7,5,6,9,8,4]\nprint(max_product(arr))\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if arr==None or len(arr)==1:\n        return arr[0]\n    else:\n        length=len(arr)\n        dp=[[0 for x in range(length)]for y in range(length)]\n        dp[0][0]=arr[0]\n        for i in range(1,length):\n            dp[i][0]=dp[i-1][0]+arr[i]\n            for j in range(1,i):\n                dp[i][j]=max(dp[i-1][j-1],dp[i-1][j])+arr[i]\n        return max(dp[length-1][length-1],dp[length-1][0])\n        \n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Assumptions:\n    # - If given array is already sorted, returns the maximum product\n    # - If given array is not sorted, returns None\n    # - If given array is empty, returns None\n    \n    # Step 1:\n    # - O(n) complexity\n    # - O(1) space\n    # - O(n) for array\n    \n    # Step 2:\n    # - O(n) complexity\n    # - O(n) space\n    # - O(1) for array\n    \n    if len(arr) == 0:\n        return None\n    \n    # Step 3:\n    # - O(n) complexity\n    # - O(1) space\n    # - O(n) for array\n    \n    # Initialize sum of all numbers\n    # in array\n    sum_numbers = 0\n    \n    # The index of the first element\n    start = 0\n    # The index of the last element\n    end = len(arr) - 1\n    \n    # Start from the first element\n    # and sum all numbers till index\n    # and then return the maximum\n    while start <= end:\n        \n        # Sum all numbers till index\n        # and add to sum\n        sum_numbers += arr[start] + arr[end]\n        \n        # Update start and end\n        start += 1\n        end -= 1\n    \n    return sum_numbers\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # time complexity of this function is O(n^2)\n    # you can see here: https://www.geeksforgeeks.org/maximum-product-subsequence-problem-with-arrays-in-python/\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Store the first value in the array, then start with the 2nd value and 2nd through 3rd value, and so on.\n    max_list = []\n    max_value = arr[1]\n    \n    # Start from the second value and go down from 1 through len(arr)\n    for i in range(len(arr) - 2):\n        # Extract the value at this index\n        value = arr[i + 1]\n        \n        # If it's greater than the max_value, then we have found the max product\n        if value > max_value:\n            max_value = value\n            max_list = arr[i:i + 3]\n    \n    # Return the product of the max product found\n    return max_list[1] * max_list[2] * max_list[3]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i-1] < arr[i] < arr[i] > result:\n            result = arr[i]\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return \n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return((test_tup[0] + test_tup[1]), (test_tup[1] + test_tup[0]))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print('Not enough arguments')\n        return None\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    # To handle negative numbers\n    if test_tup[0] < 0 and test_tup[1] < 0:\n        pos = 0\n        neg = 0\n    elif test_tup[0] < 0:\n        pos = test_tup[1]\n        neg = test_tup[0]\n    elif test_tup[1] < 0:\n        pos = test_tup[0]\n        neg = test_tup[1]\n    \n    else:\n        pos = test_tup[0]\n        neg = test_tup[1]\n    \n    return (pos + neg, abs(pos - neg))\n    \n    "
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup_1 = test_tup\n    for tup_2 in test_tup:\n        tup_2.extend(tup_1)\n    return tuple(tup_1)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) % 2 == 0:\n        #if the number of elements in the tuple is odd, add them in a pair\n        return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)//2))\n    else:\n        #if the number of elements in the tuple is even, add them in a pair\n        return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)//2))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def add_two(num1, num2):\n        '''\n        Add two numbers together, return the result.\n        '''\n        result = num1 + num2\n        return result\n    result = 0\n    num1 = test_tup[0]\n    num2 = test_tup[1]\n    result = add_two(num1, num2)\n    return result\n    \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n < 1: \n        raise ValueError('number of elements must be positive')\n    result = 1\n    for i in range(len(arr) - 1, -1, -1): \n        result *= arr[i]\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 1\n    for i in range(len(arr)):\n        remainder = (remainder * arr[i]) % n\n    return remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n-1, -1, -1):\n        prod = prod * arr[i]\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return reduce(lambda x, y: x*y, arr[n-1::n])\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    for i in range(len(arr)):\n        arr[i] = arr[i] % n\n    return arr\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder_list = []\n    remainder = 1\n    for i in range(len(arr)):\n        remainder = remainder * arr[i]\n        remainder_list.append(remainder)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod=1\n    for i in range(n):\n        prod*=arr[i]\n    return prod\n    \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Now we use a while loop to iterate over the array.\n    index = 0\n    while index < len(arr):\n        current_product = 1\n        for i in range(index, len(arr)):\n            current_product *= arr[i]\n        # Check if the product of the array is greater than or equal to n\n        if current_product <= n:\n            # If so, we return the product of the array \n            return current_product\n        # If it isn't, we take the index of the next element\n        else:\n            index += 1\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) <= 1: \n        return arr[0] \n    p = len(arr) \n    f = 1\n    for i in range(p): \n        f = f*arr[i] \n    return f % n \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in l:\n        if i > 0:\n            count += 1\n        else:\n            pass\n    if count % 2 == 0:\n        return \"True\"\n    else:\n        return \"False\"\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in l:\n        if i % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    is_consecutive = True\n    for i in range(len(l)-1):\n        if l[i]!= l[i+1]: \n            is_consecutive = False\n    return is_consecutive\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = [0] * len(l) \n    consecutive[0] = 1\n    for i in range(1, len(l)): \n        if l[i - 1] == l[i] and consecutive[i - 1] == 0: \n            consecutive[i] = consecutive[i - 1] + 1\n        elif l[i - 1]!= l[i]: \n            consecutive[i] = 1\n    return consecutive[-1] \n  \nl = [1,2,3,4,5,6,7]\nprint(check_Consecutive(l)"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l)-1: \n        if l[i] == l[i+1] and l[i] + 1 == l[i+1]: \n            l.remove(l[i])\n            l.remove(l[i+1]) \n            i = i+1\n        else:\n            i = i + 1\n            \n    return l\n    "
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #get the number of elements\n    elem = len(l)\n    #calculate the index of the first occurrence\n    i = 0\n    while i < elem-1:\n        if l[i] == l[i+1]:\n            i = i+1\n        else:\n            i = i+1\n    if i == elem-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in l: \n        if i == l[0]: \n            l[0] = '1'\n            del l[0] \n        else: \n            l.append(i) \n    if l == [] : \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l == []:\n        return True\n    count = 0\n    for i in l:\n        if i % 2!= 0:\n            count += 1\n    if count == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return l!=[] and any(l[0]==l[i] for i in range(1,len(l)))\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if l[i] == l[i+1] and l[i] not in l[i+2:]:\n            print(l)\n            return True\n    return False\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if test_list1 == [] or test_list2 == []:\n        return None\n    if len(test_list1) == len(test_list2):\n        res = []\n        for i in range(len(test_list1)):\n            if test_list1[i] in test_list2:\n                res.append(test_list1[i])\n        return tuple(res)\n    else:\n        raise TypeError(\"Input lists must be of the same length!\")\n    \ndef tuple_union(test_list1, test_list2):\n    '''\n    Write a function to find the tuple union of elements in the given tuple list irrespective of their order.\n    '''\n    if test_list1 == [] or test_list2 == []:\n        return None\n    if len(test_list1) == len(test_list2):\n        res = []\n        for i in range(len(test_list1)):\n            res.append(test_list1[i] | test_list2[i])\n        return tuple(res)\n    else:\n        raise TypeError(\"Input lists must be of the same length!\")\n        \n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersect.append(test_list1[i])\n    return intersect\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    my_tuple_list = []\n    for i in range(len(test_list1)):\n        my_tuple_list.append(test_list1[i])\n    for i in range(len(test_list2)):\n        my_tuple_list.append(test_list2[i])\n    my_tuple_list.sort()\n    my_tuple_list.reverse()\n    return my_tuple_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list = []\n    for value in test_list1:\n        if value in test_list2:\n            test_list.append(value)\n    return test_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = ()\n    for item in test_list1:\n        if item in test_list2:\n            result = result + (item,)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    first_list = tuple(test_list1)\n    second_list = tuple(test_list2)\n    return first_list, second_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    l1 = len(test_list1)\n    l2 = len(test_list2)\n    i = 0\n    j = 0\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) > len(test_list2):\n        test_list1, test_list2 = test_list2, test_list1\n        test_list1.sort()\n        test_list2.sort()\n    elif len(test_list1) < len(test_list2):\n        test_list2, test_list1 = test_list1, test_list2\n        test_list1.sort()\n        test_list2.sort()\n    # Test Case #1\n    if test_list1[0] < test_list1[1] and test_list2[0] < test_list2[1]:\n        return tuple(sorted((test_list1[0], test_list2[0])))\n    # Test Case #2\n    if test_list1[0] > test_list1[1] and test_list2[0] > test_list2[1]:\n        return tuple(sorted((test_list1[1], test_list2[1])))\n    # Test Case #3\n    if test_list1[0] < test_list2[1] and test_list2[0] < test_list1[1]:\n        return tuple(sorted((test_list1[1], test_list2[1])))\n    # Test Case #4\n    if test_list1[0] > test_list1[1] and test_list2[0] > test_list1[1]:\n        return tuple(sorted((test_list1[0], test_list2[0])))\n    # Test Case #5\n    if test_list1[0] > test_list1[1] and test_list2[0] > test_list1[1]:\n        return tuple(sorted((test_list1[0], test_list2[1])))\n    return tuple()\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    temp = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] < test_list2[j]:\n                temp.append(test_list1[i])\n            elif test_list1[i] > test_list2[j]:\n                temp.append(test_list2[j])\n            elif test_list1[i] == test_list2[j]:\n                temp.append(test_list1[i])\n            else:\n                temp.append(test_list1[i])\n    return temp\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1_index = 0\n    test_list2_index = 0\n    for index, value in enumerate(test_list1):\n        if index == test_list1_index:\n            test_list2_index += 1\n        elif index == test_list2_index:\n            test_list1_index += 1\n    return test_list1, test_list2, test_list1_index, test_list2_index\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1.lower()\n    str1.upper()\n    str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr=str1\n    for i in range(0,len(str1)):\n        if str1[i]==ch:\n            newstr=newstr.replace(str1[i],newch)\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,'')\n    str1=str1.replace(newch,'')\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i + 1:]\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    try:\n        if isinstance(str1,str):\n            if ch in str1:\n                new_str = str1.replace(ch,newch)\n                print(new_str)\n            else:\n                print('Invalid character')\n        else:\n            print('Invalid type of string')\n    except:\n        print('Invalid type of string')\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    print('Replacing: ',ch)\n    print(str1.replace(ch,newch))\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch =='':\n        return str1\n    else:\n        return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.lower()\n    for i in range(0, len(str2)):\n        if ch == 'a' or ch == 'A':\n            str2 = str2.replace(str2[i], newch, 1)\n        elif ch == 'b' or ch == 'B':\n            str2 = str2.replace(str2[i], newch, 2)\n        elif ch == 'c' or ch == 'C':\n            str2 = str2.replace(str2[i], newch, 3)\n        elif ch == 'd' or ch == 'D':\n            str2 = str2.replace(str2[i], newch, 4)\n        elif ch == 'e' or ch == 'E':\n            str2 = str2.replace(str2[i], newch, 5)\n        elif ch == 'f' or ch == 'F':\n            str2 = str2.replace(str2[i], newch, 6)\n        elif ch == 'g' or ch == 'G':\n            str2 = str2.replace(str2[i], newch, 7)\n        elif ch == 'h' or ch == 'H':\n            str2 = str2.replace(str2[i], newch, 8)\n        elif ch == 'i' or ch == 'I':\n            str2 = str2.replace(str2[i], newch, 9)\n        elif ch == 'j' or ch == 'J':\n            str2 = str2.replace(str2[i], newch, 10)\n        elif ch == 'k' or ch == 'K':\n            str2 = str2.replace(str2[i], newch, 11)\n        elif ch == 'l' or ch == 'L':\n            str2 = str2.replace(str2[i], newch, 12)\n        elif ch =='m' or ch == 'M':\n            str2 = str2.replace(str2[i], newch, 13)\n        elif ch == 'n' or ch == 'N':\n            str2 = str2.replace(str2[i], newch, 14)\n        elif ch == 'o' or ch == 'O':\n            str2 = str2.replace(str2[i], newch, 15)\n        elif ch == 'p' or ch == 'P':\n            str2 = str2.replace(str2[i], newch, 16)\n        elif ch == 'q' or ch == 'Q':\n            str2 = str2.replace(str2[i], newch, 17)\n        elif ch == 'r' or ch == 'R':\n            str2 = str2.replace(str2[i], newch, 18)\n        elif ch =='s' or ch == 'S':\n            str2 = str2.replace(str2[i], newch, 19)\n        elif ch == 't' or ch == 'T':\n            str2 = str2.replace(str2[i], newch, 20)\n        elif ch == 'u' or ch == 'U':\n            str2 = str2.replace(str2[i], newch, 21)\n        elif ch == 'v' or ch == 'V':\n            str2 = str2.replace(str2[i], newch, 22)\n        elif ch == 'w' or ch == 'W':\n            str2 = str2.replace(str2[i], newch, 23)\n        elif ch == 'x' or ch == 'X':\n            str2 = str2.replace(str2[i], newch, 24)\n        elif ch == 'y' or ch == 'Y':\n            str2 = str2.replace(str2[i], newch, 25)\n        elif ch == 'z' or ch == 'Z':\n            str2 = str2.replace(str2[i], newch, 26)\n        else:\n            str2 = str2.replace(str2[i], newch, 0)\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for i in str1:\n        if ord(i)>=ord(ch) and ord(i)<=ord(newch):\n            str2+=i\n        else:\n            str2+=newch\n    return str2\n    "
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # your code goes here\n    \n    return sorted(dict1.items(),key=lambda x:x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #print(dict1)\n    d = dict1.copy()\n    #print(d)\n    #print(type(d))\n    #print(d.items())\n    d.items()\n    d1 = dict(d.items())\n    d1 = sorted(d1.items(), key=lambda x: x[1])\n    #print(d1)\n    #print(type(d1))\n    #print(d1[0][0])\n    #print(d1[1][0])\n    return d1\n    \n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list_of_dict = [v for k, v in dict1.items()]\n    return list_of_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort(key = lambda x: x[1])\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda tup:tup[1])\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    #using collections module to reverse the keys\n    #the key is in reverse order\n    new_dict = dict1\n    new_dict.reverse()\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    # create a new dictionary to sort\n    sorted_dict = {}\n    \n    # iterate through the dictionary\n    for k, v in dict1.items():\n        # if the dictionary element is not present in dictionary, append it\n        if v not in sorted_dict.keys():\n            sorted_dict[v] = []\n        # if the dictionary element is present, append the values to sorted_dict\n        sorted_dict[v].append(k)\n        \n    # return sorted_dict\n    return sorted_dict\n        \n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    return sorted(dict1.items(), key=lambda item: item[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key in dict1.keys():\n        dict1[key] = sorted(dict1[key], reverse=True)\n    return dict1\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return []\n    max_num = max(nums)\n    min_num = min(nums)\n    max_value = max(max_num, min_num)\n    min_value = min(max_num, min_num)\n    return [min_value, max_value]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    big_sum = 0\n    small_sum = 0\n    for num in nums:\n        if num < 0:\n            sum = num\n            small_sum = 0\n        elif num > 0:\n            small_sum += num\n        sum += num\n    if sum == 0:\n        sum = nums[0]\n    if sum > 0:\n        big_sum = sum\n    if small_sum == 0:\n        small_sum = nums[0]\n    return big_sum, small_sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest_sum = sum(nums)\n    smallest_sum = 0\n    for i in nums:\n        if i > smallest_sum:\n            smallest_sum = i\n    return (smallest_sum, largest_sum)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest_val = nums[0]\n    smallest_val = nums[0]\n    for num in nums:\n        if num > largest_val:\n            largest_val = num\n        if num < smallest_val:\n            smallest_val = num\n    return largest_val + smallest_val\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort(reverse=True)\n    return sum(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    from functools import reduce\n    return sum([n for n in nums if n >= n**0.5]) + sum([n for n in nums if n < n**0.5])\n    \ndef longest_run(nums):\n    '''\n    Write a python function that returns the length of the longest substring in a given array.\n    '''\n    from functools import reduce\n    return reduce(lambda x, y: len(list(set(x) & set(y))), nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    \n    big_num = max(nums)\n    small_num = min(nums)\n    \n    sum_small_num = sum(nums)\n    sum_big_num = sum(map(lambda x:x*x, nums))\n    \n    return sum_big_num - sum_small_num + sum_small_num - big_num\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # 1. Smallest value\n    smallest = nums[0]\n    # 2. Smallest value\n    for n in nums:\n        if smallest < n:\n            smallest = n\n    # 3. Smallest value\n    smallest_index = 0\n    # 4. Smallest value\n    for n in nums:\n        if smallest > n:\n            smallest = n\n            smallest_index = nums.index(smallest)\n    # 5. Subtract smallest from array\n    for i in range(len(nums)):\n        nums[smallest_index] = nums[smallest_index] - smallest\n    # 6. Subtract smallest from array\n    for i in range(len(nums)):\n        nums[i] = nums[i] - smallest\n    # 7. Subtract smallest from array\n    for i in range(len(nums)):\n        nums[i] = nums[i] - smallest\n    # 8. Subtract smallest from array\n    smallest_index = 0\n    smallest = nums[0]\n    for i in range(len(nums)):\n        nums[smallest_index] = nums[smallest_index] - smallest\n        smallest_index += 1\n    return nums\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) - min(nums"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Your code here\n    return sum([sum(nums[:i+1]) for i in range(len(nums))])"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n    \n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if len(string)==0:\n        return False\n    elif string[0].islower():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower = ''.join(c.lower() for c in string)\n    return lower\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2=str1.lower()\n    if str2==str1:\n        return ''\n    else:\n        return str2\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    str2=str1.replace('\\D','')\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r'(\\W|^)([a-z]|$)', r' \\1 ', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]'\n    pattern = pattern + r'(.)'\n    return re.sub(pattern, r'\\1', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if(str1.islower()):\n        return str1.lower()\n    elif(str1.isupper()):\n        return str1.lower()\n    else:\n        return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    if(str1.isdigit()):\n        return str1\n    elif(str1.isdigit()):\n        return '0'\n    else:\n        return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    s = re.sub(r'(?<=[A-Z])[^A-Z]+(?=[A-Z])', '', str1)\n    return s\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]','', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(' ','')\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    return ''.join([i for i in str1 if not i.isalpha()])\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'(.)\\1+', r'\\1', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    return str1.lower()\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n <= 0:\n        raise ValueError('Input must be positive')\n    if n >= 10:\n        return n // 10\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return n%10  \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    sum=0\n    while (n>0):\n        sum = sum + n%10\n        n=n//10\n    if(sum==0):\n        return '0'\n    else:\n        return str(sum)\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 : return n\n    else : return int(str(n)[0])\n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 : return n\n    else : return int(str(n)[-1])\n    \ndef search(x) :\n    '''\n    Write a python function to search for a number in a list using a Python function.\n    '''\n    for i in x :\n        if i == x : return True\n    else : return False\n    \ndef is_even(x) :\n    '''\n    Write a python function to check if a given number is even or odd.\n    '''\n    if x % 2 == 0 : return True\n    else : return False\n    \ndef is_greater(x) :\n    '''\n    Write a python function to check if a given number is greater than or equal to a given number.\n    '''\n    if x > 10 : return True\n    else : return False\n    \ndef count_words(text, words) :\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    count = 0\n    words = text.split(' ')\n    for word in words :\n        if word == '' : return count\n        elif word[0] == word[-1] : return count + 1\n        else : \n            count = count + 1\n    \n    return count\n    \ndef is_even_or_odd(x) :\n    '''\n    Write a python function to check if a given number is even or odd.\n    '''\n    if x % 2 == 0 : return True\n    else : return False\n    \ndef is_even_or_odd(x) :\n    '''\n    Write a python function to check if a given number is even or odd.\n    '''\n    if x % 2 == 0 : return True\n    else : return False\n    \ndef is_multiple_of_three(x) :\n    '''\n    Write a python function to check if a given number is multiple of three.\n    '''\n    if x % 3 == 0 : return True\n    else : return False\n    \ndef is_odd(x) :\n    '''\n    Write a python function to check if a given number is odd or not.\n    '''\n    if x % 2 == 1 : return True\n    else : return False\n    \ndef is_odd_or_even(x) :\n    '''\n    Write a python function to check if a given number is odd or even.\n    '''\n    if x % 2 == 1 : return True\n    else : return False\n    \ndef is_odd_or_even(x) :\n    '''\n    Write a python function to check if a given number is odd or even.\n    '''\n    if x % 2 == 1 : return True\n    else : return False\n    \ndef is_prime(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if x < 2 : return True\n    elif x == 2 : return False\n    else :\n        for i in range(2,x):\n            if x % i == 0 : return False\n        else : return True\n            \ndef is_prime(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if x < 2 : return True\n    elif x == 2 : return False\n    else :\n        for i in range(2,x):\n            if x % i == 0 : return False\n        else : return True\n            \ndef prime_factors(x) :\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    for i in range(2,x) :\n        if x % i == 0:\n            return is_prime(i)\n    else : return False\n    \ndef is_prime_factor(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if x < 2 : return True\n    elif x == 2 : return False\n    else :\n        for i in range(2,x):\n            if x % i == 0:\n                return False\n        else : return True\n        \ndef is_prime_factor_prime(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,x) :\n        if x % i == 0:\n            return True\n    else : return False\n    \ndef is_prime_factor_prime_multiple(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,x) :\n        if x % i == 0 : return False\n    else : return True\n    \ndef is_prime_factor_prime_multiple(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,x) :\n        if x % i == 0 : return False\n    else : return True\n    \ndef is_prime_factor_multiple(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,x) :\n        if x % i == 0 : return False\n    else : return True\n    \ndef is_prime_factor_multiple(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,x) :\n        if x % i == 0 : return False\n    else : return True\n    \ndef is_prime_factor_multiple_multiple(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,x) :\n        if x % i == 0 : return False\n    else : return True\n    \ndef is_prime_factor_multiple_multiple(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,x) :\n        if x % i == 0 : return False\n    else : return True\n    \ndef is_prime_factor_multiple_multiple_multiple(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,x) :\n        if x % i == 0 : return False\n    else : return True\n    \ndef is_prime_factor_multiple_multiple_multiple(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,x) :\n        if x % i == 0 : return False\n    else : return True\n    \ndef is_prime_factor_multiple_multiple_multiple_multiple(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,x) :\n        if x % i == 0 : return False\n    else : return True\n    \ndef is_prime_factor_multiple_multiple_multiple_multiple(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,x) :\n        if x % i == 0 : return False\n    else : return True\n    \ndef is_prime_factor_multiple_multiple_multiple_multiple(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,x) :\n        if x % i == 0 : return False\n    else : return True\n    \ndef is_prime_factor_multiple_multiple_multiple_multiple(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    for i in range(2,x) :\n        if x % i == 0 : return False\n    else : return True\n    \ndef is_prime_factor_multiple_multiple_multiple_multiple(x) :\n    '''\n    Write a python function to check if a given number is prime or not.\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 0:\n        rem = n % 10\n        n = n//10\n        print(rem, end ='')\n    print(\"\\n\")\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    s = n[-1]\n    if s == '0' :\n        return '0'\n    else :\n        return n[-1]"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # your code goes here\n    if n>0 :\n        while n>0 :\n            n,r = n%10,r+1\n    else :\n        print(\"error\")\n    return r\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if type(n)!= int : \n        raise TypeError(\"please enter a valid number\")\n    if n < 0 : \n        raise ValueError(\"please enter a positive number\")\n    else :\n        return n%10\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :  \n        return 0\n    elif n == 1 :  \n        return 1\n    else :  \n        return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    i = 1\n    while i < len(list):\n        if list[i] % 2 == 0:\n            return list[i:]\n        i += 1\n    return list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    ans = [0] * len(list)\n    for i in range(len(list)):\n        ans[i] = list[i]\n    ans.sort(reverse=True)\n    return ans\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    EvenList = list\n    return EvenList[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [list[i] for i in range(0, len(list), 2)]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [x for x in list if x % 2!= 0]\n    print(odd_list)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    myList = []\n    for item in list:\n        if item % 2 == 0:\n            myList.append(item)\n    print(myList)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list: \n        if i % 2!= 0: \n            odd.append(i) \n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # do not return anything, modify the return value in-place instead.\n    # return a list that only contains the odd numbers in the list.\n    # you will need to write a helper function that takes the input list and returns the odd numbers only.\n    # you are not required to use the range function.\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list=list\n    return(list[::2])\n    \ndef IsEven(num):\n    '''\n    Write a python function which takes a number and returns True if it is even.\n    '''\n    if num%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [item for item in list if item % 2!= 0]\n    return odd_list\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = []\n    for i in range(0,n):\n        cubes.append(i**3)\n    print(cubes)\n    sum_cubes = 0\n    for j in range(0,n):\n        sum_cubes = sum_cubes + cubes[j]**3\n    print(sum_cubes)\n    return sum_cubes\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n<=0 : return 0\n    else :\n    \n        for i in range(1,n+1) :\n            cube=i**3\n            print(cube)\n            \n            \ndifference(100)"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(0,n+1) :\n        sum_of_cubes = sum_of_cubes + i * i * i\n    sum_of_cubes = sum_of_cubes - n\n    print(\"The difference between the sum of cubes of the first\",n,\"natural numbers and the sum of the first\",n,\"natural numbers is\",sum_of_cubes)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n <= 0 : \n        return 0 \n    cubes = [i**3 for i in range(n)]\n    sum = sum(cubes)\n    return sum - sum**3\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #to do\n    #def difference(self)\n    return n**3 - (n**2 + n)**3\n    "
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    cubes = [0]*n\n    for i in range(0, n):\n        total = total + cubes[i]\n        cubes[i] = cubes[i]**3\n    return total - total**3\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #Create an empty list\n    list = []\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    for i in range(1,n+1) :\n        sum = i * (i + 1)\n        sum = sum - i\n        print(sum)\n    return sum\n    \nsum = difference(6)\nprint(sum)"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = 0\n    n1 = int(n)\n    while n1 >= 1:\n        s = s + (n1**3)\n        n1 = n1 - 1\n    return s\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1) :\n        total += (i**3)\n    return total\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j]!= 1 :\n                count = count + 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N == 1 : \n        return 0\n    if (N % 2 == 0) : \n        return 0\n    else : \n        odd_pairs = 0\n        for i in range(1,N//2+1) : \n            if (A[i] & 1)!= A[i-1] : \n                odd_pairs += 1\n        return odd_pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    for i in range(N) :\n        if A[i] & 1!= 0 : \n            odd += 1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A=A[N]\n    l=0\n    for i in A : \n        if i=='0' : \n            l=l+1\n    return l\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N < 2 or N == 0 : \n        return 0\n    if A[N - 1] == A[N - 2] : \n        return 1\n    return (find_Odd_Pair(A, N - 2) + find_Odd_Pair(A, N - 1))\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(N) : \n            xor = A[i] ^ A[j] \n            if xor == i or xor == j : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1,N) : \n        for j in range(1,i+1) : \n            if (A[i]&1)!= (A[j]&1) : \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    x = 0\n    for i in range(0,N) : \n        x = x ^ A[i]\n        if x % 2 == 0 : \n            x = x ^ (x + 1)\n            x = x ^ (x + N + 1)\n    return x\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_value = 0\n    for i in range(N) :\n        xor_value = xor_value ^ A[i]\n        if(xor_value!= 0) :\n            xor_value = xor_value ^ A[N-i-1]\n    return xor_value\ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    xor_value = 0\n    for i in range(N) :\n        xor_value = xor_value ^ A[i]\n        if(xor_value == 0) :\n            xor_value = xor_value ^ A[N-i-1]\n    return xor_value\ndef print_cipher(A,N) : \n    '''\n    Prints the cipher with the given key \n    '''\n    for i in range(N) :\n        print(\"cipher_\"+str(i+1)+\":\")\n        for j in range(N) :\n            print(\"xor_\"+str(j+1)+\":\")\n            print(A[i][j], end = \"\")\n        print()\ndef encrypt_cipher(A,n,key) : \n    '''\n    Encrypts the given key, i.e. \n    '''\n    #return_cipher = [ [0]*n for i in range(n) ]\n    #for i in range(n) :\n        #for j in range(n) :\n            #if(A[i][j] == 0) :\n                #return_cipher[i][j] = -1\n            #else :\n                #return_cipher[i][j] = A[i][j]\n    #return_cipher = [[0]*n for i in range(n)]\n    #for i in range(n) :\n        #for j in range(n) :\n            #if(return_cipher[i][j] == 0) :\n                #return_cipher[i][j] = find_Odd_Pair(A,i+j)\n            #else :\n                #return_cipher[i][j] = find_Even_Pair(A,i+j)\n    #return return_cipher\n    #return return_cipher\n    #return return_cipher\n    #for i in range(n) :\n        #for j in range(n) :\n            #if(return_cipher[i][j] == 0) :\n                #return_cipher[i][j] = -1\n            #else :\n                #return_cipher[i][j] = A[i][j]\n    #return return_cipher\n    #return return_cipher\n    #return [ [0]*n for i in range(n) ]\n    #for i in range(n) :\n        #for j in range(n) :\n            #if(return_cipher[i][j] == 0) :\n                #return_cipher[i][j] = find_Odd_Pair(A,i+j)\n            #else :\n                #return_cipher[i][j] = find_Even_Pair(A,i+j)\n    #return return_cipher\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l = len(A)\n    count = 0\n    for i in range(l):\n        for j in range(i+1,l):\n            if (A[i]^A[j]) & 1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle(char):\n        if char.isupper():\n            return chr( ord(char) - 32).lower()\n        else:\n            return chr( ord(char) + 32).lower()\n    return ''.join([ toggle(c) for c in string ])\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.upper()\n        elif char.islower():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle_string(string):\n        \"\"\"\n        Write a function to toggle the case of all characters in a string.\n        \"\"\"\n        for char in string:\n            if char.islower():\n                string = string.lower()\n            elif char.isupper():\n                string = string.upper()\n            else:\n                string = string.capitalize()\n        return string\n    \n    return toggle_string(string)\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new = ''\n    for c in string:\n        if c.upper() == c:\n            new += c.lower() +''\n        elif c.lower() == c:\n            new += c.upper() +''\n        else:\n            new += c\n    return new\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    toggle = string.casefold()\n    return toggle\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.lower() == string:\n        return string\n    else:\n        return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    #create the list of characters\n    chars = list(string)\n    #create the list of cases\n    case = [False]*26\n    #loop through the list and update the list of cases\n    for i in range(len(string)):\n        if chars[i] =='':\n            case[0] = True\n        else:\n            case[ord(chars[i]) - ord('A')] = True\n    #print the list\n    print(chr(122-2-i) for i in range(len(string)))\n    #print the new list\n    print(''.join([chr(122-2-i) for i in range(len(string))]))\n    return ''.join([chr(122-2-i) for i in range(len(string))])\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.replace(\" \", \"\")[::-1]\n    \ndef main():\n    print(toggle_string('Hello world!'))\n    print(toggle_string('SOMETHING WENT WRONG!'))\n    print(toggle_string('This is a test! and this is a test!'))\n    print(toggle_string('This is a test!and this is a test!'))\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for i in string:\n        if i.islower():\n            i = i.upper()\n        elif i.isupper():\n            i = i.lower()\n        else:\n            i = i.capitalize()\n        print(i)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return (n1-n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        max_diff = n2 - n1\n    else:\n        max_diff = n1 - n2\n    diff_sum = 0\n    for digit in str(max_diff):\n        diff_sum += int(digit)\n    return diff_sum\n    \n    \nn1 = int(input(\"Enter your first number: \"))\nn2 = int(input(\"Enter your second number: \"))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_diff = [abs(n1 - n2) for n1 in range(10)]\n    return sum(digit_diff)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 >= 10 or n2 >= 10:\n        return digit_distance_nums(n1 - 1, n2 - 1)\n    else:\n        return n1 - n2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = 0\n    d2 = 0\n    for i in range(n1):\n        d1 += n1 % 10\n        n1 //= 10\n    for j in range(n2):\n        d2 += n2 % 10\n        n2 //= 10\n    return d1 - d2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    for n in range(max(n1, n2) + 1):\n        s += n - n1 - n2\n        \n    return s\n    \n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return (int(str(n1)[::-1]) - int(str(n2)[::-1]))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    a = abs(n1 - n2)\n    s = 0\n    for i in range(8):\n        s += a%10\n        a = a//10\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_of_differences = 0\n    for digit in str(n1 - n2):\n        sum_of_differences += int(digit)\n    return sum_of_differences\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(n1, n2 + 1):\n        sum += abs(n1 - i)\n    return sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # We are using the binary search method to find the max of a sub list\n    def find_max(arr):\n        l = 0\n        r = len(arr) - 1\n        max_sum = arr[0]\n        i = 1\n        while l < r:\n            mid = (l + r) // 2\n            if arr[mid] > max_sum:\n                max_sum = arr[mid]\n                i = mid\n            if arr[mid] < arr[r]:\n                r = mid\n            else:\n                l = mid + 1\n        return i\n    # Start from the beginning of the array\n    left, right = 0, len(a) - 1\n    # If the array is not empty, search the sublist in the middle\n    while left < right:\n        mid = left + (right - left) // 2\n        if a[mid] > max_sum:\n            right = mid\n            max_sum = a[mid]\n        else:\n            if a[mid] < max_sum:\n                left = mid + 1\n                max_sum = a[mid]\n            else:\n                right = mid\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # We start at the beginning to sum all the numbers.\n    # The first element of this array is the smallest possible sum of the elements before it.\n    # This is the largest possible sum before a new element, so we start the sum at a small number.\n    # There will be at most one element after the new one.\n    start = size * (size - 1) // 2\n    total = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize sum of largest sublist\n    sub_sum = -1\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < 1:\n        return 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_sum = -sys.maxsize\n    for i in range(len(a) - size + 1):\n        max_sub_sum = max(max_sub_sum, sum(a[i:i+size]))\n    return max_sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_list = [0 for _ in range(size)]\n    \n    sum = 0\n    for i in range(size):\n        sub_list[i] = a[i]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    m = 0\n    for i in range(size):\n        for j in range(size-i-1):\n            if a[i+j+1] > m:\n                m = a[i+j+1]\n    return m\ndef max_sum_sub_array(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    m = 0\n    for i in range(size):\n        for j in range(size-i-1):\n            if a[i+j+1] > m:\n                m = a[i+j+1]\n    return m\ndef selection_sort(a):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    for i in range(len(a)):\n        max_index = i\n        for j in range(i+1, len(a)):\n            if a[max_index] > a[j]:\n                max_index = j\n        a[i], a[max_index] = a[max_index], a[i]\n    return a\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n    \n    if size == 2:\n        return max(a[0], a[1])\n    \n    mid = size//2\n    return max(a[0] + max_sub_array_sum(a,mid), a[1] + max_sub_array_sum(a,mid))\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    maximum = 0\n    i = 0\n    j = 1\n    while j <= size:\n        # Initializing the maximum as current sum\n        maximum = a[i] + maximum\n        # Appending the current element of the sublist\n        a[i] += a[j]\n        # Checking for the next element of the sublist\n        if j < size and a[j] > maximum:\n            maximum = a[j]\n            i = j + 1\n        j += 1\n    return maximum\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    if len(tup1) > len(tup2):\n        return union_elements(tup2, tup1)\n    elif len(tup1) < len(tup2):\n        return union_elements(tup1, tup2)\n    else:\n        return sorted(tup1 + tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #base case \n    if len(test_tup1) == 0:\n        return test_tup2\n    if len(test_tup2) == 0:\n        return test_tup1\n    \n    #sort elements\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    \n    #get minimum and maximum\n    min = test_tup1[0]\n    max = test_tup2[0]\n    \n    #loop through and find the minimum and maximum element\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < min:\n            min = test_tup1[i]\n        if test_tup2[i] < min:\n            min = test_tup2[i]\n        if test_tup1[i] > max:\n            max = test_tup1[i]\n        if test_tup2[i] > max:\n            max = test_tup2[i]\n    \n    #return the sorted tuple\n    return (min, max)\n    \ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    #base case \n    if len(test_tup1) == 0:\n        return test_tup2\n    if len(test_tup2) == 0:\n        return test_tup1\n    \n    #sort elements\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    \n    #find intersection\n    i = 0\n    j = 0\n    k = 0\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] < test_tup2[j]:\n            i = i + 1\n        elif test_tup1[i] > test_tup2[j]:\n            j = j + 1\n        else:\n            k = k + 1\n            if j == len(test_tup2):\n                break\n            if test_tup1[i] == test_tup2[j]:\n                i = i + 1\n                j = j + 1\n    \n    if i < len(test_tup1):\n        return test_tup1[i:k+1]\n    else:\n        return test_tup2[j:k+1]\n    \ndef find_intersection(arr1, arr2):\n    '''\n    Return an intersection of the sorted elements of arr1 and arr2.\n    '''\n    #find intersection\n    intersected_arr = arr1.copy()\n    for i in arr2:\n        if i in intersected_arr:\n            intersected_arr.remove(i)\n    \n    #print the result\n    if len(intersected_arr)!= 0:\n        print(intersected_arr)\n    else:\n        print(\"no intersection\")\n    \ndef sort_by_element(arr):\n    '''\n    Sort the elements of arr and output them in sorted order.\n    '''\n    #sort elements\n    arr = sorted(arr)\n    \n    #print the sorted array\n    if len(arr) == 0:\n        print(\"no sorted array\")\n    else:\n        print(arr)\n    \ndef count_substrings(string):\n    '''\n    Find the number of substrings that occur in the given string and return them in a list.\n    '''\n    #initialize a set\n    s = set()\n    \n    #iterate through the string\n    for i in range(len(string) - 1):\n        #check if the string[i] is in the set\n        if string[i] in s:\n            #add it to the set\n            s.add(string[i])\n            #remove the current character from the string\n            string = string[:i+1] + string[i+1:]\n            #print the set\n            print(s)\n            \n        #print the set\n        print(s)\n        \n    #print the set\n    print(s)\n    \ndef count_in_order(string):\n    '''\n    Find the number of substrings that occur in the given string and return them in a list.\n    '''\n    #initialize an empty array\n    n = []\n    \n    #iterate through string\n    for i in range(len(string) - 1):\n        #check if string[i] is in the array\n        if string[i] in n:\n            #add it to the array\n            n.append(string[i])\n            #remove the current character from the string\n            string = string[:i+1] + string[i+1:]\n        #print the array\n        print(n)\n        \n    #print the array\n    print(n)\n    \ndef count_decreasing_substrings(string):\n    '''\n    Find the number of substrings that occur in the given string and return them in a list.\n    '''\n    #initialize an empty array\n    n = []\n    \n    #iterate through string\n    for i in range(len(string)):\n        #check if string[i] is in the array\n        if string[i] in n:\n            #add it to the array\n            n.append(string[i])\n            #remove the current character from the string\n            string = string[:i+1] + string[i+1:]\n        #print the array\n        print(n)\n        \n        #print the array\n        print(n)\n        \n    #print the array\n    print(n)\n    \ndef non_repeating_substrings(string):\n    '''\n    Find the number of non-repeating substrings in the given string and return them in a list.\n    '''\n    #initialize an empty list\n    n = []\n    \n    #iterate through string\n    for i in range(len(string)):\n        #check if string[i] is in the list\n        if string[i] not in n:\n            #add it to the list\n            n.append(string[i])\n            #remove the current character from the string\n            string = string[:i+1] + string[i+1:]\n        #print the list\n        print(n)\n        \n        #print the list\n        print(n)\n        \n    #print the list\n    print(n)\n    \ndef read_string(file_name):\n    '''\n    Read a string from a file and return it as a list.\n    '''\n    #read the file\n    with open(file_name, 'r') as f:\n        #read the string\n        string = f.read()\n        #return the string\n        return string\n    \ndef read_file(file_name):\n    '''\n    Read a list of strings from a file and return it as a list.\n    '''\n    #read the file\n    with open(file_name, 'r') as f:\n        #read the strings\n        strings = f.read()\n        #return the strings\n        return strings\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create empty list for union\n    list1 = []\n    # create empty list for union\n    list2 = []\n    # define a loop for all elements of tuples 1\n    for elements in test_tup1:\n        # append new element to list1\n        list1.append(elements)\n    # define a loop for all elements of tuples 2\n    for elements in test_tup2:\n        # append new element to list2\n        list2.append(elements)\n    # return the union of both lists\n    return tuple(sorted(list1+list2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return \"\".join(sorted(test_tup1 + test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create an empty dictionary\n    d1 = {}\n    for elem in test_tup1:\n        if elem in d1:\n            d1[elem] += 1\n        else:\n            d1[elem] = 1\n    for elem in test_tup2:\n        if elem in d1:\n            d1[elem] -= 1\n        else:\n            d1[elem] = -1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return (set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return None\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return (tuple(sorted(test_tup1) + sorted(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1)\n    union.update(test_tup2)\n    return sorted(union)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return 1\n    elif len(lst) == 2:\n        return 1\n    elif len(lst) == 3:\n        return 3\n    elif len(lst) == 4:\n        return 4\n    else:\n        return max(Find_Max_Length(lst[:4]), Find_Max_Length(lst[4:]) )\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # case 1 : empty list\n    if len(lst) == 0:\n        return 0\n    # case 2 : one list\n    if len(lst) == 1:\n        return 1\n    # case 3 : two lists\n    elif len(lst) == 2:\n        if lst[0] < lst[1]:\n            return 2\n        else:\n            return 1\n    # case 4 : three lists\n    elif len(lst) == 3:\n        if lst[0] < lst[1] < lst[2]:\n            return 2\n        elif lst[0] < lst[1] < lst[2]:\n            return 1\n        else:\n            return 1\n    # case 5 : four lists\n    elif len(lst) == 4:\n        if lst[0] < lst[1] < lst[2] < lst[3]:\n            return 2\n        elif lst[0] < lst[1] < lst[2] < lst[3]:\n            return 1\n        else:\n            return 1\n    # case 6 : five lists\n    elif len(lst) == 5:\n        if lst[0] < lst[1] < lst[2] < lst[3] < lst[4]:\n            return 2\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4]:\n            return 1\n        else:\n            return 1\n    # case 7 : six lists\n    elif len(lst) == 6:\n        if lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5]:\n            return 2\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5]:\n            return 1\n        else:\n            return 1\n    # case 8 : seven lists\n    elif len(lst) == 7:\n        if lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6]:\n            return 2\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6]:\n            return 1\n        else:\n            return 1\n    # case 9 : eight lists\n    elif len(lst) == 8:\n        if lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7]:\n            return 2\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7]:\n            return 1\n        else:\n            return 1\n    # case 10 : nine lists\n    elif len(lst) == 9:\n        if lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7] < lst[8]:\n            return 2\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7] < lst[8]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7] < lst[8]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7] < lst[8]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7] < lst[8]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7] < lst[8]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7] < lst[8]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7] < lst[8]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7] < lst[8]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7] < lst[8]:\n            return 1\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7] < lst["
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # The variable lst is passed as an argument to the function\n    lst_length = len(lst)\n    # If lst is empty, lst_length is 0.\n    if lst_length == 0:\n        return 0\n    # Find the longest sublist\n    longest_sublist = 0\n    # Check each index of the list for longest sublist.\n    for i in range(lst_length):\n        # Compare the current index and next index.\n        if i == lst_length - 1:\n            # If the current index is greater than the next index,\n            # then there is the largest sublist.\n            if lst[i] > lst[i+1]:\n                # If the next sublist is greater than the longest sublist,\n                # then the larger sublist is the longest sublist.\n                longest_sublist = lst[i]\n            # If the next sublist is greater than the current index,\n            # then there is no largest sublist.\n            else:\n                # Else, the current sublist is the longest sublist.\n                longest_sublist = lst[i]\n        else:\n            # If the next sublist is greater than the current index,\n            # then there is no largest sublist.\n            if lst[i] > lst[i+1]:\n                # If the current sublist is greater than the next sublist,\n                # then there is no largest sublist.\n                longest_sublist = lst[i]\n            # If the next sublist is greater than the current index,\n            # then there is no largest sublist.\n            else:\n                # Else, the current sublist is the longest sublist.\n                longest_sublist = lst[i]\n    # The longest sublist is the length of the longest sublist.\n    return longest_sublist\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    i = 0\n    while i < len(lst):\n        j = i\n        temp_list = lst[i]\n        while j < len(lst) and temp_list < lst[j]:\n            j += 1\n        max_len = max(max_len, j - i)\n        i = j\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return -1\n    elif len(lst) == 1:\n        return 1\n    elif len(lst) == 2:\n        return 1\n    elif len(lst) == 3:\n        if lst[0] == lst[1] == lst[2]:\n            return 2\n        else:\n            return 3\n    else:\n        return Find_Max_Length(lst[1:]) + Find_Max_Length(lst[:len(lst)-2]) + Find_Max_Length(lst[2:len(lst)])\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_size = len(lst)\n    lst_sum = 0\n    for i in range(lst_size):\n        lst_sum = 0\n        for j in range(lst_size):\n            lst_sum += len(lst[j])\n        if(lst_sum > lst_sum):\n            lst_sum = lst_sum\n        else:\n            lst_sum = 0\n    return lst_sum\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # # Create empty list\n    lst_max = []\n    # Initialize counter\n    i = 0\n    # Start loop\n    for i in range(0, len(lst)):\n        # End loop\n        if i == len(lst) - 1:\n            # Add current element to max list\n            lst_max.append(lst[i])\n            # Stop loop\n            break\n        # Advance to next element\n        else:\n            # Add current element to max list\n            lst_max.append(max(lst[i:i+2]))\n            # End loop\n            i += 2\n    return lst_max\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(0,len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i:j+1] > max_len:\n                max_len = lst[i:j+1]\n                \n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in lst:\n        l = len(i)\n        if l > max_length:\n            max_length = l\n    return max_length\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    split_text = re.split('(\\'|\\\")', text)\n    for i in range(len(split_text)):\n        if split_text[i].strip() == '\"' or split_text[i].strip() == \"'\":\n            split_text[i] = split_text[i].replace('\"','')\n            split_text[i] = split_text[i].replace('\\'','')\n    return split_text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    value_re = re.compile('[\\'\\\"]')\n    # Create a function to replace characters with regex pattern\n    # Regex matches '\\' followed by any character\n    value_re_sub = value_re.sub('', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = ''\n    for char in text:\n        if char == '\"':\n            result += char\n        elif char == \"'\":\n            result += char\n        elif char == \",\" or char == \".\" or char == \";\":\n            if char == \".\":\n                result += char\n            elif char == \",\":\n                result += char\n    return result.replace(\"'\", \"\")\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall('\\w+[\\'\"]?\\w+', text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        if type(text)!= str:\n            raise TypeError(\"input must be a string.\")\n        if text.lower() == \"the\":\n            return \"you\"\n        elif text.lower() == \"my\":\n            return \"your\"\n        elif text.lower() == \"myself\":\n            return \"yourself\"\n        elif text.lower() == \"me\":\n            return \"me\"\n        elif text.lower() == \"you\":\n            return \"I\"\n        elif text.lower() == \"you're\":\n            return \"i\"\n        elif text.lower() == \"you've\":\n            return \"i have\"\n        elif text.lower() == \"us\":\n            return \"everyone\"\n        else:\n            return text\n    except TypeError as e:\n        print(\"Invalid value:\", e)\n        return None\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\\w+', text)\n    if len(values) > 0:\n        return values\n    else:\n        return None\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.search('(?<=\\\")[^\\'\"/\\\\]*(?=\")', text)\n    if match is not None:\n        text = text[:match.start()] + text[match.end():]\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = re.sub(r'\"([^\"]+)\"', r'\\1', text)\n    text = re.sub(r'([^\\s]+)', r'\\1', text)\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"', \"\")\n    text = text.replace(\"'\", \"\")\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    for match in re.finditer('(?<=\\'\").finditer(text):\n        match = match.start()\n        if match == 0:\n            pass\n        elif match < match + 1:\n            values.append(text[match:match + 2])\n        else:\n            values.append(text[match + 1:match + 2])\n    return values\n    \ndef format_text(text):\n    '''\n    Write a function to format a string into a list of words.\n    '''\n    return text.split()\n    \ndef format_values(values):\n    '''\n    Write a function to format a list of values into a string.\n    '''\n    return''.join(values)\n    \ndef list_to_text(items):\n    '''\n    Write a function to format a list of items into a string.\n    '''\n    return ', '.join(items)\n    \ndef list_to_values(values):\n    '''\n    Write a function to format a list of values into a string.\n    '''\n    return ', '.join(values)\n    \ndef find_list(item, item_list):\n    '''\n    Write a function to find an item in a list of items.\n    '''\n    for item_tuple in item_list:\n        if item_tuple[0] == item:\n            return item_tuple\n    return False\n    \ndef find_value(item, value_list):\n    '''\n    Write a function to find an item in a list of values.\n    '''\n    for value_tuple in value_list:\n        if value_tuple[0] == item:\n            return value_tuple\n    return False\n    \ndef count_list(value_list, item):\n    '''\n    Write a function to count the number of occurrences of an item in a list.\n    '''\n    count = 0\n    for value_tuple in value_list:\n        if value_tuple[0] == item:\n            count += 1\n    return count\n    \ndef remove_list(value_list, item):\n    '''\n    Write a function to remove an item from a list.\n    '''\n    for value_tuple in value_list:\n        if value_tuple[0] == item:\n            value_list.remove(value_tuple)\n    return value_list\n    \ndef remove_value(value_list, item):\n    '''\n    Write a function to remove an item from a list.\n    '''\n    for value_tuple in value_list:\n        if value_tuple[0] == item:\n            value_list.remove(value_tuple)\n    return value_list\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                c+=1\n    return c\narr = list(map(int, input().split()))\nprint(count_Pairs(arr,len(arr))"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    res = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j] and i!= j:\n                res.append((i,j))\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr_set = set(arr)\n    count = 0\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter = 0\n    for i in arr:\n        for j in arr:\n            if(i!= j):\n                if(i == j):\n                    counter += 1\n    return counter\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if not arr:\n        return 0\n    total = 0\n    a = arr[0]\n    for i in range(1,len(arr)):\n        total += (arr[i] - arr[i-1])\n    return total//2\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # using a loop for length of the list\n    # using a nested loop to print it\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr[i]!= arr[j]):\n                count = count + 1\n    # print(count)\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j] and arr[i]!=arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    unique_list = set(arr)\n    l = len(unique_list)\n    d = {}\n    for i in range(l):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    print(d)\n    ans = 0\n    for i in range(n):\n        if arr[i] in d:\n            ans += (d[arr[i]]-1)\n    return ans\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    chars = []\n    for char in word: \n        chars.append(char)\n    return chars\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    char = ''\n    for c in word:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            char = char + c\n    return char\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if word == \"\":\n        return ()\n    if len(word) == 1:\n        return (word, 1)\n    for char in word:\n        if char in [\" \",\".\"]:\n            new_word, num = split(word[:-1])\n            new_word = new_word + char + new_word\n            return (new_word, num+1)\n    else:\n        return (word, 1)\n    \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # your code goes here\n    if len(word) == 0:\n        return word\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if len(word) < 1: \n        return ''\n    else:\n        return word[0]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [x for x in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    lst = []\n    word = word.lower()\n    for i in range(len(word)):\n        lst.append(word[i])\n    return lst\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum = sum + n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n<=0:\n        return 0\n    else:\n        return n%10 + sum_digits(n//10)\n    \nprint(sum_digits(int(input())))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    # Make a sum of digits of n\n    sum = 0\n    \n    # Get the length of the number\n    len = len(str(n))\n    \n    # Start at the first number\n    cur = 1\n    \n    # Loop through the number and add the digit\n    while n!= 0:\n        n = n // 10\n        sum += cur\n        cur *= 10\n    \n    # Return the number of digits\n    return su"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_digits = 0\n    while n!= 0:\n        sum_digits += n % 10\n        n = n // 10\n    return sum_digits\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not n:\n        return 0\n    return int(str(n)[0])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if type(n) is not int:\n        return 0\n    if n==0:\n        return 0\n    if n%10==0:\n        return n\n    summ=0\n    while n>0:\n        summ+=n%10\n        n//=10\n    return summ\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n==0:\n        return n\n    return sum_digits(n//10) + n%10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n:\n        s = s*10 + n % 10\n        n = n // 10\n    return s\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i = 0\n    j = len(list1) - 1\n    while i < j:\n        if list1[i] > list1[j]:\n            return True\n        else:\n            i += 1\n    return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    # verifying the length of the list\n    len_list = len(list1)\n    if len_list == 0:\n        return True\n    else:\n        # making it easier to access the value of the first element of the list\n        # and assign it to the variable \"first\"\n        first = list1[0]\n        for i in range(len_list-1):\n            if list1[i] > first:\n                return False\n            first = list1[i]\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Declare empty variable\n    sorted_list = []\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted = True\n    for i in range(0, len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            sorted = False\n    return sorted\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i=0\n    while i<len(list1):\n        if list1[i]<list1[i+1]:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    print(\"The given list is sorted?\")\n    print(list1)\n    for i in range(len(list1)):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sortlist = sorted(list1)\n    return sortlist\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] > list1[j]:\n                return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag = True\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Empty dictionary\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n    for i in range(0,length):\n        list.append({})\n    return list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        d = {}\n        d['age'] = ''\n        d['name'] = ''\n        d['address'] = ''\n        d['email'] = ''\n        d['password'] = ''\n        l.append(d)\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Use {} to store dictionary\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for x in range(0, length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list1 = []\n    for _ in range(length):\n        list1.append({})\n    return list1\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Empty dictionary\n    empty = {}\n    # Iterate over range\n    for x in range(length):\n        # Create empty dictionary\n        empty[x] = {}\n        # Create empty list\n        empty[x] = []\n    return empty\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # if list1 is not empty\n    if list1:\n        # split each element of the list into its substrings\n        for i in range(0, len(list1)):\n            # split each element of the list into its substrings\n            for j in range(0, len(list1[i])):\n                # insert new element into list\n                list1[i].insert(j, str(list1[i][j]))\n            # add index of sublist to list1\n            list1[i] = list1[i][:-1]\n            # delete extra elements from list1\n            list1[i] = list1[i][1:]\n        \n    # return list1\n    return list1\n        "
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublists_by_sublist(list_of_lists):\n        # For each sublist, sort its elements in the same way as the input list\n        for i in range(len(list_of_lists)):\n            for j in range(len(list_of_lists[i])):\n                list_of_lists[i][j] = str(list_of_lists[i][j])\n        return list_of_lists\n    return sort_sublists_by_sublist(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def recur(sublist, sl, sl_len):\n        if sl_len == 1:\n            return sublist\n        else:\n            if len(sublist) == 1:\n                return sublist\n            else:\n                if sl[0] > sublist[0]:\n                    return recur(sublist[1:], sl[1:], sl_len - 1)\n                else:\n                    return recur(sublist[1:], sl, sl_len - 1)\n    return recur(list1, list1, len(list1) - 1)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO: Implement this function\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: x[0])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l = len(list1)\n    if l == 0:\n        return []\n    if l == 1:\n        return list1\n    \n    i = 0\n    arr = []\n    while i < l:\n        arr.append([])\n        arr[i].append(list1[i][0])\n        arr[i].append(list1[i][1])\n        i+=1\n    \n    arr.sort()\n    return arr\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_recursive(lst, reverse = False):\n        if len(lst) == 0:\n            return lst\n        else:\n            lst_tmp = []\n            for i in lst:\n                for j in i:\n                    lst_tmp.append(j)\n            if reverse:\n                lst_tmp.sort(reverse = True)\n            else:\n                lst_tmp.sort()\n            lst = lst_tmp\n            return sort_recursive(lst, reverse = True)\n    return sort_recursive(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #loops through each element in list\n    for i in range(len(list1)):\n        #loops through each sublist in list1\n        for j in range(len(list1[i])):\n            #extracts value from string and inserts into list1\n            #sublist\n            list1[i][j] = list1[i][j][:len(list1[i][j])]\n            list1[i][j] = list1[i][j] + '$'\n            #insert value into list\n            list1[i][j] = list1[i][j] + list1[i][j][len(list1[i][j])]\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublists_helper(list_of_lists, sub_list_1):\n        # your code here\n        sub_list_2 = []\n        for sub_list in sub_list_1:\n            for sub_list_2 in sub_list:\n                sub_list_2.append(sub_list_2)\n            sub_list_2.sort()\n            for i in range(len(sub_list)):\n                for j in range(len(sub_list[i])):\n                    if sub_list[i][j] not in sub_list_2[i]:\n                        sub_list_2.remove(sub_list_2[i])\n        for sub_list in sub_list_2:\n            sub_list.sort()\n        return sub_list_2\n    return sort_sublists_helper(list1, list1)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    count = 0\n    new_list = []\n    new_list_2 = []\n    for item in nums:\n        if item not in nums:\n            new_list.append(item)\n            count += 1\n        else:\n            new_list_2.append(item)\n    print(\"The number of unique numbers in given list: \", count)\n    print(\"The numbers in the given list: \", new_list)\n    print(\"The numbers in the given list after removing duplicates: \", new_list_2)\n    \ndef three_largest_numbers(nums):\n    '''\n    Write a python function to find the largest three numbers in a given list of numbers.\n    '''\n    nums_3 = []\n    for num in nums:\n        if num >= 3:\n            nums_3.append(num)\n    print(\"The largest three numbers in given list: \", nums_3)\n    \ndef four_largest_numbers(nums):\n    '''\n    Write a python function to find the largest four numbers in a given list of numbers.\n    '''\n    nums_4 = []\n    for num in nums:\n        if num >= 4:\n            nums_4.append(num)\n    print(\"The largest four numbers in given list: \", nums_4)\n    \ndef five_largest_numbers(nums):\n    '''\n    Write a python function to find the largest five numbers in a given list of numbers.\n    '''\n    nums_5 = []\n    for num in nums:\n        if num >= 5:\n            nums_5.append(num)\n    print(\"The largest five numbers in given list: \", nums_5)\n    \ndef six_largest_numbers(nums):\n    '''\n    Write a python function to find the largest six numbers in a given list of numbers.\n    '''\n    nums_6 = []\n    for num in nums:\n        if num >= 6:\n            nums_6.append(num)\n    print(\"The largest six numbers in given list: \", nums_6)\n    \ndef ten_largest_numbers(nums):\n    '''\n    Write a python function to find the largest ten numbers in a given list of numbers.\n    '''\n    nums_10 = []\n    for num in nums:\n        if num >= 10:\n            nums_10.append(num)\n    print(\"The largest ten numbers in given list: \", nums_10)\n    \ndef eleven_largest_numbers(nums):\n    '''\n    Write a python function to find the largest eleven numbers in a given list of numbers.\n    '''\n    nums_11 = []\n    for num in nums:\n        if num >= 11:\n            nums_11.append(num)\n    print(\"The largest eleven numbers in given list: \", nums_11)\n    \ndef twelve_largest_numbers(nums):\n    '''\n    Write a python function to find the largest twelve numbers in a given list of numbers.\n    '''\n    nums_12 = []\n    for num in nums:\n        if num >= 12:\n            nums_12.append(num)\n    print(\"The largest twelve numbers in given list: \", nums_12)\n    \ndef thirteen_largest_numbers(nums):\n    '''\n    Write a python function to find the largest thirteen numbers in a given list of numbers.\n    '''\n    nums_13 = []\n    for num in nums:\n        if num >= 13:\n            nums_13.append(num)\n    print(\"The largest thirteen numbers in given list: \", nums_13)\n    \ndef fourteen_largest_numbers(nums):\n    '''\n    Write a python function to find the largest fourteen numbers in a given list of numbers.\n    '''\n    nums_14 = []\n    for num in nums:\n        if num >= 14:\n            nums_14.append(num)\n    print(\"The largest fourteen numbers in given list: \", nums_14)\n    \ndef fifteen_largest_numbers(nums):\n    '''\n    Write a python function to find the largest fifteen numbers in a given list of numbers.\n    '''\n    nums_15 = []\n    for num in nums:\n        if num >= 15:\n            nums_15.append(num)\n    print(\"The largest fifteen numbers in given list: \", nums_15)\n    \ndef sixteen_largest_numbers(nums):\n    '''\n    Write a python function to find the largest sixteen numbers in a given list of numbers.\n    '''\n    nums_16 = []\n    for num in nums:\n        if num >= 16:\n            nums_16.append(num)\n    print(\"The largest sixteen numbers in given list: \", nums_16)\n    \ndef seventeen_largest_numbers(nums):\n    '''\n    Write a python function to find the largest seventeen numbers in a given list of numbers.\n    '''\n    nums_17 = []\n    for num in nums:\n        if num >= 17:\n            nums_17.append(num)\n    print(\"The largest seventeen numbers in given list: \", nums_17)\n    \ndef eight_largest_numbers(nums):\n    '''\n    Write a python function to find the largest eight numbers in a given list of numbers.\n    '''\n    nums_18 = []\n    for num in nums:\n        if num >= 18:\n            nums_18.append(num)\n    print(\"The largest eight numbers in given list: \", nums_18)\n    \ndef nine_largest_numbers(nums):\n    '''\n    Write a python function to find the largest nine numbers in a given list of numbers.\n    '''\n    nums_19 = []\n    for num in nums:\n        if num >= 19:\n            nums_19.append(num)\n    print(\"The largest nine numbers in given list: \", nums_19)\n    \ndef ten_largest_numbers(nums):\n    '''\n    Write a python function to find the largest ten numbers in a given list of numbers.\n    '''\n    nums_20 = []\n    for num in nums:\n        if num >= 20:\n            nums_20.append(num)\n    print(\"The largest ten numbers in given list: \", nums_20)\n    \ndef eleven_largest_numbers(nums):\n    '''\n    Write a python function to find the largest eleven numbers in a given list of numbers.\n    '''\n    nums_21 = []\n    for num in nums:\n        if num >= 21:\n            nums_21.append(num)\n    print(\"The largest eleven numbers in given list: \", nums_21)\n    \ndef twelve_largest_numbers(nums):\n    '''\n    Write a python function to find the largest twelve numbers in a given list of numbers.\n    '''\n    nums_22 = []\n    for num in nums:\n        if num >= 22:\n            nums_22.append(num)\n    print(\"The largest twelve numbers in given list: \", nums_22)\n    \ndef thirteen_largest_numbers(nums):\n    '''\n    Write a python function to find the largest thirteen numbers in a given list of numbers.\n    '''\n    nums_23 = []\n    for num in nums:\n        if num >= 23:\n            nums_23.append(num)\n    print(\"The largest thirteen numbers in given list: \", nums_23)\n    \ndef fourteen_largest_numbers(nums):\n    '''\n    Write a python function to find the largest fourteen numbers in a given list of numbers.\n    '''\n    nums_24 = []\n    for num in nums:\n        if num >= 24:\n            nums_24.append(num)\n    print(\"The largest fourteen numbers in given list: \", nums_24)\n    \ndef fifteen_largest_numbers(nums):\n    '''\n    Write a python function to find the largest fifteen numbers in a given list of numbers.\n    '''\n    nums_25 = []\n    for num in nums:\n        if num >= 25:\n            nums_25.append(num)\n    print(\"The largest fifteen numbers in given list: \", nums_25)\n    \ndef sixteen_largest_numbers(nums):\n    '''\n    Write a python function to find the largest sixtee"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #nums=num_list\n    #l=len(nums)\n    \n    #i=0\n    #j=0\n    #while(j<l):\n        #while(i<l and nums[i]!=nums[j]):\n            #i+=1\n            #j+=1\n    #print(j)\n    return j\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # sort lists\n    nums.sort()\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Solution 1 - O(n)\n    # get all the numbers from inputted list\n    list_numbers = []\n    for num in nums:\n        list_numbers.append(num)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_nums = []\n    for i in range(len(nums)):\n        if nums[i] not in new_nums:\n            new_nums.append(nums[i])\n    return new_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # To store each element\n    num_list = list()\n    for elem in nums:\n        num_list.append(elem)\n    # set of unique number of elements\n    dup_num = set()\n    # loop through the list\n    for elem in num_list:\n        # if the element is duplicate\n        if elem in dup_num:\n            # remove duplicate elements\n            dup_num.remove(elem)\n            # add the element to the new set\n            num_list.remove(elem)\n    return num_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    duplicate_numbers = []\n    for num in nums:\n        if num not in duplicate_numbers:\n            duplicate_numbers.append(num)\n    return duplicate_numbers\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    new = []\n    \n    for i in nums:\n        \n        if i not in new:\n            new.append(i)\n        \n    return new\n    \n    \nprint(two_unique_nums([1,2,3,4,5,5,5])"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(nums)\n    if len(nums) == 1:\n        return nums\n    else:\n        ans = [i for i in nums if nums.count(i) == 1]\n        return [i for i in nums if i not in ans]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # YOUR CODE HERE\n    for num in nums:\n        if num in nums:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create list to return\n    unique_data = []\n    for item in list_data:\n        if item not in unique_data:\n            unique_data.append(item)\n    return len(unique_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    count = {}\n    for item in list_data:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] = count[item] + 1\n    return sorted(count.keys())\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in range(0,len(list_data)):\n        unique_list.append(list_data[i])\n    product = 1\n    for j in range(0,len(unique_list)):\n        product *= int(unique_list[j])\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_list = []\n    for i in list_data:\n        product_list.append(i[0])\n    product = 1\n    for j in set(product_list):\n        product = product * int(j)\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    print(f'Unique product: {sum(list_data)}')\n    \n    \ndef remove_duplicate_items(list_data):\n    '''\n    Write a python function to remove duplicate items from a given list.\n    '''\n    unique_list = []\n    print('Unique list:',unique_list)\n    \n    for item in list_data:\n        if item not in unique_list:\n            unique_list.append(item)\n            \n    print('Uniqe list:',unique_list)\n    \n    return unique_list\n    \n    \ndef main():\n    \n    '''\n    1. Initialise a list containing 7 numbers\n    2. Loop through the list to calculate the product\n    3. If the product is greater than 3 return the product\n    4. If the product is less than 3 return the product\n    5. If the product is greater than 5 return the product\n    6. If the product is less than 5 return the product\n    7. Return the new list with only the products less than 5\n    '''\n    \n    \n    list_data = [4,3,2,5,3,2,5]\n    print(list_data)\n    \n    unique_product(list_data)\n    \n    print(remove_duplicate_items(list_data))\n    \n    \nmain("
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = 0\n    for i in list_data:\n        if i not in list_data:\n            unique_product += 1\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    print(\"Unique product of the given list:\",list_data)\n    # user_input = int(input(\"Enter a positive integer: \"))\n    # u = list_data[0]\n    # u = u*user_input\n    # print(\"Product of:\",u)\n    # list_data[0] = u\n    # unique_product(list_data)\n    #\n    # return list_data\n    return 1\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for n in list_data:\n        product = product * n\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create an empty list\n    unique_list = []\n    # iterate through the list\n    for i in range(len(list_data)):\n        # iterate through the list\n        for j in range(len(list_data)):\n            # if the current item is unique, add it to the list\n            if list_data[i] == list_data[j]:\n                unique_list.append(list_data[j])\n    # return the unique list\n    return unique_list\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if not list_data:\n        return 0\n    elif len(list_data) == 1:\n        return list_data[0]\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (r**2)*(h**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    print(\"Enter r: \")\n    r=float(input())\n    print(\"Enter h: \")\n    h=float(input())\n    A= math.pi * r * h\n    print(\"Surface area of the cylinder: \" + str(A))\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*np.pi*r**2*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = h**2 * (r**2) * 3.14159\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*h*np.pi*(r**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a=2*r*h\n    return a\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #return r * h\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 4*(r**2)*h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r1 = int(r)\n    h1 = int(h)\n    s1 = ((3.14159*r1**2)*h1**2)\n    return s1\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 0.5*pi*r**2*h\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #The B is used to compare the length of the list.\n    c = len(B)\n    if len(A) < c:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return(A == B[0:len(B)]) or (len(A) == 0 or B[0]!= A[0])\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i]==B[j]:\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    a=len(A)\n    for i in range(0,a):\n        if A[i] in B:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(A==[] or B==[]): \n        return True\n    elif(len(A)==len(B) and is_Sub_Array(A,B[1:])==True): \n        return True\n    else: \n        return False \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # code here\n    B = set(B)\n    if(len(A) == len(B)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    result = True\n    for i in range(0,len(A)):\n        if A[i:i+len(B)]!= B:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(A[i] == B[i] for i in range(len(A)))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not isinstance(A,list):\n        raise TypeError(\"A is not a list\")\n    if not isinstance(B,list):\n        raise TypeError(\"B is not a list\")\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n == 1): \n        return 1\n    else: \n        return n % 10 + last_Digit_Factorial(n // 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        return -1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact = fact * i\n        return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    x=n\n    while x!= 0:\n        n = x % 10\n        x = x // 10\n    return n\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(n):\n        fact = fact * i + 1\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        print(\"Please enter a positive number.\") \n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return n * last_Digit_Factorial(n - 1) \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n): \n        factorial *= i \n    return factorial \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==1: return 1\n    elif n==0: return 0\n    else:\n        f=1\n        for i in range(n-1,0,-1):\n            f*=i\n        return f"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last = 0\n    for i in range(n):\n        last += 1\n        if last % 3 == 0:\n            factorial = 3\n        elif last % 5 == 0:\n            factorial = 5\n        elif last % 3 == 1:\n            factorial = 3\n        elif last % 5 == 1:\n            factorial = 5\n        else:\n            factorial = 6\n    return factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(n):\n        factorial *= (i+1)\n    return factorial \n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i] + list2[i] + list3[i]\n    return list1\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # TO DO: complete this function\n    return(list1+list2+list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    lst_of_nums = []\n    lst_of_nums.append(list1[0])\n    lst_of_nums.append(list1[1])\n    lst_of_nums.append(list1[2])\n    lst_of_nums.append(list2[0])\n    lst_of_nums.append(list2[1])\n    lst_of_nums.append(list2[2])\n    lst_of_nums.append(list3[0])\n    lst_of_nums.append(list3[1])\n    lst_of_nums.append(list3[2])\n    return lst_of_nums\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleave=[]\n    if len(list1)!=len(list2):\n        raise ValueError('The length of list1 must be equal to the length of list2')\n    for index,num in enumerate(list1):\n        if index==0:\n            interleave.append(num)\n        else:\n            interleave.append(list3[num-1]+list3[num])\n    return interleave\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1.extend(list2)\n    list3.extend(list4)\n    list3.extend(list5)\n    return list3\n    \n    \nlist1 = [1,2,3]\nlist2 = [4,5,6]\nlist3 = [7,8,9]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4=[]\n    list4.extend(list1)\n    list4.extend(list2)\n    list4.extend(list3)\n    return list4\n    \n    \ndef combine_lists(list1,list2,list3):\n    '''\n    Write a function to combine 3 lists into a single flat list.\n    '''\n    list4=[]\n    list4.extend(list1)\n    list4.extend(list2)\n    list4.extend(list3)\n    return list4\n    \n    \ndef reverse(list):\n    '''\n    Write a function to print the list in reverse order without using any extra space.\n    '''\n    for i in range(len(list)-1,-1,-1):\n        print(list[i],end='')\n    return\n    \n    \ndef add_numbers(list1,list2,list3):\n    '''\n    Write a function to add numbers together.\n    '''\n    for i in range(len(list1)):\n        list1[i]+=list2[i]\n        return\n    return\n    \n    \ndef concatenate_lists(list1,list2):\n    '''\n    Write a function to concatenate 2 lists.\n    '''\n    for i in range(len(list1)):\n        list1[i]+=list2[i]\n        return\n    return\n    \n    \ndef make_ordered(list1):\n    '''\n    Write a function to make the list in an ordered order.\n    '''\n    for i in range(len(list1)):\n        if list1[i]<list1[i+1]:\n            list1[i],list1[i+1]=list1[i+1],list1[i]\n        else:\n            continue\n        \n        \n        \ndef sort_lists(list1):\n    '''\n    Write a function to sort the list using insertion sort.\n    '''\n    for i in range(len(list1)-1):\n        j=i\n        while j>0 and list1[j]<list1[j-1]:\n            list1[j],list1[j-1]=list1[j-1],list1[j]\n            j-=1\n            \n    return list1\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # return a 3D list of lists\n    return list(zip(*list3))\n    "
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) or j < len(list2) or k < len(list3):\n        if i < len(list1):\n            result.append(list1[i])\n            i += 1\n        elif j < len(list2):\n            result.append(list2[j])\n            j += 1\n        elif k < len(list3):\n            result.append(list3[k])\n            k += 1\n        else:\n            break\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4 = []\n    #iterate through each list\n    for i in range(len(list1)):\n        #add the elements from both lists to a new list\n        list4.append(list1[i]+list2[i]+list3[i])\n    return list4\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    if len(list1) == len(list2) and len(list1) == len(list3):\n        \n        # We can pass the lists to the function.\n        # The first argument of the function is the first argument to the function and the second argument to the function is the second argument to the function\n        return list(list1) + list(list2) + list(list3)\n    else:\n        return None\n    "
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    l1, l2 = len(test_tup1), len(test_tup2)\n    diss_list = []\n    for i in range(l1):\n        if test_tup1[i]!= test_tup2[i]:\n            diss_list.append(test_tup1[i])\n    return diss_list\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Hint: You can use tuples() to create a tuple from a list of\n    # strings or lists.\n    return test_tup1[0]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if (test_tup1[i]!= test_tup2[j]) and (test_tup1[i] not in dissimilar) and (test_tup2[j] not in dissimilar):\n                dissimilar.append(test_tup1[i])\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #TODO\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #Test if the tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        return []\n    #If the length of the two tuples is not the same, return an empty list.\n    if len(test_tup1)!= len(test_tup2):\n        return []\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    test_list = list()\n    test_tup = tuple()\n    \n    # get both test tuples, for multiple test tuples\n    test_list = list(test_tup1) + list(test_tup2)\n    \n    # concatenate them together into a tuple\n    test_tup = tuple(test_list)\n    \n    # convert to int\n    test_tup = int(test_tup)\n    \n    # if there are two tuples, a tuple may contain more than two elements\n    if len(test_tup) > 1:\n        # if they are greater than two, return all the other elements\n        for i in range(0, len(test_tup) - 1):\n            if test_tup[i] > test_tup[i + 1]:\n                test_tup = test_tup[:i] + test_tup[i + 1:]\n    # if there are only two tuples, return only the element\n    elif len(test_tup) == 1:\n        test_tup = test_tup[0]\n    \n    # return the tuple\n    return test_tup"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar.append(i)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    d = {}\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in d:\n            d[test_tup1[i]].append(test_tup2[i])\n        else:\n            d[test_tup1[i]] = [test_tup2[i]]\n    return d\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] in test_tup1:\n            continue\n        else:\n            dissimilar_list.append(test_tup1[i])\n            dissimilar_list.append(test_tup2[i])\n    return dissimilar_list\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_list = [x for x in test_tup1]\n    test_list.extend([x for x in test_tup2])\n    result = []\n    for item in test_list:\n        if item not in result:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple, [0])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #first take the elements from the tuple and remove them\n    odd_elements=test_tuple[0]\n    for i in range(len(test_tuple)):\n        if(test_tuple[i]%2==0):\n            odd_elements=odd_elements+test_tuple[i]\n    \n    #call function \n    even_fnc(odd_elements)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple, lambda tup: [item for item in tup if item % 2 == 0])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # TODO: Write the function that will return a new tuple of even, odd and mixed. \n    # NOTE: Assume that even_fnc and odd_fnc are not called.\n    \n    even_odd, odd_even = 0, 0\n    even_odd_mixed, odd_even_mixed = 0, 0\n    for i in range(len(test_tuple)):\n        if test_tuple[i] % 2 == 0:\n            even_odd_mixed += 1\n        else:\n            odd_even_mixed += 1\n        if even_odd == 0:\n            even_odd = odd_even_mixed\n        elif odd_even == 0:\n            odd_even = even_odd_mixed\n    even_odd, odd_even = even_odd/2, odd_even/2\n    if even_odd == odd_even:\n        even_odd = 0\n    return even_odd, odd_even, even_odd_mixed, odd_even_mixed\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc = even_fnc(test_tuple)\n    # Make a variable to keep the odd elements of the nested tuple\n    odd_elements = []\n    for element in test_tuple: \n        if element % 2 == 0: \n            odd_elements.append(element)\n    # Return the even elements\n    return (even_fnc, odd_elements)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple, even_fnc)\n    even_tuple = test_tuple\n    while any(i>0 for i in even_fnc(even_tuple, even_fnc)):\n        even_fnc(even_tuple, even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple, lambda x, y: (x[0] - x[1] - y[0], x[1] - y[1]))\n    return tuple(map(lambda x: x[0] - x[1], test_tuple))\n    "
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_ind = []\n    test_tuple = list(test_tuple)\n    for i in range(len(test_tuple)):\n        if even_fnc(test_tuple[i]) is not None:\n            even_ind.append(i)\n    return even_ind\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_count = 0\n    for el in test_tuple: \n        if el % 2 == 0: \n            even_count += 1\n    test_tuple = (even_fnc(*test_tuple))\n    if even_count: \n        for el in test_tuple: \n            if el % 2!= 0: \n                even_count -= 1\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) == 2: \n        even_fnc(test_tuple) \n    else: \n        if test_tuple[0] == test_tuple[1]:\n            even_fnc(test_tuple[:-1]) \n        else: \n            even_fnc(test_tuple[1:]) \n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*(s+1)) * (b+1) / 2\n    \nprint(surface_Area(3,8))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if (b < 0):\n        raise Exception(\"Input b should be positive.\")\n    if (s < 0):\n        raise Exception(\"Input s should be positive.\")\n    return b*s*(s-1)/2\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # print(\"sq_pyramid.py\",b,s)\n    if s < b:\n        print(\"Error\")\n    elif b == s:\n        return s\n    else:\n        return (b*b)+(s*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=0\n    for i in range(len(b)-1):\n        area+=b[i]*b[i+1]\n    area+=b[0]*b[-1]\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (s**2)*b\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Your code here\n    area=0\n    i=1\n    while(i<=b):\n        j=1\n        while(j<=s):\n            area=area+((i*j)**2)\n            j=j+1\n        i=i+1\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    S=b*(s+1)\n    for i in range(s,0,-1):\n        S=S-(i*b)\n    return S\ndef point_dist(P1, P2): \n    '''\n    Write a python function that calculates the distance between two points \n    on a plane using the given coordinates.\n    '''\n    import math\n    d = (P2[0]-P1[0])**2 + (P2[1]-P1[1])**2\n    return math.sqrt(d)\ndef prnt_matrix(A):\n    '''\n    Write a python function that prints a matrix with dimensions n by n, \n    where n is the number of rows.\n    '''\n    for i in range(len(A)):\n        for j in range(len(A[i])):\n            print(A[i][j], end=\" \")\n        print()\ndef get_dist(P1,P2):\n    '''\n    Write a python function that calculates the distance between two points on a plane using the given coordinates.\n    '''\n    return math.sqrt((P1[0]-P2[0])**2 + (P1[1]-P2[1])**2)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if s > 0:\n        a = (b * (b + 1)) // 2\n        print(f\"Area of Square Pyramid is: {a}\")\n    elif s == 0:\n        print(f\"Area of Square Pyramid is: {b}\")\n    else:\n        print(\"Invalid Input\")\n        \nsurface_Area(4,5)\nsurface_Area(4,4)\nsurface_Area(4,3"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)*(s-1)*1.5\ndef canBePlated(b,s):\n    '''\n    Write a python function to check whether a pyramid can be plated by a given base edge and height.\n    '''\n    return (b>=3 and b<=5 and s>=1 and s<=3)\ndef isValidSolution(b,s):\n    '''\n    Write a python function to check if a pyramid is valid solution\n    '''\n    return (b>=3 and b<=5 and s>=1 and s<=3) or (b>=5 and b<=6 and s>=1 and s<=3)\ndef isValidSolutionConvergence(b,s):\n    '''\n    Write a python function to check if a pyramid is valid solution.\n    '''\n    return (b>=3 and b<=5 and s>=1 and s<=3) or (b>=5 and b<=6 and s>=1 and s<=3) or (b>=6 and b<=7 and s>=1 and s<=3)\ndef isValidSolutionImperfect(b,s):\n    '''\n    Write a python function to check if a pyramid is valid solution.\n    '''\n    return (b>=3 and b<=5 and s>=1 and s<=3) or (b>=5 and b<=6 and s>=1 and s<=3) or (b>=6 and b<=7 and s>=1 and s<=3)\ndef isValidSolutionPure(b,s):\n    '''\n    Write a python function to check if a pyramid is valid solution.\n    '''\n    return (b>=3 and b<=5 and s>=1 and s<=3) or (b>=5 and b<=6 and s>=1 and s<=3) or (b>=6 and b<=7 and s>=1 and s<=3) or (b>=7 and b<=8 and s>=1 and s<=3)\ndef solve_with_valid_solution(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_convergence(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_imperfect(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_pure(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_pure_convergence(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_impossible(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_pure_imperfect(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_pure_imperfect_convergence(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_imperfect_pure(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_impossible_pure(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_impossible_pure_convergence(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_imperfect_pure_convergence(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_imperfect_pure_imperfect(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_imperfect_pure_imperfect(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_imperfect_pure_imperfect_convergence(b,s):\n    '''\n    Write a python function to solve a pyramid by valid solution.\n    '''\n    return surface_Area(b,s) >= surface_Area(4,4) * surface_Area(1,1) * surface_Area(2,2) * surface_Area(3,3) * surface_Area(4,4)\ndef solve_with_valid_solution_impossible_pure_imperfect_convergence(b,s):\n    '''\n    Writ"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 is None:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    \n    for key,value in dict1.items():\n        if value == \"\":\n            return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1)==0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1)==0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    #define the base cases\n    if num == 0 or num == 1:\n        return num\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 0\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    # Your code here\n    # Variables\n    n = num\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    ans = 1\n    i = 2\n    j = 1\n    while i < num:\n        ans += j\n        i += 1\n        j += 1\n    return ans\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = 3\n    count = 1\n    while n <= num:\n        count += 1\n        n += 2 * count\n    return n\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    x = [0,1,1,2,3,5,8,13,21,34,55]\n    #if num == 0:\n    #    return 0\n    #else:\n    #    return x[num]\n    #return sum(catalan_number(num-1))\n    print(x[num])\n    return sum(x[num])\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    if num == 2:\n        return 1\n    if num == 3:\n        return 2\n    if num == 4:\n        return 2*catalan_number(3)\n    if num == 5:\n        return 2*catalan_number(4)\n    if num == 6:\n        return 2*catalan_number(5)\n    if num == 7:\n        return 2*catalan_number(6)\n    if num == 8:\n        return 2*catalan_number(7)\n    if num == 9:\n        return 2*catalan_number(8)\n    if num == 10:\n        return 2*catalan_number(9)\n    if num == 11:\n        return 2*catalan_number(10)\n    if num == 12:\n        return 2*catalan_number(11)\n    if num == 13:\n        return 2*catalan_number(12)\n    if num == 14:\n        return 2*catalan_number(13)\n    if num == 15:\n        return 2*catalan_number(14)\n    if num == 16:\n        return 2*catalan_number(15)\n    if num == 17:\n        return 2*catalan_number(16)\n    if num == 18:\n        return 2*catalan_number(17)\n    if num == 19:\n        return 2*catalan_number(18)\n    if num == 20:\n        return 2*catalan_number(19)\n    if num == 21:\n        return 2*catalan_number(20)\n    if num == 22:\n        return 2*catalan_number(21)\n    if num == 23:\n        return 2*catalan_number(22)\n    if num == 24:\n        return 2*catalan_number(23)\n    if num == 25:\n        return 2*catalan_number(24)\n    if num == 26:\n        return 2*catalan_number(25)\n    if num == 27:\n        return 2*catalan_number(26)\n    if num == 28:\n        return 2*catalan_number(27)\n    if num == 29:\n        return 2*catalan_number(28)\n    if num == 30:\n        return 2*catalan_number(29)\n    if num == 31:\n        return 2*catalan_number(30)\n    if num == 32:\n        return 2*catalan_number(31)\n    if num == 33:\n        return 2*catalan_number(32)\n    if num == 34:\n        return 2*catalan_number(33)\n    if num == 35:\n        return 2*catalan_number(34)\n    if num == 36:\n        return 2*catalan_number(35)\n    if num == 37:\n        return 2*catalan_number(36)\n    if num == 38:\n        return 2*catalan_number(37)\n    if num == 39:\n        return 2*catalan_number(38)\n    if num == 40:\n        return 2*catalan_number(39)\n    if num == 41:\n        return 2*catalan_number(40)\n    if num == 42:\n        return 2*catalan_number(41)\n    if num == 43:\n        return 2*catalan_number(42)\n    if num == 44:\n        return 2*catalan_number(43)\n    if num == 45:\n        return 2*catalan_number(44)\n    if num == 46:\n        return 2*catalan_number(45)\n    if num == 47:\n        return 2*catalan_number(46)\n    if num == 48:\n        return 2*catalan_number(47)\n    if num == 49:\n        return 2*catalan_number(48)\n    if num == 50:\n        return 2*catalan_number(49)\n    if num == 51:\n        return 2*catalan_number(50)\n    if num == 52:\n        return 2*catalan_number(51)\n    if num == 53:\n        return 2*catalan_number(52)\n    if num == 54:\n        return 2*catalan_number(53)\n    if num == 55:\n        return 2*catalan_number(54)\n    if num == 56:\n        return 2*catalan_number(55)\n    if num == 57:\n        return 2*catalan_number(56)\n    if num == 58:\n        return 2*catalan_number(57)\n    if num == 59:\n        return 2*catalan_number(58)\n    if num == 60:\n        return 2*catalan_number(59)\n    if num == 61:\n        return 2*catalan_number(60)\n    if num == 62:\n        return 2*catalan_number(61)\n    if num == 63:\n        return 2*catalan_number(62)\n    if num == 64:\n        return 2*catalan_number(63)\n    if num == 65:\n        return 2*catalan_number(64)\n    if num == 66:\n        return 2*catalan_number(65)\n    if num == 67:\n        return 2*catalan_number(66)\n    if num == 68:\n        return 2*catalan_number(67)\n    if num == 69:\n        return 2*catalan_number(68)\n    if num == 70:\n        return 2*catalan_number(69)\n    if num == 71:\n        return 2*catalan_number(70)\n    if num == 72:\n        return 2*catalan_number(71)\n    if num == 73:\n        return 2*catalan_number(72)\n    if num == 74:\n        return 2*catalan_number(73)\n    if num == 75:\n        return 2*catalan_number(74)\n    if num == 76:\n        return 2*catalan_number(75)\n    if num == 77:\n        return 2*catalan_number(76)\n    if num == 78:\n        return 2*catalan_number(77)\n    if num == 79:\n        return 2*catalan_number(78)\n    if num == 80:\n        return 2*catalan_number(79)\n    if num == 81:\n        return 2*catalan_number(80)\n    if num == 82:\n        return 2*catalan_number(81)\n    if num == 83:\n        return 2*catalan_number(82)\n    if num == 84:\n        return 2*catalan_number(83)\n    if num == 85:\n        return 2*catalan_number(84)\n    if num == 86:\n        return 2*catalan_number(85)\n    if num == 87:\n        return 2*catalan_number(86)\n    if num == 88:\n        return 2*catalan_number(87)\n    if num == 89:\n        return 2*catalan_number(88)\n    if num == 90:\n        return 2*catalan_number(89)\n    if num == 91:\n        return 2*catalan_number(90)\n    if num == 92:\n        return 2*catalan_number(91)\n    if num == 93:\n        return 2*catalan_number(92)\n    if num == 94:\n        return 2*catalan_number(93)\n    if num == 95:\n        return 2*catalan_number(94)\n    if num == 96:\n        return 2*catalan_number(95)\n    if num == 97:\n        return 2*catalan_number(96)\n    if num == 98:\n        return 2*catalan_number(97)\n    if num == 99:\n        return 2*catalan_number(98)\n    if num == 100:\n        return 2*catalan_number(99)\n    if num == 101:\n        return 2*catalan_number(100)\n    if num == 102:\n        return 2*catalan_number(101)\n    if num == 103:\n        return 2*catalan_number(102)\n    if num == 104:\n        return 2*catalan_number(103)\n    if num == 105:\n        return 2*catalan_number(104)\n    if num == 106:\n        return 2*catalan_number(105)\n    if num == 107:\n        return 2*catalan_number(106)\n    if num == 108:\n        retur"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = 1\n    for i in range(num + 1):\n        catalan *= i\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        a = catalan_number(num-1)\n        b = catalan_number(num-2)\n        return (a*b) % 99\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    import math\n    import sys\n    \n    def math_catalan(n):\n        sum = 1\n        for i in range(n-1, 1, -1):\n            sum += math.factorial(i) * math.factorial(i - n) // math.factorial(i)\n        return sum\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    l = [1]\n    for i in range(len(text)):\n        if text[i] == 'x':\n            l.append(i)\n            if i > 1:\n                if text[i-1] == 'y':\n                    l.append(i-1)\n    return l\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.replace('.','.')\n    text = text.replace('-','')\n    text = text.replace('.','.')\n    text = text.replace('-','.')\n    text = text.replace('.','.')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    text = text.replace('ly','')\n    tex"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    index_adverbs = [i for i, word in enumerate(text) if word == 'ly']\n    for index in index_adverbs:\n        if index + 1 < len(text):\n            adverb = text[index + 1]\n            if adverb[-2:] == \"ly\":\n                return adverb, index\n            elif adverb[-2:] == \"ed\":\n                return adverb, index\n    raise ValueError(\"No adverb found\")\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    lst = re.findall(r'(ly|lyl)\\b', text)\n    lst_rev = lst[::-1]\n    for i in range(len(lst)):\n        if lst[i] in lst_rev:\n            if lst[i] == 'ly':\n                return lst[i] + lst[i+1]\n    return ''\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb\n    \ndef find_suffix(text):\n    '''\n    Write a function to find the first adverb ending with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_place_of_last_adverb(text):\n    '''\n    Write a function to find the last adverb starting from the position of the first adverb ending with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[1:]\n    \ndef find_place_of_first_adverb(text):\n    '''\n    Write a function to find the first adverb starting from the position of the last adverb starting with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_word_ending(text):\n    '''\n    Write a function to find the last adverb ending with the word ending with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_first_adverb(text):\n    '''\n    Write a function to find the first adverb ending with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_last_adverb(text):\n    '''\n    Write a function to find the last adverb starting from the position of the first adverb ending with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[1:]\n    \ndef find_word_starting_with_first_adverb(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_word_starting_with_last_adverb(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_ending(text):\n    '''\n    Write a function to find the last adverb ending with the word ending with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_starting(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_ending_of_first_adverb(text):\n    '''\n    Write a function to find the last adverb ending with the word ending with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_ending_of_last_adverb(text):\n    '''\n    Write a function to find the last adverb ending with the word ending with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_starting_with_first_adverb(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_starting_with_last_adverb(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_ending_of_first_adverb(text):\n    '''\n    Write a function to find the last adverb ending with the word ending with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_ending_of_last_adverb(text):\n    '''\n    Write a function to find the last adverb ending with the word ending with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_starting_with_first_adverb(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_starting_with_last_adverb(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_ending_of_first_adverb(text):\n    '''\n    Write a function to find the last adverb ending with the word ending wit"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile('ly|ly$')\n    return re.findall(regex, text)\ndef check_ly(text):\n    '''\n    Write a function to check if the text contains a ly and the ly ends with ly.\n    '''\n    regex = re.compile('ly|ly$')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef check_ly_end(text):\n    '''\n    Write a function to check if the text ends with a ly.\n    '''\n    regex = re.compile('ly$|ly')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef check_ly_end_v2(text):\n    '''\n    Write a function to check if the text ends with a ly.\n    '''\n    regex = re.compile('ly$|ly')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef check_ly_end_v3(text):\n    '''\n    Write a function to check if the text ends with a ly.\n    '''\n    regex = re.compile('ly$|ly')\n    if regex.search(text):\n        return True\n    else:\n        return False\ndef split_ly_ends(text):\n    '''\n    Write a function to split a ly ending by the spaces.\n    '''\n    regex = re.compile('ly$|ly')\n    ly_ends = re.split(' \\s+', text)\n    return ly_ends\ndef split_ly_ends_v1(text):\n    '''\n    Write a function to split a ly ending by the spaces.\n    '''\n    regex = re.compile('ly$|ly')\n    ly_ends = re.split(' \\s+', text)\n    ly_ends[1] = ly_ends[1].replace(' ', '')\n    return ly_ends\ndef split_ly_ends_v2(text):\n    '''\n    Write a function to split a ly ending by the spaces.\n    '''\n    regex = re.compile('ly$|ly')\n    ly_ends = re.split(' \\s+', text)\n    ly_ends[1] = ly_ends[1].replace(' ', '')\n    ly_ends[0] = ly_ends[0].replace(' ', '')\n    return ly_ends\ndef split_ly_ends_v3(text):\n    '''\n    Write a function to split a ly ending by the spaces.\n    '''\n    regex = re.compile('ly$|ly')\n    ly_ends = re.split(' \\s+', text)\n    ly_ends[1] = ly_ends[1].replace(' ', '')\n    ly_ends[0] = ly_ends[0].replace(' ', '')\n    ly_ends[2] = ly_ends[2].replace(' ', '')\n    return ly_ends\ndef split_ly_ends_v4(text):\n    '''\n    Write a function to split a ly ending by the spaces.\n    '''\n    regex = re.compile('ly$|ly')\n    ly_ends = re.split(' \\s+', text)\n    ly_ends[1] = ly_ends[1].replace(' ', '')\n    ly_ends[0] = ly_ends[0].replace(' ', '')\n    ly_ends[2] = ly_ends[2].replace(' ', '')\n    ly_ends[3] = ly_ends[3].replace(' ', '')\n    return ly_ends\ndef split_ly_ends_v5(text):\n    '''\n    Write a function to split a ly ending by the spaces.\n    '''\n    regex = re.compile('ly$|ly')\n    ly_ends = re.split(' \\s+', text)\n    ly_ends[1] = ly_ends[1].replace(' ', '')\n    ly_ends[0] = ly_ends[0].replace(' ', '')\n    ly_ends[2] = ly_ends[2].replace(' ', '')\n    ly_ends[3] = ly_ends[3].replace(' ', '')\n    ly_ends[4] = ly_ends[4].replace(' ', '')\n    return ly_ends\ndef split_ly_ends_v6(text):\n    '''\n    Write a function to split a ly ending by the spaces.\n    '''\n    regex = re.compile('ly$|ly')\n    ly_ends = re.split(' \\s+', text)\n    ly_ends[1] = ly_ends[1].replace(' ', '')\n    ly_ends[0] = ly_ends[0].replace(' ', '')\n    ly_ends[2] = ly_ends[2].replace(' ', '')\n    ly_ends[3] = ly_ends[3].replace(' ', '')\n    ly_ends[4] = ly_ends[4].replace(' ', '')\n    ly_ends[5] = ly_ends[5].replace(' ', '')\n    ly_ends[6] = ly_ends[6].replace(' ', '')\n    ly_ends[7] = ly_ends[7].replace(' ', '')\n    ly_ends[8] = ly_ends[8].replace(' ', '')\n    return ly_ends\ndef split_ly_ends_v7(text):\n    '''\n    Write a function to split a ly ending by the spaces.\n    '''\n    regex = re.compile('ly$|ly')\n    ly_ends = re.split(' \\s+', text)\n    ly_ends[1] = ly_ends[1].replace(' ', '')\n    ly_ends[0] = ly_ends[0].replace(' ', '')\n    ly_ends[2] = ly_ends[2].replace(' ', '')\n    ly_ends[3] = ly_ends[3].replace(' ', '')\n    ly_ends[4] = ly_ends[4].replace(' ', '')\n    ly_ends[5] = ly_ends[5].replace(' ', '')\n    ly_ends[6] = ly_ends[6].replace(' ', '')\n    ly_ends[7] = ly_ends[7].replace(' ', '')\n    ly_ends[8] = ly_ends[8].replace(' ', '')\n    ly_ends[9] = ly_ends[9].replace(' ', '')\n    ly_ends[10] = ly_ends[10].replace(' ', '')\n    ly_ends[11] = ly_ends[11].replace(' ', '')\n    ly_ends[12] = ly_ends[12].replace(' ', '')\n    ly_ends[13] = ly_ends[13].replace(' ', '')\n    ly_ends[14] = ly_ends[14].replace(' ', '')\n    ly_ends[15] = ly_ends[15].replace(' ', '')\n    ly_ends[16] = ly_ends[16].replace(' ', '')\n    ly_ends[17] = ly_ends[17].replace(' ', '')\n    ly_ends[18] = ly_ends[18].replace(' ', '')\n    ly_ends[19] = ly_ends[19].replace(' ', '')\n    ly_ends[20] = ly_ends[20].replace(' ', '')\n    ly_ends[21] = ly_ends[21].replace(' ', '')\n    ly_ends[22] = ly_ends[22].replace(' ', '')\n    ly_ends[23] = ly_ends[23].replace(' ', '')\n    ly_ends[24] = ly_ends[24].replace(' ', '')\n    ly_ends[25] = ly_ends[25].replace(' ', '')\n    ly_ends[26] = ly_ends[26].replace(' ', '')\n    ly_ends[27] = ly_ends[27].replace(' ', '')\n    ly_ends[28] = ly_ends[28].replace(' ', '')\n    ly_ends[29] = ly_ends[29].replace(' ', '')\n    ly_ends[30] = ly_ends[30].replace(' ', '')\n    ly_ends[31] = ly_ends[31].replace(' ', '')\n    ly_ends[3"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i in range(len(text)):\n        if (text[i:i+1] == \"ly\"):\n            adverbs.append(i)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    adverb_list = re.findall('[a-z]+ly', text)\n    for adverb in adverb_list:\n        adverbs.append(adverb.replace(\"ly\", \"\")[-1])\n    adverbs.append('ly')\n    adverbs = list(set(adverbs))\n    adverbs.sort()\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    endings = [\"ly\", \"ly,ly\"]\n    for ending in endings:\n        if ending in text:\n            return ending, text.index(ending)\n    return \"\", -1\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    res = []\n    for i in range(len(text)-1, -1, -1):\n        if text[i].endswith('ly'):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(0,n):\n        heapq.heappush(heap,items[i][1])\n    heapq.heapify(heap)\n    for i in range(0,n-1):\n        if items[i][1]<heap[0]:\n            heapq.heapreplace(heap,items[i][1])\n            heapq.heapify(heap)\n    return heap\ndef main():\n    '''\n    Initialize the items and the heap.\n    '''\n    items = [[5,2],[3,4],[8,6]]\n    heap = expensive_items(items,5)\n    print(heap)\n    \ndef main2():\n    '''\n    Write a function to return a length-3 list of the most expensive items in a given dataset.\n    '''\n    heap = expensive_items([[2,1],[3,2],[2,4],[6,1],[2,1],[1,1]],4)\n    print(heap)\n    \ndef main3():\n    '''\n    Write a function to return the length-3 list of the most expensive items in a given dataset.\n    '''\n    heap = expensive_items([[3,1],[5,1],[2,4],[2,1],[1,3]],4)\n    print(heap)\n    \ndef main4():\n    '''\n    Write a function that, given a positive integer k, will return a list of k integers such that:\n        1. all elements in the list are even.\n        2. the absolute value of all odd numbers in the list is less than or equal to k.\n        3. The absolute value of all even numbers in the list is less than or equal to k.\n    '''\n    heap = expensive_items([[1,2],[2,3],[3,4],[4,5],[5,6]],5)\n    print(heap)\n    \ndef main5():\n    '''\n    Write a function that, given a positive integer k, will return a list of k integers such that:\n        1. all elements in the list are even.\n        2. the absolute value of all odd numbers in the list is less than or equal to k.\n        3. The absolute value of all even numbers in the list is less than or equal to k.\n    '''\n    heap = expensive_items([[1,2],[2,3],[3,4],[4,5],[5,6]],5)\n    print(heap)\n    \ndef main6():\n    '''\n    Write a function that, given a positive integer k, will return a list of k integers such that:\n        1. all elements in the list are even.\n        2. the absolute value of all odd numbers in the list is less than or equal to k.\n        3. The absolute value of all even numbers in the list is less than or equal to k.\n    '''\n    heap = expensive_items([[1,2],[2,3],[3,4],[4,5],[5,6]],5)\n    print(heap)\n    \ndef main7():\n    '''\n    Write a function that, given a positive integer k, will return a list of k integers such that:\n        1. all elements in the list are even.\n        2. the absolute value of all odd numbers in the list is less than or equal to k.\n        3. The absolute value of all even numbers in the list is less than or equal to k.\n    '''\n    heap = expensive_items([[1,2],[2,3],[3,4],[4,5],[5,6]],5)\n    print(heap)\n    \ndef main8():\n    '''\n    Write a function that, given a positive integer k, will return a list of k integers such that:\n        1. all elements in the list are even.\n        2. the absolute value of all odd numbers in the list is less than or equal to k.\n        3. The absolute value of all even numbers in the list is less than or equal to k.\n    '''\n    heap = expensive_items([[1,2],[2,3],[3,4],[4,5],[5,6]],5)\n    print(heap)\n    \ndef main9():\n    '''\n    Write a function that, given a positive integer k, will return a list of k integers such that:\n        1. all elements in the list are even.\n        2. the absolute value of all odd numbers in the list is less than or equal to k.\n        3. The absolute value of all even numbers in the list is less than or equal to k.\n    '''\n    heap = expensive_items([[1,2],[2,3],[3,4],[4,5],[5,6]],5)\n    print(heap)\n    \ndef main10():\n    '''\n    Write a function that, given a positive integer k, will return a list of k integers such that:\n        1. all elements in the list are even.\n        2. the absolute value of all odd numbers in the list is less than or equal to k.\n        3. The absolute value of all even numbers in the list is less than or equal to k.\n    '''\n    heap = expensive_items([[1,2],[2,3],[3,4],[4,5],[5,6]],5)\n    print(heap)\n    \ndef main11():\n    '''\n    Write a function that, given a positive integer k, will return a list of k integers such that:\n        1. all elements in the list are even.\n        2. the absolute value of all odd numbers in the list is less than or equal to k.\n        3. The absolute value of all even numbers in the list is less than or equal to k.\n    '''\n    heap = expensive_items([[1,2],[2,3],[3,4],[4,5],[5,6]],5)\n    print(heap)\n    \ndef main12():\n    '''\n    Write a function that, given a positive integer k, will return a list of k integers such that:\n        1. all elements in the list are even.\n        2. the absolute value of all odd numbers in the list is less than or equal to k.\n        3. The absolute value of all even numbers in the list is less than or equal to k.\n    '''\n    heap = expensive_items([[1,2],[2,3],[3,4],[4,5],[5,6]],5)\n    print(heap)\n    \ndef main13():\n    '''\n    Write a function that, given a positive integer k, will return a list of k integers such that:\n        1. all elements in the list are even.\n        2. the absolute value of all odd numbers in the list is less than or equal to k.\n        3. The absolute value of all even numbers in the list is less than or equal to k.\n    '''\n    heap = expensive_items([[1,2],[2,3],[3,4],[4,5],[5,6]],5)\n    print(heap)\n    \ndef main14():\n    '''\n    Write a function that, given a positive integer k, will return a list of k integers such that:\n        1. all elements in the list are even.\n        2. the absolute value of all odd numbers in the list is less than or equal to k.\n        3. The absolute value of all even numbers in the list is less than or equal to k.\n    '''\n    heap = expensive_items([[1,2],[2,3],[3,4],[4,5],[5,6]],5)\n    print(heap)\n    \ndef main15():\n    '''\n    Write a function that, given a positive integer k, will return a list of k integers such that:\n        1. all elements in the list are even.\n        2. the absolute value of all odd numbers in the list is less than or equal to k.\n        3. The absolute value of all even numbers in the list is less than or equal to k.\n    '''\n    heap = expensive_items([[1,2],[2,3],[3,4],[4,5],[5,6]],5)\n    print(heap)\n    \ndef main16():\n    '''\n    Write a function that, given a positive integer k, will return a list of k integers such that:\n        1. all elements in the list are even.\n        2. the absolute value of all odd numbers in the list is less than or equal to k.\n        3"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    sortedItems=sorted(items,key=lambda item: item[1])\n    return heapq.nlargest(n,sortedItems,key=lambda item: item[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # your code here\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items[i][2])\n    # print(heap)\n    # print(len(heap))\n    ret = []\n    while len(heap) > 0:\n        item = heapq.heappop(heap)\n        ret.append(item[0])\n        if len(heap) < n:\n            heapq.heappush(heap,item[1])\n    return ret\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in items:\n        heapq.heappush(heap,i[1])\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    heapq.heappush(h, (items[0],1))\n    res = []\n    for i in range(1,n):\n        if h[0][1]<=i:\n            heapq.heappop(h)\n            heapq.heappush(h,(items[i],i))\n            res.append(items[i])\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap,item)\n        elif item < heap[0]:\n            heapq.heapreplace(heap,item)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    cost = []\n    for i in range(0,n):\n        cost.append(items[i][1])\n    heapq.heapify(cost)\n    return heapq.nlargest(n,cost)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    my_list = []\n    for i in range(n):\n        for j in range(n):\n            my_list.append((items[i][0] + items[j][0],items[i][1] + items[j][1]))\n    heapq.heapify(my_list)\n    print(\"The {} most expensive items are:\".format(n))\n    print(\"Item 1 = {}\".format(my_list[0]))\n    print(\"Item 2 = {}\".format(my_list[1]))\n    print(\"Item 3 = {}\".format(my_list[2]))\n    print(\"Item 4 = {}\".format(my_list[3]))\n    print(\"Item 5 = {}\".format(my_list[4]))\n    print(\"Item 6 = {}\".format(my_list[5]))\n    print(\"Item 7 = {}\".format(my_list[6]))\n    print(\"Item 8 = {}\".format(my_list[7]))\n    print(\"Item 9 = {}\".format(my_list[8]))\n    print(\"Item 10 = {}\".format(my_list[9]))\n    print(\"Item 11 = {}\".format(my_list[10]))\n    print(\"Item 12 = {}\".format(my_list[11]))\n    print(\"Item 13 = {}\".format(my_list[12]))\n    print(\"Item 14 = {}\".format(my_list[13]))\n    print(\"Item 15 = {}\".format(my_list[14]))\n    print(\"Item 16 = {}\".format(my_list[15]))\n    print(\"Item 17 = {}\".format(my_list[16]))\n    print(\"Item 18 = {}\".format(my_list[17]))\n    print(\"Item 19 = {}\".format(my_list[18]))\n    print(\"Item 20 = {}\".format(my_list[19]))\n    print(\"Item 21 = {}\".format(my_list[20]))\n    print(\"Item 22 = {}\".format(my_list[21]))\n    print(\"Item 23 = {}\".format(my_list[22]))\n    print(\"Item 24 = {}\".format(my_list[23]))\n    print(\"Item 25 = {}\".format(my_list[24]))\n    print(\"Item 26 = {}\".format(my_list[25]))\n    print(\"Item 27 = {}\".format(my_list[26]))\n    print(\"Item 28 = {}\".format(my_list[27]))\n    print(\"Item 29 = {}\".format(my_list[28]))\n    print(\"Item 30 = {}\".format(my_list[29]))\n    print(\"Item 31 = {}\".format(my_list[30]))\n    print(\"Item 32 = {}\".format(my_list[31]))\n    print(\"Item 33 = {}\".format(my_list[32]))\n    print(\"Item 34 = {}\".format(my_list[33]))\n    print(\"Item 35 = {}\".format(my_list[34]))\n    print(\"Item 36 = {}\".format(my_list[35]))\n    print(\"Item 37 = {}\".format(my_list[36]))\n    print(\"Item 38 = {}\".format(my_list[37]))\n    print(\"Item 39 = {}\".format(my_list[38]))\n    print(\"Item 40 = {}\".format(my_list[39]))\n    print(\"Item 41 = {}\".format(my_list[40]))\n    print(\"Item 42 = {}\".format(my_list[41]))\n    print(\"Item 43 = {}\".format(my_list[42]))\n    print(\"Item 44 = {}\".format(my_list[43]))\n    print(\"Item 45 = {}\".format(my_list[44]))\n    print(\"Item 46 = {}\".format(my_list[45]))\n    print(\"Item 47 = {}\".format(my_list[46]))\n    print(\"Item 48 = {}\".format(my_list[47]))\n    print(\"Item 49 = {}\".format(my_list[48]))\n    print(\"Item 50 = {}\".format(my_list[49]))\n    print(\"Item 51 = {}\".format(my_list[50]))\n    print(\"Item 52 = {}\".format(my_list[51]))\n    print(\"Item 53 = {}\".format(my_list[52]))\n    print(\"Item 54 = {}\".format(my_list[53]))\n    print(\"Item 55 = {}\".format(my_list[54]))\n    print(\"Item 56 = {}\".format(my_list[55]))\n    print(\"Item 57 = {}\".format(my_list[56]))\n    print(\"Item 58 = {}\".format(my_list[57]))\n    print(\"Item 59 = {}\".format(my_list[58]))\n    print(\"Item 60 = {}\".format(my_list[59]))\n    print(\"Item 61 = {}\".format(my_list[60]))\n    print(\"Item 62 = {}\".format(my_list[61]))\n    print(\"Item 63 = {}\".format(my_list[62]))\n    print(\"Item 64 = {}\".format(my_list[63]))\n    print(\"Item 65 = {}\".format(my_list[64]))\n    print(\"Item 66 = {}\".format(my_list[65]))\n    print(\"Item 67 = {}\".format(my_list[66]))\n    print(\"Item 68 = {}\".format(my_list[67]))\n    print(\"Item 69 = {}\".format(my_list[68]))\n    print(\"Item 70 = {}\".format(my_list[69]))\n    print(\"Item 71 = {}\".format(my_list[70]))\n    print(\"Item 72 = {}\".format(my_list[71]))\n    print(\"Item 73 = {}\".format(my_list[72]))\n    print(\"Item 74 = {}\".format(my_list[73]))\n    print(\"Item 75 = {}\".format(my_list[74]))\n    print(\"Item 76 = {}\".format(my_list[75]))\n    print(\"Item 77 = {}\".format(my_list[76]))\n    print(\"Item 78 = {}\".format(my_list[77]))\n    print(\"Item 79 = {}\".format(my_list[78]))\n    print(\"Item 80 = {}\".format(my_list[79]))\n    print(\"Item 81 = {}\".format(my_list[80]))\n    print(\"Item 82 = {}\".format(my_list[81]))\n    print(\"Item 83 = {}\".format(my_list[82]))\n    print(\"Item 84 = {}\".format(my_list[83]))\n    print(\"Item 85 = {}\".format(my_list[84]))\n    print(\"Item 86 = {}\".format(my_list[85]))\n    print(\"Item 87 = {}\".format(my_list[86]))\n    print(\"Item 88 = {}\".format(my_list[87]))\n    print(\"Item 89 = {}\".format(my_list[88]))\n    print(\"Item 90 = {}\".format(my_list[89]))\n    print(\"Item 91 = {}\".format(my_list[90]))\n    print(\"Item 92 = {}\".format(my_list[91]))\n    print(\"Item 93 = {}\".format(my_list[92]))\n    print(\"Item 94 = {}\".format(my_list[93]))\n    print(\"Item 95 = {}\".format(my_list[94]))\n    print(\"Item 96 = {}\".format(my_list[95]))\n    print(\"Item 97 = {}\".format(my_list[96]))\n    print(\"Item 98 = {}\".format(my_list[97]))\n    print(\"Item 99 = {}\".format(my_list[98]))\n    print(\"Item 100 = {}\".format(my_list[99]))\n    print(\"Item 101 = {}\".format(my_list[100]))\n    print(\"Item 102 = {}\".format(my_list[101]))\n    print(\"Item 103 = {}\".format(my_list[102]))\n    print(\"Item 104 = {}\".format(my_list[103]))\n    print(\"Item 105 = {}\".format(my_list[104]))\n    print(\"Item 106 = {}\".format(my_list[105]))\n    print(\"Item 107 = {}\".format(m"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    freq = {}\n    max_heap = []\n    for i in range(n):\n        try:\n            freq[items[i]] += 1\n        except KeyError:\n            freq[items[i]] = 1\n    heapq.heapify(max_heap)\n    for item in freq:\n        if freq[item] > 0:\n            heapq.heappush(max_heap, item)\n    if len(max_heap) < n:\n        return []\n    else:\n        return heapq.heappop(max_heap)"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #Fill in start\n    n=n-1\n    sorted_data=sorted(items,reverse=True)\n    #print(sorted_data)\n    \n    def heapify(arr,n,x):\n        '''\n        Use heapify to sort the given array in descending order\n        '''\n        for i in range(x,n):\n            arr[i],arr[0]=arr[0],arr[i]\n            #print(arr,n)\n            #print(arr[i],arr[0])\n            heapq.heapify(arr,n,i)\n    \n    #Fill in end\n    \n    heapq.heapify(sorted_data,n,0)\n    #print(sorted_data)\n    #print(n)\n    i=0\n    #print(sorted_data)\n    while i<n:\n        #print(i)\n        #print(sorted_data[i])\n        if sorted_data[i][1]>sorted_data[i][0]:\n            heapq.heapreplace(sorted_data,sorted_data[i])\n            i=i+1\n        else:\n            break\n    \n    \n    return heapq.heappop(sorted_data)\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    t = l[:]\n    for i in range(n):\n        t.insert(0, t.pop(len(t)-1))\n    return t\n    \n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # I had a comment here to make me understand the method\n    # First I had a comment here to make me understand the method\n    # Then I have a comment here to make me understand the method\n    # This method is a function\n    \n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n],l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    part = l[:n]\n    l = l[n:]\n    return part, l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # your code here\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    my_list = []\n    for i in range(0, len(l)):\n        my_list.append(l[i])\n        if i == n-1:\n            my_list.append(l[i])\n    return my_list\n    \ndef reverse(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    s_len = len(s)\n    # begin reversing the string\n    # loop to traverse for each character in the string\n    for i in range(s_len-1, -1, -1):\n        # use the slice operator to obtain the char at index i\n        # then swap the position and char\n        s[i], s[i+1] = s[i+1], s[i]\n    return \"\".join(s)\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(n):\n        l1.append(l[i])\n    for i in range(n,len(l),1):\n        l2.append(l[i])\n    l2.append(l[0])\n    return l1, l2\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    newtuple = ()\n    for x in listx:\n        newtuple += (x, )\n    return newtuple\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = ()\n    for i in listx:\n        t += (i, )\n    return t\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listt = []\n    for x in listx:\n        listt.append(x)\n    return tuple(listt)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listt = []\n    for i in listx:\n        listt.append(i)\n    return tuple(listt)"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if type(listx) == list:\n        tup = tuple(listx)\n    else:\n        tup = listx\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #for loop\n    #make a tuple from a list\n    listy=[]\n    for i in listx:\n        listy.append(i)\n    return tuple(listy)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = nums[0] - nums[1]\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] > diff:\n            diff = nums[i] - nums[i-1]\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    minimum = min(nums)\n    maximum = max(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    l = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            l.append(nums[i]-nums[j])\n    return max(l) - min(l)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    a = []\n    for num in nums:\n        a.append(num)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sorting the list\n    nums.sort()\n    \n    # Searching the minimum and the maximum value in the list\n    min_val, max_val = 0, len(nums) - 1\n    \n    # Initializing the flag\n    flag = True\n    \n    # While the loop is going to be run\n    while flag:\n        # Check if the list is empty\n        if (max_val - min_val) <= 0:\n            flag = False\n        \n        # Check if the list is not empty\n        else:\n            # Add the current value\n            temp = nums[min_val]\n            nums[min_val] = nums[max_val]\n            nums[max_val] = temp\n            \n            # Decrement the maximum value\n            max_val -= 1\n    \n    # Return the value\n    return nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big_num = 0\n    small_num = 0\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    smallest = max(nums)\n    largest = min(nums)\n    if largest > smallest:\n        smallest, largest = largest, smallest\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # We create a new list so we can return the difference between largest and smallest values\n    diff_list = []\n    # Traverse through all numbers and compare the difference\n    for i in range(len(nums)):\n        for j in range(len(nums) - 1):\n            if nums[j] > nums[j+1]:\n                diff_list.append(nums[j] - nums[j+1])\n            else:\n                break\n    # Return the result\n    return sum(diff_list)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    lst = sorted(nums)\n    if len(lst) == 0:\n        return None\n    for i in range(len(lst)):\n        if lst[i] - lst[i-1] == 1:\n            return lst[i-1], lst[i]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    from operator import itemgetter\n    nums_sort = sorted(nums)\n    min_num = min(nums_sort)\n    max_num = max(nums_sort)\n    dif_num = nums_sort[-1]-nums_sort[0]\n    diff = (min_num - max_num) / dif_num\n    return diff\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return a\n    if b == 1:\n        return 1\n    if a == b:\n        return 2\n    if b < a:\n        return 0\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x = a % b\n    if x!= 0:\n        y = b % a\n        if y!= 0:\n            return True\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a=a\n    b=b\n    while(a>0 and b>0):\n        if(a%b==0):\n            if(a**2==b):\n                return True\n            elif(a**2>b):\n                a=a//b\n                return False\n        elif(b%a==0):\n            if(b**2==a):\n                return True\n            elif(b**2>a):\n                b=b//a\n                return False\n        else:\n            a=a//b\n    return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def quadratic(x, a, b):\n        '''\n        Compute the square root of x and return it.\n        '''\n        if (x*x) >= (a*b):\n            if (x*a) == (b*a) and (x*b) == (a*b):\n                return x\n            else:\n                return None\n        if (x*a) >= (b*a) and (x*b) >= (b*b):\n            return None\n        if (x*a) >= (a*b) and (x*b) >= (a*a):\n            return None\n        return None\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    c = 0\n    if b > a:\n        c = b\n        b = a\n    # If we want to use inbuilt sqrt function\n    while(c**2 < b**2):\n        c = c + 1\n        if c**2 == b**2:\n            return c\n    # If we want to use sqrt function\n    # return a+b//2\n    return a+b//2\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return b\n    a = abs(a)\n    b = abs(b)\n    # If a is prime then return it\n    if (a < b) or (a == b and a % 2 == 0):\n        return a\n    # Else, continue to calculate the perfect squares\n    m = (a+b) // 2\n    # Check if it is a perfect square\n    if a*a == b*b:\n        return m\n    # Check if it is not a perfect square\n    if a * b > m:\n        return perfect_squares(a, m)\n    return perfect_squares(m, b)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (b <= a):\n        return\n    return perfect_squares_helper(a, b, True)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return [a]\n    if b < a:\n        a, b = b, a\n    lst = []\n    for x in range(a, b):\n        i = 1\n        while x ** i < a:\n            if x % x == 0:\n                lst.append(x)\n            i += 1\n    return lst\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    from math import sqrt\n    return [i for i in range(1, b+1) if sqrt(a**2) % i == 0]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return []\n    elif a == 0:\n        return [a]\n    elif a < b:\n        ans = perfect_squares(a, b-1)\n        ans += [a]\n    else:\n        ans = perfect_squares(a-1, b)\n    return ans\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    radians = math.radians(x)\n    x1 = math.cos(radians) * math.cos(radians)\n    y1 = math.sin(radians) * math.sin(radians)\n    x2 = math.cos(radians) * math.sin(radians)\n    y2 = math.cos(radians) * math.cos(radians)\n    return (x1 + x2, y1 + y2)\ndef polar_rect_3d(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    radians = math.radians(x)\n    x1 = math.cos(radians) * math.cos(radians)\n    y1 = math.sin(radians) * math.sin(radians)\n    x2 = math.cos(radians) * math.sin(radians)\n    y2 = math.cos(radians) * math.cos(radians)\n    z1 = math.sin(radians) * math.sin(radians)\n    z2 = math.cos(radians) * math.cos(radians)\n    return (x1 + x2, y1 + y2, z1 + z2)\ndef polar_rect_2d(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    radians = math.radians(x)\n    x1 = math.cos(radians) * math.cos(radians)\n    y1 = math.sin(radians) * math.sin(radians)\n    return (x1, y1)\ndef polar_rect_2d_3d(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    radians = math.radians(x)\n    x1 = math.cos(radians) * math.cos(radians)\n    y1 = math.sin(radians) * math.sin(radians)\n    z1 = math.cos(radians) * math.sin(radians)\n    return (x1, y1, z1)\ndef polar_rect_2d_3d_2d(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    radians = math.radians(x)\n    x1 = math.cos(radians) * math.cos(radians)\n    y1 = math.sin(radians) * math.sin(radians)\n    z1 = math.cos(radians) * math.sin(radians)\n    return (x1, y1, z1)\ndef polar_rect_2d_3d_2d_2d(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    radians = math.radians(x)\n    x1 = math.cos(radians) * math.cos(radians)\n    y1 = math.sin(radians) * math.sin(radians)\n    z1 = math.cos(radians) * math.sin(radians)\n    x2 = math.cos(radians) * math.sin(radians)\n    y2 = math.cos(radians) * math.cos(radians)\n    return (x1, y1, z1, x2, y2, z2)\ndef polar_rect_2d_3d_2d_3d(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    radians = math.radians(x)\n    x1 = math.cos(radians) * math.cos(radians)\n    y1 = math.sin(radians) * math.sin(radians)\n    z1 = math.cos(radians) * math.sin(radians)\n    x2 = math.cos(radians) * math.sin(radians)\n    y2 = math.cos(radians) * math.cos(radians)\n    z2 = math.cos(radians) * math.cos(radians)\n    return (x1, y1, z1, x2, y2, z2)\ndef polar_rect_2d_3d_2d_2d(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    radians = math.radians(x)\n    x1 = math.cos(radians) * math.cos(radians)\n    y1 = math.sin(radians) * math.sin(radians)\n    z1 = math.cos(radians) * math.sin(radians)\n    x2 = math.cos(radians) * math.sin(radians)\n    y2 = math.cos(radians) * math.cos(radians)\n    z2 = math.cos(radians) * math.cos(radians)\n    return (x1, y1, z1, x2, y2, z2)\ndef polar_rect_2d_3d_2d_2d_2d(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    radians = math.radians(x)\n    x1 = math.cos(radians) * math.cos(radians)\n    y1 = math.sin(radians) * math.sin(radians)\n    z1 = math.cos(radians) * math.sin(radians)\n    x2 = math.cos(radians) * math.sin(radians)\n    y2 = math.cos(radians) * math.cos(radians)\n    z2 = math.cos(radians) * math.cos(radians)\n    return (x1, y1, z1, x2, y2, z2)\ndef polar_rect_2d_3d_2d_3d(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    radians = math.radians(x)\n    x1 = math.cos(radians) * math.cos(radians)\n    y1 = math.sin(radians) * math.sin(radians)\n    z1 = math.cos(radians) * math.sin(radians)\n    x2 = math.cos(radians) * math.sin(radians)\n    y2 = math.cos(radians) * math.cos(radians)\n    z2 = math.cos(radians) * math.cos(radians)\n    return (x1, y1, z1, x2, y2, z2)\ndef polar_rect_2d_3d_2d_3d_2d(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    radians = math.radians(x)\n    x1 = math.cos(radians) * math.cos(radians)\n    y1 = math.sin(radians) * math.sin(radians)\n    z1 = math.cos(radians) * math.sin(radians)\n    x2 = math.cos(radians) * math.sin(radians)\n    y2 = math.cos(radians) * math.cos(radians)\n    z2 = math.cos(radians) * math.cos(radians)\n    return (x1, y1, z1, x2, y2, z2)\ndef polar_rect_2d_3d_2d_3d_2d_2d(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    radians = math.radians(x)\n    x1 = math.cos(radians) * math.cos(radians)\n    y1 = math.sin(radians) * math.sin(radians)\n    z1 = math.cos(radians) * math.sin(radians)\n    x2 = math.cos(radians) * math.sin(radians)\n    y2 = math.cos(ra"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x<0 and y<0:\n        if x<0:\n            print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n        if y<0:\n            print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n        if x>=0:\n            print(\"ERROR: This function cannot work in polar coordinates with non-negative values.\")\n        if y>=0:\n            print(\"ERROR: This function cannot work in polar coordinates with non-negative values.\")\n        if x==0:\n            print(\"ERROR: This function cannot work in polar coordinates with zero values.\")\n        if y==0:\n            print(\"ERROR: This function cannot work in polar coordinates with zero values.\")\n    elif x>0 and y>0:\n        if x>=0:\n            if x<0:\n                print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n            if x>0 and x<=pi:\n                print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n        if x<0:\n            if y<0:\n                print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n            if y>0 and y<=pi:\n                print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n        if y>0:\n            if x<0:\n                print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n            if x>0 and x<=pi:\n                print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>0 and y<0:\n        if x<0:\n            print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n        if y>0:\n            print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>0:\n        if x>=0:\n            if x<0:\n                print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n            if x<0 and x>=pi:\n                print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n        if x>=0:\n            if y<0:\n                print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n            if y>=pi:\n                print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n        if y>0:\n            if x<0:\n                print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n            if x>=pi:\n                print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>0 and y<0:\n        if x>0:\n            print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n        if x<0 and x>=pi:\n            print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>0:\n        if x<0:\n            print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n        if y>0:\n            print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>=0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>=0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>=0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>0 and y>0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>=0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>=0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>=0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>=0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>=0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>=0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>=0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x>=0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y<0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>=0:\n        print(\"ERROR: This function cannot work in polar coordinates with negative values.\")\n    elif x<0 and y>=0"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    polar_x = cmath.polar(x)\n    polar_y = cmath.polar(y)\n    x_real = polar_x.real\n    y_real = polar_y.real\n    z = complex(0.0,0.0)\n    z = complex(polar_x.imag, polar_y.imag)\n    x_final = complex(x_real, y_real)\n    return (x_final,y_real,z)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = 0.5*x**2\n    b = 1 + 1j*y\n    c = 1 - 2*x\n    return (c,a,b)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = complex(x)\n    y = complex(y)\n    r = complex(cmath.sqrt(x**2 + y**2), 0)\n    angle = cmath.phase(y) * 2 * cmath.pi\n    return [r.real, r.imag, angle]\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    try:\n        radian = x\n        phi = cmath.phase(y)\n        theta = cmath.phase(cmath.cos(radian))\n        return x,y,theta,phi\n    except:\n        return 1,1,1,1\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x,y)\ndef polar_cart(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    return cmath.sqrt(x**2+y**2)\ndef polar_from_cart(x,y):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return cmath.polar(x,y)\ndef polar_to_rect(polar_coord):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(polar_coord[0],polar_coord[1])\ndef polar_to_cart(polar_coord):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    return cmath.sqrt(polar_coord[0]**2+polar_coord[1]**2)\ndef polar_from_rect(polar_coord):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return polar_cart(polar_coord[0],polar_coord[1])\ndef polar_to_cart(polar_coord):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    return polar_to_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return polar_from_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_to_rect(polar_coord):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(polar_coord[0],polar_coord[1])\ndef polar_to_cart(polar_coord):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return polar_to_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_rect(polar_coord):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return polar_from_rect(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_to_cart(polar_coord):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    return polar_to_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_rect(polar_coord):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return polar_from_rect(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_to_cart(polar_coord):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return polar_from_cart(polar_coord[0],polar_coord[1])\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return polar_cart(polar_coord[0],polar_coord[1])\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return polar_to_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_rect(polar_coord):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return polar_from_rect(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_to_cart(polar_coord):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    return polar_to_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_to_cart(polar_coord):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    return polar_to_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return polar_from_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_to_rect(polar_coord):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(polar_coord[0],polar_coord[1])\ndef polar_to_cart(polar_coord):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return polar_to_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return polar_from_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return polar_from_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return polar_from_rect(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return polar_from_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return polar_from_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return polar_from_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return polar_from_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_rect(polar_coord):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.rect(polar_coord[0],polar_coord[1])\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    return polar_from_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return polar_from_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_cart(polar_coord):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    return polar_from_cart(cmath.rect(polar_coord[0],polar_coord[1]))\ndef polar_from_rect(polar_coord):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.rect(polar_coord[0],"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x < 0:\n        x = x * math.cos(math.pi / 2)\n    else:\n        x = x * math.cos(math.pi - math.pi/2)\n    if y < 0:\n        y = y * math.sin(math.pi / 2)\n    else:\n        y = y * math.sin(math.pi - math.pi/2)\n    return(x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x**2 + y**2\n    b = cmath.sqrt(a)\n    c = (-b)/(2*a)\n    d = 2*b*cmath.atan(y/x)\n    return a, b, c, d\ndef polar_rect2(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    c1 = (-b**2 + 4*a*c**2)\n    c2 = (b**2 - 4*a*c**2)\n    d1 = (-b**2 - 4*a*c**2)\n    d2 = (b**2 + 4*a*c**2)\n    if a<0 and c<0:\n        c1=c1*(-1)\n        d1=d1*(-1)\n    if a>0 and c>0:\n        c2=c2*(-1)\n        d2=d2*(-1)\n    if a<0 and d<0:\n        d1=d1*(-1)\n        c2=c2*(-1)\n    if a>0 and d>0:\n        d2=d2*(-1)\n        c2=c2*(-1)\n    return (c1,d1,c2,d2)\ndef polar_rect3(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect4(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return y,x\ndef polar_rect5(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect6(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect7(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect8(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect9(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect10(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return y,x\ndef polar_rect11(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return y,x\ndef polar_rect12(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return y,x\ndef polar_rect13(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return y,x\ndef polar_rect14(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect15(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return y,x\ndef polar_rect16(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return y,x\ndef polar_rect17(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect18(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect19(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return y,x\ndef polar_rect20(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect21(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect22(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect23(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect24(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect25(a,b,c,d):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = -b**2 - 4*a*c**2\n    y = b**2 + 4*a*c**2\n    return x,y\ndef polar_rect26(a,b,c,d):\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x/math.pi*2*math.pi\n    y = y/math.pi*2*math.pi\n    return x,y\ndef polar_rect_in_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = x/math.pi*2*math.pi\n    y = y/math.pi*2*math.pi\n    return x,y\ndef polar_cartesian_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_rect_in_cartesian_to_polar_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = x/math.pi*2*math.pi\n    y = y/math.pi*2*math.pi\n    return x,y\ndef polar_rect_to_cartesian_polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_polar_cartesian_to_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_rect_to_cartesian_polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_rect_polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_rect_to_cartesian_cartesian_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_rect_to_polar_rect_polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_rect_polar_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_rect_to_cartesian_rect_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_polar(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_rect_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_polar(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x = x*math.pi\n    y = y*math.pi\n    return x,y\ndef polar_cartesian_to_cartesian_cartesian(x,y):\n    '''\n    Write a function t"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(len(newList)):\n        newList[i],newList[0] = newList[0],newList[i]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    new_list = []\n    for i in range(len(newList)):\n        new_list.append(newList[i])\n        new_list.append(newList[i][::-1])\n    return new_list\n    \n    # pass # delete this line and replace with your code here\n    "
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # create a new list\n    newList.reverse()\n    # add the first element\n    newList.append(newList.pop(0))\n    # add the last element\n    newList.append(newList.pop())\n    # return the new list\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return [newList[1],newList[0]]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.sort() \n    newList = newList[0:len(newList)-1] + newList[len(newList)-1:]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    swap = []\n    last = len(newList)-1\n    first = 0\n    for i in range(len(newList)):\n        swap.append(newList[i])\n    for i in range(last):\n        swap.append(newList[i])\n    for i in range(first, last):\n        newList[i], newList[first] = newList[first], newList[i]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"swapping items\",end=\"\\n\\n\")\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[2]\n    newList[2] = temp\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # If the variable n is negative, then we need to use -1 as a subscript\n    # For positive numbers, we can use the value of n as a subscript\n    # For negative numbers, we can use -n as a subscript\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        raise Exception('n must be non-negative')\n    else:\n        return binomial_Coeff(n - 1,k)*n\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    else:\n        return binomial_Coeff(n-1,k) * k\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    bin_coeffs = list()\n    bin_coeffs.append(1)\n    for i in range(1,k+1):\n        bin_coeffs.append((n-1)*(n-i)/i)\n    return sum(bin_coeffs)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    s = 0\n    for i in range(1,k+1):\n        s = s + sum(binomial(i, j) for j in range(1,n+1))\n    return s\n    # Fill this in\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    i = 1\n    while(i <= k): \n        n = n * (n-1) \n        i = i + 1 \n    return n\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    if n == 0:\n        return 1\n    for i in range(n):\n        coeff = coeff * (binomial_Coeff(n-1,k-1) * binomial_Coeff(i+1,k-1))\n    return coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #calculate all the product coefficients of n, k, k-1, 2k, 3k-1,...\n    #The product coefficient for binomial coefficient is equal to (n-k) * (k+1) / (2*(2*k+1))\n    # In this code, we want to multiply all the coefficients by the same number. \n    # In order to get the sum of all the product coefficients, we use following for loop.\n    # As we iterate through the list, we find the sum of the product coefficient. \n    # So, if n = 5 and k = 2, we find 1 + 5^2 + 2^2 + 2^3 + 3^2 +... = (5 * 2^2) + 2^2 + 2^3 + 3^2 + 4^2 + 4^3 +... = 1\n    # \n    # After iterating through all the products of the list, we multiply them to get the sum.\n    \n    #After running the for loop, we multiply the sum by the number of products of binomial coefficient.\n    # After that, we multiply all the product coefficients by the sum.\n    # So, if n = 5 and k = 2, we have (5 * 2^2) + 2^2 + 2^3 + 3^2 +... = 5 * 2^2 + 2^2 + 2^3 + 3^2 + 4^2 + 4^3 +... = 1. \n    # \n    # Now, we multiply the sum with the number of products of binomial coefficient.\n    # We can see that for each product of binomial coefficient, \n    # we multiply the sum by the product of binomial coefficient.\n    # So, if n = 5 and k = 2, we have (5 * 2^2) + 2^2 + 2^3 + 3^2 + 4^2 + 4^3 +... = 5 * 2^2 + 2^2 + 2^3 + 3^2 + 4^2 + 4^3 +... = 1. \n    # Now, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the product coefficients by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n    # So, we multiply all the products of binomial coefficient by the sum.\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    x = 1\n    while k > 0: \n        x = x + (n / k) \n        k = k - 1\n    return x\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k>=n:\n        return 0\n    if n==1:\n        return 1\n    return binomial_Coeff(n-1,k+1) * n**k\n    \n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(\\d+)([.\\-]\\d+)([.\\-]\\d+)*', r'\\1', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'0', \"\", ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ''.join(str(int(x, 16)) for x in ip.split('.'))\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = str(ip)\n    ip_len = len(ip)\n    ip_len_two_zeroes = int(ip_len - 2)\n    return ip[ip_len_two_zeroes:]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.lower()\n    zero_pattern = re.compile('^0')\n    zero_ip = zero_pattern.findall(ip)\n    if len(zero_ip)!= 0:\n        ip = ip.replace(zero_ip[0], '')\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # if isinstance(ip, str) and (ip.startswith('0.') or ip.startswith('127.') or ip.startswith('192.')):\n    #     return ip\n    return re.sub(r'(?:\\d{1,3})\\.', r'\\1', ip)\n    # return re.sub(r'(?:\\d{1,3})\\.', r'\\1', ip)\n    # return re.sub(r'(?:\\d{1,3})\\.', r'\\1', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    new_ip = []\n    new_ip.append(ip[0])\n    new_ip.append(ip[1])\n    new_ip.append(ip[2])\n    new_ip.append(ip[3])\n    return '.'.join(new_ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    my_ip = ip.strip()\n    return re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$', '', my_ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(ip[0]=='0'):\n        return ip\n    return ip[1:]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = []\n    for index, char in enumerate(ip):\n        if char == \"0\":\n            ip_list.append(index)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        print(\"List is divisible by 2\")\n        return list1[0]\n    else:\n        print(\"List is not divisible by 2\")\n        return \"List is not divisible by 2\"\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    # Step 1\n    # initialise a list, and the result variable\n    list1 = []\n    # loop through the whole list\n    for i in range(len(list1)):\n        # if the current index is even, increment\n        if (i % 2) == 0:\n            list1.append(list1[i])\n        # if the current index is odd, append\n        else:\n            list1.append(list1[i])\n            \n    # return the result\n    return list1\n    \n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = 0\n    \n    for i in range(len(list1)):\n        if (list1[i] % 2) == 0:\n            even_odd += list1[i]\n            \n    return even_odd\n    \nprint(\"The first number is\", list1[0])\nprint(\"The second number is\", list1[1])\nprint(\"The difference is\", diff_even_odd(list1)"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = 0\n    for i in range(0,len(list1)-1):\n        if list1[i]%2 == 0:\n            diff += list1[i]\n        else:\n            diff += list1[i]\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    print(\"The difference of even and odd numbers in the given list is: \", even - odd)\n    \n    \n    \ndef max_of_three(a, b, c):\n    '''\n    Write a function that accepts three numbers as parameters. The function should return the maximum of these three numbers.\n    '''\n    print(max(a, b, c))\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = 0\n    for i in range(len(list1)-1):\n        if i % 2 == 0:\n            diff = diff + abs(list1[i] - list1[i+1])\n        else:\n            diff = diff + abs(list1[i+1] - list1[i])\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)<2:\n        return\n    if len(list1)%2==0:\n        list1_even=list1[:len(list1)//2]\n        list1_odd=list1[len(list1)//2:]\n        return list1_even-list1_odd\n    else:\n        list1_even=list1[:len(list1)//2]\n        list1_odd=list1[len(list1)//2:len(list1)//2+1]\n        return list1_odd-list1_even\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) <= 1:\n        return 0\n    return list1[0] - list1[len(list1)//2]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_and_even = []\n    even_and_odd = []\n    if len(list1) % 2 == 0:\n        for i in range(0, len(list1)):\n            if i % 2 == 0:\n                even_and_even.append(list1[i])\n            else:\n                odd_and_even.append(list1[i])\n        print(even_and_even)\n        print(odd_and_even)\n    else:\n        for i in range(0, len(list1)):\n            if i % 2 == 0:\n                even_and_even.append(list1[i])\n            else:\n                odd_and_even.append(list1[i])\n        print(even_and_even)\n        print(odd_and_even)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    n = len(str1)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    \n    for i in range(len(str1)):\n        if str1[i]=='1' and str2[i]=='0':\n            count+=1\n        else:\n            count-=1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # your code here\n    if str1==str2:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    \n    #Create a dictionary for the binary strings\n    dict_bin = {}\n    for char in str1:\n        if char not in dict_bin.keys():\n            dict_bin[char] = 1\n        else :\n            dict_bin[char] += 1\n    #print(dict_bin)\n    \n    #Create a dictionary for the binary strings\n    dict_bin2 = {}\n    for char in str2:\n        if char not in dict_bin2.keys():\n            dict_bin2[char] = 1\n        else :\n            dict_bin2[char] += 1\n    #print(dict_bin2)\n    \n    #Create a count for each difference\n    for diff in dict_bin2.values():\n        if diff == 1:\n            count += 1\n    #print(count)\n    \n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    count_swaps = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # count number of transpositions\n    count = 0\n    # count number of times same symbol occurs consecutively\n    count_1 = dict.fromkeys(str1,0)\n    # loop through string\n    for i in str1:\n        # print(i)\n        if i in count_1.keys():\n            # if symbol is in count_1, increment count\n            count += 1\n            # if symbol is not in count_1, decrement count\n            count_1[i] -= 1\n    # loop through string\n    for j in str2:\n        # print(j)\n        if j in count_1.keys():\n            # if symbol is in count_1, increment count\n            count += 1\n            # if symbol is not in count_1, decrement count\n            count_1[j] -= 1\n    # count number of transpositions\n    count = count - count_1.get(str2[0],0)\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m=len(str1)\n    n=len(str2)\n    min_swaps=0\n    if n<m :\n        return 0\n    if (m-n)%2==0 :\n        min_swaps=2*(m-n)\n        return min_swaps\n    else :\n        min_swaps=2*(m-n)\n        min_swaps+=1\n        for i in range(0,m-n+1) :\n            temp1=str1[i:i+n]\n            temp2=str2[i:i+n]\n            min_swaps+=1\n            min_swaps+=1\n            if temp1==temp2 :\n                return min_swaps\n        return min_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1=str(bin(ord(str1)))[2:]\n    str2=str(bin(ord(str2)))[2:]\n    count=0\n    for i in range(len(str1)) : \n        if str1[i]!=str2[i] : \n            count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    #Create a temporary variable to hold string values.\n    temp_str1 = list(str1)\n    temp_str2 = list(str2)\n    count = 0\n    \n    #Loop through each char in the string.\n    for i in range(0,len(temp_str1)) :\n        #If a char is not a zero then place it in the right place.\n        if temp_str1[i]!= \"0\" :\n            temp_str1[i] = 1\n        else :\n            temp_str1[i] = 0\n        \n        #If a char is not a zero then place it in the left place.\n        if temp_str2[i]!= \"0\" :\n            temp_str2[i] = 0\n        else :\n            temp_str2[i] = 1\n    \n        #Check if there are any missing values in the string.\n        if sum(temp_str1)!= sum(temp_str2) :\n            count += 1\n            #If there is a missing value then add it to the count.\n            for j in range(i,len(temp_str1)) :\n                if temp_str1[j] == 0 :\n                    temp_str1[j] = 1\n                else :\n                    temp_str1[j] = 0\n                \n                if temp_str2[j] == 0 :\n                    temp_str2[j] = 1\n                else :\n                    temp_str2[j] = 0\n    \n    #Return the total number of swaps.\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1) == len(str2):\n        if str1 == str2:\n            return 0\n        elif str1[0] == str2[0]:\n            return 1 + min_Swaps(str1[1:],str2[1:])\n        elif str1[0]!= str2[0]:\n            return 2 + min_Swaps(str1,str2[1:])\n        else:\n            return 3 + min_Swaps(str1,str2[1:])\n    else:\n        return -1\n    \ndef max_Swaps(str1,str2) : \n    '''\n    Write a python function to count maximum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1) == len(str2):\n        if str1 == str2:\n            return 0\n        elif str1[0] == str2[0]:\n            return 1 + max_Swaps(str1[1:],str2[1:])\n        elif str1[0]!= str2[0]:\n            return 2 + max_Swaps(str1,str2[1:])\n        else:\n            return 3 + max_Swaps(str1,str2[1:])\n    else:\n        return -1\n    \ndef min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1) == len(str2):\n        if str1 == str2:\n            return 0\n        elif str1[0] == str2[0]:\n            return 1 + min_Swaps(str1[1:],str2[1:])\n        elif str1[0]!= str2[0]:\n            return 2 + min_Swaps(str1,str2[1:])\n        else:\n            return 3 + min_Swaps(str1,str2[1:])\n    else:\n        return -1\n    \ndef max_Swaps(str1,str2) : \n    '''\n    Write a python function to count maximum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1) == len(str2):\n        if str1 == str2:\n            return 0\n        elif str1[0] == str2[0]:\n            return 1 + max_Swaps(str1[1:],str2[1:])\n        elif str1[0]!= str2[0]:\n            return 2 + max_Swaps(str1,str2[1:])\n        else:\n            return 3 + max_Swaps(str1,str2[1:])\n    else:\n        return -1\n    \ndef bin_to_str(number): \n    '''\n    Write a python function to convert binary numbers in a given string format to a string of words using DFS traversal.\n    '''\n    if len(str(number)) == 1 :\n        return str(number)\n    else : \n        return \"\".join([str(bin(number)[2:])[-1]] + bin_to_str(number // 2))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = 0\n    for elem in tuple_list:\n        size_of_tuple += elem.numb\n    return size_of_tuple\n    \ndef flatten_tuple(tuple_list):\n    '''\n    Write a function to flatten a tuple.\n    '''\n    return tuple([elem for sublist in tuple_list for elem in sublist])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_in_bytes = 0\n    for item in tuple_list:\n        size_in_bytes += sys.getsizeof(item)\n    return size_in_bytes\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += element.__sizeof__()\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list) * 4\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sizes = []\n    for i in tuple_list:\n        size = sys.getsizeof(i)\n        sizes.append(size)\n    return sizes\n    \ndef tuple_size_n_values(tuple_list, n):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sizes = []\n    for i in tuple_list:\n        size = sys.getsizeof(i)\n        sizes.append((size, i))\n    return sizes\n    \ndef tuple_size_average(tuple_list):\n    '''\n    Write a function to find the average size in bytes of the given tuple.\n    '''\n    return sum(tuple_size(tuple_list))/len(tuple_list)\n    \ndef tuple_size_n_avg(tuple_list, n):\n    '''\n    Write a function to find the average size in bytes of the given tuple.\n    '''\n    return sum(tuple_size_n_values(tuple_list, n))/len(tuple_list)\n    \ndef tuple_size_average_n(tuple_list, n):\n    '''\n    Write a function to find the average size in bytes of the given tuple.\n    '''\n    return sum(tuple_size_n_avg(tuple_list, n))/len(tuple_list)\n    \ndef tuple_sum(tuple_list):\n    '''\n    Write a function to find the sum of the given tuple.\n    '''\n    return sum(tuple_size(tuple_list))\n    \ndef tuple_sum_n(tuple_list, n):\n    '''\n    Write a function to find the sum of the given tuple.\n    '''\n    return sum(tuple_size_n_values(tuple_list, n))\n    \ndef tuple_sum_avg(tuple_list, n):\n    '''\n    Write a function to find the average sum of the given tuple.\n    '''\n    return sum(tuple_size_n_avg(tuple_list, n))/len(tuple_list)\n    \ndef tuple_sum_n_avg(tuple_list, n):\n    '''\n    Write a function to find the average sum of the given tuple.\n    '''\n    return sum(tuple_size_n_avg(tuple_list, n))/len(tuple_list)\n    \ndef tuple_sum_average(tuple_list):\n    '''\n    Write a function to find the average sum of the given tuple.\n    '''\n    return tuple_sum_avg(tuple_list, len(tuple_list))\n    \ndef tuple_average_n(tuple_list, n):\n    '''\n    Write a function to find the average sum of the given tuple.\n    '''\n    return tuple_sum_n(tuple_list, n)\n    \ndef tuple_average_n_avg(tuple_list, n):\n    '''\n    Write a function to find the average sum of the given tuple.\n    '''\n    return tuple_sum_n_avg(tuple_list, n)\n    \ndef tuple_average_n_avg_n(tuple_list, n):\n    '''\n    Write a function to find the average sum of the given tuple.\n    '''\n    return tuple_sum_n_avg(tuple_list, n)\n    \ndef tuple_average(tuple_list):\n    '''\n    Write a function to find the average of the given tuple.\n    '''\n    return tuple_average_n(tuple_list, len(tuple_list))/len(tuple_list)\n    \ndef tuple_average_n(tuple_list, n):\n    '''\n    Write a function to find the average of the given tuple.\n    '''\n    return tuple_sum_n_avg(tuple_list, n)/len(tuple_list)\n    \ndef tuple_average_n_avg(tuple_list, n):\n    '''\n    Write a function to find the average of the given tuple.\n    '''\n    return tuple_sum_n_avg(tuple_list, n)/len(tuple_list)\n    \ndef tuple_average_n_avg_n(tuple_list, n):\n    '''\n    Write a function to find the average of the given tuple.\n    '''\n    return tuple_sum_n_avg(tuple_list, n)/len(tuple_list)\n    \ndef tuple_average_n_n(tuple_list, n):\n    '''\n    Write a function to find the average of the given tuple.\n    '''\n    return tuple_sum_n(tuple_list, n)/len(tuple_list)\n    \ndef tuple_average_n_n_avg(tuple_list, n):\n    '''\n    Write a function to find the average of the given tuple.\n    '''\n    return tuple_sum_n_avg(tuple_list, n)/len(tuple_list)\n    \ndef tuple_average_n_n_avg_n(tuple_list, n):\n    '''\n    Write a function to find the average of the given tuple.\n    '''\n    return tuple_sum_n_avg(tuple_list, n)/len(tuple_list)\n    \ndef tuple_average_n_n_avg_n_avg(tuple_list, n):\n    '''\n    Write a function to find the average of the given tuple.\n    '''\n    return tuple_sum_n_avg(tuple_list, n)/len(tuple_list)\n    \ndef tuple_sum_complex(tuple_list):\n    '''\n    Write a function to find the sum of the given tuple.\n    '''\n    return sum(tuple_size(tuple_list))\n    \ndef tuple_sum_complex_n(tuple_list, n):\n    '''\n    Write a function to find the sum of the given tuple.\n    '''\n    return sum(tuple_size_n_values(tuple_list, n))\n    \ndef tuple_sum_complex_n_avg(tuple_list, n):\n    '''\n    Write a function to find the average sum of the given tuple.\n    '''\n    return sum(tuple_size_n_avg(tuple_list, n))\n    \ndef tuple_sum_complex_n_avg_n(tuple_list, n):\n    '''\n    Write a function to find the average sum of the given tuple.\n    '''\n    return sum(tuple_size_n_avg(tuple_list, n))/len(tuple_list)\n    \ndef tuple_sum_complex_n_avg_n_avg(tuple_list, n):\n    '''\n    Write a function to find the average of the given tuple.\n    '''\n    return sum(tuple_size_n_avg(tuple_list, n))/len(tuple_list)\n    \ndef tuple_sum_complex_average(tuple_list):\n    '''\n    Write a function to find the sum of the given tuple.\n    '''\n    return sum(tuple_size_average(tuple_list))\n    \ndef tuple_sum_complex_average_n(tuple_list, n):\n    '''\n    Write a function to find the average of the given tuple.\n    '''\n    return sum(tuple_size_average_n(tuple_list, n))\n    \ndef tuple_sum_complex_average_n_avg(tuple_list, n):\n    '''\n    Write a function to find the average of the given tuple.\n    '''\n    return sum(tuple_size_average_n(tuple_list, n))/len(tuple_list)\n    \ndef tuple_sum_complex_average_n_avg_n(tuple_list, n):\n    '''\n    Write a function to find the average of the given tuple.\n    '''\n    return sum(tuple_size_average(tuple_list))/len(tuple_list)\n    \ndef tuple_sum_complex_average_n_avg_"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for element in tuple_list:\n        tuple_size += len(element)\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list[0])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0 \n    for i in tuple_list:\n        size = size + len(i)\n    return size\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    #print(\"in find kth\",arr1)\n    #print(\"in find kth\",arr2)\n    \n    x,y=0,0\n    index=0\n    while x<len(arr1):\n        if arr1[x]<arr2[index]:\n            x+=1\n        else:\n            y=index\n            index+=1\n            if index==k:\n                return arr1[x]\n        print(\"arr1\",arr1)\n        print(\"arr2\",arr2)\n        print(\"x\",x)\n        print(\"y\",y)\n        print(\"index\",index)\n        print(\"k\",k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    for i in range(len(arr1)):\n        for j in range(i,len(arr2)):\n            if arr1[i]<arr2[j]:\n                return arr1[i]\n    \n    return arr2[j-k]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if (k == 0):\n        return arr1[k]\n    elif (k == len(arr1)):\n        return arr2[k-1]\n    else:\n        return arr1[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Function to get kth element from two sorted arrays.\n    def get_kth(arr1, arr2, k):\n        count = 0\n        for i in range(k):\n            if arr1[i] < arr2[count]:\n                count += 1\n        return arr1[i]\n    \n    # Function to get kth element from two sorted arrays.\n    def get_kth_2(arr1, arr2, k):\n        count = 0\n        for i in range(len(arr1)):\n            if arr1[i] < arr2[count]:\n                count += 1\n        return arr1[count]\n        \n    # Function to get kth element from two sorted arrays.\n    def get_kth_3(arr1, arr2, k):\n        l = k\n        for i in range(k):\n            if arr1[i] > arr2[i]:\n                l -= 1\n        return arr1[l]\n    \n    # Function to get kth element from two sorted arrays.\n    def get_kth_4(arr1, arr2, k):\n        l = k\n        for i in range(k):\n            if arr1[i] > arr2[i]:\n                l -= 1\n            if arr1[l] > arr2[l]:\n                l -= 1\n        return arr1[l]\n        \n    # Function to get kth element from two sorted arrays.\n    def get_kth_5(arr1, arr2, k):\n        if k == 1:\n            return get_kth_2(arr1, arr2, k)\n        else:\n            return get_kth_3(arr1, arr2, k)\n        \n    # Function to get kth element from two sorted arrays.\n    def get_kth_6(arr1, arr2, k):\n        l = k\n        for i in range(k):\n            if arr1[i] > arr2[i]:\n                l -= 1\n        return arr1[l]\n        \n    # Function to get kth element from two sorted arrays.\n    def get_kth_7(arr1, arr2, k):\n        l = k\n        for i in range(k):\n            if arr1[i] < arr2[i]:\n                l -= 1\n            if arr1[l] > arr2[l]:\n                l -= 1\n        return arr1[l]\n    \n    if arr1 == arr2:\n        return arr1[k]\n    else:\n        if k == len(arr1):\n            return get_kth(arr1, arr2, k)\n        else:\n            return get_kth_2(arr1, arr2, k)\n        \n    "
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == arr2:\n        return arr1[k-1]\n    \n    if arr1[k] > arr2[k]:\n        return find_kth(arr2, arr1, k)\n    \n    return find_kth(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Write your code here.\n    arr1_index = 0\n    arr2_index = 0\n    k = k - 1\n    while(arr1[arr1_index] < arr2[arr2_index]):\n        # swap the two elements\n        arr1[arr1_index], arr2[arr2_index] = arr2[arr2_index], arr1[arr1_index]\n        # add one to index to make it right after kth element\n        arr1_index += 1\n        arr2_index += 1\n        # if the element is greater than the kth element then we have to decrease the index of kth element\n        if(arr1_index == arr2_index):\n            while(arr1_index < arr2_index):\n                arr1[arr1_index] += 1\n                arr1_index += 1\n            return arr2[arr2_index]\n    return arr2[arr2_index]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # We need to find the first element\n    if arr1 is None:\n        return arr2[k-1]\n    \n    # We need to find the last element\n    if arr2 is None:\n        return arr1[k-1]\n    \n    # We need to find the middle element\n    if k == 1:\n        return arr1[0]\n    \n    # We need to find the midpoint\n    mid = (k-1)//2\n    \n    if arr1[mid] > arr2[mid]:\n        return find_kth(arr1, arr2, mid)\n    elif arr2[mid] > arr1[mid]:\n        return find_kth(arr2, arr1, mid)\n    else:\n        return arr1[mid]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = len(arr1) - 1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Returns the index of the element whose value is equal to k, or -1 if there is no such element\n    def kth(arr1, arr2, k):\n        left = 0\n        right = len(arr1) - 1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2 or len(arr1) < len(arr2):\n        return -1\n    \n    mid = len(arr1) // 2\n    if mid + 1 < len(arr1):\n        l = arr1[mid]\n    else:\n        l = arr2[mid]\n    \n    if l <= arr1[mid]:\n        return l\n    \n    if l >= arr2[mid]:\n        return l\n    \n    if k == 1:\n        return -1\n    \n    if k < 1:\n        return find_kth(arr1, arr2, k)\n    return find_kth(arr1, arr2, k - 1)\n    \ndef bubbleSort(arr):\n    '''\n    Sort the given array using bubble sort.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    a = []\n    number = str(number)\n    b = [int(i) for i in number]\n    for i in range(len(b)):\n        num = b[i]\n        a.append(num**3)\n    num = sum(a)\n    if num == number:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number == 0:\n        return False\n    digit = 0\n    temp = number\n    while temp!= 0:\n        digit = digit*10 + temp%10\n        temp //= 10\n    return digit == number and digit!= 0\n    \n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    arr = []\n    s = ''\n    num = number\n    while num > 0:\n        arr.append(num % 10)\n        num = num // 10\n    for i in range(len(arr)):\n        s = str(arr[i]) + s\n    if len(s) == len(set(s)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # define the logic to check the value of number using the built-in function\n    digits = []\n    for i in str(number):\n        digits.append(int(i))\n    # initialize an array to store the result\n    result = []\n    # calculate the value of result using the built-in function\n    for i in digits:\n        if len(str(i)) == 1:\n            result.append(i)\n        else:\n            num = str(i)\n            for j in range(0, len(num)):\n                if j % 2 == 0:\n                    result.append(num[j] + num[j + 1])\n                else:\n                    result.append(num[j] + num[j + 1])\n    # return the result\n    if len(str(number)) == 1:\n        return 'Armstrong number is:'+ str(number)\n    else:\n        return 'Not armstrong number'\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # your code goes here\n    temp_list = []\n    for i in str(number):\n        temp_list.append(int(i))\n    temp_list = sorted(temp_list)\n    result = 0\n    for i in temp_list:\n        result += i**len(temp_list)\n    if result == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def check(num):\n        count = 0\n        while num!= 0:\n            digit = num % 10\n            num = num // 10\n            count += 1\n        return count == number\n    \n    return check(number)\n    \n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #your code here\n    sum = 0\n    for i in str(number):\n        sum = sum + int(i)\n    if sum == number:\n        return \"Yes, the number is armstrong.\"\n    else:\n        return \"No, the number is not armstrong.\"\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    counter = 0\n    for i in str(number):\n        counter += int(i)**len(i)\n    return counter == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if type(number) is not int:\n        raise TypeError('must be an integer')\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for num in range(number):\n        total += num\n    average = total / number\n    print(f'Total: {total}')\n    print(f'Average: {average}')\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for n in range(1, number+1):\n        total += n\n    average = total / number\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    for i in range(1, n + 1):\n        sum = sum + i\n    avg = sum / n\n    return sum,avg\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    return sum/number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    num = 0\n    for i in range(1, len(number)):\n        num += number[i]\n    return (num/len(number))\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #This is an average of first n natural numbers.\n    #Write a function to find sum and average of first n natural numbers\n    sum=0\n    average=0\n    for i in range(1,number+1):\n        sum=sum+i\n        average=sum/i\n    print(f'Sum of natural numbers is : {sum}')\n    print(f'Average of natural numbers is : {average}')\n    \ndef sum_multi(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #This is an average of first n natural numbers.\n    #Write a function to find sum and average of first n natural numbers\n    sum=0\n    multi=1\n    for i in range(1,number+1):\n        sum=sum+i*multi\n        multi=multi*10\n    print(f'Sum of natural numbers is : {sum}')\n    print(f'Average of natural numbers is : {sum/number}')\n    \ndef main():\n    '''\n    Write a program to sum and average of first n natural numbers.\n    '''\n    sum=0\n    number=int(input('Enter number of natural numbers you want to calculate: '))\n    for i in range(1,number+1):\n        sum=sum+i\n    print(f'Sum of natural numbers is : {sum}')\n    print(f'Average of natural numbers is : {sum/number}')\n    \n    sum_multi(number)\n    \nmain()    \n        "
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # pass\n    sum = 0\n    for num in range(0,number):\n        sum += num\n    average = sum/number\n    return sum,average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    num=[]\n    for i in range(1,number+1):\n        num.append(i)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    n = 0\n    while n <= number:\n        total += n\n        n += 1\n    average = total / number\n    return average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for number in range(0, number):\n        number = int(input(\"Enter the value: \"))\n        sum = sum + number\n    avg = sum/number\n    print(\"The average value is\", avg)\n    print(\"The number is\", number)\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # code here\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #Accepts an argument n and returns true if n is even and false otherwise\n    if n%2==0 : \n        return True\n    return False\ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    #Accepts an argument n and returns true if n is odd and false otherwise\n    if n%2==1 : \n        return True\n    return False\ndef print_even(num) : \n    '''\n    Write a python function to print even numbers.\n    '''\n    for i in num : \n        print(i, end ='')\ndef print_odd(num) : \n    '''\n    Write a python function to print odd numbers.\n    '''\n    for i in num : \n        print(i, end ='')\ndef main() : \n    '''\n    Writ a python function to print sum of all numbers in the list.\n    '''\n    print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    num = input(\"Please enter the numbers of numbers you want to print : \")\n    print_even(list(map(int, num.split())))\n    print_odd(list(map(int, num.split())))\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        print('{} is an even number.'.format(n))\n    else:\n        print('{} is an odd number.'.format(n))\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return 'even'\n    else : \n        return 'odd'\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # write your code here\n    # list_of_characters = list(str1)\n    # character = str1[0]\n    # for char in range(1,len(str1)):\n    #     if str1[char] == character:\n    #         list_of_characters.remove(char)\n    #         character = str1[char]\n    # return character\n    if len(str1) == 1:\n        return \"no repeated character\"\n    else:\n        return first_repeated_char(str1[1:])\n    \n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Creating a list of characters\n    chars = [i for i in str1]\n    # Iterating through characters\n    for i in range(len(chars)):\n        # Checking if the character is repeated\n        if chars[i] == chars[i+1]:\n            return i+1\n    # If the character is not repeated\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    last_index = len(str1) - 1\n    first_index = 0\n    while last_index > first_index:\n        if str1[first_index] == str1[last_index]:\n            first_index += 1\n        else:\n            break\n    return first_index\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code goes here\n    if len(str1) == 0:\n        return None\n    if str1[0] == str1[-1]:\n        return str1[0]\n    else:\n        return str1[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeat = []\n    for i in range(len(str1)):\n        if str1[i] not in repeat:\n            repeat.append(str1[i])\n        else:\n            return str1[i]\n    \n    return '_'\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = dict()\n    s = str1.lower()\n    for char in s:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    first_char = list(d.keys())[0]\n    return first_char\n    \nprint(first_repeated_char(\"Test string\"))\n    \n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Define the function\n    def first_repeated_char(string):\n        # If no string is provided\n        if type(string) is str:\n            # Find the repeated character in the string\n            for char in string:\n                if char in string and string.count(char) > 1:\n                    return char\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    freq={}\n    for i in str1:\n        if i in freq:\n            freq[i]+=1\n        else:\n            freq[i]=1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # \ud83d\udea8 Don't change the code below \ud83d\udc47\n    a=str1.split()\n    b=[]\n    for i in a:\n        if i in b:\n            b.remove(i)\n        else:\n            b.append(i)\n    b.sort()\n    # for i in a:\n    #     if i in b:\n    #         b.remove(i)\n    return b[0]\n    # \ud83d\udc4b\n    \n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    counter = {}\n    for i in str1:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i <= n:\n            if i <= n/2:\n                ludic.append(i)\n            else:\n                ludic.append(i - 2*n)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            result.append(i)\n        elif i % 3 == 0:\n            result.append(i)\n        elif i % 5 == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(1, n):\n        if n % i == 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = list(range(2, n+1))\n    for i in range(2, n+1):\n        if i in ludic_list:\n            ludic_list.remove(i)\n    return ludic_list\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        ludic.append(i)\n        if i%10==9:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    lucid_range = set(range(1,n+1))\n    \n    for num in lucid_range:\n        if num < n:\n            lucid_range.discard(num)\n            \n    return list(lucid_range)\n        \nprint(get_ludic(10))\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n + 1):\n        ludic_list.append(i)\n        if ludic_list[-1] % 2!= 0:\n            continue\n        for j in range(2, (n + 1)):\n            if ludic_list[j] % 2 == 0:\n                break\n            else:\n                continue\n        else:\n            print(ludic_list[j])\n            return\n    return\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = set()\n    i = 2\n    while i <= n:\n        if i % 3 == 0:\n            ludic.add(i)\n        elif i % 3 == 1:\n            ludic.add(i)\n        else:\n            ludic.add(i)\n        i += 2\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if n % i == 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def num_ludic(n):\n        if n == 0:\n            return ''\n        for i in range(n):\n            n = num_ludic(n-1)\n        return n+1\n    return num_ludic(n)\n    #TODO: Complete this function\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split()[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    new_list = []\n    word = s.split(\" \")\n    for i in range(len(word)):\n        new_list.append(word[len(word)-i-1])\n    new_list.reverse()\n    return \" \".join(new_list)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    split_words = s.split(' ')\n    list_words = []\n    for word in split_words:\n        list_words.append(word[::-1])\n    return''.join(list_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    #print(words)\n    new_words = []\n    for word in words:\n        new_words.append(word)\n        #print(new_words)\n        #new_words.append(word[::-1])\n    #print(new_words)\n    return''.join(new_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # remove spaces\n    s = s.replace(\" \", \"\")\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return \"\"\n    elif len(s) == 1:\n        return s\n    else:\n        return s[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_word(s):\n        return s[::-1].replace(' ', '')\n    # write your code here\n    s = s.split()\n    return''.join(reverse_word(i) for i in s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_words(s):\n        '''\n        reverse a string\n        '''\n        s_split = s.split()\n        s_new =''.join(s_split[::-1])\n        return s_new\n        \n        pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass\n    \n    pass"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split())\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    rev_words = \"\"\n    split_words = s.split(' ')\n    for word in split_words:\n        rev_words += word + \" \"\n    return rev_words.rstrip()\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, num - 1, 6):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    def is_prime(number):\n        if number > 1:\n            for i in range(2, number):\n                if (number % i) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False\n        \n    if num > 1:\n        if (num % 2 == 0) and (num!= 3):\n            return False\n        else:\n            if not is_prime(num):\n                return False\n            else:\n                return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    \n    i = 5\n    while i**2 <= num:\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    def is_prime(num):\n        if num == 2:\n            return True\n        if num < 2 or num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [is_prime(i) for i in range(3, num + 1)]\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3 or num == 5 or num == 7:\n        return True\n    elif num > 1 and num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 0:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    num_list = list(str(num))\n    if num == 2:\n        return True\n    if num == 3:\n        return False\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(num ** 0.5) + 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num<2:\n        return False\n    if num==2:\n        return True\n    if num%2==0:\n        return False\n    for i in range(3,int(num**0.5)+1,2):\n        if num%i==0:\n            return False\n    return True\n    \nprint(prime_num(int(input())))"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5,num//2):\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians_per_degree = degree/180.0*math.pi\n    return radians_per_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * math.pi/180\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree % 360\n    degree_rad = math.radians(degree)\n    return degree_rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * 180.0 / math.pi\n    return round(radian_degree, 2)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radians_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef deg2rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radians2deg(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*180/math.pi\ndef cos(degree,degree1):\n    '''\n    Write a function to calculate cosine of the given degree.\n    '''\n    result=math.cos(radian_degree(degree))*math.cos(radian_degree(degree1))\n    return result\ndef sin(degree,degree1):\n    '''\n    Write a function to calculate sine of the given degree.\n    '''\n    result=math.sin(radian_degree(degree))*math.sin(radian_degree(degree1))\n    return result\ndef tan(degree,degree1):\n    '''\n    Write a function to calculate tangent of the given degree.\n    '''\n    result=math.tan(radian_degree(degree))*math.tan(radian_degree(degree1))\n    return result\ndef to_deg(degree):\n    '''\n    Write a function to convert degrees to degrees.\n    '''\n    return degree*180/math.pi\ndef to_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef to_rad_second(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*2\ndef to_rad_minute(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*5\ndef to_rad_hour(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*10\ndef to_rad_day(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60\ndef to_rad_week(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*1440\ndef to_rad_month(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*2880\ndef to_rad_year(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*604800\ndef to_rad_minute_second(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24\ndef to_rad_hour_minute_second(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60\ndef to_rad_hour_minute_second_day(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24\ndef to_rad_hour_minute_second_week(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7\ndef to_rad_hour_minute_second_month(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10\ndef to_rad_hour_minute_second_year(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10*12\ndef to_rad_day_month_year(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10*12*12\ndef to_rad_week_month_year(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10*12*12*24\ndef to_rad_week_month_year_day(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10*12*12*24*7\ndef to_rad_week_month_year_day_week(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10*12*12*24*7*10\ndef to_rad_week_month_year_day_month(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10*12*12*24*7*10*12\ndef to_rad_week_month_year_day_month_year(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10*12*12*24*7*10*12*12\ndef to_rad_week_month_year_day_month_year_day(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10*12*12*24*7*10*12*12*24\ndef to_rad_week_month_year_day_month_year_day_week(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10*12*12*24*7*10*12*12*24*7*10*12\ndef to_rad_week_month_year_day_month_year_day_month_year(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10*12*12*24*7*10*12*12*24*7*10*12*12\ndef to_rad_week_month_year_day_month_year_day_month_year_day(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10*12*12*24*7*10*12*12*24*7*10*12*12\ndef to_rad_week_month_year_day_month_year_day_month_year_day_week(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10*12*12*24*7*10*12*12*24*7*10*12*12\ndef to_rad_week_month_year_day_month_year_day_month_year_day_week(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180*60*60*24*60*24*7*10*12*12*24*7*10*12*12*24*7*10*12*12\ndef to_rad_week_month_year_day_month_yea"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree*(math.pi/180)\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match_obj = regex.finditer(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.findall(text)\n    return (match[0], match[1], match[2])\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    substring = ''\n    start = 0\n    end = 0\n    counter = 0\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        print(\"{0} at index {1} matches pattern {2}\".format(text, match.start(), pattern))\n        return match.start(), match.end()\n    else:\n        print(\"Did not find {0} in {1}\".format(pattern, text))\n        return 0,0\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Find the end index of the pattern\n    i = pattern.find('.')\n    # If the pattern is not found anywhere, return the whole text\n    if i == -1:\n        return text, 0, len(text)\n    # Otherwise, find the start index of the pattern\n    else:\n        # Find the start index of the pattern\n        i = pattern.find('{', i+1)\n        # Find the end index of the pattern\n        j = pattern.find('}', i+1)\n        # Return the matching substring, its start index and its end index\n        return text[i:j+1], i, j+1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    i = 0\n    start = -1\n    end = -1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # convert pattern to a regex\n    regex = re.compile(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = len(text) - 1\n    while end > start:\n        start_regex = re.search(pattern, text[start:end])\n        end_regex = re.search(pattern, text[end])\n        if start_regex:\n            start = start_regex.start()\n        if end_regex:\n            end = end_regex.end()\n        else:\n            return None, None, None\n    if start == end:\n        return None, start, end\n    else:\n        return start, end, None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = len(text)\n    result = []\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literals = {}\n    text = text.replace(\"'\", \"\").replace('\"', \"\")\n    start_index = -1\n    end_index = -1\n    for i, letter in enumerate(text):\n        if letter == '\"':\n            start_index = i\n        if letter == \"'\":\n            end_index = i\n    if start_index < 0:\n        raise Exception(\"Could not find start of string\")\n    if end_index < 0:\n        raise Exception(\"Could not find end of string\")\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    fact = math.factorial(n) \n    return fact // (math.factorial(n-1) * fact % 1_000_000)\n    \ndef floor_divide(num, divisor):\n    '''\n    Write a python function to find the floor of a given number.\n    '''\n    return int(num / divisor)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # We will store the nth value of bell number\n    num = [None for x in range(n+1)]\n    num[0] = 1\n    for i in range(n):\n        num[i+1] = num[i] + num[i-1]\n    return num[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Start at 1\n    # Keep track of last divisor\n    # Return the value\n    \n    # If n is odd, find divisor\n    # If n is even, divide by 2\n    # Return the nth value\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n > 9:\n        print(\"Error\")\n    else:\n        print(n + 1)\n        n += 1\n        bell_Number(n)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Write your code here\n    # return nth_bell_number\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        return bell_Number(n-1)+bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    x = 1\n    while x**2 <= n:\n        x = x + 1\n    return x\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    count = 1\n    for i in range(n):\n        print(count)\n        count += 1\n    return count\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bell_Number_start(n):\n        '''\n        Calculate the value of the nth term of the first nth terms of the bell Number.\n        '''\n        if n < 0:\n            print('invalid input')\n            return\n        if n == 0:\n            return 1\n        else:\n            return bell_Number_start(n-1) + bell_Number_start(n-2)\n    return bell_Number_start(n)\nprint(bell_Number(3))\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    else:\n        return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #declare a global variable to store n \n    global n \n    #declare a loop to calculate nth value \n    for i in range (1, n + 1): \n        #declare a temporary variable \n        temp = i \n        #declare a loop to find the number of divisors \n        #of a given number \n        while (temp % 2 == 0): \n            #print the number of divisors \n            print(temp) \n            #decrement the temporary variable \n            temp = temp // 2\n    return \n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    return list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    return list1[L-1:L]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    temp = []\n    for i in range(len(list1)):\n        temp.append(list1[i])\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(set(list1) - set(list1[L:len(list1)]))\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list_copy = list1.copy()\n    for i in range(len(list1)):\n        if len(list1) > L and list1[i] > list_copy[L-1]:\n            list_copy[L-1], list_copy[L-2] = list_copy[L-2], list_copy[L-1]\n        elif len(list1) > L and list1[i] < list_copy[L-1]:\n            list_copy.pop()\n        elif len(list1) > L and list1[i] == list_copy[L-1]:\n            list_copy.pop()\n    return list_copy\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    \n    return new_list\n    \n    \nlist1 = [1, 2, 3, 4, 5, 6, 7]\nprint(remove_kth_element(list1, 0))\nprint(list1"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # all_list = []\n    # if not L:\n    #     return []\n    #     # all_list = list1\n    #     # return all_list\n    # for each_item in list1:\n    #     if len(list1) == L:\n    #         break\n    #     else:\n    #         # all_list.append(each_item)\n    #         # all_list = list(dict.fromkeys(all_list))\n    #         list1.remove(each_item)\n    #         # all_list = all_list + list1\n    # return all_list\n    \n    \n    # return list1\n    # return list1[L:] + list1[:L]\n    \n    # return list1[:L] + list1[L + 1:]\n    # return list1[L:] + list1[:L] + list1[L + 1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L is None:\n        return None\n    elif L == []:\n        return []\n    else:\n        return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if not L:\n        return []\n    else:\n        k = L[0]\n        remove_kth_element(list1, L[1:])\n        for i in range(len(list1)):\n            if list1[i] == k:\n                list1.pop(i)\n        return list1\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # Step 1: take the length of the list as n and define the size as n-1\n    n = len(test_list)\n    # Step 2: first, build a dummy array for the size of the list.\n    #       the step 2.1 is the purpose of the dummy array\n    #       The idea is to create a list of n-1 size, which can be calculated using the fact that the dummy array holds the values of the first column.\n    #       The idea is to use the fact that the last index of each element is the index of the last element in the array.\n    #       The idea is to calculate the next index of the last element in the array.\n    #       The idea is to use the fact that the last index of each element is the index of the last element in the array, \n    #       and the previous index is the index of the previous element in the array.\n    #       This step is the same as the previous steps.\n    #       The step 2.2 is the purpose of the next index of the last element in the array.\n    #       The step 2.3 is the purpose of the previous index of the last element in the array.\n    #       The step 2.4 is the purpose of the next index of the last element in the array.\n    #       The step 2.5 is the purpose of the previous index of the last element in the array.\n    #       The step 2.6 is the purpose of the next index of the last element in the array.\n    #       The step 2.7 is the purpose of the previous index of the last element in the array.\n    #       The step 2.8 is the purpose of the next index of the last element in the array.\n    #       The step 2.9 is the purpose of the previous index of the last element in the array.\n    #       The step 2.10 is the purpose of the next index of the last element in the array.\n    #       The step 2.11 is the purpose of the previous index of the last element in the array.\n    #       The step 2.12 is the purpose of the next index of the last element in the array.\n    #       The step 2.13 is the purpose of the previous index of the last element in the array.\n    #       The step 2.14 is the purpose of the next index of the last element in the array.\n    #       The step 2.15 is the purpose of the previous index of the last element in the array.\n    #       The step 2.16 is the purpose of the next index of the last element in the array.\n    #       The step 2.17 is the purpose of the previous index of the last element in the array.\n    #       The step 2.18 is the purpose of the next index of the last element in the array.\n    #       The step 2.19 is the purpose of the previous index of the last element in the array.\n    #       The step 2.20 is the purpose of the next index of the last element in the array.\n    #       The step 2.21 is the purpose of the previous index of the last element in the array.\n    #       The step 2.22 is the purpose of the next index of the last element in the array.\n    #       The step 2.23 is the purpose of the previous index of the last element in the array.\n    #       The step 2.24 is the purpose of the next index of the last element in the array.\n    #       The step 2.25 is the purpose of the previous index of the last element in the array.\n    #       The step 2.26 is the purpose of the next index of the last element in the array.\n    #       The step 2.27 is the purpose of the previous index of the last element in the array.\n    #       The step 2.28 is the purpose of the next index of the last element in the array.\n    #       The step 2.29 is the purpose of the previous index of the last element in the array.\n    #       The step 2.30 is the purpose of the next index of the last element in the array.\n    #       The step 2.31 is the purpose of the previous index of the last element in the array.\n    #       The step 2.32 is the purpose of the next index of the last element in the array.\n    #       The step 2.33 is the purpose of the previous index of the last element in the array.\n    #       The step 2.34 is the purpose of the next index of the last element in the array.\n    #       The step 2.35 is the purpose of the previous index of the last element in the array.\n    #       The step 2.36 is the purpose of the next index of the last element in the array.\n    #       The step 2.37 is the purpose of the previous index of the last element in the array.\n    #       The step 2.38 is the purpose of the next index of the last element in the array.\n    #       The step 2.39 is the purpose of the previous index of the last element in the array.\n    #       The step 2.40 is the purpose of the next index of the last element in the array.\n    #       The step 2.41 is the purpose of the previous index of the last element in the array.\n    #       The step 2.42 is the purpose of the next index of the last element in the array.\n    #       The step 2.43 is the purpose of the previous index of the last element in the array.\n    #       The step 2.44 is the purpose of the next index of the last element in the array.\n    #       The step 2.45 is the purpose of the previous index of the last element in the array.\n    #       The step 2.46 is the purpose of the next index of the last element in the array.\n    #       The step 2.47 is the purpose of the previous index of the last element in the array.\n    #       The step 2.48 is the purpose of the next index of the last element in the array.\n    #       The step 2.49 is the purpose of the previous index of the last element in the array.\n    #       The step 2.50 is the purpose of the next index of the last element in the array.\n    #       The step 2.51 is the purpose of the previous index of the last element in the array.\n    #       The step 2.52 is the purpose of the next index of the last element in the array.\n    #       The step 2.53 is the purpose of the previous index of the last element in the array.\n    #       The step 2.54 is the purpose of the next index of the last element in the array.\n    #       The step 2.55 is the purpose of the previous index of the last element in the array.\n    #       The step 2.56 is the purpose of the next index of the last element in the array.\n    #       The step 2.57 is the purpose of the previous index of the last element in the array.\n    #       The step 2.58 is the purpose of the next index of the last element in the array.\n    #       The step 2.59 is the purpose of the previous index of the last element in the array.\n    #       The step 2.60 is the purpose of the next index of the last element in the array.\n    #       The step 2.61 is the purpose of the previous index of the last element in the array.\n    #       The step 2.62 is the purpose of the next index of the last element in the array.\n    #       The step 2.63 is the purpose of the previous index of the last element in the array.\n    #       The step 2.64 is the purpose of the next index of the last element in the array.\n    #       The step 2.65 is the purpose of the previous index of the last element in the array.\n    #       The step 2.66 is the purpose of the next index of the last element in the array.\n    #       The step 2.67 is the purpose of the previous index of the last element in the array.\n    #       The step 2.68 is the purpose of the next index of the last element in the array.\n    #       The step 2.69 is the purpose of the previous index of the last element in the array.\n    #       The step 2.70 is the purpose of the next index of the last element in the array.\n    #       The step 2.71 is the purpose of the previous index of the last element in the array.\n    #       The step 2.72 is the purpose of the next index of the last element in the array.\n    #       The step 2.73 is the purpose of the previous index of the last element in the array.\n    #       The step 2.74 is the purpose of the next index of the last element in the array.\n    #       The step 2.75 is the purpose of the previous index of the last element in the array.\n    #       The step 2"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_of_nth:\n            max_of_nth = row[N]\n    return max_of_nth\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    max = test_list[0][N-1]\n    for i in range(1,N):\n        if test_list[i][N-1] > max:\n            max = test_list[i][N-1]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val\n    \n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 1:\n        return test_list[0][0]\n    if N == 2:\n        return max(test_list[0][1], test_list[1][1])\n    if N == 3:\n        return max(test_list[0][2], test_list[1][2], test_list[2][2])\n    if N == 4:\n        return max(test_list[0][3], test_list[1][3], test_list[2][3], test_list[3][3])\n    if N == 5:\n        return max(test_list[0][4], test_list[1][4], test_list[2][4], test_list[3][4], test_list[4][4])\n    if N > 5:\n        return max(test_list[0][N-1], max(test_list[1][N-1], test_list[2][N-1], test_list[3][N-1], test_list[4][N-1]), test_list[N-1][0])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key=lambda x: x[N])[N]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[i][N-1] for i in range(len(test_list)))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key = lambda x:x[N-1])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    return max(test_list[0][N], test_list[1][N])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # YOUR CODE HERE\n    return max(test_list[0][N-1])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    \n    for i in range(len(lst)):\n        lst1.append(lst[i][0])\n        lst2.append(lst[i][1])\n    \n    return lst1, lst2\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge_two_lists(l1,l2):\n        \"\"\"\n        A python function that takes a list and a list as parameters, and merges them into a list.\n        \"\"\"\n        merged_list = []\n        for x,y in zip(l1,l2):\n            merged_list += [x,y]\n        return merged_list\n    merged_list = []\n    for list1 in lst:\n        for list2 in list1:\n            merged_list += [list2, list2]\n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_of_lists = []\n    for i in range(len(lst)):\n        temp_lst = []\n        for j in range(len(lst[i])):\n            temp_lst.append(lst[i][j])\n        lst_of_lists.append(temp_lst)\n    return lst_of_lists\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return []\n    return [lst[0]] + merge(lst[1:])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0][:2], lst[1][:2]]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Time Complexity = O(n)\n    # Space Complexity = O(n)\n    # Can't just use the built-in function list()\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        if lst1 == []:\n            lst1.append(i)\n            continue\n        elif i!= lst1[0]:\n            lst2.append(i)\n        else:\n            lst1.append(i)\n    return lst2\n    \n    \n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge_two_lists(lst):\n        '''\n        Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n        '''\n        i = 0\n        j = 0\n        merged_list = []\n        while i < len(lst) and j < len(lst):\n            if lst[i][j] == 0:\n                merged_list.append(lst[i])\n                i += 1\n            else:\n                merged_list.append(lst[j])\n                j += 1\n        merged_list = merged_list + lst[i:]\n        merged_list = merged_list + lst[:j]\n        return merged_list\n    return merge_two_lists(lst)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Write your code here\n    newLst = []\n    if len(lst) == 1:\n        return lst\n    for i in range(len(lst)):\n        newLst.append([lst[i][0],lst[i][1]])\n    return newLst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    \n    lst = []\n    final = []\n    for i in lst:\n        lst_2 = []\n        for j in i:\n            lst_2.append(j)\n        lst.append(lst_2)\n    for i in lst:\n        lst_1 = []\n        for j in i:\n            if not lst_1:\n                lst_1.append(j)\n            else:\n                lst_1.append(lst_1[0])\n        final.append(lst_1)\n    return final\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum = cumulative_sum + item\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative = 0\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for value in test_list:\n        sum += value\n    return sum\n    \n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in test_list:\n        total += i\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    l = []\n    for i in range(len(test_list)):\n        l.append(sum(test_list[i]))\n    return l\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for x in test_list:\n        cummulative_sum += x\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum=0\n    for i in range(len(test_list)):\n        sum+=test_list[i]\n    return sum\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i[1]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    elif len(test_list) == 1:\n        return test_list[0]\n    elif len(test_list) == 2:\n        return test_list[0] + test_list[1]\n    elif len(test_list) == 3:\n        return test_list[0] + test_list[1] + test_list[2]\n    else:\n        return test_list[0] + cummulative_sum(test_list[1:])\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # YOUR CODE HERE\n    cum=0\n    for i in test_list:\n        cum+=i\n    return cum\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if not nums:\n        raise ValueError('tuple is empty')\n    average = []\n    for i in nums:\n        if len(i) == 1:\n            average.append(i[0])\n        elif len(i) == 2:\n            average.append((sum(i[0]) / len(i[0])) + (sum(i[1]) / len(i[1])))\n        else:\n            raise ValueError('tuple contains more than one item')\n    return average\n    \nif __name__ == '__main__':\n    print(average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))))\n    print(average_tuple((('x', 'y', 'z'), ('a', 'b', 'c'), ('d', 'e', 'f'))))"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_list = []\n    for num in nums:\n        total_list.append(num[0])\n    total_list.sort()\n    return total_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # YOUR CODE HERE\n    return sum([(list(t)) for t in zip(*nums)]) / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(n) / len(n) for n in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Not a real solution, just try to have it execute as fast as possible!\n    return [round(sum(n) / len(n), 2) for n in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for i in nums:\n        total.append(sum(i)/len(i))\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        result.append(sum(t)/len(t))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    def average_list(tuple_of_tuples):\n        '''\n        We can perform average on a list of tuples, so the average of a tuple is calculated by a sum of the values in each tuple, and then divided by the number of tuples.\n        '''\n        def average_item(x):\n            return sum(x) / len(x)\n        \n        total = 0\n        for tuple in tuple_of_tuples:\n            total += tuple[1]\n            average = average_item(tuple[1])\n            average = average / len(tuple[1])\n            return average_item(tuple[1])\n        \n        return total / len(tuple_of_tuples)\n    \n    def average_list_subset(tuple_of_tuples):\n        '''\n        We can perform average on a list of tuples, so the average of a tuple is calculated by a subset of values in each tuple, and then divided by the number of tuples.\n        '''\n        def average_item(x):\n            return sum(x[0]) / len(x[0])\n        \n        total = 0\n        for tuple in tuple_of_tuples:\n            total += average_item(tuple[0])\n            average = average_item(tuple[1])\n            average = average / len(tuple[1])\n            return average_item(tuple[1])\n        \n        return total / len(tuple_of_tuples)\n    \n    list_tuple = []\n    for tuple in nums:\n        list_tuple.append((tuple[0], tuple[1]))\n    \n    return average_list(list_tuple)"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum(num)/len(num))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums_tuple = []\n    for i in nums:\n        nums_tuple.append(tuple(i))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tuple = tuple((x % y) for x, y in zip(test_tup1, test_tup2))\n    return modulo_tuple\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # First create a list of the first tuples\n    list1 = [(test_tup1[i], test_tup1[i]) for i in range(len(test_tup1))]\n    # Second create a list of the second tuples\n    list2 = [(test_tup2[i], test_tup2[i]) for i in range(len(test_tup2))]\n    \n    return ((list1[i][0] % list2[i][0]) for i in range(len(list1)))\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # your code goes here\n    \n    return (test_tup1[0] * test_tup2[1] % test_tup2[0], test_tup1[1] * test_tup2[0] % test_tup2[1])\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = [(x%y) for x,y in zip(test_tup1, test_tup2)]\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = (0,0)\n    for i in range(len(test_tup1[0])):\n        for j in range(len(test_tup2[0])):\n            modulo_tup = (modulo_tup[0] + test_tup1[1][i]*test_tup2[1][j], modulo_tup[1] + test_tup2[0][j]*test_tup1[1][i])\n    print(\"Modulo of tuples in order of tuples = \" + str(modulo_tup))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    #print(test_tup1, test_tup2)\n    if len(test_tup1)!= len(test_tup2):\n        print(\"the number of elements of two tuples is not the same\")\n        return None\n    else:\n        mod_test_tup = list(tuple([item for item in test_tup1]))\n        mod_test_tup[0] = mod_test_tup[0] % mod_test_tup[1]\n        mod_test_tup.append(mod_test_tup[0])\n        #print(mod_test_tup)\n        return tuple(mod_test_tup)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Invalid inputs'\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    def modulo(tup):\n        #print(tup)\n        return tup[1] % tup[0]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return test_tup1 % test_tup2"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    m, n = steps, d\n    visited = [[0 for _ in range(n)] for _ in range(m)]\n    return min_Jumps_DFS(steps, d, m, n, visited)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Define the origin\n    origin = (0,0)\n    # Define the step size (x and y)\n    x_step = abs(d[0] - origin[0])\n    y_step = abs(d[1] - origin[1])\n    # Number of jumps required for current position\n    jumps = 0\n    # Check if the step is possible to reach the destination\n    if d[0] == d[1] and (x_step + y_step + 1) == d[2]:\n        # We reached the destination\n        return jumps\n    # If the step isn't possible to reach the destination\n    else:\n        # Iterate through the possible jumps\n        for i in range(steps):\n            # Check if the step is possible to reach the destination\n            if abs(x_step + y_step + 1 - i) <= d[2]:\n                # We reached the destination\n                return jumps\n        # Number of jumps found is inf because the step isn't possible to reach the destination\n        jumps = 1\n        return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    for i in range(steps):\n        count += (i+1) % 2\n    if steps % 2 == 0:\n        return count % d\n    else:\n        return count % (d+1)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d < 0:\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # INPUTS\n    # steps : array of steps in steps array (d: distance)\n    # d : distance from origin (integer)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # CHECKS\n    if (steps > d):\n        print('Incorrect steps value')\n        return 'Incorrect steps value'\n    \n    # DICTIONARIES\n    min_d = {}\n    for d in range(1, d):\n        min_d[d] = {}\n    \n    # PROCESS\n    for d in range(1,d):\n        for i in range(1, steps+1):\n            if (i==steps+1): \n                min_d[d][i] = d\n            else:\n                if(d>1):\n                    min_d[d][i] = min_d[d-1][i-1] + 1\n                else:\n                    min_d[d][i] = 1\n    # OUTPUT\n    return min_d[d][steps]\n    \ndef solution(steps, d):\n    '''\n    Write a function to calculate the number of jumps required to reach the origin from the origin.\n    '''\n    \n    # CHECKS\n    if (steps > d):\n        print('Incorrect steps value')\n        return 'Incorrect steps value'\n    \n    # DICTIONARIES\n    min_d = {}\n    for d in range(1,d):\n        min_d[d] = {}\n    \n    # PROCESS\n    for d in range(1,d):\n        for i in range(1,steps+1):\n            if (i==steps+1): \n                min_d[d][i] = d\n            else:\n                if(d>1):\n                    min_d[d][i] = min_d[d-1][i-1] + 1\n                else:\n                    min_d[d][i] = 1\n    # OUTPUT\n    return min_d[d][steps]\n    \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n, m = len(steps), len(steps[0])\n    if n < 2 or m < 2: return n * m\n    # base case\n    if d == 0: return 0\n    # recursive case\n    # if the number of steps of all moves is less than 2, return 0\n    if steps[0][1]!= 1: return min_Jumps(steps[0], d - 1)\n    # if the number of steps of all moves is 1, return 1\n    if steps[0][1] == 1: return 1\n    # if the number of steps of all moves is greater than 2, return 0\n    if steps[1][1]!= 1: return min_Jumps(steps[1], d)\n    # if the number of steps of all moves is 1, return 1\n    if steps[1][1] == 1: return 1\n    # find the position of the farthest point from origin\n    # (d-1) times number of steps of all moves\n    d_pos = d - 1 + steps[0][0]\n    # find the position of the farthest point from origin\n    # (d-1) times number of steps of all moves\n    d_pos_2 = d - 1 + steps[1][0]\n    # if the distance between the farthest point from origin and the position of the farthest point from origin is less than 2, return 0\n    if d_pos_2 < 2 or d_pos < 2: return 0\n    # otherwise, return the minimum number of jumps required\n    return min_Jumps(steps, d_pos) + min_Jumps(steps, d_pos_2)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for s in steps:\n        n = 1\n        while (s[0] - n < 0) or (s[0] + n > d[0][1]):\n            n+=1\n        s[0] -= n\n        for i in range(0, n):\n            s[1] += 1\n        if (s[0] < 0) or (s[0] > d[0][1]):\n            jumps += 1\n        jumps += 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    from copy import deepcopy\n    from typing import Callable\n    def jumps(steps, d):\n        '''\n        Step-by-step approach to calculate Jumps.\n        '''\n        def jumps_to(steps, d):\n            '''\n            Determines the number of jumps to reach a point of form (d, 0).\n            '''\n            return (steps // d) + (steps % d)\n        def jm(steps):\n            '''\n            Calculates the number of jumps required to reach a point of form (d, 0).\n            '''\n            if steps == 0:\n                return 0\n            else:\n                return jumps_to(steps, d) - jumps_to(steps - 1, d)\n        return jm(steps)\n    \n    if steps == 0:\n        return 0\n    if d == 0:\n        return 0\n    if (d, 0) in steps:\n        return 0\n    return jumps(steps, d)\n        \ndef fib(n):\n    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = d[0]\n    y = d[1]\n    moves = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    #return m\n    n = len(steps)\n    if n == 0:\n        return 0\n    if n == 1:\n        return min(steps[0], steps[1])\n    p = steps[n-2]\n    m = moves[n-2]\n    #check if we are at the end point\n    if p == x or p == y or p == m:\n        return -1\n    #check if we have reached the starting point\n    if p == 0 or p == 1:\n        return min(steps[n-1], steps[n-2])\n    #check if we have reached the target point\n    if p == x or p == y:\n        return min(steps[n-3], steps[n-4])\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we have reached the target point\n    #check if we hav"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div = []\n    for x in range(len(nums1)):\n        div.append(nums1[x] / nums2[x])\n    return div\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)==0 and len(nums2)==0:\n        return []\n    if len(nums1)==0:\n        return nums2\n    if len(nums2)==0:\n        return nums1\n    if nums1[0]<nums2[0]:\n        return num_list(nums1,nums2,True)\n    else:\n        return num_list(nums2,nums1,True)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #to convert both list to string in string format\n    # n1 = ''.join(str(x) for x in nums1)\n    # n2 = ''.join(str(x) for x in nums2)\n    # return [n1,n2]\n    if len(nums1)==0 or len(nums2)==0:\n        return []\n    elif len(nums1)==1 and len(nums2)>1:\n        return [nums2[0]]+div_list(nums2[1:],nums2[:-1])\n    elif len(nums1)>1 and len(nums2)==1:\n        return nums1\n    elif len(nums1)>1:\n        return nums1+div_list(nums1[1:],nums1[:-1])\n    else:\n        return nums2+div_list(nums2[1:],nums2[:-1])\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # write your code here\n    if len(nums1) == 0 or len(nums2) == 0:\n        return \"Error\"\n    if len(nums1) == 1:\n        return nums1[0]/nums2[0]\n    else:\n        if nums1[0] < nums2[0]:\n            return div_list(nums1[1:],nums2[1:])\n        elif nums1[0] > nums2[0]:\n            return div_list(nums1,nums2[1:])\n        elif nums1[0] == nums2[0]:\n            return nums1[0]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    \n    list_nums = nums1 + nums2\n    list_nums.sort()\n    index = 0\n    \n    if len(list_nums) % 2 == 1:\n        return list_nums\n    \n    while index < len(list_nums):\n        \n        if index < len(list_nums) - 1:\n            if list_nums[index] > list_nums[index + 1]:\n                index += 1\n        \n        if index == len(list_nums) - 1:\n            return list_nums[index:len(list_nums)]\n        \n        if list_nums[index] > list_nums[index + 1]:\n            return list_nums[index:index + 2]\n    \n        index += 1\n    \n    return list_nums\n    \nnums1 = [1, 3, 4]\nnums2 = [2, 5, 6]\nnums3 = []\nnums4 = [1, 2, 3, 4]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    newlist=[]\n    for i in range(0,len(nums1)):\n        newlist.append(nums1[i]/nums2[i])\n    return newlist\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l=[]\n    for i in range(len(nums2)):\n        l.append([nums1[i],nums2[i]])\n    return l\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list=[]\n    for i in range(0,len(nums1)):\n        if nums1[i] in nums2:\n            new_list.append(nums1[i])\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return list(map(list,list(zip(*sorted(zip(nums1,nums2))))))\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0:\n        return\n    if len(nums2) == 0:\n        return\n    \n    \n    #Modify the order\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    \n    #Finding the mid of the two sorted lists\n    mid = (len(nums1) + len(nums2)) // 2\n    \n    #Dummy variable to store the result\n    ans = 0\n    \n    #Divide the first list into two part\n    left = nums1[:mid]\n    right = nums1[mid:]\n    \n    #Divide the second list into two part\n    left = div_list(left,nums2)\n    right = div_list(right,nums2)\n    \n    #Merge both parts and check for outlier\n    while len(left) > 0 and len(right) > 0:\n        \n        #if the first element is smaller than the second\n        if left[0] <= right[0]:\n            #Add the first element to the result\n            ans += left[0]\n            #Remove the first element from the list\n            left.pop(0)\n        \n        else:\n            #Add the second element to the result\n            ans += right[0]\n            #Remove the second element from the list\n            right.pop(0)\n    \n    # if there are any left elements\n    if len(left) > 0:\n        #Add the remaining elements to the result\n        ans += left[0]\n        #Remove the first element from the list\n        left.pop(0)\n    \n    # if there are any right elements\n    if len(right) > 0:\n        #Add the remaining elements to the result\n        ans += right[0]\n        #Remove the second element from the list\n        right.pop(0)\n    \n    return ans\n        \n        \n    "
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    arr = []\n    for char in test_str:\n        if char.isdigit():\n            arr.append(char)\n    for i in range(len(arr)):\n        num = arr[i]\n        arr[i] = arr[-1]\n        arr[-1] = num\n    return ''.join(arr)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(\".\",\"\").replace(\",\",\"\").replace(\" \", \"\")\n    new_str = \"\"\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            new_str += test_str[i]\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    result = ''\n    #initialize a list of numbers in string\n    numbers = test_str.split()\n    \n    #loop through the string\n    for num in numbers:\n        #add the number to the result string\n        result += num\n    \n    #append the new string to the result\n    result += test_str\n    \n    #remove the original list of numbers\n    numbers = result.split()\n    \n    #loop through the original list of numbers\n    for num in numbers:\n        #add the number to the list\n        numbers.remove(num)\n        \n    #return the new list of numbers\n    return numbers\n        "
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(\",\", \" \")\n    test_str = test_str.replace(\".\", \" \")\n    test_str = test_str.replace(\" \", \"\")\n    new_str = test_str.split()\n    new_str = [int(n) for n in new_str]\n    return \" \".join([str(n) for n in new_str])\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = list(test_str)\n    for i in range(len(num_list)):\n        num_list[i] = str(num_list[i])\n    return ''.join(num_list)\n    \n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for i in test_str:\n        new_str += str(i)\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # your code here\n    t = test_str.split()\n    for i in range(len(t)):\n        if t[i].isdigit():\n            t[i] = str(int(t[i]) + 1)\n    return \"\".join(t)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str_list=list(test_str)\n    str_list.sort()\n    return ''.join(str_list)\n    \ndef test():\n    test_str = \"2020/10/20/2/3/4\"\n    print(move_num(test_str))\n    #assert move_num(test_str) == \"12/20/2020/10/20/2/3/4\"\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    for i in range(len(test_str)):\n        if i % 2!= 0:\n            result += test_str[i]\n        else:\n            if i == len(test_str) - 1:\n                result += test_str[i]\n            else:\n                result += str(test_str[i]) + test_str[i + 1]\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split()\n    for i in range(len(test_str)):\n        test_str[i] = test_str[i][::-1]\n    return \" \".join(test_str)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                break\n        else:\n            max_subset = max(max_subset, len(a[i:j+1]))\n    return max_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_len = 0\n    arr = []\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                arr.append(a[j])\n                arr.append(a[i])\n                if len(arr) > max_len:\n                    max_len = len(arr)\n                    arr = []\n    return max_len\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset = 1\n    max_list = []\n    for element in a:\n        if len(str(element)) > max_subset:\n            max_subset = len(str(element))\n            max_list = [element]\n        elif len(str(element)) == max_subset:\n            max_list.append(element)\n    return max_list\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    nums = [i for i in range(max(a))]\n    n = len(nums)\n    for i in range(n - 1):\n        if nums[i] % nums[i+1] == 0:\n            nums.remove(nums[i])\n            nums.remove(nums[i+1])\n    return len(nums)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #we will use set(the number) as the subset\n    subset = set(a)\n    #we will use max(a,subset) as the subset\n    subset_max = max(subset, key=lambda a: (a//a))\n    #we will use sub() to get the elements from a to a*a\n    return sub(a) * sub(a) // subset_max\n    #we will use the fact that the minimum number of elements in a subsets is equal to 1, so we should return\n    #the maximum element of the subset\n    #dont return 1, because we can use that to find max\n    #return min(a, subset // (a * a))\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset = 0\n    lst = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if set(a[i:j]) == set([i,j]):\n                lst.append(a[i:j])\n                if len(lst) > max_subset:\n                    max_subset = len(lst)\n                    continue\n    return max_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    for i in range(1, n):\n        while a[i] % a[i-1] == 0:\n            a[i], a[i-1] = a[i-1], a[i]\n    return max(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = []\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] % a[j] == 0:\n                subsets.append([a[i], a[j]])\n    subsets.sort(key = lambda x: x[0])\n    return len(subsets)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    dp = [1] * len(a)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[j] % a[i] == 0 and dp[j] < dp[i]:\n                dp[i] = dp[j] + 1\n    return max(dp)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    temp = a[0]\n    max_index = 0\n    for i in range(1, n):\n        if a[i] % temp!= 0:\n            break\n        if i == n - 1:\n            temp = a[i]\n            max_index = i\n    return n - max_index\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sort the lists\n    arr1.sort()\n    arr2.sort()\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (len(arr1) > 0) and (len(arr2) > 0):\n        index1 = 0\n        index2 = 0\n        while index1 < len(arr1) and index2 < len(arr2):\n            if (arr1[index1] < arr2[index2]):\n                index1 += 1\n            else:\n                index2 += 1\n        return (arr1[index1 - 1] + arr2[index2 - 1]) / 2\n    else:\n        return None\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        return get_median(arr1, arr2, len(arr1))\n    midpoint = (len(arr1) + len(arr2)) // 2\n    if n <= midpoint:\n        return get_median(arr1, arr2, midpoint)\n    else:\n        return get_median(arr2, arr1, midpoint)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the middle element of the two lists\n    low_index = len(arr1)//2\n    high_index = len(arr1) -1\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (len(arr1) == 0 or len(arr2) == 0):\n        return None\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return arr1[0]\n    elif n % 2 == 0:\n        return (arr1[n // 2] + arr2[n // 2]) / 2\n    else:\n        return arr1[n // 2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m = len(arr1)\n    if (m + n) % 2 == 0:\n        return (arr1[(m + n) // 2] + arr2[(m + n) // 2]) / 2\n    else:\n        return arr1[(m + n) // 2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n <= 1:\n        return arr1[0]\n    if n > 1:\n        mid = n//2\n        l = arr1[:mid]\n        r = arr1[mid:]\n        \n        return get_median(l,r,n//2)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1, l2 = 0, 0\n    while l1 < n and l2 < n:\n        if arr1[l1] < arr2[l2]:\n            l1 += 1\n        else:\n            l2 += 1\n    \n    if l1 == n:\n        return (arr1[l1 // 2] if (l1 // 2) < n else arr2[l2 // 2])\n    else:\n        return (arr2[l2 // 2] if (l2 // 2) < n else arr1[l1 // 2])\n    \n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code goes here\n    return [num ** n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power=1\n    for i in range(len(nums)):\n        power=power*nums[i]\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return [num**n for num in nums]\n    else:\n        return [nth_nums(n - 1,num) for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # For loop using a tuple (n,x) and a for loop, compute the n-th power of each number in the list.\n    result = 1\n    for i in range(n):\n        result *= nums[i]\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert len(nums) > 0, \"Cannot be 0\"\n    assert n >= 1, \"Cannot be less than 1\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return nums\n    elif n > 1:\n        power = nth_nums(nums[1:],n-1)\n        answer = nums[0]\n        for power_item in power:\n            answer = answer**power_item\n        return answer\n    else:\n        return None\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums:\n        return []\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    \n    for x in nums:\n        res.append(x ** n)\n    \n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return []\n    \n    else:\n        nth_nums = []\n        \n        for i in range(len(nums)):\n            nth_nums.append(nums[i] ** n)\n        \n        return nth_nums\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    out = [1]*n\n    \n    if len(nums)==1:\n        return out\n    \n    while n > 0:\n        if n%2:\n            out[-1] = out[-1]*nums[-1]\n        \n        n = n//2\n    \n    return out\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n    \n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    try:\n        string.upper()\n    except AttributeError:\n        print(\"String should be a string\")\n        raise\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = \"\"\n    for i in string:\n        if i.isupper():\n            new_string += i.upper()\n        else:\n            new_string += i.lower()\n    return new_string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = \"\"\n    for i in string:\n        if i.isupper():\n            new_string = new_string + i.upper()\n        else:\n            new_string = new_string + i\n    return new_string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.upper() == string:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[1], newList[0]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    swap_element = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = swap_element\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    i=0\n    j=len(newList)-1\n    while(i<=j):\n        temp=newList[i]\n        newList[i]=newList[j]\n        newList[j]=temp\n        i=i+1\n        j=j-1\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"the old list is \", newList)\n    newList = newList[1:] + newList[:len(newList)-1]\n    print(\"the new list is \", newList)\n    print(\"the number of elements changed is \", len(newList))\n    print(\"after swapping: \", newList)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #  Sort the list\n    newList.sort()\n    # print(newList)\n    # print(type(newList))\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    new_list = newList[1:] + newList[0:1]\n    return new_list\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # remove all the duplicates \n    newList.sort()\n    return newList\n    \ndef number_of_days(time): \n    '''\n    Write a python function to count the number of days the given time has elapsed.\n    '''\n    # convert the time into a float \n    time = float(time) \n    # store the number of days \n    days = time/86400 \n    # store the number of weeks \n    weeks = days/7\n    # store the number of months \n    months = weeks/12\n    # return the number of days \n    return months\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if not newList:\n        print(\"Please enter a list\")\n        return\n    if len(newList) == 1:\n        print(newList)\n        return\n    if len(newList) >= 2:\n        print(newList)\n        return\n    index = 0\n    while index < len(newList):\n        temp = newList[index]\n        newList[index] = newList[index+1]\n        newList[index+1] = temp\n        index += 2\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 4\n    b = 5\n    return (((b*b)-(4*a*r))**0.5)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    l = []\n    for i in range(3) :\n        x = r * (1 + (2*i) / 3)\n        l.append(x)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return round(1/2 * 3.14 * (r ** 2))\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # write your code here\n    def triangle_area(r):\n        if r < 1 :\n            return 0\n        else :\n            return (r ** 2 * (4 * pi) / 3) \n    return triangle_area(r)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = (r**2) + (r-1)**2\n    b = 2*(r**2-r-1)\n    c = (r+1)**2\n    return (a+b+c)**0.5\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0:\n        return 0\n    elif r == 1:\n        return 1\n    elif r == 2:\n        return 2\n    else:\n        side_1 = (r - 2)**2\n        side_2 = 2 * (r - 2)\n        side_3 = (r - 3)**2\n        max_side = max(side_1, side_2, side_3)\n        return side_1 + side_2 + side_3 - max_side\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r < 0 : return -1\n    elif r == 0 : return 0\n    else : return (2*r*r)/3\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2)*3.14\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    return 0\n    \n    \nif __name__ == '__main__':\n    print(\"Give the radius of the circle : \")\n    r = float(input())\n    \n    print(\"Give the area of the triangle that can be inscribed in the circle : \")\n    print(triangle_area(r)"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area_triangle = 0\n    for i in range(1,r+1):\n        for j in range(i+1):\n            area_triangle += (j*(i-j))\n    return (area_triangle)\n    \nif __name__ == '__main__':\n    r = int(input('Enter the radius of a triangle : '))\n    print(triangle_area(r))"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) -1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if end == -1:\n        return array[0]\n    \n    if array[start] < array[end]:\n        return array[start]\n    \n    mid = (start+end)//2\n    return find_First_Missing(array,start,mid) if mid+1 <= end else find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    # Base case:\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return\n    \n    mid = (start + end) // 2\n    \n    if array[mid] == mid:\n        mid = mid - 1\n    \n    if array[mid] == end:\n        return end\n    \n    # Recursive case:\n    # First check if mid is an index of array[mid].\n    # If it is, return the mid element of array[mid + 1]\n    # If not, find the missing number of this element\n    # and return the missing number\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)-1\n    if start >=end:\n        return 0\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start >= end:\n        return None\n    if array[start] == array[end]:\n        return array[start]\n    index = (start+end)//2\n    value = array[start]\n    while index >= 0 and array[index] > value:\n        array[index+1] = array[index]\n        index += 1\n    array[index+1] = value\n    return index+1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end == 0:\n        return None\n    if start == end:\n        return 0\n    mid = (start + end) // 2\n    if array[mid] == mid:\n        return mid\n    if array[mid] > mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    while start < end:\n        mid = (start + end) // 2\n        if array[mid] == array[mid + 1]:\n            end = mid\n        else:\n            start = mid + 1\n    return end\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start >= end:\n        return None\n    mid = (start+end)//2\n    mid_value = array[mid]\n    if mid_value == 0:\n        return mid\n    elif mid_value > 0:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n    "
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    if start < end:\n        middle = (start + end) // 2\n        if array[middle] == end:\n            return middle\n        elif array[middle] < end:\n            return find_First_Missing(array,middle+1,end)\n        elif array[middle] > start:\n            return find_First_Missing(array,start,middle-1)\n    else:\n        return -1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    i = start\n    while i<= end:\n        if array[i]!= i:\n            array[i], array[i-1] = array[i-1], array[i]\n            i += 1\n        i += 1\n    return array[start:i]\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # replace spaces in string with %20\n    string = string.replace(' ', '%20')\n    # return string\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    space_pattern = r'(?:(?<=\\s)\\s+)'\n    string_length = len(string)\n    pattern = re.compile(space_pattern, re.MULTILINE)\n    return pattern.sub(r'%20', string)\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n    \ndef main():\n    print(\"This program will create a list of numbers from a list of integers.\")\n    print(\"\")\n    print(\"For example, the input:\")\n    print(\"\")\n    print(\"Input 1:\")\n    print(\"Input 2:\")\n    print(\"Input 3:\")\n    print(\"Input 4:\")\n    print(\"\")\n    print(\"Output:\")\n    print(\"\")\n    print(\"Even Numbers from 1 to 4: \")\n    print(\"\")\n    print(\"The list: \")\n    print(\"\")\n    print(Split(list1))\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # Create an empty list of even numbers\n    even_list = []\n    # Calculate the squares of all even numbers\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number**2)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even_list = []\n    odd_list = []\n    \n    for num in list:\n        if num%2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    \n    return even_list, odd_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    if len(list) == 0:\n        return []\n    even_num = []\n    for num in list:\n        if num % 2 == 0:\n            even_num.append(num)\n    return even_num\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in list: \n        if i % 2 == 0: \n            evens.append(i) \n    return evens \n    \nif __name__ == '__main__': \n    list = [12, 23, 4, 5, 6, 78, 0, 13] \n    print(list) \n    print(Split(list)) "
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        return adjac(ele[0], sub) + adjac(ele[1], sub) + adjac(ele[2], sub) + adjac(ele[3], sub)\n    else:\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return\n    sub.append(ele) \n    adjac(ele[0], sub) \n    adjac(ele[1], sub) \n    adjac(ele[2], sub) \n    adjac(ele[3], sub) \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return sub\n    else:\n        if len(ele) == 2:\n            sub.append(ele)\n            adjac(ele[1], sub)\n        else: \n            sub.append(ele)\n            adjac(ele[0], sub)\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    z = ele[2]\n    return sub + [(x-1,y-1,z+1), (x-1,y,z-1), (x+1,y-1,z+1), (x+1,y,z-1), (x+1,y-1,z), (x-1,y+1,z+1), (x-1,y+1,z-1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return sub[0]\n    else:\n        sub.append(ele)\n        return adjac(ele[0], sub) + adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        adjac(ele[0], sub)\n        adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele[0])\n    sub.append(ele[1])\n    sub.append(ele[2])\n    sub.append(ele[3])\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ele[0]+sub[0], ele[1]+sub[1], ele[0]-sub[0], ele[1]-sub[1]\n    "
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    #x = ele[0]\n    #y = ele[1]\n    if x - 1 >= 0:\n        if x - 1 >= sub:\n            sub.append((x-1, y))\n        if x - 1 >= sub and y > sub:\n            sub.append((x-1, y-1))\n        if x - 1 >= sub and y < sub:\n            sub.append((x-1, y+1))\n    if y - 1 >= 0:\n        if y - 1 >= sub:\n            sub.append((x, y-1))\n        if y - 1 >= sub and x > sub:\n            sub.append((x, y-1))\n        if y - 1 >= sub and x < sub:\n            sub.append((x, y+1))\n    if x + 1 <= n-1:\n        if x + 1 <= sub:\n            sub.append((x+1, y))\n        if x + 1 <= sub and y > sub:\n            sub.append((x+1, y-1))\n        if x + 1 <= sub and y < sub:\n            sub.append((x+1, y+1))\n    if y + 1 <= n-1:\n        if y + 1 <= sub:\n            sub.append((x, y+1))\n        if y + 1 <= sub and x > sub:\n            sub.append((x, y+1))\n        if y + 1 <= sub and x < sub:\n            sub.append((x, y-1))\n    return sub \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [coord[1] for coord in sub+[[ele,1] if coord!= ele] if coord!= 0]\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # initial string\n    new_str = ''\n    \n    # loop through string\n    for char in text:\n        # if char is whitespace\n        if char.isspace():\n            # if not whitespace\n            if char not in '.,:;':\n                # append underscore\n                new_str += '_'\n            # else dont append underscore\n            else:\n                new_str += char\n        # if char is not whitespace\n        else:\n            # if not whitespace\n            if char.isalpha():\n                # add underscore\n                new_str += '_'\n            # else append char\n            else:\n                new_str += char\n    # return string\n    return new_str\n    \n    "
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('-','_')\n    text = text.replace('.','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('\\n', '_').replace('\\t', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('.','_')\n    text = text.replace('!','_')\n    text = text.replace('?','_')\n    text = text.replace('-','_')\n    text = text.replace('{','_')\n    text = text.replace('}','_')\n    text = text.replace('[','_')\n    text = text.replace(']','_')\n    text = text.replace('{','_')\n    text = text.replace('}','_')\n    text = text.replace('<','_')\n    text = text.replace('>','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for i in text:\n        if i!='':\n            result += i\n        else:\n            result += '_'\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_',' ')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char!='':\n            new_text += char.replace(' ', '_')\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char.isspace():\n            new_text = new_text + '_'\n        else:\n            new_text = new_text + char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('  ', '_').replace('   ', '_').replace('  ', '_')\n    "
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('\\t', '_')\n    text = text.replace('\\r', '_')\n    text = text.replace('\\n', '_')\n    text = text.replace('\\f', '_')\n    text = text.replace('\\v', '_')\n    return text\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Implement the function below.\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    l = []\n    for i in num_list:\n        if i!= 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            return num_list.pop()\n    return num_list\n    \ndef count_zeros(num_list):\n    '''\n    Write a python function to count the number of zeros in the given list.\n    '''\n    num_zeros = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_zeros += 1\n    return num_zeros\n    \ndef reverse(num_list):\n    '''\n    Write a python function to reverse the order of the elements in a given list.\n    '''\n    num_list = num_list[::-1]\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Iterate over each element\n    for num in num_list:\n        # if the number is 0, we remove it\n        if num == 0:\n            continue\n        # else, we insert it at the end\n        else:\n            num_list.remove(num)\n            num_list.insert(0,num)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # your code goes here\n    for i in range(0, len(num_list)):\n        if num_list[i] == 0:\n            num_list = num_list[0:i] + num_list[i + 1:]\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i]==0:\n            num_list[i]=0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n-1) : \n        result += (arr[i] ^ arr[i+1])\n    return result \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(n) : \n        x = x ^ arr[i]\n    return x\n    \ndef my_subset(arr,n):\n    '''\n    Write a python function to find the subset of an array using the given indices.\n    '''\n    return [arr[i] for i in range(n) if arr[i]!= 0]\n    \ndef main():\n    arr = [0,0,1,1,1,0,0,0]\n    print(\"Initial Array : \",end=\"\")\n    print(arr)\n    print(\"The xor of all elements :\",pair_xor_Sum(arr,len(arr)))\n    print(\"The subset of all elements :\",my_subset(arr,len(arr)))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in arr:\n        xor = xor ^ i\n    return xor\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n): \n        for j in range(i+1, n):\n            if arr[i] ^ arr[j] == 0:\n                sum += arr[i] * arr[j]\n    return sum\n    \ndef pair_xor_Sum_dictionary(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n): \n        for j in range(i+1, n):\n            if arr[i] ^ arr[j] == 0:\n                sum += arr[i] * arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    y = 0\n    for i in range(n):\n        x = x ^ arr[i]\n        y = y ^ arr[i]\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    n = len(arr)\n    if n < 2 : \n        return 0\n    for i in range(n-2) : \n        arr[i] ^= arr[i+1] \n    sum_xor = 0 \n    for i in range(n-2) : \n        sum_xor += arr[i] \n    return sum_xor \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    summ = 0\n    temp = []\n    for i in range(len(arr) - 1) :\n        for j in range(i+1,len(arr)) :\n            temp.append((arr[i] ^ arr[j]))\n    for i in range(len(temp)) :\n        summ += temp[i]\n    return summ\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n) : \n        result += arr[i]\n    return result \n    \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(len(arr)) :\n        x = x ^ arr[i]\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in arr : \n        for j in arr : \n            total = total ^ i ^ j \n    return total \n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for e in iterable:\n        heapq.heappush(heap, e)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [heapq.heappop(heap) for _ in iterable]\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        hq.heappushpop(iterable, iterable[i])\n    return iterable\n    \n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # TODO: Write your code here\n    # Your code here\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    \n    # Initialize max heap\n    for value in iterable:\n        heapq.heappush(hq, value)\n    \n    # Loop through the max heap until\n    # the heap is empty\n    for _ in range(len(hq)):\n        # Get the element and sort it\n        # according to the priority\n        value = hq.pop()\n        hq.sort()\n        # Put the element back into the heap\n        heapq.heappush(hq, value)\n    \n    # Return the sorted list\n    return hq\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        heapq.heappush(h,i)\n    # return heapq.heapify(h)\n    # return sorted(iterable)\n    return h\n    # return sorted(iterable,reverse=True)\n    # return sorted(iterable,key=str.casefold)\n    # return sorted(iterable,key=str.lower)\n    # return sorted(iterable,key=str.split)\n    # return sorted(iterable,key=str.split)\n    # return sorted(iterable,key=str.lower)\n    # return sorted(iterable,key=str.upper)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def split_list(data):\n        '''\n        Split the given list into two parts.\n        '''\n        if len(data) <= 1:\n            return data\n        middle = len(data) // 2\n        left = split_list(data[:middle])\n        right = split_list(data[middle:])\n        return left + [data[middle]] + right\n    \n    def merge_sort(data):\n        '''\n        Merge two sorted lists.\n        '''\n        if len(data) <= 1:\n            return data\n        \n        middle = len(data) // 2\n        left = merge_sort(data[:middle])\n        right = merge_sort(data[middle:])\n        \n        left_idx = 0\n        right_idx = 0\n        idx = 0\n        \n        while idx < len(left):\n            if left[left_idx] > right[right_idx]:\n                data[idx] = left[left_idx]\n                left_idx += 1\n            else:\n                data[idx] = right[right_idx]\n                right_idx += 1\n            idx += 1\n        \n        while idx < len(right):\n            data[idx] = right[right_idx]\n            right_idx += 1\n            idx += 1\n        \n        return data\n        \n    data = split_list(iterable)\n    return merge_sort(data)\n    \n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    length = len(iterable)\n    def recurse(i):\n        if length == i:\n            return\n        recurse(i*2)\n        recurse(i*2 + 1)\n        hq.heappush(l, iterable[i])\n    recurse(0)\n    return hq.heappop(l)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # TODO: Implement the implementation of the sort algorithm\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    s = sorted(iterable, key=lambda x: x.get_rank())\n    return s\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost <= sale_amount*0.50\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Check whether the sale amount is less than the amount\n    # that the amount of purchase made on sale price is not greater than the amount of sale\n    if sale_amount <= actual_cost:\n        # Check whether the sale amount is less than the amount that the actual cost is\n        if sale_amount <= actual_cost/100:\n            return True\n        else:\n            # Check whether the actual cost is less than the sale amount\n            return False\n    else:\n        # Check whether the sale amount is greater than the actual cost\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    elif actual_cost <= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit <= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    no_profit = 0\n    no_loss = 0\n    \n    for i in actual_cost:\n        if (i<sale_amount[0]) or (i>sale_amount[1]):\n            no_loss+=1\n        else:\n            no_profit+=1\n    \n    if no_loss!=0 and no_profit!=0:\n        return 'No'\n    else:\n        return 'No'\n        "
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False\n    elif actual_cost == sale_amount:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost < sale_amount: \n        return False\n    else: \n        return True\n        \ndef main(): \n    \n    n = int(input()) \n    l = list(map(int, input().split())) \n    sale = l[0] \n    amount = l[1] \n    actual_cost = noprofit_noloss(actual_cost,sale) \n    if actual_cost == False: \n        print(\"NO\") \n    else: \n        print(\"YES\") \n        print(noprofit_noloss(actual_cost,sale)) \n    \n    \n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    result = True\n    if actual_cost == 0:\n        result = False\n    return result\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = v * math.cos(t * math.pi/ 100)\n    return math.log((v + w)/(v * math.cos(t * math.pi/ 100)))\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #define a constant\n    C = 6300\n    #calculate the normalised wind chill\n    w = v * 9/5 + 32\n    #convert the wind chill from celsius to fahrenheit\n    w_f = w * (9/5) + 32\n    #calculate the normalized wind chill from the normalised wind chill\n    wc = C + (w_f - C) * (1 - (t/400))\n    #return the wind chill index rounded to the next integer\n    return round(wc)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #if using KF94 format then use WCH\n    \n    #ex: v = 0.001 km/h, t = celsius\n    #then WCH = 7.5    \n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w_c = 0\n    t_c = v*9/5\n    if t_c >= 0:\n        w_c = t_c + (v*math.log(t_c/v))\n    return round(w_c)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    temp=v*(9/5)+32\n    return math.ceil(temp+(temp/100))\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # http://www.wunderground.com/calculators/wind-chill-index-wind-chill-index.php\n    import math\n    k =.6215\n    return round(v * math.log(v / k, k) + (t + 237.0)/(t + 273.15), 2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Convert temperature to celcius\n    tc = (v/3.6)*9/5\n    #Convert wind speed to m/s\n    v2 = math.sqrt(v*v)\n    #Convert wind chill to dps\n    wc = 9*v2+tc\n    #Round the wind chill index\n    wc_rounded = round(wc)\n    #If the wind chill index is greater than 35 then set it to 35\n    if wc_rounded > 35:\n        wc_rounded = 35\n    #Return the wind chill index\n    return wc_rounded\ndef wind_chill_func(v,t,fn):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Convert temperature to celcius\n    tc = (v/3.6)*9/5\n    #Convert wind speed to m/s\n    v2 = math.sqrt(v*v)\n    #Convert wind chill to dps\n    wc = 9*v2+tc\n    #If the wind chill index is greater than 35 then set it to 35\n    if wc > 35:\n        wc = 35\n    #Print the wind chill index and temperature\n    print(fn, ':', wc, '\\n')\n    #Return the wind chill index and temperature\n    return wc\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # TODO: Calculate the wind chill index.\n    # wind_chill_index = v*(math.log((v)/(3.6))+(t/2))\n    wind_chill_index = (v/((3.6)*1.8)) + (t*1.8)\n    return int(wind_chill_index)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return v*(1.8+16.1*t+293.15*v**0.16+0.75*v**0.33+0.62*v**0.48+0.41*v**0.66+0.35*v**0.89)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #return round(v*(9.0/5.0) + 32.0,1) #rounding\n    #v = wind velocity\n    #t = temperature\n    #return math.floor(v*(9.0/5.0) + 32.0) #floor\n    #return v*(9.0/5.0) + 32.0 + 6.61*math.log(v)/(t+273.15) #log(v+273.15)\n    return round(v*(9.0/5.0) + 32.0 + 6.61*math.log(v)/(t+273.15),1) #round(v*(9.0/5.0) + 32.0 + 6.61*math.log(v)/(t+273.15),1)"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name.lower().startswith('a'):\n            count+=1\n    return count\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    ## make a list of all the letters in each name\n    names = [name.lower() for name in sample_names]\n    ## find the letters that start with a lowercase letter\n    letters = [letter for letter in names if letter.startswith('a')]\n    ## for each letter in the letters list, check to see if it is a lowercase letter, and if so, \n    ## increment the total length by one. If it is not a lowercase letter, then there are no letters that start with a lowercase letter.\n    total = 1\n    for letter in letters:\n        if letter.islower():\n            total += 1\n    ## return the total length\n    return total\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    with open(\"names.txt\",\"r\") as file:\n        names = file.read().split()\n    with open(\"names.txt\",\"w\") as file:\n        for name in names:\n            if name.startswith(\"a\"):\n                names.remove(name)\n                file.write(f\"{len(names)}\")\n            else:\n                file.write(name)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_len = 0\n    for name in sample_names:\n        if name[0] in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz':\n            total_len += len(name)\n    return total_len\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    final_names = []\n    for i in sample_names:\n        if len(i.lower())>0:\n            final_names.append(i)\n    \n    return len(final_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = \"\"\n    for name in sample_names:\n        if name.startswith(\"a\"):\n            result += name[2:]\n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if type(sample_names) == str:\n        sample_names = [sample_names]\n    \n    s = \"\"\n    for i in range(0,len(sample_names)):\n        if sample_names[i][0] == \"a\":\n            sample_names[i] = sample_names[i].lower()\n    \n    for j in range(0,len(sample_names)):\n        if sample_names[j] == \"a\":\n            sample_names[j] = \"A\"\n        if sample_names[j] == \"e\":\n            sample_names[j] = \"E\"\n        if sample_names[j] == \"i\":\n            sample_names[j] = \"I\"\n        if sample_names[j] == \"o\":\n            sample_names[j] = \"O\"\n        if sample_names[j] == \"u\":\n            sample_names[j] = \"U\"\n        if sample_names[j] == \"y\":\n            sample_names[j] = \"Y\"\n    \n    for i in range(0,len(sample_names)):\n        if sample_names[i].endswith(\"y\"):\n            s = s + sample_names[i]\n    \n    return s\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if len(name.lower()) < 2:\n            total_length += 1\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_sample_names = []\n    for sample in sample_names:\n        if sample[0].isalpha():\n            new_sample_names.append(sample)\n    return len(new_sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Remove each name by replacing the letter in the name with a space.\n    n_samples = len(sample_names)\n    for i in range(n_samples):\n        sample_names[i] = sample_names[i].replace(\"A\",\" \").replace(\"B\",\" \").replace(\"C\",\" \").replace(\"D\",\" \").replace(\"E\",\" \").replace(\"F\",\" \").replace(\"G\",\" \").replace(\"H\",\" \").replace(\"I\",\" \").replace(\"J\",\" \").replace(\"K\",\" \").replace(\"L\",\" \").replace(\"M\",\" \").replace(\"N\",\" \").replace(\"O\",\" \").replace(\"P\",\" \").replace(\"Q\",\" \").replace(\"R\",\" \").replace(\"S\",\" \").replace(\"T\",\" \").replace(\"U\",\" \").replace(\"V\",\" \").replace(\"W\",\" \").replace(\"X\",\" \").replace(\"Y\",\" \").replace(\"Z\",\" \").replace(\"A\",\" \").replace(\"B\",\" \").replace(\"C\",\" \").replace(\"D\",\" \").replace(\"E\",\" \").replace(\"F\",\" \").replace(\"G\",\" \").replace(\"H\",\" \").replace(\"I\",\" \").replace(\"J\",\" \").replace(\"K\",\" \").replace(\"L\",\" \").replace(\"M\",\" \").replace(\"N\",\" \").replace(\"O\",\" \").replace(\"P\",\" \").replace(\"Q\",\" \").replace(\"R\",\" \").replace(\"S\",\" \").replace(\"T\",\" \").replace(\"U\",\" \").replace(\"V\",\" \").replace(\"W\",\" \").replace(\"X\",\" \").replace(\"Y\",\" \").replace(\"Z\",\" \").replace(\"a\",\" \").replace(\"b\",\" \").replace(\"c\",\" \").replace(\"d\",\" \").replace(\"e\",\" \").replace(\"f\",\" \").replace(\"g\",\" \").replace(\"h\",\" \").replace(\"i\",\" \").replace(\"j\",\" \").replace(\"k\",\" \").replace(\"l\",\" \").replace(\"m\",\" \").replace(\"n\",\" \").replace(\"o\",\" \").replace(\"p\",\" \").replace(\"q\",\" \").replace(\"r\",\" \").replace(\"s\",\" \").replace(\"t\",\" \").replace(\"u\",\" \").replace(\"v\",\" \").replace(\"w\",\" \").replace(\"x\",\" \").replace(\"y\",\" \").replace(\"z\",\" \").replace(\"A\",\" \").replace(\"B\",\" \").replace(\"C\",\" \").replace(\"D\",\" \").replace(\"E\",\" \").replace(\"F\",\" \").replace(\"G\",\" \").replace(\"H\",\" \").replace(\"I\",\" \").replace(\"J\",\" \").replace(\"K\",\" \").replace(\"L\",\" \").replace(\"M\",\" \").replace(\"N\",\" \").replace(\"O\",\" \").replace(\"P\",\" \").replace(\"Q\",\" \").replace(\"R\",\" \").replace(\"S\",\" \").replace(\"T\",\" \").replace(\"U\",\" \").replace(\"V\",\" \").replace(\"W\",\" \").replace(\"X\",\" \").replace(\"Y\",\" \").replace(\"Z\",\" \").replace(\"a\",\" \").replace(\"b\",\" \").replace(\"c\",\" \").replace(\"d\",\" \").replace(\"e\",\" \").replace(\"f\",\" \").replace(\"g\",\" \").replace(\"h\",\" \").replace(\"i\",\" \").replace(\"j\",\" \").replace(\"k\",\" \").replace(\"l\",\" \").replace(\"m\",\" \").replace(\"n\",\" \").replace(\"o\",\" \").replace(\"p\",\" \").replace(\"q\",\" \").replace(\"r\",\" \").replace(\"s\",\" \").replace(\"t\",\" \").replace(\"u\",\" \").replace(\"v\",\" \").replace(\"w\",\" \").replace(\"x\",\" \").replace(\"y\",\" \").replace(\"z\",\" \").replace(\"A\",\" \").replace(\"B\",\" \").replace(\"C\",\" \").replace(\"D\",\" \").replace(\"E\",\" \").replace(\"F\",\" \").replace(\"G\",\" \").replace(\"H\",\" \").replace(\"I\",\" \").replace(\"J\",\" \").replace(\"K\",\" \").replace(\"L\",\" \").replace(\"M\",\" \").replace(\"N\",\" \").replace(\"O\",\" \").replace(\"P\",\" \").replace(\"Q\",\" \").replace(\"R\",\" \").replace(\"S\",\" \").replace(\"T\",\" \").replace(\"U\",\" \").replace(\"V\",\" \").replace(\"W\",\" \").replace(\"X\",\" \").replace(\"Y\",\" \").replace(\"Z\",\" \").replace(\"a\",\" \").replace(\"b\",\" \").replace(\"c\",\" \").replace(\"d\",\" \").replace(\"e\",\" \").replace(\"f\",\" \").replace(\"g\",\" \").replace(\"h\",\" \").replace(\"i\",\" \").replace(\"j\",\" \").replace(\"k\",\" \").replace(\"l\",\" \").replace(\"m\",\" \").replace(\"n\",\" \").replace(\"o\",\" \").replace(\"p\",\" \").replace(\"q\",\" \").replace(\"r\",\" \").replace(\"s\",\" \").replace(\"t\",\" \").replace(\"u\",\" \").replace(\"v\",\" \").replace(\"w\",\" \").replace(\"x\",\" \").replace(\"y\",\" \").replace(\"z\",\" \").replace(\"A\",\" \").replace(\"B\",\" \").replace(\"C\",\" \").replace(\"D\",\" \").replace(\"E\",\" \").replace(\"F\",\" \").replace(\"G\",\" \").replace(\"H\",\" \").replace(\"I\",\" \").replace(\"J\",\" \").replace(\"K\",\" \").replace(\"L\",\" \").replace(\"M\",\" \").replace(\"N\",\" \").replace(\"O\",\" \").replace(\"P\",\" \").replace(\"Q\",\" \").replace(\"R\",\" \").replace(\"S\",\" \").replace(\"T\",\" \").replace(\"U\",\" \").replace(\"V\",\" \").replace(\"W\",\" \").replace(\"X\",\" \").replace(\"Y\",\" \").replace(\"Z\",\" \").replace(\"a\",\" \").replace(\"b\",\" \").replace(\"c\",\" \").replace(\"d\",\" \").replace(\"e\",\" \").replace(\"f\",\" \").replace(\"g\",\" \").replace(\"h\",\" \").replace(\"i\",\" \").replace(\"j\",\" \").replace(\"k\",\" \").replace(\"l\",\" \").replace(\"m\",\" \").replace(\"n\",\" \").replace(\"o\",\" \").replace(\"p\",\" \").replace(\"q\",\" \").replace(\"r\",\" \").replace(\"s\",\" \").replace(\"t\",\" \").replace(\"u\",\" \").replace(\"v\",\" \").replace(\"w\",\" \").replace(\"x\",\" \").replace(\"y\",\" \").replace(\"z\",\" \").replace(\"A\",\" \").replace(\"B\",\" \").replace(\"C\",\" \").replace(\"D\",\" \").replace(\"E\",\" \").replace(\"F\",\" \").replace(\"G\",\" \").replace(\"H\",\" \").replace(\"I\",\" \").replace(\"J\",\" \").replace(\"K\",\" \").replace(\"L\",\" \").replace(\"M\",\" \").replace(\"N\",\" \").replace(\"O\",\" \").replace(\"P\",\" \").replace(\"Q\",\" \").replace(\"R\",\" \").replace(\"S\",\" \").replace(\"T\",\" \").replace(\"U\",\" \").replace(\"V\",\" \").replace(\"W\",\" \").replace(\"X\",\" \").replace(\"Y\",\" \").replace(\"Z\",\" \").replace(\"a\",\" \").replace(\"b\",\" \").replace(\"c\",\" \").replace(\"d\",\" \").replace(\"e\",\" \").replace(\"f\",\" \").replace(\"g\",\" \").replace(\"h\",\" \").replace(\"i\",\" \").replace(\"j\",\" \").replace(\"k\",\" \").replace(\"l\",\" \").replace(\"m\",\" \").replace(\"n\",\" \").replace(\"o\",\" \").replace(\"p\",\" \").replace(\"q\",\" \").replace(\"r\",\" \").replace(\"s\",\" \").replace(\"t\",\" \").replace(\"u\",\" \").replace(\"v\",\" \").replace(\"w\",\" \").replace(\"x\",\" \").replace(\"y\",\" \").replace(\"z\",\" \").replace(\"A\",\" \").replace(\"B\",\" \").replace(\"C\",\" \").replace(\"D\",\" \").replace(\"E\",\" \").replace(\"F\",\" \").replace(\"G\",\" \").replace(\"H\",\" \").replace(\"I\",\" \").replace(\"J\",\" \").replace(\"K\",\" \").replace(\"L\",\" \").replace(\"M\",\" \").replace(\"N\",\" \").replace(\"O\",\" \").replace(\"P\",\" \").replace(\"Q\",\" \").replace(\"R\",\" \").replace(\"S\",\" \").replace(\"T\",\" \").replace(\"U\",\" \").replace(\"V\",\" \").replace(\"W\",\" \").replace(\"X\",\" \").replace(\"Y\",\" \").replace(\"Z\",\" \").replace(\"a\",\" \").replace(\"b\",\" \").replace(\"c\",\" \").replace(\"d\",\" \").replace(\"e\",\" \").replace(\"f\",\" \").replace(\"g\",\" \").replace(\"h\",\" \").replace(\"i\",\" \").replace(\"j\",\" \").replace(\"k\",\" \").replace(\"l\",\" \")"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for i in range(len(items)):\n        if items[i] == '(':\n            new_items.append('(')\n        else:\n            new_items.append(items[i])\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item == '(' or item == ')':\n            result += item\n        else:\n            result +=''\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i=0\n    while i<len(items):\n        if items[i][0]=='(':\n            items.pop(i)\n        elif items[i][-1]==')':\n            items.pop(i)\n        else:\n            i=i+1\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # this is where you'll replace the regular expressions you create with regular expressions\n    # use ^ and $ to find the start and end of the match group\n    # use.findall to find all instances of the pattern\n    # for example, ^\\d\\d\\d$ returns ['\\d\\d\\d\\d', '\\d\\d\\d\\d', '\\d\\d\\d\\d']\n    # use.sub to find the replacement\n    def replace_parenthesis(match):\n        return match.group(0)[1:]\n    # write your solution here\n    def remove_parenthesis_and_replace(match):\n        return match.group(0)[1:-1]\n    def remove_parenthesis_and_replace_with_space(match):\n        return match.group(0)[1:-1].replace(' ', '')\n    # initialize the result\n    result = []\n    # loop through the string\n    for item in items:\n        # if the item contains a parenthesis\n        if item.startswith('('):\n            # add the parenthesis to the result\n            result.append(item[1:])\n        else:\n            # if it doesn't contain a parenthesis, add the replacement string\n            # for the item to the result\n            result.append(item.replace(item[0],replace_parenthesis))\n    # return the result\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    def remove_parenthesis_parts(s):\n        return re.sub('\\(([^()]+)\\)', lambda mo: mo.group(1).replace('(', '').replace(')', ''), s)\n    return list(map(remove_parenthesis_parts, items))\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]+\\)', '', items)\ndef remove_tokens(items):\n    '''\n    Write a function to remove the new line in between each items.\n    '''\n    return re.sub(r'\\n', '', items)\ndef remove_quotes(items):\n    '''\n    Write a function to remove the new line between each items.\n    '''\n    return re.sub(r'\\'', '', items)\ndef remove_html_tags(items):\n    '''\n    Remove HTML tags from the string.\n    '''\n    return re.sub(r'<[^>]*>', '', items)\ndef strip_whitespace(items):\n    '''\n    Remove whitespace in the string.\n    '''\n    return re.sub(r'\\s+','', items)\ndef count_space(items):\n    '''\n    Count the number of space.\n    '''\n    return re.sub(r'\\s+','', items)\ndef remove_words(items):\n    '''\n    Remove words from the string.\n    '''\n    return re.sub(r'\\b\\w+\\b', '', items)\ndef remove_numbers(items):\n    '''\n    Remove numbers from the string.\n    '''\n    return re.sub(r'\\d+', '', items)\ndef remove_special_chars(items):\n    '''\n    Remove special characters from the string.\n    '''\n    return re.sub(r'[^A-Za-z0-9]+','', items)\ndef remove_symbols(items):\n    '''\n    Remove all symbols from the string.\n    '''\n    return re.sub(r'[~^]', '', items)\ndef remove_punctuations(items):\n    '''\n    Remove all punctuations from the string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\'\\s]+', '', items)\ndef remove_fancy_quotes(items):\n    '''\n    Remove all fancy quotes from the string.\n    '''\n    return re.sub(r'\\(\\s*\\)', '', items)\ndef remove_hyphen(items):\n    '''\n    Remove the hyphen from the string.\n    '''\n    return re.sub(r'-','', items)\ndef remove_unclosed_brackets(items):\n    '''\n    Remove the unclosed brackets from the string.\n    '''\n    return re.sub(r'[{}]','', items)\ndef remove_duplicate_symbols(items):\n    '''\n    Remove duplicates from the string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\-]', '', items)\ndef remove_unclosed_brackets(items):\n    '''\n    Remove all unclosed brackets from the string.\n    '''\n    return re.sub(r'[^]{2,}', '', items)\ndef remove_symbol_escapes(items):\n    '''\n    Remove all the symbol escapes from the string.\n    '''\n    return re.sub(r'\\\\', '', items)\ndef remove_space(items):\n    '''\n    Remove space from the string.\n    '''\n    return re.sub(r'\\s+','', items)\ndef remove_new_lines(items):\n    '''\n    Remove the new line in between each items.\n    '''\n    return re.sub(r'\\n+', '', items)\ndef remove_comments(items):\n    '''\n    Remove comments from the string.\n    '''\n    return re.sub(r'(^.+?(?=\\s)|(?<=\\s))(#.*)', '', items)\ndef remove_digits(items):\n    '''\n    Remove digits from the string.\n    '''\n    return re.sub(r'\\d+', '', items)\ndef remove_numbers_and_other_special_chars(items):\n    '''\n    Remove all the number and special characters from the string.\n    '''\n    return re.sub(r'\\d+', '', items)\ndef remove_print(items):\n    '''\n    Remove all print and comment from the string.\n    '''\n    return re.sub(r'print', '', items)\ndef remove_quotes_and_comments(items):\n    '''\n    Remove all quote and comment from the string.\n    '''\n    return re.sub(r'\\'\\'', '', items)\ndef remove_quotes(items):\n    '''\n    Remove all quotes from the string.\n    '''\n    return re.sub(r'\\'', '', items)\ndef remove_entities(items):\n    '''\n    Remove all the entities from the string.\n    '''\n    return re.sub(r'&(&lt;&gt;|&amp;&amp;)[^&]+?(&lt;&gt;|&amp;&amp;)', '', items)\ndef remove_html_tags_and_comments(items):\n    '''\n    Remove all html tags and comment from the string.\n    '''\n    return re.sub(r'<!--.*?-->', '', items)\ndef remove_punctuations(items):\n    '''\n    Remove all punctuations from the string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', items)\ndef remove_fancy_quotes(items):\n    '''\n    Remove all the fancy quotes from the string.\n    '''\n    return re.sub(r'(?<=\\\")[^\"]+?(?=\\\")', '', items)\ndef remove_hyphen(items):\n    '''\n    Remove the hyphen from the string.\n    '''\n    return re.sub(r'-','', items)\ndef remove_symbols(items):\n    '''\n    Remove all symbols from the string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\-]', '', items)\ndef remove_unclosed_brackets(items):\n    '''\n    Remove all the unclosed brackets from the string.\n    '''\n    return re.sub(r'[{}]', '', items)\ndef remove_duplicate_symbols(items):\n    '''\n    Remove all the duplicate symbols from the string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\-]', '', items)\ndef remove_unclosed_brackets(items):\n    '''\n    Remove all the unclosed brackets from the string.\n    '''\n    return re.sub(r'[^]{2,}', '', items)\ndef remove_symbol_escapes(items):\n    '''\n    Remove all the symbol escapes from the string.\n    '''\n    return re.sub(r'\\\\', '', items)\ndef remove_space(items):\n    '''\n    Remove space from the string.\n    '''\n    return re.sub(r'\\s+','', items)\ndef remove_new_lines(items):\n    '''\n    Remove the new line in between each items.\n    '''\n    return re.sub(r'\\n+', '', items)\ndef remove_comments(items):\n    '''\n    Remove comments from the string.\n    '''\n    return re.sub(r'(^.+?(?=\\s)|(?<=\\s))(#.*)', '', items)\ndef remove_digits(items):\n    '''\n    Remove digits from the string.\n    '''\n    return re.sub(r'\\d+', '', items)\ndef remove_numbers_and_other_special_chars(items):\n    '''\n    Remove all the number and special characters from the string.\n    '''\n    return re.sub(r'\\d+', '', items)\ndef remove_print(items):\n    '''\n    Remove all print and comment from the string.\n    '''\n    return re.sub(r'print', '', items)\ndef remove_quotes_and_comments(items)"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #inorder traversal\n    for i in range(len(items)):\n        if items[i]==\"(\":\n            start=i\n        elif items[i]==\")\":\n            end=i\n    #inorder traversal again to find the index\n    for i in range(start+1,end):\n        #search if we have the parenthesis\n        if items[i]==\"(\" and items[i-1]==\")\":\n            #delete parenthesis from both\n            del items[start+1:i]\n            del items[i-1]\n            return remove_parenthesis(items)\n        elif items[i]==\"(\" and items[i+1]==\")\":\n            #delete parenthesis from only the left side\n            del items[start+1:i]\n            return remove_parenthesis(items)\n    #if not found, return the string\n    return items\ndef reverse_string(items):\n    '''\n    Write a function that reverses a string, which should be a list of strings.\n    '''\n    #inorder traversal\n    for i in range(len(items)):\n        if items[i]==\"(\":\n            start=i\n        elif items[i]==\")\":\n            end=i\n    #inorder traversal again to find the index\n    for i in range(start+1,end):\n        #search if we have the parenthesis\n        if items[i]==\"(\" and items[i-1]==\")\":\n            #delete parenthesis from both\n            del items[start+1:i]\n            del items[i-1]\n            return reverse_string(items)\n        elif items[i]==\"(\" and items[i+1]==\")\":\n            #delete parenthesis from only the left side\n            del items[start+1:i]\n            return reverse_string(items)\n    #if not found, return the string\n    return items\ndef index_of_last_word(items):\n    '''\n    Write a function that takes a list of strings and returns the index of the last word.\n    '''\n    #inorder traversal\n    for i in range(len(items)):\n        if items[i]==\"(\":\n            start=i\n        elif items[i]==\")\":\n            end=i\n    #inorder traversal again to find the index\n    for i in range(start+1,end):\n        if items[i]==\"(\" and items[i-1]==\")\":\n            return i+1\n    return len(items)-1\ndef remove_at_least_one_parenthesis(items):\n    '''\n    Remove the ')' and '(' from a string.\n    '''\n    #inorder traversal\n    for i in range(len(items)):\n        if items[i]==\"(\":\n            start=i\n        elif items[i]==\")\":\n            end=i\n    #inorder traversal again to find the index\n    for i in range(start+1,end):\n        #search if we have the parenthesis\n        if items[i]==\"(\" and items[i-1]==\")\":\n            #delete parenthesis from both\n            del items[start+1:i]\n            return remove_at_least_one_parenthesis(items)\n        elif items[i]==\"(\" and items[i+1]==\")\":\n            #delete parenthesis from only the left side\n            del items[start+1:i]\n            return remove_at_least_one_parenthesis(items)\n    #if not found, return the string\n    return items\ndef remove_parenthesis_from_string(items):\n    '''\n    Write a function that takes a string and returns the string without any parenthesis.\n    '''\n    #inorder traversal\n    for i in range(len(items)):\n        if items[i]==\"(\":\n            start=i\n        elif items[i]==\")\":\n            end=i\n    #inorder traversal again to find the index\n    for i in range(start+1,end):\n        if items[i]==\"(\" and items[i-1]==\")\":\n            del items[start+1:i]\n            return remove_parenthesis_from_string(items)\n        elif items[i]==\"(\" and items[i+1]==\")\":\n            del items[start+1:i]\n            return remove_parenthesis_from_string(items)\n    #if not found, return the string\n    return items\ndef remove_at_least_one_parenthesis_from_string(items):\n    '''\n    Remove the ')' and '(' from a string.\n    '''\n    #inorder traversal\n    for i in range(len(items)):\n        if items[i]==\"(\":\n            start=i\n        elif items[i]==\")\":\n            end=i\n    #inorder traversal again to find the index\n    for i in range(start+1,end):\n        if items[i]==\"(\" and items[i-1]==\")\":\n            del items[start+1:i]\n            return remove_at_least_one_parenthesis_from_string(items)\n        elif items[i]==\"(\" and items[i+1]==\")\":\n            del items[start+1:i]\n            return remove_at_least_one_parenthesis_from_string(items)\n    #if not found, return the string\n    return items\ndef replace_parenthesis(items):\n    '''\n    Write a function that takes a string and returns it without any parenthesis.\n    '''\n    #inorder traversal\n    for i in range(len(items)):\n        if items[i]==\"(\":\n            start=i\n        elif items[i]==\")\":\n            end=i\n    #inorder traversal again to find the index\n    for i in range(start+1,end):\n        if items[i]==\"(\" and items[i-1]==\")\":\n            del items[start+1:i]\n            return replace_parenthesis(items)\n        elif items[i]==\"(\" and items[i+1]==\")\":\n            del items[start+1:i]\n            return replace_parenthesis(items)\n    #if not found, return the string\n    return items\ndef main():\n    '''\n    This function takes a string and returns the original string without any parenthesis.\n    '''\n    #first time run\n    print(remove_parenthesis(input()))\n    print(reverse_string(input()))\n    print(index_of_last_word(input()))\n    print(remove_at_least_one_parenthesis(input()))\n    print(remove_at_least_one_parenthesis_from_string(input()))\n    print(replace_parenthesis(input()))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if item[0] == '(':\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        if item[-1] == ')':\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        if len(item) > 0:\n            item = item.replace(' ', '')\n        else:\n            continue\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if item[-1]!= ')':\n            item = item.strip()\n            item = item.replace(')', '')\n        else:\n            continue\n        if len(item) > 0:\n            item = item.replace(' ', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n        if len(item) > 1:\n            item = item.replace(')', '')\n            item = item.replace('(', '')\n        else:\n            continue\n        item = item.strip()\n    "
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items[1:-1]\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    l = list(items)\n    l = l[1:l.index(',')]\n    return l\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n - 1\n    if (n % 2 == 1):\n        return n\n    else:\n        return n // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    m = int(n**0.5) + 1\n    i = 0\n    while n > 2 * i:\n        if (n % (2 * i)) == 0:\n            break\n        i += 1\n    return (i - 2) * 2\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n<0:\n        return print('Please enter a positive number')\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    elif n==4:\n        return 4\n    elif n==5:\n        return 5\n    elif n==6:\n        return 6\n    elif n==7:\n        return 7\n    elif n==8:\n        return 8\n    elif n==9:\n        return 9\n    else:\n        return 0\nn=int(input('Enter a number: '))\nis_nonagonal(n)"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        print(\"Invalid input\")\n        return\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return is_nonagonal(n - 1) + is_nonagonal(n - 2) + is_nonagonal(n - 3)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1)) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n+1) % 2 == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # The input is either a positive or negative number,\n    # or an array containing only 0s and/or 1s.\n    # The function should return the nth nonagonal number.\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    result = 0\n    \n    while n > 0:\n        result += 1\n        n = n//3\n    \n    return result\n    \n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = str(text)\n    z_char = 'z'\n    start = 'z'\n    end = 'z'\n    if len(text) == 1:\n        return True\n    if len(text) > 1:\n        start = text[1]\n    if len(text) < 1:\n        end = text[0]\n    for i in range(len(text)-1):\n        if (text[i] == 'z' and text[i+1] == z_char):\n            return True\n        if (text[i] == 'z' and text[i+1]!= z_char):\n            return False\n    for i in range(len(text)-1):\n        if (text[i]!= z_char):\n            return False\n    if text[-1] == end:\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(\"z\")\n    if pattern.search(text):\n        return False\n    else:\n        return True\n    \ndef text_match_wordz_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    pattern = re.compile(\"z\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # test on each line\n    text = text.lower()\n    wordz = re.compile('z')\n    matches = wordz.findall(text)\n    if text == matches[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    search = re.search(r'z',text)\n    if search == None:\n        return True\n    else:\n        return False\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    search = re.search(r'z',text)\n    if search == None:\n        return True\n    else:\n        return False\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end and start of the word.\n    '''\n    search = re.search(r'z',text)\n    if search == None:\n        return True\n    else:\n        return False\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    search = re.search(r'z',text)\n    if search == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    str_word = text.split(\" \")\n    if len(str_word) < 3:\n        return False\n    z_str = ''\n    z_flag = ''\n    for i in str_word:\n        if 'z' in i:\n            z_str += 'z'\n        elif 'z' in i:\n            z_flag = 'z'\n    z_space = 'z '\n    if z_str[1] == z_str[-1]:\n        return False\n    if len(z_str) > 2 and z_str[1] == z_str[-2]:\n        return False\n    if z_str[0] == z_str[-1]:\n        return False\n    if z_flag!= 'z':\n        return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex_text = re.compile(r'[Zz]')\n    wordz_middle = regex_text.findall(text)\n    if wordz_middle!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text)<3:\n        return False\n    for word in text:\n        if word=='z':\n            continue\n        elif word[0]=='z':\n            continue\n        elif word[-1]=='z':\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall(r'[^\\wZ]+', text)\n    for r in result:\n        if r == '':\n            return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern=re.compile('z[a-zA-Z0-9]{1,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z' and text[-1] == 'z':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    index = k \n    str = \"\" \n    for i in range(0, len(input)): \n        str += input[i] \n        \n    return str[index:] \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #declaring a return value \n    r=[] \n    #loop to iterate until the required position is reached \n    for i in range(len(input)): \n        #using index to access the value \n        r.append(input[i]) \n    #iterate till the required k positions \n    for i in range(0, len(r) - k): \n        #extracting the element \n        temp=r[i:i+k] \n        #add the element to the end of array \n        r.append(temp) \n    #return array \n    return r"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # return reversed(input)\n    return reverse_Array_Upto_K_rec(input, k)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= input.__len__(): \n        raise Exception('Array has no length')\n    result = input[:] \n    last = result[k] \n    result[k] = input[-1] \n    result[-1] = last \n    return result \n "
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    j = 0\n    result = []\n    while j < len(input):\n        result.append(input[j])\n        j += k\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp = input[k]\n    for i in range(0, k - 1): \n        input[i] = input[i + 1]\n    input[k] = temp\n    \ndef write_Array_Upto_K(input, k): \n    '''\n    Write a python function to write an array upto a given position.\n    '''\n    temp = input[k]\n    for i in range(0, k - 1): \n        input[i] = input[i + 1]\n    input[k] = temp\n    \ndef SelectionSort(input): \n    '''\n    Write a python function to sort an array.\n    '''\n    n = len(input)\n    for i in range(0, n-1): \n        min_index = i \n        for j in range(i+1, n): \n            if (input[j] < input[min_index]): \n                min_index = j \n        if (min_index!= i): \n            temp = input[i] \n            input[i] = input[min_index] \n            input[min_index] = temp \n    return input \n        \ndef BubbleSort(input): \n    '''\n    Write a python function to sort an array.\n    '''\n    n = len(input)\n    for i in range(n-1): \n        for j in range(n-i-1): \n            if (input[j] > input[j+1]): \n                temp = input[j] \n                input[j] = input[j+1] \n                input[j+1] = temp \n    return input \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return (input[::-1])[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if (k > len(input)):\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1][0:k]\n    \ndef reverse_Array_Upto_K_2(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1][:k] + input[::-1][k:]\n    \ndef reverse_Array_Upto_K_3(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(0, len(input) - 1): \n        output.append(input[i]) \n    output[-1] = input[-1] \n    input[:] = input[::-1] \n    return output\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n    if type(test_tup) is not tuple:\n        raise TypeError(\"First argument needs to be a tuple\")\n    elif type(test_dict) is not dict:\n        raise TypeError(\"Second argument needs to be a dictionary\")\n    for key in test_dict.keys():\n        if key not in test_tup:\n            raise KeyError(f\"{key} does not exist in the dictionary\")\n        else:\n            test_tup.append(test_dict[key])\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if type(test_dict)!= dict:\n        raise TypeError('test_dict must be a dictionary.')\n    test_tup = (test_tup[0], test_tup[1], test_dict)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if not isinstance(test_dict, dict):\n        raise TypeError(\"The input must be a dictionary.\")\n    else:\n        for k,v in test_dict.items():\n            test_tup.append((k, v))\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Your code here\n    \n    if not isinstance(test_tup, tuple):\n        test_tup = (test_tup,)\n    for i,j in test_dict.items():\n        if type(j) is dict:\n            test_tup = tuple([i, j])\n            break\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + test_dict\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # make sure this is a tuple\n    if type(test_tup)!= tuple:\n        raise TypeError('The parameter for add_dict_to_tuple must be a tuple')\n    # check for each key in the dictionary\n    for key in test_dict:\n        # add the key and the value to the tuple\n        if type(test_dict[key]) == dict:\n            # add the key and the value to the tuple\n            test_tup = add_dict_to_tuple(test_tup, test_dict[key])\n        else:\n            # add the key and value to the tuple\n            test_tup = add_dict_to_tuple(test_tup, (test_dict[key], test_dict[key]))\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = tuple(test_tup)\n    for key in test_dict:\n        test_tup += (key, test_dict[key])\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup = test_tup + (test_dict,)\n    return tup\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    cost = sorted(cost)\n    paths = [cost] * (n - 1)\n    paths[0] = 0\n    for i in range(1, n):\n        paths[i] = paths[i - 1] + cost[i - 1]\n    return paths\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    if m == 0:\n        return 0\n    n = len(cost[0])\n    if m == n:\n        return sum(cost) / n\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maxAveragePaths = [0]*len(cost)\n    maxAveragePaths[0] = cost[0][0]\n    for i in range(1,len(cost)):\n        currentAveragePaths = [0]*len(cost)\n        currentAveragePaths[i] = cost[i][0]\n        for j in range(1,len(cost[0])):\n            path = getPath(cost,i,j)\n            currentAveragePaths[j] += currentAveragePaths[j-1]\n        maxAveragePaths[i] = currentAveragePaths[0]/len(path)\n    return maxAveragePaths[len(cost) - 1]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # We get the dimensions of the matrix\n    n = len(cost)\n    # Find the number of cells\n    m = len(cost[0])\n    # Create a list to store the maximum averaged values\n    maxVals = [0] * m\n    # Set the values to the initial values\n    for i in range(n):\n        for j in range(m):\n            if cost[i][j]!= 0:\n                val = cost[i][j] / cost[i][j-1] if cost[i][j]!= 0 else 0\n                maxVals[j] = max(val, maxVals[j])\n    # Calculate the sum of all the max values of the list\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans += maxVals[j] * cost[i][j]\n    return ans\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    maxAverage = 0\n    currTotal = 0\n    for i in range(N):\n        for j in range(N):\n            currTotal += cost[i][j]\n            if currTotal > maxAverage:\n                maxAverage = currTotal\n    return maxAverage/N\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    ans = 0\n    for i in range(N):\n        for j in range(N):\n            ans += cost[i][j]*(i+1) + cost[i][j+1]*(N-1-j)\n    return ans//N\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m=len(cost)\n    n=len(cost[0])\n    ret = [0]*n\n    visited = [0]*n\n    for i in range(m):\n        for j in range(n):\n            if cost[i][j]!= 0:\n                visited[i] += cost[i][j]\n        for j in range(n):\n            if cost[i][j]!= 0:\n                ret[j] += cost[i][j]/visited[j]\n                visited[j] -= cost[i][j]\n    for i in range(n):\n        ret[i] /= visited[i]\n    return ret\ndef minAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the minimum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m=len(cost)\n    n=len(cost[0])\n    ret = [0]*n\n    visited = [0]*n\n    for i in range(m):\n        for j in range(n):\n            if cost[i][j]!= 0:\n                visited[i] += cost[i][j]\n        for j in range(n):\n            if cost[i][j]!= 0:\n                ret[j] += cost[i][j]/visited[j]\n                visited[j] -= cost[i][j]\n    for i in range(n):\n        ret[i] /= visited[i]\n    return ret\ndef sumOfPath(path):\n    '''\n    Given a path, compute the total sum of a path.\n    '''\n    s=0\n    for i in range(len(path)-1):\n        s+=path[i]\n    return s\ndef calcPath(path):\n    '''\n    Given a path, compute the total sum of a path.\n    '''\n    s=0\n    for i in range(len(path)-1):\n        s+=path[i]\n    return s\ndef printPath(path):\n    '''\n    Given a path, print a path on a matrix with the same size as the path.\n    '''\n    for i in range(len(path)):\n        for j in range(len(path[i])):\n            print(path[i][j],end=' ')\n        print('\\n')\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Number of N = size of square matrix\n    N = len(cost)\n    # Initialize the matrix with the cost\n    matrix = cost\n    # For every N-1 step, find the next cell's total cost using the current path\n    for n in range(1, N-1):\n        matrix[n][n] = cost[n-1] + matrix[n-1][n]\n    # The final cell, with the lowest cost, moves to the bottom right cell\n    for n in range(N-2, 0, -1):\n        matrix[n][N-1] = cost[n] + matrix[n][N-1]\n    # Return the maximum average\n    return matrix[0][N-1] / N\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    sum = 0\n    if cost[0][0] == 0:\n        return 0\n    elif cost[0][0] == 1:\n        return cost[0][0]\n    else:\n        for i in range(len(cost)):\n            if cost[i][0] == 0:\n                sum += cost[i][1]\n            elif cost[i][0] == 1:\n                sum += cost[i][1]/cost[i][0]\n            else:\n                print(\"Error\")\n                return 0\n    return sum/cost[0][0]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #All possible paths are iterated\n    total_paths = []\n    total_paths.append([cost[0][0],cost[0][-1]])\n    for i in range(1,len(cost[0])):\n        for path in total_paths:\n            total_paths.append([path[0]+i,path[1]+i])\n            total_paths.append([path[0],path[1]+i])\n    paths_to_check = [total_paths[i] for i in range(len(total_paths)) if len(total_paths[i]) == 1]\n    \n    #Find the paths with the highest average\n    max_average = 0\n    paths_with_highest_average = []\n    for path in paths_to_check:\n        average = 0\n        path.reverse()\n        for i in range(len(path)):\n            average += cost[path[i][0]][path[i][-1]]\n            if average > max_average:\n                paths_with_highest_average = path\n                max_average = average\n    return paths_with_highest_average\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if h < 1:\n        print(\"Hm, the height should be greater than 0\")\n        return False\n    if w < 1:\n        print(\"Wm, the weight should be greater than 0\")\n        return False\n    if len(students) == 0:\n        return students\n    print(\"we have \",len(students),\"students\")\n    print(\"h = \",h,\" w = \",w)\n    print(\"iterating through the data...\")\n    print(\"students = \",students)\n    for i in range(len(students)):\n        if students[i][1] > (h/w)*100:\n            print(\"h > \",h)\n            print(\"weight > \",students[i][1])\n            print(\"student\",students[i][0],\"appeared in the data\")\n            del students[i]\n            print(\"new students = \",students)\n        elif students[i][1] < (h/w)*100:\n            print(\"weight < \",students[i][1])\n            print(\"student\",students[i][0],\"appeared in the data\")\n            del students[i]\n            print(\"new students = \",students)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Code here\n    return sorted(list(filter(lambda student: student[1]>=(h+w),students.items())), key=lambda item: item[1][1])\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    max_height=0\n    max_weight=0\n    max_height_and_weight = None\n    for student in students:\n        height, weight = students[student][0], students[student][1]\n        if height > max_height and weight > max_weight:\n            max_height=height\n            max_weight=weight\n            max_height_and_weight=student\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #\n    # YOUR CODE HERE\n    \n    for s in students:\n        if (s['height'] < h and s['weight'] < w):\n            students.remove(s)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #initialize results\n    results = []\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #set up the output\n    output_dict = {}\n    output_dict[\"student\"] = []\n    for student in students:\n        if student[\"height\"]>h and student[\"weight\"]>w:\n            output_dict[\"student\"].append(student)\n    output_dict[\"student\"]=sorted(output_dict[\"student\"], key=lambda student: student[\"height\"])\n    return output_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create a list of keys for students.\n    student_names = list(students.keys())\n    # Create an empty list for storing the filtered data.\n    filtered_data = []\n    # Iterate over all student names.\n    for student in student_names:\n        # Check if the student is higher than the minimum height.\n        if students[student][0] >= h and students[student][1] >= w:\n            # Add the student's name and height and weight to the filtered_data.\n            filtered_data.append(students[student])\n            # If the student is not at the minimum height or weight, remove it from the list of student names.\n            if students[student][0] >= h:\n                del student_names[student_names.index(student)]\n            if students[student][1] >= w:\n                del student_names[student_names.index(student)]\n    return filtered_data\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return list(filter(lambda student: student[1] > h and student[1] > w,students))\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #Step 1: check if the dictionary is empty or not\n    if len(students) == 0:\n        return \"Not filled in\"\n    #Step 2: sort the dictionary by age\n    sorted_d = sorted(students.items(),key = lambda x: x[1][0])\n    #print(sorted_d)\n    #Step 3: select the highest weight student as the minweight student\n    heights = []\n    weights = []\n    for i in sorted_d:\n        heights.append(i[1][0])\n        weights.append(i[1][1])\n    #print(heights)\n    #Step 4: if the lowest weight student is less than the minimum weight student, remove it\n    if min(weights) < min(heights):\n        return \"Removed\"\n    #Step 5: repeat the process till it reaches the end of the list\n    else:\n        for j in range(len(heights)-1):\n            if heights[j] < heights[j+1]:\n                continue\n            else:\n                heights.pop(j)\n                weights.pop(j)\n        #print(heights)\n        #print(weights)\n        #Step 6: if the total weight of all the students is less than the minimum weight of the minweight student, remove it\n        if sum(weights) < min(heights):\n            return \"Removed\"\n        #Step 7: return the name of the minweight student\n        return min(heights)\n        #print(heights)\n        #print(weights)\n    #Step 8: return the name of the minweight student\n    #return min(heights)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    #print(students)\n    #print(h)\n    #print(w)\n    for name,(height,weight) in students.items():\n        if (weight >= w and height >= h):\n            #print(name,weight,h)\n            filtered_students.append([name,weight,h])\n    #print(filtered_students)\n    return filtered_students\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dict_nums = dict()\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                if nums1[i] in dict_nums:\n                    dict_nums[nums1[i]] += 1\n                else:\n                    dict_nums[nums1[i]] = 1\n    return dict_nums.values()\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    set1 = set(nums1)\n    set2 = set(nums2)\n    d1 = dict()\n    d2 = dict()\n    for i in set1:\n        d1[i] = nums1.count(i)\n    for j in set2:\n        d2[j] = nums2.count(j)\n    return dict(zip(d1,d2))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize the count array with -1\n    count = -1\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                result += 1\n    return result\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    res = 0\n    for i,j in zip(nums1,nums2):\n        if eq(i,j):\n            res += 1\n    return res\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        for j in range(0, len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    list1_len = len(nums1)\n    list2_len = len(nums2)\n    i = 0\n    j = 0\n    for i in range(list1_len):\n        for j in range(list2_len):\n            if nums1[i] == nums2[j]:\n                if nums1[i] == nums2[j+1]:\n                    i = i+1\n                else:\n                    j = j+1\n            else:\n                j = j+1\n    return i\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_same_pair_indices = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                if nums1[i] == nums2[j] or nums1[i] in nums2:\n                    count_same_pair_indices += 1\n    return count_same_pair_indices\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    # Iterate through the lists, find indices of the values in the first list, and add the counts of each to the corresponding count\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            count += 1\n    # Now return the number of counts\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # if both lists are empty\n    if len(nums1)!= len(nums2):\n        return 0\n    \n    # iterate through both lists\n    ans = 0\n    i = 0\n    j = 0\n    \n    while i < len(nums1) and j < len(nums2):\n        # find if the values are the same\n        if nums1[i] == nums2[j]:\n            # increment the ans and add 1\n            ans += 1\n            i += 1\n            j += 1\n            \n        # if not the same\n        else:\n            # if the i's aren't the same as the j's, it is not a pair\n            if i!= j:\n                i += 1\n                j += 1\n                continue\n                \n            # if the i's are the same\n            else:\n                # if both lists are empty, then it is a single pair\n                if i == 0:\n                    ans += 1\n                    i += 1\n                    continue\n                # if the i's are not the same\n                else:\n                    # if the i's are the same, we are adding 1 to i\n                    if i == nums1[i-1]:\n                        i += 1\n                        continue\n                    # if the i's are not the same, it is a pair\n                    else:\n                        # we will add 1 to the answer\n                        ans += 1\n                        # add the pair to the list\n                        nums1[i-1] = nums1[i-1]\n                        # and subtract 1 from both lists\n                        nums1.pop(i-1)\n                        nums2.pop(j)\n                        # and add 1 to the answer\n                        ans += 1\n                        # add the pair to the list\n                        nums1.append(1)\n                        nums2.append(1)\n                        # and subtract 1 from both lists\n                        nums1.pop(i-1)\n                        nums2.pop(j)\n                        break\n                \n    return ans\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(d) for d in str(base)]) + sum([int(d) for d in str(power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    return base * power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    else:\n        return power_base_sum(base-1,power) + base * power_base_sum(base-1,power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    elif power == 1:\n        return base\n    elif power > 1:\n        return base + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base) if i.isdigit()])\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 1:\n        return 1\n    elif base == 2:\n        return 2\n    elif power == 0:\n        return 1\n    else:\n        return base * power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert base in range(10), \"Base can only be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.\"\n    assert power in range(10), \"Power can only be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.\"\n    assert base!= power, \"It's not clear what this means.\"\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power - 1\n    base = base * 10\n    sum = 0\n    while power >= 0:\n        sum = sum + (base ** power)\n        power = power - 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_of_base = 10 ** power\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"\u2018\", \"\", text1)\n    text = re.sub(\"\u2019\", \"\", text)\n    text = re.sub(\"\u201c\", \"\", text)\n    text = re.sub(\"\u201d\", \"\", text)\n    text = re.sub(\"\u2018\", \"\", text)\n    text = re.sub(\"\u00b4\", \"\", text)\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    for i in text1:\n        if i==\"\\\"\":\n            return \"\\\"\"\n        elif i=='\"':\n            return \"\\\"\"\n        else:\n            continue\n    return \"\"\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = r\"(\\'?\\s)*[{}]\".format(re.escape(\"'\")),\n    return re.sub(quotation_pattern, '', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(\"[\\u2019-\\u201a]+\", text1, flags=re.MULTILINE)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if type(text1) == str:\n        # The string is not a string, hence it must be a list\n        # If the first element is a list, it must be the quotation mark\n        # And if the first element is a string, it must be the quotation mark\n        quot_matches = re.findall('[\\\"\\'\\(\\)\\!\\?\\$\\%\\&\\.\\,\\:\\;\\,\\$]',text1)\n        # If the string starts with a quotation mark, it is not a list\n        if quot_matches!= []:\n            return quot_matches\n        else:\n            return []\n    else:\n        return []\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern_quot = r'\"(.*?)\"'\n    pattern_quot_quotation = re.compile(pattern_quot)\n    \n    return pattern_quot_quotation.findall(text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_m = re.search(r'(\\w+)\u2018([^\\w\\s]+)',text1)\n    print(quot_m)\n    quot_m_1 = quot_m.group(1)\n    quot_m_2 = quot_m.group(2)\n    quot_m_3 = quot_m.group(3)\n    quot_m_4 = quot_m.group(4)\n    quot_m_5 = quot_m.group(5)\n    quot_m_6 = quot_m.group(6)\n    quot_m_7 = quot_m.group(7)\n    quot_m_8 = quot_m.group(8)\n    quot_m_9 = quot_m.group(9)\n    quot_m_10 = quot_m.group(10)\n    quot_m_11 = quot_m.group(11)\n    quot_m_12 = quot_m.group(12)\n    quot_m_13 = quot_m.group(13)\n    quot_m_14 = quot_m.group(14)\n    quot_m_15 = quot_m.group(15)\n    quot_m_16 = quot_m.group(16)\n    quot_m_17 = quot_m.group(17)\n    quot_m_18 = quot_m.group(18)\n    quot_m_19 = quot_m.group(19)\n    quot_m_20 = quot_m.group(20)\n    quot_m_21 = quot_m.group(21)\n    quot_m_22 = quot_m.group(22)\n    quot_m_23 = quot_m.group(23)\n    quot_m_24 = quot_m.group(24)\n    quot_m_25 = quot_m.group(25)\n    quot_m_26 = quot_m.group(26)\n    quot_m_27 = quot_m.group(27)\n    quot_m_28 = quot_m.group(28)\n    quot_m_29 = quot_m.group(29)\n    quot_m_30 = quot_m.group(30)\n    quot_m_31 = quot_m.group(31)\n    quot_m_32 = quot_m.group(32)\n    quot_m_33 = quot_m.group(33)\n    quot_m_34 = quot_m.group(34)\n    quot_m_35 = quot_m.group(35)\n    quot_m_36 = quot_m.group(36)\n    quot_m_37 = quot_m.group(37)\n    quot_m_38 = quot_m.group(38)\n    quot_m_39 = quot_m.group(39)\n    quot_m_40 = quot_m.group(40)\n    quot_m_41 = quot_m.group(41)\n    quot_m_42 = quot_m.group(42)\n    quot_m_43 = quot_m.group(43)\n    quot_m_44 = quot_m.group(44)\n    quot_m_45 = quot_m.group(45)\n    quot_m_46 = quot_m.group(46)\n    quot_m_47 = quot_m.group(47)\n    quot_m_48 = quot_m.group(48)\n    quot_m_49 = quot_m.group(49)\n    quot_m_50 = quot_m.group(50)\n    quot_m_51 = quot_m.group(51)\n    quot_m_52 = quot_m.group(52)\n    quot_m_53 = quot_m.group(53)\n    quot_m_54 = quot_m.group(54)\n    quot_m_55 = quot_m.group(55)\n    quot_m_56 = quot_m.group(56)\n    quot_m_57 = quot_m.group(57)\n    quot_m_58 = quot_m.group(58)\n    quot_m_59 = quot_m.group(59)\n    quot_m_60 = quot_m.group(60)\n    quot_m_61 = quot_m.group(61)\n    quot_m_62 = quot_m.group(62)\n    quot_m_63 = quot_m.group(63)\n    quot_m_64 = quot_m.group(64)\n    quot_m_65 = quot_m.group(65)\n    quot_m_66 = quot_m.group(66)\n    quot_m_67 = quot_m.group(67)\n    quot_m_68 = quot_m.group(68)\n    quot_m_69 = quot_m.group(69)\n    quot_m_70 = quot_m.group(70)\n    quot_m_71 = quot_m.group(71)\n    quot_m_72 = quot_m.group(72)\n    quot_m_73 = quot_m.group(73)\n    quot_m_74 = quot_m.group(74)\n    quot_m_75 = quot_m.group(75)\n    quot_m_76 = quot_m.group(76)\n    quot_m_77 = quot_m.group(77)\n    quot_m_78 = quot_m.group(78)\n    quot_m_79 = quot_m.group(79)\n    quot_m_80 = quot_m.group(80)\n    quot_m_81 = quot_m.group(81)\n    quot_m_82 = quot_m.group(82)\n    quot_m_83 = quot_m.group(83)\n    quot_m_84 = quot_m.group(84)\n    quot_m_85 = quot_m.group(85)\n    quot_m_86 = quot_m.group(86)\n    quot_m_87 = quot_m.group(87)\n    quot_m_88 = quot_m.group(88)\n    quot_m_89 = quot_m.group(89)\n    quot_m_90 = quot_m.group(90)\n    quot_m_91 = quot_m.group(91)\n    quot_m_92 = quot_m.group(92)\n    quot_m_93 = quot_m.group(93)\n    quot_m_94 = quot_m.group(94)\n    quot_m_95 = quot_m.group(95)\n    quot_m_96 = quot_m.group(96)\n    quot_m_97 = quot_m.group(97)\n    quot_m_98 = quot_m.group(98)\n    quot_m_99 = quot_m.group(99)\n    quot_m_100 = quot_m.group(100)\n    quot_m_101 = quot_m.group(101)\n    quot_m_102 = quot_m.group(102)\n    quot_m_103 = quot_m.group(103)\n    quot_m_104 = quot_m.group(104)\n    quot_m_105 = quot_m.group(105)\n    quot_m_106 = quot_m.group(106)\n    quot_m_107 = quot_m.group(107)\n    quot_m_108 = quot_m.group(108)\n    quot_m_109 = quot_m.group(109)\n    quot_m_110 = quot_m.group(110)\n    quot_m_111 = quot_m.group(111)\n    quot_m_112 = quot_m.group(112)\n    quot_m_113 = quot_m.group(113)\n    quot_m_114 = quot_m.group(114)\n    quot_m_115 = quot_m.group(115)\n    quot_m_116 = quot_m.group(11"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern1 = re.compile('^\"(.+)\"$') # capture a string that starts with a quotation mark and ends with a quotation mark.\n    pattern2 = re.compile('(.+)\"') # capture a string that starts with a quotation mark and ends with a quotation mark.\n    pattern3 = re.compile('(.+)\"\\n') # capture a string that starts with a quotation mark and ends with a quotation mark.\n    result = pattern1.findall(text1)\n    result = pattern2.findall(text1)\n    result = pattern3.findall(text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace('\"', '')\n    quotation_regex = re.compile(r\"([^'\\\"]*)(')([^']*)\")\n    m = quotation_regex.search(text1)\n    if m is None:\n        return None\n    q1 = m.group(1)\n    q2 = m.group(3)\n    return q1 +'' + q2\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.lower()\n    text = re.sub(r'[.,!?]','', text)\n    text = re.sub(r'[^A-Za-z0-9]', '', text)\n    text = re.sub(r'\\b[\\w]+\\b', '', text)\n    text = re.sub(r'[^A-Za-z0-9]','', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{4}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{4}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{4}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{4}[-]\\d{3}[-]\\d{3}[-]\\d{4}', '', text)\n    text = re.sub(r'\\b\\d{3}[-]\\d{3}[-]\\d"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    return tuple(map(lambda tup: tup * test_tup, test_tup))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1, t_2 = test_tup\n    test_tup_with_length = t_1, t_2\n    return test_tup_with_length\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_N = len(test_tup)\n    t_sum = 0\n    for i in range(1,t_N+1):\n        t_sum += test_tup[i] * test_tup[i-1]\n    return(t_1,t_sum)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda x: x * test_tup[0], test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_len = len(test_tup)\n    t_i = 0\n    t_i_max = 0\n    t_i_min = 0\n    for i in range(t_len-1):\n        t_i = i+1\n        t_i_max = max(t_i,t_i_max)\n        t_i_min = min(t_i,t_i_min)\n        if t_i%2 == 0:\n            t_i_tot = t_i_min\n        else:\n            t_i_tot = t_i_max\n        test_tup[i] = t_i_tot\n    return test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup = (0,)*len(test_tup)\n    for i in range(len(test_tup)):\n        tup[i] = test_tup[i] * test_tup[i+1]\n    return tuple(tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #your code here\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1:]\n    t_3 = []\n    for i in range(0,len(t_1)):\n        t_3.append(t_1[i] * t_2[i])\n    return tuple(t_3)\n    pass\n    \n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    print(\"START\")\n    result = ()\n    print(\"TEST: \", test_tup)\n    for t in test_tup:\n        if isinstance(t, int):\n            result = result + (t,)\n        elif isinstance(t, tuple):\n            result = result + (t,)\n        else:\n            result = result + (t)\n    print(\"RESULT: \", result)\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1)+sum(lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #Take input from user\n    s = []\n    for i in range(len(lst1)):\n        s.append(lst1[i]+lst2[i])\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    return [sum(i) for i in zip(lst1,lst2)]\n    \n    \n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1 = list(lst1)\n    lst2 = list(lst2)\n    lst1 += lst2\n    lst1 = [int(i) for i in lst1]\n    lst2 = [int(i) for i in lst2]\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Your code here\n    s=0\n    for i in lst1:\n        s=s+i\n    for i in lst2:\n        s=s+i\n    return s\n    #raise NotImplementedError\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1+lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    '''\n    lst1, lst2 = [], []\n    for i in range(len(a_1)+len(b_1)):\n        lst1.append(a_1+b_1[i])\n    for i in range(len(a_2)+len(b_2)):\n        lst2.append(a_2+b_2[i])\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1)+sum(lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    a_sums = 0\n    b_sums = 0\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(dict.fromkeys(list(enumerate(nums))))\n    \n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    l = []\n    for i in range(len(nums)):\n        l.append([nums[i], nums[i+1]])\n    return l\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(dict.fromkeys(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i in range(len(nums)):\n        cur_num = nums[i]\n        for j in range(i, len(nums)):\n            if nums[j] == cur_num:\n                nums[j] = nums[i]\n                nums[i] = cur_num\n                i = j\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    seen_add = seen.add\n    for item in nums:\n        if item in seen:\n            seen_add(item)\n        else:\n            seen_add(item)\n    return [x for x, y in groupby(seen) if not (y in seen and y is not None)]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    for i in range(len(nums)):\n        if nums[i] not in seen:\n            seen.add(nums[i])\n        else:\n            return nums[i]\n    return -1\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # nums = list(nums)\n    dup = []\n    for i in range(len(nums)):\n        if nums[i] not in dup:\n            dup.append(nums[i])\n    return dup\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # if there are no duplicates, return an empty list\n    if len(set(nums)) == len(nums):\n        return []\n    return list(dict.fromkeys(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # O(n^2)\n    \n    # make a map for the unique values\n    unique_map = {}\n    for value in set(nums):\n        if value not in unique_map:\n            unique_map[value] = 0\n        unique_map[value] += 1\n    \n    # return the list without duplicates\n    result = list(set(nums))\n    \n    for index, value in enumerate(nums):\n        if unique_map[value] == 1:\n            result.pop(index)\n    \n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums: return []\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    f = h**2\n    fi = (4*h)/(3*(2*math.pi*r))\n    return f * math.sin(fi*(3*math.pi)/2)*math.cos(fi*(3*math.pi)/2)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1/math.sqrt(2))*(math.pow(r,2)*math.pow(math.sin(h/2),2))\ndef lateralsurface_disc(r,h):\n    '''\n    Write a function to find the lateral surface area of a disc given radius r and the height h.\n    '''\n    return (1/math.sqrt(2))*(math.pow(r,2)*math.pow(math.cos(h/2),2))\ndef other_surfaces(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given height h.\n    '''\n    return (1/math.sqrt(2))*(math.pow(r,2)*math.pow(math.sin(h/2),2))\ndef crust_surfaces(h):\n    '''\n    Write a function to find the lateral surface area of a crust given height h.\n    '''\n    return (1/math.sqrt(2))*(math.pow(h,2))\ndef surfaces(r,h):\n    '''\n    Write a function to find the lateral surface area of a rectangle given radius r and the height h.\n    '''\n    return (1/math.sqrt(2))*(math.pow(r,2)*math.pow(math.sin(h/2),2))\ndef thin_plate_surfaces(r):\n    '''\n    Write a function to find the lateral surface area of a thin plate given radius r.\n    '''\n    return (1/math.sqrt(2))*(math.pow(r,2))\ndef shell_surfaces(h):\n    '''\n    Write a function to find the lateral surface area of a shell given height h.\n    '''\n    return (1/math.sqrt(2))*(math.pow(h,2))\ndef rectangular_surfaces(r):\n    '''\n    Write a function to find the lateral surface area of a rectangular rectangular shell given radius r.\n    '''\n    return (1/math.sqrt(2))*(math.pow(r,2))\ndef shell_circumference(r):\n    '''\n    Write a function to find the circumference of a shell given radius r.\n    '''\n    return (math.pi*r**2)\ndef shell_area(r):\n    '''\n    Write a function to find the area of a shell given radius r.\n    '''\n    return (math.pi*r*r)\ndef shell_volume(r):\n    '''\n    Write a function to find the volume of a shell given radius r.\n    '''\n    return (math.pi*r*r*r)\ndef shell_surface_volume(h):\n    '''\n    Write a function to find the surface volume of a shell given height h.\n    '''\n    return (1/math.sqrt(2))*(math.pow(h,2))\ndef shell_surface_area(r):\n    '''\n    Write a function to find the area of a shell given radius r.\n    '''\n    return (math.pow(r,2))*(math.pow(r,2))\ndef shell_circle_radius(r):\n    '''\n    Write a function to find the radius of a shell given radius r.\n    '''\n    return math.pow(r,2)\ndef shell_surface_radius(h):\n    '''\n    Write a function to find the surface radius of a shell given height h.\n    '''\n    return (1/math.sqrt(2))*(math.pow(h,2))\ndef shell_surface_area(r):\n    '''\n    Write a function to find the surface area of a shell given radius r.\n    '''\n    return (1/math.sqrt(2))*(math.pow(r,2))\ndef shell_surface_volume(r):\n    '''\n    Write a function to find the surface volume of a shell given radius r.\n    '''\n    return (math.pow(r,2))*(math.pow(r,2))\ndef shell_surface_area(h):\n    '''\n    Write a function to find the surface area of a shell given height h.\n    '''\n    return (1/math.sqrt(2))*(math.pow(h,2))\ndef shell_volume_area(h):\n    '''\n    Write a function to find the volume of a shell given height h.\n    '''\n    return (math.pow(h,2))*(math.pow(h,2))\ndef shell_volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a shell given radius r and height h.\n    '''\n    return (1/math.sqrt(2))*(math.pow(r,2)*math.pow(math.sin(h/2),2))\ndef shell_surface_cylinder(r,h):\n    '''\n    Write a function to find the surface volume of a shell given radius r and height h.\n    '''\n    return (1/math.sqrt(2))*(math.pow(r,2)*math.pow(math.cos(h/2),2))\ndef shell_cylinder_radius(r,h):\n    '''\n    Write a function to find the radius of a shell given radius r and height h.\n    '''\n    return math.pow(r,2)\ndef shell_surface_cylinder(r,h):\n    '''\n    Write a function to find the surface volume of a shell given radius r and height h.\n    '''\n    return (1/math.sqrt(2))*(math.pow(r,2)*math.pow(math.sin(h/2),2))\ndef shell_surface_volume(r,h):\n    '''\n    Write a function to find the surface volume of a shell given radius r and height h.\n    '''\n    return (math.pow(r,2)*math.pow(math.cos(h/2),2))\ndef shell_cylinder_area(r,h):\n    '''\n    Write a function to find the area of a shell given radius r and height h.\n    '''\n    return (math.pow(r,2))*(math.pow(r,2)*math.pow(math.sin(h/2),2))\ndef shell_surface_cylinder(r,h):\n    '''\n    Write a function to find the surface volume of a shell given radius r and height h.\n    '''\n    return (math.pow(r,2)*math.pow(math.cos(h/2),2))\ndef shell_cylinder_volume(r,h):\n    '''\n    Write a function to find the surface volume of a shell given radius r and height h.\n    '''\n    return (math.pow(r,2))*(math.pow(r,2)*math.pow(math.sin(h/2),2))\ndef shell_cylinder_surface_area(r):\n    '''\n    Write a function to find the surface area of a shell given radius r.\n    '''\n    return (math.pow(r,2))*(math.pow(r,2)*math.pow(math.cos(r/2),2))\ndef shell_cylinder_surface_volume(r):\n    '''\n    Write a function to find the surface volume of a shell given radius r.\n    '''\n    return math.pow(r,2)*(math.pow(r,2)*math.pow(math.sin(r/2),2))\ndef shell_surface_cylinder_volume(r,h):\n    '''\n    Write a function to find the surface volume of a shell given radius r and height h.\n    '''\n    return (math.pow(r,2))*(math.pow(r,2)*math.pow(math.sin(h/2),2))\ndef shell_surface_cylinder_area(r,h):\n    '''\n    Write a function to find the area of a shell given radius r and height h.\n    '''\n    return (math.pow(r,2))*(math.pow(r,2)*math.pow(math"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if h < 0.0001:\n        return 0.0\n    pi = 3.141592653589793\n    m = 3.0\n    e = 10.0\n    a = (math.pow(r,2))*(math.pow(h,2))*pi\n    a1 = 0.0\n    a2 = 0.0\n    a3 = 0.0\n    for i in range(0,3):\n        a1 += 2.0*(1.0+m*e*(r**2))\n        a2 += 2.0*(1.0+m*e*(r**3))\n        a3 += 2.0*(1.0+m*e*(r**4))\n    a4 = a3*(1.0/3.0)\n    a5 = a2*(1.0/2.0)\n    a6 = a1*(1.0/2.0)\n    return a1+a2+a3+a4+a5+a6\ndef alternate_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if h < 0.0001:\n        return 0.0\n    pi = 3.141592653589793\n    m = 3.0\n    e = 10.0\n    a = (math.pow(r,2))*(math.pow(h,2))*pi\n    a1 = 0.0\n    a2 = 0.0\n    a3 = 0.0\n    a4 = 0.0\n    for i in range(0,3):\n        a1 += 2.0*(1.0+m*e*(r**2))\n        a2 += 2.0*(1.0+m*e*(r**3))\n        a3 += 2.0*(1.0+m*e*(r**4))\n    a4 = a3*(1.0/3.0)\n    a5 = a2*(1.0/2.0)\n    a6 = a1*(1.0/2.0)\n    return a1+a2+a3+a4+a5+a6\ndef perpendicular_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if h < 0.0001:\n        return 0.0\n    pi = 3.141592653589793\n    m = 3.0\n    e = 10.0\n    a = (math.pow(r,2))*(math.pow(h,2))*pi\n    a1 = 0.0\n    a2 = 0.0\n    a3 = 0.0\n    a4 = 0.0\n    for i in range(0,3):\n        a1 += 2.0*(1.0+m*e*(r**2))\n        a2 += 2.0*(1.0+m*e*(r**3))\n        a3 += 2.0*(1.0+m*e*(r**4))\n    a4 = a3*(1.0/3.0)\n    a5 = a2*(1.0/2.0)\n    a6 = a1*(1.0/2.0)\n    return a1+a2+a3+a4+a5+a6\ndef f_ellipse(a,b,c,e,f,g):\n    '''\n    Write a function to find the circumference of a triangle.\n    '''\n    if f < 0.0001:\n        return 0.0\n    pi = 3.141592653589793\n    m = 3.0\n    e = 10.0\n    a1 = 0.0\n    a2 = 0.0\n    a3 = 0.0\n    a4 = 0.0\n    a5 = 0.0\n    a6 = 0.0\n    a7 = 0.0\n    a8 = 0.0\n    a9 = 0.0\n    a10 = 0.0\n    for i in range(0,11):\n        a1 += 2.0*(1.0+m*e*(a**2))\n        a2 += 2.0*(1.0+m*e*(a**3))\n        a3 += 2.0*(1.0+m*e*(a**4))\n    a4 = a3*(1.0/3.0)\n    a5 = a2*(1.0/2.0)\n    a6 = a1*(1.0/2.0)\n    a7 = a4*(1.0/2.0)\n    a8 = a5*(1.0/2.0)\n    a9 = a6*(1.0/2.0)\n    a10 = a7*(1.0/2.0)\n    return a1+a2+a3+a4+a5+a6+a7+a8+a9+a10\ndef f_ellipse_perpendicular(a,b,c,e,f,g):\n    '''\n    Write a function to find the circumference of a triangle.\n    '''\n    if f < 0.0001:\n        return 0.0\n    pi = 3.141592653589793\n    m = 3.0\n    e = 10.0\n    a1 = 0.0\n    a2 = 0.0\n    a3 = 0.0\n    a4 = 0.0\n    a5 = 0.0\n    a6 = 0.0\n    a7 = 0.0\n    a8 = 0.0\n    a9 = 0.0\n    a10 = 0.0\n    a11 = 0.0\n    for i in range(0,11):\n        a1 += 2.0*(1.0+m*e*(a**2))\n        a2 += 2.0*(1.0+m*e*(a**3))\n        a3 += 2.0*(1.0+m*e*(a**4))\n    a4 = a3*(1.0/3.0)\n    a5 = a2*(1.0/2.0)\n    a6 = a1*(1.0/2.0)\n    a7 = a4*(1.0/2.0)\n    a8 = a5*(1.0/2.0)\n    a9 = a6*(1.0/2.0)\n    a10 = a7*(1.0/2.0)\n    a11 = a10*(1.0/2.0)\n    return a1+a2+a3+a4+a5+a6+a7+a8+a9+a10+a11\ndef f_ellipse_perpendicular_perpendicular(a,b,c,e,f,g):\n    '''\n    Write a function to find the circumference of a triangle.\n    '''\n    if f < 0.0001:\n        return 0.0\n    pi = 3.141592653589793\n    m = 3.0\n    e = 10.0\n    a1 = 0.0\n    a2 = 0.0\n    a3 = 0.0\n    a4 = 0.0\n    a5 = 0.0\n    a6 = 0.0\n    a7 = 0.0\n    a8 = 0.0\n    a9 = 0.0\n    a10 = 0.0\n    a11 = 0.0\n    a12 = 0.0\n    for i in range(0,11):\n        a1 += 2.0*(1.0+m*e*(a**2))\n        a2 += 2.0*(1.0+m*e*(a**3))\n        a3 += 2.0*(1.0+m*e*(a**4))\n    a4 = a3*(1.0/3.0)\n    a5 = a2*(1.0/2.0)\n    a6 = a1*(1.0/2.0)\n    a7 = a4*(1.0/2.0)\n    a8 = a5*(1.0/2.0)\n    a9 = a"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # import math\n    #\n    # def cone_surface(r,h):\n    #     return (2 * math.pi * (r**2) * (h/2))\n    #\n    # def calc_surface(r,h):\n    #     return (2 * math.pi * (r**2) * (h/2))\n    #\n    # def calc_area(r,h):\n    #     return (2 * math.pi * (r**2))\n    #\n    # def find_surface(r,h):\n    #     return (math.pi * (r**2)) * (h/2)\n    #\n    # def find_area(r,h):\n    #     return (math.pi * (r**2))\n    #\n    # def find_cone_height(r,h):\n    #     return (2 * math.pi * (r**2))\n    #\n    # def find_cone_radius(r,h):\n    #     return (r * math.sqrt(2))\n    #\n    # def find_cone_surface(r,h):\n    #     return (2 * math.pi * (r**2)) * (math.cos(math.pi * (r**2) / (2 * r)))\n    #\n    # def find_cone_area(r,h):\n    #     return (2 * math.pi * (r**2)) * (h/2)\n    #\n    # def find_cone_height(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_radius(r,h):\n    #     return 2 * math.pi * (r**2)\n    #\n    # def find_cone_surface(r,h):\n    #     return 2 * math.pi * (r**2) * (math.cos(math.pi * (r**2) / (2 * r)))\n    #\n    # def find_cone_area(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_height(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_radius(r,h):\n    #     return 2 * math.pi * (r**2)\n    #\n    # def find_cone_surface(r,h):\n    #     return 2 * math.pi * (r**2) * (math.cos(math.pi * (r**2) / (2 * r)))\n    #\n    # def find_cone_area(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_height(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_radius(r,h):\n    #     return 2 * math.pi * (r**2)\n    #\n    # def find_cone_surface(r,h):\n    #     return 2 * math.pi * (r**2) * (math.cos(math.pi * (r**2) / (2 * r)))\n    #\n    # def find_cone_area(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_height(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_radius(r,h):\n    #     return 2 * math.pi * (r**2)\n    #\n    # def find_cone_surface(r,h):\n    #     return 2 * math.pi * (r**2) * (math.cos(math.pi * (r**2) / (2 * r)))\n    #\n    # def find_cone_area(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_height(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_radius(r,h):\n    #     return 2 * math.pi * (r**2)\n    #\n    # def find_cone_surface(r,h):\n    #     return 2 * math.pi * (r**2) * (math.cos(math.pi * (r**2) / (2 * r)))\n    #\n    # def find_cone_area(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_height(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_radius(r,h):\n    #     return 2 * math.pi * (r**2)\n    #\n    # def find_cone_surface(r,h):\n    #     return 2 * math.pi * (r**2) * (math.cos(math.pi * (r**2) / (2 * r)))\n    #\n    # def find_cone_area(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_height(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_radius(r,h):\n    #     return 2 * math.pi * (r**2)\n    #\n    # def find_cone_surface(r,h):\n    #     return 2 * math.pi * (r**2) * (math.cos(math.pi * (r**2) / (2 * r)))\n    #\n    # def find_cone_area(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_height(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_radius(r,h):\n    #     return 2 * math.pi * (r**2)\n    #\n    # def find_cone_surface(r,h):\n    #     return 2 * math.pi * (r**2) * (math.cos(math.pi * (r**2) / (2 * r)))\n    #\n    # def find_cone_area(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_height(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_radius(r,h):\n    #     return 2 * math.pi * (r**2)\n    #\n    # def find_cone_surface(r,h):\n    #     return 2 * math.pi * (r**2) * (math.cos(math.pi * (r**2) / (2 * r)))\n    #\n    # def find_cone_area(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_height(r,h):\n    #     return 2 * math.pi * (r**2) * (h/2)\n    #\n    # def find_cone_radius(r,h):\n    #     return 2 * math.pi * (r**2)\n    #\n    # def find_cone_surface(r,h):\n    #     return 2 * math.pi * (r**2) * (math.cos(math.pi * (r**2) / (2 * r)))\n    "
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    from math import cos, sin, tan, sqrt, log2, pi\n    # From https://www.esrl.esr.es/team/tr/lateral.html#index.lateral.cone\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r == 0:\n        return 0\n    return h*math.pi*(math.pow(r,2)*math.sin(math.radians(90-h)))/2\n    \ndef mask_i(x,y,r,theta):\n    '''\n    Write a function to get the mask corresponding to the given inputted values\n    '''\n    x = x+0.5\n    y = y+0.5\n    if r == 0:\n        return\n    for i in range(r):\n        x_r = i*x\n        y_r = i*y\n        if theta < theta_90-math.pi/2:\n            theta = theta+math.pi\n        else:\n            theta = theta-math.pi\n        #print(x_r,y_r,x_r*math.cos(theta),y_r*math.sin(theta))\n        w = lateralsurface_cone(x_r,y_r)\n        h = lateralsurface_cone(x,y)\n        if h < (0.1*(r-i)):\n            return 0\n        elif h < (0.4*(r-i)):\n            return 1\n        elif h < (0.7*(r-i)):\n            return 2\n        elif h < (0.9*(r-i)):\n            return 3\n        elif h < (0.99*(r-i)):\n            return 4\n        elif h < (1.0*(r-i)):\n            return 5\n        else:\n            return 6\n    \ndef mask_ii(x,y,r,theta):\n    '''\n    Write a function to get the mask corresponding to the given inputted values\n    '''\n    x = x+0.5\n    y = y+0.5\n    if r == 0:\n        return\n    for i in range(r):\n        x_r = i*x\n        y_r = i*y\n        if theta < theta_90-math.pi/2:\n            theta = theta+math.pi\n        else:\n            theta = theta-math.pi\n        #print(x_r,y_r,x_r*math.cos(theta),y_r*math.sin(theta))\n        w = lateralsurface_cone(x_r,y_r)\n        h = lateralsurface_cone(x,y)\n        if h < (0.1*(r-i)):\n            return 0\n        elif h < (0.4*(r-i)):\n            return 1\n        elif h < (0.7*(r-i)):\n            return 2\n        elif h < (0.9*(r-i)):\n            return 3\n        elif h < (0.99*(r-i)):\n            return 4\n        elif h < (1.0*(r-i)):\n            return 5\n        else:\n            return 6\n    \ndef mask_iii(x,y,r,theta):\n    '''\n    Write a function to get the mask corresponding to the given inputted values\n    '''\n    x = x+0.5\n    y = y+0.5\n    if r == 0:\n        return\n    for i in range(r):\n        x_r = i*x\n        y_r = i*y\n        if theta < theta_90-math.pi/2:\n            theta = theta+math.pi\n        else:\n            theta = theta-math.pi\n        #print(x_r,y_r,x_r*math.cos(theta),y_r*math.sin(theta))\n        w = lateralsurface_cone(x_r,y_r)\n        h = lateralsurface_cone(x,y)\n        if h < (0.1*(r-i)):\n            return 0\n        elif h < (0.4*(r-i)):\n            return 1\n        elif h < (0.7*(r-i)):\n            return 2\n        elif h < (0.9*(r-i)):\n            return 3\n        elif h < (0.99*(r-i)):\n            return 4\n        elif h < (1.0*(r-i)):\n            return 5\n        else:\n            return 6\n    \ndef mask_iv(x,y,r,theta):\n    '''\n    Write a function to get the mask corresponding to the given inputted values\n    '''\n    x = x+0.5\n    y = y+0.5\n    if r == 0:\n        return\n    for i in range(r):\n        x_r = i*x\n        y_r = i*y\n        if theta < theta_90-math.pi/2:\n            theta = theta+math.pi\n        else:\n            theta = theta-math.pi\n        #print(x_r,y_r,x_r*math.cos(theta),y_r*math.sin(theta))\n        w = lateralsurface_cone(x_r,y_r)\n        h = lateralsurface_cone(x,y)\n        if h < (0.1*(r-i)):\n            return 0\n        elif h < (0.4*(r-i)):\n            return 1\n        elif h < (0.7*(r-i)):\n            return 2\n        elif h < (0.9*(r-i)):\n            return 3\n        elif h < (0.99*(r-i)):\n            return 4\n        elif h < (1.0*(r-i)):\n            return 5\n        else:\n            return 6\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348148767212972098026245510307559140895705078125\n    return 2*h*r*math.cos(2*math.pi/h)*(1+math.cos(2*pi/r))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = r*math.sin(math.radians(h/2))**3\n    return lateral_surface\ndef straightsurface_cone(r,h):\n    '''\n    Write a function to find the longitudinal surface area of a cone given radius r and the height h.\n    '''\n    longitudinal_surface = r*math.cos(math.radians(h/2))**3\n    return longitudinal_surface\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    k1 = 6.67 * 10**(-11)\n    k2 = 6.67 * 10**(-10)\n    r = math.radians(r)\n    h = math.radians(h)\n    V = math.tan(h)\n    a = (r**2-h**2)/(2*r*V)\n    # B = 6*r*V*(math.cos(r))/(r*math.cos(h))\n    # C = 6*r*V*(math.sin(h))/(r*math.cos(r))\n    # D = 6*r*V*(1-math.cos(r))/(r*math.cos(h))\n    # D2 = 6*r*V*(math.sin(r))/(r*math.cos(r))\n    # F = V*a\n    # M = D*(F-D2)\n    # B = M/2\n    # C = (M/2)*(V*(math.cos(r)+V*(math.sin(r))))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin(r))))\n    # M1 = B*D\n    # M2 = C*D\n    # M3 = D*D\n    # M4 = M1+M2\n    # M = (M4-M3)\n    # M = (M/math.sqrt(2))*((V*math.cos(r))/(V*math.sin(r)))\n    # M = M*math.tan(math.radians(h))\n    # M = (M*(2*math.pi))/(6*r)\n    # M = (M/math.pi)\n    # B = (M/2)*(V*math.tan(h))/(r*math.sin(h))\n    # C = (M/2)*(V*(math.cos(r)+V*(math.sin(r))))/(r*math.sin(r))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin(r))))/(r*math.sin(r))\n    # B = (M/2)*(V*math.tan(h))/(r*math.cos(h))\n    # C = (M/2)*(V*(math.cos(r))/(r*math.sin(r)))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin(r))))/(r*math.sin(r))\n    # B = (M/2)*(V*math.tan(h))/(r*math.sin(h))\n    # C = (M/2)*(V*(math.cos(r)+V*(math.sin(r))))/(r*math.sin(r))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin(r))))/(r*math.sin(r))\n    # M1 = B*D\n    # M2 = C*D\n    # M3 = D*D\n    # M4 = M1+M2\n    # M = (M4-M3)\n    # M = (M/math.sqrt(2))*((V*math.cos(r))/(V*math.sin(r)))\n    # M = M*math.tan(math.radians(h))\n    # M = (M*(2*math.pi))/(6*r)\n    # M = (M/math.pi)\n    # B = (M/2)*(V*math.tan(h))/(r*math.sin(h))\n    # C = (M/2)*(V*(math.cos(r)+V*(math.sin(r))))/(r*math.sin(r))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin(r))))/(r*math.sin(r))\n    # B = (M/2)*(V*math.tan(h))/(r*math.cos(h))\n    # C = (M/2)*(V*(math.cos(r)+V*(math.sin(r))))/(r*math.sin(r))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin(r))))/(r*math.sin(r))\n    # B = (M/2)*(V*math.tan(h))/(r*math.sin(h))\n    # C = (M/2)*(V*(math.cos(r))/(r*math.sin(r)))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin(r))))/(r*math.sin(r))\n    # B = (M/2)*(V*math.tan(h))/(r*math.sin(h))\n    # C = (M/2)*(V*(math.cos(r)+V*(math.sin(r))))/(r*math.sin(r))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin(r))))/(r*math.sin(r))\n    # B = (M/2)*(V*math.tan(h))/(r*math.sin(h))\n    # C = (M/2)*(V*(math.cos(r)+V*(math.sin(r))))/(r*math.sin(r))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin(r))))/(r*math.sin(r))\n    # M1 = B*D\n    # M2 = C*D\n    # M3 = D*D\n    # M4 = M1+M2\n    # M = (M4-M3)\n    # M = (M/math.sqrt(2))*((V*math.cos(r))/(V*math.sin(r)))\n    # M = M*math.tan(math.radians(h))\n    # M = (M*(2*math.pi))/(6*r)\n    # M = (M/math.pi)\n    # B = (M/2)*(V*math.tan(h))/(r*math.sin(h))\n    # C = (M/2)*(V*(math.cos(r)+V*(math.sin(r))))/(r*math.sin(r))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin(r))))/(r*math.sin(r))\n    # B = (M/2)*(V*math.tan(h))/(r*math.sin(h))\n    # C = (M/2)*(V*(math.cos(r)+V*(math.sin(r))))/(r*math.sin(r))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin(r))))/(r*math.sin(r))\n    # B = (M/2)*(V*math.tan(h))/(r*math.sin(h))\n    # C = (M/2)*(V*(math.cos(r)+V*(math.sin(r))))/(r*math.sin(r))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin(r))))/(r*math.sin(r))\n    # B = (M/2)*(V*math.tan(h))/(r*math.sin(h))\n    # C = (M/2)*(V*(math.cos(r)+V*(math.sin(r))))/(r*math.sin(r))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin(r))))/(r*math.sin(r))\n    # B = (M/2)*(V*math.tan(h))/(r*math.sin(h))\n    # C = (M/2)*(V*(math.cos(r)+V*(math.sin(r))))/(r*math.sin(r))\n    # D = (M/2)*(V*(math.cos(r)-V*(math.sin"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = ((-2*r*h)**2)/(h**2)\n    print(a)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = '\\s+'\n    replace = ':\\'\\''\n    text = re.sub(pattern, replace, text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[\\.\\,]',' ',text)\n    text = re.sub(r'[\\s]+','',text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*',' ',text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\:', r': ',text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\;', r'; ',text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\=', r':= ',text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\(', r'(',text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\)', r')\\)', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\(', r'(',text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?', r'(',text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\:', r':', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\s*\\?', r'\\s?', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n    text = re.sub(r'\\d+\\.\\d+\\.\\d+\\.\\d+\\s*\\?\\s*\\?\\s*\\?', r'\\s', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace('-','::')\n    text = text.replace(',',':')\n    text = text.replace(';','::')\n    text = text.replace(':','::')\n    text = text.replace('!','::')\n    text = text.replace('?','::')\n    text = text.replace('!','::')\n    text = text.replace('\"','::')\n    text = text.replace('\\n','::')\n    text = text.replace('\\r','::')\n    text = text.replace('\\t','::')\n    return text\ndef replace_invalid(text):\n    '''\n    Write a function to replace all invalid characters with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace('-','::')\n    text = text.replace(',',':')\n    text = text.replace(';','::')\n    text = text.replace(':','::')\n    text = text.replace('!','::')\n    text = text.replace('?','::')\n    text = text.replace('!','::')\n    text = text.replace('\"','::')\n    text = text.replace('\\n','::')\n    text = text.replace('\\r','::')\n    text = text.replace('\\t','::')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    text=text.replace(\" \",\"_\")\n    text=text.replace(\".\",\"_\")\n    text=text.replace(\",\",\"_\")\n    text=text.replace(\"_\",\" \")\n    text=text.replace(\".\",\"_\")\n    text=text.replace(\":\",\"_\")\n    text=text.replace(\" \",\"_\")\n    text=text.replace(\"'\",\"_\")\n    text=text.replace(\"_\",\" \")\n    text=text.replace(\"(\",\"_\")\n    text=text.replace(\")\",\"_\")\n    text=text.replace(\"[\",\"_\")\n    text=text.replace(\"]\",\"_\")\n    text=text.replace(\"_\",\" \")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(' +', ':', text) # remove spaces and commas\n    text = text.replace('  ',' :').replace('!', ':') # replace! with :\n    text = re.sub('[\\n\\r]', ':', text) # remove newlines\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"\\s+\", \":\", text)\n    text = re.sub(r\"\\.\", \":\", text)\n    text = re.sub(r\"\\,\", \":\", text)\n    text = re.sub(r\"\\?\", \":\", text)\n    text = re.sub(r\"\\!\", \":\", text)\n    text = re.sub(r\"\\n\", \":\", text)\n    text = re.sub(r\"\\n\", \":\", text)\n    text = re.sub(r\"\\t\", \":\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('<br>', ': ')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text.replace('<br>', ':')\n    text = text.replace('<p>', ':')\n    text = text.replace('[','')\n    text = text.replace(']', ':')\n    text = text.replace('.', ':')\n    text = text"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = text.replace(' ',':')\n    result = result.replace(';',' : ')\n    result = result.replace('.',':')\n    result = result.replace(')',' ')\n    result = result.replace('{','{ ')\n    result = result.replace('}','} ')\n    result = result.replace('-',' ')\n    result = result.replace('/',' ')\n    result = result.replace('\\'',' ')\n    result = result.replace('\\'',' ')\n    result = result.replace('\\'','')\n    return result\ndef replace_specialchar_case(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = text.replace(' ',':')\n    result = result.replace(';',' : ')\n    result = result.replace('.',':')\n    result = result.replace(')',' ')\n    result = result.replace('{','{ ')\n    result = result.replace('}','} ')\n    result = result.replace('-',' ')\n    result = result.replace('/',' ')\n    result = result.replace('\\'',' ')\n    result = result.replace('\\'',' ')\n    result = result.replace('\\'','')\n    return result\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('&', ':')\n    text = text.replace('&', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('&', ':')\n    text = text.replace('&', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('&', ':')\n    text = text.replace('&', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('&', ':')\n    text = text.replace('&', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('&', ':')\n    text = text.replace('&', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('&', ':')\n    text = text.replace('&', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('&', ':')\n    text = text.replace('&', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('&', ':')\n    text = text.replace('&', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('$', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('.', ':')\n    text = text.replace('?', ':')\n    text = text.replace('!', ':')\n    text = text.replace('&', ':')\n    text = text.replace('&', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\"', ':')\n    text = text.replace('\\'', ':')\n    text = text.replace('\\'', ':')\n    text = text.replac"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(\"\\s+\",\":\",text)\n    text = re.sub(\"\\.\", \":\",text)\n    text = re.sub(\"\\.\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub(\"\\n\", \":\", text)\n    text = re.sub("
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left < right:\n        mid = (left + right) // 2\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Your code here\n    n = len(A)\n    i = 0\n    while i < n and A[i]!= x:\n        i += 1\n    return i\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    L = 0\n    R = len(A) - 1\n    while L <= R:\n        m = (L + R) // 2\n        if A[m] == x:\n            return m\n        elif A[m] < x:\n            L = m + 1\n        else:\n            R = m - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Use binary search to find the first occurrence of the element, i.e., x.\n    # Then, return the starting index, i.e., the index where the element has to be found.\n    # Note that this could be an expensive operation, i.e., O(n^2) in O(n).\n    # However, you may want to try O(n^2) with binary search, in that case the solution will be O(n).\n    def binarySearch(A, x):\n        # First, sort the array.\n        A.sort()\n        # Find the index of the first element.\n        low = 0\n        high = len(A)-1\n        # If the element is present, return the index.\n        while low <= high:\n            mid = (low + high)//2\n            # Check if element x is present at mid\n            if A[mid] == x:\n                return mid\n            # If x is greater than element at mid\n            elif A[mid] > x:\n                # If the left half of the element is greater than\n                # or equal to the right half of the element,\n                # return the index of the left half.\n                if A[mid] <= A[mid+1]:\n                    return mid\n                # Else, the element is greater than the right half of the element.\n                else:\n                    high = mid - 1\n            # If x is less than element at mid\n            else:\n                # If the left half of the element is less than\n                # or equal to the right half of the element,\n                # return the index of the right half.\n                if A[mid] >= A[mid+1]:\n                    return mid\n                # Else, the element is less than the left half of the element.\n                else:\n                    low = mid + 1\n        # If we never get here, return -1\n        return -1\n    # Use binary search to find the element, i.e., x.\n    return binarySearch(A, x)\n    \n    '''\n    Write a function to count the number of occurrences of a given element in a sorted array.\n    '''\n    # Use binary search to find the index of the element, i.e., x.\n    # Then, return the number of occurences.\n    def count_occurrence(A, x):\n        # First, sort the array.\n        A.sort()\n        # Count the number of elements in the array that are present.\n        count = 0\n        # Go through the array, and count the occurrences of the element, i.e., x.\n        for i in range(len(A)):\n            if A[i] == x:\n                count += 1\n        # Return the number of occurrences.\n        return count\n    # Use binary search to find the element, i.e., x.\n    return count_occurrence(A, x)\n    \n    '''\n    Write a function that returns the length of the longest chain in an array of words.\n    '''\n    # Use binary search to find the index of the first occurrence of a given word, i.e., w.\n    # Then, return the length of the longest chain.\n    def longest_chain(A):\n        # Initialize the maximum length of the longest chain.\n        length = 0\n        # Loop through the array.\n        for i in range(len(A)-1):\n            # Check if the index i+1 is greater than the last index of A.\n            if i+1 < len(A):\n                # Compare the starting index of A to the ending index of A.\n                # If they are equal, add one to the length.\n                if A[i+1] == A[i]:\n                    length += 1\n                # If they are not equal, reset the starting index to the ending index.\n                # Note that this can cause the length to be too large to print.\n                else:\n                    length = 0\n        # Return the maximum length.\n        return length\n    # Use binary search to find the index, i, of the first occurrence of a given word, i.e., w.\n    return longest_chain(A)\n    \n    '''\n    Write a function that returns the highest score in the following array of scores.\n    '''\n    # Use binary search to find the index, i, of the first occurrence of a given score, s.\n    # Then, return the highest score.\n    def highest_score(A, s):\n        # Initialize the highest score.\n        highest = 0\n        # Loop through the array.\n        for i in range(len(A)-1):\n            # Check if s <= A[i]\n            if s <= A[i]:\n                # If s is greater than A[i], return the maximum of the two.\n                if A[i] > A[i+1]:\n                    highest = max(highest, A[i])\n                # Else, if s is equal to A[i], return the maximum of the two.\n                else:\n                    highest = max(highest, A[i])\n        # Return the highest score.\n        return highest\n    # Use binary search to find the index, i, of the first occurrence of a given score, s.\n    # Then, return the highest score.\n    return highest_score(A, s)\n    \n    '''\n    Write a function that returns a list of the first n natural numbers in a given array.\n    '''\n    # Use binary search to find the index of the first n natural numbers, i.e., n.\n    # Then, return the first n natural numbers.\n    def natural_numbers(A):\n        # Initialize a list of the first n natural numbers.\n        numbers = []\n        # Loop through the array, and add each natural number.\n        for i in range(len(A)-1):\n            # Add the natural number, i, to the list.\n            numbers.append(A[i])\n        # Return the list of the first n natural numbers.\n        return numbers\n    # Use binary search to find the index, i, of the first n natural numbers, s.\n    # Then, return the first n natural numbers.\n    def first_n(A, n):\n        # Initialize the first n natural numbers.\n        numbers = []\n        # Loop through the array.\n        for i in range(len(A)-1):\n            # Check if i+1 < len(A).\n            if i+1 < len(A):\n                # If the natural numbers in A[i] and A[i+1] are equal, add them.\n                if A[i] == A[i+1] and A[i] not in numbers:\n                    numbers.append(A[i])\n        # Return the first n natural numbers.\n        return numbers\n    # Use binary search to find the index, i, of the first n natural numbers, s.\n    # Then, return the first n natural numbers.\n    return first_n(A, n)\n    \n    '''\n    Write a function that takes an array of words and returns the number of occurrences of all of the words.\n    '''\n    # Use binary search to find the index, i, of the first occurrence of all words, w.\n    # Then, return the number of occurrences.\n    def word_count(A):\n        # Initialize the count of the occurrences of all words.\n        count = 0\n        # Loop through the array.\n        for i in range(len(A)):\n            # Check if A[i] is a word.\n            if A[i] in A:\n                # Count the number of occurrences.\n                count += 1\n        # Return the count.\n        return count\n    # Use binary search to find the index, i, of the first occurrence of all words, w.\n    # Then, return the number of occurrences.\n    return word_count(A)\n    \n    '''\n    Write a function that returns a list of words that are longer than an integer.\n    '''\n    # Use binary search to find the index, i, of the first occurrence of all words, w.\n    # Then, return the words that are longer than the number of words.\n    def words_long(A):\n        # Initialize the long list.\n        long = []\n        # Loop through the array.\n        for i in range(len(A)):\n            # Check if A[i] is greater than A[i+1].\n            if A[i] > A[i+1]:\n                # If A[i] is larger, add it to the long list.\n                long.append(A[i])\n        # Return the long list.\n        return long\n    # Use binary search to find the index, i, of the first occurrence o"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while (i + 1 < len(A) and A[i] == A[i + 1]):\n        i += 1\n    return i\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def is_in(a,x):\n        if a[0]==x:\n            return True\n        if a[0]<x:\n            return False\n        if a[0]>x:\n            return False\n        return True\n    l=0\n    r=len(A)-1\n    while l<r:\n        m=(l+r)//2\n        if is_in(A[m],x):\n            r=m\n        else:\n            l=m+1\n    if is_in(A[l],x):\n        return l\n    else:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)-1\n    while start <= end:\n        mid = (start+end)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            start = mid+1\n        else:\n            end = mid-1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first_index = 0\n    last_index = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    #declare a set to store the indices of the first occurrences of the number\n    first_occurrence_set = set()\n    #iterate over the array\n    for i in range(len(A)):\n        #check if the element is present in the set\n        if A[i] in first_occurrence_set:\n            #if yes, add the index of the first occurrence to the set\n            first_occurrence_set.add(i)\n        else:\n            #else, return the index of the first occurrence of the given number\n            return i\n    #return None if no occurances\n    return None\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Function to find sum of products of all possible sublists\n    def sum_of_products(sublist):\n        # Initialize sums\n        sum_of_all_sublist_products = 0\n        # Iterate over each possible sublist\n        for i in range(len(sublist)):\n            # Sum of products of all possible sublists\n            sum_of_all_sublist_products += sublist[i] * (i + 1)\n        return sum_of_all_sublist_products\n        \n    # Traverse all sublists and find sum\n    def find_sum_of_all_sublist_products(arr):\n        # Initialize sums\n        sum_of_all_sublist_products = 0\n        # Iterate over all sublists\n        for i in range(len(arr)):\n            # Sum of products of all possible sublists\n            sum_of_all_sublist_products += arr[i] * (i + 1)\n        return sum_of_all_sublist_products\n        \n    # Sum of products of all possible sublists\n    sum_of_all_sublist_products = find_sum_of_all_sublist_products(arr)\n        \n    # Call sum_of_products function\n    sum_of_products = sum_of_all_sublist_products % 10\n        \n    # Function to find final sum\n    def find_final_sum(arr):\n        # Initialize sums\n        sum_of_all_sublist_products = 0\n        # Iterate over all sublists\n        for i in range(len(arr)):\n            # Sum of products of all possible sublists\n            sum_of_all_sublist_products += arr[i] * (i + 1)\n        return sum_of_all_sublist_products\n        \n    # Call sum_of_products function\n    final_sum = find_final_sum(arr)\n        \n    # Function to find final product\n    def find_final_product(arr):\n        # Initialize sums\n        sum_of_all_sublist_products = 0\n        # Iterate over all sublists\n        for i in range(len(arr)):\n            # Sum of products of all possible sublists\n            sum_of_all_sublist_products += arr[i] * (i + 1)\n        return sum_of_all_sublist_products\n        \n    # Call final_sum function\n    final_product = find_final_product(arr)\n        \n    # Call final_sum function\n    final_sum = final_sum % 10\n        \n    # Return final sum\n    return final_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = []\n    for i in range(len(arr)):\n        prod = arr[i] * (i+1)\n        prod = prod.strip('()')\n        prod = prod.strip('[]')\n        prod = prod.strip('\"')\n        prod = prod.strip('\\'')\n        prod = prod.strip('\\'')\n        prod = prod.strip('.')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip('*')\n        prod = prod.strip('+')\n        prod = prod.strip('(')\n        prod = prod.strip(')')\n        prod = prod.strip(';')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.strip(' ')\n        prod = prod.strip(',')\n        prod = prod.strip('/')\n        prod = prod.strip(' ')\n        prod = prod.stri"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # This is a recursive function, which is called recursively on all of the subarrays in the given list.\n    def helper(arr, start, end, prod):\n        if end <= start:\n            return 0\n        # print('start: ', start,'end: ', end)\n        # print(arr)\n        # print('prod: ', prod)\n        # print('prod[start, end]', prod[start, end])\n        # print('prod[start + 1, end + 1]', prod[start + 1, end + 1])\n        total = 0\n        for i in range(start, end + 1):\n            total += prod[start, end] * prod[start + 1, end + 1]\n        # print(total)\n        return total\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    \n    prod=1\n    l=len(arr)\n    for i in range(1,l):\n        prod=prod*(arr[i]+arr[i-1])\n    \n    return prod\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_subarrays = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    for i in range(0, len(arr)):\n        s += arr[i]*(i+1)\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    arr.sort()\n    return sum(arr[i:len(arr)])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    i=0\n    sum=0\n    while i<len(arr):\n        j=0\n        sum+=arr[i]\n        while j<len(arr) and arr[j]==arr[i]:\n            j+=1\n        sum=sum*arr[i]\n        i+=1\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #Your code here\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (int)((n&1) | ((n&(n-1)) >> 1))\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle(num):\n        '''\n        Num is in bits-num.\n        '''\n        return (num & 0xffffffff) | ((num & 0xffff) << 8)\n    return toggle(toggle(n).bit_length()) + n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & ~n -1\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    s = str(bin(n))\n    s = s[2:]\n    s = '0'*(32-len(s)) + s\n    return int(s,2)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n & 0x80!= 0:\n        return n | 0x80\n    else:\n        return n & 0x80\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    switcher = {0: '0', 1: '1'}\n    result = ''\n    for i in range(0, n + 1, 2):\n        result += switcher.get(i, '0')\n    return result\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    left = n & (1 << 31)\n    right = ((1 << 31) - 1) & n\n    if left == right:\n        n = right\n    else:\n        n = left\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    '''\n    Input :\n    n = 3\n    Output :\n    10\n    11\n    '''\n    # initialize variables\n    first_bit = 0x00\n    last_bit = 0xFF\n    \n    # shift n\n    shift = n >> 1\n    n &= 0xffff\n    \n    # calculate first bit\n    first_bit = (n & 0x01) << 1\n    \n    # calculate last bit\n    if n & 0x1:\n        last_bit = 1\n    else:\n        last_bit = 0\n        \n    # calculate mask\n    mask = first_bit | last_bit\n    \n    # update value of mask\n    n &= mask\n    \n    # update value of n\n    n |= shift\n    \n    # return value\n    return n\n    \ndef set_n_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    '''\n    Input :\n    n = 3\n    Output :\n    10\n    11\n    '''\n    # initialize variables\n    first_bit = 0x00\n    last_bit = 0xFF\n    \n    # shift n\n    shift = n >> 1\n    n &= 0xffff\n    \n    # calculate first bit\n    first_bit = (n & 0x01) << 1\n    \n    # calculate last bit\n    if n & 0x1:\n        last_bit = 1\n    else:\n        last_bit = 0\n        \n    # calculate mask\n    mask = first_bit | last_bit\n    \n    # update value of mask\n    n &= mask\n    \n    # update value of n\n    n |= shift\n    \n    # return value\n    return n\n    \ndef n_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    '''\n    Input :\n    n = 3\n    Output :\n    10\n    11\n    '''\n    # initialize variables\n    first_bit = 0x00\n    last_bit = 0xFF\n    \n    # shift n\n    shift = n >> 1\n    n &= 0xffff\n    \n    # calculate first bit\n    first_bit = (n & 0x01) << 1\n    \n    # calculate last bit\n    if n & 0x1:\n        last_bit = 1\n    else:\n        last_bit = 0\n        \n    # calculate mask\n    mask = first_bit | last_bit\n    \n    # update value of mask\n    n &= mask\n    \n    # update value of n\n    n |= shift\n    \n    # return value\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # set it to zero\n    n = 0\n    while n <= 2**31-1:\n        n <<= 1\n        if n & 1:\n            n >>= 1\n        else:\n            n |= 1\n    # toggle the number\n    n -= n & 2**31 - 1\n    n |= 1\n    # convert it to the bit string\n    str_n = bin(n)[2:]\n    # find the first and last bits\n    first = '1' * (len(str_n) - 1)\n    last = '1' * (len(str_n) - 1)\n    # convert it to the number string\n    n = bin(n)[2:]\n    # concatenate\n    result = first + last + n\n    # return the result\n    return result\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Write your code here\n    # print(bin(n))\n    return n & (n - 1)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Check if x is present in a sorted list\n    if x < a[0]:\n        return 0\n    i = bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # the idea is to take the left most value in the list and find it\n    # so the leftmost value can be used as a key in the search, and we have a key that has\n    # the value, which is the value we are trying to insert into a hashtable.\n    \n    # to find the leftmost value, we need to use bisect to find where we have found the smallest\n    # we can do it with bisect, and then we can perform the operation one by one\n    # as shown in the explanation of bisect.\n    \n    l = bisect.bisect_left(a, x)\n    \n    # the result is a key, which is the value we are trying to insert into a hashtable\n    return l\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    '''\n    a - array (list)\n    x - value to search\n    \n    '''\n    if a == []: return 0\n    if len(a)==1:\n        if a[0] > x: return 1\n        return 2\n    else:\n        l = bisect.bisect_left(a[1:], x)\n        if l==0:\n            return 0\n        elif l==len(a[1:]):\n            return l-1\n        else:\n            return l\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # find the rightmost index that is larger than the value\n    rindex = bisect.bisect_right(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    start = bisect.bisect(a, x)\n    if start == len(a):\n        return start - 1\n    elif a[start] < x:\n        return start\n    else:\n        return start + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # get the left index of x\n    left = bisect.bisect_left(a, x)\n    # insert the x at the right side of the right index\n    right = bisect.bisect_right(a, x)\n    # update the sorted position of the index\n    # -1 if the x is not in the list\n    # 0 if the x is in the list\n    return right - 1 - left\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(0, len(a)):\n        if a[i] < x:\n            a[i] = x\n            return i\n    for i in range(0, len(a)):\n        if a[i] > x:\n            if i + 1 >= len(a):\n                a.append(x)\n                return len(a) - 1\n            else:\n                if a[i+1] > x:\n                    a.insert(i + 1, x)\n                    return i + 1\n                else:\n                    a.append(x)\n                    return i\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left_idx = bisect.bisect_left(a, x)\n    return left_idx\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # NOTE: Does not work with already sorted lists!\n    # Find the left-most index.\n    l = bisect.bisect_left(a, x)\n    # If found, find the insertion point.\n    if l!= len(a):\n        j = bisect.bisect_left(a, x + a[l])\n        return l, j\n    return len(a), 0\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    x = x - 1\n    while a[x] > a[x - 1] and x > 0:\n        x -= 1\n    a[x] = a[x - 1]\n    a[x - 1] = x\n    return x\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string) \n    \n    \nprint(check_str('Hello World'))\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    l = len(string)\n    result = False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    #init variable \n    res = 0\n    #variable to store vowels \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    #loop through string\n    for i in string:\n        #if i is vowel \n        if i in vowels:\n            res += 1\n        else:\n            continue\n    #return the result \n    return res == 1\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string.lower()):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string)\n    return match!= None\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    return False\ndef get_str(string): \n    '''\n    Write a function that takes a string and returns a list of words. \n    '''\n    string = string.lower()\n    return re.split('\\W+', string)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].lower() in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n        return True\n    else:\n        return False\ndef clean_str(string): \n    '''\n    Write a function to clean and convert the given string to lowercase.\n    '''\n    return string.lower()\ndef my_function(string): \n    '''\n    Write a function which takes a string and return True if the string starts with a vowel, False otherwise.\n    '''\n    return re.search(regex,string)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string) == None):\n        return False\n    else:\n        return True\n    \ndef check_vowel(string):\n    '''\n    Write a function to check whether the given string is vowel or not using regex.\n    '''\n    if(string[0] in 'aeiouAEIOU'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if (re.search(regex, string)): \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.search(regex, string) \n    if result: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n > 3:\n        return geometric_sum(n-1) + 6 * geometric_sum(n-2) + 3 * geometric_sum(n-3)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 6\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def recur(n):\n        if n == 1:\n            return n\n        else:\n            return n * recur(n - 1)\n    return recur(n)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geometric_sum(n,k):\n        if n==1:\n            return 1\n        elif n==2:\n            return 2\n        else:\n            return geometric_sum(n-1,k) + (k-1)*geometric_sum(n-1,k-1)\n    return geometric_sum(n,k)\nprint(geometric_sum(5,2)"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return int(n//i)\n        i += 1\n    \n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = -1\n    for i in range(n+1): \n        # If there is only one digit in the number then \n        # it is called odd number \n        if i % 10 == 0: \n            if index == -1: \n                index = i \n            # If there are multiple digits in a single number \n            # then it is called even number \n            elif index % 10!= 0: \n                index = index // 10 \n        # If there are only two digits in a single number \n        # then it is called even number \n        elif i % 10 == 0: \n            if index == -1: \n                index = i \n            # If there are multiple digits in a single number \n            # then it is called odd number \n            elif index % 10!= 0: \n                index = index // 10 \n    return index \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n + 1):\n        if (i % 3 == 0) and (i % 5 == 0):\n            return i - 1\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 0: \n        return -1\n    if n == 1: \n        return 0\n    if n == 2: \n        return 1\n    if n == 3: \n        return 2\n    if n == 4: \n        return 3\n    if n == 5: \n        return 4\n    if n == 6: \n        return 5\n    if n == 7: \n        return 6\n    if n == 8: \n        return 7\n    if n == 9: \n        return 8\n    if n == 10: \n        return 9\n    if n == 11: \n        return 10\n    if n == 12: \n        return 11\n    if n == 13: \n        return 12\n    if n == 14: \n        return 13\n    if n == 15: \n        return 14\n    if n == 16: \n        return 15\n    if n == 17: \n        return 16\n    if n == 18: \n        return 17\n    if n == 19: \n        return 18\n    if n == 20: \n        return 19\n    if n == 21: \n        return 20\n    if n == 22: \n        return 21\n    if n == 23: \n        return 22\n    if n == 24: \n        return 23\n    if n == 25: \n        return 24\n    if n == 26: \n        return 25\n    if n == 27: \n        return 26\n    if n == 28: \n        return 27\n    if n == 29: \n        return 28\n    if n == 30: \n        return 29\n    if n == 31: \n        return 30\n    if n == 32: \n        return 31\n    if n == 33: \n        return 32\n    if n == 34: \n        return 33\n    if n == 35: \n        return 34\n    if n == 36: \n        return 35\n    if n == 37: \n        return 36\n    if n == 38: \n        return 37\n    if n == 39: \n        return 38\n    if n == 40: \n        return 39\n    if n == 41: \n        return 40\n    if n == 42: \n        return 41\n    if n == 43: \n        return 42\n    if n == 44: \n        return 43\n    if n == 45: \n        return 44\n    if n == 46: \n        return 45\n    if n == 47: \n        return 46\n    if n == 48: \n        return 47\n    if n == 49: \n        return 48\n    if n == 50: \n        return 49\n    if n == 51: \n        return 50\n    if n == 52: \n        return 51\n    if n == 53: \n        return 52\n    if n == 54: \n        return 53\n    if n == 55: \n        return 54\n    if n == 56: \n        return 55\n    if n == 57: \n        return 56\n    if n == 58: \n        return 57\n    if n == 59: \n        return 58\n    if n == 60: \n        return 59\n    if n == 61: \n        return 60\n    if n == 62: \n        return 61\n    if n == 63: \n        return 62\n    if n == 64: \n        return 63\n    if n == 65: \n        return 64\n    if n == 66: \n        return 65\n    if n == 67: \n        return 66\n    if n == 68: \n        return 67\n    if n == 69: \n        return 68\n    if n == 70: \n        return 69\n    if n == 71: \n        return 70\n    if n == 72: \n        return 71\n    if n == 73: \n        return 72\n    if n == 74: \n        return 73\n    if n == 75: \n        return 74\n    if n == 76: \n        return 75\n    if n == 77: \n        return 76\n    if n == 78: \n        return 77\n    if n == 79: \n        return 78\n    if n == 80: \n        return 79\n    if n == 81: \n        return 80\n    if n == 82: \n        return 81\n    if n == 83: \n        return 82\n    if n == 84: \n        return 83\n    if n == 85: \n        return 84\n    if n == 86: \n        return 85\n    if n == 87: \n        return 86\n    if n == 88: \n        return 87\n    if n == 89: \n        return 88\n    if n == 90: \n        return 89\n    if n == 91: \n        return 90\n    if n == 92: \n        return 91\n    if n == 93: \n        return 92\n    if n == 94: \n        return 93\n    if n == 95: \n        return 94\n    if n == 96: \n        return 95\n    if n == 97: \n        return 96\n    if n == 98: \n        return 97\n    if n == 99: \n        return 98\n    if n == 100: \n        return 99\n    if n == 101: \n        return 100\n    if n == 102: \n        return 101\n    if n == 103: \n        return 102\n    if n == 104: \n        return 103\n    if n == 105: \n        return 104\n    if n == 106: \n        return 105\n    if n == 107: \n        return 106\n    if n == 108: \n        return 107\n    if n == 109: \n        return 108\n    if n == 110: \n        return 109\n    if n == 111: \n        return 110\n    if n == 112: \n        return 111\n    if n == 113: \n        return 112\n    if n == 114: \n        return 113\n    if n == 115: \n        return 114\n    if n == 116: \n        return 115\n    if n == 117: \n        return 116\n    if n == 118: \n        return 117\n    if n == 119: \n        return 118\n    if n == 120: \n        return 119\n    if n == 121: \n        return 120\n    if n == 122: \n        return 121\n    if n == 123: \n        return 122\n    if n == 124: \n        return 123\n    if n == 125: \n        return 124\n    if n == 126: \n        return 125\n    if n == 127: \n        return 126\n    if n == 128: \n        return 127\n    if n == 129: \n        return 128\n    if n == 130: \n        return 129\n    if n == 131: \n        return 130\n    if n == 132: \n        return 131\n    if n == 133: \n        return 132\n    if n == 134: \n        return 133\n    if n == 135: \n        return 134\n    if n == 136: \n        return 135\n    if n == 137: \n        return 136\n    if n == 138: \n        return 137\n    if n == 139: \n        return 138\n    if n == 140: \n        return 139\n    if n == 141: \n        return 140\n    if n == 142: \n        return 141\n    if n == 143: \n        return 142\n    if n == 144: \n        return 143\n    if n == 145: \n        return 144\n    if n == 146: \n        return 145\n    if n == 147: \n        return 146\n    if n == 148: \n        return 147\n    if n == 149: \n        return 148\n    if n == 150: \n        return 149\n    if n == 151: \n        return 150\n    if n == 152: \n        return 151\n    if n == 153: \n        return 152\n    if n == 154: \n        return 153\n    if n == 155: \n        return 154\n    if n == 156: \n        return 155\n    if n == 157: \n        return 156\n    if n == 158: \n        return 157\n    if n == 159: \n        return 158\n    if n == 160: \n        return 159\n    if n == 161: \n        return 160\n    if n == 162: \n        return 161\n    if n == 163: \n        return 162\n    if n == 164: \n        retur"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 0\n    if n > 2:\n        for i in range(3, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return n // i\n    print(\"error\")\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n == 0):\n        return 0\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    c = math.ceil(math.sqrt(n))\n    if c % 2 == 0:\n        index = (c+1)\n        while index <= c:\n            if n % (index) == 0:\n                return index\n            index += 1\n    elif c % 2 == 1:\n        index = (c+1)\n        while index <= c:\n            if n % (index) == 0:\n                return index\n            index += 1\n    else:\n        return -1\ndef find_Index_1(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    c = math.ceil(math.sqrt(n))\n    if c % 2 == 0:\n        index = (c+1)\n        while index <= c:\n            if n % (index) == 0:\n                return index\n            index += 1\n    elif c % 2 == 1:\n        index = (c+1)\n        while index <= c:\n            if n % (index) == 0:\n                return index\n            index += 1\n    else:\n        return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n < 0: \n        print(\"Sorry, number can't be negative\")\n        return -1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 0\n    \n    #Print out all the possible combinations of numbers up to n\n    l = 1\n    while l < n:\n        l += 1\n        for i in range(l, n+1):\n            if i == n:\n                return l\n            if i == n-l:\n                return -1\n            j = find_Index(str(i))\n            if j!= -1:\n                break\n        \n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    lst = [6, 9, 8, 5, 4, 3, 2, 1]\n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)): \n            if lst[i] < lst[j]: \n                n = n-lst[i] \n                lst[i],lst[j] = lst[j],lst[i] \n    return lst.index(n)+1 \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    digits = []\n    for i in range(n+1): \n        digits.append(i)\n    digits.sort()\n    index = digits[-1]\n    return index\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = dict()\n    for index, value in enumerate(test_tup):\n        d[test_tup[index+1]] = test_tup[index]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = dict()\n    dict[\"Name\"] = test_tup[0]\n    dict[\"Level\"] = test_tup[1]\n    dict[\"Level1\"] = test_tup[2]\n    dict[\"Level2\"] = test_tup[3]\n    dict[\"Level3\"] = test_tup[4]\n    dict[\"Level4\"] = test_tup[5]\n    dict[\"Level5\"] = test_tup[6]\n    return dict\n    #code written by instructors\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {elem1:elem2 for elem1,elem2 in zip(test_tup[0],test_tup[1])}\n    \ndef main():\n    '''\n    Main function to use the datastructure \n    '''\n    #Test tuple\n    test_tup = (1,2,3)\n    #print(tuple_to_dict(test_tup))\n    \n    #Convert tuple to dictionary\n    test_dict = tuple_to_dict(test_tup)\n    print(test_dict)\n    \n    #Convert dictionary to tuple\n    test_tup2 = tuple_to_dict(test_dict)\n    print(test_tup2)\n    \n    #Convert tuple to dictionary using tuple and 2\n    test_tup3 = (1,2,3)\n    test_dict2 = tuple_to_dict(test_tup3)\n    print(test_dict2)\n    \n    #Convert dictionary to tuple\n    test_dict3 = tuple_to_dict(test_dict2)\n    print(test_dict3)\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    return {t[0] : t[1] for t in test_tup}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[i+1] = test_tup[i]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            test_dict[test_tup[i][0]] = test_tup[i][1]\n        else:\n            test_dict[test_tup[i][0]] = test_tup[i][1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Dictionary containing the key-value pairs.\n    tup_dic = {}\n    # Index of the current element.\n    index = 0\n    # Loop through the tuple to be converted.\n    for each in test_tup:\n        # Loop through the tuple to be converted and add to dictionary.\n        tup_dic[index] = each\n        # Increment index variable.\n        index += 1\n    return tup_dic\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)-1):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    test_dict[\"first_key\"] = test_tup[0]\n    test_dict[\"second_key\"] = test_tup[1]\n    test_dict[\"first_value\"] = test_tup[2]\n    test_dict[\"second_value\"] = test_tup[3]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Your code here\n    dictionary = {}\n    for i in range(0,len(test_tup)):\n        dictionary[test_tup[i][0]] = test_tup[i][1]\n    return dictionary\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    s_list = list(s)\n    x = 0\n    while(x < len(s_list)) :\n        if s_list[x] in letters:\n            if s_list[x]!= s_list[x + 1] :\n                return False\n        x += 1\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #characters = ['a', 'b', 'c', 'd']\n    characters = list(s)\n    count = 0\n    for char in characters :\n        if char == characters[count] :\n            count+=1\n        else :\n            count = 0\n    if count == len(characters):\n        return True\n    else :\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if i not in 'aeiou':\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    set_chars = set(s)\n    print(set_chars)\n    if len(set_chars)==len(s):\n        print(\"All characters are same\")\n        return True\n    else:\n        print(\"All characters are different\")\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    from itertools import combinations\n    for i in combinations(s,2):\n        if set(i)!= set(i[::-1]):\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count_same_char = 0\n    for i in range(0, len(s)) :\n        if s[i] == s[i+1] :\n            count_same_char = count_same_char + 1\n    if count_same_char == len(s) :\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        for j in range(i, len(s)) :\n            if (s[i]!= s[j] and i < j) :\n                return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        for j in range(len(s)) :\n            if s[i] == s[j] :\n                pass\n            else :\n                return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #iterate over the string\n    for ch in s :\n        #check if the character is same\n        if ch not in same_chars :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i] == s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0\n    for i in range(1,side+1):\n        area += math.sqrt(i*(i-1)*(2*i-1))\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side**3 * math.sqrt(3)\ndef area_tetrahedron_d(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    return side**3 * math.sqrt(3)\ndef volume_tetrahedron_d(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    return side**3 * math.sqrt(3)\ndef area_tetrahedron_c(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    return side**2 * math.sqrt(3)\ndef volume_tetrahedron_c(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    return side**2 * math.sqrt(3)\ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return side**2\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    return side**2 * math.sqrt(3)\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return side**3\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return side**3 * math.sqrt(3)\ndef area_cylinder(radius, height):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    return (4 * math.pi * radius ** 2) * height\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return (4 * math.pi * radius ** 2) * height\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return (3.14159 * radius**2)\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (3.14159 * radius**2) * math.sqrt(3)\ndef area_cylinder_c(radius, height):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    return (4 * math.pi * radius ** 2) * height\ndef volume_cylinder_c(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return (4 * math.pi * radius ** 2) * height\ndef area_sphere_c(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return (3.14159 * radius**2)\ndef volume_sphere_c(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (3.14159 * radius**2) * math.sqrt(3)\ndef area_square_c(radius):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return (4 * math.pi * radius ** 2)\ndef volume_square_c(radius):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return (4 * math.pi * radius ** 2) * math.sqrt(3)\ndef area_sphere_c_sphere_c(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return (3.14159 * radius**2) * radius**2\ndef volume_sphere_c_sphere_c(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (3.14159 * radius**2) * radius**2 * math.sqrt(3)\ndef area_cylinder_sphere_cylinder(radius, height):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    return (4 * math.pi * radius ** 2) * height\ndef volume_cylinder_sphere_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return (4 * math.pi * radius ** 2) * height\ndef area_cylinder_sphere_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return (3.14159 * radius**2) * radius**2\ndef volume_cylinder_sphere_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (3.14159 * radius**2) * radius**2 * math.sqrt(3)\ndef area_tetrahedron_sphere_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return (6 * math.pi * radius ** 2) * radius**2\ndef volume_tetrahedron_sphere_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (6 * math.pi * radius ** 2) * radius**2 * math.sqrt(3)\ndef area_cube_sphere_sphere(radius):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return (3.14159 * radius**2) * radius**2\ndef volume_cube_sphere_sphere(radius):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return (3.14159 * radius**2) * radius**2 * math.sqrt(3)\ndef area_cylinder_sphere_sphere(radius, height):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return (4 * math.pi * radius ** 2) * height\ndef volume_cylinder_sphere_sphere(radius, height):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4 * math.pi * radius ** 2) * height\ndef area_sphere_sphere_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return (3.14159 * radius**2) * radius**2\ndef volume_sphere_sphere_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (3.14159 * radius**2) * radius**2 * math.sqrt(3)\ndef area_cylinder_sphere_sphere_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return (6 * math.pi * radius ** 2) * radius**2\ndef volume_cylinder_sphere_sphere_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (6 * math.pi * radius ** 2) * radius**2 * math.sqrt(3)\ndef area_sphere_sphere_sphere_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return (3.14159 * radius**2) * radius**2\ndef volume_sphere_sphere_sphere_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (3.14159 * radius**2) * radius**2 * math.sqrt(3)\ndef area_tetrahedron_sphere_sphere_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return (4 * math.pi * radius ** 2) * radius**2\ndef volume"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4*side**3/3\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side**3/3\ndef area_rectangle(side_1,side_2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return side_1*side_2\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side*side\ndef area_diamond(side):\n    '''\n    Write a function to caluclate the area of a diamond.\n    '''\n    return side*side/2\ndef area_heptahedron(side):\n    '''\n    Write a function to caluclate the area of a heptahedron.\n    '''\n    return math.sqrt(side**2+side**2/4)\ndef area_tetrahedron_n(side_1,side_2,side_3):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side_1+side_2+side_3)/3\ndef area_cube_n(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side*side*side\ndef area_rectangle_n(side_1,side_2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return side_1*side_2*side_2\ndef area_square_n(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side*side\ndef area_diamond_n(side):\n    '''\n    Write a function to caluclate the area of a diamond.\n    '''\n    return side*side*side\ndef area_heptahedron_n(side):\n    '''\n    Write a function to caluclate the area of a heptahedron.\n    '''\n    return side*side*side*side\ndef area_tetrahedron_n_p(side_1,side_2,side_3,side_4):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side_1+side_2+side_3+side_4)/6\ndef area_cube_n_p(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side*side*side\ndef area_rectangle_n_p(side_1,side_2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return side_1*side_2*side_2\ndef area_square_n_p(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side*side\ndef area_diamond_n_p(side):\n    '''\n    Write a function to caluclate the area of a diamond.\n    '''\n    return side*side*side\ndef area_heptahedron_n_p(side):\n    '''\n    Write a function to caluclate the area of a heptahedron.\n    '''\n    return side*side*side*side\ndef area_tetrahedron_n_p(side_1,side_2,side_3,side_4):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side_1+side_2+side_3+side_4)/6\ndef area_cube_n_p_p(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side*side*side*side\ndef area_rectangle_n_p_p(side_1,side_2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return side_1*side_2*side_2\ndef area_square_n_p_p(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side*side*side\ndef area_diamond_n_p_p(side):\n    '''\n    Write a function to caluclate the area of a diamond.\n    '''\n    return side*side*side*side\ndef area_heptahedron_n_p_p(side):\n    '''\n    Write a function to caluclate the area of a heptahedron.\n    '''\n    return side*side*side*side\ndef area_tetrahedron_n_p_p(side_1,side_2,side_3,side_4):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side_1+side_2+side_3+side_4)/6\ndef area_cube_n_p_p_p(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side*side*side*side\ndef area_rectangle_n_p_p_p(side_1,side_2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return side_1*side_2*side_2\ndef area_square_n_p_p_p(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side*side*side*side\ndef area_diamond_n_p_p_p(side):\n    '''\n    Write a function to caluclate the area of a diamond.\n    '''\n    return side*side*side*side*side\ndef area_heptahedron_n_p_p_p(side):\n    '''\n    Write a function to caluclate the area of a heptahedron.\n    '''\n    return side*side*side*side*side\ndef area_tetrahedron_n_p_p(side_1,side_2,side_3,side_4):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side_1+side_2+side_3+side_4)/6\ndef area_cube_n_p_p_p(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side*side*side*side*side\ndef area_rectangle_n_p_p_p(side_1,side_2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return side_1*side_2*side_2\ndef area_square_n_p_p_p(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side*side*side*side*side\ndef area_diamond_n_p_p_p(side):\n    '''\n    Write a function to caluclate the area of a diamond.\n    '''\n    return side*side*side*side*side*side\ndef area_heptahedron_n_p_p_p(side):\n    '''\n    Write a function to caluclate the area of a heptahedron.\n    '''\n    return side*side*side*side*side*side\ndef area_tetrahedron_n_p_p_p(side_1,side_2,side_3,side_4):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side_1+side_2+side_3+side_4)/6\ndef area_cube_n_p_p_p(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side*side*side*side*side*side\ndef area_rectangle_n_p_p"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # base case\n    if side == 0:\n        return 0.0\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    a_a = a*a\n    b_b = b*b\n    c_c = c*c\n    \n    area = a_a+b_b+c_c\n    \n    return area\n    \ndef area_sphere(sphere):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    \n    return 0.5*math.pow(sphere[0],2) + 0.5*math.pow(sphere[1],2) + 0.5*math.pow(sphere[2],2)\n    \ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    d = b*b-4*a*c\n    e = b*b-2*a*c\n    f = b*b-a*c\n    \n    if d < 0:\n        print(\"Not a valid octahedron\")\n        return False\n    \n    if e < 0:\n        print(\"Not a valid octahedron\")\n        return False\n    \n    if f < 0:\n        print(\"Not a valid octahedron\")\n        return False\n    \n    area = (math.sqrt(d)/2) * math.sqrt(f) * math.sqrt(e)\n    \n    return area\n    \ndef area_tetrahedron_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    d = a*a\n    e = b*b\n    f = c*c\n    \n    if d < 0:\n        print(\"Not a valid tetrahedron\")\n        return False\n    \n    if e < 0:\n        print(\"Not a valid tetrahedron\")\n        return False\n    \n    if f < 0:\n        print(\"Not a valid tetrahedron\")\n        return False\n    \n    area = (math.sqrt(d)/2) * math.sqrt(f) * math.sqrt(e)\n    \n    return area\n    \ndef area_sphere_sphere(sphere):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    \n    area = 0\n    \n    for i in range(3):\n        if sphere[i] == 0:\n            continue\n        else:\n            area += math.pow(sphere[i],2)\n            \n    return area\n    \ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    return math.pow(a,2) + math.pow(b,2) + math.pow(c,2)\n    \ndef area_sphere_sphere(sphere):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    \n    area = 0\n    \n    for i in range(3):\n        if sphere[i] == 0:\n            continue\n        else:\n            area += math.pow(sphere[i],2)\n            \n    return area\n    \ndef area_box(side):\n    '''\n    Write a function to caluclate the area of a box.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    area = (a*b)/2 + c*b\n    \n    return area\n    \ndef area_circle(center, radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    \n    return math.pi*(radius**2)\n    \ndef area_triangle(side):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    \n    return (side[0]*side[1] + side[0]*side[2])*(side[0]*side[1] + side[0]*side[2])\n    \ndef area_cone(side):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    \n    s = side[0]\n    b = side[1]\n    r = side[2]\n    \n    return (s*b)/2 + r*(r + s)/2\n    \ndef area_cylinder(side):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    \n    s = side[0]\n    r = side[1]\n    \n    return 0.5*math.pow(r,2) + (s*r)/2\n    \ndef area_rhombus(side):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    return 0.5*math.pow(a,2) + 0.5*math.pow(b,2) + 0.5*math.pow(c,2)\n    \ndef area_heptagon(side):\n    '''\n    Write a function to caluclate the area of a heptagon.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    return 0.5*math.pow(a,2) + 0.5*math.pow(b,2) + 0.5*math.pow(c,2)\n    \ndef area_octagon(side):\n    '''\n    Write a function to caluclate the area of an octagon.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    d = b*b - 4*a*c\n    e = b*b - 2*a*c\n    f = b*b - a*c\n    \n    if d < 0:\n        print(\"Not a valid octagon\")\n        return False\n    \n    if e < 0:\n        print(\"Not a valid octagon\")\n        return False\n    \n    if f < 0:\n        print(\"Not a valid octagon\")\n        return False\n    \n    area = (math.sqrt(d)/2) * math.sqrt(f) * math.sqrt(e)\n    \n    return area\n    \ndef area_pentagon(side):\n    '''\n    Write a function to caluclate the area of a pentagon.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    d = b*b - 4*a*c\n    e = b*b - 2*a*c\n    f = b*b - a*c\n    \n    if d < 0:\n        print(\"Not a valid pentagon\")\n        return False\n    \n    if e < 0:\n        print(\"Not a valid pentagon\")\n        return False\n    \n    if f < 0:\n        print(\"Not a valid pentagon\")\n        return False\n    \n    area = (math.sqrt(d)/2) * math.sqrt(f) * math.sqrt(e)\n    \n    return area\n    \ndef area_septagon(side):\n    '''\n    Write a function to caluclate the area of a septagon.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    d = b*b - 4*a*c\n    e = b*b - 2*a*c\n    f = b*b - a*c\n    \n    if d < 0:\n        print(\"Not a valid septagon\")\n        return False\n    \n    if e < "
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # find the area of tetrahedron\n    # sqrt(3) = 1/2 * sqrt(3)\n    # sqrt(3) = 1/2 * sqrt(5)\n    # sqrt(5) = 1/2 * sqrt(7)\n    # sqrt(7) = 1/2 * sqrt(11)\n    # sqrt(11) = 1/2 * sqrt(13)\n    # sqrt(13) = 1/2 * sqrt(15)\n    # sqrt(15) = 1/2 * sqrt(17)\n    # sqrt(17) = 1/2 * sqrt(19)\n    # sqrt(19) = 1/2 * sqrt(21)\n    # sqrt(21) = 1/2 * sqrt(23)\n    # sqrt(23) = 1/2 * sqrt(25)\n    # sqrt(25) = 1/2 * sqrt(27)\n    # sqrt(27) = 1/2 * sqrt(29)\n    # sqrt(29) = 1/2 * sqrt(31)\n    # sqrt(31) = 1/2 * sqrt(33)\n    # sqrt(33) = 1/2 * sqrt(35)\n    # sqrt(35) = 1/2 * sqrt(37)\n    # sqrt(37) = 1/2 * sqrt(39)\n    # sqrt(39) = 1/2 * sqrt(41)\n    # sqrt(41) = 1/2 * sqrt(43)\n    # sqrt(43) = 1/2 * sqrt(45)\n    # sqrt(45) = 1/2 * sqrt(47)\n    # sqrt(47) = 1/2 * sqrt(49)\n    # sqrt(49) = 1/2 * sqrt(51)\n    # sqrt(51) = 1/2 * sqrt(53)\n    # sqrt(53) = 1/2 * sqrt(55)\n    # sqrt(55) = 1/2 * sqrt(57)\n    # sqrt(57) = 1/2 * sqrt(59)\n    # sqrt(59) = 1/2 * sqrt(61)\n    # sqrt(61) = 1/2 * sqrt(63)\n    # sqrt(63) = 1/2 * sqrt(65)\n    # sqrt(65) = 1/2 * sqrt(67)\n    # sqrt(67) = 1/2 * sqrt(69)\n    # sqrt(69) = 1/2 * sqrt(71)\n    # sqrt(71) = 1/2 * sqrt(73)\n    # sqrt(73) = 1/2 * sqrt(75)\n    # sqrt(75) = 1/2 * sqrt(77)\n    # sqrt(77) = 1/2 * sqrt(79)\n    # sqrt(79) = 1/2 * sqrt(81)\n    # sqrt(81) = 1/2 * sqrt(83)\n    # sqrt(83) = 1/2 * sqrt(85)\n    # sqrt(85) = 1/2 * sqrt(87)\n    # sqrt(87) = 1/2 * sqrt(89)\n    # sqrt(89) = 1/2 * sqrt(91)\n    # sqrt(91) = 1/2 * sqrt(93)\n    # sqrt(93) = 1/2 * sqrt(95)\n    # sqrt(95) = 1/2 * sqrt(97)\n    # sqrt(97) = 1/2 * sqrt(99)\n    # sqrt(99) = 1/2 * sqrt(101)\n    # sqrt(101) = 1/2 * sqrt(103)\n    # sqrt(103) = 1/2 * sqrt(105)\n    # sqrt(105) = 1/2 * sqrt(107)\n    # sqrt(107) = 1/2 * sqrt(109)\n    # sqrt(109) = 1/2 * sqrt(111)\n    # sqrt(111) = 1/2 * sqrt(113)\n    # sqrt(113) = 1/2 * sqrt(115)\n    # sqrt(115) = 1/2 * sqrt(117)\n    # sqrt(117) = 1/2 * sqrt(119)\n    # sqrt(119) = 1/2 * sqrt(121)\n    # sqrt(121) = 1/2 * sqrt(123)\n    # sqrt(123) = 1/2 * sqrt(125)\n    # sqrt(125) = 1/2 * sqrt(127)\n    # sqrt(127) = 1/2 * sqrt(129)\n    # sqrt(129) = 1/2 * sqrt(131)\n    # sqrt(131) = 1/2 * sqrt(133)\n    # sqrt(133) = 1/2 * sqrt(135)\n    # sqrt(135) = 1/2 * sqrt(137)\n    # sqrt(137) = 1/2 * sqrt(139)\n    # sqrt(139) = 1/2 * sqrt(141)\n    # sqrt(141) = 1/2 * sqrt(143)\n    # sqrt(143) = 1/2 * sqrt(145)\n    # sqrt(145) = 1/2 * sqrt(147)\n    # sqrt(147) = 1/2 * sqrt(149)\n    # sqrt(149) = 1/2 * sqrt(151)\n    # sqrt(151) = 1/2 * sqrt(153)\n    # sqrt(153) = 1/2 * sqrt(155)\n    # sqrt(155) = 1/2 * sqrt(157)\n    # sqrt(157) = 1/2 * sqrt(159)\n    # sqrt(159) = 1/2 * sqrt(161)\n    # sqrt(161) = 1/2 * sqrt(163)\n    # sqrt(163) = 1/2 * sqrt(165)\n    # sqrt(165) = 1/2 * sqrt(167)\n    # sqrt(167) = 1/2 * sqrt(169)\n    # sqrt(169) = 1/2 * sqrt(171)\n    # sqrt(171) = 1/2 * sqrt(173)\n    # sqrt(173) = 1/2 * sqrt(175)\n    # sqrt(175) = 1/2 * sqrt(177)\n    # sqrt(177) = 1/2 * sqrt(179)\n    # sqrt(179) = 1/2 * sqrt(181)\n    # sqrt(181) = 1/2 * sqrt(183)\n    # sqrt(183) = 1/2 * sqrt(185)\n    # sqrt(185) = 1/2 * sqrt(187)\n    # sqrt(187) = 1/2 * sqrt(189)\n    # sqrt(189) = 1/2 * sqrt(191)\n    # sqrt(191) = 1/2 * sqrt(193)\n    # sqrt(193) = 1/2 * sqrt(195)\n    # sqrt(195) = 1/2 * sqrt(197)\n    # sqrt(197) = 1/2 * sqrt(199)\n    # sqrt(199) = 1/2 * sqrt(201)\n    # sqrt(201) = 1/2 * sqrt(203)\n    # sqrt(203) = 1/2 * sqrt(205)\n    # sqrt(205) = 1/2 * sqrt(207)\n    # sqrt(207) = 1/2 * sqrt(209)\n    # sqrt(209) = 1/2 * sqrt(211)\n    # sqrt(211) = 1/2 * sqrt(213)\n    # sqrt(213) = 1/2 * sqrt(215)\n    # sqrt(215) = 1/2 * sqrt(217)\n    # sqrt(217) = 1/2 * sqrt(219)\n    # sqrt(219) = 1/2 * sqrt(221)\n    # sqrt(221) = 1/2 * sqrt(223)\n    # sqrt(223) = 1/2 * sqrt(22"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area=0\n    if side == \"U\":\n        area = 0.5 * math.pi * (1 + (2 * 0.5)**2)\n    elif side == \"D\":\n        area = 0.5 * math.pi * (1 + (2 * 0.5)**2) + 2 * math.pi * 0.5\n    elif side == \"L\":\n        area = 0.5 * math.pi * (1 + (2 * 0.5)**2) + 3 * math.pi * 0.5\n    elif side == \"R\":\n        area = 0.5 * math.pi * (1 + (2 * 0.5)**2) + 5 * math.pi * 0.5\n    elif side == \"F\":\n        area = 0.5 * math.pi * (1 + (2 * 0.5)**2) + 7 * math.pi * 0.5\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side = side.lower()\n    if side == \"a\":\n        return 9\n    if side == \"b\":\n        return 6\n    if side == \"c\":\n        return 3\n    if side == \"d\":\n        return 1\n    if side == \"e\":\n        return 0\n    if side == \"f\":\n        return 0\n    if side == \"g\":\n        return 5\n    if side == \"h\":\n        return 4\n    if side == \"i\":\n        return 4\n    if side == \"j\":\n        return 4\n    if side == \"k\":\n        return 2\n    if side == \"l\":\n        return 3\n    if side == \"m\":\n        return 6\n    if side == \"n\":\n        return 5\n    if side == \"o\":\n        return 2\n    if side == \"p\":\n        return 2\n    if side == \"q\":\n        return 3\n    if side == \"r\":\n        return 7\n    if side == \"s\":\n        return 6\n    if side == \"t\":\n        return 7\n    if side == \"u\":\n        return 4\n    if side == \"v\":\n        return 3\n    if side == \"w\":\n        return 1\n    if side == \"x\":\n        return 0\n    if side == \"y\":\n        return 1\n    if side == \"z\":\n        return 0\n    if side == \".\":\n        return 0\n    else:\n        return 0\ndef area_triangle(side):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    side = side.lower()\n    if side == \"a\":\n        return 5\n    if side == \"b\":\n        return 4\n    if side == \"c\":\n        return 3\n    if side == \"d\":\n        return 2\n    if side == \"e\":\n        return 1\n    if side == \"f\":\n        return 0\n    if side == \"g\":\n        return 0\n    if side == \"h\":\n        return 2\n    if side == \"i\":\n        return 1\n    if side == \"j\":\n        return 3\n    if side == \"k\":\n        return 1\n    if side == \"l\":\n        return 4\n    if side == \"m\":\n        return 2\n    if side == \"n\":\n        return 2\n    if side == \"o\":\n        return 0\n    if side == \"p\":\n        return 3\n    if side == \"q\":\n        return 4\n    if side == \"r\":\n        return 2\n    if side == \"s\":\n        return 3\n    if side == \"t\":\n        return 1\n    if side == \"u\":\n        return 1\n    if side == \"v\":\n        return 0\n    if side == \"w\":\n        return 2\n    if side == \"x\":\n        return 0\n    if side == \"y\":\n        return 1\n    if side == \"z\":\n        return 0\n    if side == \".\":\n        return 0\n    else:\n        return 0\ndef area_pentagon(side):\n    '''\n    Write a function to caluclate the area of a pentagon.\n    '''\n    side = side.lower()\n    if side == \"a\":\n        return 8\n    if side == \"b\":\n        return 7\n    if side == \"c\":\n        return 6\n    if side == \"d\":\n        return 4\n    if side == \"e\":\n        return 3\n    if side == \"f\":\n        return 1\n    if side == \"g\":\n        return 0\n    if side == \"h\":\n        return 3\n    if side == \"i\":\n        return 1\n    if side == \"j\":\n        return 1\n    if side == \"k\":\n        return 2\n    if side == \"l\":\n        return 5\n    if side == \"m\":\n        return 4\n    if side == \"n\":\n        return 5\n    if side == \"o\":\n        return 4\n    if side == \"p\":\n        return 4\n    if side == \"q\":\n        return 5\n    if side == \"r\":\n        return 4\n    if side == \"s\":\n        return 4\n    if side == \"t\":\n        return 5\n    if side == \"u\":\n        return 4\n    if side == \"v\":\n        return 3\n    if side == \"w\":\n        return 4\n    if side == \"x\":\n        return 0\n    if side == \"y\":\n        return 1\n    if side == \"z\":\n        return 0\n    if side == \".\":\n        return 0\n    else:\n        return 0\ndef area_hexagon(side):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    side = side.lower()\n    if side == \"a\":\n        return 5\n    if side == \"b\":\n        return 4\n    if side == \"c\":\n        return 3\n    if side == \"d\":\n        return 2\n    if side == \"e\":\n        return 1\n    if side == \"f\":\n        return 0\n    if side == \"g\":\n        return 1\n    if side == \"h\":\n        return 3\n    if side == \"i\":\n        return 2\n    if side == \"j\":\n        return 1\n    if side == \"k\":\n        return 3\n    if side == \"l\":\n        return 1\n    if side == \"m\":\n        return 3\n    if side == \"n\":\n        return 1\n    if side == \"o\":\n        return 0\n    if side == \"p\":\n        return 1\n    if side == \"q\":\n        return 2\n    if side == \"r\":\n        return 1\n    if side == \"s\":\n        return 2\n    if side == \"t\":\n        return 1\n    if side == \"u\":\n        return 3\n    if side == \"v\":\n        return 1\n    if side == \"w\":\n        return 2\n    if side == \"x\":\n        return 0\n    if side == \"y\":\n        return 1\n    if side == \"z\":\n        return 0\n    if side == \".\":\n        return 0\n    else:\n        return 0\ndef area_heptagon(side):\n    '''\n    Write a function to caluclate the area of a heptagon.\n    '''\n    side = side.lower()\n    if side == \"a\":\n        return 7\n    if side == \"b\":\n        return 6\n    if side == \"c\":\n        return 5\n    if side == \"d\":\n        return 4\n    if side == \"e\":\n        return 3\n    if side == \"f\":\n        return 1\n    if side == \"g\":\n        return 0\n    if side == \"h\":\n        return 3\n    if side == \"i\":\n        return 1\n    if side == \"j\":\n        return 2\n    if side == \"k\":\n        return 2\n    if side == \"l\":\n        return 5\n    if side == \"m\":\n        return 4\n    if side == \"n\":\n        return 5\n    if side == \"o\":\n        return 4\n    if side == \"p\":\n        return 4\n    if side == \"q\":\n        return 5\n    if side == \"r\":\n        return 4\n    if side == \"s\":\n        return 5\n    if side == \"t\":\n        return 1\n    if side == \"u\":\n        return 3\n    if side == \"v\":\n        return 1\n    if side == \"w\":\n        return 2\n    if side == \"x\":\n        return 0\n    if side == \"y\":\n        return 1\n    if side == \"z\":\n        return 0\n    if side == \".\":\n        return 0\n    else:\n        return 0\ndef area_octagon(side):\n    '''\n    Write a function to caluclate the area of a octagon.\n    '''\n    side = side.lower()\n    if side == \"a\":\n        return 9\n    if side == \"b\":\n        return 8\n    if side == \"c\":\n        return 7\n    if side == \"d\":\n        return 6\n    if side == \"e\":\n        return 4\n    if side == \"f\":\n        return 3\n    if side == \"g\":\n        return 1\n    if side == \"h\":\n        return 2\n    if side == \"i\":\n        return 2\n    if side == \"j\":\n        return 2\n    if side == \"k\":\n        return 1\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    n = side\n    area = n * (n - 1) *.5\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Hint:\n    # 1. Use math.pow(side, 0.5) to calculate the area\n    # 2. Use round(math.pow(side, 0.5)) to round the area up to 5 digits\n    # 3. Hint:\n    # 1.  Use the floor(math.pow(side, 0.5))\n    # 2.  Use the floor(round(side, 0.5))\n    # 3. Return the rounded value of the area\n    pass\ndef area_hexahedron(side):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    # Hint:\n    # 1. Use math.pow(side, 0.5) to calculate the area\n    # 2. Use round(math.pow(side, 0.5)) to round the area up to 5 digits\n    # 3. Hint:\n    # 1.  Use the floor(math.pow(side, 0.5))\n    # 2.  Use the floor(round(side, 0.5))\n    # 3. Return the rounded value of the area\n    pass\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    # Hint:\n    # 1. Use math.pow(side, 0.5) to calculate the area\n    # 2. Use round(math.pow(side, 0.5)) to round the area up to 5 digits\n    # 3. Hint:\n    # 1.  Use the floor(math.pow(side, 0.5))\n    # 2.  Use the floor(round(side, 0.5))\n    # 3. Return the rounded value of the area\n    pass\ndef area_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    # Hint:\n    # 1. Use math.pow(side, 0.5) to calculate the volume\n    # 2. Use round(math.pow(side, 0.5)) to round the volume up to 5 digits\n    # 3. Hint:\n    # 1.  Use the floor(math.pow(side, 0.5))\n    # 2.  Use the floor(round(side, 0.5))\n    # 3. Return the rounded value of the volume\n    pass\ndef area_circle(r):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    # Hint:\n    # 1. Use math.pow(r, 0.5) to calculate the volume\n    # 2. Use round(math.pow(r, 0.5)) to round the volume up to 5 digits\n    # 3. Hint:\n    # 1.  Use the floor(math.pow(r, 0.5))\n    # 2.  Use the floor(round(r, 0.5))\n    # 3. Return the rounded value of the volume\n    pass\ndef area_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    # Hint:\n    # 1. Use math.pow(r, 0.5) to calculate the volume\n    # 2. Use round(math.pow(r, 0.5)) to round the volume up to 5 digits\n    # 3. Hint:\n    # 1.  Use the floor(math.pow(r, 0.5))\n    # 2.  Use the floor(round(r, 0.5))\n    # 3. Return the rounded value of the volume\n    pass\ndef area_rectangle(x, y, w, h):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    # Hint:\n    # 1. Use math.pow(x, 0.5) to calculate the volume\n    # 2. Use round(math.pow(x, 0.5)) to round the volume up to 5 digits\n    # 3. Hint:\n    # 1.  Use the floor(math.pow(x, 0.5))\n    # 2.  Use the floor(round(x, 0.5))\n    # 3. Return the rounded value of the volume\n    pass\ndef area_cylinder(d, r):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    # Hint:\n    # 1. Use math.pow(r, 0.5) to calculate the volume\n    # 2. Use round(math.pow(r, 0.5)) to round the volume up to 5 digits\n    # 3. Hint:\n    # 1.  Use the floor(math.pow(r, 0.5))\n    # 2.  Use the floor(round(r, 0.5))\n    # 3. Return the rounded value of the volume\n    pass\ndef area_trapezium(a, b, c, d):\n    '''\n    Write a function to calculate the volume of a trapezium.\n    '''\n    # Hint:\n    # 1. Use math.pow(a, 0.5) to calculate the volume\n    # 2. Use round(math.pow(a, 0.5)) to round the volume up to 5 digits\n    # 3. Hint:\n    # 1.  Use the floor(math.pow(a, 0.5))\n    # 2.  Use the floor(round(a, 0.5))\n    # 3. Return the rounded value of the volume\n    pass\ndef area_square(a, b):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    # Hint:\n    # 1. Use math.pow(a, 0.5) to calculate the volume\n    # 2. Use round(math.pow(a, 0.5)) to round the volume up to 5 digits\n    # 3. Hint:\n    # 1.  Use the floor(math.pow(a, 0.5))\n    # 2.  Use the floor(round(a, 0.5))\n    # 3. Return the rounded value of the volume\n    pass\ndef area_rectangle_rectangle(x, y, w, h):\n    '''\n    Write a function to calculate the volume of a rectangle with a rectangle.\n    '''\n    # Hint:\n    # 1. Use math.pow(x, 0.5) to calculate the volume\n    # 2. Use round(math.pow(x, 0.5)) to round the volume up to 5 digits\n    # 3. Hint:\n    # 1.  Use the floor(math.pow(x, 0.5))\n    # 2.  Use the floor(round(x, 0.5))\n    # 3. Return the rounded value of the volume\n    pass\ndef area_parallelogram(a, b, c):\n    '''\n    Write a function to calculate the volume of a parallelogram.\n    '''\n    # Hint:\n    # 1. Use math.pow(a, 0.5) to calculate the volume\n    # 2. Use round(math.pow(a, 0.5)) to round the volume up to 5 digits\n    # 3. Hint:\n    # 1.  Use the floor(math.pow(a, 0.5))\n    # 2.  Use the floor(round(a, 0.5))\n    # 3. Return the rounded value of the volume\n    pass\ndef area_octagon(a, b, c):\n    '''\n    Write a function to calculate the volume of an octagon.\n    '''\n    # Hint:\n    # 1. Use math.pow(a, 0.5) to calculate the volume\n    # 2. Use round(math.pow(a, 0.5)) to round the volume up to 5 digits\n    # 3. Hint:\n    # 1.  Use the floor(math.pow(a, 0.5))\n    # 2.  Use the floor(round(a, 0.5))\n    # 3. Return the rounded value of the volume\n    pass\ndef volume_of_cuboid(d, f, g, h):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    # Hint:\n    # 1. Use math.pow(d, 0.5) to calculate the volume\n    # 2. Use round(math.pow(d, 0.5)) to roun"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m > len(list):\n        return list\n    else:\n        return list[m:len(list)]+list[0:m]\n    \ndef remove_dup_list(list):\n    '''\n    Given a list of numbers, this function removes duplicates from that list\n    '''\n    if len(list)==0:\n        return list\n    if len(list)==1:\n        return list[0:1]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = list[:]\n    for i in range(m):\n        l[m-1-i] = l[m-1-i][::-1]\n        l[m-1-i] = l[m-1-i][::-1]\n    return l\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(len(list)):\n        j=i\n        while j >= 0 and list[i] < list[j]:\n            list[i], list[j] = list[j], list[i]\n            j -= 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # move right by 1 element\n    for _ in range(m):\n        list.append(list.pop())\n    # return updated list\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    result = []\n    for i in range(m):\n        result.append(list[i])\n    for i in range(m, len(list)):\n        result.append(list[i])\n    return result\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m, len(list)):\n        temp = list[i]\n        list[i] = list[len(list) - i - 1]\n        list[len(list) - i - 1] = temp\n    return list\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    for i in range(m, 0, -1):\n        temp = list[i]\n        list[i] = list[i - 1]\n        list[i - 1] = temp\n    return list\n    \ndef reverse_array(list):\n    '''\n    Write a function to reverse a given list of unique elements.\n    '''\n    for i in range(0, len(list)):\n        list[i] = list[i][::-1]\n    return list\n    \ndef remove_duplicates(list):\n    '''\n    Write a function to remove duplicates from a given array of numbers.\n    '''\n    for i in range(0, len(list)):\n        if list[i] not in list:\n            list.append(list[i])\n    return list\n    \ndef make_all_unique(list):\n    '''\n    Write a function to make all elements of list unique.\n    '''\n    for i in range(0, len(list)):\n        if list[i] not in list:\n            list.append(list[i])\n    return list\n    \ndef number_of_days(start, end, period):\n    '''\n    Write a function to count the number of days between two dates. https://www.geeksforgeeks.org/python-program-count-number-of-days-between-two-dates/\n    '''\n    if period == 1:\n        return (end - start).days\n    elif period == 2:\n        return (end - start).days // 24\n    elif period == 3:\n        return (end - start).days // 30\n    elif period == 4:\n        return (end - start).days // (60 * 24)\n    elif period == 5:\n        return (end - start).days // (60 * 30)\n    elif period == 6:\n        return (end - start).days // (60 * 60)\n    elif period == 7:\n        return (end - start).days // (60 * 60 * 24)\n    else:\n        return -1\n    \ndef is_leap_year(year):\n    '''\n    Write a function to check whether a given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef days_in_month(year, month):\n    '''\n    Write a function to determine the number of days in a given month.\n    '''\n    if not is_leap_year(year) and month > 2:\n        return 366\n    elif not is_leap_year(year) and month == 2:\n        return 29\n    elif month == 2:\n        return 28\n    elif month == 1:\n        return 31\n    else:\n        return 30\n    \ndef days_between(year1, month1, day1, year2, month2, day2):\n    '''\n    Write a function to calculate the number of days between two dates.\n    '''\n    days = days_in_month(year2, month2) - days_in_month(year1, month1)\n    return days\n    \ndef days_in_months(months):\n    '''\n    Write a function to calculate the number of days in a given month.\n    '''\n    if months == 1:\n        return 31\n    elif months == 2:\n        return 28\n    elif months == 3:\n        return 31\n    elif months == 4:\n        return 30\n    elif months == 5:\n        return 31\n    elif months == 6:\n        return 30\n    elif months == 7:\n        return 31\n    else:\n        return 31\n    \ndef days_in_years(years):\n    '''\n    Write a function to calculate the number of days in a given year.\n    '''\n    if years == 1:\n        return 31\n    elif years == 2:\n        return 28\n    elif years == 3:\n        return 31\n    elif years == 4:\n        return 30\n    elif years == 5:\n        return 31\n    elif years == 6:\n        return 30\n    elif years == 7:\n        return 31\n    else:\n        return 31\n    \ndef days_in_year(year):\n    '''\n    Write a function to calculate the number of days in a given year.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 29\n    else:\n        return 28\n    \ndef days_in_month(year, month):\n    '''\n    Write a function to determine the number of days in a given month.\n    '''\n    if not is_leap_year(year) and month == 2:\n        return 366\n    elif not is_leap_year(year) and month == 1:\n        return 365\n    elif month == 1:\n        return 366\n    elif month == 2:\n        return 365\n    elif month == 3:\n        return 366\n    elif month == 4:\n        return 366\n    elif month == 5:\n        return 365\n    elif month == 6:\n        return 366\n    elif month == 7:\n        return 365\n    else:\n        return 365\n    \ndef days_between_dates(date1, date2):\n    '''\n    Write a function to calculate the number of days between two given dates.\n    '''\n    d1 = date1.split('-')\n    d2 = date2.split('-')\n    if int(d1[2]) > int(d2[2]):\n        return days_in_months(d1[1]) - days_in_months(d2[1])\n    elif int(d1[2]) < int(d2[2]):\n        return days_in_months(d1[2]) - days_in_months(d2[2])\n    elif int(d1[2]) == int(d2[2]):\n        if int(d1[1]) > int(d2[1]):\n            return days_in_years(d1[1]) - days_in_years(d2[1])\n        elif int(d1[1]) < int(d2[1]):\n            return days_in_years(d2[1]) - days_in_years(d1[1])\n        else:\n            return 0\n    else:\n        return 0\n    \ndef days_in_year_2(year):\n    '''\n    Write a function to calculate the number of days in a given year.\n    '''\n    if not is_leap_year(year):\n        return 366\n    else:\n        return 365\n    \ndef days_in_month_2(month):\n    '''\n    Write a function to calculate the number of days in a given month.\n    '''\n    if not is_leap_year(month):\n        return days_in_months(month)\n    else:\n        return days_in_months(month)\n    \ndef days_in_year_3(year):\n    '''\n    Write a function to calculate the number of days in a given year.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return 29\n            else:\n                return 28\n        else:\n            return 29\n    else:\n        return 28\n    \ndef days_in_month_3(month):\n    '''\n    Write a function to calculate the number of days in a given month.\n    '''\n    if not is_leap_year(month):"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # fucntion to rotate the list n number of items\n    def rotate_list(l, n):\n        # return list from iterable\n        list_of_items = list(l)\n        for i in range(n):\n            # go left\n            l = list_of_items[0:len(list_of_items) - i] + list_of_items[-i:]\n            # go right\n            l = list_of_items[-i:] + list_of_items[0:len(list_of_items) - i]\n        return l\n    # make a copy of the list and check if it is empty\n    copy_of_list = list(list)\n    if copy_of_list == []:\n        return\n    # if it's empty then just return\n    if len(copy_of_list) == 0:\n        return\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = []\n    for i in range(len(list)):\n        temp.append(list[len(list)-i-1])\n    return temp\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    if l == 0:\n        return list\n    last = l-1\n    for i in range(l//2):\n        list[last], list[i] = list[i], list[last]\n        last -= 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # TO-DO: implement this function\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0]==None or test_tup[1]==None or test_tup[2]==None or test_tup[3]==None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup is not None\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n        return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if all(None in test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if endnum-startnum == 0:\n        return 1\n    elif startnum%10 == endnum%10:\n        return divisible_by_digits(startnum, endnum/10) + divisible_by_digits(startnum/10, endnum%10)\n    else:\n        return 0\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = []\n    for i in range(startnum, endnum):\n        while i % 10!= 0:\n            i += 1\n            digits.append(i)\n    return digits\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for i in range(startnum, endnum + 1):\n        if i%10 == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # your code here\n    return"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = str(startnum)\n    endnum = str(endnum)\n    if startnum[-1] == '0':\n        startnum = startnum[:-1]\n    if endnum[-1] == '0':\n        endnum = endnum[:-1]\n    for i in range(len(startnum)-1, -1, -1):\n        if startnum[i] == '0' or endnum[i] == '0':\n            continue\n        if int(startnum[i])%int(endnum[i]) == 0:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_multiple_of_a_digit(num):\n        \"\"\"\n        Returns True if num is a multiple of a digit\n        >>> is_multiple_of_a_digit(5)\n        False\n        >>> is_multiple_of_a_digit(0)\n        False\n        >>> is_multiple_of_a_digit(12)\n        False\n        >>> is_multiple_of_a_digit(6885)\n        True\n        \"\"\"\n        return num % 10 == 0\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def int_divisible_by_digit(start, end, digit):\n        return (start + digit * (end - start)) // digit\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digit(num):\n        for i in range(10):\n            if num % 10 == i:\n                return True\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # write your code here\n    def is_divisible(num):\n        if num % 10!= 0:\n            return False\n        else:\n            return True\n        \n    ans = []\n    for num in range(startnum, endnum):\n        if is_divisible(num):\n            ans.append(num)\n    return ans\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result=[]\n    def generator(startnum, endnum):\n        while startnum<=endnum:\n            if startnum%10==0:\n                yield startnum\n            else:\n                startnum+=1\n    return(list(generator(startnum, endnum)))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=a*math.pi/180\n    if a > 360:\n        return None\n    elif a <0:\n        a = 360-a\n        if a > 180:\n            return None\n    return r*math.sin(a)*math.sin(a/180*math.pi)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle=math.radians(a)\n    s=math.pi*r**2\n    return s*math.sin(angle)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    phi=math.atan((a*a)/(r*r))\n    phi=math.degrees(phi)\n    if phi<0:\n        return None\n    return (phi*phi)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r > 0):\n        return (math.pi*r**2)/2\n    else:\n        return 0\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a > 45:\n        print('Angle is out of range')\n    elif r < 50:\n        print('Radius is out of range')\n    elif r > 50:\n        if r > 50:\n            r1 = math.sqrt(math.pow(r - 50, 2) + math.pow(r - 50, 2))\n            if r1 == 0:\n                return None\n            elif r1 < r:\n                if math.pi / 4 < math.pi * r1 / (r - 50):\n                    return None\n                else:\n                    return math.pi * r1 / (r - 50)\n        else:\n            r1 = math.sqrt(math.pow(r - 50, 2) + math.pow(r - 50, 2))\n            if r1 == 0:\n                return None\n            elif r1 < r:\n                if math.pi / 4 < math.pi * r1 / (r - 50):\n                    return None\n                else:\n                    return math.pi * r1 / (r - 50)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = a*(math.tan(math.radians(a)))*(r*r)\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #base case\n    if r<0 or a<0:\n        return None\n    if r==0 or a==0:\n        return 0\n    if r==0:\n        return (math.tan(math.radians(a)))*a\n    #recursion\n    return sector_area(r,a-math.degrees(math.asin(sector_area(r,a))))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    def f(r,a):\n        return 0.5*(r*math.sin(math.radians(a))+math.sin(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    print('Area of sector')\n    #Area of a circle\n    print(r**2*math.pi*a)\n    #Area of a triangle\n    print((math.sin(math.radians(a))**2)**(1/2))\n    #Area of a triangle with a semi-hollow\n    print((math.sin(math.radians(a))**2)**(1/2))\n    #Area of a square\n    print(r*math.pow(r,2))\n    #Area of a square with a quarter radius\n    print((r**2)*math.pow(r,2))\n    #Area of a rectangle\n    print(r*math.pow(r,2))\n    #Area of a rectangle with an eighth radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a eighth radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with an eighth radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a eighth radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a eighth radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a eighth radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2)\n    #Area of a rectangle with a quarter radius\n    print((math.sin(math.radians(a))*r)**2"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 0 and a >= 0:\n        return (math.pi * math.pow(r, 2) * math.cos(a)) / 2\n    else:\n        return None\ndef sector_length(r,a):\n    '''\n    Write a function to find the length of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 0 and a >= 0:\n        return math.pow(r, 2) * math.sin(a)\n    else:\n        return None\ndef section_angle(r,a):\n    '''\n    Write a function to find the angle of a section. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 0 and a >= 0:\n        return (math.pi * math.pow(r, 2) * math.cos(a)) / 2\n    else:\n        return None\ndef azimuth(r,a):\n    '''\n    Write a function to calculate the azimuth of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 0 and a >= 0:\n        if a == 0:\n            return 0\n        else:\n            return sector_angle(r,a) - sector_angle(r, a - math.pi * math.pow(r, 2) / 2)\n    else:\n        return None\ndef elevation(r,a):\n    '''\n    Write a function to calculate the elevation of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 0 and a >= 0:\n        if a == 0:\n            return 0\n        else:\n            return sector_area(r,a)\n    else:\n        return None\ndef long_unit_angle(r,a):\n    '''\n    Write a function to calculate the long unit angle of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 0 and a >= 0:\n        if a == 0:\n            return 0\n        else:\n            return (sector_length(r,a) + sector_angle(r,a) + (sector_angle(r, a) + sector_angle(r, a - math.pi * math.pow(r, 2) / 2))) / 2\n    else:\n        return None\ndef lat_unit_angle(r,a):\n    '''\n    Write a function to calculate the lat unit angle of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 0 and a >= 0:\n        if a == 0:\n            return 0\n        else:\n            return (sector_length(r,a) + sector_angle(r,a) + (sector_angle(r, a) + sector_angle(r, a - math.pi * math.pow(r, 2) / 2))) / 2\n    else:\n        return None\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # A longest common subsequence of three strings is defined as the minimum\n    # distance from any two letters of each string to a single letter.\n    # For example, the shortest sequence of two strings is \"abc\" and \"def\",\n    # the longest common subsequence of \"abc\" and \"def\" is \"acd\".\n    \n    # Note: The strings are immutable.\n    \n    n = len(X)\n    m = len(Y)\n    \n    # Find the length of the longest common subsequence\n    # from the first string to the last string\n    def lcs_longest_common_subsequence(s1, s2, s3):\n        # Create the length of the longest common subsequence\n        # using recurrence\n        lcs = [[0]*(m+1) for _ in range(n+1)]\n        lcs[0][0] = 0\n        for i in range(1, n+1):\n            lcs[i][0] = 1\n        for j in range(1, m+1):\n            lcs[0][j] = 0\n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if X[i-1] == Y[j-1]:\n                    lcs[i][j] = lcs[i-1][j-1] + 1\n                else:\n                    lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])\n        return lcs[n][m]\n    \n    return lcs_longest_common_subsequence(X, Y, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = len(X)\n    N = len(Y)\n    L = len(Z)\n    LCS = [[0 for i in range(L+1)] for j in range(M+1)]\n    for i in range(1, M+1):\n        for j in range(1, N+1):\n            if X[i-1] == Y[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    res = []\n    for i in range(L, -1, -1):\n        for j in range(M, -1, -1):\n            if (LCS[i][j] == LCS[i][j-1]):\n                res.append(Z[i-1])\n    return \"\".join(res)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    o = len(Z)\n    # print(n,m,o)\n    lcs = [[0]*(o+1) for _ in range(n+1)]\n    \n    # for i in range(n):\n    #     for j in range(o):\n    #         lcs[i][j] = lcs[i+1][j+1] + (1 if X[i] == Y[j] else 0)\n    #         lcs[i+1][o] = lcs[i][o] + lcs[i+1][j]\n    #         lcs[o][j+1] = lcs[o][j] + lcs[o+1][j+1]\n    #         lcs[o+1][j+1] = lcs[o+1][j] + lcs[o+1][j+1]\n    #         lcs[i+1][j+1] = lcs[i][j] + lcs[i+1][j+1]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create a helper array to store the previous positions of each character in string A. \n    # Insert the string A at the given index, save index of this character as i.\n    # Use the helper array to find the longest common subsequence for each of the three strings. \n    # You can find the longest common subsequence of two strings if you start at the first index of string A and continue \n    # to the end of string B by removing the first character from the remaining string. \n    # Let the next index be i.\n    # Initialize the result to the empty string.\n    # Initialize dp to be 0.\n    # In the string A, the longest common subsequence is the first index of the element found by recursively calling the function \n    # from the above pointer. \n    # Loop through the rest of the remaining string.\n    \n    # Time complexity = O(m + n)\n    # Space Complexity = O(m + n)\n    \n    # Initialize the result as the first string.\n    res = X + Y + Z\n    \n    # Initialize the dp array to 0.\n    dp = ['' for i in range(len(res) + 1)]\n    \n    # Build the dp array.\n    # Initialize all other indices as the first index.\n    for i in range(1, len(res) + 1):\n        dp[i] = res[i - 1] +''\n        # Loop through the remaining strings.\n        for j in range(i - 1, -1, -1):\n            # If the character is found at this index, add it to the result.\n            if dp[i] == res[j] +'':\n                # If the character is found, update the result with it.\n                res = dp[j + 1]\n            # If the character is not found, update the result with the character of the previous index.\n            else:\n                # If the character is not found, do not add it to the result.\n                res = dp[j + 1]\n                # Otherwise, do nothing.\n    return res\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    sub_sequence_1 = []\n    sub_sequence_2 = []\n    sub_sequence_3 = []\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs_seq = [[0 for i in range(len(Z) + 1)] for j in range(len(X) + 1)]\n    for i in range(len(X)):\n        lcs_seq[i][0] = i + 1\n    for i in range(len(X)):\n        for j in range(len(Z)):\n            lcs_seq[i + 1][j + 1] = 1 + lcs_seq[i][j] + lcs_seq[i + 1][j] + lcs_seq[i][j + 1]\n    for i in range(len(Y)):\n        lcs_seq[len(X) + 1][0] = 1 + lcs_seq[len(X)][0] + lcs_seq[len(X) + 1][0] + lcs_seq[len(X) + 1][0]\n    for i in range(len(Y)):\n        lcs_seq[0][i + 1] = 1 + lcs_seq[0][i] + lcs_seq[0][i + 1] + lcs_seq[0][i + 2]\n    if len(X) > len(Y):\n        return lcs_seq[len(Y)][len(X)]\n    elif len(X) < len(Y):\n        return lcs_seq[len(Y)][len(X)]\n    else:\n        return max(lcs_seq[len(Y)][len(X)], lcs_seq[len(Y)][len(X) + 1])\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if not X or not Y or not Z:\n        return None\n    if len(X) < len(Y) or len(Y) < len(Z):\n        return None\n    \n    X_len = len(X)\n    Y_len = len(Y)\n    Z_len = len(Z)\n    \n    if X_len < Y_len or Y_len < Z_len:\n        return None\n    \n    if X_len == Y_len:\n        return max(X, Y, Z)\n    \n    if X_len == Z_len:\n        return max(X, Z, Y)\n    \n    if X_len < Y_len:\n        return lcs_of_three(Y, Z, X)\n    \n    return lcs_of_three(X, Z, Y)\n    \ndef string_compare(str1, str2):\n    '''\n    Write a function to compare two strings, if they contain same characters, return True. If they have different characters, return False.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    if len(str1) == len(str2):\n        return True\n    \n    for index in range(len(str1)):\n        if str1[index]!= str2[index]:\n            return False\n    return True\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs_of_three = [[None] * (len(Z)+1) for i in range(len(X)+1)]\n    for i in range(len(X)):\n        for j in range(len(Z)):\n            if(X[i] == Z[j]):\n                lcs_of_three[i+1][j+1] = 1\n            else:\n                if lcs_of_three[i+1][j] is not None:\n                    lcs_of_three[i+1][j+1] = lcs_of_three[i][j] + 1\n                else:\n                    lcs_of_three[i+1][j+1] = lcs_of_three[i][j]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    l = len(X)\n    m = len(Y)\n    n = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Base case.\n    if (len(X) == 0 or len(Y) == 0 or len(Z) == 0): \n        return 0\n    \n    # If the first element of X is\n    # smaller than the second element of Y\n    # or Z it is a duplicate element. \n    if (X[0] < Y[0] or X[0] < Z[0]): \n        return lcs_of_three(X, Y, Z) \n    \n    # If the last element of Y is smaller\n    # than the first element of X \n    # or Z it is a duplicate element. \n    if (Y[-1] < X[-1] or Y[-1] < Z[-1]): \n        return lcs_of_three(X, Y, Z) \n    \n    # If the first element of X is a duplicate \n    # element. \n    if (X[0] == Y[0]): \n        return 1 + lcs_of_three(X[1:], Y, Z[1:]) \n    \n    # If the last element of Y is a duplicate \n    # element. \n    if (Y[-1] == X[-1]): \n        return 1 + lcs_of_three(X, Y[1:], Z[1:]) \n    \n    # If the first element of X is a duplicate \n    # element. \n    if (X[0] == Z[0]): \n        return 1 + lcs_of_three(X[1:], Y, Z[1:]) \n    \n    # If the last element of Y is a duplicate \n    # element. \n    if (Y[-1] == Z[-1]): \n        return 1 + lcs_of_three(X, Y[1:], Z[1:]) \n    \n    # Return the length of the longest common subsequence. \n    # A common subsequence of two strings is a subsequence of \n    # another string such that the two strings are adjacent \n    # in the same manner. \n    return max(lcs_of_three(X[1:], Y, Z[1:])) \n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'^[A-Z]',' ',str1)\n    str1 = re.sub(r'[a-z]',' ',str1)\n    str1 = re.sub(r'\\s+',' ',str1)\n    str1 = str1.split(' ')\n    str1 = [str1[i].capitalize() if'' not in str1[i] else str1[i].capitalize() for i in range(len(str1))]\n    str1 =''.join(str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    return re.sub(r'[^A-Za-z0-9\\s]',' ',str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    l = str1.split()\n    for i in range(len(l)):\n        if l[i][0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            l[i] = l[i][0].upper() + l[i][1:]\n    return''.join(l)\ndef index(s,sub):\n    '''\n    return the index of the given substring in the string.\n    '''\n    i = s.find(sub)\n    return i\ndef multiply(x,y):\n    '''\n    Return the product of x and y.\n    '''\n    return x*y\ndef swap(a,b):\n    '''\n    a and b swap places in the array\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a,b\ndef isPalindrome(a):\n    '''\n    Check if a is a palindrome\n    '''\n    s = \"\"\n    for i in range(len(a)):\n        s += str(a[i])\n    try:\n        if int(s) == int(s[::-1]):\n            return True\n        else:\n            return False\n    except:\n        return False\ndef isFibonacci(a,b,c):\n    '''\n    Check if a is a Fibonacci number\n    '''\n    if a<b+c:\n        return False\n    if a<b:\n        return True\n    if a==b==c:\n        return True\n    if a==b or a==c:\n        return True\n    return False\ndef isPrime(a):\n    '''\n    Check if a is a prime number\n    '''\n    if a<2:\n        return False\n    if a==2:\n        return True\n    if a%2==0 or a%3==0:\n        return False\n    for i in range(2,a):\n        if a%i==0:\n            return False\n    return True\ndef isPerfect(a,b):\n    '''\n    Check if a is a perfect number\n    '''\n    if a==b:\n        return True\n    if a%b==0:\n        return False\n    return True\ndef isEuler(a,b,c,d):\n    '''\n    Check if a is an euler number\n    '''\n    if a==b and a==c and a==d:\n        return True\n    return False\ndef isPalindrome(a,b,c):\n    '''\n    Check if a is a palindrome\n    '''\n    return a==b[::-1]\ndef isFibonacci(a,b,c):\n    '''\n    Check if a is a Fibonacci number\n    '''\n    if a==b or a==c:\n        return False\n    if a==b:\n        return True\n    return isPrime(a+b) and isFibonacci(a,b+1,c)\ndef isEuler(a,b,c,d):\n    '''\n    Check if a is an euler number\n    '''\n    return a==b and a==c and a==d\ndef isPerfect(a,b):\n    '''\n    Check if a is a perfect number\n    '''\n    if a==b:\n        return True\n    return isPrime(a+b) and isPerfect(a,b+1)\ndef isPerfect(a,b):\n    '''\n    Check if a is a perfect number\n    '''\n    if a==b:\n        return True\n    return isPrime(a+b) and isPerfect(a,b+1)\ndef isEuler(a,b,c,d):\n    '''\n    Check if a is an euler number\n    '''\n    return a==b and a==c and a==d\ndef isPerfect(a,b):\n    '''\n    Check if a is a perfect number\n    '''\n    return a==b\ndef isPerfect(a,b):\n    '''\n    Check if a is a perfect number\n    '''\n    return a==b\ndef isEven(a):\n    '''\n    Check if a is even number\n    '''\n    if a<2:\n        return False\n    if a%2==0:\n        return False\n    for i in range(2,a):\n        if a%i==0:\n            return False\n    return True\ndef isEven(a):\n    '''\n    Check if a is even number\n    '''\n    return isEven(a) and a%2==0\ndef isOdd(a):\n    '''\n    Check if a is odd number\n    '''\n    if a<2:\n        return False\n    if a%2!=0:\n        return False\n    for i in range(2,a):\n        if a%i==0:\n            return False\n    return True\ndef isOdd(a):\n    '''\n    Check if a is odd number\n    '''\n    return isOdd(a) and a%2!=0\ndef isHarmonic(a,b,c,d):\n    '''\n    Check if a is a harmonic number\n    '''\n    if a==b and a==c and a==d:\n        return True\n    if a==b or a==c or a==d:\n        return False\n    if a==b:\n        if isEven(a) and isEven(c):\n            return True\n        if a==c:\n            return True\n        if isPrime(a+b) and isPrime(c+d):\n            return True\n        if isEuler(a+b+c+d,a+b+c,a+c+d,a+b+c):\n            return True\n        if isPerfect(a+b,c+d):\n            return True\n        if isEuler(a+b,c+d,a+b,c+d):\n            return True\n        if isFibonacci(a+b,c+d,a+b):\n            return True\n        if isEuler(a+b,c+d,a+b,c+d):\n            return True\n        return False\n    if a==b:\n        if isEven(a) and isEven(c):\n            return True\n        if a==c:\n            return True\n        if isPrime(a+b) and isPrime(c+d):\n            return True\n        if isEuler(a+b+c+d,a+b+c,a+c+d,a+b+c):\n            return True\n        if isPerfect(a+b,c+d):\n            return True\n        if isEuler(a+b,c+d,a+b,c+d):\n            return True\n        return False\n    return False\ndef isHarmonic(a,b,c,d):\n    '''\n    Check if a is a harmonic number\n    '''\n    if a==b or a==c or a==d:\n        return True\n    if a==b:\n        if isEven(a) and isEven(c):\n            return True\n        if a==c:\n            return True\n        if isPrime(a+b) and isPrime(c+d):\n            return True\n        if isEuler(a+b+c+d,a+b+c,a+c+d,a+b+c):\n            return True\n        if isPerfect(a+b,c+d):\n            return True\n        if isEuler(a+b,c+d,a+b,c+d):\n            return True\n        return False\n    if a==b:\n        if isEven(a) and isEven(c):\n            return True\n        if a==c:\n            return True\n        if isPrime(a+b) and isPrime(c+d):\n            return True\n        if isEuler(a+b+c+d,a+b+c,a+c+d,a+b+c):\n            return True\n        if isPerfect(a+b,c+d):\n            return True\n        if isEuler(a+b,c+d,a+b,c+d):\n            return True\n        return False\n    if a==c:\n        if isEven(a) and isEven(b):\n            return True\n        if a==b:\n            return True\n        if isPrim"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_string = ''\n    for char in str1:\n        if char.isupper():\n            new_string +=''\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r\"(?:^|[^A-Za-z0-9_])\\w*(?:\\s+|[-\\w]+|$)\"\n    return re.sub(pattern, \" \", str1).lower()\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace('-','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\t','')\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('([A-Za-z])( )', r'\\1 \\2', str1).replace(' ','')\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    new_string = \" \"\n    for word in words:\n        if word[0].isupper():\n            new_string += word + \" \"\n        else:\n            new_string += word[1:] + \" \"\n    return new_string\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if re.search('[A-Z][a-z]*', str1.lower()):\n        return str1.replace(str1.lower(), '').replace(' ','').replace('-','')\n    else:\n        return str1.replace(' ','').replace('-','')\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    count = 0\n    for i in str1.split(' '):\n        if i[0].isupper():\n            count = count+1\n        else:\n            count = count - 1\n    return count\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    a_list = list(nums_str)\n    a_list.sort()\n    sorted_nums_str = ''.join(a_list)\n    return sorted_nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = list(nums_str)\n    nums_list.sort()\n    nums_str = \"\".join(nums_list)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums = []\n    for i in range(len(nums_str)):\n        #print(nums_str[i])\n        sorted_nums.append(int(nums_str[i]))\n        #print(sorted_nums)\n    return sorted_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    list_copy = nums_str.copy()\n    nums_str.sort()\n    print(nums_str)\n    for i in range(len(list_copy)):\n        for j in range(len(list_copy)-1):\n            if list_copy[j] > list_copy[j+1]:\n                list_copy[j],list_copy[j+1] = list_copy[j+1],list_copy[j]\n    print(nums_str)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        nums.append(float(i))\n    nums.sort(key=float)\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Note: If we are done with this code, there is no need to write any more.\n    # Sort numbers in a list of strings.\n    # print('sort', nums_str)\n    # nums_str.sort()\n    # print('sort done')\n    # print('result', nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if not nums_str:\n        return []\n    # sort the list of numbers from smallest to largest\n    nums_str.sort()\n    # create a temporary list to store the sorted numbers\n    temporary_nums = []\n    # iterate through the list of numbers\n    for num in nums_str:\n        # if the number is not already in the temporary list, then add it to the temporary list\n        if num not in temporary_nums:\n            temporary_nums.append(num)\n    # return the list of numbers\n    return temporary_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    str_list = list(nums_str)\n    print(str_list)\n    if len(str_list)==0:\n        return []\n    else:\n        print(\"using sort\")\n        str_list.sort()\n        print(str_list)\n        return str_list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    from math import floor\n    nums_str.sort(key=lambda x: x.isdigit())\n    nums_str.sort(key=lambda x: floor(x))\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    tup = ()\n    for i in test_tup:\n        tup = tup + (i,)\n    test_list.append(tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    for i in range(len(test_list)-1):\n        if test_list[i][1] == test_tup[1]:\n            test_list[i][2] = test_tup[2]\n    test_list.append(test_tup)\n    \n    \n    return test_list\n    \n    \n    \ndef add_tuple_recursive(test_list, test_tup):\n    '''\n    Add the tuple to the given list.\n    '''\n    if test_tup[1] not in test_list:\n        test_list.append(test_tup[1])\n    \n    test_list = add_tuple_recursive(test_list, test_tup)\n    \n    return test_list\n    \n    \ndef add_tuple_recursive_list(test_list, test_tup):\n    '''\n    Add the tuple to the given list, recursively.\n    '''\n    if test_tup[1] not in test_list:\n        test_list.append(test_tup[1])\n    if test_tup[0] not in test_list:\n        test_list.append(test_tup[0])\n    test_list = add_tuple_recursive_list(test_list, test_tup)\n    \n    return test_list\n    \ndef add_tuple_recursive_list_recursive(test_list, test_tup):\n    '''\n    Add the tuple to the given list, recursively, and return the list.\n    '''\n    if test_tup[1] not in test_list:\n        test_list.append(test_tup[1])\n    if test_tup[0] not in test_list:\n        test_list.append(test_tup[0])\n    if test_tup[1] not in test_list:\n        test_list.append(test_tup[1])\n    if test_tup[0] not in test_list:\n        test_list.append(test_tup[0])\n    if test_tup[1] not in test_list:\n        test_list.append(test_tup[1])\n    if test_tup[0] not in test_list:\n        test_list.append(test_tup[0])\n    \n    \n    \ndef remove_tuple(test_list, test_tup):\n    '''\n    Remove the tuple from the given list.\n    '''\n    \n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    \n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n        \n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n        \n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n    \n    \n    \ndef remove_tuple_recursive(test_list, test_tup):\n    '''\n    Remove the tuple from the given list, recursively.\n    '''\n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n        \n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n        \n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n        \n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n    \n    \n    \ndef find_tuple(test_list, test_tup):\n    '''\n    Return a list of the tuple that has the given tup in it.\n    '''\n    \n    for item in test_list:\n        if item[1] == test_tup[1]:\n            return item[0]\n    \n    return None\n    \ndef find_tuple_recursive(test_list, test_tup):\n    '''\n    Return a list of the tuple that has the given tup in it.\n    '''\n    \n    if test_tup[1] in test_list:\n        return item[0]\n    \n    if test_tup[0] in test_list:\n        return item[0]\n    if test_tup[1] in test_list:\n        return item[0]\n    if test_tup[0] in test_list:\n        return item[0]\n    if test_tup[1] in test_list:\n        return item[0]\n    if test_tup[0] in test_list:\n        return item[0]\n        \ndef count_tuple(test_list, test_tup):\n    '''\n    Count the number of tuples in the given list with the given tup.\n    '''\n    \n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n        \n    if test_tup[1] in test_list:\n        test_list.remove(test_tup[1])\n    if test_tup[0] in test_list:\n        test_list.remove(test_tup[0])\n    if test_tup"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_tup)!= 2:\n        raise ValueError(\"tuple must be 2-dimensional\")\n    elif not isinstance(test_tup, tuple):\n        raise TypeError(\"tuple must be a tuple\")\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    temp_list = []\n    for i in range(len(test_list)):\n        temp_list.append(test_list[i])\n        \n    temp_list.append(test_tup)\n    test_list.clear()\n    test_list.extend(temp_list)\n    \n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] <= arr[2 * i + 1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < n//2:\n        check_min_heap_helper(arr, i*2)\n    else:\n        heapq.heappush(arr, i)\n        \n    return arr\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) and arr[i] > arr[-1]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr)-1:\n        return True\n    if arr[i] > arr[i+1] and arr[i] > arr[i-1]:\n        return False\n    return check_min_heap_helper(arr, 2*i+2) or check_min_heap_helper(arr, 2*i+3)\n    \ndef heap_sort(arr):\n    '''\n    Write a function to sort an array of integers using a heap\n    '''\n    heap = [0]\n    for i in range(len(arr)):\n        heapq.heappush(heap, arr[i])\n    arr = heapq.nlargest(len(arr), arr)\n    return arr\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return arr[i] < arr[(i*2)%len(arr)]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) < i:\n        return False\n    if i // 2 < 0:\n        return True\n    if arr[i//2] > arr[i]:\n        return check_min_heap_helper(arr, i//2)\n    return check_min_heap_helper(arr, i//2)\n    \n    \ndef get_min_heap(arr):\n    '''\n    Return the minimum value in a given array. https://www.geeksforgeeks.org/get-the-minimum-value-in-a-given-array/\n    '''\n    if len(arr) < 1:\n        return None\n    return arr[0]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr)-1:\n        return 0\n    if arr[i] < arr[0]:\n        return -1\n    return 1\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1:\n        return True\n    elif arr[i] < arr[i + 1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    elif arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[i // 2] and arr[i] > arr[(i//2)-1]:\n        return check_min_heap_helper(arr, (i//2)-1)\n    else:\n        return check_min_heap_helper(arr, i)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    res = n + 1\n    n = n + 1\n    while n <= 3 * n:\n        # generate nth jacobsthal\n        res = res + n\n        n = n + 1\n    return res\n    # return res\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 0 or n == 1:\n        return 1\n    elif n == 2 or n == 3 or n == 5 or n == 11:\n        return 2\n    else:\n        return n + jacobsthal_num(n-2)\n    \n    \n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    lst = list(range(2, n+1))\n    lst.append(1)\n    lst.append(1)\n    lst.append(3)\n    lst.append(5)\n    lst.append(11)\n    lst.append(21)\n    lst.append(43)\n    lst.append(85)\n    lst.append(171)\n    lst.append(341)\n    lst.append(683)\n    lst.append(1365)\n    lst.append(2731)\n    lst.append(41)\n    lst.append(481)\n    lst.append(1001)\n    lst.append(3147)\n    lst.append(5429)\n    lst.append(123)\n    lst.append(1999)\n    return lst[n-1]\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int(n)\n    \ndef jacobsthal_den(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    return int(n)**2\n    \ndef jacobsthal_roots(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    return abs(int(n))\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    try:\n        if n < 0: \n            raise ValueError\n    except ValueError:\n        print('Invalid Input')\n        return -1\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # return [n+1 for n in range(1,int(n**(1/2))) if (n%2)==1]\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    i = 0\n    while i < n:\n        if i == 0 or i == 1:\n            i+=1\n        else:\n            j = i\n            while j < n:\n                if j == 0 or j == 1:\n                    j+=1\n                else:\n                    print(\"\\n\" + str(i) + \" jacobsthal = \" + str(j) + \" and jacobsthal = \" + str(n-j) + \"\\n\")\n                    break\n                j+=1\n            i+=1\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    num = list(str(n))\n    j=0\n    while j<len(num):\n        j+=1\n        if num[j]==\"0\":\n            num.pop(j)\n    return int(''.join(num))\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    elif n == 37:\n        return 37\n    elif n == 38:\n        return 38\n    elif n == 39:\n        return 39\n    elif n == 40:\n        return 40\n    elif n == 41:\n        return 41\n    elif n == 42:\n        return 42\n    elif n == 43:\n        return 43\n    elif n == 44:\n        return 44\n    elif n == 45:\n        return 45\n    elif n == 46:\n        return 46\n    elif n == 47:\n        return 47\n    elif n == 48:\n        return 48\n    elif n == 49:\n        return 49\n    elif n == 50:\n        return 50\n    elif n == 51:\n        return 51\n    elif n == 52:\n        return 52\n    elif n == 53:\n        return 53\n    elif n == 54:\n        return 54\n    elif n == 55:\n        return 55\n    elif n == 56:\n        return 56\n    elif n == 57:\n        return 57\n    elif n == 58:\n        return 58\n    elif n == 59:\n        return 59\n    elif n == 60:\n        return 60\n    elif n == 61:\n        return 61\n    elif n == 62:\n        return 62\n    elif n == 63:\n        return 63\n    elif n == 64:\n        return 64\n    elif n == 65:\n        return 65\n    elif n == 66:\n        return 66\n    elif n == 67:\n        return 67\n    elif n == 68:\n        return 68\n    elif n == 69:\n        return 69\n    elif n == 70:\n        return 70\n    elif n == 71:\n        return 71\n    elif n == 72:\n        return 72\n    elif n == 73:\n        return 73\n    elif n == 74:\n        return 74\n    elif n == 75:\n        return 75\n    elif n == 76:\n        return 76\n    elif n == 77:\n        return 77\n    elif n == 78:\n        return 78\n    elif n == 79:\n        return 79\n    elif n == 80:\n        return 80\n    elif n == 81:\n        return 81\n    elif n == 82:\n        return 82\n    elif n == 83:\n        return 83\n    elif n == 84:\n        return 84\n    elif n == 85:\n        return 85\n    elif n == 86:\n        return 86\n    elif n == 87:\n        return 87\n    elif n == 88:\n        return 88\n    elif n == 89:\n        return 89\n    elif n == 90:\n        return 90\n    elif n == 91:\n        return 91\n    elif n == 92:\n        return 92\n    elif n == 93:\n        return 93\n    elif n == 94:\n        return 94\n    elif n == 95:\n        return 95\n    elif n == 96:\n        return 96\n    elif n == 97:\n        return 97\n    elif n == 98:\n        return 98\n    elif n == 99:\n        return 99\n    elif n == 100:\n        return 100\n    elif n == 101:\n        return 101\n    elif n == 102:\n        return 102\n    elif n == 103:\n        return 103\n    elif n == 104:\n        return 104\n    elif n == 105:\n        return 105\n    elif n == 106:\n        return 106\n    elif n == 107:\n        return 107\n    elif n == 108:\n        return 108\n    elif n == 109:\n        return 109\n    elif n == 110:\n        return 110\n    elif n == 111:\n        return 111\n    elif n == 112:\n        return 112\n    elif n == 113:\n        return 113\n    elif n == 114:\n        return 114\n    elif n == 115:\n        return 115\n    elif n == 116:\n        return 116\n    elif n == 117:\n        return 117\n    elif n == 118:\n        return 118\n    elif n == 119:\n        return 119\n    elif n == 120:\n        return 120\n    elif n == 121:\n        return 121\n    elif n == 122:\n        return 122\n    elif n == 123:\n        return 123\n    elif n == 124:\n        return 124\n    elif n == 125:\n        return 125\n    elif n == 126:\n        return 126\n    elif n == 127:\n        return 127\n    elif n == 128:\n        return 128\n    elif n == 129:\n        return 129\n    elif n == 130:\n        return 130\n    elif n == 131:\n        return 131\n    elif n == 132:\n        return 132\n    elif n == 133:\n        return 133\n    elif n == 134:\n        return 134\n    elif n == 135:\n        return 135\n    elif n == 136:\n        return 136\n    elif n == 137:\n        return 137\n    elif n == 138:\n        return 138\n    elif n == 139:\n        return 139\n    elif n == 140:\n        return 140\n    elif n == 141:\n        return 141\n    elif n == 142:\n        return 142\n    elif n == 143:\n        return 143\n    elif n == 144:\n        return 144\n    elif n == 145:\n        return 145\n    elif n == 146:\n        return 146\n    elif n == 147:\n        return 147\n    elif n == 148:\n        return 148\n    elif n == 149:\n        return 149\n    elif n == 150:\n        return 150\n    elif n == 151:\n        return 151\n    elif n == 152:\n        return 152\n    elif n == 153:\n        return 153\n    elif n == 154:\n        return 154\n    elif n == 155:\n        return 155\n    elif n == 156:\n        return 156\n    elif n == 157:\n        return 157\n    elif n == 158:\n        return 158\n    elif n == 159:\n        return 159\n    elif n == 160:\n        return 160\n    elif n == 161:\n        return 161\n    elif n ="
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,j15,j16,j17,j18,j19,j20,j21,j22,j23,j24,j25,j26,j27,j28,j29,j30,j31,j32,j33,j34,j35,j36,j37,j38,j39,j40,j41,j42,j43,j44,j45,j46,j47,j48,j49,j50 = 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # TODO - COMPLETE THIS\n    # NOTE - K (number of elements) is the minimum required to store the records in the list.\n    # Hint - Sort the elements from smallest to largest.\n    # Hint - You may need to use this function as you write the code.\n    # Hint - we've already created a list of tuples for you.\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize k with 1\n    k = 1\n    # Initialize counter\n    cnt = 0\n    # Check if given list is empty\n    if len(test_list) == 0:\n        return 0\n    # Loop through all elements\n    for i in range(len(test_list)):\n        # Check if k is less than or equal to 0\n        if k <= 0:\n            return -1\n        # Increment counter\n        cnt += 1\n        # If k is equal to 0, increment counter\n        if test_list[i][0] == test_list[i][1]:\n            k -= 1\n    # If there are no elements left\n    return cnt\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # your code here\n    return test_list\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize:\n    min_k = []\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list)<=K:\n        return len(test_list)\n    elif K==1:\n        return test_list[0]\n    else:\n        return min(test_list[:K-1], key=lambda x: x[K-1])[K-1]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store results\n    results = {}\n    # Loop through tuple list\n    for record in test_list:\n        # Check if key exists\n        if record[0] in results:\n            # Add to count\n            results[record[0]] += 1\n        else:\n            # Add to count\n            results[record[0]] = 1\n    # Find the smallest element\n    for key in results:\n        # Check if key exists\n        if results[key] == min(results.values()):\n            # Find the result\n            return key\n    # If no key found, return the first element\n    return test_list[0][0]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    table = sorted(test_list, key=lambda x: x[1])\n    \n    #print(table)\n    for x in table:\n        print(x)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    # Create a dictionary of the record numbers (key)\n    # and their respective minimum value (value).\n    # The dictionary will then be turned into a list in the same order as the list is ordered.\n    records = {}\n    for i in range(len(test_list)):\n        records[test_list[i][0]] = test_list[i][1]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    i = 0\n    k = []\n    while i < len(test_list):\n        k.append(test_list[i])\n        i = i + 1\n    k.sort()\n    return k[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    l = len(test_list)\n    if l == 1:\n        return test_list[0]\n    if l == 2:\n        return min(test_list)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = [i for i, x in enumerate(l1) if x in l2 and x in l3]\n    index2 = [i for i, x in enumerate(l2) if x in l1 and x in l3]\n    index3 = [i for i, x in enumerate(l3) if x in l1 and x in l2]\n    index = list(set(index) & set(index2) & set(index3))\n    return index\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    l1_set = set(l1)\n    l2_set = set(l2)\n    l3_set = set(l3)\n    for index in l1_set:\n        if index in l2_set and index in l3_set:\n            index_list.append(index)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for index in range(len(l1)):\n        if l1[index] in l2[index] and l1[index] in l3[index]:\n            res.append(l1[index])\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l1)):\n            for k in range(len(l1)):\n                if l1[i] in l2[j] and l2[j] in l3[k]:\n                    index_list.append((l1[i], l2[j], l3[k]))\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(list(set(l1) & set(l2)) & set(l3)))\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # sort l1\n    l1 = sorted(l1)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = list(set(l1))\n    l2 = list(set(l2))\n    l3 = list(set(l3))\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3:\n            common.append(l1[i])\n    common.sort()\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for index in range(len(l1)):\n        index_list.append(index)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [i for i in range(len(l1)) if l1[i] in l2 and l2[l1[i]] in l3 and l3[l2[l1[i]]] in l3]\n    \n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3:\n            common_list.append(l2[i])\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2:\n            common_list.append(l3[i])\n    for i in range(len(common_list)):\n        if common_list.count(common_list[i]) == 1:\n            index_list.append(common_list.index(common_list[i]))\n    return index_list\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_number = numbers[0]\n    smallest_index = 0\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second = numbers[0]\n    for i in numbers:\n        if i < smallest:\n            second = smallest\n            smallest = i\n        elif i < second:\n            second = i\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_num = numbers[0]\n    for num in numbers:\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    for i in range(len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers)==0:\n        return None\n    else:\n        smallest = numbers[0]\n        for x in range(len(numbers)):\n            if smallest>numbers[x]:\n                smallest = numbers[x]\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    for number in numbers:\n        if smallest is None or number < smallest:\n            smallest = number\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] < numbers[j]:\n                second_smallest = [i, j]\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_lower = text.lower()\n    pattern = \"a(b)*\"\n    if re.search(pattern, text_lower):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_matcher = re.compile(r'a')\n    b_matcher = re.compile(r'b')\n    match = a_matcher.search(text)\n    match_z = b_matcher.search(text)\n    if(match):\n        print(True)\n    else:\n        print(False)\n        \n        \ndef text_match_zero_one_with_regex(text, regex):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_matcher = re.compile(regex)\n    match = a_matcher.search(text)\n    if(match):\n        print(True)\n    else:\n        print(False)\n        \n        \ndef text_match_zero_one_with_regex_variables(text, regex, variables):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_matcher = re.compile(regex)\n    match = a_matcher.search(text)\n    match_z = b_matcher.search(text)\n    match_w = c_matcher.search(text)\n    match_x = d_matcher.search(text)\n    match_y = e_matcher.search(text)\n    if(match):\n        print(True)\n    else:\n        print(False)\n        \n        \ndef text_match_zero_one_with_regex_variables_variables(text, regex, variables):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_matcher = re.compile(regex)\n    match = a_matcher.search(text)\n    match_z = b_matcher.search(text)\n    match_w = c_matcher.search(text)\n    match_x = d_matcher.search(text)\n    match_y = e_matcher.search(text)\n    match_z = f_matcher.search(text)\n    if(match):\n        print(True)\n    else:\n        print(False)\n        \n        \ndef text_match_zero_one_with_regex_variables_variables_and_array(text, regex, variables):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_matcher = re.compile(regex)\n    match = a_matcher.search(text)\n    match_z = b_matcher.search(text)\n    match_w = c_matcher.search(text)\n    match_x = d_matcher.search(text)\n    match_y = e_matcher.search(text)\n    match_z = f_matcher.search(text)\n    match_w = g_matcher.search(text)\n    match_x = h_matcher.search(text)\n    match_y = i_matcher.search(text)\n    match_z = j_matcher.search(text)\n    match_w = k_matcher.search(text)\n    match_x = l_matcher.search(text)\n    match_y = m_matcher.search(text)\n    match_z = n_matcher.search(text)\n    match_w = o_matcher.search(text)\n    match_x = p_matcher.search(text)\n    match_y = q_matcher.search(text)\n    match_z = r_matcher.search(text)\n    match_w = s_matcher.search(text)\n    match_x = t_matcher.search(text)\n    match_y = u_matcher.search(text)\n    match_z = w_matcher.search(text)\n    match_w = x_matcher.search(text)\n    match_x = y_matcher.search(text)\n    match_y = z_matcher.search(text)\n    match_z = x_w_matcher.search(text)\n    match_w = y_w_matcher.search(text)\n    match_x = z_w_matcher.search(text)\n    match_y = x_x_matcher.search(text)\n    match_z = y_x_matcher.search(text)\n    match_w = z_x_matcher.search(text)\n    if(match):\n        print(True)\n    else:\n        print(False)\n        \n        \ndef text_match_zero_one_with_regex_variables_variables_and_array_and_array(text, regex, variables):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_matcher = re.compile(regex)\n    match = a_matcher.search(text)\n    match_z = b_matcher.search(text)\n    match_w = c_matcher.search(text)\n    match_x = d_matcher.search(text)\n    match_y = e_matcher.search(text)\n    match_z = f_matcher.search(text)\n    match_w = g_matcher.search(text)\n    match_x = h_matcher.search(text)\n    match_y = i_matcher.search(text)\n    match_z = j_matcher.search(text)\n    match_w = k_matcher.search(text)\n    match_x = l_matcher.search(text)\n    match_y = m_matcher.search(text)\n    match_z = n_matcher.search(text)\n    match_w = o_matcher.search(text)\n    match_x = p_matcher.search(text)\n    match_y = q_matcher.search(text)\n    match_z = r_matcher.search(text)\n    match_w = s_matcher.search(text)\n    match_x = t_matcher.search(text)\n    match_y = u_matcher.search(text)\n    match_z = w_matcher.search(text)\n    match_w = x_matcher.search(text)\n    match_x = y_matcher.search(text)\n    match_y = z_matcher.search(text)\n    match_z = x_w_matcher.search(text)\n    match_w = y_w_matcher.search(text)\n    match_x = z_w_matcher.search(text)\n    match_y = x_x_matcher.search(text)\n    match_z = y_x_matcher.search(text)\n    match_w = z_x_matcher.search(text)\n    if(match):\n        print(True)\n    else:\n        print(False)\n        \n        \ndef text_match_zero_one_with_regex_variables_variables_and_array_and_array_and_array(text, regex, variables):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_matcher = re.compile(regex)\n    match = a_matcher"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.sub(r'[^\\w]',' ',text.lower())\n    count = text.count('a') + text.count('b')\n    return count >= 1\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    pattern = r\"^(a{1})*b{1}$\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b[a-b]\\w*[a-z]\\w*\\b'\n    text_ = text.replace(\" \", \"\")\n    return re.search(pattern, text_)\ndef text_match_zero_one_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' in the middle of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b[a-z]\\w*[a-z]\\w*\\b[a-z]\\w*\\b'\n    text_ = text.replace(\" \", \"\")\n    return re.search(pattern, text_)\ndef text_match_zero_one_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' in the end of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b[a-z]\\w*[a-z]\\w*\\b[a-z]\\w*\\b\\w*\\b'\n    text_ = text.replace(\" \", \"\")\n    return re.search(pattern, text_)\ndef text_match_zero_one_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' in the beginning of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b[a-z]\\w*[a-z]\\w*\\b[a-z]\\w*\\b\\w*\\b'\n    text_ = text.replace(\" \", \"\")\n    return re.search(pattern, text_)\ndef text_match_zero_one_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' in the middle of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b[a-z]\\w*[a-z]\\w*\\b[a-z]\\w*\\b\\w*\\b\\w*\\b'\n    text_ = text.replace(\" \", \"\")\n    return re.search(pattern, text_)\ndef text_match_zero_one_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' in the end of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b[a-z]\\w*[a-z]\\w*\\b[a-z]\\w*\\b\\w*\\b\\w*\\b\\w*\\b'\n    text_ = text.replace(\" \", \"\")\n    return re.search(pattern, text_)\ndef text_match_zero_one_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' in the beginning of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b[a-z]\\w*[a-z]\\w*\\b[a-z]\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b'\n    text_ = text.replace(\" \", \"\")\n    return re.search(pattern, text_)\ndef text_match_zero_one_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' in the middle of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b[a-z]\\w*[a-z]\\w*\\b[a-z]\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b'\n    text_ = text.replace(\" \", \"\")\n    return re.search(pattern, text_)\ndef text_match_zero_one_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' in the end of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b[a-z]\\w*[a-z]\\w*\\b[a-z]\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b'\n    text_ = text.replace(\" \", \"\")\n    return re.search(pattern, text_)\ndef text_match_zero_one_10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' in the beginning of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\b[a-z]\\w*[a-z]\\w*\\b[a-z]\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*\\b\\w*"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    lst = re.split('\\n',text)\n    for i in lst:\n        if i.find('a')!= -1:\n            text = text.replace(i,'')\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall('a+[b]+', text)\n    return result[0] if result else None\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a(b)(c)?')\n    matches = pattern.findall(text)\n    #print(matches)\n    for match in matches:\n        print(match)\n    #print('\\n')\n    \n    \n    \ndef text_match_zero_three(text):\n    '''\n    Write a function that matches a string that has three consecutive a's followed by four a's followed by 'b' followed by 'c'.\n    '''\n    pattern = re.compile('(a|b|c)(a|b|c)(a|b|c)(a|b|c)(a|b|c)(a|b|c)?')\n    matches = pattern.findall(text)\n    #print(matches)\n    for match in matches:\n        print(match)\n    #print('\\n')\n    \n    \ndef text_match_zero_four(text):\n    '''\n    Write a function that matches a string that has a match with three consecutive a's followed by four a's followed by 'b' followed by 'c' followed by 'd'.\n    '''\n    pattern = re.compile('(a|b|c)(a|b|c)(a|b|c)(a|b|c)(a|b|c)(a|b|c)(a|b|c)(a|b|c)?')\n    matches = pattern.findall(text)\n    #print(matches)\n    for match in matches:\n        print(match)\n    #print('\\n')\n    \n    \ndef text_match_zero_five(text):\n    '''\n    Write a function that matches a string that has five consecutive a's followed by six a's followed by 'b' followed by 'c' followed by 'd' followed by 'e' followed by 'f'.\n    '''\n    pattern = re.compile('(a|b|c|d|e|f)(a|b|c|d|e|f)(a|b|c|d|e|f)(a|b|c|d|e|f)(a|b|c|d|e|f)(a|b|c|d|e|f)(a|b|c|d|e|f)(a|b|c|d|e|f)?')\n    matches = pattern.findall(text)\n    #print(matches)\n    for match in matches:\n        print(match)\n    #print('\\n')\n    \n    \ndef text_match_zero_six(text):\n    '''\n    Write a function that matches a string that has six consecutive a's followed by seven a's followed by 'b' followed by 'c' followed by 'd' followed by 'e' followed by 'f' followed by 'g'.\n    '''\n    pattern = re.compile('(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)?')\n    matches = pattern.findall(text)\n    #print(matches)\n    for match in matches:\n        print(match)\n    #print('\\n')\n    \n    \ndef text_match_zero_seven(text):\n    '''\n    Write a function that matches a string that has seven consecutive a's followed by 'b' followed by 'c' followed by 'd' followed by 'e' followed by 'f' followed by 'g' followed by 'h'.\n    '''\n    pattern = re.compile('(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)?')\n    matches = pattern.findall(text)\n    #print(matches)\n    for match in matches:\n        print(match)\n    #print('\\n')\n    \ndef text_match_zero_eight(text):\n    '''\n    Write a function that matches a string that has eight consecutive a's followed by 'b' followed by 'c' followed by 'd' followed by 'e' followed by 'f' followed by 'g' followed by 'h' followed by 'i'.\n    '''\n    pattern = re.compile('(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)?')\n    matches = pattern.findall(text)\n    #print(matches)\n    for match in matches:\n        print(match)\n    #print('\\n')\n    \ndef text_match_zero_nine(text):\n    '''\n    Write a function that matches a string that has nine consecutive a's followed by 'b' followed by 'c' followed by 'd' followed by 'e' followed by 'f' followed by 'g' followed by 'h' followed by 'i'.\n    '''\n    pattern = re.compile('(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)?')\n    matches = pattern.findall(text)\n    #print(matches)\n    for match in matches:\n        print(match)\n    #print('\\n')\n    \ndef text_match_zero_ten(text):\n    '''\n    Write a function that matches a string that has ten consecutive a's followed by 'b' followed by 'c' followed by 'd' followed by 'e' followed by 'f' followed by 'g' followed by 'h' followed by 'i' followed by 'j' followed by 'k' followed by 'l' followed by'm'.\n    '''\n    pattern = re.compile('(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)?')\n    matches = pattern.findall(text)\n    #print(matches)\n    for match in matches:\n        print(match)\n    #print('\\n')\n    \n    \ndef text_match_zero_eleven(text):\n    '''\n    Write a function that matches a string that has eleven consecutive a's followed by 'b' followed by 'c' followed by 'd' followed by 'e' followed by 'f' followed by 'g' followed by 'h' followed by 'i' followed by 'j' followed by 'k' followed by 'l' followed by'm'.\n    '''\n    pattern = re.compile('(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)(a|b|c|d|e|f|g)?')\n    matches = pattern.findall(text)\n    #print(matches)\n    for match in matche"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #print(text)\n    #text = \"We Are The Day Of A Day Where We Are\"\n    #print(text)\n    #text = text.replace(\"Is\", \"Is Not\")\n    #print(text)\n    #text = text.replace(\"We\", \"We\")\n    #print(text)\n    #text = text.replace(\"and\", \"and Not\")\n    #print(text)\n    #text = text.replace(\"Is\", \"Is Not\")\n    #print(text)\n    '''\n    #print(text)\n    #text = re.findall(r'[A-Z][a-z]{2}', text)\n    #print(text)\n    '''\n    #print(text)\n    #text = text.replace(\"\\n\", \" \")\n    #print(text)\n    #print(text.find(\"is\"))\n    #print(text.find(\"not\"))\n    #text = text.replace(\"\\n\", \" \")\n    #print(text)\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\" \", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #text = text.replace(\" \", \" \")\n    #print(text)\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\\n\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #print(text)\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #print(text)\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\\n\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\\n\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\\n\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\\n\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\n\", \" \")\n    #text = text.replace(\"\\t\", \" \")\n    #print(text)\n    #text = text.replace(\"\\r\\n\", \" \")\n    #text = text.replace(\"\\r\", \" \")\n    #text = text.replace(\"\\r\", \" "
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    number_of_substrings = re.findall(r'\\d+', text)\n    if len(number_of_substrings) == 0:\n        return 0\n    return 1\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # Edge cases\n    if len(test_list) < 2:\n        return 0\n    elif len(test_list) == 2:\n        return 1\n    elif len(test_list) == 3:\n        return 1\n    \n    count = 0\n    for i in range(0, len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # initalize count variable and initial value of test_list\n    count_var = 0\n    var1 = 0\n    var2 = 0\n    var3 = 0\n    var4 = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-i):\n            if test_list[j] > test_list[j+1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list.sort()\n    pairs = 0\n    for i in range(0, len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    temp = []\n    i = 0\n    for j in range(0, len(test_list)):\n        if test_list[j] == test_list[i]:\n            temp.append(1)\n        else:\n            temp.append(0)\n        i = j + 1\n    return temp\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total = 0\n    \n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            total = total + 1\n            \n    print(total)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # make a dictionary to store the number of pairs\n    # count the number of pairs by the number of letters\n    # count the pairs by the number of letters\n    # count the pairs by the number of letters\n    # count the pairs by the number of letters\n    # return the number of pairs\n    \n    # calculate the number of pairs in each string\n    # get the unique chars\n    # count the pairs by the unique chars\n    # return the number of pairs\n    \n    \n    # dictionary with each key a unique char and value a dict for the number of pairs\n    # key = unique char, value = count of pairs of chars of that char\n    # values are the total number of pairs\n    \n    \n    \n    pass\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    res = 0\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list.sort()\n    counter = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #declare count and dictionary\n    count = 0\n    dictionary = {}\n    #loop through test_list\n    for i in range(len(test_list)):\n        #find first string from the test_list\n        first_string = test_list[i]\n        #find second string from the test_list\n        second_string = test_list[i+1]\n        #if the strings are the same\n        if first_string == second_string:\n            #add both to count\n            count += 1\n            #if a string is in the dictionary, it should be present\n            if first_string in dictionary:\n                #remove the first string from the dictionary\n                dictionary[first_string].remove(first_string)\n            #if the second string is not in the dictionary, it should be not present\n            else:\n                #add second string to the dictionary\n                dictionary[second_string] = 1\n        #if there are two strings that are in both dictionaries\n        else:\n            #remove first string from dictionary\n            dictionary[first_string] = dictionary[first_string] - 1\n            #if second string is not in dictionary, it should be not present\n            if second_string in dictionary:\n                #remove second string from dictionary\n                dictionary[second_string] = dictionary[second_string] + 1\n            #if there are two strings that are in both dictionaries, it should be present\n            else:\n                #add second string to dictionary\n                dictionary[second_string] = dictionary[second_string] + 1\n        #add the keys to the dictionary\n        dictionary[first_string] = dictionary[first_string] + 1\n    #return the count\n    return count\n    "
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #iterate through the list and return a dictionary with each value as a tuple\n    #filter out the values with only 1 value\n    #store the number of occurences in the corresponding key in the dictionary\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #number of occurences in the original list\n    number_of_occurences = dict()\n    for i in list1:\n        for j in i:\n            if j in number_of_occurences:\n                number_of_occurences[j]+=1\n            else:\n                number_of_occurences[j]=1\n    #create a dictionary with the number of occurences\n    #count the occurences in the dictionary and return the dictionary\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #create the dictionary and store the occurences\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #create the dictionary of the occurences\n    #store the number of occurences in the corresponding key in the dictionary\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #initialize the dictionary\n    #keep track of the number of occurences\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #initialize the dictionary\n    #keep track of the number of occurences\n    #add the number of occurences to the dictionary\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2}\n    '''\n    #return the dictionary\n    '''\n    example:\n    >>> unique_sublists([(2, 5), (6, 4), (2, 3), (6, 2), (7, 3)])\n    {2: 2, 3: 1, 6: 2"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for l in list1:\n        tmp = tuple(l)\n        if tmp not in dict:\n            dict[tmp] = 0\n        dict[tmp] += 1\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from itertools import combinations\n    list_dict = {}\n    for sublist in list1:\n        for element in combinations(sublist,2):\n            list_dict[element] = list_dict.get(element, 0) + 1\n    return list_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # TODO: Use the collections module to help create a dictonary from a list\n    # https://www.w3schools.com/python/python_dictionaries.asp\n    # Also, you will need to use the collections.Counter module to help generate a dictionary from a list.\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    total_count = {}\n    for i in range(len(list1)):\n        counter = 0\n        for j in range(len(list1[i])):\n            if list1[i][j] not in total_count:\n                counter += 1\n                total_count[list1[i][j]] = 1\n            else:\n                total_count[list1[i][j]] += 1\n    return total_count\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    my_dict = {}\n    \n    for i in range(0, len(list1)):\n        for j in range(0, len(list1[i])):\n            my_dict.update({list1[i][j]: my_dict.get(list1[i][j], 0) + 1})\n    return my_dict"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    count = {}\n    for i in list1:\n        list2.append(tuple(i))\n    count['.'] = len(list2)\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    tuple_list = []\n    for item in list1:\n        tuple_list.append(item)\n    for i in range(len(list1)):\n        if tuple_list[i] not in d:\n            d[tuple_list[i]] = 1\n        else:\n            d[tuple_list[i]] += 1\n    return d\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        num = num.replace('.', '', 1)\n    for n in num:\n        if not n.isdigit():\n            return False\n        if n == 'e' or n == 'E':\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and num.count('.') > 0:\n        num = num.replace('.','')\n        return int(num)\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    numbers = str(num)\n    temp = numbers[::-1]\n    list_of_decimal = []\n    temp_decimal = temp\n    for item in temp_decimal:\n        if item == '.':\n            list_of_decimal.append('.')\n        else:\n            list_of_decimal.append(item)\n    return list_of_decimal == temp_decimal\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    return int(num) % 2 == 0\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if isinstance(num, str) and (num.isdigit()):\n            return int(num)\n    except:\n        pass\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    n = 0\n    for i in num:\n        if i.isdigit():\n            n+=1\n        if n>0:\n            break\n    return n!=0\n    \ndef clean_text(text):\n    '''\n    Clean the given text.\n    '''\n    text = text.lower()\n    text = text.replace(\"-\", \"\")\n    text = text.replace(\" \", \"\")\n    text = text.replace(\".\", \"\")\n    text = text.replace(\",\", \"\")\n    text = text.replace(\":\", \"\")\n    text = text.replace(\"/\", \"\")\n    text = text.replace(\"/\", \"\")\n    text = text.replace(\"[\", \"\")\n    text = text.replace(\"]\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\")\", \"\")\n    text = text.replace(\"\\'\", \"\")\n    text = text.replace(\"'\", \"\")\n    return text\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return all(i.isdigit() for i in str(num))\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    str = str(num)\n    str_len = len(str)\n    l = 0\n    for i in str:\n        if i == '.':\n            l += 1\n            if l > 1:\n                return False\n        else:\n            l -= 1\n    if l == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n    # if len(set(arr)) == 1:\n    #     return True\n    # return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for elem in arr:\n        if elem!= arr[0]:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    new = []\n    for i in arr:\n        if i not in new:\n            new.append(i)\n    return len(new) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # initializing unique_element as []\n    unique_element = []\n    # looping through all elements\n    for i in arr:\n        # if only one number in array, add to unique_element\n        if len(arr) == 1:\n            unique_element.append(i)\n        # if multiple numbers found, add the first number to unique_element\n        elif len(arr) > 1:\n            if i not in unique_element:\n                unique_element.append(i)\n    # if there is only one number, it is not a duplicate element\n    if len(unique_element) == 1:\n        return False\n    # otherwise, check if there are multiple elements\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    from collections import Counter\n    if len(arr)==0:\n        return False\n    elif len(arr)==1:\n        return arr[0] == arr[0]\n    else:\n        return True if Counter(arr).get(arr[0])==1 else False\n    #If you have 4 numbers in your list of data, it will be true if there is only 1 distinct element in your list and false if there is more than one distinct element.\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)>=1:\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if arr[i]==arr[j]:\n                    return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    if n == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = []\n    \n    for x in arr:\n        if x not in unique:\n            unique.append(x)\n        \n    return len(unique) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if arr:\n        return len(set(arr)) == 1\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if arr == None or len(arr) == 0:\n        return False\n    for ele in arr:\n        if ele!= arr[0]:\n            return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    else:\n        if monthnum3 == 12:\n            if (monthnum3 == 1):\n                if (monthnum3 == 31):\n                    return True\n                else:\n                    return False\n            else:\n                if (monthnum3 == 28):\n                    return True\n                else:\n                    return False\n        else:\n            if (monthnum3 == 1):\n                if (monthnum3 == 31):\n                    return True\n                else:\n                    return False\n            else:\n                if (monthnum3 == 28):\n                    return True\n                else:\n                    return False"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Initializing the list with 0\n    monthlist = [0 for i in range(monthnum3)]\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 0 and monthnum3 < 13:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3) < 1 or int(monthnum3) > 12:\n        return False\n    elif (int(monthnum3)%10)!= 0 and (int(monthnum3)%100) == 0:\n        return False\n    elif int(monthnum3)%100 == 0:\n        if int(monthnum3)%400 == 0:\n            return True\n        else:\n            return False\n    else:\n        if int(monthnum3)%100!= 0:\n            if int(monthnum3)%400 == 0:\n                return True\n            else:\n                return False\n    if int(monthnum3) < 20:\n        return True\n    elif int(monthnum3) < 28:\n        return False\n    elif int(monthnum3) < 35:\n        return True\n    elif int(monthnum3) < 45:\n        return False\n    elif int(monthnum3) < 55:\n        return True\n    elif int(monthnum3) < 65:\n        return False\n    elif int(monthnum3) < 75:\n        return True\n    elif int(monthnum3) < 85:\n        return False\n    elif int(monthnum3) < 95:\n        return True\n    elif int(monthnum3) < 105:\n        return False\n    elif int(monthnum3) < 115:\n        return True\n    elif int(monthnum3) < 125:\n        return False\n    elif int(monthnum3) < 135:\n        return True\n    elif int(monthnum3) < 145:\n        return False\n    elif int(monthnum3) < 155:\n        return True\n    elif int(monthnum3) < 165:\n        return False\n    elif int(monthnum3) < 175:\n        return True\n    elif int(monthnum3) < 185:\n        return False\n    elif int(monthnum3) < 195:\n        return True\n    elif int(monthnum3) < 205:\n        return False\n    elif int(monthnum3) < 215:\n        return True\n    elif int(monthnum3) < 225:\n        return False\n    elif int(monthnum3) < 235:\n        return True\n    elif int(monthnum3) < 245:\n        return False\n    elif int(monthnum3) < 275:\n        return True\n    elif int(monthnum3) < 285:\n        return False\n    elif int(monthnum3) < 305:\n        return True\n    elif int(monthnum3) < 315:\n        return False\n    elif int(monthnum3) < 325:\n        return True\n    elif int(monthnum3) < 335:\n        return False\n    elif int(monthnum3) < 345:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 375:\n        return True\n    elif int(monthnum3) < 375:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 375:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    elif int(monthnum3) < 365:\n        return False\n    elif int(monthnum3) < 365:\n        return True\n    eli"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Taking input from user\n    monthnum3 = int(input(\"Enter the Month Number:\"))\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if (monthnum3 % 2) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if type(monthnum3) is not int or monthnum3 <= 0:\n        raise ValueError(\"Please provide a positive integer\")\n    elif monthnum3 > 12:\n        raise ValueError(\"Please provide a positive integer less than 12\")\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    \n    if(monthnum3 >= 1 and monthnum3 <= 12):\n        for i in months.keys():\n            if(monthnum3 == i):\n                if(months[i]!= 31):\n                    return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if not(monthnum3 < 0 or monthnum3 > 12):\n        return 'Invalid month number'\n    else:\n        if monthnum3 == 12:\n            return 'Last month'\n        else:\n            if monthnum3 == 1:\n                return 'First month'\n            else:\n                if monthnum3 == 2:\n                    return 'Second month'\n                else:\n                    if monthnum3 == 3:\n                        return 'Third month'\n                    else:\n                        if monthnum3 == 4:\n                            return 'Fourth month'\n                        else:\n                            if monthnum3 == 5:\n                                return 'Fifth month'\n                            else:\n                                if monthnum3 == 6:\n                                    return 'Sixth month'\n                                else:\n                                    if monthnum3 == 7:\n                                        return 'Seventh month'\n                                    else:\n                                        if monthnum3 == 8:\n                                            return 'Eighth month'\n                                        else:\n                                            if monthnum3 == 9:\n                                                return 'Ninth month'\n                                            else:\n                                                if monthnum3 == 10:\n                                                    return 'Tenth month'\n                                                else:\n                                                    if monthnum3 == 11:\n                                                        return 'Eleventh month'\n                                                    else:\n                                                        if monthnum3 == 12:\n                                                            return 'December month'\n                                                else:\n                                                    return 'Invalid month number'\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = abs(arr[0] - arr[1])\n    i = 0\n    j = 1\n    while i < n-1 and j < n-1:\n        if arr[i] + arr[j] < min_diff:\n            min_diff = arr[i] + arr[j]\n        if arr[i] + arr[j] > min_diff:\n            j += 1\n        else:\n            i += 1\n    if i == n-1:\n        return arr[i]\n    else:\n        return arr[i] - arr[j-1]\ndef find_max_diff(arr, n): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array. \n    '''\n    max_diff = arr[0] - arr[1]\n    i = 0\n    j = 1\n    while i < n-1 and j < n-1:\n        if arr[i] + arr[j] > max_diff:\n            max_diff = arr[i] + arr[j]\n        if arr[i] + arr[j] < max_diff:\n            j += 1\n        else:\n            i += 1\n    if i == n-1:\n        return arr[i]\n    else:\n        return arr[i] - arr[j-1]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min=arr[0]\n    for i in range(1,len(arr)):\n        if min>arr[i]:\n            min=arr[i]\n    return min\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return arr[0]\n    if n==2:\n        return min(arr[0], arr[1])\n    res = find_min_diff(arr, n-1)\n    arr[0] = arr[n-1]\n    arr[n-1] = min(arr[n-2], arr[n-1])\n    return res\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    for i in range(1,n): \n        min_diff = arr[i] - arr[i-1] \n        left = i - 1\n        right = n-1\n        while left >= 0 and right < n: \n            if arr[left] - arr[i] < arr[right] - arr[i]: \n                min_diff = min(min_diff,arr[right] - arr[i]) \n                right -= 1 \n            else: \n                min_diff = min(min_diff,arr[left] - arr[i]) \n                left -= 1 \n        arr[i] = min_diff \n    return arr \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = abs(arr[0] - arr[1])\n    for i in range(0, n - 1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i,j=0,0\n    min_diff = sys.maxsize\n    while i < n and j < n:\n        if arr[i] == arr[j]:\n            i+=1\n            j+=1\n            continue\n        else:\n            min_diff = min(min_diff, arr[i] - arr[j])\n            i+=1\n            j+=1\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    d={}\n    for i in range(0,n-1):\n        d[arr[i]]=arr[i]\n    for i in range(n-2,0,-1):\n        d[arr[i]]=arr[i]\n    d[0]=0\n    for i in range(1,n):\n        if arr[i]>arr[i-1]:\n            d[i]=arr[i-1]-arr[i]\n    print(d)\n    return(min(d.values()))\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # find the sum of all elements\n    s = sum(arr)\n    # store array as a sorted list\n    arr = sorted(arr)\n    # initialize the min_diff as the minimum sum difference \n    min_diff = s\n    # initialize the i and j variable for the difference of i and j values\n    i = 0\n    j = 0\n    # for every element in the array \n    while (i < len(arr) and j < len(arr)): \n        # if the difference of the i and j values is greater than the min_diff \n        # set min_diff to the difference \n        if (arr[i] - arr[j] > min_diff): \n            min_diff = arr[i] - arr[j]\n            # increment the i and j variable by one\n            i += 1\n            j += 1\n        # if the difference of the i and j values is less than the min_diff, \n        # reset the i and j variables and set min_diff as the new minimum \n        elif (arr[i] - arr[j] < min_diff): \n            min_diff = arr[i] - arr[j]\n            i += 1\n    # return min_diff \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    for i in range(1, n): \n        min_diff = min(min_diff, arr[i] - arr[i-1]) \n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = arr[0] - arr[1]\n    print(\"diff = \",diff)\n    for i in range(2,n):\n        if arr[i] - arr[i-2] > diff:\n            diff = arr[i] - arr[i-2]\n    print(\"diff = \",diff)\n    return diff\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = 0\n    for i in str:\n        if i.isdigit():\n            n += 1\n    return n\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    c = 0\n    for i in range(0,len(str)):\n        if str[i] == '0':\n            c+=1\n        else:\n            break\n    return c\n    \n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for char in str:\n        if char.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    a=0\n    for i in str:\n        a+=1\n    if a==0:\n        return 0\n    else:\n        return a"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in range(len(str)):\n        if str[i] == '0':\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - str.count('0')\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number = 0\n    for i in str:\n        if i.isdigit():\n            number += 1\n    print(number)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n=int(n)\n    if n<0:\n        print(\"Invalid Input\")\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n%2==0:\n        return n-1\n    \n    if n%2==1:\n        return n-1\n    \n    while n%4==0:\n        n=n/4\n        \n    return n-1\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    x = 0\n    while n % 2 == 0:\n        n = n // 2\n        x += 1\n    return x + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    elif n%2==0: \n        return is_polite(n-1)+is_polite(n-2)\n    elif n%2==1: \n        return is_polite(n-1)+is_polite(n-2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #Base Cases \n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    divisor = 1\n    while(divisor*divisor <= n):\n        if n%divisor == 0:\n            return True\n        divisor += 1\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #Base case 1:\n    if n <= 0: \n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1 or n == 2:\n        return 1\n        \n    \n    return is_polite(n-1) + is_polite(n-2)\n    \nprint(is_polite(0)"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return int(n/math.log(n,10))\ndef factorial(n): \n    '''\n    Write a function to find the factorial of a number. geeksforgeeks.org/find-factorial/\n    '''\n    return math.factorial(n)\ndef prime_factors(n): \n    '''\n    Write a function to find the prime factors of a number. geeksforgeeks.org/prime-factors/\n    '''\n    if n==1: \n        return []\n    elif n==2: \n        return [2]\n    elif n%2==0: \n        return prime_factors(n-1) + prime_factors(n-2)\n    else: \n        for i in range(3,int(math.sqrt(n))+1,2): \n            if n%i==0: \n                return prime_factors(n//i)+[i]\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 3: \n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_polite(n - 1)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 0\n    if n == 2: \n        return 1\n    return 2*is_polite(n-1)\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    out = []\n    if len(l1) <= 0:\n        return []\n    else:\n        for x in range(len(l1)):\n            if x > 0 and l1[x] == l1[x - 1] and x > 0:\n                out.append((l1[x], l1[x - 1]))\n            else:\n                out.append(l1[x])\n    return out\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = sorted(l1)\n    l2 = []\n    for i in range(len(l1)):\n        if i == 0 or l1[i]!= l1[i-1]:\n            l2.append((l1[i], l1[i]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        for j in range(i+1, len(l1)):\n            if l1[i] == l1[j] == l1[j+1]:\n                l.append([l1[i], l1[j], l1[j+1]])\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1) - 1):\n        if l1[i] > l1[i+1]:\n            if l1[i] not in l2:\n                l2.append(l1[i])\n        else:\n            continue\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    out = []\n    for i in range(n):\n        for j in range(i, n):\n            if l1[i] == l1[j]:\n                out.append([l1[i], l1[j]])\n    return out\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    i = 0\n    j = 0\n    l2 = []\n    l3 = []\n    while i < len(l1):\n        j = 0\n        while j < len(l1):\n            if l1[i] == l1[j] and l1[i] == l1[j+1]:\n                l3.append((l1[i], l1[j]))\n            j += 1\n        i += 1\n    return l3\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s1 = []\n    for x in range(len(l1)-1):\n        s1.append((l1[x],l1[x+1]))\n    return s1\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Write your code here\n    pairs = []\n    curr = 0\n    while curr < len(l1):\n        if l1[curr] == l1[curr + 1]:\n            pairs.append([l1[curr], l1[curr + 1]])\n            curr += 2\n        else:\n            curr += 1\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    num_list = []\n    num = []\n    for i in range(len(l1)-1):\n        num.append((l1[i],l1[i+1]))\n    for x in num:\n        num_list.append(x)\n    return num_list\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    c = 0\n    for i in arr:\n        if sum == i:\n            c += 1\n    return c\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # initializing array\n    arr = sorted(arr)\n    if sum < arr[0]:\n        return 0\n    elif sum == arr[0]:\n        return 1\n    else:\n        return len(arr)\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = []\n    pair = []\n    for i in arr:\n        for j in arr:\n            if i + j == sum:\n                pairs.append([i, j])\n            elif i + j < sum:\n                pair.append([i, j])\n    return pairs, pair\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    a = 0\n    if sum in arr:\n        a += 1\n        for i in range(len(arr)):\n            if sum == arr[i]:\n                a += 1\n        return a\n    else:\n        return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if sum == arr[i] + arr[j]:\n                pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    # make list with 0's\n    l = []\n    for i in range(len(arr)):\n        if sum == arr[i] or arr[i] == 0:\n            l.append(arr[i])\n        else:\n            continue\n    # pair is made\n    for i in range(len(l)):\n        if (l[i] + l[i+1]) == sum:\n            count += 1\n    # return\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=0\n    for i in range(len(li1)):\n        diff+=abs(li1[i]-li2[i])\n    return diff\n    \n    \ndef main():\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    print(\"Difference between the two lists is:\")\n    print(Diff(li1,li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    difference=[]\n    for i in range(len(li1)):\n        difference.append(li1[i] - li2[i])\n    return difference"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = list(set(li1) - set(li2))\n    print('Difference of two lists:'+ str(diff))\n    \ndef main():\n    '''\n    Write a python function to get the sum of the elements in a list.\n    '''\n    li = [5,5,5,5,5,5,5]\n    Sum = 0\n    for x in li:\n        Sum += x\n    print(Sum)\n    \n    \n    \n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1 = li1.copy()\n    li2 = li2.copy()\n    return li1-li2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)!= len(li2):\n        return (\"The lists are not equal!\")\n    else:\n        new = []\n        for i in range(len(li1)):\n            if li1[i]!= li2[i]:\n                new.append(li1[i])\n        return(new)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return len(li1)-len(li2)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diffs=[]\n    for i in range(len(li1)):\n        diffs.append(li1[i]-li2[i])\n    return diffs\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l1=len(li1)\n    l2=len(li2)\n    \n    if l1<l2:\n        li=li2\n        return li\n    elif l2<l1:\n        li=li1\n        return li\n    else:\n        print(\"Elements are equal\")\n        \n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    res=[]\n    for i in range(0,len(li1)):\n        res.append(li1[i] - li2[i])\n    return res\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    return n ** 3\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return (n*(n+1))//2 \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n,0,-2):\n        sum = sum + ((i**2)**2)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n<=1 :\n        return 0\n    \n    else : \n        return n*(n+1)/2\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # take input from user\n    num = int(input(\"enter an odd natural number:\"))\n    # perform arithmetic calculation\n    if num % 2 == 0 :\n        sum = (num ** 4) + (num ** 2)\n        print(sum)\n    else :\n        print(\"n is invalid\")\n    # call function\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        sum += i**4\n    print(sum)\n    \nodd_num_sum(1)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # write your code here\n    print(n)\n    \n    if(n%2 == 0):\n        return odd_num_sum(n//2)\n    else:\n        return n*n+1\n        \n        \n    \nprint(odd_num_sum(10))\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(0,n+1):\n        sum=sum+4**i\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    print('The sum of fourth power of first n odd numbers is : ', end=\"\")\n    sum_of_fourth_power = 0\n    for i in range(1, n+1) :\n        if (i%2 == 0) :\n            sum_of_fourth_power += i**4\n    print(sum_of_fourth_power)\n    return sum_of_fourth_power\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Let n be the number to be summed\n    # e.g. n = 3\n    # Sum of fourth power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power of the third power o"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp)==0 or exp[0]=='(':\n        return False\n    elif exp[0]=='{':\n        return check_expression(exp[1:])\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for c in exp:\n        if c in '(':\n            stack.append(c)\n        elif c in ')':\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= '(':\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    visited = set()\n    answer = True\n    for i in exp:\n        if i == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return answer\n        elif i == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return answer\n        elif i == '*':\n            if stack and stack[-1] == '*':\n                stack.pop()\n            else:\n                return answer\n        elif i == '+':\n            if stack and stack[-1] == '+':\n                stack.pop()\n            else:\n                return answer\n        elif i == '<':\n            if stack and stack[-1] == '<':\n                stack.pop()\n            else:\n                return answer\n        elif i == '>':\n            if stack and stack[-1] == '>':\n                stack.pop()\n            else:\n                return answer\n        elif i == '.':\n            if stack and stack[-1] == '.':\n                stack.pop()\n            else:\n                return answer\n        else:\n            return answer\n        visited.add(i)\n    if len(stack) > 0:\n        return answer\n    return answer\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if '(' in exp and ')' not in exp:\n        return 'balanced'\n    if '[' in exp and ']' not in exp:\n        return 'balanced'\n    return 'not balanced'\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    def balanced(exp):\n        \"\"\"\n        returns if the given expression is balanced or not\n        \"\"\"\n        stack = deque()\n        stack.append(exp)\n        brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n        while len(stack) > 0:\n            top = stack.pop()\n            if brackets[top] == brackets[exp[-1]]:\n                stack.append(top)\n            else:\n                return False\n        return True\n    \n    def return_brackets(exp):\n        \"\"\"\n        returns a dictionary containing the braces that need to be closed around\n        \"\"\"\n        brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n        brackets_dict = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n        stack = deque()\n        for exp in exp:\n            stack.append(exp)\n            if exp in brackets:\n                if brackets[exp] == brackets[stack.pop()]:\n                    brackets_dict[stack.pop()] = brackets[exp]\n                    continue\n                else:\n                    return None\n        return brackets_dict\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    d = deque(exp)\n    visited = set()\n    for i in range(len(d)):\n        if d[i] in visited:\n            return False\n        visited.add(d[i])\n        if d[i] == '(':\n            left = d.popleft()\n            d.append(left)\n        elif d[i] == ')':\n            right = d.pop()\n            if right == '(':\n                break\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    global count\n    global stack\n    global pre_stack\n    global post_stack\n    global stack_pointer\n    global pre_stack_pointer\n    global post_stack_pointer\n    global stack_pointer_length\n    global stack_pointer_lenght\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == ')':\n            if not stack:\n                return False\n            elif stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        elif i == ']':\n            if not stack:\n                return False\n            elif stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n        elif i == '}':\n            if not stack:\n                return False\n            elif stack and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(i)\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    my_list = []\n    for i in exp:\n        if i == '(':\n            my_list.append(i)\n        else:\n            if len(my_list) == 0:\n                return False\n            else:\n                my_list.pop()\n    if len(my_list) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    stack.append(exp)\n    count = 0\n    for i in range(len(exp)):\n        if exp[i] == '(' or exp[i] == '{' or exp[i] == '[':\n            stack.append(exp[i])\n        else:\n            if len(stack) > 0:\n                if stack[-1] == '(' or stack[-1] == '{' or stack[-1] == '[':\n                    stack.pop()\n                    count += 1\n            else:\n                return False\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # TODO: Write your code here\n    words = test_str.split()\n    len_words = 0\n    for i in range(len(words)):\n        word = words[i]\n        len_words += len(word)\n    if len_words < K:\n        return \"The string is too short to remove all the words with k length.\"\n    else:\n        test_str = test_str.replace(words[len_words - K:], \"\")\n        return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Step 1: remove all the word and all the word with k length.\n    # Step 2: loop through all the words in the given string and\n    # remove all the word with k length.\n    # Step 3: return the resultant string.\n    return''.join(word for word in test_str.split() if len(word) == K)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    output = \"\"\n    for word in test_str.split():\n        if len(word) < K:\n            output += word + \" \"\n        else:\n            output += word[:K] + \" \"\n    return output\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    s = ''.join([i for i in test_str if len(i) == K])\n    return s"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # 1. initialize the search_string \n    search_string = ''\n    # 2. initialize the result_string \n    result_string = ''\n    # 3. initialize the count \n    count = 0\n    # 4. iterate through the string \n    for i in range(len(test_str)):\n        # check if the length of the word \n        # is less than or equal to the k \n        if len(test_str[i]) <= K:\n            # append the word to the result_string \n            result_string += test_str[i]\n        # if the length of the word is greater than or equal to the k \n        else:\n            # if it is, remove the word from search_string \n            search_string += test_str[i][:K]\n            # if the length of the word is less than or equal to the k \n            if len(search_string) <= K:\n                # append the word to the result_string \n                result_string += search_string\n                # count the number of word found\n                count += 1\n                # if the length of the word is greater than or equal to the k \n                if len(search_string) >= K:\n                    # delete the search_string \n                    search_string = search_string[:K]\n    # 5. return the result_string \n    return result_string, count\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # check if string is empty\n    if len(test_str) < K:\n        return ''\n    \n    # create a temporary variable\n    temp = test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) < K:\n        return \"Enter a valid string\"\n    else:\n        # Note: this is a naive solution. Let's do it iteratively\n        # using a hash table to keep track of the seen words.\n        seen_words = {word: 0 for word in test_str}\n        # This is the initial state.\n        # We add a word to the table with a 1 added to its value.\n        # This guarantees that all of the words in the string\n        # appear in the table once\n        seen_words[test_str[0]] = 1\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    assert 0<=K<len(test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) <= K:\n        return ''\n    k = K - len(test_str)\n    i = 0\n    result = ''\n    while i < len(test_str):\n        if len(test_str[i:i+k])!= k:\n            result += test_str[i]\n            i += 1\n        else:\n            result += test_str[i]\n            i += 1\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    i = 0\n    l = len(test_str)\n    while i < l:\n        if test_str[i:i+K] == test_str:\n            test_str = test_str[:i] + test_str[i+K:]\n        i += 1\n    return test_str"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    m = re.search(pattern,text)\n    if m == None:\n        return None\n    return m.start(),m.end()\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    sub = re.findall(pattern, text)\n    for i in range(len(sub)):\n        if sub[i][0] in pattern:\n            if i < len(sub)-1:\n                if sub[i][0] == sub[i+1][0]:\n                    return i\n    return None\n    \ndef find_all_substring(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return a list of the results.\n    '''\n    sub = re.findall(pattern, text)\n    sub = [i for i in sub if i!= None]\n    return sub\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern)\n    #print(regex.findall(text))\n    matches = regex.findall(text)\n    #print(matches)\n    if len(matches) == 0:\n        return None\n    elif len(matches) > 1:\n        return None\n    else:\n        return matches[0]\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    text = text.lower()\n    if pattern=='':\n        return\n    \n    regex = re.compile(pattern)\n    match = regex.findall(text)\n    if len(match) == 0:\n        return\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_search = re.search(pattern,text)\n    if pattern_search is not None:\n        start = pattern_search.start()\n        end = pattern_search.end()\n        return start,end\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    def search(str, pat):\n        i = 0\n        j = len(pat)\n        #print(str[i:j], pat[i:j])\n        for x in range(len(str)-i):\n            if (str[x:x+j] == pat):\n                return x,x+j-1\n    #print(search(text,pattern))\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #pattern = re.compile('[A-Za-z0-9]') #re.compile('[A-Za-z0-9]+')\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(0,len(text)-len(pattern.pattern)+1):\n        if pattern.search(text,i,i+len(pattern.pattern)):\n            result.append(text[i:i+len(pattern.pattern)])\n    return result\ndef occurance_substring_v2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-1,len(text)-len(pattern)+1):\n        if pattern.search(text,i,i+len(pattern)):\n            result.append(text[i:i+len(pattern)])\n    return result\ndef occurance_substring_v3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(0,len(pattern)-2):\n        if pattern.search(text,i,i+2):\n            result.append(text[i:i+2])\n    for i in range(len(pattern)-3,len(text)-2):\n        if pattern.search(text,i,i+3):\n            result.append(text[i:i+3])\n    return result\ndef occurance_substring_v4(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-4,len(text)-4):\n        if pattern.search(text,i,i+4):\n            result.append(text[i:i+4])\n    return result\ndef occurance_substring_v5(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-5,len(text)-5):\n        if pattern.search(text,i,i+5):\n            result.append(text[i:i+5])\n    return result\ndef occurance_substring_v6(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-6,len(text)-6):\n        if pattern.search(text,i,i+6):\n            result.append(text[i:i+6])\n    return result\ndef occurance_substring_v7(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-7,len(text)-7):\n        if pattern.search(text,i,i+7):\n            result.append(text[i:i+7])\n    return result\ndef occurance_substring_v8(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-8,len(text)-8):\n        if pattern.search(text,i,i+8):\n            result.append(text[i:i+8])\n    return result\ndef occurance_substring_v9(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-9,len(text)-9):\n        if pattern.search(text,i,i+9):\n            result.append(text[i:i+9])\n    return result\ndef occurance_substring_v10(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-10,len(text)-10):\n        if pattern.search(text,i,i+10):\n            result.append(text[i:i+10])\n    return result\ndef occurance_substring_v11(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-11,len(text)-11):\n        if pattern.search(text,i,i+11):\n            result.append(text[i:i+11])\n    return result\ndef occurance_substring_v12(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-12,len(text)-12):\n        if pattern.search(text,i,i+12):\n            result.append(text[i:i+12])\n    return result\ndef occurance_substring_v13(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-13,len(text)-13):\n        if pattern.search(text,i,i+13):\n            result.append(text[i:i+13])\n    return result\ndef occurance_substring_v14(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-14,len(text)-14):\n        if pattern.search(text,i,i+14):\n            result.append(text[i:i+14])\n    return result\ndef occurance_substring_v15(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-15,len(text)-15):\n        if pattern.search(text,i,i+15):\n            result.append(text[i:i+15])\n    return result\ndef occurance_substring_v16(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern.search(text):\n        return None\n    result=[]\n    for i in range(len(pattern)-16,len(text)-16):\n        if pattern.search(text,i,i+16):\n            result.append(text[i:i+16])\n    return result\ndef occurance_substrin"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos = 0\n    for idx, char in enumerate(pattern):\n        if char in text[pos:pos+len(char)]:\n            pos = text.index(char, pos+len(char))\n        else:\n            return (pos, idx+1)\n    return (None, None)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    i = 0\n    m = 0\n    l = len(text)\n    for i in range(0,l):\n        if text[i:i+len(pattern)] == pattern:\n            m = i\n            break\n        if m == len(pattern):\n            return None\n    return m,m\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Initialize a variables to store the start and end indexes\n    start_index = 0\n    end_index = -1\n    \n    # iterate over the string, starting at the beginning of the string\n    for i in range(len(text)):\n        # if the current position is a start position, then check if the pattern is a substring of the current position\n        if i >= start_index:\n            if pattern == text[start_index:i] :\n                end_index = i\n                break\n        # if the current position is a stop position, then check if the pattern is a substring of the current position\n        elif i < len(text)-1:\n            if pattern == text[i+1:end_index+1]:\n                start_index = i+1\n                break\n        # if there is no substring, return None as None\n        else:\n            return None\n    return end_index-start_index+1\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (nums[i] % 2!= 0):\n            return False\n    return True\n    "
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Method 1\n    # if len(nums) % 2 == 0:\n    #     for i in range(len(nums)):\n    #         if nums[i]%2:\n    #             return False\n    # return True\n    # else:\n    #     for i in range(len(nums)):\n    #         if nums[i]%2 == 1:\n    #             return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(0, len(nums)):\n        if nums[index] % 2 == 0:\n            print(f\"This is index {index}\")\n    return nums\nnums = odd_position(nums)\nprint(nums)"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return [x for x in nums if x % 2!= 0]\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_numbers = []\n    for i in range(len(nums)):\n        if (nums[i] % 2)!= 0:\n            odd_numbers.append(nums[i])\n    return odd_numbers\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_numbers = []\n    for i in range(0, len(nums), 2):\n        if (nums[i] % 2) == 0:\n            odd_numbers.append(nums[i])\n    return odd_numbers\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2==1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odds = []\n    for index, value in enumerate(nums):\n        if index % 2 == 0:\n            odds.append(value)\n    print(odds)\n    return odds\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"AEIOUaeiou\"\n    vowels_count = 0\n    for i in test_str:\n        if i in vowels:\n            vowels_count += 1\n    print(vowels_count)\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_count = 0\n    for char in test_str:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiouAEIOU':\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    char_count = 0\n    for i in range(0, len(test_str) - 1):\n        if test_str[i] in \"aeiouAEIOU\":\n            if test_str[i + 1] in \"aeiouAEIOU\":\n                char_count += 1\n    return char_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for letter in test_str:\n        if letter.lower() in 'aeiou':\n            if letter.lower() in 'aeiou':\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].isupper() and test_str[i+1].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char.lower() in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = ['A', 'E', 'I', 'O', 'U']\n    char_count = {}\n    \n    for char in test_str:\n        if char in vowels:\n            char_count[char] = char_count.get(char, 0) + 1\n    \n    for char, count in char_count.items():\n        if count >= 2:\n            print(char, count)\n            \n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for letter in test_str:\n        if letter in ['a','e','i','o','u']:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # init\n    vowels_count = 0\n    \n    # get rid of all letters not in the string\n    test_str = test_str.lower()\n    \n    # get rid of all numbers\n    for letter in test_str:\n        if letter.isnumeric():\n            continue\n        \n        # if letter is a vowel\n        if letter in 'aeiou':\n            vowels_count += 1\n            \n    return vowels_count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr_new = []\n    \n    for i in arr:\n        if i not in arr_new:\n            arr_new.append(i)\n    return(sum(arr_new))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i!= i:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = sum(set(arr))\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (arr[i]!= arr[i]):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count_dict = {}\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    sum_list = 0\n    for element in count_dict:\n        sum_list += count_dict[element]\n    return sum_list\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    d = collections.defaultdict(list)\n    for i in list1:\n        for j in d.keys():\n            if i not in d[j]:\n                d[j].append(i)\n        list2.append(list(d.values()))\n        d.clear()\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for i, elem in enumerate(list1):\n        if elem not in result:\n            result.append(elem)\n            if i > 0 and elem == result[i-1]:\n                result.append(result[i-1])\n            if i < len(list1) - 1:\n                result.append(result[i+1])\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # E.g. [1, 1, 1, 1, 1, 1, 1, 1, 1] -> [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # E.g. [1, 1, 1, 1, 1, 1, 1, 1, 1] -> [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # E.g. [1, 1, 1, 1, 1, 1, 1, 1, 1] -> [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # E.g. [1, 1, 1, 1, 1, 1, 1, 1, 1] -> [1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # In this case, we are in order to perform a stack merge. We are using two stacks. The first stack contains elements with different values. The second stack contains elements with identical values, so we are going to pack them in the opposite order.\n    # We then return the resulting list of sublists.\n    # Time complexity of this function: O(n)\n    # Space Complexity of this function: O(n)\n    #\n    # This function takes the input list and returns the packed sublist.\n    # If the input list is empty, return an empty list.\n    # If the input list is not empty, return the first element of the list and then push the second element of the list into the second stack.\n    #\n    # Example\n    #\n    # Input:  [1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,4,5]\n    # Output: [1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,4,5]\n    #\n    # Note: All the list elements are unique.\n    #\n    if not list1:\n        return []\n    # Stack for storing consecutive duplicates\n    stack = []\n    # Stack for storing consecutive duplicates\n    duplicate_stack = []\n    # Stack for storing the first element\n    first = []\n    # Dictionary to store unique values.\n    unique = {}\n    # Dictionary to store unique values\n    duplicate_dict = {}\n    #\n    # push duplicate_stack to the first stack\n    stack.append(list1[0])\n    # push duplicate_dict to the second stack\n    duplicate_dict[list1[0]] = list1[1:]\n    #\n    for i in range(len(list1)-1):\n        # If the current element is not the first element\n        if list1[i] not in unique:\n            unique[list1[i]] = 1\n            # Push it into the first stack\n            first.append(list1[i])\n        else:\n            unique[list1[i]] = 1 + unique[list1[i]]\n            # Push it into the second stack\n            stack.append(list1[i])\n            # If the current element is the duplicate element, we want to push it into the duplicate_stack\n            if list1[i] in duplicate_dict:\n                # Get the duplicate element\n                duplicate_element = duplicate_dict[list1[i]]\n                # If the list contains the duplicate element, we want to push it into the duplicate_stack\n                if len(duplicate_element) > 1:\n                    duplicate_stack.append(duplicate_element[1])\n                    # Duplicate element is unique, so we do not need to put it in the second stack\n                    duplicate_dict[duplicate_element[1]] = duplicate_element\n                # Otherwise, we need to put it in the first stack\n                else:\n                    first.append(duplicate_element)\n    #\n    # We return the list of sublists.\n    #\n    return first + stack\n    #\n    # Code here\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    consecutive_duplicates = []\n    i = 1\n    while i <= len(list1):\n        for g in list1:\n            if g!= list1[i - 1]:\n                consecutive_duplicates.append([list1[i - 1], g])\n                i += 1\n                break\n    return consecutive_duplicates\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublists = []\n    last = 0\n    for i in range(len(list1)):\n        if list1[i] == list1[last]:\n            sublists[-1].append(list1[i])\n        else:\n            sublists.append([list1[last]])\n            last += 1\n    return sublists\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(zip(*g))[0] for k, g in groupby(enumerate(list1), key=lambda t: t[0])]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Write your code here\n    str1 = ''.join(list1)\n    str2 = ''.join(list(set(str1)))\n    new_list = []\n    for i in range(len(str2)):\n        if str2[i]!= str1[i]:\n            new_list.append(str1[i])\n    new_list = new_list[1:]\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    padded = [x for x in list1 if x not in list1[x:x+2]]\n    return padded\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        element = list1[i]\n        count = 0\n        while element in list1[i:]:\n            if element in result:\n                count += 1\n            else:\n                result.append(element)\n            element = list1[i]\n            count += 1\n            if count == 2:\n                break\n        if count == 0:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #print(list1)\n    dict1 = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist not in dict1:\n            dict1[sublist] = 1\n        else:\n            dict1[sublist] += 1\n    #print(dict1)\n    return dict1\n    \ndef unique_sublists_2(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #print(list1)\n    sublist_list = []\n    for sublist in list1:\n        sublist = tuple(sublist)\n        #print(sublist)\n        sublist_list.append(sublist)\n    #print(sublist_list)\n    #print(len(sublist_list))\n    if len(sublist_list) == 0:\n        return None\n    else:\n        dict1 = {}\n        for sublist in sublist_list:\n            sublist = tuple(sublist)\n            if sublist not in dict1:\n                dict1[sublist] = 1\n            else:\n                dict1[sublist] += 1\n        return dict1\n    "
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if len(list1) == 0:\n        return {}\n    else:\n        n = len(list1)\n        return {list1[i][0]:len(list1[i]) for i in range(0,n)}\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return collections.Counter(tuple(list1) for list1 in itertools.groupby(sorted(list(list1))))\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if len(list1) == 0:\n        return {}\n    else:\n        numbers = {}\n        for i in list1:\n            i = tuple(i)\n            if i in numbers:\n                numbers[i] += 1\n            else:\n                numbers[i] = 1\n        return numbers\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    num_dic = {}\n    for element in list1:\n        if element in num_dic:\n            num_dic[element] += 1\n        else:\n            num_dic[element] = 1\n    return num_dic\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists = {}\n    for i in list1:\n        if i not in unique_sublists:\n            unique_sublists[i] = 1\n        else:\n            unique_sublists[i] += 1\n    return unique_sublists\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sub_dict = {}\n    \n    for i in list1:\n        if type(i) == tuple:\n            sub_dict[tuple(i)] = sub_dict.get(tuple(i), 0) + 1\n        else:\n            sub_dict[i] = sub_dict.get(i, 0) + 1\n    return sub_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if len(list1) > 0:\n        t_list = []\n        x = 0\n        # print(list1)\n        for i in range(len(list1)):\n            # print(list1[i])\n            t_list.append(tuple(list1[i]))\n            x += 1\n        return x\n    else:\n        return 0\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Your code here\n    count = {}\n    for i in range(len(list1)):\n        if list1[i] in count:\n            count[list1[i]] += 1\n        else:\n            count[list1[i]] = 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Using a loop to check each element in the list and if they sums to the current list, add the tuple to the list of tuples\n    # In the end, return the list of tuples.\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # your code here\n    comb_list = []\n    for i in range(len(test_list)):\n        if test_list[i] not in comb_list:\n            comb_list.append(test_list[i])\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = []\n    for i in range(1,len(test_list)+1):\n        for j in combinations(test_list,i):\n            comb_list.append(list(j))\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list.sort()\n    if len(test_list) == 0:\n        return []\n    else:\n        return [item for sublist in combinations(test_list, 2) for item in sublist]\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    combs = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            combs.append(j)\n    return combs\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for combination in combinations(test_list, 2):\n        if sum(combination)!= 0:\n            combinations_list.append(list(combination))\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 0:\n        return []\n    else:\n        # Count the number of tuples\n        n = len(test_list)\n        # Define the initial combination\n        initial_combinations = []\n        # Start with the first combination\n        for i in range(n):\n            # Add the tuple to the initial combination list\n            initial_combinations.append(test_list[i])\n        # Now add all the tuples till the last combination\n        for j in range(n,0,-1):\n            # Add the tuples in reverse order\n            for k in range(j,0,-1):\n                # If the index is equal to the first index and the value of the tuple is equal to the last element of the list\n                # Add the element of the tuple\n                if (k == j and test_list[j] == test_list[k]):\n                    initial_combinations.append(test_list[k])\n                # If the index is equal to the last index\n                elif k == 0 and test_list[j] == test_list[k]:\n                    initial_combinations.append(test_list[k])\n        # Return the initial combination list\n        return initial_combinations\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_sums_with_tuples=[]\n    comb_sums=[]\n    \n    # iterate through all combinations of sums\n    for i in test_list:\n        comb_sums.append(i)\n        comb_sums_with_tuples.append(tuple(comb_sums))\n        comb_sums.remove(i)\n        \n    return comb_sums_with_tuples\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = test_list + [0]\n    # print(test_list)\n    def next_sum(x, y, combi_list):\n        # print(combi_list)\n        if x == y:\n            return combi_list\n        else:\n            combi_list.append((x, y))\n            next_sum(x, y, combi_list)\n            return next_sum(x, y, combi_list)\n    # print(next_sum(0, 0, []))\n    return next_sum(0, 0, [])\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 0:\n        return []\n    result = []\n    for i in test_list:\n        for k in combinations(test_list,i):\n            result.append(tuple(k))\n    return result\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 0) : \n        return (0)\n    for i in range(2, math.floor(math.sqrt(n))) : \n        if (n % i == 0) : \n            return (n/i)\n    return (0)"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1) : \n        if n % i == 0 :\n            divisors.append(i) \n    if len(divisors) > 2 :\n        return False \n    else :\n        return True \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=2\n    while i<math.floor(math.sqrt(n))+1:\n        if (n%i==0):\n            if (n/i==i):\n                return False\n            else:\n                return True\n        i=i+1\n    else:\n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    #num = n*(n+1)/2\n    num = n\n    count = 0\n    while (num > 1):\n        if (num % 2 == 0):\n            count += 1\n        num = num//2\n    if (count == 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 2): return False\n    if (n%2 == 0): return False\n    for i in range(3, int(math.sqrt(n))+1):\n        if (n%i == 0): return False\n    return True \n    \ndef is_prime(n) : \n    '''\n    Write a python function that returns whether a number is prime or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-56.php\n    '''\n    if n < 2 : \n        return False\n    if n == 2 : \n        return True\n    if n % 2 == 0 or n < 20 : \n        return False\n    \n    if n == 3 : \n        return True\n    if n % 3 == 0 or n < 19 : \n        return False\n    \n    i = 5\n    while i <= math.sqrt(n) : \n        if n % i == 0 or n % (i + 2) == 0 : \n            return False\n        i += 6\n    return True \n    \ndef find_smallest_primes(n) : \n    '''\n    Write a python function that returns the smallest positive prime number greater than or equal to n.\n    https://www.w3resource.com/python-exercises/basic/python-basic-3-exercise-55.php\n    '''\n    i = 2\n    while i < n : \n        if is_prime(i) and is_prime(n-i) : \n            return n-i\n        i += 1\n    return None\n    \ndef find_largest_prime_factors(n) : \n    '''\n    Write a python function that returns the largest positive prime factor of a number n.\n    https://www.w3resource.com/python-exercises/basic/python-basic-4-exercise-12.php\n    '''\n    i = 2\n    while i*i <= n : \n        if count_divisors(i*i) == False : \n            return None\n        i += 1\n    return i\n    \ndef is_prime_factor(n, p) : \n    '''\n    Write a python function that checks whether a number is prime or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-6.php\n    '''\n    i = 1\n    if n==1 : return False\n    while (i<=p-1) : \n        if n%i == 0 : \n            return False\n        i+=1\n    return True \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=2\n    while i*i <= n :\n        if n % i == 0 :\n            return False\n        else :\n            i+=1\n    return True \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors = divisors + 1\n    if divisors == 2 :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n==0 : \n        return 0\n    \n    if n==1 : \n        return 1\n    \n    count_divisors = 0\n    i = 2\n    while i <= math.sqrt(n) :\n        if n%i == 0 : \n            count_divisors += 1\n            i+=1\n        else : \n            break\n    if count_divisors % 2 == 0 : \n        return 1\n    else : \n        return 0\n    \n    \n    \ndef f(x,a,b,c,d,e,f):\n    return ((x-a)/(b-a))*(f(x,c,d,e,f) - f(x,a,b,c,d,e,f))\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    def count_divisors(n) :\n        count_divisors_aux = 0\n        for i in range(1,int(math.sqrt(n))) :\n            if (n % i == 0) :\n                count_divisors_aux += 1\n        if (n!= count_divisors_aux) :\n            return False\n        else :\n            return True\n    return count_divisors(n)\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n        \ndef prime_factor_list(n):\n    '''\n    Given an integer n, generate all prime factors of n. \n    '''\n    x = 2\n    while x < math.sqrt(n):\n        if (n % x) == 0:\n            y = x\n            while y < math.sqrt(n):\n                if (n % y) == 0:\n                    z = y\n                    while z < math.sqrt(n):\n                        if (n % z) == 0:\n                            if count_divisors(z) == True and count_divisors(y) == True:\n                                print (x,y,z)\n                                return x*y*z\n                z = z+1\n            return \"no prime factors\"\n        x = x+1\n    return \"no prime factors\"\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    length = len(arr)\n    while(length>=2):\n        for i in range(length-1):\n            total += arr[i]\n        total += arr[length-2]\n        length -= 1\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for index in range(len(arr)):\n        if index%2 == 0:\n            odd_sum += arr[index]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(0,len(arr)):\n        if i%2==0:\n            s = s+arr[i]\n    return s"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sum += arr[j]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([arr[i] for i in range(len(arr)) if i % 2 == 1])\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(0, n, 2):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    def odd(arr, i, j):\n        while(i < j):\n            if arr[i] % 2 == 1:\n                arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        return arr\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)<=2:\n        return sum(arr)\n    else:\n        odds_sum = 0\n        odds_length = [i for i in range(len(arr)) if i%2==0]\n        for odd_length in odds_length:\n            odds_sum += arr[odd_length]\n        return odds_sum"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] % 2 == 1:\n            if i % 2 == 0:\n                odd_sum = odd_sum + arr[i]\n                i += 1\n            else:\n                odd_sum = odd_sum + arr[i]\n                i += 1\n        i += 1\n    return odd_sum\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r < 0:\n        r = 0\n    elif r > 255:\n        r = 255\n    if g < 0:\n        g = 0\n    elif g > 255:\n        g = 255\n    if b < 0:\n        b = 0\n    elif b > 255:\n        b = 255\n    h = 0\n    if r * 0.299 + g * 0.587 + b * 0.114 > 255:\n        h = 255\n    elif r * 0.299 + g * 0.587 + b * 0.114 < 0:\n        h = 0\n    s = 0\n    if r * 0.587 + g * 0.114 > 255:\n        s = 255\n    elif r * 0.587 + g * 0.114 < 0:\n        s = 0\n    v = 0\n    if r * 0.299 + g * 0.587 < 0:\n        v = 0\n    elif r * 0.299 + g * 0.587 + b * 0.114 > 255:\n        v = 255\n    elif r * 0.299 + g * 0.587 + b * 0.114 > 0:\n        v = 255\n    h = h % 180\n    if h > 360:\n        h = h % 360\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    h = 0\n    \n    # CIE 1976 hue range\n    # value range from 0 to 360\n    # 0 = red\n    # 360 = 360\n    # green\n    # 0 = green\n    # 360 = 360\n    \n    r = int(r)\n    g = int(g)\n    b = int(b)\n    \n    max_val = max(r, g, b)\n    \n    # hue value range from 0 to 360\n    # 0 = red\n    # 360 = 360\n    # saturation\n    # 0 = saturation\n    # 360 = 360\n    \n    if max_val == r:\n        if g < 0:\n            h = 360 - (360 * abs(g))\n        elif g > 0:\n            h = 360 - g\n        elif b < 0:\n            h = 360 - (360 * abs(b))\n        elif b > 0:\n            h = 360 - b\n    \n    # saturation\n    # 0 = red\n    # 360 = 360\n    # value range from 0 to 1\n    # 0 = value\n    # 1 = value\n    #\n    # hue value range from 0 to 360\n    # 0 = red\n    # 360 = 360\n    # saturation\n    # 0 = saturation\n    # 360 = 360\n    \n    if max_val == g:\n        if b < 0:\n            h = 360 - (360 * abs(b))\n        elif b > 0:\n            h = 360 - b\n    \n    if max_val == b:\n        if r < 0:\n            h = 360 - (360 * abs(r))\n        elif r > 0:\n            h = 360 - r\n    \n    # saturation\n    # 0 = red\n    # 360 = 360\n    # value range from 0 to 1\n    # 0 = value\n    # 1 = value\n    #\n    # hue value range from 0 to 360\n    # 0 = red\n    # 360 = 360\n    # saturation\n    # 0 = saturation\n    # 360 = 360\n    \n    return h, s, v\n    "
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    if max_val == min_val:\n        return [0, 0, 0]\n    else:\n        r_prime = (r - min_val)/(max_val - min_val)\n        g_prime = (g - min_val)/(max_val - min_val)\n        b_prime = (b - min_val)/(max_val - min_val)\n        return [int(r_prime), int(g_prime), int(b_prime)]\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #define color ranges\n    #hue range\n    #saturation range\n    #value range\n    #range of values in range(0,180)\n    #print(r, g, b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # convert to 0,1\n    r = r * 255\n    g = g * 255\n    b = b * 255\n    \n    # hue saturation value\n    h = 0\n    s = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == 0:\n        return 0,0,0\n    if g == 0:\n        return 0,255,0\n    if b == 0:\n        return 255,0,0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r*255\n    g = g*255\n    b = b*255\n    \n    h = int(255 * (r + g + b) / (255 * 3))\n    s = int(255 * (r - g - b) / (255 * 3))\n    v = int(255 * (r * g - b * g + 255) / (255 * 3))\n    \n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # r, g, b = color.rgb_to_rgb(r, g, b)\n    # # https://stackoverflow.com/questions/47233033/convert-rgb-to-hsv-value-in-python\n    # h = int(0.2989 * r + 0.5870 * g + 0.1140 * b)\n    # s = int(0.2899 * r + 0.5870 * g + 0.1140 * b)\n    # v = int(0.2899 * r + 0.5870 * g + 0.1140 * b)\n    # print(r, g, b)\n    # print(h, s, v)\n    # return hsv_to_rgb(h, s, v)\n    return [0, 0, 0]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd=0\n    even=0\n    for i in list1:\n        if(i%2==0):\n            even+=i\n        else:\n            odd+=i\n    print(\"The product of first even and odd numbers is\",even*odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i%2 == 0:\n            product *= i\n        else:\n            product *= i\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum = 1\n    for num in list1:\n        if num % 2 == 0:\n            sum = sum * num\n        else:\n            sum = sum * num\n    return sum\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    total = 1\n    for i in list1:\n        total *= i\n    print(total)\n    return total\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum_even = 0\n    sum_odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            sum_even += i\n        else:\n            sum_odd += i\n    return sum_even * sum_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd=[]\n    even=[]\n    product=[]\n    for i in list1:\n        if i%2==0:\n            odd.append(i)\n        else:\n            even.append(i)\n    product.append(len(odd))\n    product.append(len(even))\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd_number = []\n    even_number = []\n    product = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_number.append(i)\n        else:\n            odd_number.append(i)\n    for i in range(len(odd_number)):\n        product = product * odd_number[i]\n    for i in range(len(even_number)):\n        product = product * even_number[i]\n    return product\n    \nif __name__ == '__main__':\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(mul_even_odd(l))\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = []\n    for item in list1:\n        if item % 2 == 0:\n            even_odd.append(item)\n        else:\n            even_odd.append(item*2)\n    return even_odd\n        \n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        product *= i\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    l1 = []\n    for i in list1:\n        if i % 2 == 0:\n            l1.append(i)\n        else:\n            l1.append(i+1)\n    return l1\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    return string == string[::-1]\n    \ndef palindrome_check(list1):\n    '''\n    Write a function to check if a given list of strings is a palindrome or not.\n    '''\n    for i in list1:\n        if is_palindrome(i) == True:\n            return True\n        return False\n    return False\n    \ndef remove_extra_spaces(string):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    if'' in string:\n        return string.replace(' ', '')\n    else:\n        return string\n    \ndef to_base(n):\n    '''\n    Write a function to convert an integer to its base.\n    '''\n    return n//2\n    \ndef to_binary(n):\n    '''\n    Write a function to convert an integer to its base.\n    '''\n    return bin(n)\n    \ndef main():\n    '''\n    Write a program to find the smallest and largest positive number in a given list of numbers.\n    '''\n    list1 = [6,8,12,21,22,99,123,24,123,24]\n    print(list1)\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removing extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list1))\n    print(\"\\nList after removal of extra spaces: \",remove_extra_spaces(list"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str_list = test_str.split(\",\")\n    test_int_list = list(map(int, test_str_list))\n    return test_int_list\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = []\n    for i in test_str:\n        test_tuple.append(i)\n    return tuple(test_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(\",\"))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(' ')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp = 0\n    for i in test_str:\n        temp += 1\n        if i == '(' or i == ')' or i == '{' or i == '}' or i == ',' or i =='':\n            pass\n        else:\n            temp = 0\n    return temp\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = tuple(map(int, test_str.split(',')))\n    return test_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) == tuple:\n        if len(test_str) == 2:\n            return (int(test_str[0]), int(test_str[1]))\n        elif len(test_str) == 3:\n            return (int(test_str[0]), int(test_str[1]), int(test_str[2]))\n        else:\n            print(\"ERROR, tuple too long\")\n    else:\n        print(\"ERROR, tuple type does not match\")\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def _tuple_str_int(test_tuple):\n        \"\"\"Convert tuple string to integer tuple.\n        \n        Args:\n            test_tuple (tuple): Tuple to be converted.\n        \n        Returns:\n            int: Integer tuple.\n        \"\"\"\n        for i in range(len(test_tuple)):\n            if isinstance(test_tuple[i], (int, long)):\n                pass\n            else:\n                print(\n                    f'\\n[*] Error: {test_tuple[i]} is not an integer or a tuple.')\n                sys.exit(1)\n        return tuple(test_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_list = test_str.split()\n    return tuple(map(int, tuple_list))\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    if l == 0:\n        return -1\n    else:\n        p = bisect.bisect_left(a, x, lo=0, hi=l)\n        if p < l:\n            return p\n        else:\n            return p - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i] == x:\n        return i\n    else:\n        return right_insertion(a[:i], x)\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i] == x:\n        return i\n    else:\n        return left_insertion(a[:i], x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a) - 1\n    while True:\n        if l >= r:\n            return -1\n        mid = (l + r) // 2\n        if a[mid] > x:\n            r = mid\n        else:\n            l = mid + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    if pos == len(a):\n        return -1\n    else:\n        return pos -1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)-1, -1, -1):\n        if a[i] < x:\n            return i\n    return 0\ndef right_insertion_sort(a):\n    '''\n    Write a function to sort the array in ascending order using the right insertion sort algorithm.\n    '''\n    for i in range(len(a)-1, 0, -1):\n        j = right_insertion(a, a[i])\n        while j > 0:\n            if a[i-j] < a[j]:\n                a[i-j], a[j] = a[j], a[i-j]\n                j = j-1\n            else:\n                break\n    return a\ndef l_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)-1):\n        if a[i] > x:\n            return i\n    return len(a)\ndef l_insertion_sort(a):\n    '''\n    Write a function to sort the array in ascending order using the left insertion sort algorithm.\n    '''\n    for i in range(len(a)-1):\n        j = l_insertion(a, a[i])\n        while j > 0:\n            if a[i+j] > a[j]:\n                a[i+j], a[j] = a[j], a[i+j]\n                j = j-1\n            else:\n                break\n    return a\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    j = bisect.bisect_left(a, x)\n    if j == len(a): return j - 1\n    else: return j\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # return the right position of the key if a is sorted\n    if a.count(x) == 0:\n        return 0\n    # the key to be inserted in sorted order\n    if x < a[-1]:\n        # return the index of the last item\n        return len(a) - 1\n    else:\n        # find the appropriate position for the key to be inserted\n        i = bisect.bisect_right(a, x)\n        if i > 0 and x < a[i - 1]:\n            # i is the index of the first item whose value is less than the key to be inserted\n            return i - 1\n        else:\n            # return the index of the last item whose value is greater than or equal to the key to be inserted\n            return len(a) - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    p = bisect.bisect_right(a, x)\n    if p == 0:\n        return -1\n    elif p == len(a):\n        return len(a)\n    else:\n        return p\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    \n    # base case\n    if not a:\n        return 0\n    # TODO: return index of last element which is smaller than the new value \n    if x < a[0]:\n        return bisect_left(a, x)\n    # TODO: find index of the element which is smaller than the new value and\n    # find the first position of it so we can insert it before the element which is\n    # smaller than the new value\n    else:\n        if a[-1] > x:\n            i = bisect_right(a, x)\n            return i\n        else:\n            return bisect_right(a, x) + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # TODO:\n    return len(a)-bisect.bisect_right(a, x)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Do this in a loop to work out how many matches.\n    num_matches = 0\n    # Split the string into an array of words, and check for 4 or more words.\n    for i in range(0, len(text)):\n        # Check that we haven't seen this before.\n        if text[i] in words:\n            continue\n        # Check that we haven't seen this before.\n        if text[i] in badwords:\n            continue\n        # Check that it's the start of a word.\n        if text[i].isalpha() == False:\n            continue\n        # Check that it's not the start of a number.\n        if text[i].isdigit() == False:\n            continue\n        # Check that it's a three letter word.\n        if len(text[i])!= 3:\n            continue\n        # Check that it's not a three letter word.\n        if text[i] in badwords:\n            continue\n        # Check that it's a three letter word and is alphanumeric.\n        if not text[i].isalpha() or text[i] in badwords:\n            continue\n        if text[i] in badwords:\n            continue\n        # Check that it's in the same position in the text.\n        if text[i] in positions:\n            continue\n        # Check that it's not in the same position in the text.\n        if text[i] in positions:\n            continue\n        # Check that it's not an acronym.\n        if not text[i].isalpha():\n            continue\n        # Check that it's a number.\n        if not text[i].isdigit():\n            continue\n        # Check that it's not a number.\n        if not text[i].isdigit():\n            continue\n        # Check that it's not a number followed by a number.\n        if not text[i].isdigit() and text[i].isnumeric():\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums:\n            continue\n        # Check that it's not a number followed by a number or a number followed by a number.\n        if text[i] in nums and text[i+1] in nums"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_list = []\n    count = 0\n    word = ''\n    for c in text:\n        if c.isdigit():\n            count += 1\n        elif c == 'a':\n            count = 0\n            word = word.replace('a', '')\n            if count < 3:\n                match_list.append(word)\n            word = ''\n    return match_list\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a = re.findall(\"a\", text)\n    if len(a) >= 3:\n        return True\n    return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'([a-zA-Z\\n]+)b?'\n    matches = re.findall(pattern, text)\n    if matches == []:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.findall(r'\\A([a-zA-Z0-9_]{3,}[a-zA-Z0-9_]{3,})\\b', text)\n    return match\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[a-zA-Z][a-zA-Z0-9_]{3}'\n    pattern1 = r'[A-Z][a-zA-Z0-9_]{3}'\n    pattern2 = r'[A-Z][a-zA-Z0-9_]{3}'\n    pattern3 = r'[A-Z][a-zA-Z0-9_]{3}'\n    text = text.lower()\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if len(text) < 2:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = r'a'*3 + r'b'*3\n    m = re.search(regex, text)\n    if m:\n        return m.group()\n    else:\n        return None\ntext_match_three(\"The quick brown fox jumps over the lazy dog\")\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.replace('a', 'b')\n    text = re.sub(r'(b{3})([^a-zA-Z\\r\\n]*)', r'\\1\\2\\3', text)\n    text = re.sub(r'(b{3})([^a-zA-Z\\r\\n]*)', r'\\1', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n]*)(\\3)', r'\\1\\2\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3\\3\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3\\3\\3\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3\\3\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3\\3\\3\\3\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3\\3\\3\\3\\3\\3\\3\\3', text)\n    text = re.sub(r'([^a-zA-Z\\r\\n])(b{3})([^a-zA-Z\\r\\n])(\\3)', r'\\1\\2\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # First, construct a regular expression\n    # This is a regex.\n    # First, we need to escape the backslash '\\'\n    # So we use \\ before every character to escape this backslash.\n    # This will be the exact match, so the match is the same.\n    # The last part will be our pattern.\n    regular_expression = r'[a-z]+b'\n    # Then, we compile our regular expression to a pattern object\n    pattern = re.compile(regular_expression, re.IGNORECASE)\n    # Now, we'll call it a match\n    return pattern.match(text)\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by a 'i'.\n    '''\n    # First, construct a regular expression\n    # This is a regex.\n    # First, we need to escape the backslash '\\'\n    # So we use \\ before every character to escape this backslash.\n    # This will be the exact match, so the match is the same.\n    # The last part will be our pattern.\n    regular_expression = r'[a-z]+[i]b'\n    # Then, we compile our regular expression to a pattern object\n    pattern = re.compile(regular_expression, re.IGNORECASE)\n    # Now, we'll call it a match\n    return pattern.match(text)\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by a 'i'.\n    '''\n    # First, construct a regular expression\n    # This is a regex.\n    # First, we need to escape the backslash '\\'\n    # So we use \\ before every character to escape this backslash.\n    # This will be the exact match, so the match is the same.\n    # The last part will be our pattern.\n    regular_expression = r'[a-z]+[i]b'\n    # Then, we compile our regular expression to a pattern object\n    pattern = re.compile(regular_expression, re.IGNORECASE)\n    # Now, we'll call it a match\n    return pattern.match(text)\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by a 'i'.\n    '''\n    # First, construct a regular expression\n    # This is a regex.\n    # First, we need to escape the backslash '\\'\n    # So we use \\ before every character to escape this backslash.\n    # This will be the exact match, so the match is the same.\n    # The last part will be our pattern.\n    regular_expression = r'[a-z]+[i]b'\n    # Then, we compile our regular expression to a pattern object\n    pattern = re.compile(regular_expression, re.IGNORECASE)\n    # Now, we'll call it a match\n    return pattern.match(text)\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by a 'i'.\n    '''\n    # First, construct a regular expression\n    # This is a regex.\n    # First, we need to escape the backslash '\\'\n    # So we use \\ before every character to escape this backslash.\n    # This will be the exact match, so the match is the same.\n    # The last part will be our pattern.\n    regular_expression = r'[a-z]+[i]b'\n    # Then, we compile our regular expression to a pattern object\n    pattern = re.compile(regular_expression, re.IGNORECASE)\n    # Now, we'll call it a match\n    return pattern.match(text)\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by a 'i'.\n    '''\n    # First, construct a regular expression\n    # This is a regex.\n    # First, we need to escape the backslash '\\'\n    # So we use \\ before every character to escape this backslash.\n    # This will be the exact match, so the match is the same.\n    # The last part will be our pattern.\n    regular_expression = r'[a-z]+[i]b'\n    # Then, we compile our regular expression to a pattern object\n    pattern = re.compile(regular_expression, re.IGNORECASE)\n    # Now, we'll call it a match\n    return pattern.match(text)\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by a 'i'.\n    '''\n    # First, construct a regular expression\n    # This is a regex.\n    # First, we need to escape the backslash '\\'\n    # So we use \\ before every character to escape this backslash.\n    # This will be the exact match, so the match is the same.\n    # The last part will be our pattern.\n    regular_expression = r'[a-z]+[i]b'\n    # Then, we compile our regular expression to a pattern object\n    pattern = re.compile(regular_expression, re.IGNORECASE)\n    # Now, we'll call it a match\n    return pattern.match(text)\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by a 'i'.\n    '''\n    # First, construct a regular expression\n    # This is a regex.\n    # First, we need to escape the backslash '\\'\n    # So we use \\ before every character to escape this backslash.\n    # This will be the exact match, so the match is the same.\n    # The last part will be our pattern.\n    regular_expression = r'[a-z]+[i]b'\n    # Then, we compile our regular expression to a pattern object\n    pattern = re.compile(regular_expression, re.IGNORECASE)\n    # Now, we'll call it a match\n    return pattern.match(text)\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by a 'i'.\n    '''\n    # First, construct a regular expression\n    # This is a regex.\n    # First, we need to escape the backslash '\\'\n    # So we use \\ before every character to escape this backslash.\n    # This will be the exact match, so the match is the same.\n    # The last part will be our pattern.\n    regular_expression = r'[a-z]+[i]b'\n    # Then, we compile our regular expression to a pattern object\n    pattern = re.compile(regular_expression, re.IGNORECASE)\n    # Now, we'll call it a match\n    return pattern.match(text)\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by a 'i'.\n    '''\n    # First, construct a regular expression\n    # This is a regex.\n    # First, we need to escape the backslash '\\'\n    # So we use \\ before every character to escape this backslash.\n    # This will be the exact match, so the match is the same.\n    # The last part will be our pattern.\n    regular_expression = r'[a-z]+[i]b'\n    # Then, we compile our regular expression to a pattern object\n    pattern = re.compile(regular_expression, re.IGNORECASE)\n    # Now, we'll call it a match\n    return pattern.match(text)\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by a 'i'.\n    '''\n    # First, construct a regular expression\n    # This is a regex.\n    # First, we need to escape the backslash '\\'\n    # So we use \\ before every character to escape this backslash.\n    # This will be the exact match, so the match is the same.\n    # The last part will be our pattern.\n    regular_expression = r'[a-z]+[i]b'\n    # Then, we compile our regular expression to a pattern objec"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    print(\"You must provide the new tuple in a new format. \\n\\tType 'quit' to quit the program.\")\n    print(\"\\t\")\n    test_list = test_list.split(',')\n    print('\\n\\tYour new tuple is:')\n    print('\\t')\n    for index in range(len(test_list)):\n        print(str(index+1) + ':'+ test_list[index])\n    print('\\t')\n    return test_list\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str)\n    new_tuple.append(test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = test_list.split(',')\n    test_list = test_list[:-1]\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].strip()\n        if test_list[i] == '':\n            test_list[i] = None\n    new_tuple = tuple(test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    # create a new tuple with the given string\n    new_tuple = tuple(test_list)\n    \n    # replace the first element of tuple with the new tuple element\n    new_tuple[0] = test_str\n    \n    # return the new tuple\n    return new_tuple\n    \n    \ndef main():\n    '''\n    This is the main function that calls the other functions.\n    '''\n    \n    # get the test lists\n    test_list1 = get_test_list()\n    test_list2 = get_test_list()\n    test_list3 = get_test_list()\n    \n    # create a new tuple and then compare it with other tuples\n    new_tuple = new_tuple(test_list1, \"a\")\n    new_tuple2 = new_tuple(test_list2, \"c\")\n    new_tuple3 = new_tuple(test_list3, \"e\")\n    \n    # compare the new tuple and all the tuples\n    assert(new_tuple == tuple(test_list1 + test_list2 + test_list3))\n    assert(new_tuple2 == tuple(test_list1 + test_list2))\n    assert(new_tuple3 == tuple(test_list1 + test_list2 + test_list3))\n    \n    # print how many elements the new tuple has\n    print(len(new_tuple))\n    \n    # print the new tuple again\n    print(new_tuple)\n    \n    # print the elements of a new tuple\n    print(new_tuple[0])\n    \n    # print the elements of a new tuple again\n    print(new_tuple2[0])\n    \n    # print the elements of a new tuple again\n    print(new_tuple3[0])\n    \n    # print a message when there's an error\n    print(\"There was an error, please try again\")\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_list:\n        if test_str:\n            return test_list + [test_str]\n        else:\n            return test_list\n    else:\n        return []\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #tuple is not defined for empty lists\n    if test_list == [] or test_list == \" \":\n        return ()\n    #tuple is defined for empty strings\n    if test_str == \" \" or test_str == \"\":\n        return ()\n    #split the string into list of characters\n    t = test_str.split()\n    #split the list into the string of characters\n    list_t = list(t)\n    #create a new tuple\n    return tuple(list_t)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for n, item in enumerate(test_str):\n        if item == '(' and n!= len(test_str)-1:\n            return new_tuple(test_list, test_str[n+1:])\n    \n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # your code here\n    return tuple(test_list)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = []\n    for i in range(0, len(nums), 2):\n        if i%2 == 0:\n            evens.append(nums[i])\n    return evens\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            evens.append(nums[i])\n    return evens\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            count+=1\n    if count==len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and nums[i] >= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_nums = []\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2 == 0:\n            even_nums.append(nums[i])\n        i += 1\n    if len(even_nums)!= len(set(even_nums)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    #solution 2\n    #built in function\n    return all(i%2 == 0 for i in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums[0] % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    try:\n        if type(test_tup)!= tuple:\n            raise TypeError\n        tup = test_tup\n        tup = tuple(filter(lambda x: x!='', tup))\n        return tup\n    except TypeError:\n        raise TypeError('The given tuple is not valid')\n    except:\n        raise TypeError('An error has occured')\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = test_tup[1:]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) == tuple:\n        return tuple(map(lambda x: remove_nested(x), test_tup))\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(t for t in test_tup if not t[1:])\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup = test_tup\n    if not tup:\n        return None\n    for i in range(1, len(tup)):\n        if type(tup[i]) is tuple:\n            tup = tup[:i] + tup[i + 1:]\n            break\n    return tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = ()\n    for i,j in test_tup:\n        if j in result:\n            continue\n        result = result + (i,)\n    return result\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    for i in range(0, len(test_tup) - 1):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                test_tup[i] = None\n                test_tup[j] = None\n    return tuple(test_tup)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += len(i)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += len(i)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_list = len(input_list)\n    print(num_list)\n    \n    for i in range(num_list):\n        for j in range(num_list-i):\n            print(input_list[j], end=\" \")\n        print(input_list[num_list-i-1])\n    print()\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #print(input_list)\n    output_list = []\n    for i in range(0, len(input_list)):\n        output_list.append(len(input_list[i]))\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(0, len(input_list)):\n        if isinstance(input_list[i], list):\n            count += len(input_list[i])\n    return count\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    temp_list = []\n    for element in input_list:\n        if type(element) == list:\n            temp_list.append(len(element))\n    return temp_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_list = list()\n    for i in range(0, len(input_list)):\n        list_list.append(len(input_list[i]))\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_lists = len(input_list)\n    return num_lists\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    if arr[i] == x:\n        return i\n    if arr[i] > x:\n        return i - 1\n    if arr[i] < x:\n        return i + 1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #1. Declare a variable \"position\" to store the index of the element in arr\n    #2. Start a for loop, iterate through the array and increment \"position\" by 1\n    #3. If \"position\" is greater than or equal to the length of the array, return the index\n    #4. Else, return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    i = 0\n    while i < n and arr[i] < x:\n        i += 1\n    return n - i\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    count=0\n    start=0\n    end=len(arr)-1\n    while end>=start:\n        mid=(start+end)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            count+=mid+1\n            end=mid\n        else:\n            start=mid+1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    r=len(arr)-1\n    i=arr.index(x)\n    while i>=l and arr[i+1]>=x:\n        i=i+1\n    return i\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    elif arr[0]==x:\n        return 0\n    elif arr[0]>x:\n        return last(arr[1:],x)\n    else:\n        return last(arr[1:],arr[0])\ndef findPosition(arr,x):\n    '''\n    Write a python function to find the position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    elif arr[0]==x:\n        return 0\n    elif arr[0]>x:\n        return findPosition(arr[1:],x)\n    else:\n        return findPosition(arr[1:],arr[0])\n    "
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # assume sorted\n    # len(arr)\n    # if x not in arr:\n    #     return -1\n    # else:\n    #     return arr.index(x)\n    if not arr:\n        return -1\n    if arr[-1] < arr[-2]:\n        return len(arr)\n    else:\n        return arr[-2]\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr) - 1 if arr[-1] == x else arr.index(x) + 1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    len = len(arr)\n    idx = (len-1) // 2\n    if arr[idx]<x:\n        return idx\n    if arr[idx]>x:\n        return len-1\n    return len-2\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    if arr[0] == x:\n        return 0\n    elif arr[0] < x:\n        return arr[0]\n    elif arr[0] > x:\n        return len(arr)-1\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Write your code here.\n    # input: str text\n    # output: the matched string\n    if re.search(\"a\\b\",text):\n        return(re.search(\"a\\b\",text).group(0))\n    else:\n        return(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start_a = re.compile(r'^\\s*(?:(?<=\\n) \\s*[a-z]+\\s+[a-z]+\\s+[a-z]+\\s+[a-z]+)\\s*$')\n    end_a = re.compile(r'^\\s*(?:(?<=\\n) \\s*[a-z]+\\s+[a-z]+\\s+[a-z]+\\s+[a-z]+)\\s*$')\n    \n    # Read the text and find 'a' followed by anything.\n    text_a = start_a.findall(text)\n    # Process the text.\n    processed_text = ''\n    for s in text_a:\n        processed_text += s\n    # Match the end.\n    processed_text += end_a.findall(processed_text)\n    \n    # Remove the newlines and return.\n    return re.sub(r'\\s+','', processed_text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    starta = re.search(r\"^a\", text)\n    endb = re.search(r\"^b\", text)\n    if starta and endb:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # if the string is not longer than 3 characters, the function should return None\n    # otherwise, return the match\n    if len(text) < 3:\n        return None\n    # if the string contains a space, the string should be returned as a string, \n    # else, return the original string\n    if text[0] =='':\n        return text\n    # otherwise, if the string ends with a period, the string should be returned as a string\n    # as the last element of the original string\n    if text[-1] == '.':\n        return text\n    # otherwise, if the string ends with a comma, the string should be returned as a string\n    # as the last element of the original string\n    if text[-1] == ',':\n        return text\n    # otherwise, if the string ends with a slash, the string should be returned as a string\n    # as the last element of the original string\n    if text[-1] == '/':\n        return text\n    # otherwise, if the string ends with a slash, the string should be returned as a string\n    # as the last element of the original string\n    if text[-1] == '\\\\':\n        return text\n    # otherwise, if the string ends with a slash, the string should be returned as a string\n    # as the last element of the original string\n    if text[-1] == '\\r':\n        return text\n    # otherwise, if the string ends with a slash, the string should be returned as a string\n    # as the last element of the original string\n    if text[-1] == '\\n':\n        return text\n    # otherwise, if the string ends with a slash, the string should be returned as a string\n    # as the last element of the original string\n    if text[-1] == '\\t':\n        return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r'(?<=[a-z])(?:[^A-Za-z]|\\s|\\.|\\(|\\)|\\?)\\b'\n    match = re.search(regex, text)\n    return match.group()\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # search string for 'a' followed by anything.\n    # string: text to find the end of.\n    m = re.search('a', text)\n    \n    # grab the group that contains the string.\n    group = m.group(0)\n    \n    # return text after the group.\n    return group + 'b'\n    \n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Convert string to list of characters\n    word_list = re.split('[a-zA-Z0-9-]+', text)\n    # Iterate through word list, and check if word starts with 'a'\n    for word in word_list:\n        if word[0] == 'a':\n            return word[1:]\n    # Return 'None' if no 'a'\n    return 'None'\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = re.sub(r'[^\\w]','', text)\n    text = re.sub(r'[A-Za-z]', '', text)\n    text = re.sub(r'[^a-z]', '', text)\n    text = re.sub(r'[a-z]', '', text)\n    text = re.sub(r'[^0-9a-z]', '', text)\n    text = re.sub(r'[0-9]', '', text)\n    text = re.sub(r'\\s','', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\!', '', text)\n    text = re.sub(r'\\?', '', text)\n    text = re.sub(r'\\n', '', text)\n    text = re.sub(r'\\s','', text)\n    text = re.sub(r'\\s','', text)\n    text = re.sub(r'\\(', '', text)\n    text = re.sub(r'\\)', '', text)\n    text = re.sub(r'\\+', '', text)\n    text = re.sub(r'\\)', '', text)\n    text = re.sub(r'\\=', '', text)\n    text = re.sub(r'\\;', '', text)\n    text = re.sub(r'\\,', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\,', '', text)\n    text = re.sub(r'\\!', '', text)\n    text = re.sub(r'\\?', '', text)\n    text = re.sub(r'\\n', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\t', '', text)\n    text = re.sub(r'\\n', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\n', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\n', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\.', '', text)\n    text = re"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Split text into a list of words\n    words = text.split(\" \")\n    # Iterate through the words, checking if the word contains an 'a' and ending in 'b'\n    for word in words:\n        if re.search('(?<![a-z])\\w\\w+a', word):\n            # If word is an 'a'\n            # Create a match object\n            m = re.match('(?<![a-z])\\w\\w+a', word)\n            # If there is a match, append the match object to a list and print the resulting list\n            if m:\n                print(m.group())\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    st = \"\"\n    for ch in text:\n        if ch==\"a\":\n            st += \"b\"\n        else:\n            st += ch\n    return st\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    if len(dict.keys()) == 0:\n        return 0\n    \n    else:\n        return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s=0\n    for i in dict.values():\n        s+=i\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_dict = 0\n    for item in dict.values():\n        sum_dict += item\n    return sum_dict\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for items in dict.values():\n        sum += items\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for items in dict.values():\n        sum = sum + items\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s=0\n    for k,v in dict.items():\n        s+=v\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum = sum + dict[i]\n    return sum\n    \ndef key_list(dict):\n    '''\n    Write function to return the key list of the given dictionary.\n    '''\n    key_list = []\n    for i in dict:\n        key_list.append(i)\n    return key_list\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # your code goes here\n    summ=0\n    for i in dict.values():\n        summ=summ+i\n    print(summ)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n < 2:\n        return n\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(i%2==1):\n            sum=sum+i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd=0\n    for i in range(n+1):\n        if i%2==0:\n            sum_odd+=i\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    if n < 0:\n        print(\"Please enter a positive number\")\n        return -1\n    else:\n        for i in range(n):\n            if i % 2!= 0:\n                sum_odd += i\n        return sum_odd\nprint(sum_odd(int(input(\"enter a number:\"))))\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    pass\n    # Write your code here"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # YOUR CODE HERE\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return n + sum_odd(n - 1)\n    else:\n        return sum_odd(n - 1)\n        \ndef prime_factors(n):\n    '''\n    Return the factorization of a number, n, into two numbers.\n    '''\n    factor = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                factor.append(i)\n            else:\n                factor.append(i)\n    if n > 1:\n        factor.append(n)\n    return factor\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum = sum + i\n    return sum\n    \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    import math\n    if n<2:\n        return None\n    elif n==2:\n        return 0\n    elif n==3:\n        return 1\n    elif n%2==0:\n        return (n**2)\n    else:\n        sum=0\n        while n>0:\n            if math.sqrt(n).is_integer():\n                sum+=math.sqrt(n)\n                n=int(n/math.sqrt(n))\n            else:\n                break\n        return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if l>r:\n        print(\"The range is out of bounds\")\n    else:\n        sum=0\n        for i in range(l,r+1):\n            if i%2==1:\n                sum+=i\n        return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\n    \ndef _mean(arr):  \n    '''\n    Write a python function to find the mean of an array.\n    '''\n    return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] / 7\n    \ndef _median(arr):  \n    '''\n    Write a python function to find the median of an array.\n    '''\n    if len(arr)%2:\n        arr.sort()\n        s = len(arr)//2\n        return arr[s]\n    else:\n        return (arr[len(arr)//2] + arr[(len(arr)//2)-1])/2\n    \ndef _mode(arr):  \n    '''\n    Write a python function to find the mode of an array.\n    '''\n    return arr[0] if arr.count(arr[0]) == arr.count(arr[1]) else arr[1]\n    \ndef _variance(arr):  \n    '''\n    Write a python function to find the variance of an array.\n    '''\n    return arr[0]**2 + arr[1]**2 + arr[2]**2 + arr[3]**2 + arr[4]**2 + arr[5]**2 + arr[6]**2 + arr[7]**2\n    \ndef _standard_deviation(arr):  \n    '''\n    Write a python function to find the standard deviation of an array.\n    '''\n    return sqrt(arr[0]**2 + arr[1]**2 + arr[2]**2 + arr[3]**2 + arr[4]**2 + arr[5]**2 + arr[6]**2 + arr[7]**2)\n    \ndef _variance_of_quartiles(arr):  \n    '''\n    Write a python function to find the variance of an array.\n    '''\n    return arr[0]**2 + arr[1]**2 + arr[2]**2 + arr[3]**2 + arr[4]**2 + arr[5]**2 + arr[6]**2\n    \ndef _standard_deviation_of_quartiles(arr):  \n    '''\n    Write a python function to find the standard deviation of an array.\n    '''\n    return sqrt(arr[0]**2 + arr[1]**2 + arr[2]**2 + arr[3]**2 + arr[4]**2 + arr[5]**2 + arr[6]**2 + arr[7]**2)\n    \ndef _variance_of_mode(arr):  \n    '''\n    Write a python function to find the variance of an array.\n    '''\n    return arr[0]**2 + arr[1]**2 + arr[2]**2 + arr[3]**2 + arr[4]**2 + arr[5]**2\n    \ndef _standard_deviation_of_mode(arr):  \n    '''\n    Write a python function to find the standard deviation of an array.\n    '''\n    return sqrt(arr[0]**2 + arr[1]**2 + arr[2]**2 + arr[3]**2 + arr[4]**2 + arr[5]**2"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for x in arr:\n        total = total + x\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    first_value = arr[0]\n    for item in arr[1:]:\n        if first_value < item:\n            first_value = first_value + item\n            \n    return first_value\n    \ndef _sum_big(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    sum_of_numbers = 0\n    \n    for number in arr:\n        sum_of_numbers += number\n    \n    return sum_of_numbers\n    \ndef _max_numbers(arr):\n    '''\n    Write a python function to find the max number in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_value = arr[0]\n    for item in arr:\n        if item > max_value:\n            max_value = item\n    \n    return max_value\n    \ndef _is_even(num):\n    '''\n    Write a python function to check if a number is even or odd.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef _get_number_of_evens(arr):\n    '''\n    Write a python function to find the number of even numbers in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n        \n    count = 0\n    \n    for number in arr:\n        if _is_even(number):\n            count += 1\n    \n    return count\n    \ndef _get_even_numbers(arr):\n    '''\n    Write a python function to find the even numbers in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    count = 0\n    \n    for number in arr:\n        if _is_even(number):\n            count += 1\n        \n    return count\n    \ndef _sum_to_5(arr):\n    '''\n    Write a python function to sum to 5 values in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    for number in arr:\n        if number > 5:\n            return number\n    \n    return 0\n    \ndef _sum_to_10(arr):\n    '''\n    Write a python function to sum to 10 values in an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    for number in arr:\n        if number > 10:\n            return number\n    \n    return 0\n    \ndef _get_digit_by_index(num, index):\n    '''\n    Write a python function to get the digit at index index.\n    '''\n    if len(num) == 0:\n        return 0\n    \n    for digit in num:\n        if digit == index:\n            return digit\n    \n    return 0\n    \ndef _get_digit_by_sum(num):\n    '''\n    Write a python function to get the number of digits in a number.\n    '''\n    if len(num) == 0:\n        return 0\n    \n    count = 0\n    \n    for item in num:\n        if item < 10:\n            count += 1\n        else:\n            break\n    \n    return count\n    \ndef _is_prime(num):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if num == 1:\n        return False\n    \n    if num == 2 or num == 3:\n        return True\n        \n    if num > 2:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    return False\n    \ndef _get_prime_numbers(start, end):\n    '''\n    Write a python function to get the prime numbers in an array.\n    '''\n    \n    if len(str(end)) == 1:\n        return end\n    \n    for item in range(start, end + 1):\n        if _is_prime(item):\n            yield item\n    \ndef _get_prime_numbers_2(start, end):\n    '''\n    Write a python function to get the prime numbers in an array.\n    '''\n    \n    if len(str(end)) == 1:\n        return end\n    \n    for item in range(start, end + 1):\n        if _is_prime(item):\n            yield item\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Use a loop to go through the array.\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    # Return the sum.\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n ^ (1 << d)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    left_rotate = (d<<32)%n\n    \n    return left_rotate\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    c = 0\n    while n >= 1:\n        q, r = divmod(n,2)\n        c += r\n        n = q\n    c = c - 1\n    n = n - 1\n    a = 0\n    while n >= 0:\n        r = n % 2\n        a = a*10 + r\n        n = n // 2\n    return a\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    a = n & 0xffff\n    b = (n>>8) & 0xff\n    n = n ^ (a<<16)\n    n = n ^ (b<<16)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d_num = n&(1<<d)\n    n = n|d_num\n    d = d-1\n    if d==0:\n        return n\n    return (n<<d)+(d_num<<32-d)\n    \ndef main():\n    '''\n    Write a function that rotates a number by d bits.\n    '''\n    # Allowed numbers range from 0 to 7\n    MAX_NUM = 7\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = bin(n)[2:].zfill(d)\n    return int(n,2)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    def bin_to_decimal(num):\n        '''\n        Convert a binary string to a decimal number.\n        '''\n        return int(num,2)\n    \n    def decimal_to_bin(num):\n        '''\n        Convert a decimal number to a binary string.\n        '''\n        if num == 0:\n            return '0'\n        else:\n            return '1' + decimal_to_bin(num&1)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d) + (n>>(32-d))\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d) + (n>>(32-d))\n    \ndef rotate_left(n):\n    '''\n    Write a function to rotate a given 32 bit number n by left.\n    '''\n    return (n<<32) + (n>>(32-32))\n    \ndef rotate_right(n):\n    '''\n    Write a function to rotate a given 32 bit number n by right.\n    '''\n    return (n<<32) + (n>>(32-32))\n    \ndef rotate(n,d):\n    '''\n    Write a function to rotate a given 32 bit number n a given number of bits by d bits.\n    '''\n    if (d>32):\n        print(\"Please enter a correct value of d <= 32\")\n        return\n    if (d==32):\n        return n\n    if (d==31):\n        return n&1\n    if (d==30):\n        return n&1|1\n    if (d==29):\n        return n&1|1|1\n    if (d==28):\n        return n&1|1|1|1\n    if (d==27):\n        return n&1|1|1|1|1\n    if (d==26):\n        return n&1|1|1|1|1|1\n    if (d==25):\n        return n&1|1|1|1|1|1|1\n    if (d==24):\n        return n&1|1|1|1|1|1|1|1\n    if (d==23):\n        return n&1|1|1|1|1|1|1|1|1\n    if (d==22):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==21):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==20):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==19):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==18):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==17):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==16):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==15):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==14):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==13):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==12):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==11):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==10):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==9):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==8):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==7):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==6):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==5):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==4):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==3):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==2):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==1):\n        return n&1|1|1|1|1|1|1|1|1|1\n    if (d==0):\n        return n&1|1|1|1|1|1|1|1|1|1\n    \n    print(\"\\nPlease enter a correct value of d <= 32\")\n    return\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    if (n == 0):\n        pass\n    elif (n == 1):\n        print(1)\n    else:\n        print(0)\n    \n    if (d == 0):\n        pass\n    elif (d == 1):\n        print(1)\n    else:\n        print(0)\n    \n    return 1\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # write your code here\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile(\"\\s\")\n    return pattern.sub(\" \", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    for c in range(len(text)-1, -1, -1):\n        if text[c].isspace():\n            text = text[:c] + text[c+1:]\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\ndef remove_quotes(text):\n    '''\n    Write a function to remove the '''\n    return re.sub('(?<![a-z])[\\w!\\\"#$%&\\'()*+,-./:;<=>?@[\\]^_`{|}~]', '', text)\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \" \", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    #pattern = '\\s*[\\w]+\\s*'\n    pattern = '\\s+'\n    # Replace all the whitespaces with a single space\n    text = re.sub(pattern,' ',text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text_without_spaces = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            text_without_spaces += char\n    return text_without_spaces\n    \ndef remove_all_dashes(text):\n    '''\n    Write a function to remove all dashes from a string.\n    '''\n    text_without_dashes = ''\n    for char in text:\n        if char!= '-':\n            text_without_dashes += char\n    return text_without_dashes\n    \ndef remove_all_unused_chars(text):\n    '''\n    Write a function to remove all unused characters from a string.\n    '''\n    text_without_unused_chars = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_unused_chars += char\n    return text_without_unused_chars\n    \ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    text_without_punctuation = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_punctuation += char\n    return text_without_punctuation\n    \ndef replace_chars(text, char, replacement):\n    '''\n    Write a function to replace all occurrences of a character in a string.\n    '''\n    text_without_replacement = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_replacement += char\n    text_without_replacement = text_without_replacement.replace(char, replacement)\n    return text_without_replacement\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    text_without_punctuation = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_punctuation += char\n    return text_without_punctuation\n    \ndef remove_non_alphabetical_characters(text):\n    '''\n    Write a function to remove non-alphabetical characters from a string.\n    '''\n    text_without_non_alphabetical_characters = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_non_alphabetical_characters += char\n    return text_without_non_alphabetical_characters\n    \ndef remove_all_non_alphabetical_characters(text):\n    '''\n    Write a function to remove non-alphabetical characters from a string.\n    '''\n    text_without_non_alphabetical_characters = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_non_alphabetical_characters += char\n    return text_without_non_alphabetical_characters\n    \ndef remove_all_non_alphabetical_whitespaces(text):\n    '''\n    Write a function to remove non-alphabetical whitespaces from a string.\n    '''\n    text_without_non_alphabetical_whitespaces = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_non_alphabetical_whitespaces += char\n    return text_without_non_alphabetical_whitespaces\n    \ndef replace_non_alphabetical_chars(text, char, replacement):\n    '''\n    Write a function to replace non-alphabetical characters in a string.\n    '''\n    text_without_replacement = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_replacement += char\n    text_without_replacement = text_without_replacement.replace(char, replacement)\n    return text_without_replacement\n    \ndef remove_non_alphabetical_whitespaces(text):\n    '''\n    Write a function to remove non-alphabetical whitespaces from a string.\n    '''\n    text_without_non_alphabetical_whitespaces = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_non_alphabetical_whitespaces += char\n    return text_without_non_alphabetical_whitespaces\n    \ndef remove_non_alphabetical_chars(text):\n    '''\n    Write a function to remove non-alphabetical characters from a string.\n    '''\n    text_without_non_alphabetical_chars = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_non_alphabetical_chars += char\n    return text_without_non_alphabetical_chars\n    \ndef remove_all_non_alphabetical_chars(text):\n    '''\n    Write a function to remove non-alphabetical characters from a string.\n    '''\n    text_without_non_alphabetical_chars = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_non_alphabetical_chars += char\n    return text_without_non_alphabetical_chars\n    \ndef remove_all_non_alphabetical_whitespaces(text):\n    '''\n    Write a function to remove non-alphabetical whitespaces from a string.\n    '''\n    text_without_non_alphabetical_whitespaces = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_non_alphabetical_whitespaces += char\n    return text_without_non_alphabetical_whitespaces\n    \ndef remove_all_non_alphabetical_chars(text):\n    '''\n    Write a function to remove non-alphabetical characters from a string.\n    '''\n    text_without_non_alphabetical_chars = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_non_alphabetical_chars += char\n    return text_without_non_alphabetical_chars\n    \ndef add_space(text, count):\n    '''\n    Write a function to add space to a string of length count to the beginning of a string.\n    '''\n    text_without_spaces = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_spaces += char\n        else:\n            if char!='' and char!= '\\n':\n                text_without_spaces +=''\n    text_without_spaces +=''*count\n    return text_without_spaces\n    \ndef remove_space(text, count):\n    '''\n    Write a function to remove space from a string of length count to the end of a string.\n    '''\n    text_without_spaces = ''\n    for char in text:\n        if char!='' and char!= '\\n':\n            if char!= '-':\n                text_without_spaces += char\n        else:\n            if char!='' and char!= '\\n':\n                text_without_spaces +=''\n    text_without_spaces +=''*count\n    return text_without_spaces\n    \ndef remove_newline(text):\n    '''\n    Write a function to remove newline from a string.\n    '''\n    text_without_newlines = ''\n    for char in text:\n        if char!= '\\n':\n            if char!='' and char!= '\\n':\n                text_without_newlines += char\n    return text_without_newlines"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ', '')\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    \n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text_without_spaces = re.sub(\"\\s+\", \"\", text)\n    return text_without_spaces\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    d1 = x == y\n    d2 = y == z\n    d3 = z == x\n    return d1.all(), d2.all(), d3.all()\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = x +1\n    y = y +1\n    z = z +1\n    result = x+y+z\n    assert result == x+y+z-1\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c = 0\n    for i in x:\n        if i in y:\n            c += 1\n    for j in z:\n        if j in y:\n            c += 1\n    return c\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(f\"{x} equal to {y} and {z} equal to {x+y+z}\")\n    assert x == y and x == z\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if (x==y==z):\n        return 3\n    elif (x>y>z):\n        return x-y-z\n    elif (x>z>y):\n        return x-z-y\n    elif (x>y>z):\n        return y-z-x\n    else:\n        return z-y-x\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x=int(x)\n    y=int(y)\n    z=int(z)\n    if x==y==z:\n        return 3\n    else:\n        return 0\ndef two_equal(x,y):\n    '''\n    Write a python function to count the number of equal numbers from two given integers.\n    '''\n    x=int(x)\n    y=int(y)\n    if x==y:\n        return 2\n    else:\n        return 0\ndef less_than_or_equal(x,y):\n    '''\n    Write a python function to count the number of equal numbers from two given integers.\n    '''\n    x=int(x)\n    y=int(y)\n    if x>y:\n        return 1\n    else:\n        return 0\ndef sum_of_digits(x):\n    '''\n    Write a python function to count the sum of digits from two given integers.\n    '''\n    x=int(x)\n    x=str(x)\n    x=int(x)\n    sum=0\n    for i in x:\n        sum+=int(i)\n    return sum\ndef sum_of_digits_s(x):\n    '''\n    Write a python function to count the sum of digits from two given integers.\n    '''\n    x=int(x)\n    x=str(x)\n    x=int(x)\n    sum=0\n    for i in x:\n        sum+=int(i)\n    return sum\ndef reverse_string(x):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    x=str(x)\n    x=x[::-1]\n    return x\ndef count_divisible_by(x,y):\n    '''\n    Write a python function to count the number of digits in a given number.\n    '''\n    x=int(x)\n    y=int(y)\n    if x%y==0:\n        return 1\n    else:\n        return 0\ndef number_of_subgroups(x):\n    '''\n    Write a python function to count the number of subgroups in a given number.\n    '''\n    x=int(x)\n    x=str(x)\n    x=x[::-1]\n    s=0\n    for i in x:\n        if i==\"0\":\n            s=s+1\n    return s\ndef factorial(x):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    x=int(x)\n    x=str(x)\n    x=int(x)\n    factorial=1\n    for i in range(1,x+1):\n        factorial=factorial*i\n    return factorial\ndef factorial_of_seven(x):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    x=int(x)\n    x=str(x)\n    x=int(x)\n    factorial=1\n    for i in range(1,x+1):\n        factorial=factorial*i\n    return factorial\ndef fibonacci(x):\n    '''\n    Write a python function to calculate the fibonacci sequence up to a given number.\n    '''\n    x=int(x)\n    x=str(x)\n    x=int(x)\n    fibo=1\n    if x==0:\n        return 0\n    if x==1:\n        return 1\n    else:\n        for i in range(2,x):\n            fibo=fibo+i\n        return fibo\ndef factorial_of_seven(x):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    x=int(x)\n    x=str(x)\n    x=int(x)\n    factorial=1\n    for i in range(1,x+1):\n        factorial=factorial*i\n    return factorial\ndef fibonacci_two(x):\n    '''\n    Write a python function to calculate the fibonacci sequence up to a given number.\n    '''\n    x=int(x)\n    x=str(x)\n    x=int(x)\n    fibo=1\n    if x==0:\n        return 0\n    if x==1:\n        return 1\n    else:\n        for i in range(2,x):\n            fibo=fibo+i\n        return fibo\ndef sum_of_digits(x):\n    '''\n    Write a python function to count the sum of digits from two given integers.\n    '''\n    x=int(x)\n    x=str(x)\n    x=int(x)\n    sum=0\n    for i in x:\n        sum+=int(i)\n    return sum\ndef count_subgroups(x,y):\n    '''\n    Write a python function to count the number of subgroups in a given number.\n    '''\n    x=int(x)\n    y=int(y)\n    if x<y:\n        return 1\n    else:\n        return 0\ndef nth_prime(x):\n    '''\n    Write a python function to calculate the nth prime number from a given number.\n    '''\n    x=int(x)\n    x=str(x)\n    x=int(x)\n    n=1\n    for i in range(2,x):\n        if x%i==0:\n            break\n    else:\n        return n\ndef is_prime(x):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    x=int(x)\n    x=str(x)\n    x=int(x)\n    if x<=2:\n        return False\n    else:\n        for i in range(2,x):\n            if x%i==0:\n                return False\n        return True\ndef check_prime(x):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    x=int(x)\n    x=str(x)\n    x=int(x)\n    if x<=2:\n        return False\n    else:\n        for i in range(2,x):\n            if x%i==0:\n                return False\n        return True\ndef sum_of_digits_2(x):\n    '''\n    Write a python function to calculate the sum of digits from two given integers.\n    '''\n    x=int(x)\n    x=str(x)\n    x=int(x)\n    sum=0\n    for i in x:\n        sum+=int(i)\n    return sum\ndef sum_of_digits_3(x):\n    '''\n    Write a python function to calculate the sum of digits from two given integers.\n    '''\n    x=int(x)\n    x=str(x)\n    x=int(x)\n    sum=0\n    for i in x:\n        sum+=int(i)\n    return sum\ndef main():\n    print(\"\\n\")\n    print(\"*\"*40)\n    print(\"The sum of digits of the numbers from 1 to 1000 is: \", sum_of_digits_3(input(\"Please enter a number: \")))\n    print(\"*\"*40)\n    print(\"\\n\")\n    print(\"The sum of digits of the numbers from 2 to 100 is: \", sum_of_digits_2(input(\"Please enter a number: \")))\n    print(\"*\"*40)\n    print(\"\\n\")\n    print(\"The sum of digits of the numbers from 1 to 1000 is: \", sum_of_digits(input(\"Please enter a number: \")))\n    print(\"*\"*40)\n    print(\"\\n\")\n    print(\"The sum of digits of the numbers from 1 to 1000 is: \", sum_of_digits_s(input(\"Please enter a number: \")))\n    print(\"*\"*40)\n    print(\"\\n\")\n    print(\"The sum of digits of the numbers from 1 to 1000 is: \", sum_of_digits_2(input(\"Please enter a number: \")))\n    print(\"*\"*40)\n    print(\"\\n\")\n    print(\"The sum of digits of the numbers from 1 to 1000 is: \", factoria"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #print(x,y,z)\n    c=0\n    if x==y:\n        c+=1\n    elif y==z:\n        c+=1\n    elif x==z:\n        c+=1\n    return c\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and z[i] == 1:\n            result += 1\n    return result\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y:\n        return 3\n    elif x == z:\n        return 1\n    elif y == z:\n        return 2\n    else:\n        return 0\n        \nprint(test_three_equal(5,6,6)"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    num_rotations = 0\n    while (len(arr) - 1 > 0):\n        num_rotations += 1\n        if arr[len(arr) - 1] < arr[len(arr) - 2]:\n            arr[len(arr) - 1], arr[len(arr) - 2] = arr[len(arr) - 2], arr[len(arr) - 1]\n        else:\n            arr[len(arr) - 1], arr[len(arr) - 2] = arr[len(arr) - 2], arr[len(arr) - 1]\n        del arr[len(arr) - 2]\n    return num_rotations"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    num_of_rotations = 0\n    for i in range(len(arr)):\n        temp = arr[i]\n        j = i\n        while j > 0:\n            if arr[j - 1] > temp:\n                arr[j], arr[j - 1] = arr[j - 1], arr[j]\n                j -= 1\n            j -= 1\n        num_of_rotations += 1\n    return num_of_rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    m = len(arr)\n    if m<=1:\n        return m\n    rot_required = 0\n    temp = arr[0]\n    for i in range(1,m):\n        if temp<arr[i]:\n            rot_required +=1\n            temp = arr[i]\n    return rot_required\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    l = len(arr)\n    count = 0\n    for i in range(l):\n        arr[i] = arr[i-1]\n    j = l - 1\n    while j >= 0:\n        if arr[j] < arr[j+1]:\n            count += 1\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n            j -= 1\n        else:\n            j -= 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # count the number of rotations required to sort the array\n    count = 0\n    for i in range(len(arr)):\n        count += (arr[i] - 1) \n        \n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # Creating an array of length n\n    arr = [x for x in range(len(arr))]\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # O(n)\n    # O(1)\n    # O(n)\n    # O(n)\n    n = len(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    index = 0\n    index_1 = 0\n    index_2 = 0\n    size = len(arr)\n    while index <= size:\n        index = index + 1\n        if index % 2 == 0:\n            index_1 = index - 1\n            index_2 = index - 1\n        else:\n            index_1 = index - 1\n            index_2 = index\n        if arr[index] > arr[index_1] and arr[index] > arr[index_2]:\n            rotations = rotations + 1\n        elif arr[index] < arr[index_1] and arr[index] < arr[index_2]:\n            rotations = rotations + 1\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    count = 0\n    for i in range(n):\n        if arr[i] == arr[n-1]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return 1\n    else:\n        if arr[n-1] < arr[n-2]:\n            return n - 1\n        else:\n            return n - 2\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return True\n    \n    if n == 1:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n % 2 == 0:\n        return False\n    \n    return is_perfect_square(n//2)\n    \n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (n % (n + 1) == 0)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    square = int(n**0.5)\n    if n == int(square**0.5):\n        return square**2 == n\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 :\n        return False\n    elif n < 0 :\n        return False\n    \n    sqrt_n = n // math.sqrt(n)\n    if n == 1 or n == 2:\n        return True\n    elif n % sqrt_n == 0 :\n        return False\n    else :\n        return is_perfect_square(n-1) and is_perfect_square(n+1)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    result = 0\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            result += i\n        else:\n            result += n//i\n    if result == n :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 or n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    \n    if n == 0 or n == 1 :\n        return True\n    \n    else :\n        sq = int(n ** 0.5)\n        if n == sq :\n            return True\n        \n        if n % sq == 0 :\n            return False\n        else :\n            return False\n    \n    return False\n    \n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    a = n\n    b = pow(n, 0.5)\n    c = n * b\n    return a == b or c == b or a == c\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1:\n        return True\n    else:\n        return False\n    # Write your code here\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the given number is perfect square\n    if n % 2 == 0 :\n        # check if n is even\n        if n == 1 :\n            return True\n        # Check if n is odd\n        elif n % 2 == 1 :\n            return False\n    # Check if the number is perfect square\n    else :\n        # check if n is even\n        if n == 1 :\n            return False\n        # Check if n is odd\n        elif n % 2 == 1 :\n            return False\n    # n is perfect square\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 1:\n        if arr[0] % 2 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    i=0\n    while i<len(arr):\n        if arr[i]%2==0:\n            return False\n        i=i+1\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return arr % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    n = len(arr) \n    if n % 2 == 0: \n        return True\n    else: \n        return False\n    \n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return sum(arr) % 2 == 0 \n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    if sum % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # The items in arr can only be of odd numbers.\n    if len(arr)==1:\n        return True\n    # The items in arr are of two digits.\n    elif len(arr)==2:\n        if arr[0]==arr[1]:\n            return True\n        else:\n            return False\n    # The items in arr can be of four digits.\n    elif len(arr)==3:\n        if arr[0]==arr[1] or arr[0]==arr[2] or arr[1]==arr[2]:\n            return True\n        else:\n            return False\n    # The items in arr can be of three digits.\n    elif len(arr)==4:\n        if arr[0]==arr[1] or arr[0]==arr[2] or arr[1]==arr[2]:\n            return True\n        else:\n            return False\n    # The items in arr can be of five digits.\n    elif len(arr)==5:\n        if arr[0]==arr[1] or arr[0]==arr[2] or arr[1]==arr[2] or arr[0]==arr[3]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Find the number of even elements\n    count = 0\n    for i in arr:\n        if i%2 == 0:\n            count+=1\n    # Check whether the product of even elements is even\n    if count%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = []\n    for i in range(len(lists)):\n        list_sum = 0\n        for j in range(len(lists[i])):\n            list_sum += lists[i][j]\n        highest.append([i, list_sum])\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for x in lists:\n        for y in x:\n            if y > max_sum:\n                max_sum = y\n                max_list = x\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -1\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    \n    max_sum = lists[0]\n    \n    for i in range(1, len(lists)):\n        max_sum = [max(list) for list in zip(lists[i],lists[i+1])]\n        max_sum.append(max(max_sum))\n        max_sum = max(max_sum)\n        if max_sum > max_sum:\n            max_sum = max_sum\n    \n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = []\n    for i in lists:\n        for j in i:\n            if j!= 0:\n                if len(max_list) < len(i):\n                    max_list = i\n                    max_sum = [j]\n                elif len(max_list) == len(i):\n                    if j > max(max_sum):\n                        max_sum = [j]\n                    if j == max(max_sum):\n                        max_sum.append(j)\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for i in lists:\n        for j in i:\n            if j > 0:\n                max_sum.append(j)\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = 0\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_list = [lists[i][j]]\n            elif lists[i][j] == max_sum:\n                max_list.append(lists[i][j])\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # TODO: use an extra argument, or print_max_sum_list.\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    highest = 0\n    for i in lists:\n        for j in lists:\n            sum = i[0] + j[0]\n            if sum > highest:\n                highest = sum\n    for i in lists:\n        for j in lists:\n            sum = i[0] + j[0]\n            if sum > highest:\n                highest = sum\n    for i in lists:\n        for j in lists:\n            sum = i[0] + j[0]\n            if sum > highest:\n                highest = sum\n    max_sum_list.append([highest, list(lists)])\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = 0\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if (lists[i][j] >= highest_sum):\n                highest_sum = lists[i][j]\n    return highest_sum\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(sorted(test_str.count(u) for u in set(test_str)))\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    chars = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'}\n    lower_str = test_str.lower()\n    upp_list = list(chars.keys())\n    upp_dict = {}\n    for i in upp_list:\n        upp_dict[i] = len(list(i))\n    \n    # print(upp_dict)\n    # for char in upp_dict:\n        # print(len(char))\n    \n    max_upp = max(upp_dict, key=upp_dict.get)\n    print(max_upp)\n    print(upp_dict)\n    return max_upp\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Write your code here\n    \n    if (test_str == ''):\n        return 0\n    else:\n        return max(list(map(lambda x: x.isupper(), test_str.split(' '))))"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if test_str[i] not in test_str[i+1:]:\n                max_run += 1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Write your code here\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if max_run < i:\n                max_run = i\n    print(max_run)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_uppercase = 0\n    start_index = 0\n    for index in range(len(test_str)):\n        if test_str[index].isupper():\n            if start_index!= 0:\n                if test_str[start_index].isupper():\n                    if start_index < index:\n                        max_run_uppercase = max(max_run_uppercase, test_str[start_index].upper())\n                    start_index += 1\n                elif test_str[start_index].isupper():\n                    if start_index < index:\n                        max_run_uppercase = max(max_run_uppercase, test_str[start_index].lower())\n                    start_index += 1\n            else:\n                max_run_uppercase = max(max_run_uppercase, test_str[index].upper())\n        else:\n            max_run_uppercase = max(max_run_uppercase, test_str[index])\n    return max_run_uppercase\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_arr = [x.upper() for x in test_str]\n    max_len = 0\n    for x in upper_arr:\n        if len(x) > max_len:\n            max_len = len(x)\n    return max_len\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    c = 0\n    for i in test_str:\n        if i.isupper():\n            c += 1\n            if c > max_run:\n                max_run = c\n        else:\n            c = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_uppercase_value = 0\n    # start at the start of the string, iterate backwards to find the largest run of uppercase characters\n    for index in range(len(test_str) - 1, -1, -1):\n        # if the index is greater than the current length, then it's not a run of uppercase characters\n        if index >= len(test_str):\n            break\n        current_run = 0\n        # check if current_run is less than the max_run_uppercase_value, then it's not a run of uppercase characters\n        if index < 0:\n            for i in range(index):\n                if test_str[i].isupper():\n                    current_run += 1\n            # set the max_run_uppercase_value to be the current run plus 1\n            max_run_uppercase_value = max(max_run_uppercase_value, current_run + 1)\n        # check if current_run is greater than the max_run_uppercase_value\n        elif index >= 0:\n            for i in range(index, len(test_str)):\n                if test_str[i].isupper():\n                    current_run += 1\n            # set the max_run_uppercase_value to be the current run plus 1\n            max_run_uppercase_value = max(max_run_uppercase_value, current_run + 1)\n    return max_run_uppercase_value\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return(max(map(lambda x: x.isupper(), test_str.split())))\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if not nums:\n        return None\n    # if all odd numbers in the list are divisible by 3, return the first one\n    for number in nums:\n        if number%3==0:\n            return number\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] if len(nums)%2!=0 else nums[nums[0]]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_list = []\n    odd = 0\n    for number in nums:\n        if number % 2!= 0:\n            odd += 1\n    return odd\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    even_nums = []\n    for n in nums:\n        if not n%2:\n            even_nums.append(n)\n    return even_nums[0]\n    "
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    nums = sorted(nums)\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            return nums[i]\n    return False\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return sorted(nums)[1]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # your code goes here\n    return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_numbers = []\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0:\n            odd_numbers.append(nums[i])\n    return odd_numbers[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_list = []\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            odd_list.append(nums[i])\n    return odd_list[0]\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #declare the variables\n    total_pairs = 0\n    for x in test_tup:\n        total_pairs = total_pairs + 1\n    #print the number of pairs in the test_tup\n    print(\"Number of pairs in test_tup:\", total_pairs)\n    #create a flag to check the k and print the k if the value is false\n    found = False\n    #print the k\n    for x in test_tup:\n        if x[0] == K:\n            found = True\n    if found == True:\n        print(\"The k is:\", K)\n    else:\n        print(\"The k is not in the test_tup\")\n    return found\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # check if k is in the tuple\n    for i in range(len(test_tup)):\n        # check if the index is the same as the value in the tuple\n        if test_tup[i] == K:\n            # return True\n            return True\n    # if there is no match, return False\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[1] in K\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i[1] == K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) <= K:\n        return False\n    else:\n        if len(test_tup)%K!= 0:\n            return False\n        else:\n            for i in range(K):\n                if test_tup[i] not in test_tup[i+K]:\n                    return False\n            return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)<K:\n        return False\n    elif not K <= len(test_tup) <= len(test_tup):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    flag=0\n    for elem in test_tup:\n        if elem[K]==True:\n            flag=1\n            break\n    if flag==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) > K:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    flag=True\n    for x in range(len(test_tup1)):\n        if test_tup1[x]<test_tup2[x]:\n            flag=False\n            break\n    return flag\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # TEST_TUP1 = (1, 2, 3)\n    # TEST_TUP2 = (4, 5, 6)\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return False\n    if len(test_tup1) == len(test_tup2):\n        for index in range(len(test_tup1)):\n            if test_tup1[index] < test_tup2[index]:\n                return False\n        return True\n    else:\n        print(test_tup1)\n        print(test_tup2)\n        raise ValueError(\"Wrong input\")\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for elem in test_tup2:\n        if elem < test_tup1[0]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return (test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1])\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for x in test_tup2:\n        if x < test_tup1[0]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[1] < test_tup2[1]:\n        return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    }
]