[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    # check all elements in both lists to see if they have the same element\n    for index in range(len(test_tup1)):\n        if test_tup1[index] == test_tup2[index]:\n            return test_tup1[index]\n    return None\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    lst_test_tup = [test_tup1, test_tup2]\n    lst_sorted = sorted(lst_test_tup, key=lambda x: x[0])\n    lst_tup = [lst_sorted[0][0], lst_sorted[1][0]]\n    return lst_tup\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    all_elements = list(set(test_tup1 + test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # YOUR CODE HERE\n    for i in range(0,len(test_tup1)):\n        if test_tup1[i]==test_tup2[i]:\n            return test_tup1[i]\n    return 'No same element in the two lists'\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return test_tup1\n    elif len(test_tup2) < len(test_tup1):\n        return test_tup2\n    else:\n        return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return test_tup1[0] and test_tup2[0]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    elif len(test_tup1) == 1:\n        if test_tup1[0] not in test_tup2:\n            return False\n    elif len(test_tup1) == 2:\n        if test_tup1[0] in test_tup1[1]:\n            return True\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] in test_tup2:\n                return True\n    return False\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    #first create a 2D array and fill it with all the elements in the two lists\n    test_tup1 = test_tup1 + test_tup2\n    \n    #then loop through the 2D array to get all the pairs of elements that share an element\n    #then loop through the 2D array and find the common element and add it to the output array\n    #return the output array\n    \n    #use a dictionary to keep track of which elements are identical in the two lists\n    #if they are identical in the second list, add it to the output array and return\n    #as this is the common element, if two lists are identical, then return the value\n    #of the common element\n    \n    #remember that there are no duplicates in a list\n    \n    #finally, return the output array\n    return test_tup"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    res = []\n    tup1 = test_tup1\n    tup2 = test_tup2\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    i=2\n    while i<=n:\n        if n%i==0:\n            return False\n        else:\n            i+=1\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n == 0):\n        return True\n    if (n % 2 == 0):\n        return False\n    if (n % 3 == 0):\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 2):\n        if (n % i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2 == 0:\n        return False\n    i = 3\n    while i*i <= n:\n        if n%i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n == 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is not a prime number\n    if n % 2 == 0 or n < 2:\n        return True\n    # check if n is divisible by any number between 2 and n-1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return (n>1) & (n%2==0) & (n%3==0) & (n%4==0) & (n%5==0) & (n%6==0)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create an empty queue\n    heap = []\n    # Create a function to sort the numbers\n    def sort(nums):\n        sorted_nums = []\n        # Insert the sorted numbers into the queue\n        for i in range(len(nums)):\n            heapq.heappush(heap,nums[i])\n        # Remove the numbers that are larger than the length of the queue\n        for i in range(n):\n            while heapq.heappop(heap) <= heapq.heappop(heap):\n                # We dont want to insert the numbers from heapq into the queue\n                # because it will be bigger than the length of the queue\n                # So we need to skip that element\n                if heapq.heappop(heap) >= heap[0]:\n                    continue\n                else:\n                    sorted_nums.append(heapq.heappop(heap))\n        return sorted_nums\n    # Sort the list\n    sorted_nums = sort(nums)\n    # Return the largest number\n    return sorted_nums[-n:]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create an empty queue\n    heap = []\n    # Create a function to sort the numbers\n    def sort(nums):\n        sorted_nums = []\n        # Insert the sorted numbers into the queue\n        for i in range(len(nums)):\n            heapq.heappush(heap,nums[i])\n        # Remove the numbers that are larger than the length of the queue\n        for i in range(n):\n            while heapq.heappop(heap) <= heap[0]:\n                # We dont want to insert the numbers from heapq into the queue\n                # because it will be bigger than the length of the queue\n                # So we need to skip that element\n                if heapq.heappop(heap) >= heap[0]:\n                    continue\n                else:\n                    sorted_nums.append(heapq.heappop(heap))\n        return sorted_nums\n    # Sort the list\n    sorted_nums = sort(nums)\n    # Return the smallest number\n    return sorted_nums[-n:]\ndef heap_queue_smallest_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create an empty queue\n    heap = []\n    # Create a function to sort the numbers\n    def sort(nums):\n        sorted_nums = []\n        # Insert the sorted numbers into the queue\n        for i in range(len(nums)):\n            heapq.heappush(heap,nums[i])\n        # Remove the numbers that are larger than the length of the queue\n        for i in range(n):\n            while heapq.heappop(heap) <= heap[0]:\n                # We dont want to insert the numbers from heapq into the queue\n                # because it will be bigger than the length of the queue\n                if heapq.heappop(heap) >= heap[0]:\n                    continue\n                else:\n                    sorted_nums.append(heapq.heappop(heap))\n        return sorted_nums\n    # Sort the list\n    sorted_nums = sort(nums)\n    # Return the smallest number\n    return sorted_nums[-n:]\ndef heap_queue_second_largest(nums,n):\n    '''\n    Write a function to find the n second largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create an empty queue\n    heap = []\n    # Create a function to sort the numbers\n    def sort(nums):\n        sorted_nums = []\n        # Insert the sorted numbers into the queue\n        for i in range(len(nums)):\n            heapq.heappush(heap,nums[i])\n        # Remove the numbers that are larger than the length of the queue\n        for i in range(n):\n            while heapq.heappop(heap) <= heap[0]:\n                # We dont want to insert the numbers from heapq into the queue\n                # because it will be bigger than the length of the queue\n                if heapq.heappop(heap) >= heap[0]:\n                    continue\n                else:\n                    sorted_nums.append(heapq.heappop(heap))\n        return sorted_nums\n    # Sort the list\n    sorted_nums = sort(nums)\n    # Return the second largest number\n    return sorted_nums[-n:]\ndef heap_queue_second_largest_smallest(nums,n):\n    '''\n    Write a function to find the n second smallest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create an empty queue\n    heap = []\n    # Create a function to sort the numbers\n    def sort(nums):\n        sorted_nums = []\n        # Insert the sorted numbers into the queue\n        for i in range(len(nums)):\n            heapq.heappush(heap,nums[i])\n        # Remove the numbers that are larger than the length of the queue\n        for i in range(n):\n            while heapq.heappop(heap) <= heap[0]:\n                # We dont want to insert the numbers from heapq into the queue\n                # because it will be bigger than the length of the queue\n                if heapq.heappop(heap) >= heap[0]:\n                    continue\n                else:\n                    sorted_nums.append(heapq.heappop(heap))\n        return sorted_nums\n    # Sort the list\n    sorted_nums = sort(nums)\n    # Return the second smallest number\n    return sorted_nums[-n:]\ndef heap_queue_second_smallest_largest(nums,n):\n    '''\n    Write a function to find the n second smallest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create an empty queue\n    heap = []\n    # Create a function to sort the numbers\n    def sort(nums):\n        sorted_nums = []\n        # Insert the sorted numbers into the queue\n        for i in range(len(nums)):\n            heapq.heappush(heap,nums[i])\n        # Remove the numbers that are larger than the length of the queue\n        for i in range(n):\n            while heapq.heappop(heap) <= heap[0]:\n                # We dont want to insert the numbers from heapq into the queue\n                # because it will be bigger than the length of the queue\n                if heapq.heappop(heap) >= heap[0]:\n                    continue\n                else:\n                    sorted_nums.append(heapq.heappop(heap))\n        return sorted_nums\n    # Sort the list\n    sorted_nums = sort(nums)\n    # Return the second smallest number\n    return sorted_nums[-n:]\ndef heap_queue_smallest_second_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create an empty queue\n    heap = []\n    # Create a function to sort the numbers\n    def sort(nums):\n        sorted_nums = []\n        # Insert the sorted numbers into the queue\n        for i in range(len(nums)):\n            heapq.heappush(heap,nums[i])\n        # Remove the numbers that are larger than the length of the queue\n        for i in range(n):\n            while heapq.heappop(heap) <= heap[0]:\n                # We dont want to insert the numbers from heapq into the queue\n                # because it will be bigger than the length of the queue\n                if heapq.heappop(heap) >= heap[0]:\n                    continue\n                else:\n                    sorted_nums.append(heapq.heappop(heap))\n        return sorted_nums\n    # Sort the list\n    sorted_nums = sort("
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq_nums = hq.nlargest(n,nums)\n    return hq_nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # to find largest, find the first element, and then divide by 2, \n    # after that, remove the first element and continue iterating\n    if n == 0:\n        return None\n    elif n < 0:\n        return None\n    else:\n        queue = []\n        for i in range(n):\n            heapq.heappush(queue,nums[i])\n        while queue:\n            x = heapq.heappop(queue)\n            heapq.heapify(queue)\n            y = heapq.heappop(queue)\n            if y!= x:\n                heapq.heappush(queue,y)\n                heapq.heappush(queue,x)\n        return hq.nlargest(n,queue)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==1:\n        return nums\n    else:\n        return hq.nlargest(n,nums)[::-1]\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    heapq.heapify(max_heap)\n    for i in nums:\n        heapq.heappushpop(max_heap,-i)\n    return [(-i,num) for num,i in enumerate(max_heap)]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    l = []\n    while nums:\n        l.append(hq.heappop(nums))\n        nums.remove(hq.heappop(nums))\n    return l\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],i])\n    sorted_array = []\n    for i in range(n):\n        sorted_array.append(heapq.heappop(heap)[1])\n    return sorted_array\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def helper(num):\n        '''\n        A helper function that returns the largest number that is greater than the given value\n        '''\n        if num==0:\n            return 0\n        if num==1:\n            return num\n        \n        if num<1:\n            return -1\n        \n        max_of_two=helper(num-1)\n        if max_of_two!=-1 and num>=max_of_two:\n            return max_of_two\n        else:\n            return helper(num-1)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 0: return []\n    heap = []\n    for i in range(len(nums)):\n        heapq.heappush(heap,nums[i])\n    while heap:\n        n = heapq.heappop(heap)\n        nums.remove(n)\n        for i in range(len(nums)):\n            heapq.heappush(heap,nums[i] + n)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n-1,0,-1):\n        heapq.heappush(nums,-hq.heappop(nums))\n    return -hq.heappop(nums)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    num1 = x % 2\n    num2 = (x - (num1 * 2))\n    return num2 == 0"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    pass"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # your code here\n    if x%2!=0:\n        print(\"You have to write two numbers only.\")\n        return 0\n    if x%2==0:\n        print(\"You have to write two numbers only.\")\n        return 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 :\n        return True\n    else:\n        return False\ndef main():\n    '''\n    1. you need to convert user_input from input() to int(x)\n    2. you need to check the type of user_input\n    3. you need to check if is_Power_Of_Two(x)\n    4. you need to check if x is even\n    5. you need to return result\n    '''\n    x = int(input(\"enter a number: \"))\n    if is_Power_Of_Two(x):\n        print(\"true\")\n    else:\n        print(\"false\")\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #Base case\n    if (x == 0):\n        return 0\n    #recursive case\n    elif (x == 1):\n        return 1\n    #code for below bit\n    else:\n        if (x & 1):\n            return (2 * is_Power_Of_Two (x >> 1))\n        else:\n            return (2 * is_Power_Of_Two (x >> 1)) + 1"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2:\n        return True\n    if x == 1:\n        return False\n    elif x == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x >= 2):\n        for i in range(1, x):\n            if (x % i == 0):\n                return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 1: \n        return False\n    else: \n        return x % 2 == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 :\n        return True\n    elif x % 2 == 0 :\n        return False\n    else :\n        return False\n    \ndef is_Divisors (x): \n    '''\n    Write a python function to check whether the n is a divisor of x.\n    '''\n    if x % 2!= 0: \n        return False\n    if x % 3 == 0: \n        return True\n    else: \n        return False\n    \ndef is_Perfect (n): \n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    x = int(n)\n    y = 2\n    if(is_Power_Of_Two(x) == False) : \n        return False\n    while y < (x + 1) : \n        if(is_Divisors(y) == True) : \n            if(is_Perfect(y) == True) : \n                return True\n        y += 2\n    return False\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    longest_word = text.split()\n    all_longest_words = []\n    for word in longest_word:\n        if len(word) >= 4:\n            all_longest_words.append(word)\n    return all_longest_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    found = {}\n    for word in text.split(' '):\n        if len(word) >= 4:\n            if word not in found:\n                found[word] = True\n            else:\n                found[word] = False\n    return found\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # First we get all the text where all the words are at least 4 characters long.\n    long_chars = re.findall(r'\\w{4,}', text)\n    # print(long_chars)\n    long_words = []\n    # Iterate over the text, all the words which are at least 4 characters long.\n    for char in long_chars:\n        # Here, if a word contains more than 2 characters, we will make it longer than the number of characters.\n        if len(char) > 1:\n            long_words.append(char)\n    # print(long_words)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split text into words\n    words = text.split()\n    # loop through words\n    for word in words:\n        # split word by'' and get length\n        split_word = word.split(' ')\n        # get length of split word\n        length = len(split_word)\n        # if length is 4\n        if length >= 4:\n            # set the loop back to start\n            start = 0\n            # find the first'' in word and check the length\n            for i in range(length):\n                if word[i] =='':\n                    start = i\n                    break\n            # if the word has'' at the end\n            if word[-1] =='':\n                # remove last word\n                word = word[:-1]\n            # create an if statement to go through each word and\n            # if there is''\n            if word[start: start + length - 1] =='':\n                # add'' to word\n                word +=''\n            # if there is no''\n            if word[start: start + length - 1] == '':\n                # remove'' from word\n                word = word[:-1]\n            # if the word is not too long\n            if len(word) >= 4:\n                # check the length of the word\n                if word[start: start + length - 1] == word:\n                    # if the word is exactly 4 letters long\n                    # print the word, if it is\n                    if len(word) == 4:\n                        print(word)\n    return ''\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if len(text) == 0:\n        return []\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # list comprehension with dictionary comprehension\n    result = [letter for letter in text if len(letter) >= 4]\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    '''\n    This function works on a list of words.\n    '''\n    '''\n    For each word in list, write a line of 1 or 0 for each char that appears more than once.\n    '''\n    '''\n    @param text the text to find long words in\n    @return a list of words which are at least 4 characters long in text.\n    '''\n    long_list = []\n    for word in text:\n        long_list.append(word[:4])\n    print(long_list)\n    long_list = []\n    for word in text:\n        if len(word) >= 4:\n            long_list.append(1)\n        else:\n            long_list.append(0)\n    print(long_list)\n    return long_list\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # get the length of the string\n    length = len(text)\n    # declare a variable to store the length of word\n    long_word = 0\n    # loop through every character\n    for i in range(length):\n        # if the character is at least 4 characters long\n        if text[i] >= 4:\n            # add 1 to the long_word\n            long_word += 1\n    return long_word\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #return text.count(' ') >= 4\n    return re.findall('[a-zA-Z][a-zA-Z0-9_]*', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('[A-Z]+', text)\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    return [square_of_num for square_of_num in nums if square_of_num % 2 == 0]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    def squares(num):\n        return num * num\n    squares = list(map(squares, nums))\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num * num)\n    return squares\n    \ndef merge_sort(nums):\n    '''\n    Write a function that takes a list as an argument.\n    Then sort the list by the elements of the original list and\n    then merge the sorted list into a new sorted list.\n    '''\n    def merge(a, b):\n        '''\n        Write a function that takes two lists as arguments.\n        Returns a new sorted list with all elements of both lists\n        sorted in ascending order.\n        '''\n        return sorted(a + b)\n    \n    if len(nums) > 1:\n        mid = len(nums) // 2\n        a = merge(nums[:mid], nums[mid:])\n        b = merge(nums[mid:], a)\n        return merge(a, b)\n    return nums\n    \ndef run():\n    nums = [5, 2, 3, 6, 10, 7, 1, 8, 4, 9, 9]\n    print(square_nums(nums))\n    print(merge_sort(nums))\n    print(nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #return [num**2 for num in nums]\n    return [num ** 2 for num in nums if num % 2 == 0]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square = []\n    for i in range(0, len(nums)):\n        square.append(nums[i] ** 2)\n    return square\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_nums = [i*i for i in nums]\n    return square_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    def square_nums(nums):\n        result = []\n        \n        for x in nums:\n            result.append(x**2)\n        \n        return result\n    \n    return square_nums(nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def Rotations(str):\n        if len(str)<4:\n            return 1\n        elif len(str)<8:\n            return 2\n        else:\n            return 3\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_list = [str[0]]\n    for i in range(1, len(str)):\n        if str[i]!= str[i-1]:\n            str_list.append(str[i])\n    rotations = 0\n    for i in range(len(str_list)):\n        for j in range(i, len(str_list)):\n            if str_list[i] == str_list[j]:\n                rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < 5:\n        return 0\n    rotations = 0\n    curr_rotations = 1\n    for i in range(len(str) - 5):\n        if curr_rotations > 1:\n            rotations += 1\n        if str[i] == str[i + 1] and str[i] == str[i + 2] and str[i] == str[i + 3] and str[i] == str[i + 4]:\n            curr_rotations += 1\n        else:\n            curr_rotations = 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i]!= str[j]:\n                if str[i]!= str[j]:\n                    rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < 2:\n        return 0\n    m = 0\n    n = 0\n    for i in range(len(str)):\n        if str[i] == str[i-1] and str[i] == str[i+1]:\n            m += 1\n            n = 0\n            continue\n        else:\n            n += 1\n            if n == m:\n                return 1\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for index in range(len(str)-1):\n        if str[index]!= str[index+1]:\n            rotations += 1\n    return rotations\n    \ndef main():\n    #print(\"Enter the string:\")\n    #str = input()\n    print(\"Enter the string:\")\n    str = 'quiz'\n    print('rotations: {}'.format(find_Rotations(str)))\n    print('Rotations: {}'.format(find_Rotations(str)))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) <= 2:\n        if len(str) == 1:\n            return 2\n        else:\n            return len(str)\n    else:\n        if (str[0] == str[1] and str[0] == str[2]):\n            return 1\n        elif (str[0] == str[1] and str[1] == str[2]):\n            return 1\n        elif (str[0] == str[1] and str[2] == str[3]):\n            return 1\n        elif (str[0] == str[2] and str[1] == str[3]):\n            return 1\n        elif (str[2] == str[3] and str[0] == str[1]):\n            return 1\n        elif (str[2] == str[3] and str[0] == str[1]):\n            return 1\n        else:\n            return 2\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    l = len(str)\n    if l == 1:\n        return 1\n    for i in range(l-1):\n        if str[i]!= str[i+1]:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    str = str.lower()\n    for i in range(len(str)-1):\n        for j in range(i+1, len(str)):\n            if str[i]!= str[j]:\n                if str[i] == \"a\" and str[j] == \"b\" or str[i] == \"b\" and str[j] == \"a\":\n                    rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    arr = list(str)\n    min_rotations = 0\n    for i in range(len(arr) - 1):\n        for j in range(len(arr) - 1):\n            if arr[j] == arr[j + 1]:\n                arr[j] *= 2\n                arr[j + 1] *= 2\n            else:\n                break\n        if arr[i] == arr[i + 1]:\n            arr[i] *= 2\n            arr[i + 1] *= 2\n        else:\n            break\n        if arr[i] > arr[i+1]:\n            min_rotations += 1\n    return min_rotations\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # if char is present at the start of the string, it will be removed\n    if s[0] == ch:\n        s = s[1:]\n    # if char is present at the end of the string, it will be removed\n    if s[-1] == ch:\n        s = s[:-1]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0 or len(s) == 1: \n        return s \n    if ch not in s: \n        return s \n    i = 0 \n    j = -1 \n    while (i < len(s)) : \n        if s[i] == ch: \n            if j == -1 or j == -1: \n                j = i \n            else: \n                j = j + 1\n            i = i + 1 \n        else : \n            i = i + 1 \n    s = s[:j] + s[j+1:] \n    return s \n    \ndef remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0 or len(s) == 1: \n        return s \n    if ch not in s: \n        return s \n    i = 0 \n    j = -1 \n    while (i < len(s)) : \n        if s[i] == ch: \n            if j == -1 or j == -1: \n                j = i \n            else: \n                j = j + 1\n            i = i + 1 \n        else : \n            i = i + 1 \n    s = s[:j] + s[j+1:] \n    return s \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    lst = list(s)\n    if ch not in lst:\n        print(\"ERROR: character is not present in string\")\n    else:\n        lst.remove(ch)\n        print(f'Removed {ch}')\n        print(''.join(lst))\n        return str(''.join(lst))\n        \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == -1 : return s\n    if ch =='':\n        return s[:len(s) - 1]\n    elif ch == '+':\n        return s[:len(s) - 2] + s[len(s) - 1:]\n    elif ch == '+-':\n        return s[:len(s) - 2] + s[len(s) - 1: len(s) - 1 - 1: -1] + s[len(s) - 1:]\n    elif ch == 'x':\n        return s[:len(s) - 2] + s[len(s) - 1: len(s) - 1 - 1: -1] + s[len(s) - 1:]\n    else:\n        return s[:len(s) - 2] + s[len(s) - 1: len(s) - 1: -1] + s[len(s) - 1: len(s) - 1: -1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)==0:\n        return \"\"\n    elif len(s)==1:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s.replace(ch,\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=str(s)\n    if len(s)==0:\n        return ''\n    if s[0]==ch:\n        return s[1:]\n    else:\n        return s[0:-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Your code here\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if(not s):\n        return s\n    if(s[0]==ch):\n        return s[1:]+s[0]\n    else:\n        return s[0]+s[1:]\n    \n    \n    \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0:len(ch)]==ch:\n        return s[len(ch):-1]\n    else:\n        return s[:len(ch)] + remove_Occ(s[len(ch):],ch)\n    \ndef remove_Occ2(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s[s.index(ch)::1]\n    else:\n        return s[:len(ch)] + remove_Occ2(s[len(ch):],ch)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = 0\n    M.sort()\n    for i in range(len(M)):\n        s += M[i]\n    return M, s\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #print(M)\n    for i in range(0,len(M)):\n        temp = M[i][0]\n        for j in range(1,len(M)):\n            if temp < M[j][0]:\n                temp = M[j][0]\n                M[j][0] = M[i][0]\n                M[i][0] = temp\n    \n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # your code here\n    A = []\n    for row in range(len(M)):\n        A.append([])\n        for column in range(len(M[0])):\n            A[row].append(M[row][column])\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if M[i][j] == 0:\n                M[i][j] = 1\n                break\n            elif M[i][j] > 0:\n                M[i][j] = 0\n    #print(A)\n    for row in A:\n        row.sort()\n    for row in A:\n        print(row)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) == 0 or len(M[0]) == 0:\n        return M\n    n = len(M)\n    rows = [0] * n\n    for i in range(n):\n        sum_rows = 0\n        for j in range(i,n):\n            sum_rows += M[j][i]\n        rows[i] = sum_rows\n    for j in range(n-1, -1, -1):\n        sum_cols = 0\n        for i in range(n-1,j,-1):\n            sum_cols += M[i][j]\n        rows[j] = sum_cols\n    for i in range(n):\n        M[i] = sorted(rows[i:i+n], reverse=True)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #TODO: Write your code here\n    return\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            sum_row = 0\n            for k in range(len(M[i][j])):\n                sum_row += M[i][j][k]\n            M[i][j].append(sum_row)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        sum_row = 0\n        for j in range(len(M[i])):\n            sum_row = sum_row + M[i][j]\n        M[i].append(sum_row)\n    return M\n    \ndef print_matrix(M):\n    '''\n    Print the matrix with its sum of each row.\n    '''\n    for i in range(len(M)):\n        print(' '.join([str(j) for j in M[i]]))\n        \n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M[0])\n    M.sort(key=lambda x: sum(x))\n    for i in range(n):\n        for j in range(i, n):\n            if M[i][j]!= 0:\n                M[i][j] *= (-1)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    L = []\n    for i in range(len(M)):\n        L.append(sum(M[i]))\n    L.sort(reverse = True)\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = L[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if M[j][i] == 0:\n                break\n            elif M[j][i] < 0:\n                M[i], M[j] = M[j], M[i]\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(f\"Volume of the triangle is : {l*b*h}\")\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #This code is contributed by Subalit Kunde.\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    c = (b**2 - 4*a*h)\n    if c<0 : \n        print('The volume is not triangular!')\n    else : \n        volume = 4*a*math.pi*b*h\n        print('The volume of a triangular prism is',volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = float(input(\"Enter the length of the box: \"))\n    b = float(input(\"Enter the breadth of the box: \"))\n    h = float(input(\"Enter the height of the box: \"))\n    if (l < 0) or (b < 0) or (h < 0) : \n        print(\"Error, the box must be greater than 0.\")\n        exit()\n    if (l == 0) : \n        print(\"Error, the box length must be greater than 0.\")\n        exit()\n    if (b == 0) : \n        print(\"Error, the box breadth must be greater than 0.\")\n        exit()\n    if (h == 0) : \n        print(\"Error, the box height must be greater than 0.\")\n        exit()\n    if (l == 0) : \n        print(\"Error, the box length must be greater than 0.\")\n        exit()\n    if (b == 0) : \n        print(\"Error, the box breadth must be greater than 0.\")\n        exit()\n    if (h == 0) : \n        print(\"Error, the box height must be greater than 0.\")\n        exit()\n    if (l < 0) : \n        print(\"Error, the length of the box is negative.\")\n        exit()\n    if (b < 0) : \n        print(\"Error, the breadth of the box is negative.\")\n        exit()\n    if (h < 0) : \n        print(\"Error, the height of the box is negative.\")\n        exit()\n    Volume = l * b * h\n    print(\"The volume of the prism is: \", Volume)\n    exit()\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Your code goes here\n    pass"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*h**2\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return abs(b*l*(h/2))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return h*b*l\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #variables\n    x = l\n    y = b\n    z = h\n    #Code\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #raise NotImplementedError(\"Method not yet implemented\")\n    if h < 0 : raise ValueError(\"Value of h must be greater than 0\")\n    if h == 0 : raise ValueError(\"h must be greater than 0\")\n    if b < 0 : raise ValueError(\"Value of b must be greater than 0\")\n    if b == 0 : raise ValueError(\"b must be greater than 0\")\n    if l < 0 : raise ValueError(\"Value of l must be greater than 0\")\n    if l == 0 : raise ValueError(\"l must be greater than 0\")\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('[a-z][A-Z][a-z]')\n    return pattern.search(text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile(r\"[A-Z]{1,}[a-z]\")\n    return regex.findall(text)!= []\ndef is_number(text):\n    '''\n    Write a function to check if the input string contains digits.\n    '''\n    regex = re.compile(r\"[0-9]\")\n    return regex.findall(text)!= []\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]{3,}[a-z]', text.lower())!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #text = input('Enter the string: ')\n    #lower_text = text.lower()\n    #num = 0\n    #for i in lower_text:\n    #    if i in 'abcdefghijklmnopqrstuvwxyz0123456789_':\n    #        num += 1\n    #if num == 3:\n    #    return True\n    #else:\n    #    return False\n    lower_text = text.lower()\n    num = 0\n    for i in lower_text:\n        if i in 'abcdefghijklmnopqrstuvwxyz0123456789_':\n            num += 1\n    if num == 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('[a-z]')\n    return pattern.search(text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'\\b([a-zA-Z0-9_]+)\\b', text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(\"[a-z]\", text) is not None or re.search(\"[A-Z]\", text) is not None or re.search(\"[0-9]\", text) is not None or re.search(\"[#]\", text) is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('[a-zA-Z0-9_]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False\ndef get_number_from_text(text):\n    '''\n    Return the number at the given text.\n    '''\n    pattern = re.compile('(\\d+)')\n    try:\n        return int(pattern.search(text).group())\n    except AttributeError:\n        return -1\n    except:\n        return -1\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = False\n    if (text[0] == '_'):\n        return True\n    for char in text:\n        if (char.islower()):\n            result = result and text.count(char) > 1\n    return result\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    a = int(a)\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    import math\n    return math.sqrt(a * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # write your code here\n    # raise NotImplementedError()\n    return (4*a*a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a == None:\n        print(\"An error occured\")\n        return None\n    \n    return (a*a + 2*(a*a +2))/2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if len(a) < 2:\n        return 0\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    for i in range(len(a)):\n        perimeter += a[i]\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    #Your code here\n    return 4*(a**2)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a\n    print(perimeter)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = []\n    i=0\n    while i < len(string):\n        j=0\n        while j < len(string):\n            if string[j] == string[i]:\n                del string[j]\n                i=i-1\n                j=j-1\n            j=j+1\n        i=i+1\n    return list_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = [x for x in string if x not in set(string)]\n    return lst\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    newList = []\n    for letter in string:\n        if letter in string:\n            newList.append(letter)\n    return newList\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    for character in string:\n        if character not in string_list:\n            string_list.append(character)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #This code is to remove special characters from the strings.\n    # string = 'The quick brown fox jumps over the lazy dog'\n    # string = 'Qui est?'\n    # string = 'Qui est!'\n    # string = 'Qui est,'\n    # string = 'Qui est, qui est!'\n    # string = 'Qui est!Qui est!'\n    # string = 'Qui est!Qui est!'\n    # string = 'Qui est, qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'\n    # string = 'Qui est, qui est!Qui est!'"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [x for x in string.split() if x not in string.split(str_to_list(string)[0])]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_list = []\n    for i in string:\n        if i in new_list:\n            pass\n        else:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = list(string)\n    lst[0] = ''\n    return ''.join(lst)\ndef reverse_string(string):\n    '''\n    Write a function to reverse the given string.\n    '''\n    string_in_list = str_to_list(string)\n    rev_string = ''\n    for i in range(0, len(string_in_list)):\n        rev_string = string_in_list[i] + rev_string\n    return rev_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    if not isinstance(string, str):\n        raise TypeError(\"Only str is allowed for parameters\")\n    \n    parsed = string.split(' ')\n    parsed = [char for char in parsed if char in parsed[0] and char not in parsed[1]]\n    return parsed\n    \ndef list_to_str(string): \n    '''\n    Write a function to convert a list to a string\n    '''\n    \n    if not isinstance(string, str):\n        raise TypeError(\"Only str is allowed for parameters\")\n    \n    parsed =''.join(string)\n    return parsed\n    \ndef str_to_set(string): \n    '''\n    Write a function to convert a string to a set\n    '''\n    \n    if not isinstance(string, str):\n        raise TypeError(\"Only str is allowed for parameters\")\n    \n    return set(string.split(' '))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    temp = arraynums.copy()\n    print(temp)\n    for x in range(len(temp)):\n        print(temp)\n        for y in range(len(temp)):\n            print(temp)\n            print(x)\n            print(y)\n            if (x!= y):\n                temp[x] += temp[y]\n                temp[x] += temp[y]\n                print(temp)\n                print(x)\n                print(y)\n    print(temp)\n    count = 0\n    for x in range(len(temp)):\n        if (temp[x] > 1):\n            count += 1\n    if(count > 0):\n        print('True')\n    else:\n        print('False')\n        \n        \n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    def duplicate_check(arr):\n        for i in arr:\n            if i in arr:\n                return True\n        return False\n    \n    arr = arraynums\n    \n    if duplicate_check(arr):\n        print(\"Duplicate found\")\n    else:\n        print(\"Not a duplicate\")\n    \n    \nif __name__ == \"__main__\":\n    #main()\n    test_duplicate([3,3,4,5,7,7,10,10,11,12,16,17,18,18,19]"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # write a function to find whether a given array of integers contains any duplicate element.\n    # \n    # Example:\n    #\n    # arr = [1,2,2,3,1,3,4,6,6]\n    #\n    # find_duplicate(arr) should return True\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> True\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, 6, 6] -> False\n    #\n    # [1, 2, 2, 3, 1, 3, 4, "
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # define a function that takes an array of integers as an argument and return true if there are any duplicate elements\n    def duplicate(array):\n        # initialize an empty list to store duplicate numbers\n        duplicate = []\n        \n        # iterate through the elements of the array\n        for i in array:\n            if i in duplicate:\n                return True\n            else:\n                duplicate.append(i)\n    \n        # return false if the list is empty\n        return False\n    \n    # return the function if the array contains any duplicate numbers\n    return duplicate(arraynums)\n    \n    # test the function\n    print(test_duplicate([3, 3, 2, 3, 1, 2, 2, 3]))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Time Complexity: O(n^2)\n    # Space Complexity: O(1)\n    # Dynamic Programming Approach\n    # NOTE: Think of a HashMap for the given array of numbers.\n    # While checking each number in the array,\n    #   check if it has already been seen.\n    #   if not, add it to the HashMap.\n    #   else, check if it has already been seen.\n    #   if not, update the value\n    #   if it has already been seen, return True.\n    #   else, continue with the next.\n    array = arraynums\n    array.sort()\n    index = 0\n    duplicate_index = -1\n    for i in range(len(array)):\n        if array[i] == array[index]:\n            duplicate_index = i\n            break\n    if duplicate_index == -1:\n        return True\n    for i in range(duplicate_index + 1, len(array)):\n        if array[i] == array[index]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = []\n    for num in arraynums:\n        if num in duplicates:\n            pass\n        else:\n            duplicates.append(num)\n    return duplicates\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if i not in arraynums:\n            return False\n    return True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(is_duplicate(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = [int(el) for el in arraynums]\n    array = set(array)\n    return len(array)!= len(set(array))\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if x % 2 == 0 else False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0:\n        return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == 2 or x == 5 or x == 3 or x == 6 or x == 7 or x == 8 or x == 9 or x == 10 or x == 11 or x == 12 or x == 13 or x == 14 or x == 15 or x == 16 or x == 17 or x == 18 or x == 19 or x == 20 or x == 21 or x == 22 or x == 23 or x == 24 or x == 25 or x == 26 or x == 27 or x == 28 or x == 29 or x == 30 or x == 31 or x == 32 or x == 33 or x == 34 or x == 35 or x == 36 or x == 37 or x == 38 or x == 39 or x == 40 or x == 41 or x == 42 or x == 43 or x == 44 or x == 45 or x == 46 or x == 47 or x == 48 or x == 49 or x == 50 or x == 51 or x == 52 or x == 53 or x == 54 or x == 55 or x == 56 or x == 57 or x == 58 or x == 59 or x == 60 or x == 61 or x == 62 or x == 63 or x == 64 or x == 65 or x == 66 or x == 67 or x == 68 or x == 69 or x == 70 or x == 71 or x == 72 or x == 73 or x == 74 or x == 75 or x == 76 or x == 77 or x == 78 or x == 79 or x == 80 or x == 81 or x == 82 or x == 83 or x == 84 or x == 85 or x == 86 or x == 87 or x == 88 or x == 89 or x == 90 or x == 91 or x == 92 or x == 93 or x == 94 or x == 95 or x == 96 or x == 97 or x == 98 or x == 99 or x == 100:\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==0 or x==1:\n        return True\n    elif x<0 or x>4:\n        return False\n    else:\n        return False\n        \n    \nprint(is_woodall(1))\nprint(is_woodall(2))\nprint(is_woodall(3))\nprint(is_woodall(4))\nprint(is_woodall(5))\nprint(is_woodall(6))\nprint(is_woodall(7))\nprint(is_woodall(8))\nprint(is_woodall(9))\nprint(is_woodall(10))"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0: return False\n    if x%4 == 0: return True\n    if x%2 == 0: return True\n    if x%5 == 0: return True\n    if x%3 == 0: return True\n    else: return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        print('false')\n    else:\n        print('true')\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    iswoodball = True\n    for i in range(3, x+1):\n        if x % i == 0:\n            iswoodball = False\n            break\n    return iswoodball\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num!= 0:\n        rev_num = (num % 10) + rev_num\n        num = num // 10\n    if rev_num == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return False\n    else:\n        i = 0\n        j = len(num) - 1\n        flag = 0\n        while(i < j):\n            if (num[i]!= num[j]):\n                flag = 1\n                if j - i == 1:\n                    if num[j] == 0:\n                        return False\n                    else:\n                        return False\n                else:\n                    if num[j] == 0:\n                        return False\n                    else:\n                        i = i + 1\n                        j = j - 1\n            else:\n                i = i + 1\n                j = j - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) < int(str(num)[::-1]"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0 or num == 1:\n        return num\n    else:\n        return rev(num-2) + num - 2\n    \ndef rev_str(num):    \n    '''\n    Write a python function to find all the permutations of string.\n    '''\n    if num == 0 or num == 1:\n        return \"\".join(range(1, num+1))\n    else:\n        return rev_str(num-1)+rev_str(num-2)\n    \ndef rev_str2(num):    \n    '''\n    Write a python function to calculate sum of permutations of string.\n    '''\n    if num == 0 or num == 1:\n        return 0\n    else:\n        return rev_str2(num-1)+rev_str2(num-2)\n    \ndef all_permutations_of_list(list):\n    '''\n    Write a python function to find all permutations of a given list.\n    '''\n    if list == []:\n        return []\n    else:\n        perm = []\n        for i in range(len(list)):\n            perm.append(list[i])\n            perm.append(list[len(list) - i - 1])\n        perm.reverse()\n        return perm\n    \ndef sum_of_permutations_of_list(list):\n    '''\n    Write a python function to find the sum of permutations of a given list.\n    '''\n    if list == []:\n        return 0\n    else:\n        sum = 0\n        for i in range(len(list)):\n            sum += list[i] * (len(list)-i-1)\n        return sum\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num //= 10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    return rev(num - 1)\ndef rev_check(num):\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    return rev_check(num - 1)\ndef odd_even(num):\n    if num == 0:\n        return 'Even'\n    if num == 1:\n        return 'Odd'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef even_odd(num):\n    if num == 0:\n        return 'Even'\n    if num == 1:\n        return 'Odd'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef odd_even_odd(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec(num):\n    if num == 0:\n        return 'Even'\n    if num == 1:\n        return 'Odd'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_check(num):\n    if num == 0:\n        return 'Even'\n    if num == 1:\n        return 'Odd'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef even_odd_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef even_odd_odd(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef even_odd_even_odd(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_even_odd(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_even_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_even_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_odd_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_odd_even_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_odd_odd_even_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_odd_odd_even_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_odd_odd_even_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_odd_odd_even_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_odd_odd_even_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_odd_odd_even_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_odd_odd_even_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_odd_odd_even_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_odd_odd_even_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_odd_odd_even_even(num):\n    if num == 0:\n        return 'Odd'\n    if num == 1:\n        return 'Even'\n    if num%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\ndef rec_even_odd_odd_odd_odd_odd_even"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while num >= 10:\n        rem = num % 10\n        num = num // 10\n    if rem == 0:\n        num += 1\n    return num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_list = []\n    i = 0\n    while i < len(str(num)):\n        rev_list.append(str(num)[::-1][i:len(str(num)) - i])\n        i += 1\n    if int(''.join(rev_list)) < 2 * int(''.join(rev_list)):\n        print('It is NOT one less than twice its reverse.')\n    else:\n        print('It is one less than twice its reverse')\n    return num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    num2 = len(num)-1\n    if num < 2:\n        return num2\n    elif num < 3:\n        return num2-1\n    elif num <4:\n        return num2+1\n    elif num < 5:\n        return num2-2\n    elif num <6:\n        return num2+2\n    elif num <7:\n        return num2-3\n    elif num <8:\n        return num2+3\n    elif num <9:\n        return num2-4\n    elif num <10:\n        return num2+4\n    elif num <11:\n        return num2-5\n    elif num <12:\n        return num2+5\n    elif num <13:\n        return num2-6\n    elif num <14:\n        return num2+6\n    elif num <15:\n        return num2-7\n    elif num <16:\n        return num2+7\n    elif num <17:\n        return num2-8\n    elif num <18:\n        return num2+8\n    elif num <19:\n        return num2-9\n    elif num <20:\n        return num2+9\n    elif num <21:\n        return num2-10\n    elif num <22:\n        return num2+10\n    elif num <23:\n        return num2-11\n    elif num <24:\n        return num2+11\n    elif num <25:\n        return num2-12\n    elif num <26:\n        return num2+12\n    elif num <27:\n        return num2-13\n    elif num <28:\n        return num2+13\n    elif num <29:\n        return num2-14\n    elif num <30:\n        return num2+14\n    elif num <31:\n        return num2-15\n    elif num <32:\n        return num2+15\n    elif num <33:\n        return num2-16\n    elif num <34:\n        return num2+16\n    elif num <35:\n        return num2-17\n    elif num <36:\n        return num2+17\n    elif num <37:\n        return num2-18\n    elif num <38:\n        return num2+18\n    elif num <39:\n        return num2-19\n    elif num <40:\n        return num2+19\n    elif num <41:\n        return num2-20\n    elif num <42:\n        return num2+20\n    elif num <43:\n        return num2-21\n    elif num <44:\n        return num2+21\n    elif num <45:\n        return num2-22\n    elif num <46:\n        return num2+22\n    elif num <47:\n        return num2-23\n    elif num <48:\n        return num2+23\n    elif num <49:\n        return num2-24\n    elif num <50:\n        return num2+24\n    elif num <51:\n        return num2-25\n    elif num <52:\n        return num2+25\n    elif num <53:\n        return num2-26\n    elif num <54:\n        return num2+26\n    elif num <55:\n        return num2-27\n    elif num <56:\n        return num2+27\n    elif num <57:\n        return num2-28\n    elif num <58:\n        return num2+28\n    elif num <59:\n        return num2-29\n    elif num <60:\n        return num2+29\n    elif num <61:\n        return num2-30\n    elif num <62:\n        return num2+30\n    elif num <63:\n        return num2-31\n    elif num <64:\n        return num2+31\n    elif num <65:\n        return num2-32\n    elif num <66:\n        return num2+32\n    elif num <67:\n        return num2-33\n    elif num <68:\n        return num2+33\n    elif num <69:\n        return num2-34\n    elif num <70:\n        return num2+34\n    elif num <71:\n        return num2-35\n    elif num <72:\n        return num2+35\n    elif num <73:\n        return num2-36\n    elif num <74:\n        return num2+36\n    elif num <75:\n        return num2-37\n    elif num <76:\n        return num2+37\n    elif num <77:\n        return num2-38\n    elif num <78:\n        return num2+38\n    elif num <79:\n        return num2-39\n    elif num <80:\n        return num2+39\n    elif num <81:\n        return num2-40\n    elif num <82:\n        return num2+40\n    elif num <83:\n        return num2-41\n    elif num <84:\n        return num2+41\n    elif num <85:\n        return num2-42\n    elif num <86:\n        return num2+42\n    elif num <87:\n        return num2-43\n    elif num <88:\n        return num2+43\n    elif num <89:\n        return num2-44\n    elif num <90:\n        return num2+44\n    elif num <91:\n        return num2-45\n    elif num <92:\n        return num2+45\n    elif num <93:\n        return num2-46\n    elif num <94:\n        return num2+46\n    elif num <95:\n        return num2-47\n    elif num <96:\n        return num2+47\n    elif num <97:\n        return num2-48\n    elif num <98:\n        return num2+48\n    elif num <99:\n        return num2-49\n    elif num <100:\n        return num2+49\n    elif num <101:\n        return num2-50\n    elif num <102:\n        return num2+50\n    elif num <103:\n        return num2-51\n    elif num <104:\n        return num2+51\n    elif num <105:\n        return num2-52\n    elif num <106:\n        return num2+52\n    elif num <107:\n        return num2-53\n    elif num <108:\n        return num2+53\n    elif num <109:\n        return num2-54\n    elif num <110:\n        return num2+54\n    elif num <111:\n        return num2-55\n    elif num <112:\n        return num2+55\n    elif num <113:\n        return num2-56\n    elif num <114:\n        return num2+56\n    elif num <115:\n        return num2-57\n    elif num <116:\n        return num2+57\n    elif num <117:\n        return num2-58\n    elif num <118:\n        return num2+58\n    elif num <119:\n        return num2-59\n    elif num <120:\n        return num2+59\n    elif num <121:\n        return num2-60\n    elif num <122:\n        return num2+60\n    elif num <123:\n        return num2-61\n    elif num <124:\n        return num2+61\n    elif num <125:\n        return num2-62\n    elif num <126:\n        return num2+62\n    elif num <127:\n        return num2-63\n    elif num <128:\n        return num2+63\n    elif num <129:\n        return num2-64\n    elif num <130:\n        return num2+64\n    elif num <131:\n        return num2-65\n    elif num <132:\n        return num2+65\n    elif num <133:\n        return num2-66\n    elif num <134:\n        return num2+66\n    eli"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    #declare list to store the size of the array\n    list_size = len(arr)\n    #declare the output array\n    output_arr = []\n    #declare max variable\n    max_num = 0\n    #declare max_index variable\n    max_index = 0\n    #for loop to find the largest number in the array\n    for i in range(0,list_size) : \n        #store the element in output array\n        output_arr.append(arr[i])\n        #determine the number of elements in the list using its index\n        n = arr[i]\n        #loop to find the number of elements in the list after its index\n        for j in range(i + 1,list_size) :\n            #determine the number of elements in the list after index j\n            n = arr[j]\n            #if the current element is larger than the largest number, then set the largest element to it\n            if n > max_num :\n                max_num = n\n                max_index = i\n    #return the largest number in the output array\n    return output_arr[max_index]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if arr == None or len(arr) == 0:\n        return -1\n    else :\n        largest_num = arr[0]\n        for i in arr[1:]:\n            if i > largest_num :\n                largest_num = i\n        return largest_num\n    \ndef main() : \n    '''\n    Using the functon find_Max_Num, print the largest number that can be formed with the given list of digits.\n    '''\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    largest_num = find_Max_Num(arr)\n    print(largest_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #Store the max number of digits\n    max_digits = 0\n    #Loop through the list of digits \n    for num in arr : \n        #Check if the number is greater than the max num\n        if num > max_digits : \n            #If the number is bigger than the max number, set the max number as the number \n            max_digits = num \n    #Return the max number\n    return max_digits \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    L = []\n    for i in range(1, 10):\n        L.append(i)\n    for i in range(len(arr)):\n        if arr[i] not in L:\n            L.append(arr[i])\n    return max(L)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    i = 0\n    # number_digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    # number_digits = list(map(int, str(arr)))\n    number_digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    # number_digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    while i < len(number_digits):\n        if number_digits[i]!= 1:\n            # print(i, number_digits[i], 'not a prime number')\n            break\n        if i == 0:\n            max_num = number_digits[i]\n        else:\n            if number_digits[i] == 2:\n                if number_digits[i-1] == 2 and number_digits[i-2] == 1:\n                    max_num = max_num * 3\n                else:\n                    max_num = max_num * 2\n            else:\n                if number_digits[i-1] == 1 and number_digits[i-2] == 2:\n                    max_num = max_num * 2\n                else:\n                    max_num = max_num * 3\n        # print(i, number_digits[i], max_num)\n        i = i + 1\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    s = set(str(arr))\n    for i in s:\n        if arr.count(i)>1:\n            return i\n    return arr.index(max(arr))+1\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    M = {}\n    for num in arr : \n        if not M.get(num): \n            M[num] = 1\n        else: \n            M[num] += 1\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_list = []\n    arr_list = []\n    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        return True\n    elif x > 0 and y > 0: \n        return False\n    elif x < 0 and y > 0: \n        return False\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Write your code here.\n    if x < 0 and y < 0: \n        return True\n    elif x < 0 and y > 0: \n        return False\n    elif x > 0 and y < 0: \n        return False\n    elif x > 0 and y > 0: \n        return False\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return False\n    if x<0 and y<0:\n        return True\n    if x>0 and y<0:\n        return True\n    if x>0 and y>0:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        print(str(x)+\" is bigger than \"+str(y))\n    elif x < y:\n        print(str(y)+\" is bigger than \"+str(x))\n    else:\n        print(str(x)+\" and \"+str(y)+\" are equal.\")\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #for i in range(len(x)):\n        #if x[i]<0 and y[i]<0:\n            #return True\n        #elif x[i]>0 and y[i]>0:\n            #return True\n        #else:\n            #return False\n    #return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x,y)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return 1\n    else: \n        return -1\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    while x>0 or y>0:\n        if x>0 and y>0:\n            return 'yes'\n        else:\n            return 'no'\n    else:\n        return 'no'\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<y):\n        return(y)\n    if (x>y):\n        return(x)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return is_octagonal(n - 1) + is_octagonal(n - 2)\n    # raise NotImplementedError('''\n    #         This question has not been implemented yet.''')\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n // 2 + 1\n    else:\n        return n // 2 + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    if n <= 1:\n        return n\n    \n    if n%2 == 0:\n        return is_octagonal(n//2) + is_octagonal(n//2 + 1)\n    else:\n        return is_octagonal(n//2) + is_octagonal(n//2 + 1) + is_octagonal(n//2 + 1) + is_octagonal(n//2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0 or n == 1: \n        return n\n    return is_octagonal(n-1) + is_octagonal(n-2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    s = n * n\n    if s % 2 == 0:\n        return s / 2\n    else:\n        return (s + 1) / 2\n    \nprint(\"The first 7 natural numbers are:\")\nfor i in range(1, 8):\n    print(i, \":\", is_octagonal(i))\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return (n//10) + is_octagonal(n//10)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    print(n*n)\n    \ndef is_pentagonal(n):\n    '''\n    Write a function that checks whether the nth\n    pentagonal number is a sum of 2 positive numbers.\n    '''\n    print(n*(n+1)/2)\n    \ndef is_triangular(n):\n    '''\n    Write a function that checks whether the nth\n    triangular number is a sum of 3 positive numbers.\n    '''\n    if n<0 or n%3!=0:\n        return False\n    print(n*(n-1)/2)\n    print(n*(3*n+1)/2)\n    \ndef is_square(n):\n    '''\n    Write a function that checks whether the nth\n    square number is a sum of 4 positive numbers.\n    '''\n    print(n*(n+1)/2)\n    print(n*(n*n-1)/6)\n    print(n*(3*n+1)/2)\n    print(n*(n*n*n-1)/12)\n    \n    \n    \ndef main():\n    '''\n    Call the is_square function to check the nth\n    square number.\n    '''\n    is_square(1)\n    is_square(2)\n    is_square(3)\n    is_square(4)\n    is_square(5)\n    is_square(6)\n    is_square(7)\n    is_square(8)\n    is_square(9)\n    is_square(10)\n    is_square(11)\n    is_square(12)\n    is_square(13)\n    is_square(14)\n    is_square(15)\n    is_square(16)\n    is_square(17)\n    is_square(18)\n    is_square(19)\n    is_square(20)\n    is_square(21)\n    is_square(22)\n    is_square(23)\n    is_square(24)\n    is_square(25)\n    is_square(26)\n    is_square(27)\n    is_square(28)\n    is_square(29)\n    is_square(30)\n    is_square(31)\n    is_square(32)\n    is_square(33)\n    is_square(34)\n    is_square(35)\n    is_square(36)\n    is_square(37)\n    is_square(38)\n    is_square(39)\n    is_square(40)\n    is_square(41)\n    is_square(42)\n    is_square(43)\n    is_square(44)\n    is_square(45)\n    is_square(46)\n    is_square(47)\n    is_square(48)\n    is_square(49)\n    is_square(50)\n    is_square(51)\n    is_square(52)\n    is_square(53)\n    is_square(54)\n    is_square(55)\n    is_square(56)\n    is_square(57)\n    is_square(58)\n    is_square(59)\n    is_square(60)\n    is_square(61)\n    is_square(62)\n    is_square(63)\n    is_square(64)\n    is_square(65)\n    is_square(66)\n    is_square(67)\n    is_square(68)\n    is_square(69)\n    is_square(70)\n    is_square(71)\n    is_square(72)\n    is_square(73)\n    is_square(74)\n    is_square(75)\n    is_square(76)\n    is_square(77)\n    is_square(78)\n    is_square(79)\n    is_square(80)\n    is_square(81)\n    is_square(82)\n    is_square(83)\n    is_square(84)\n    is_square(85)\n    is_square(86)\n    is_square(87)\n    is_square(88)\n    is_square(89)\n    is_square(90)\n    is_square(91)\n    is_square(92)\n    is_square(93)\n    is_square(94)\n    is_square(95)\n    is_square(96)\n    is_square(97)\n    is_square(98)\n    is_square(99)\n    is_square(100)\n    is_square(101)\n    is_square(102)\n    is_square(103)\n    is_square(104)\n    is_square(105)\n    is_square(106)\n    is_square(107)\n    is_square(108)\n    is_square(109)\n    is_square(110)\n    is_square(111)\n    is_square(112)\n    is_square(113)\n    is_square(114)\n    is_square(115)\n    is_square(116)\n    is_square(117)\n    is_square(118)\n    is_square(119)\n    is_square(120)\n    is_square(121)\n    is_square(122)\n    is_square(123)\n    is_square(124)\n    is_square(125)\n    is_square(126)\n    is_square(127)\n    is_square(128)\n    is_square(129)\n    is_square(130)\n    is_square(131)\n    is_square(132)\n    is_square(133)\n    is_square(134)\n    is_square(135)\n    is_square(136)\n    is_square(137)\n    is_square(138)\n    is_square(139)\n    is_square(140)\n    is_square(141)\n    is_square(142)\n    is_square(143)\n    is_square(144)\n    is_square(145)\n    is_square(146)\n    is_square(147)\n    is_square(148)\n    is_square(149)\n    is_square(150)\n    is_square(151)\n    is_square(152)\n    is_square(153)\n    is_square(154)\n    is_square(155)\n    is_square(156)\n    is_square(157)\n    is_square(158)\n    is_square(159)\n    is_square(160)\n    is_square(161)\n    is_square(162)\n    is_square(163)\n    is_square(164)\n    is_square(165)\n    is_square(166)\n    is_square(167)\n    is_square(168)\n    is_square(169)\n    is_square(170)\n    is_square(171)\n    is_square(172)\n    is_square(173)\n    is_square(174)\n    is_square(175)\n    is_square(176)\n    is_square(177)\n    is_square(178)\n    is_square(179)\n    is_square(180)\n    is_square(181)\n    is_square(182)\n    is_square(183)\n    is_square(184)\n    is_square(185)\n    is_square(186)\n    is_square(187)\n    is_square(188)\n    is_square(189)\n    is_square(190)\n    is_square(191)\n    is_square(192)\n    is_square(193)\n    is_square(194)\n    is_square(195)\n    is_square(196)\n    is_square(197)\n    is_square(198)\n    is_square(199)\n    is_square(200)\n    is_square(201)\n    is_square(202)\n    is_square(203)\n    is_square(204)\n    is_square(205)\n    is_square(206)\n    is_square(207)\n    is_square(208)\n    is_square(209)\n    is_square(210)\n    is_square(211)\n    is_square(212)\n    is_square(213)\n    is_square(214)\n    is_square(215)\n    is_square(21"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return n * (n + 1) / 2\n    \nprint(is_octagonal(1)) # Should be 1\nprint(is_octagonal(2)) # Should be 3\nprint(is_octagonal(3)) # Should be 6\nprint(is_octagonal(4)) # Should be 9\nprint(is_octagonal(5)) # Should be 15\nprint(is_octagonal(6)) # Should be 21\nprint(is_octagonal(7)) # Should be 34\nprint(is_octagonal(8)) # Should be 55\nprint(is_octagonal(9)) # Should be 89\nprint(is_octagonal(10)) # Should be 12"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    sum = 0\n    for i in range(n):\n        if i == n - 1:\n            sum += 1\n        else:\n            sum += (i - 1) * i\n    return sum\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = n\n    if n == 1: \n        return n\n    while i > 1: \n        if i % 2 == 1: \n            return i\n        i //= 2\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    count_s = 0\n    for i in range(len(s)):\n        count_s = count_s + 1\n        if s[i] == s[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    len_s = len(s)\n    count_sub = 0\n    for i in range(len_s):\n        for j in range(i,len_s):\n            if (s[i] + s[j] == s[i] * (j - i)):\n                count_sub = count_sub + 1\n    return count_sub\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Count the number of substrings with a given sum of digits\n    def count_substrings(s):\n        count = 0\n        # Create a dictionary to store all the characters in the given string\n        dict = defaultdict(int)\n        for i in range(len(s)):\n            dict[s[i]] += 1\n        for key, value in dict.items():\n            # If the character is found then increase the counter for each substring found\n            if key in s:\n                count += value * (len(key) - s.index(key))\n        return count\n    return count_substrings(s)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    counter = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Write your code here\n    counter = 0\n    for index in range(len(s)):\n        if s[index] <= 10:\n            counter = counter + 1\n    return counter\ndef ngram(s, n):\n    '''\n    Write a python function that accepts a string and n-gram string as arguments, and return the number of n-grams.\n    '''\n    # Write your code here\n    ngram_count = 0\n    for index in range(len(s) - n + 1):\n        if s[index : index + n] == s[index + n : index + n + n]:\n            ngram_count = ngram_count + 1\n    return ngram_count\ndef lcs(s, t):\n    '''\n    Write a python function that takes two strings s and t and returns the longest common substring of s and t.\n    '''\n    # Write your code here\n    lcs = ''\n    for index in range(len(s)):\n        for i in range(len(t)):\n            if s[index] == t[i]:\n                lcs = lcs + s[index]\n    return lcs\ndef common_prefix(s):\n    '''\n    Return the longest common prefix of a string.\n    '''\n    # Write your code here\n    if len(s) < 1:\n        return ''\n    if len(s) == 1:\n        return s[0]\n    common_prefix = s[0]\n    index_1 = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            index_1 = i\n        if s[i]!= s[i - 1] and s[i - 1]!= s[i]:\n            common_prefix = s[:index_1 + 1] + common_prefix\n    return common_prefix\ndef common_suffix(s):\n    '''\n    Return the longest common suffix of a string.\n    '''\n    # Write your code here\n    if len(s) < 1:\n        return ''\n    if len(s) == 1:\n        return s[0]\n    common_suffix = s[0]\n    index_1 = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            index_1 = i\n        if s[i]!= s[i - 1] and s[i - 1]!= s[i]:\n            common_suffix = common_suffix + s[:index_1 + 1]\n    return common_suffix\ndef common_suffixes(s):\n    '''\n    Return the longest common suffix of a string.\n    '''\n    # Write your code here\n    if len(s) < 1:\n        return ''\n    if len(s) == 1:\n        return s[0]\n    common_suffixes = s[0]\n    index_1 = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            index_1 = i\n        if s[i]!= s[i - 1] and s[i - 1]!= s[i]:\n            common_suffixes = common_suffixes + s[:index_1 + 1]\n    return common_suffixes\ndef reverse_complement(s):\n    '''\n    Return the reverse complement of a DNA sequence.\n    '''\n    # Write your code here\n    reversed_complement = ''\n    for symbol in s:\n        if symbol in 'AUGC':\n            if symbol == 'A':\n                reversed_complement = 'T' + reversed_complement\n            elif symbol == 'C':\n                reversed_complement = 'G' + reversed_complement\n            elif symbol == 'G':\n                reversed_complement = 'C' + reversed_complement\n            else:\n                reversed_complement = 'A' + reversed_complement\n        else:\n            reversed_complement = 'N' + reversed_complement\n    return reversed_complement\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d={}\n    n=len(s)\n    for i in range(n):\n        c=0\n        for j in range(i,n):\n            if int(s[i:j+1])==int(s[i:j+1]):\n                c=c+1\n        d[s[i]]=c\n    return d\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    length = len(s)\n    for i in range(length):\n        d = len(str(s[i]))\n        if d == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substring = 0\n    count = 0\n    l = len(s)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # pattern = r'(\\w{3})'\n    # print(re.findall(pattern, s))\n    length = len(s)\n    d = defaultdict(int)\n    for i in range(length):\n        if s[i] == s[i-1]:\n            d[i+1] += 1\n        else:\n            d[i+1] += d[i]\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    num = 0\n    for i in range(len(s)):\n        num += 1\n        if s[i] == s[i+1]:\n            num += 1\n    return num\ndef num_of_substrings(s):\n    '''\n    Write a python function to find the number of substrings with the sum of digits equal to their length.\n    '''\n    num = 0\n    for i in range(len(s)):\n        num += 1\n        if s[i] == s[i+1]:\n            num += 1\n    return num\ndef find_Longest_substring(s):\n    '''\n    Write a python function to find the longest substring of the given string where each character can be repeated.\n    '''\n    max_length = 0\n    for i in range(len(s)):\n        count = 0\n        for j in range(i, len(s)):\n            if s[j] == s[i]:\n                count += 1\n            else:\n                if count > max_length:\n                    max_length = count\n                count = 0\n            if count == max_length:\n                break\n        else:\n            if max_length < len(s) - i:\n                max_length = len(s) - i\n    return max_length\ndef find_substring_with_sum(s, sum):\n    '''\n    Write a python function to find the substring of the given string whose sum is equal to the given sum.\n    '''\n    sum_length = sum\n    if len(s) < sum_length:\n        return None\n    start = 0\n    end = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            end = i + 1\n            start = i\n            if sum_length - end >= sum:\n                start = i - 1\n    if start == end:\n        return s[start:end + 1]\n    else:\n        return None\ndef find_substring_with_sum_except(s, sum):\n    '''\n    Write a python function to find the substring of the given string whose sum is equal to the given sum.\n    '''\n    sum_length = sum\n    if len(s) < sum_length:\n        return None\n    start = 0\n    end = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            end = i + 1\n            start = i\n            if sum_length - end >= sum:\n                start = i - 1\n    if start == end:\n        return s[start:end + 1]\n    else:\n        return None\ndef find_substring_with_sum_except_except(s, sum):\n    '''\n    Write a python function to find the substring of the given string whose sum is equal to the given sum.\n    '''\n    start = 0\n    end = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            end = i + 1\n            start = i\n            if sum_length - end >= sum:\n                start = i - 1\n    if start == end:\n        return s[start:end + 1]\n    else:\n        return None\ndef find_substring_with_sum_except_except_except(s, sum):\n    '''\n    Write a python function to find the substring of the given string whose sum is equal to the given sum.\n    '''\n    start = 0\n    end = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            end = i + 1\n            start = i\n            if sum_length - end >= sum:\n                start = i - 1\n    if start == end:\n        return s[start:end + 1]\n    else:\n        return None\ndef count_substrings_except_except(s):\n    '''\n    Write a python function to find the number of substrings with the sum of digits equal to their length except for the sum of digits equal to 0.\n    '''\n    num = 0\n    for i in range(len(s)):\n        num += 1\n        if s[i] == s[i+1]:\n            num += 1\n        else:\n            if num == 0:\n                num = 1\n            if sum_length - num >= sum:\n                num = 1\n    return num\ndef count_substrings_except_except_except(s):\n    '''\n    Write a python function to find the number of substrings with the sum of digits equal to their length except for the sum of digits equal to 0.\n    '''\n    num = 0\n    for i in range(len(s)):\n        num += 1\n        if s[i] == s[i+1]:\n            num += 1\n        else:\n            if num == 0:\n                num = 1\n            if sum_length - num >= sum:\n                num = 1\n    return num\ndef count_Substring_lengths(s):\n    '''\n    Write a python function to find the length of the longest substring of the given string.\n    '''\n    max_length = 0\n    for i in range(len(s)):\n        count = 0\n        for j in range(i, len(s)):\n            if s[j] == s[i]:\n                count += 1\n            else:\n                if count > max_length:\n                    max_length = count\n                count = 0\n            if count == max_length:\n                break\n        else:\n            if max_length < len(s) - i:\n                max_length = len(s) - i\n    return max_length\ndef find_longest_string(s):\n    '''\n    Write a python function to find the longest substring of the given string.\n    '''\n    max_length = 0\n    for i in range(len(s)):\n        count = 0\n        for j in range(i, len(s)):\n            if s[j] == s[i]:\n                count += 1\n            else:\n                if count > max_length:\n                    max_length = count\n                count = 0\n            if count == max_length:\n                break\n        else:\n            if max_length < len(s) - i:\n                max_length = len(s) - i\n    return max_length\ndef find_substring_with_sum_except_except_except_except(s, sum):\n    '''\n    Write a python function to find the substring of the given string whose sum is equal to the given sum.\n    '''\n    start = 0\n    end = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            end = i + 1\n            start = i\n            if sum_length - end >= sum:\n                start = i - 1\n    if start == end:\n        return s[start:end + 1]\n    else:\n        return None\ndef find_substring_with_sum_except_except_except_except(s, sum):\n    '''\n    Write a python function to find the substring of the given string whose sum is equal to the given sum.\n    '''\n    start = 0\n    end = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            end = i + 1\n            start = i\n            if sum_length - end >= sum:\n                start = i - 1\n    if start == end:\n        return s[start:end + 1]\n    else:\n        return None\ndef count_substrings_except_except(s):\n    '''\n    Write a python function to find the number of substrings with the sum of digits equal to their length except for the sum of digits equal to 0.\n    '''\n    num = 0\n    for i in range(len(s)):\n        num += 1\n        if s[i] == s[i+1]:\n            num += 1\n        else:\n            if num == 0:\n                num = 1\n            if sum_length - num >= sum:\n                num = 1\n    return num\ndef count_substrings_except_except_except(s):\n    '''\n    Write a python function to find the number of substrings with the sum of digits equal to their length except for the sum of digits equal to 0.\n    '''\n    start = 0\n    end = 0\n    fo"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    sorted_xs = sorted(xs)\n    min_idx = xs.index(sorted_xs[0])\n    return sorted_xs[min_idx]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_val = None\n    for i in range(len(xs)):\n        if min_val is None or xs[i]<min_val:\n            min_val = xs[i]\n    return min_val\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = 0\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = -1\n    low = 0\n    for i in xs:\n        if i > num:\n            num = i\n            low = i\n    return low\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    list_of_num = []\n    for n in xs:\n        if n not in list_of_num:\n            list_of_num.append(n)\n    return min(list_of_num)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs)==1:\n        return xs[0]\n    elif len(xs)==0:\n        return None\n    else:\n        return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    nums = list(map(int, xs))\n    n = len(nums)\n    if n == 0:\n        print(\"List is empty\")\n    elif n == 1:\n        print(nums[0])\n    else:\n        smallest = nums[n - 1]\n        for i in range(n - 1):\n            if nums[i] < smallest:\n                smallest = nums[i]\n        print(smallest)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # loop through the tuple list and find the maximum difference\n    m_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            m_diff = max(m_diff, test_list[j] - test_list[i])\n    return m_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    index_max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = abs(test_list[i]-test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n                index_max_diff = i+1\n    return index_max_diff\n    "
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference_list = []\n    for i in range(len(test_list)-1):\n        max_difference_list.append(abs(test_list[i] - test_list[i+1]))\n    max_difference = max(max_difference_list)\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if test_list[0][1] == test_list[1][1]:\n        return test_list[1][1] - test_list[0][1]\n    else:\n        return test_list[0][1] - test_list[1][1]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # O(n)\n    # O(1)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    l=len(test_list)\n    if l==0:\n        return 0\n    else:\n        return test_list[0] - test_list[1]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0,len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    current_max = 0\n    for i in test_list:\n        if current_max < i[0] and current_max > i[1]:\n            current_max = i[0]\n        elif current_max < i[1] and current_max > i[0]:\n            current_max = i[1]\n        else:\n            max_diff += current_max - i[0] - i[1]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = []\n    for i in test_list:\n        result.append(abs(i[0] - i[1]))\n    return max(result)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    index = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i+1] - test_list[i] > max_diff:\n            max_diff = test_list[i+1] - test_list[i]\n            index = i\n    return max_diff, index\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks=sorted(subjectmarks,key=lambda x:x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    result = []\n    for i in subjectmarks:\n        result.append((i[1],i[0]))\n    result.sort(key = lambda x:x[1])\n    return result\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # For our purposes, the tuple is the first value, so we can name it subject\n    # We'll be using this to index into the subject list\n    # And instead of having the full list in memory, we will just use it as-is\n    subjectmarks.sort(key=lambda x: x[1])\n    \n    # Now, let's make a function to sort the subject marks\n    # We'll use a lambda function\n    # This allows us to run a function on the subject list\n    # Now, we'll return the sorted list\n    return subjectmarks\n    \n    \n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n    return subject_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup:tup[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key = lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key = lambda x : x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(subjectmarks)):\n        subjectmarks[i][1]=int(subjectmarks[i][1])\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for el in data_list:\n        sum = sum + el\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flatten = []\n    sum = 0\n    for num in data_list:\n        sum += num\n        flatten.append(sum)\n    return flatten\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: Your code here\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    new_data_list = []\n    # If data is list, convert it to a single array\n    if isinstance(data_list, list):\n        data_list = data_list[0]\n    # If data is not a list, convert it to a single array\n    if isinstance(data_list, (int, float)):\n        data_list = [data_list]\n    # If data is not a list, convert it to a single array\n    if not isinstance(data_list, list):\n        data_list = [data_list]\n        \n    # For each element in the list, create a list of the current element plus the index of that element\n    for item in data_list:\n        new_data_list.append(item)\n        new_data_list.append(item)\n    # Return the flattened list\n    return new_data_list\n    \n    \ndef main():\n    print(\"What is the expected output of the following program? \\n\")\n    # Create a list to store data\n    data_list = [\"item1\", \"item2\", \"item3\", \"item4\"]\n    # Sum the elements\n    sum_elements = recursive_list_sum(data_list)\n    print(sum_elements)\n    \n    print(\"\\nWhat is the expected output of the following program? \\n\")\n    # Create a list to store data\n    data_list = [\"item1\", \"item2\", \"item3\", \"item4\"]\n    # Sum the elements\n    sum_elements = recursive_list_sum(data_list)\n    print(sum_elements)\n    \n    print(\"\\nWhat is the expected output of the following program? \\n\")\n    # Create a list to store data\n    data_list = [\"item1\", \"item2\", \"item3\", \"item4\"]\n    # Sum the elements\n    sum_elements = recursive_list_sum(data_list)\n    print(sum_elements)\n    \n    print(\"\\nWhat is the expected output of the following program? \\n\")\n    # Create a list to store data\n    data_list = [\"item1\", \"item2\", \"item3\", \"item4\"]\n    # Sum the elements\n    sum_elements = recursive_list_sum(data_list)\n    print(sum_elements)\n    \n    print(\"\\nWhat is the expected output of the following program? \\n\")\n    # Create a list to store data\n    data_list = [\"item1\", \"item2\", \"item3\", \"item4\"]\n    # Sum the elements\n    sum_elements = recursive_list_sum(data_list)\n    print(sum_elements)\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def rec_sum(a):\n        if a == []:\n            return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened = []\n    for element in data_list:\n        if type(element) is not list:\n            flattened.append(element)\n        else:\n            flattened.extend(recursive_list_sum(element))\n    return flattened\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_list.sort()\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flat(data_list):\n        if data_list is None:\n            return data_list\n        elif type(data_list) is list:\n            return [flat(item) for item in data_list]\n        else:\n            return [data_list]\n    return flat(data_list)\n    \n    "
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return []\n    elif len(data_list) == 1:\n        return data_list\n    else:\n        return data_list + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(current_list):\n        '''\n        Write a function to flatten a list of lists.\n        '''\n        if current_list is None:\n            return []\n        else:\n            current_list = current_list + flatten(current_list[0])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    result = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    print(count)\n    return count\ndef pos_list(list):\n    '''\n    Write a python function to print all the positive numbers in a list.\n    '''\n    for i in list:\n        if i>0:\n            print(i, end=\" \")\ndef neg_list(list):\n    '''\n    Write a python function to print all the negative numbers in a list.\n    '''\n    for i in list:\n        if i<0:\n            print(i, end=\" \")\ndef neg_list(list):\n    '''\n    Write a python function to print all the negative numbers in a list.\n    '''\n    for i in list:\n        if i<0:\n            print(i, end=\" \")\ndef neg_list_2(list):\n    '''\n    Write a python function to print all the negative numbers in a list.\n    '''\n    for i in list:\n        if i<0:\n            print(i, end=\" \")\ndef neg_list_3(list):\n    '''\n    Write a python function to print all the negative numbers in a list.\n    '''\n    for i in list:\n        if i<0:\n            print(i, end=\" \")\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i]>0:\n            count = count + 1\n    return count\ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i]<0:\n            count = count + 1\n    return count\ndef main():\n    print(\"Write a python function to calculate the number of positive and negative numbers in a list.\")\n    print(\"The function should accept two parameters of a list and returns the number of positive and negative numbers.\")\n    print()\n    inp = input(\"Enter two numbers separated by commas: \")\n    print()\n    inp = inp.split(\",\")\n    print()\n    list = []\n    for i in inp:\n        list.append(int(i))\n    print(f\"List of numbers: {list}\")\n    print(f\"Number of positive numbers: {pos_count(list)}\")\n    print(f\"Number of negative numbers: {neg_count(list)}\")\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum = 0\n    for num in list:\n        if num > 0:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count = count+1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # your code goes here\n    list_len = len(list)\n    pos_num = 0\n    for i in range(list_len):\n        if list[i] > 0:\n            pos_num = pos_num + 1\n            list[i] = -1\n    return pos_num\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum = 0\n    for num in list:\n        if num > 0:\n            sum += 1\n    print(sum)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for number in list:\n        if number > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n <= 1:\n        return 1\n    \n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n    \n    # dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    # dp[0][1] = 1\n    # dp[0][2] = 1\n    # dp[0][3] = 1\n    # dp[1][1] = 1\n    # dp[1][2] = 2\n    # dp[1][3] = 3\n    # dp[2][1] = 3\n    # dp[2][2] = 4\n    # dp[2][3] = 7\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #base case\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    \n    #recursion\n    return bell_number(n-1)+bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    \n    # Return the number of ways we can choose at most n.\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # See if it is possible to divide in two ways\n    if n%2==0:\n        if n%3==0:\n            return 2\n        else:\n            return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_number_helper(n, arr):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 3:\n        return n\n    return bell_number(n-1) + 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    count = 0\n    for i in range(len(A)):\n        if A[i] == A[i-1]:\n            count += 1\n        elif A[i] < A[i-1]:\n            return False\n    if count >= 2:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #Your code here\n    if A == sorted(A, key=len, reverse=True):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)): \n        if A[i] > A[i-1]: \n            return False \n    return True \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    C = A[0]\n    for i in range(1, len(A)): \n        if A[i] > C:\n            return False\n        C = A[i]\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Array structure is a 2D array. A 2D array is a matrix of rows. A 1D array is a column\n    # A1 = [[0,1,2,3],[4,5,6,7],[8,9,10,11]]\n    # B = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n    if (A[0] > A[1]) and (A[0] > A[2]) and (A[0] > A[3]):\n        return \"The matrix is monotonic\"\n    elif (A[1] > A[2]) and (A[1] > A[3]) and (A[1] > A[0]):\n        return \"The matrix is monotonic\"\n    elif (A[2] > A[3]) and (A[2] > A[0]) and (A[2] > A[1]):\n        return \"The matrix is monotonic\"\n    elif (A[3] > A[0]) and (A[3] > A[1]) and (A[3] > A[2]):\n        return \"The matrix is monotonic\"\n    else:\n        return \"The matrix is not monotonic\"\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    B = np.diff(A, axis=0)\n    if np.all(B.any(axis=1)) and np.all(B.any(axis=0)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0,len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) > 1:\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Initialize the Boolean variable for monotonicity\n    monotonic = True \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(l.count(i) == s[i] for i in s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # this is the slower brute-force method\n    # for i in range(0, len(l) - 1):\n    #     for j in range(i, len(l)):\n    #         if l[i:j+1] == s:\n    #             return True\n    \n    # faster method with a sorted array\n    s_lst = sorted(s)\n    for i in range(0, len(l)):\n        if l[i:i+len(s_lst)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(x in l for x in s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all([l.index(i) == s.index(j) for i,j in zip(l,s)])\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    lst = []\n    lst.append(l)\n    i = 0\n    while i < len(s):\n        if s[i] in lst:\n            lst.remove(s[i])\n            i = i + 1\n            if len(lst) == 0:\n                return False\n        else:\n            i = i + 1\n    return True\n    \ndef is_list(s):\n    '''\n    Write a function to check whether a string is a list or not.\n    '''\n    if s[0] == '[' or s[-1] == ']':\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.sort()\n    i = 0\n    j = 0\n    while j < len(s):\n        if l[i] < s[j]:\n            j += 1\n        else:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l == l[s]\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    a = []\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            a.append(l[i][j])\n    b = []\n    for i in range(len(s)):\n        for j in range(len(s[i])):\n            b.append(s[i][j])\n    return a==b\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) <= 0:\n        return True\n    else:\n        for i in l:\n            if is_sublist(s, i):\n                return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    temp = []\n    for i in range(len(Input)):\n        if len(temp) == 0:\n            return False\n        if len(Input[i]) == 0:\n            return False\n        if temp[0][1]!= Input[i][0] or temp[-1][0]!= Input[i][-1]:\n            return False\n        temp.pop()\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input.sort()\n    if len(Input) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    t1 = Input[0]\n    t2 = Input[1]\n    return (len(t1) == len(t2))\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        for j in Input:\n            if len(i) == len(j):\n                if i == j:\n                    return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_tuple = []\n    for i in Input:\n        if len(i) == len(set(i)):\n            equal_tuple.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Create a tuple to store the elements.\n    Tuple = tuple(Input)\n    # Check if the tuple is empty\n    if len(Tuple) == 0:\n        # Return False if the tuple is empty\n        return False\n    # Check if the tuple contains only one element\n    if len(Tuple)!= len(set(Tuple)):\n        # Return False if the tuple contains only one element\n        return False\n    # Iterate through the list of elements\n    for i in range(len(Tuple)):\n        # Check if the element is equal to the corresponding value\n        if Tuple[i]!= Input[i]:\n            # Return False if the tuple contains a value that is different from the corresponding value\n            return False\n    # Return True if the tuple is in the correct order\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        if len(i)!= len(Input[count]):\n            return False\n        count+=1\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # define a new empty list\n    list_of_tuples = []\n    # loop through the given tuples\n    for i in range(0, len(Input)):\n        # add each element to the list\n        for j in range(0, len(Input[i])):\n            list_of_tuples.append(Input[i][j])\n    # print the length of the list\n    print(\"The number of Tuples that is equal length is:\", len(list_of_tuples))\n    # check if all the elements of the list are equal\n    if (len(list_of_tuples) == len(set(list_of_tuples))):\n        # return the length of the list to the caller\n        return len(list_of_tuples)\n    # otherwise return the length of the list to the caller\n    else:\n        return None\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(x) == len(Input[0]) for x in Input)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # First, sort the first part of the list\n    n = len(nums)\n    for i in range(0, n):\n        # Find the lowest index i\n        low = i\n        for j in range(i+1, n):\n            # If nums[low] > nums[j],\n            # swap them\n            if nums[j] < nums[low]:\n                low = j\n        # Swap the value at index i with its position\n        nums[i], nums[low] = nums[low], nums[i]\n        # Sort the remaining elements\n        comb_sort(nums, low, n-1)\n        # Reverse the remaining elements\n        nums[low], nums[i] = nums[i], nums[low]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Your code goes here\n    \n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(l, p, r):\n        if p < l:\n            return sort(l, p, r)\n        i = p\n        j = r\n        while i < j:\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n        nums[i] = nums[r]\n        nums[r] = nums[p]\n        return i, nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # nums[0] == 0\n    for i in range(len(nums)):\n        # nums[i] == nums[i-1]\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    # print(nums)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s=str(n)\n    if len(s)<=2:\n        return 'Numbers can not be greater than 2 digits'\n    for i in range(len(s)//2):\n        if s[i]=='1' and s[i+1]=='0':\n            return 'Numbers can not be greater than 2 digits'\n        elif s[i]=='1' and s[i+1]=='1':\n            return 'Numbers can not be greater than 2 digits'\n        elif s[i]=='0' and s[i+1]=='0':\n            return 'Numbers can not be greater than 2 digits'\n        elif s[i]=='0' and s[i+1]=='1':\n            return 'Numbers can not be greater than 2 digits'\n    return 'Numbers can be represented as the difference of two squares'\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n <= 0): \n        return False\n    elif (n % 2 == 0): \n        return n in range(1, n + 1)\n    else: \n        return n in range(1, n // 2 + 1)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_square(a):\n        '''\n        Given a square num, return True if the square is a square,\n        otherwise return False.\n        '''\n        return a == int(a * a)\n    def is_square_diff(n): \n        '''\n        Given a square num, return True if the square is a square,\n        otherwise return False.\n        '''\n        return n == int(n * n)\n    def is_squre_diff(a, b): \n        '''\n        Given two squares, return True if the squares are squares,\n        otherwise return False.\n        '''\n        return a == b\n    if n < 0:\n        return False\n    if is_square(n):\n        return is_square_diff(n)\n    elif is_square_diff(n):\n        return is_squre_diff(n, n)\n    else:\n        return is_squre_diff(n, n-1)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return \"Empty\"\n    if n < 0: \n        return \"Not an integer\"\n    if n > 0: \n        if n % 4 == 0: \n            return \"Not a square\"\n        if n % 2 == 0: \n            return \"Not a square\"\n        if n % 2!= 0: \n            return \"Square\"\n    return \"Square\"\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + dif_Square(n - 1)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return n - 1\n    else:\n        return n - 1\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n>0 and (n==(n**2) or n==(n**3))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    dif = 0\n    if (n**2)%10 == 0:\n        dif = n//10\n    else:\n        dif = n//10 + (n//10*2)//10\n    if n < 10**7:\n        return f\"{n} is not a positive integer\"\n    else:\n        return dif\n    \nprint(dif_Square(20)"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0, n, 2):\n        for j in range(i+1, n, 2):\n            if (n-i-j)<0:\n                print(\"Square is negative\")\n            else:\n                print(\"Square is positive\")\n                return True\n    else:\n        print(\"Square is not positive\")\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    def isSquare(n):\n        '''\n        Write a python function to check whether the given number is square or not.\n        '''\n        if n<=0:\n            raise TypeError\n        return n==int(n**0.5)\n        \n    if isSquare(n):\n        return 'Square'\n    else:\n        return 'Not a Square'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        for color in colors:\n            if pattern == color:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create an empty list of the same length as the patterns array.\n    same_patterns = []\n    \n    # Loop through each element in the patterns array.\n    for pattern in patterns:\n        # Check each color in the patterns array.\n        for color in colors:\n            # Check the color of each pattern.\n            for pattern_color in pattern:\n                # Check if the pattern_color is in the same color.\n                if pattern_color not in same_patterns:\n                    # Check if the pattern_color is not a duplicate.\n                    if pattern_color not in same_patterns:\n                        # Add the pattern_color to the same_patterns list.\n                        same_patterns.append(pattern_color)\n    \n    # Create an empty list of the same length as the patterns array.\n    same_patterns = []\n    \n    # Loop through each element in the patterns array.\n    for pattern in patterns:\n        # Check each color in the patterns array.\n        for color in colors:\n            # Check the color of each pattern.\n            for pattern_color in pattern:\n                # Check if the pattern_color is in the same color.\n                if pattern_color not in same_patterns:\n                    # Check if the pattern_color is not a duplicate.\n                    if pattern_color not in same_patterns:\n                        # Add the pattern_color to the same_patterns list.\n                        same_patterns.append(pattern_color)\n    \n    # Return the number of the same patterns.\n    return len(same_patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if is_samepattern(colors, pattern):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #print(colors)\n    #print(patterns)\n    samepatterns = []\n    for i in range(len(colors)):\n        for j in range(len(patterns[i])):\n            #print(i, j)\n            if colors[i] == patterns[i][j]:\n                samepatterns.append(patterns[i][j])\n    #print(samepatterns)\n    #print(len(samepatterns))\n    return samepatterns == [i for i in range(len(colors))]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    seq = []\n    for color in colors:\n        seq.append(color)\n        seq.append(color+'_1')\n        seq.append(color+'_2')\n        seq.append(color+'_3')\n        seq.append(color+'_4')\n    return seq in patterns\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if set(colors) == set(pattern):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #l = []\n    #for i in range(len(patterns)):\n        #for pattern in patterns[i][0]:\n            #if colors[pattern[0]-1] == colors[pattern[1]-1]:\n                #l.append(pattern)\n    for color in colors:\n        for pattern in patterns:\n            if color == pattern[0]:\n                if pattern[1]!= color:\n                    return False\n    return True\n    \npatterns = [\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 1\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 2\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 3\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 4\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 5\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 6\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 7\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 8\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 9\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 10\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 11\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 12\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 13\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 14\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 15\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 16\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 17\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)], # 18\n    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 1), (2, 2)]\n]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) == 0:\n        return False\n    if len(patterns) == 1:\n        return True\n    patterns = sorted(patterns, key=len)\n    patterns_set = set(patterns)\n    if len(patterns_set) == 1:\n        return True\n    if colors[0] in patterns_set:\n        patterns_set.remove(colors[0])\n        patterns.remove(colors[0])\n        return is_samepatterns(colors, patterns)\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if is_samepattern(colors, pattern):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)-1, -1, -1):\n        if colors[i][0]!= patterns[i][0]:\n            return False\n        if colors[i][1]!= patterns[i][1]:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # O(n) time, O(k) space\n    tuples = set()\n    for tup in test_list:\n        if all(elem % K for elem in tup):\n            tuples.add(tup)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for x in test_list:\n        for y in range(x[1]//K):\n            if x[0]%y == 0:\n                yield x\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # TODO: Write your code here\n    if len(test_list) < 1:\n        return []\n    k = K\n    result = []\n    for item in test_list:\n        if item[0] % k!= 0:\n            continue\n        for el in item[1:]:\n            if el % k!= 0:\n                continue\n            result.append(item)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # code here\n    dict = {}\n    for tuple in test_list:\n        if tuple[0]%K==0 and tuple[1]%K==0:\n            dict[tuple]=tuple\n    return dict\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    if K == 1:\n        return test_list\n    elif len(test_list) == 1:\n        return []\n    \n    tuples = []\n    for i in range(len(test_list)):\n        if test_list[i][0] % K == 0:\n            tuples.append(test_list[i])\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for item in test_list:\n        if item[0]%K==0:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    found_tuples = []\n    for index, item in enumerate(test_list):\n        if len(item) % K == 0:\n            found_tuples.append(item)\n    return found_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    counter = 0\n    for i in test_list:\n        if i[0] % K == 0:\n            counter += 1\n    if counter == len(test_list):\n        return\n    else:\n        return find_tuples(test_list[counter+1:], K)\n        \n    "
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    num = [i[0] for i in test_list]\n    #print(num)\n    num_len = len(num)\n    \n    if num_len % K!= 0:\n        return\n    \n    for i in range(num_len // K):\n        test_list.append((num[i * K] + num[(i + 1) * K - 1]) // 2)\n        \n    return test_lis"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n % 10 \n    y = n % 11 \n    if (x == y):\n        return \"True\"\n    else:\n        return \"False\"\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # return False if not divisible\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    # declare variable\n    divisible=0\n    \n    # iterate through numbers from 1 to 9\n    for i in range(1,11):\n        if i%n==0:\n            divisible+=1\n    if divisible%2==1:\n        return True\n    else:\n        return False\n    \n    pass\n    #assert\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1,n):\n        if(n%i==0):\n            print(n,\"is not divisible by 11\")\n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    def is_divisible(n):\n        count = 0\n        for i in n:\n            if i % 11 == 0:\n                count += 1\n        return count == 0\n    for i in range(1,n):\n        if is_divisible(i):\n            print(i, end=\" \")\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        print(n, \"is divisible by 11\")\n    else:\n        print(n, \"is not divisible by 11\")\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\ndef power(x,n):\n    '''\n    x is a number. n is a power.\n    '''\n    a = 1\n    b = 1\n    for i in range(1,n):\n        a*=x\n        b*=a\n    return b\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l % 2 == 1:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # if there is a space at the end, we can remove it.\n    if len(s) == 0:\n        return \"No word\"\n    # if there is a capital letter, remove the capital letter from the end.\n    if s[0].isupper():\n        return \"No word\"\n    else:\n        return len(s)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\ndef main():\n    '''\n    run the python program.\n    '''\n    s = \"This is a string\"\n    if word_len(s) == True:\n        print(\"It's odd\")\n    else:\n        print(\"It's even\")\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for i in s:\n        if len(i) == 1:\n            return i\n    return 'Error'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l=len(s)\n    if(l%2==1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = list(s)\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Your code goes here\n    \n    # Define a function to find the nth tetrahedral number.\n    tetra_num = 0\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    list_tetrahedral_number = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    list_tetrahedral_number.append(i + j + k + l)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # get the number of 4's in the given number\n    numbers = {\n        1: 3, 2: 3, 3: 1, 4: 2, 5: 2, 6: 1, 7: 2, 8: 1, 9: 2,\n        10: 1, 11: 2, 12: 1, 13: 2, 14: 1, 15: 2, 16: 1, 17: 2,\n        18: 1, 19: 2, 20: 1, 21: 2, 22: 1, 23: 2, 24: 1, 25: 2,\n        26: 1, 27: 2, 28: 1, 29: 2, 30: 1, 31: 2, 32: 1, 33: 2,\n        34: 1, 35: 2, 36: 1, 37: 2, 38: 1, 39: 2, 40: 1, 41: 2,\n        42: 1, 43: 2, 44: 1, 45: 2, 46: 1, 47: 2, 48: 1, 49: 2,\n        50: 1, 51: 2, 52: 1, 53: 2, 54: 1, 55: 2, 56: 1, 57: 2,\n        58: 1, 59: 2, 60: 1, 61: 2, 62: 1, 63: 2, 64: 1, 65: 2,\n        66: 1, 67: 2, 68: 1, 69: 2, 70: 1, 71: 2, 72: 1, 73: 2,\n        74: 1, 75: 2, 76: 1, 77: 2, 78: 1, 79: 2, 80: 1, 81: 2,\n        82: 1, 83: 2, 84: 1, 85: 2, 86: 1, 87: 2, 88: 1, 89: 2,\n        90: 1, 91: 2, 92: 1, 93: 2, 94: 1, 95: 2, 96: 1, 97: 2,\n        98: 1, 99: 2, 100: 1, 101: 2, 102: 1, 103: 2, 104: 1, 105: 2,\n        106: 1, 107: 2, 108: 1, 109: 2, 110: 1, 111: 2, 112: 1,\n        113: 2, 114: 1, 115: 2, 116: 1, 117: 2, 118: 1, 119: 2,\n        120: 1, 121: 2, 122: 1, 123: 2, 124: 1, 125: 2, 126: 1,\n        127: 2, 128: 1, 129: 2, 130: 1, 131: 2, 132: 1, 133: 2,\n        134: 1, 135: 2, 136: 1, 137: 2, 138: 1, 139: 2, 140: 1,\n        141: 2, 142: 1, 143: 2, 144: 1, 145: 2, 146: 1, 147: 2,\n        148: 1, 149: 2, 150: 1, 151: 2, 152: 1, 153: 2, 154: 1,\n        155: 2, 156: 1, 157: 2, 158: 1, 159: 2, 160: 1, 161: 2,\n        162: 1, 163: 2, 164: 1, 165: 2, 166: 1, 167: 2, 168: 1,\n        169: 2, 170: 1, 171: 2, 172: 1, 173: 2, 174: 1, 175: 2,\n        176: 1, 177: 2, 178: 1, 179: 2, 180: 1, 181: 2, 182: 1,\n        183: 2, 184: 1, 185: 2, 186: 1, 187: 2, 188: 1, 189: 2,\n        190: 1, 191: 2, 192: 1, 193: 2, 194: 1, 195: 2, 196: 1,\n        197: 2, 198: 1, 199: 2, 200: 1, 201: 2, 202: 1, 203: 2,\n        204: 1, 205: 2, 206: 1, 207: 2, 208: 1, 209: 2, 210: 1,\n        211: 2, 212: 1, 213: 2, 214: 1, 215: 2, 216: 1, 217: 2,\n        218: 1, 219: 2, 220: 1, 221: 2, 222: 1, 223: 2, 224: 1,\n        225: 2, 226: 1, 227: 2, 228: 1, 229: 2, 230: 1, 231: 2,\n        232: 1, 233: 2, 234: 1, 235: 2, 236: 1, 237: 2, 238: 1,\n        239: 2, 240: 1, 241: 2, 242: 1, 243: 2, 244: 1, 245: 2,\n        246: 1, 247: 2, 248: 1, 249: 2, 250: 1, 251: 2, 252: 1,\n        253: 2, 254: 1, 255: 2, 256: 1, 257: 2, 258: 1, 259: 2,\n        260: 1, 261: 2, 262: 1, 263: 2, 264: 1, 265: 2, 266: 1,\n        267: 2, 268: 1, 269: 2, 270: 1, 271: 2, 272: 1, 273: 2,\n        274: 1, 275: 2, 276: 1, 277: 2, 278: 1, 279: 2, 280: 1,\n        281: 2, 282: 1, 283: 2, 284: 1, 285: 2, 286: 1, 287: 2,\n        288: 1, 289: 2, 290: 1, 291: 2, 292: 1, 293: 2, 294: 1,\n        295: 2, 296: 1, 297: 2, 298: 1, 299: 2, 300: 1, 301: 2,\n        302: 1, 303: 2, 304: 1, 305: 2, 306: 1, 307: 2, 308: 1,\n        309: 2, 310: 1, 311: 2, 312: 1, 313: 2, 314: 1, 315: 2,\n        316: 1, 317: 2, 318: 1, 319: 2, 320: 1, 321: 2, 322: 1,\n        323: 2, 324: 1, 325: 2, 326: 1, 327: 2, 328: 1, 329: 2,\n        330: 1, 331: 2, 332: 1, 333: 2, 334: 1, 335: 2, 336: 1,\n        337: 2, 338: 1, 339: 2, 340: 1, 341: 2, 342: 1, 343: 2,\n        344: 1, 345: 2, 346: 1, 347: 2, 348: 1, 349: 2, 350: 1,\n        351: 2, 352: 1, 353: 2, 354: 1, 355: 2, 356: 1, 357: 2,\n        358: 1, 359: 2, 360: 1, 361: 2, 362: 1, 363: 2, 364: 1,\n        365: 2, 366: 1, 367: 2, 368: 1, 369: 2, 370: 1, 371: 2,\n        372: 1, 373: 2, 374: 1, 375: 2, 376: 1, 377: 2, 378: 1,\n        379: 2, 380: 1, 381: 2, 382: 1, 383: 2, 384: 1, 385: 2,\n        386: 1, 387: 2, 388: 1, 389: 2, 390: 1, 391: 2, 392: 1,\n        393: 2, 394: 1, 395: 2, 396: 1, 397: 2, 398: 1, 399: 2,\n        400: 1, 401: 2, 402: 1, 403: 2, 404: 1, 405: 2, 406: 1,\n        407: 2, 408: 1, 409: 2, 410: 1, 411: 2, 412: 1, 413: 2,\n        414: 1, 415: 2, 416: 1, 417: 2, 418: 1, 419: 2, 420: 1,\n        421: 2, 422: 1, 423: 2, 424: 1, 425: 2, 426: 1, 427: 2,\n        428: 1, 429: 2, 430: 1, 431: 2, 432: 1, 433: 2, 434: 1,\n        435: 2, 436: 1, 437: 2, 438: 1, 439: 2, 440: 1, 441: 2,\n        442: 1, 443: 2, 444: 1, 445: 2, 446: 1, 447: 2, 448: 1,\n        449: 2, 450: 1, 451: 2, 452: 1, 453: 2, 454: 1, 455: 2,\n        456: 1, 457: 2, 458: 1, 459: 2, 460: 1, 461: 2, 462: 1"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n\n        n //= 3\n    return sum\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    m = (n//3)*3\n    n = n % 3\n    if n == 0:\n        n = 1\n    if n == 1:\n        n = 2\n    if n == 2:\n        n = 3\n    return m*n\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def get_nth(i, n):\n        '''\n        Given an integer n, return the nth non-decreasing \n        tetrahedral number.\n        '''\n        while (i < n):\n            i += 1\n        return i - 1\n    \n    n = n - 1\n    i = 0\n    s = 0\n    \n    while (i < n):\n        i = i + 1\n        s = s + (n - i)\n        if (s % 2 == 1):\n            return get_nth(i, n)\n    return -1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    from math import factorial\n    return factorial(n) // (factorial(n - 1) * factorial(n - 2))\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum(list(range(n+1,n+6,2)))\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n in [0,1,2,3,4,5]:\n        return n\n    else:\n        n1 = (n*n+n*n-1) // 2\n        n2 = (n*(n+1)//2)//2\n        n3 = (n*(n+2)//2)//2\n        n4 = (n*(n+3)//2)//2\n        n5 = (n*(n+4)//2)//2\n        \n        if n1 + n2 + n3 + n4 + n5 == n:\n            return n\n        \n        elif n1 + n2 + n3 + n4 + n5 == n:\n            return n1\n        \n        elif n1 + n2 + n3 + n4 + n5 == n:\n            return n2\n        \n        elif n1 + n2 + n3 + n4 + n5 == n:\n            return n3\n        \n        elif n1 + n2 + n3 + n4 + n5 == n:\n            return n4\n        \n        elif n1 + n2 + n3 + n4 + n5 == n:\n            return n5\n        \n        elif n1 + n2 + n3 + n4 + n5 == n:\n            return n1\n        \n        elif n1 + n2 + n3 + n4 + n5 == n:\n            return n2\n        \n        elif n1 + n2 + n3 + n4 + n5 == n:\n            return n3\n        \n        elif n1 + n2 + n3 + n4 + n5 == n:\n            return n4\n        \n        elif n1 + n2 + n3 + n4 + n5 == n:\n            return n5\n        \n        else:\n            return -1\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Define the volume of a sphere\n    return 3.14159 * r * r * math.pi\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    c = 4.8*math.pi*r**3\n    print(\"Sphere volume is: \" + str(c) + \" m3\")\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4 * math.pi * r * r\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4 * math.pi * r * r * math.sin(math.pi/6)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * r * r\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    area = 3.14 * r ** 2\n    volume = 4/3 * math.pi * (r ** 3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #radius = r\n    pi = math.pi\n    r = r\n    print(\"The radius of the sphere is \" + str(r))\n    print(\"We will calculate the volume of the sphere. \\n\")\n    #volume = 4 * pi * (r ** 3)\n    print(\"The volume of the sphere is \" + str(4 * math.pi * r ** 3))\n    print(\"\\n\")\n    return 4 * pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (pi * (r ** 3))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    area = 4.0 * math.pi * r ** 3\n    return area\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i = 0\n    char_list = []\n    while i < len(strr):\n        char_list.append(ord(strr[i])%26)\n        i = i + 1\n    return char_list\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    \n    new_string = \"\"\n    \n    for i in strr:\n        if i in alphabet:\n            i = ord(i) % ord('A')\n            new_string += alphabet[i]\n        else:\n            new_string += i\n    \n    return new_string\n    \ndef get_Char_Two(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    \n    new_string = \"\"\n    \n    for i in strr:\n        if i in alphabet:\n            i = ord(i) % ord('A')\n            new_string += alphabet[i]\n        else:\n            new_string += i\n    \n    return new_string\n    \n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_array = list(strr)\n    for char in char_array:\n        try:\n            char_array[char] = int(char)\n        except ValueError:\n            pass\n    for i in range(len(char_array)):\n        if char_array[i] % 26 == 0:\n            char_array[i] = char_array[i]//26\n            break\n    return char_array\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_set = set()\n    for char in strr:\n        if char.isalpha():\n            char_set.add(ord(char))\n    char_set = char_set - set(range(0, 95)) - {' '}\n    return (sum(char_set)) % 26\n    \n    \ndef test_get_Char():\n    assert get_Char('hello') == 2\n    assert get_Char('hello ') == 4\n    assert get_Char('Hello ') == 3\n    assert get_Char('1 2 3') == 3\n    assert get_Char('abc') == 2\n    assert get_Char('z') == 1\n    assert get_Char('H') == 1\n    assert get_Char('l') == 2\n    assert get_Char('l1') == 4\n    assert get_Char('l1 h') == 3\n    assert get_Char('l1 l') == 5\n    assert get_Char('l1 ') == 2\n    assert get_Char('l1') == 1\n    assert get_Char('l1H') == 1\n    assert get_Char('l1l') == 2\n    assert get_Char('l1l1') == 4\n    assert get_Char('l1l1h') == 3\n    assert get_Char('l1l1l') == 5\n    assert get_Char('l1l1 ') == 1\n    assert get_Char('l1l1l1') == 4\n    assert get_Char('l1l1l1l') == 6\n    assert get_Char('l1l1l1 ') == 1\n    assert get_Char('l1l1l1l1') == 7\n    assert get_Char('l1l1l1l1l') == 8\n    assert get_Char('l1l1l1l1l1') == 9\n    assert get_Char('l1l1l1l1l1l') == 10\n    assert get_Char('l1l1l1l1l1l1') == 11\n    assert get_Char('l1l1l1l1l1l1l') == 12\n    assert get_Char('l1l1l1l1l1l1l1l') == 13\n    assert get_Char('l1l1l1l1l1l1l1l1l') == 14\n    assert get_Char('l1l1l1l1l1l1l1l1l1l') == 15\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l') == 16\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l1l') == 17\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l1l1l') == 18\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l1l1l1l') == 19\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l1l1l1l1l') == 20\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l') == 21\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l') == 22\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l') == 23\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l') == 24\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l') == 25\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l') == 26\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l') == 27\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l') == 28\n    assert get_Char('l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l1l"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return int(strr, 2) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = \"\"\n    for i in range(len(strr)):\n        res += chr(ord(strr[i]) % ord('a'))\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    mod_strr=''\n    for i in strr:\n        mod_strr+=str(ord(i))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    alpha = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789_\"\n    c = \"\"\n    for i in range(len(strr)):\n        c = c + alpha[ord(strr[i]) % 26]\n    return c\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    Chr=''\n    # print(strr)\n    for i in range(len(strr)):\n        Chr += chr(ord(strr[i])%26+ord('A'))\n    # print(Chr)\n    return Chr\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # create a copy of the string\n    char_list = []\n    for i in range(len(strr)):\n        char_list.append(strr[i])\n    # get each character\n    res = \"\"\n    for i in range(len(char_list)):\n        res += chr(ord(char_list[i]) % 26 + ord('a'))\n    return res\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    result = []\n    for i in range(n): \n        if i == 0: \n            result.append(1)\n        elif i == 1: \n            result.append(1)\n        elif i == 2: \n            result.append(2)\n        else: \n            result.append(n - 1 - i)\n    return result\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    start_nth = 0\n    result = [0] * n\n    result[start_nth] = 1\n    while n - start_nth > 1:\n        if n % 2 == 1:\n            result[start_nth] = 1\n        start_nth += 1\n        n //= 2\n    if n > 1:\n        result[start_nth] = 1\n    return result\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n<=1:\n        return n\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n > len(nums):\n        print(\"Invalid Input.\")\n        return\n    else:\n        return(nums[n])\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Get the first 2 digits\n    num1 = str(n)[0]\n    num2 = str(n)[1]\n    \n    # Find the rightmost position of the digits\n    index = n%10\n    \n    # Find the index of the digits\n    position = index%10\n    \n    # Return the final element\n    return num1 + str(position) + num2\n    \ndef sequence2(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Get the first two digits\n    num1 = str(n)[0]\n    num2 = str(n)[1]\n    \n    # Find the position of the digits\n    position = n%10\n    \n    # Return the final element\n    return num1 + str(position) + num2\n    \ndef sequence3(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Get the first 3 digits\n    num1 = str(n)[0]\n    num2 = str(n)[1]\n    num3 = str(n)[2]\n    \n    # Find the rightmost position of the digits\n    position = n%10\n    \n    # Return the final element\n    return num1 + str(position) + num2 + str(position) + num3\n    \ndef sequence4(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Get the first 4 digits\n    num1 = str(n)[0]\n    num2 = str(n)[1]\n    num3 = str(n)[2]\n    num4 = str(n)[3]\n    \n    # Find the rightmost position of the digits\n    position = n%10\n    \n    # Return the final element\n    return num1 + str(position) + num2 + str(position) + num3 + str(position) + num4\n    \ndef sequence5(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Get the first 5 digits\n    num1 = str(n)[0]\n    num2 = str(n)[1]\n    num3 = str(n)[2]\n    num4 = str(n)[3]\n    num5 = str(n)[4]\n    \n    # Find the rightmost position of the digits\n    position = n%10\n    \n    # Return the final element\n    return num1 + str(position) + num2 + str(position) + num3 + str(position) + num4 + str(position) + num5\n    \ndef sequence6(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Get the first 6 digits\n    num1 = str(n)[0]\n    num2 = str(n)[1]\n    num3 = str(n)[2]\n    num4 = str(n)[3]\n    num5 = str(n)[4]\n    num6 = str(n)[5]\n    \n    # Find the rightmost position of the digits\n    position = n%10\n    \n    # Return the final element\n    return num1 + str(position) + num2 + str(position) + num3 + str(position) + num4 + str(position) + num5 + str(position) + num6\n    \ndef sequence7(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Get the first 7 digits\n    num1 = str(n)[0]\n    num2 = str(n)[1]\n    num3 = str(n)[2]\n    num4 = str(n)[3]\n    num5 = str(n)[4]\n    num6 = str(n)[5]\n    num7 = str(n)[6]\n    \n    # Find the rightmost position of the digits\n    position = n%10\n    \n    # Return the final element\n    return num1 + str(position) + num2 + str(position) + num3 + str(position) + num4 + str(position) + num5 + str(position) + num6 + str(position) + num7\n    \ndef sequence8(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Get the first 8 digits\n    num1 = str(n)[0]\n    num2 = str(n)[1]\n    num3 = str(n)[2]\n    num4 = str(n)[3]\n    num5 = str(n)[4]\n    num6 = str(n)[5]\n    num7 = str(n)[6]\n    num8 = str(n)[7]\n    \n    # Find the rightmost position of the digits\n    position = n%10\n    \n    # Return the final element\n    return num1 + str(position) + num2 + str(position) + num3 + str(position) + num4 + str(position) + num5 + str(position) + num6 + str(position) + num7 + str(position) + num8\n    \ndef sequence9(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Get the first 9 digits\n    num1 = str(n)[0]\n    num2 = str(n)[1]\n    num3 = str(n)[2]\n    num4 = str(n)[3]\n    num5 = str(n)[4]\n    num6 = str(n)[5]\n    num7 = str(n)[6]\n    num8 = str(n)[7]\n    num9 = str(n)[8]\n    \n    # Find the rightmost position of the digits\n    position = n%10\n    \n    # Return the final element\n    return num1 + str(position) + num2 + str(position) + num3 + str(position) + num4 + str(position) + num5 + str(position) + num6 + str(position) + num7 + str(position) + num8 + str(position) + num9\n    \ndef sequence10(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Get the first 10 digits\n    num1 = str(n)[0]\n    num2 = str(n)[1]\n    num3 = str(n)[2]\n    num4 = str(n)[3]\n    num5 = str(n)[4]\n    num6 = str(n)[5]\n    num7 = str(n)[6]\n    num8 = str(n)[7]\n    num9 = str(n)[8]\n    num10 = str(n)[9]\n    \n    # Find the rightmost position of the digits\n    position = n%10\n    \n    # Return the final element\n    return num1 + str(position) + num2 + str(position) + num3 + str(position) + num4 + str(position) + num5 + str(position) + num6 + str(position) + num7 + str(position) + num8 + str(position) + num9 + str(position) + num10\n    \ndef sequence11(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # Get the first 11 digits\n    num1 = str(n)[0]\n    num2 = str(n)[1]\n    num3 = str(n)[2]\n    num4 = str(n)[3]\n    num5 = str(n)[4]\n    num6 = str(n)[5]\n    num7 = str(n)[6]\n    num8 = str(n)[7]\n    num9 = str(n)[8]\n    num10 = str(n)[9]\n    num11 = str(n)[10]\n    \n    # Find the rightmost position of the digits\n    position = n%10\n    \n    # Return the final element\n    return num1 + str(position) + num2 + str(position) + num3 + str(position) + num4 + str(position) + num5 + str(position) + num"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    number = 1\n    while n-number>=0:\n        number = number*2\n        n-=number\n    return number\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    count = 0\n    while True: \n        count += 1 \n        if count == n: \n            return seq[n - 1] \n        else: \n            seq[count] = seq[count - 1] \n            seq[count - 1] = 0\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n+2\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #check the length of the sequence\n    if n>len(numbers):\n        print(\"Error: sequence doesn't exist\")\n        return\n    #get the index and length of sequence\n    index=0\n    length=len(numbers)\n    while index+1<length:\n        if index+length-1<length and numbers[index+length-1]==numbers[index+1]:\n            index=index+length-1\n        else:\n            break\n    #return the index of the nth element in sequence\n    return index\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the array with the initial value \n    # and then return it \n    num = [int(x) for x in str(n)] \n    # Slice it out \n    slice = int(len(num)) % 3 \n    # Create the new array \n    newarray = num[:slice] \n    # Add the last three numbers \n    newarray.extend(num[slice:]) \n    # Return the new array \n    return newarray\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * (r**3)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return (pi * (r ** 3))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code here\n    surface=3.14*r**2\n    return surface\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Write your code here.\n    area = (4/3) * math.pi * (r**3)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**3)*math.pi\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*math.pi*(r**2)*(h**2)*math.pi\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 4*math.pi*(r**2)*(h**2)*math.pi\n    \ndef surfacearea_trapezoid(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return 4*math.pi*(a**2 + b**2)*h**2\n    \ndef surfacearea_triangle(a,b):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_quad(a,b,c,d):\n    '''\n    Write a function to find the surface area of a quad.\n    '''\n    return (a*b*c)/2\n    \ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_rhombus(a,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_circle(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_circle_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_circle_square_triangle(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_circle_square_triangle_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_circle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_triangle(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircle.\n    '''\n    return (a*b)/2\n    \ndef surfacearea_dodecircle_square_triangle_square_square(a,b):\n    '''\n    Write a function to find the surface area of a dodecircl"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*math.pow(r,3)\ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (4/3)*math.pi*math.pow(r,3)\ndef surfacearea_cylinder(r,l):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4/3)*math.pi*math.pow(r,2)*math.pow(l,2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4*math.pi*r*r*r)/3\n    print(\"The surface area of the sphere is: \"+ str(area))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14159265358979323846\n    r = float(r)\n    area = (pi*(r**3))/(2*r)\n    return area\ndef surfacearea_cylinder(r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265358979323846\n    r = float(r)\n    area = ((pi*(r**2)))\n    return area\ndef surfacearea_volume(r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265358979323846\n    r = float(r)\n    area = ((pi*(r**3)))\n    return area\ndef surfacearea_triangle(r):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    if r == 0:\n        area = 0\n    elif r == 1:\n        area = 2*2\n    elif r == 2:\n        area = 6*6\n    else:\n        area = (4*r*math.sqrt(2))/3\n    return area\ndef surfacearea_parallelogram(r):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    if r == 0:\n        area = 0\n    elif r == 1:\n        area = 4*r*2\n    else:\n        area = (8*r*r*math.sqrt(2))\n    return area\ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    if r == 0:\n        area = 0\n    elif r == 1:\n        area = 8*r\n    elif r == 2:\n        area = 16*r**2\n    elif r == 3:\n        area = 32*r**3\n    else:\n        area = (48*r**4)*math.sqrt(2)\n    return area\ndef surfacearea_dodecahedron(r):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    if r == 0:\n        area = 0\n    elif r == 1:\n        area = (3*r**2*(r-1))\n    elif r == 2:\n        area = (6*r*r*(r+1))\n    elif r == 3:\n        area = (12*r**2*(r-1)**2)\n    else:\n        area = (24*r**2*r*(r-1)*(r-1)**2)\n    return area\ndef surfacearea_octahedron(r):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    if r == 0:\n        area = 0\n    elif r == 1:\n        area = (4*(r-1))\n    elif r == 2:\n        area = (4*(r-1)**2)\n    elif r == 3:\n        area = (4*r**2*(r-1)**2)\n    elif r == 4:\n        area = (8*r**3*(r-1)**2)\n    else:\n        area = (32*r**3*r**3)\n    return area\ndef surfacearea_tetrahedron(r):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    if r == 0:\n        area = 0\n    elif r == 1:\n        area = (8*r**3)\n    elif r == 2:\n        area = (16*r**3*(r-1))\n    elif r == 3:\n        area = (32*r**3*(r-1))\n    elif r == 4:\n        area = (48*r**3*r**3)\n    elif r == 5:\n        area = (16*r**3*r**3)\n    elif r == 6:\n        area = (8*r**3*r**3)\n    else:\n        area = (16*r**3*r**3)\n    return area\ndef surfacearea_tetrahedron_2(r):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    if r == 0:\n        area = 0\n    elif r == 1:\n        area = (8*r**3)\n    elif r == 2:\n        area = (8*r**3*(r-1))\n    elif r == 3:\n        area = (16*r**3*(r-1))\n    elif r == 4:\n        area = (16*r**3*r**3)\n    else:\n        area = (8*r**3*r**3)\n    return area\ndef surfacearea_hexagon(r):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    if r == 0:\n        area = 0\n    elif r == 1:\n        area = (16*r**2)\n    elif r == 2:\n        area = (48*r**2)\n    else:\n        area = (32*r**2)\n    return area\ndef surfacearea_dodecahedron_2(r):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    if r == 0:\n        area = 0\n    elif r == 1:\n        area = (4*r**2*(r-1))\n    elif r == 2:\n        area = (4*r**2*(r-1))**2\n    elif r == 3:\n        area = (8*r**2*(r-1))**2\n    elif r == 4:\n        area = (8*r**2*(r-1))*(r-1)**2\n    elif r == 5:\n        area = (8*r**2*(r-1)**2)\n    elif r == 6:\n        area = (8*r**2*(r-1)**3)\n    else:\n        area = (16*r**2*r**2)\n    return area\ndef surfacearea_octahedron_2(r):\n    '''\n    Write a function to find the surface area of a octahedron.\n    '''\n    if r == 0:\n        area = 0\n    elif r == 1:\n        area = (8*r**2)\n    elif r == 2:\n        area = (8*r**2*(r-1))\n    elif r == 3:\n        area = (16*r**2*(r-1))\n    elif r == 4:\n        area = (16*r**2*(r-1))**2\n    elif r == 5:\n        area = (32*r**2*r**2)\n    else:\n        area = (8*r**2*r**2)\n    return area\ndef surfacearea_hexagon_2(r):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    if r == 0:\n        area = 0\n    elif r == 1:\n        area = (8*r**2)\n    elif r == 2:\n        area = (16*r**2)\n    elif r == 3:\n        area = (16*r**2*(r-1))\n    elif r == 4:\n        area = (8*r**2*(r-1))**2\n    elif r == 5:\n        area = (8*r**2*(r-1))*(r-1)**2\n    elif r == 6:\n        area = (8*r**2*(r-1)**3)\n    else:\n        area = (16*r**2*r**2)\n    return area\ndef surfacearea_tetrahedron_3(r):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    if r == 0:\n        area = 0\n    elif r == 1:\n        area = (8*r**3)\n    elif "
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return(4/3 * math.pi * (r ** 3))\n    \ndef surfacearea_rectangle(height, width):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return(height*width)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    a = math.pow(r,2)\n    return pi * (4/3)*math.pow(math.sqrt(a),3)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(n+1)) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    counter = 0\n    while counter < n:\n        counter += 1\n        hexagonal_number = counter*16\n        if hexagonal_number % 8 == 0:\n            hexagonal_number = hexagonal_number // 16\n        print(hexagonal_number)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    n = int(n)\n    if (n < 3):\n        print(\"Value out of range. \")\n    elif (n == 3):\n        return 6\n    elif (n == 4):\n        return 10\n    else:\n        return n - 3\n    \n    \n    \n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    return n**3\n    \nprint(centered_hexagonal_number(5)"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    if n == 0:\n        return n\n    \n    if n % 2 == 0:\n        return n + 1\n    else:\n        return n - 1\n    \n    # write your code here\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n%2 == 0:\n        return n\n    else:\n        return n+(n*(n-1))//2\n    \n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    print('n:', n)\n    for i in range(1,n+1):\n        print('i:', i)\n        for j in range(i, n+1, i):\n            print('j:', j)\n            if(j>=i+1):\n                print('(i+1):', j, 'i:', i, 'j:', j)\n                print('(i+1)^2:', (i+1)**2, 'i:', i, 'j:', j)\n                print('(i+1)^3:', (i+1)**3, 'i:', i, 'j:', j)\n                print('i+1:', i + 1, 'j:', j, 'i+1:', i + 1)\n                if(j%2==0):\n                    print('i+1:', i+1, 'j:', j, 'i+1:', i+1)\n                else:\n                    print('i+1:', i+1, 'j:', j, 'i+1:', i+1)\n                if(j%3==0):\n                    print('i+1:', i+1, 'j:', j, 'i+1:', i+1)\n                else:\n                    print('i+1:', i+1, 'j:', j, 'i+1:', i+1)\n                if(j==i+1):\n                    print('i+1:', i+1, 'j:', j, 'i+1:', i+1)\n                else:\n                    print('i+1:', i+1, 'j:', j, 'i+1:', i+1)\n    return\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def center(n, height):\n        '''\n        Returns the center of the nth centered hexagonal number.\n        '''\n        if n <= 1:\n            return (height // 6) * height // 4\n        return (height // 6) * height // 4 + (height % 6) * height % 6\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    #result = {}\n    #dict1.update(dict2)\n    #dict3.update(dict2)\n    for key in dict1.keys():\n        if key in dict2.keys():\n            result[key] = merge_dictionaries_three(dict1[key], dict2[key], dict3[key])\n        else:\n            result[key] = dict1[key]\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dicts = {}\n    for key, value in dict1.items():\n        for key2, value2 in dict2.items():\n            if key in key2:\n                value3 = key2[key]\n                if value2 in value3:\n                    dicts[key] = value3[value2]\n                    break\n            if key2 in value2:\n                value3 = key2[key2]\n                if value3 in value2:\n                    dicts[key2] = value3[value2]\n                    break\n    return dicts\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #adding the values from the first dictionary into the third\n    for k, v in dict1.items():\n        dict3[k] = v\n    #adding the values from the second dictionary into the third\n    for k, v in dict2.items():\n        dict3[k] = v\n    #adding the values from the first dictionary into the third\n    for k, v in dict1.items():\n        dict3[k] = v\n    return dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict=dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    out=dict()\n    #if both dictionaries are empty return nothing\n    if len(dict1) == 0:\n        return dict3\n    if len(dict2) == 0:\n        return dict3\n    if len(dict3) == 0:\n        return dict1\n    #if dict1 has only one value, merge with dict2\n    if len(dict1) == 1:\n        out=dict1.copy()\n        out.update(dict2)\n        return out\n    #if dict1 has more than 1 value, merge with dict2\n    if len(dict1) > 1:\n        out = merge_dictionaries_three(dict1.copy(), dict2, dict3)\n        out.update(dict3)\n        return out\n    #if dict1 has only 1 value, merge with dict2\n    if len(dict1) == 1:\n        out = dict1.copy()\n        out.update(dict2)\n        return out\n    #if both dicts have only 1 key, merge with dict1\n    if len(dict1) == 1:\n        out = dict1.copy()\n        out.update(dict2)\n        return out\n    #if dict1 has more than 1 key, merge with dict2\n    if len(dict1) > 1:\n        out = merge_dictionaries_three(dict1, dict2.copy(), dict3)\n        out.update(dict3)\n        return out\n    #if both dictionaries have no keys, return empty\n    if len(dict1) == 0:\n        return dict3\n    if len(dict2) == 0:\n        return dict3\n    #if both dictionaries have only 1 key, merge with dict1\n    if len(dict1) == 1:\n        out = dict1.copy()\n        out.update(dict2)\n        return out\n    #if both dictionaries have only 1 key, merge with dict1\n    if len(dict1) > 1:\n        out = merge_dictionaries_three(dict1, dict2, dict3)\n        out.update(dict3)\n        return out\n    #if both dictionaries have at least 1 key, merge with both dictionaries\n    out = merge_dictionaries_three(dict1, dict2, dict3)\n    out.update(dict3)\n    return out\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict()\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key, val in dict2.items():\n        if key in dict1:\n            if isinstance(val, collections.MutableMapping):\n                dict1[key].update(val)\n            else:\n                dict1[key] = val\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1 = dict1.copy()\n    d2 = dict2.copy()\n    d3 = dict3.copy()\n    for key in dict1:\n        if key in dict2:\n            d1[key] = dict1[key]\n        if key in dict3:\n            d2[key] = dict2[key]\n        if key in dict3:\n            d3[key] = dict3[key]\n    return d1,d2,d3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    a = ct.OrderedDict()\n    b = ct.OrderedDict()\n    c = ct.OrderedDict()\n    for k,v in dict1.items():\n        a[k] = v\n    for k,v in dict2.items():\n        b[k] = v\n    for k,v in dict3.items():\n        c[k] = v\n    return a, b, c\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for i in range(len(list1)):\n        if list1[i] in dic:\n            dic[list1[i]] = dic[list1[i]] + 1\n        else:\n            dic[list1[i]] = 1\n    return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # creating a dictionary\n    d = collections.defaultdict(int)\n    # iterating through the list\n    for x in list1:\n        # incrementing the frequency of the element\n        d[x] += 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = collections.Counter(list1)\n    return frequency\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for i in list1:\n        if i in freq:\n            freq[i]+=1\n        else:\n            freq[i]=1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = {}\n    for item in list1:\n        if item in result:\n            result[item] += 1\n        else:\n            result[item] = 1\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    print(freq)\n    \n    "
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = collections.Counter(list1)\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    freq_dict = dict(freq)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.Counter(list1)\n    return dict1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min = 10001\n    for x in range(1, N + 1):\n        if N < x:\n            return x\n        if abs(x - N) < abs(min - x):\n            min = x\n    return min\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N, N+1):\n        if i in nums:\n            min_n = min(nums)\n            if i < min_n:\n                min_n = i\n    return min_n\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = []\n    for i in range(N):\n        num_list.append(i)\n    \n    closest_num_list = []\n    min_num = min(num_list)\n    for num in num_list:\n        if num == min_num:\n            closest_num_list.append(num)\n            if len(closest_num_list) == 1:\n                min_num = num\n        else:\n            for num in num_list:\n                if num == min_num:\n                    closest_num_list.append(num)\n                    if len(closest_num_list) == 1:\n                        min_num = num\n    return min_num\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #Base case - n = 0\n    if N == 0:\n        return 0\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 3:\n        return 1\n    return closest_num(N-1)+1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    elif N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        closest = 1\n        #if N has a negative number\n        if N < 0:\n            N = abs(N)\n            if N < 0:\n                return -1\n            elif N == 1:\n                closest = 0\n            else:\n                closest = 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    if N == 2:\n        return 3\n    if N == 3:\n        return 5\n    if N < 3:\n        return N\n    if N % 2 == 0:\n        return closest_num(N-1)\n    else:\n        return closest_num(N-2)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1:\n        return N\n    else:\n        return N - min([closest_num(N-i) for i in range(1,N)])\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    result = 0\n    for i in range(1, N+1):\n        if i == 1:\n            result = i\n            break\n        if N%i == 0:\n            result = i\n            break\n    return result\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pas"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if not list1:\n        return 0\n    else:\n        return len(max(list1,key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    print(\"Longest word is: \" + i + \" with length: \" + str(max_length))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_list = []\n    for x in list1:\n        word_list.append(x.split(\" \"))\n    for word in word_list:\n        len_word = 0\n        for i in range(len(word)):\n            len_word = len_word + len(word[i])\n        if len_word > len(word):\n            len_word = len_word\n        print(len_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length_word = 0\n    for i in list1:\n        length_word = len(i)\n        return length_word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1 == []:\n        return 0\n    else:\n        t = 0\n        for i in range(len(list1)):\n            if list1[i] == list1[i][::-1]:\n                t += 1\n                \n        return t\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxword = \"\"\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i] == list1[j] and list1[i]!= \" \" and len(list1[j]) > len(maxword):\n                maxword = list1[i]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    s = ''\n    for i in list1:\n        s += i +''\n    s = s.split()\n    return len(max(s, key = len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(len(list1[i]))\n    return max(list2)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # base case\n    if len(sub_str) == 0:\n        return True\n    # if not string, return False\n    elif len(sub_str) == 1:\n        return sub_str[0] == str1[0]\n    # if string, split it and compare all strings\n    else:\n        # create a new list of strings\n        sub_str_list = []\n        for i in range(len(str1)):\n            sub_str_list.append(str1[i:len(sub_str)+i])\n        # compare each string\n        for i in range(len(sub_str_list)):\n            # check if the substring matches\n            if sub_str_list[i] == sub_str:\n                return True\n        # if not matched, return False\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(sub_str)):\n        if sub_str[i] in str1:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # To check if it's present in the given list\n    flag = False\n    if sub_str in str1:\n        flag = True\n    # To find the start of the sub string\n    sub = 0\n    # To find the end of the sub string\n    eof = -1\n    # To find the length of the sub string\n    sub_len = len(sub_str)\n    while sub_len > 0:\n        # To find the index of the character after the start of the sub string\n        i = str1.find(sub_str, sub, eof)\n        # If the index is valid\n        if i >= 0:\n            # Increment the sub string length\n            sub_len -= 1\n            eof = i\n        # If the index is not valid\n        else:\n            # End the sub string\n            eof = -1\n            # Increment the sub string length\n            sub_len -= 1\n    return flag\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    \n    for x in sub_str:\n        \n        if x in str1:\n            \n            i = str1.index(x)\n            break\n    \n    if i < len(str1) - len(sub_str) + 1:\n        \n        return str1[i:i+len(sub_str)]\n    \n    else:\n        \n        return False"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) == 0:\n        return False\n    elif str1 == sub_str:\n        return True\n    else:\n        for i in range(0, len(str1) - len(sub_str)):\n            if str1[i:i+len(sub_str)] == sub_str:\n                return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    my_list = []\n    # To find each character in the string\n    for i in range(0, len(str1)):\n        my_list.append(str1[i])\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i, j = 0, 0\n    for char in sub_str:\n        if char in str1[i:j]:\n            i = i + 1\n        else:\n            j = j + 1\n    if i == j:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    char_lst = []\n    for char in sub_str:\n        if char in char_lst:\n            return True\n        char_lst.append(char)\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    #returns if string is present or not.\n    if str1 in sub_str:\n        return True\n    else:\n        return False\n    \n    "
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    while True: \n        try: \n            return int(n) % 2 == 0 \n        except ValueError: \n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    if n%10 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    if n % 5 == 0:\n        return True\n    if n % 3 == 0:\n        return False\n    if n % 5 == 1 and n % 3 == 1:\n        return True\n    if n % 5 == 2 and n % 3 == 2:\n        return True\n    if n % 5 == 0 and n % 3 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 2 == 1:\n        return False\n    else:\n        if is_palindrome(n/2):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n%2!= 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n == 0): return False\n    if (n == 1): return True\n    if (n == 2): return True\n    if (n == 3): return True\n    if (n == 4): return True\n    if (n == 5): return True\n    if (n == 6): return True\n    if (n == 7): return True\n    if (n == 8): return True\n    if (n == 9): return True\n    if (n == 10): return True\n    if (n == 11): return True\n    if (n == 12): return True\n    if (n == 13): return True\n    if (n == 14): return True\n    if (n == 15): return True\n    if (n == 16): return True\n    if (n == 17): return True\n    if (n == 18): return True\n    if (n == 19): return True\n    if (n == 20): return True\n    if (n == 21): return True\n    if (n == 22): return True\n    if (n == 23): return True\n    if (n == 24): return True\n    if (n == 25): return True\n    if (n == 26): return True\n    if (n == 27): return True\n    if (n == 28): return True\n    if (n == 29): return True\n    if (n == 30): return True\n    if (n == 31): return True\n    if (n == 32): return True\n    if (n == 33): return True\n    if (n == 34): return True\n    if (n == 35): return True\n    if (n == 36): return True\n    if (n == 37): return True\n    if (n == 38): return True\n    if (n == 39): return True\n    if (n == 40): return True\n    if (n == 41): return True\n    if (n == 42): return True\n    if (n == 43): return True\n    if (n == 44): return True\n    if (n == 45): return True\n    if (n == 46): return True\n    if (n == 47): return True\n    if (n == 48): return True\n    if (n == 49): return True\n    if (n == 50): return True\n    if (n == 51): return True\n    if (n == 52): return True\n    if (n == 53): return True\n    if (n == 54): return True\n    if (n == 55): return True\n    if (n == 56): return True\n    if (n == 57): return True\n    if (n == 58): return True\n    if (n == 59): return True\n    if (n == 60): return True\n    if (n == 61): return True\n    if (n == 62): return True\n    if (n == 63): return True\n    if (n == 64): return True\n    if (n == 65): return True\n    if (n == 66): return True\n    if (n == 67): return True\n    if (n == 68): return True\n    if (n == 69): return True\n    if (n == 70): return True\n    if (n == 71): return True\n    if (n == 72): return True\n    if (n == 73): return True\n    if (n == 74): return True\n    if (n == 75): return True\n    if (n == 76): return True\n    if (n == 77): return True\n    if (n == 78): return True\n    if (n == 79): return True\n    if (n == 80): return True\n    if (n == 81): return True\n    if (n == 82): return True\n    if (n == 83): return True\n    if (n == 84): return True\n    if (n == 85): return True\n    if (n == 86): return True\n    if (n == 87): return True\n    if (n == 88): return True\n    if (n == 89): return True\n    if (n == 90): return True\n    if (n == 91): return True\n    if (n == 92): return True\n    if (n == 93): return True\n    if (n == 94): return True\n    if (n == 95): return True\n    if (n == 96): return True\n    if (n == 97): return True\n    if (n == 98): return True\n    if (n == 99): return True\n    if (n == 100): return True\n    if (n == 101): return True\n    if (n == 102): return True\n    if (n == 103): return True\n    if (n == 104): return True\n    if (n == 105): return True\n    if (n == 106): return True\n    if (n == 107): return True\n    if (n == 108): return True\n    if (n == 109): return True\n    if (n == 110): return True\n    if (n == 111): return True\n    if (n == 112): return True\n    if (n == 113): return True\n    if (n == 114): return True\n    if (n == 115): return True\n    if (n == 116): return True\n    if (n == 117): return True\n    if (n == 118): return True\n    if (n == 119): return True\n    if (n == 120): return True\n    if (n == 121): return True\n    if (n == 122): return True\n    if (n == 123): return True\n    if (n == 124): return True\n    if (n == 125): return True\n    if (n == 126): return True\n    if (n == 127): return True\n    if (n == 128): return True\n    if (n == 129): return True\n    if (n == 130): return True\n    if (n == 131): return True\n    if (n == 132): return True\n    if (n == 133): return True\n    if (n == 134): return True\n    if (n == 135): return True\n    if (n == 136): return True\n    if (n == 137): return True\n    if (n == 138): return True\n    if (n == 139): return True\n    if (n == 140): return True\n    if (n == 141): return True\n    if (n == 142): return True\n    if (n == 143): return True\n    if (n == 144): return True\n    if (n == 145): return True\n    if (n == 146): return True\n    if (n == 147): return True\n    if (n == 148): return True\n    if (n == 149): return True\n    if (n == 150): return True\n    if (n == 151): return True\n    if (n == 152): return True\n    if (n == 153): return True\n    if (n == 154): return True\n    if (n == 155): return True\n    if (n == 156): return True\n    if (n == 157): return True\n    if (n == 158): return True\n    if (n == 159): return True\n    if (n == 160): return True\n    if (n == 161): return True\n    if (n == 162): return True\n    if (n == 163): return True\n    if (n == 164): return True\n    if (n == 165): return True\n    if (n == 166): return True\n    if (n == 167): return True\n    if (n == 168): return True\n    if (n == 169): return True\n    if (n == 170): return True\n    if (n == 171): return True\n    if (n == 172): return True\n    if (n == 173): return True\n    if (n == 174): return True\n    if (n == 175): return True\n    if (n == 176): return True\n    if (n == 177): return True\n    if (n == 178): return True\n    if (n == 179): return True\n    if (n == 180): return True\n    if (n == 181): return True\n    if (n == 182): return True\n    if (n == 183): return True\n    if (n == 184): return True\n    if (n == 185): return True\n    if (n == 186): return True\n    if (n == 187): return True\n    if (n == 188): return True\n    if (n == 189): return True\n    if (n == 190): return True\n    if (n == 191): return True\n    if (n == 192): return True\n    if (n == 193): return True\n    if (n == 194): return True\n    if (n == 195): return True\n    if (n == 196): return True\n    if (n == 197): return True\n    if (n == 198): return True\n    if (n == 199): return True\n    if (n == 200): return True\n    if "
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a==0:\n        return 0\n    return b**a\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return a\n    else:\n        return a*power(a,b-1)\n    \ndef factorial(n):\n    '''\n    Return the factorial of the number 'n'.\n    '''\n    if n<=1:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \ndef fib(n):\n    '''\n    Return the fibonacci sequence to the 'n'.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n    \ndef factor(n):\n    '''\n    Return the factors of the number 'n'.\n    '''\n    if n<0:\n        return []\n    elif n==0:\n        return [1]\n    elif n==1:\n        return [1]\n    else:\n        return factor(n-1)+factor(n-2)\n        \ndef gcd(a,b):\n    '''\n    Return the greatest common divisor 'a' and 'b'.\n    '''\n    if b==0:\n        return a\n    elif b<a:\n        return gcd(b,a%b)\n    else:\n        return a\n    \ndef is_prime(n):\n    '''\n    Return True if 'n' is a prime number, otherwise return False.\n    '''\n    if n==2 or n==3:\n        return True\n    if n<2:\n        return False\n    if n%2==0 or n%3==0:\n        return False\n    for i in range(5,int(n**0.5)+1,6):\n        if n%i==0 or n%(i+2)==0:\n            return False\n    return True\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    a = a % b\n    return a\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    #Base Case\n    if(b == 0):\n        return 1\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b<0:\n        return 0\n    else:\n        return a*power(a,b-1)\ndef factorial(n):\n    '''\n    Write a function that returns the factorial of a number.\n    '''\n    f = 1\n    for i in range(1,n+1):\n        f = f*i\n    return f\ndef fibonacci(n):\n    '''\n    Write a function that returns the first n fibonacci numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef prime_checker(n):\n    '''\n    This function returns True if 'n' is a prime number else it returns False.\n    '''\n    if n==2:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,int(n**0.5)+2,2):\n            if n%i==0:\n                return False\n        return True\ndef find_gcd(a,b):\n    '''\n    Given two positive integers, find their greatest common denominator.\n    '''\n    if a==b:\n        return a\n    else:\n        if a>b:\n            return find_gcd(a,b-1)\n        else:\n            return find_gcd(b,a-1)\ndef isprime(x):\n    '''\n    This function checks whether x is a prime number.\n    '''\n    if x==2:\n        return True\n    elif x%2==0:\n        return False\n    else:\n        for i in range(3,int(x**0.5)+2,2):\n            if x%i==0:\n                return False\n        return True\ndef is_prime(x):\n    '''\n    This function checks whether x is a prime number.\n    '''\n    if isprime(x):\n        return True\n    else:\n        for i in range(2,x):\n            if not isprime(i):\n                return False\n        return True\ndef fib_series(x):\n    '''\n    This function returns the series of fibonacci numbers starting from 0.\n    '''\n    if x==1:\n        return 0\n    elif x==2:\n        return 1\n    elif x==3:\n        return 1\n    elif x==4:\n        return 2\n    elif x==5:\n        return 3\n    elif x==6:\n        return 5\n    else:\n        return fib_series(x-1)+fib_series(x-2)+fib_series(x-3)+fib_series(x-4)\ndef fib_series_last_prime(n):\n    '''\n    This function returns the series of fibonacci numbers starting from n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    elif n==4:\n        return 5\n    elif n==5:\n        return 7\n    elif n==6:\n        return 11\n    elif n==7:\n        return 13\n    elif n==8:\n        return 17\n    elif n==9:\n        return 19\n    elif n==10:\n        return 23\n    elif n==11:\n        return 29\n    elif n==12:\n        return 31\n    else:\n        return fib_series(n-1)+fib_series(n-2)+fib_series(n-3)+fib_series(n-4)\ndef fib_series_fast(n):\n    '''\n    This function returns the series of fibonacci numbers starting from n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    elif n==4:\n        return 5\n    elif n==5:\n        return 7\n    elif n==6:\n        return 11\n    elif n==7:\n        return 13\n    elif n==8:\n        return 17\n    elif n==9:\n        return 19\n    elif n==10:\n        return 23\n    elif n==11:\n        return 29\n    elif n==12:\n        return 31\n    else:\n        return fib_series(n-1)+fib_series(n-2)+fib_series(n-3)+fib_series(n-4)\ndef power_base(x, b):\n    '''\n    This function returns the value of x to the power of b.\n    '''\n    return power(x,(b-1)//2)\ndef power_plus(x, b):\n    '''\n    This function returns the value of x to the power of b.\n    '''\n    if b==0:\n        return x\n    else:\n        return power_plus(x,b//2)\ndef power_minus(x, b):\n    '''\n    This function returns the value of x to the power of b.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return x\n    else:\n        return power_minus(x,b//2)\ndef power_product(x,b):\n    '''\n    This function returns the value of x to the power of b.\n    '''\n    if b==0:\n        return x\n    elif b==1:\n        return x*x\n    else:\n        return power_product(x*x,b//2)\ndef power_series(n,a,b):\n    '''\n    This function returns the series of values of a to the power of b.\n    '''\n    if n==0:\n        return [a]\n    elif n==1:\n        return [a]\n    elif n==2:\n        return [a,a]\n    else:\n        return power_series(n-1,a,b)\ndef power_series_last_prime(n,a,b):\n    '''\n    This function returns the series of values of a to the power of b.\n    '''\n    if n==0:\n        return [a]\n    elif n==1:\n        return [a]\n    elif n==2:\n        return [a,a]\n    else:\n        return power_series_last_prime(n-1,a,b)\ndef power_series_fast(n,a,b):\n    '''\n    This function returns the series of values of a to the power of b.\n    '''\n    if n==0:\n        return [a]\n    elif n==1:\n        return [a]\n    elif n==2:\n        return [a,a]\n    else:\n        return power_series_fast(n-1,a,b)\ndef inverse_power(x,b):\n    '''\n    This function returns the inverse of x to the power of b.\n    '''\n    return power(x,(-b-1)/2)\ndef prime_factorial(n):\n    '''\n    This function returns the factorial of a number.\n    '''\n    if n==2:\n        return 2\n    elif n==3:\n        return 1\n    else:\n        return n*(n-1)*(n-2)\ndef fibonacci_series(x):\n    '''\n    This function returns the series of fibonacci numbers starting from 0.\n    '''\n    if x==1:\n        return 0\n    elif x==2:\n        return 1\n    elif x==3:\n        return 1\n    elif x==4:\n        return 2\n    elif x==5:\n        return 3\n    elif x==6:\n        return 5\n    else:\n        return fibonacci_series(x-1)+fibonacci_series(x-2)+fibonacci_series(x-3)+fibonacci_series(x-4)\ndef fibonacci_series_fast(n):\n    '''\n    This functio"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        return a**b\n    except TypeError:\n        print(\"Error: Unsupported operand type(s).\")\n    except ValueError:\n        print(\"Error: Can not convert the number '{0}' to int or float.\".format(b))\n    \n    \na=int(input(\"Enter the first number: \"))\nb=int(input(\"Enter the second number: \"))\nprint(power(a,b))\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use a tuple to sort the list, not a list\n    test_list.sort(key = itemgetter(0, 1))\n    # Use a list to sort the list, not a list\n    test_list.sort(key = itemgetter(0))\n    # Use a function to sort the list, not a list\n    test_list.sort(key = itemgetter(0, 1))\n    return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if test_list:\n        return min(test_list, key = itemgetter(1))\n    return None\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for value in test_list:\n        if minimum[1] > value[1]:\n            minimum = value\n    return minimum[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return -1\n    first = min(test_list, key=itemgetter(1))\n    return first\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_list = min(test_list, key=itemgetter(1))\n    return min_list[0]\ndef index_minimum_v2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_list = min(test_list, key=itemgetter(2))\n    return min_list[0]\ndef index_minimum_v3(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_list = min(test_list, key=itemgetter(2,3))\n    return min_list[0]\ndef index_minimum_v4(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_list = min(test_list, key=itemgetter(2,3,4))\n    return min_list[0]\ndef index_minimum_v5(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_list = min(test_list, key=itemgetter(2,3,4,5))\n    return min_list[0]\ndef index_minimum_v6(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_list = min(test_list, key=itemgetter(2,3,4,5,6))\n    return min_list[0]\ndef index_minimum_v7(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_list = min(test_list, key=itemgetter(2,3,4,5,6,7))\n    return min_list[0]\ndef index_minimum_v8(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_list = min(test_list, key=itemgetter(2,3,4,5,6,7,8))\n    return min_list[0]\ndef index_minimum_v9(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_list = min(test_list, key=itemgetter(2,3,4,5,6,7,8,9))\n    return min_list[0]\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(1))\n    return max_list[0]\ndef index_maximum_v1(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2))\n    return max_list[0]\ndef index_maximum_v2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2,3))\n    return max_list[0]\ndef index_maximum_v3(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2,3,4))\n    return max_list[0]\ndef index_maximum_v4(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2,3,4,5))\n    return max_list[0]\ndef index_maximum_v5(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2,3,4,5,6,7))\n    return max_list[0]\ndef index_maximum_v6(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2,3,4,5,6,7,8))\n    return max_list[0]\ndef index_maximum_v7(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2,3,4,5,6,7,8,9))\n    return max_list[0]\ndef index_maximum_v8(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2,3,4,5,6,7,8,9,10))\n    return max_list[0]\ndef index_maximum_v9(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2,3,4,5,6,7,8,9,10,11))\n    return max_list[0]\ndef index_maximum_v10(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2,3,4,5,6,7,8,9,10,11,12))\n    return max_list[0]\ndef index_maximum_v11(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2,3,4,5,6,7,8,9,10,11,12,13))\n    return max_list[0]\ndef index_maximum_v12(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2,3,4,5,6,7,8,9,10,11,12,13,14))\n    return max_list[0]\ndef index_maximum_v13(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2,3,4,5,6,7,8,9,10,11,12,13,14,15))\n    return max_list[0]\ndef index_maximum_v14(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    max_list = max(test_list, key=itemgetter(2,3"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min = min(test_list, key=itemgetter(1))\n    return min[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key=itemgetter(1))\n    return min_value[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    dict_num = {}\n    for i in test_list:\n        if i[1] not in dict_num:\n            dict_num[i[1]] = i[0]\n        else:\n            dict_num[i[1]] += i[0]\n    return min(dict_num, key = dict_num.get)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_value = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < minimum_value:\n            minimum_value = test_list[i][1]\n    return minimum_value\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 0\n    for i in range(0, len(lst)):\n        for j in range(0, len(lst[i])):\n            if j == 0:\n                min_length = len(lst[i][j])\n            else:\n                if min_length < len(lst[i][j]):\n                    min_length = len(lst[i][j])\n    return min_length\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = []\n    smallest.append(lst[0])\n    smallest = smallest + Find_Min_Length(lst[1:])\n    smallest.append(lst[-1])\n    smallest = smallest + Find_Min_Length(lst[1:])\n    return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    s = 0\n    if lst == None or len(lst) == 0:\n        return -1\n    else:\n        for i in range(len(lst)):\n            for j in range(len(lst)):\n                if lst[i] >= lst[j]:\n                    break\n            else:\n                if i == 0:\n                    s = len(lst)\n                else:\n                    s = min(s, len(lst[i-1]))\n    return s\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        minimum = lst[0]\n        for item in lst:\n            if item < minimum:\n                minimum = item\n        return minimum"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    curr_len = 0\n    for l in lst:\n        curr_len += len(l)\n        if curr_len < min_len:\n            min_len = curr_len\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if(len(lst) == 0):\n        return 0\n    else:\n        return 1 + Find_Min_Length(lst[1:])\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    list = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if len(list)==j:\n                break\n            list.append(lst[i][j])\n    return min(list)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    small = 0\n    for i in lst:\n        if len(i) < small:\n            small = len(i)\n    return small\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    len = 0\n    for i in range(len(lst)):\n        len = max(len, len(lst[i]))\n    return len\n    "
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = 0\n    smallest_element = lst[0][0]\n    for i in range(len(lst)):\n        if lst[i][0] < smallest_element:\n            smallest_element = lst[i][0]\n            smallest_element_index = i\n    return smallest_element_index\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n // 2 + 1 + (divisor(n//2))\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==0 or n==1:\n        return 1\n    elif n==2:\n        return 3\n    elif n%2==0:\n        return divisor(n//2)+1\n    else:\n        return divisor(n-1)+2\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    divs = 0\n    while n % 2 == 0:\n        n = n / 2\n        divs += 1\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    counter = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    while n % 2 == 0:\n        n /= 2\n        divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n // 1 + divisor(n - 1)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div_count = 1\n    for div in range(1, n + 1):\n        if n % div == 0:\n            div_count += 1\n    return div_count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\ndef main():\n    print(divisor(3))\n    print(divisor(100))\n    print(divisor(1000))\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n//divisor(n-1) + divisor(n-1)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict = {}\n    for each in list1:\n        if type(each[0])!= type(list()):\n            each[0] = [each[0]]\n        for i in range(len(each[0])):\n            each[0][i] = int(each[0][i])\n        if len(each[0]) <= 2:\n            dict[each[0]] = len(each[0])\n        else:\n            dict[each[0]] = len(each[0]) + 1\n    return dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    a = []\n    #write your code here\n    b = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            a.append(list1[i][j])\n    for i in range(len(a)):\n        b.append({'frequency':a.count(a[i]),'index':i})\n    return b\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        for element in item:\n            if element not in frequency_dict:\n                frequency_dict[element] = 0\n            frequency_dict[element] = frequency_dict[element] + 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    for el in list1:\n        if el in freq_list:\n            freq_list[el] += 1\n        else:\n            freq_list[el] = 1\n    return freq_list\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1[i])):\n            if list1[i][j] in d:\n                d[list1[i][j]] += 1\n            else:\n                d[list1[i][j]] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Your code here\n    return {element:element.count(1) for element in list1"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequencies = {}\n    for element in list1:\n        if element in frequencies:\n            frequencies[element] += 1\n        else:\n            frequencies[element] = 1\n    return frequencies\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    for i in range(0, len(list1)):\n        for key,value in freq_list.items():\n            if list1[i] == key:\n                value += 1\n        freq_list[list1[i]] = 1\n    return freq_list\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for x in numbers:\n        result = result*x\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    temp_list = []\n    for i in numbers:\n        temp_list.append(i)\n    def multiply(numbers):\n        total = 1\n        for i in range(len(numbers)):\n            total *= numbers[i]\n        return total\n    def divide(numbers):\n        return len(numbers)\n    try:\n        multiply(numbers)\n        print('Multiply all the numbers in a list and divide with the length of the list is :',multiply(numbers))\n        divide(numbers)\n        print('Divide all the numbers in a list and divide with the length of the list is :',divide(numbers))\n    except TypeError:\n        print('Please enter a number to multiply')\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 0\n    for number in numbers:\n        total += number\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    x = []\n    for i in range(len(numbers)):\n        x.append(numbers[i]*i)\n    return x\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # create a list\n    numbers = list(numbers)\n    # loop through the list and multiply with the list length\n    for i in range(len(numbers)):\n        numbers[i] = numbers[i] * len(numbers)\n    # return the new list\n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 0\n    # Loop through the array, multiplying the values and dividing\n    for i in numbers:\n        total += i\n    # Return the final result\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    # create a list containing all the numbers\n    num_list = []\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] = numbers[i] * i\n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers = [n*(len(numbers)) for n in numbers]\n    return numbers"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for i in numbers:\n        num = num * i\n    return num/len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s=str(n)\n    print(s)\n    length=len(s)\n    count=1\n    for i in range(length):\n        count*=2\n        if s[i]=='0':\n            count-=1\n            if count<=0:\n                return \"\"\n    return '1'*count\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    ans = ''\n    while n!= 0: \n        ans = str(n % 2) + ans \n        n = n // 2\n    return ans \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    assert n >= 0\n    bin_str = \"\"\n    while n!= 0:\n        bin_str = str(n % 2) + bin_str\n        n = n // 2\n    return bin_str\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    assert type(n) == int and n > 0, \"Decimal number should be positive integer\"\n    assert n >= 0, \"Decimal number should be positive integer\"\n    assert isinstance(n, int), \"Decimal number should be an integer\"\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = bin(n)[2:]\n    if(len(res)==1):\n        return '0'+res\n    else:\n        return res\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bits = ''\n    while n!= 0: \n        bits = str(n%2) + bits \n        n = n // 2\n    return bits \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n: \n        n, q = n // 2, n % 2\n        binary_str += str(q)\n    return binary_str\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: return '0'\n    return '1' + decimal_to_binary(n // 2) + (n % 2!= 0) * '0'\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Write your code here.\n    num=str(n)\n    n=int(n)\n    ans=\"\"\n    while n:\n        ans=str(bin(n))[2:]\n        n=n//2\n    return ans"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n_str = str(n)\n    return \"0b\" + n_str[1:]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                if num//i == num:\n                    return num//i + 1\n                else:\n                    return num//i + 1\n    return -1\ndef smallest_palindrome_hashing(num):\n    '''\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return num//i\n    return -1\ndef palindrome_hash(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v2(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v3(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v4(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v5(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v6(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v7(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v8(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v9(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v10(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v11(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v12(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v13(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v14(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v15(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v16(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v17(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v18(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v19(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v20(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v21(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v22(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v23(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v24(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    elif num == 1:\n        return 0\n    else:\n        return num//1\ndef palindrome_hash_v25(num):\n    '''\n    Find the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return -1\n    # step 1:\n    # mark the current number as the smallest\n    smallest = num\n    # step 2:\n    # find the next smallest palindrome\n    for i in range(num):\n        if num % i == 0:\n            break\n    # step 3:\n    # reverse the palindrome\n    num = num * 10 % 100\n    for j in range(num, smallest):\n        if j == num:\n            break\n        if j % num == 0:\n            break\n        smallest = j\n    return smallest\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    low = 0\n    if num < 10:\n        return num\n    if num < 100:\n        return num - 10\n    high = 10**9\n    while num > high:\n        low = high\n        high = high + 10\n    for i in range(low, high+1):\n        if is_palindrome(i) and i < 10:\n            return i\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def get_next_palindrome(num):\n        '''\n        Find the next palindrome that is greater than the current palindrome.\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 1:\n        sys.exit(1)\n    \n    elif num == 1:\n        return 2\n    \n    else:\n        while num % 10!= 1:\n            if num % 10 > 1:\n                num = num // 10 + num % 10\n            else:\n                num = num // 10\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        if num > 0:\n            if num % 10 == 0:\n                return True\n            elif num % 10 == 9:\n                return False\n            return is_palindrome(num//10) and num % 10 == 9\n    if is_palindrome(num):\n        return num\n    else:\n        for i in range(num, 0, -1):\n            if is_palindrome(i):\n                return i\n            else:\n                pass\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 2:\n        return 2\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = []\n    while True:\n        i = num % 10\n        num = num // 10\n        palindrome.append(i)\n        if num == 0:\n            return palindrome[-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    count = 0\n    for i in range(1, len(num) + 1):\n        if num[i-1] == num[i]:\n            count += 1\n        else:\n            if count > 0:\n                return i + 1\n            else:\n                return i\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    \n    for i in range(2, int(num**.5)+1):\n        if num % i == 0:\n            return i\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l = len(arr)\n    if k == 1:\n        return arr[k-1]\n    mid = int(l/2)\n    if k > mid:\n        return arr[mid-1]\n    if k < mid:\n        return arr[mid]\n    return arr[mid]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    left, right = 0, n-1\n    \n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] > k:\n            right = mid-1\n        else:\n            left = mid+1\n    \n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    # Find the element at the kth index\n    first = arr[0]\n    for i in range(0, len(arr)):\n        if first == arr[i]:\n            return arr[i]\n        \n    # If the index is out of range\n    return -1"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k == 0:\n        return None\n    if k == 1:\n        return arr[k-1]\n    return arr[k-1] + kth_element(arr, k-1)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == []:\n        return None\n    if k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k-1"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == []:\n        return -1\n    if k == 0:\n        return arr[0]\n    k -= 1\n    return kth_element(arr, k)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == None or len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    assert 1 <= k <= len(arr)\n    \n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k - 1)"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l, r = 0, len(arr) - 1\n    \n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] < k:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return arr[l]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = ''\n    word = word.lower()\n    for letter in word:\n        if letter in 'abcdefghijklmnopqrstuvwxyz':\n            camel_case_word += letter.upper()\n        else:\n            camel_case_word += letter\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_char = word[0]\n    first_char_upper = first_char.upper()\n    camel_first = first_char_upper[0].upper() + first_char_upper[1:]\n    final_word = camel_first + word[1:]\n    return final_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    if word[0]!= '_':\n        word = '_' + word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = \"\"\n    for i in word:\n        if i!= \" \":\n            new_word += i.capitalize()\n        else:\n            new_word += i\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == \".\" or word == \",\" or word == \":\":\n        return word\n    else:\n        first_letter = word[0].upper()\n        if first_letter in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']:\n            return word.upper()\n        else:\n            return word.lower()\n    "
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.lower() not in ['am', 'as', 'at', 'be', 'by', 'for', 'from', 'has', 'he','she', 'him', 'himself', 'her', 'hers', 'it', 'its', 'they', 'them', 'their', 'what', 'this', 'these', 'those', 'your', 'yours', 'yourself', 'yourselves', 'yourselves', 'yourselves', 'and', 'you', 'your', 'you']:\n        return word\n    else:\n        new_word = ''\n        for letter in word:\n            if letter.lower() in ['a', 'e', 'i', 'o', 'u']:\n                new_word = new_word + letter.capitalize()\n            else:\n                new_word = new_word + letter\n        return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join(word[0].upper() + word[1:] for word in word.split(\"_\"))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    case_word = word.title()\n    return case_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = ''\n    for char in word:\n        if char.isupper():\n            camel += char.lower()\n        else:\n            camel += char.capitalize()\n    return camel\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    import string\n    lower_words = word.lower()\n    camel_words = ''\n    for i in lower_words:\n        if i.isalpha() or i == '_':\n            camel_words += string.capwords(i)\n        else:\n            camel_words += i\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    l = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        l[i][0] = i\n    for i in range(1, n+1):\n        for j in range(1, i):\n            if l[i][j] == l[i][j-1]:\n                l[i][j] = l[i][j] + l[i][j-1]\n            elif l[i][j] == 0:\n                l[i][j] = l[i][j-1] + l[i-1][j-1]\n    return l[n][m]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m: return eulerian_num(n, m-1)\n    if n == m: return n\n    if n % 2 == 0: return eulerian_num(n//2, m)\n    return eulerian_num(n-1, m-1) + n\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n    \n    if m % 2 == 0:\n        return eulerian_num(n, m//2)\n    \n    else:\n        return eulerian_num(n, (m+1)//2)\n        \nn = int(input(\"Enter the number of nodes: \"))\nm = int(input(\"Enter the degree of the graph: \"))\nprint(eulerian_num(n, m))"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def eulerian_traverse(n, m, i, index, visited):\n        if index == len(m):\n            return 'Graph is Eulerian'\n        if index == len(m):\n            return 'Graph is not Eulerian'\n        if visited[i] == True:\n            return 'Graph is not Eulerian'\n        if m[index][i] == '+':\n            return 'Graph is Eulerian'\n        else:\n            visited[i] = True\n            visited[index] = True\n            # edge = set(m[index])\n            # print(edge)\n            # m[index].append(edge)\n            return eulerian_traverse(n, m, i, index + 1, visited)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = []\n    \n    def dfs(m):\n        if m in m[:m.index(0)]:\n            return m[:m.index(0)]\n        else:\n            return ''\n    \n    def bfs(m):\n        visited = {}\n        stack = [m[0]]\n        while stack:\n            curr = stack[-1]\n            if curr not in m[:m.index(0)]:\n                stack.pop()\n            else:\n                m = stack\n                stack.pop()\n            if curr not in m[:m.index(0)]:\n                visited[curr] = True\n        return m\n    \n    m = [i for i in range(1, n+1)]\n    m = dfs(m)\n    m = bfs(m)\n    \n    for i in m:\n        res.append(i)\n    \n    return res\n    \ndef eulerian_ladder(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = []\n    \n    def dfs(m):\n        if m in m[:m.index(0)]:\n            return m[:m.index(0)]\n        else:\n            return ''\n    \n    def bfs(m):\n        visited = {}\n        stack = [m[0]]\n        while stack:\n            curr = stack[-1]\n            if curr not in m[:m.index(0)]:\n                stack.pop()\n            else:\n                m = stack\n                stack.pop()\n            if curr not in m[:m.index(0)]:\n                visited[curr] = True\n        return m\n    \n    m = [i for i in range(1, n+1)]\n    m = dfs(m)\n    m = bfs(m)\n    \n    for i in m:\n        res.append(i)\n    \n    return res\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # If the number of vertices is odd, it's not an Eulerian number\n    if n % 2!= 0:\n        return 0\n    \n    # Store the value of the vertex 0 and the vertex 1\n    v0 = 0\n    v1 = 1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Start with 2\n    if n == 2 and m == 2: \n        return 2 \n    \n    # if n == 1: \n    if n % 2 == 1: \n        return 0 \n    \n    # if m == 1: \n    if m % 2 == 1: \n        return 1 \n        \n    # 0\n    if n == 1 or m == 1: \n        return 1 \n    \n    # If the first and the last element are equal then they have a \n    # single cycle.\n    if n == m: \n        return 2\n    \n    # Otherwise they have to have some number of cycles \n    if (n - m) % 2 == 1: \n        return 0\n        \n    # n is even, m is odd. \n    # n/2 = m/2 \n    # If n/2 > m/2 then n/2 = m/2 and it has a cycle. \n    # i.e. 2/2 = 1 \n    if n % 2 == 0 and m % 2 == 1: \n        return 0\n        \n    # If m/2 > n/2 then m/2 = n/2 and it has a cycle. \n    # i.e. 2/2 = 1 \n    if m % 2 == 0 and n % 2 == 1: \n        return 0\n        \n    # n/2 = m/2 \n    # If both m/2 and n are odd then \n    # n/2 = m/2 \n    # and m/2 = n \n    if m % 2 == 1 and n % 2 == 1: \n        return 0\n        \n    # n is even. \n    # n/2 = m/2 \n    # m/2 = n \n    # If both m/2 and n are odd then \n    # m/2 = n \n    # and n/2 = m \n    # (m - n/2 = n) \n    if n % 2 == 0 and m % 2 == 0: \n        return 0\n    \n    # If both m/2 and n are odd then \n    # m/2 = n \n    # and n/2 = m \n    # and n is even. \n    # (m - n/2 = n) \n    if n % 2 == 0 and m % 2 == 1: \n        return 0\n        \n    # m/2 = n \n    # n/2 = m \n    # If both m/2 and n are odd then \n    # m/2 = n \n    # and n/2 = m \n    # and n is even. \n    # (n - m/2 = n) \n    if n % 2 == 0 and m % 2 == 0: \n        return 1 \n        \n    # n is even. \n    # n/2 = m \n    # m/2 = n \n    # (n - m/2 = n) \n    # and m is even. \n    # (m - n/2 = n) \n    if n % 2 == 1 and m % 2 == 0: \n        return 1\n        \n    # n is odd. \n    # n/2 = m \n    # m/2 = n \n    # (n - m/2 = n) \n    # and m is odd. \n    # (m - n/2 = n) \n    if n % 2 == 0 and m % 2 == 1: \n        return 1\n        \n    # m is odd. \n    # n/2 = m \n    # m/2 = n \n    # (n - m/2 = n) \n    # and n is odd. \n    # (m - n/2 = n) \n    if n % 2 == 1 and m % 2 == 1: \n        return 1 \n    \n    # m is even. \n    # n/2 = m \n    # m/2 = n \n    # (n - m/2 = n) \n    # and m is even. \n    # (m - n/2 = n) \n    if m % 2 == 0 and n % 2 == 0: \n        return 2 \n        \n    # m is even. \n    # n/2 = m \n    # m/2 = n \n    # (n - m/2 = n) \n    # and n is even. \n    # (m - n/2 = n) \n    if n % 2 == 1 and m % 2 == 0: \n        return 2 \n        \n    # m is odd. \n    # n/2 = m \n    # m/2 = n \n    # (n - m/2 = n) \n    # and m is odd. \n    # (m - n/2 = n) \n    if n % 2 == 0 and m % 2 == 1: \n        return 2 \n        \n    # m is odd. \n    # n/2 = m \n    # m/2 = n \n    # (n - m/2 = n) \n    # and m is even. \n    # (m - n/2 = n) \n    if n % 2 == 1 and m % 2 == 1: \n        return 2 \n    \n    # m is even. \n    # n/2 = m \n    # m/2 = n \n    # (n - m/2 = n) \n    # and n is even. \n    # (m - n/2 = n) \n    if m % 2 == 0 and n % 2 == 0: \n        return 2 \n        \n    # m is odd. \n    # n/2 = m \n    # m/2 = n \n    # (n - m/2 = n) \n    # and n is odd. \n    # (m - n/2 = n) \n    if n % 2 == 1 and m % 2 == 1: \n        return 2 \n        \n    # m is odd. \n    # n/2 = m \n    # m/2 = n \n    # (n - m/2 = n) \n    # and n is even. \n    # (m - n/2 = n) \n    if n % 2 == 0 and m % 2 == 0: \n        return 2 \n        \n    # m is odd. \n    # n/2 = m \n    # m/2 = n \n    # (n - m/2 = n) \n    # and n is odd. \n    # (m - n/2 = n) \n    if n % 2 == 0 and m % 2 == 1: \n        return 2 \n        \n    # m is even. \n    # n/2 = m \n    # n/2 = m \n    # (n - m/2 = n) \n    # and n is even. \n    # (m - n/2 = n) \n    if m % 2 == 0 and n % 2 == 0: \n        return 0\n        \n    # m is odd. \n    # n/2 = m \n    # m/2 = n \n    # (n - m/2 = n) \n    # and n is odd. \n    # (m - n/2 = n) \n    if m % 2 == 1 and n % 2 == 0: \n        return 0\n        \n    # m is odd. \n    # n/2 = m \n    # n/2 = m \n    # (n - m/2 = n) \n    # and n is odd. \n    # (m - n/2 = n) \n    if m % 2 == 1 and n % 2 == 1: \n        return 0\n        \n    # m is even. \n    # n/2 = m \n    # n/2 = m \n    # (n - m/2 = n) \n    # and n is even. \n    # (m - n/2 = n) \n    if m % 2 == 0 and n % 2 == 0: \n        return 1 \n        \n    # m is even. \n    # n/2 = m \n    # m/2 = n \n    # (n - m/2 = n) \n    # and n is even. \n    # (m - n/2 = n) \n    if m % 2 == 0 and n % 2 == 1: \n        return 1\n    \n    # n is even. \n    # n/2 = m \n    "
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    g = []\n    for i in range(n+1):\n        g.append([])\n    \n    for i in range(1, n+1):\n        g[i] = [i]\n        \n    for i in range(m+1, n+1):\n        g[i] = [i]\n        \n    g[0][0] = 0\n    g[0][1] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            g[i][j] = g[i-1][j-1] + g[i-1][j]\n            \n        g[i][i] = 0\n        g[i][i-1] = g[i-1][i-1] + g[i-1][i]\n    \n    return g[n][m]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n\n    elif n == 0:\n        return n\n    elif n < 0:\n        print('Eulerian number:')\n        print(n)\n        return eulerian_num(m, n-1)\n    else:\n        return n * (eulerian_num(n-1, m))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 1\n    while m > 0:\n        count = count * n + m % n\n        if count == m:\n            break\n        m = m // n\n    if count == m:\n        return count\n    else:\n        return 0\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO: Write your code here\n    return sorted(input_list, key=lambda x: x[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list_copy = input_list.copy()\n    sorted_sublist = []\n    for i in input_list_copy:\n        for j in i:\n            if j[0] =='':\n                j = j[1:]\n            if j[0]!='':\n                j = j.replace(' ', '')\n                sorted_sublist.append(j)\n    return sorted_sublist\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    new_list2 = []\n    for i in range(len(input_list)):\n        if input_list[i][0]!= input_list[i][1]:\n            new_list.append(input_list[i])\n        else:\n            new_list.append(input_list[i][1])\n    for i in range(len(new_list)):\n        new_list2.append(new_list[i][0])\n    for i in range(len(new_list2)):\n        new_list2.append(new_list[i][1])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        for item in sublist:\n            if isinstance(item, list):\n                sort_sublists(item)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    temp_list = []\n    for i in input_list:\n        for j in i:\n            temp_list.append(j)\n    # print(temp_list)\n    temp_list.sort()\n    # print(temp_list)\n    return temp_list\n    \n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #Pass in the input list and you have to sort it by length\n    #once you're done, you have to pass in the sorted list\n    #Don't pass anything with the return value, since the function isn't returning a list\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(i, len(input_list)):\n            if input_list[i][j] == input_list[i][j-1] or input_list[i][j] == input_list[i][j-1]:\n                input_list[i], input_list[j] = input_list[j], input_list[i]\n            else:\n                input_list[i] = input_list[i][:-1]\n                input_list[j] = input_list[j][1:]\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through input list to sort each item\n    for item in input_list:\n        # loop through each item in the list\n        for i in range(len(item)):\n            # if current item is a number, it will be the last item in the sublist\n            if type(item[i]) == int:\n                # if the current item is not a number, it is a string\n                if not item[i]:\n                    # if it's a string, it will be the last item in the sublist\n                    item[i] = item[i]\n                    # insert it to the end of the sublist\n                    item.insert(len(item), item[i])\n                else:\n                    # else, insert it to the end of the sublist\n                    item.append(item[i])\n                    # insert it to the end of the sublist\n                    item.insert(len(item), item[i])\n            else:\n                # if it's a string, it will be the last item in the sublist\n                if item[i]!= item[-1]:\n                    # insert it to the end of the sublist\n                    item.insert(len(item), item[i])\n                    # insert it to the end of the sublist\n                    item.append(item[i])\n                else:\n                    # otherwise, insert it to the end of the sublist\n                    item.append(item[i])\n    return input_list\n    \n    \ndef main():\n    '''\n    Tests for sort_sublists function.\n    '''\n    test_lists = [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, '', '', 5, 6],\n        ['x', 1, 'y', 'z', 2, 'x', 3, 'y', 4, 'z', 5, '', 6],\n        ['a', 1, 2, 'x', 'y', 'z', 4, 5, 6, 7, 8, 9],\n        ['a', 2, 'x', 4, '', 5, '', 6, 7, 8, 9, 10, 11],\n        [0, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],\n        ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],\n        ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],\n        ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],\n        ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],\n        ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],\n        ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', "
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(i,len(input_list)):\n            if input_list[i] > input_list[j]:\n                input_list[i], input_list[j] = input_list[j], input_list[i]\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for l in input_list:\n        for i in range(len(l)):\n            if type(l[i]) is list:\n                sort_sublists(l[i])\n            else:\n                l[i] =''.join(l[i].split())\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for ele in lst:\n        if ele==1:\n            count=count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    n=0\n    for item in lst:\n        if item == True:\n            n+=1\n    return n\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n        \n    \n    \n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt=0\n    for el in lst:\n        if(el):\n            cnt+=1\n    return cnt"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for i in lst:\n        if i is True:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + (test_list,)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # your code goes here\n    a = test_tup[0]\n    b = test_tup[1]\n    test_list.append(a)\n    test_list.append(b)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(0, len(test_list)):\n        test_tup.append(test_list[i])\n    \n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for el in test_tup:\n        test_list.append(el)\n    return test_list\n    \ndef test_solution(test_list, test_tup):\n    '''\n    Write a function that tests your solution.\n    '''\n    for el in test_list:\n        if el in test_tup:\n            return True\n    return False\n    \ndef remove_dups(test_list):\n    '''\n    Write a function that returns a list of all the unique items in the test list.\n    '''\n    result = []\n    for el in test_list:\n        if el not in result:\n            result.append(el)\n    return result\n    \ndef test_solution2(test_list):\n    '''\n    Write a function that tests your solution.\n    '''\n    result = []\n    for el in test_list:\n        if el not in result:\n            result.append(el)\n    return result\n    \n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    for element in test_tup:\n        test_list.append(element)\n    return test_list\n    \ndef add_to_dictionary(d, key, value):\n    '''\n    Write a function to add the given key, value, and dictionary.\n    '''\n    \n    d[key]=value\n    \ndef remove_from_dictionary(d, key):\n    '''\n    Write a function to remove the given key from the given dictionary.\n    '''\n    \n    del d[key]\n    \ndef find_key(d, value):\n    '''\n    Write a function to return the key with the given value.\n    '''\n    \n    return next(item for item in d.keys() if item.lower()==value.lower()"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp_list = list()\n    for i in test_tup:\n        temp_list.append(i)\n    test_list.append(temp_list)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) == tuple:\n            if type(test_tup[i]) == tuple:\n                test_tup[i] = test_list[i] + test_tup[i]\n            else:\n                test_tup[i] = test_list[i] + test_tup[i]\n        else:\n            test_tup[i] = test_list[i] + test_tup[i]\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_tup)!= tuple:\n        print('Bad tuple type:', test_tup)\n    else:\n        for i in range(len(test_list)):\n            test_list[i] = test_list[i] + test_tup[i]\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # YOUR CODE HERE\n    # raise NotImplementedError\n    if not test_list:\n        return\n    elif not test_tup:\n        return\n    else:\n        list_str = \"\"\n        for item in test_list:\n            list_str += \"(\"\n            list_str += str(item) + \",\"\n            list_str += \"(\"\n            list_str += str(test_tup[0]) + \",\"\n            list_str += str(test_tup[1]) + \",\"\n            list_str += \")\"\n        test_list[0] = int(list_str.split(',')[0])\n        test_tup[0] = int(list_str.split(',')[1])\n        list_str = \"\"\n        for item in test_tup:\n            list_str += \"(\"\n            list_str += str(item) + \",\"\n            list_str += \"(\"\n            list_str += str(test_tup[0]) + \",\"\n            list_str += str(test_tup[1]) + \",\"\n            list_str += \")\"\n        test_tup[0] = int(list_str.split(',')[0])\n        test_tup[1] = int(list_str.split(',')[1])\n    return test_list, test_tup\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Your code here\n    # return None\n    \ndef merge_sorted_lists(arr1,arr2,arr3):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    # Your code here\n    # return None\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #create a variable to store the merge result\n    sorted_list = []\n    #iterate the three numbers\n    for i in range(len(num1)):\n        for j in range(len(num2)):\n            #if the index is larger than the length of the number, just append it and skip it\n            if i >= len(num1) and j >= len(num2):\n                sorted_list.append(num2[j])\n                continue\n            elif i >= len(num1) and j >= len(num2):\n                sorted_list.append(num2[i])\n                continue\n            #if the index is smaller than the length of the number, just append it and skip it\n            elif i >= len(num1) and j >= len(num2):\n                sorted_list.append(num1[i])\n                continue\n            #if the index is larger than the length of the number, just append it and skip it\n            elif i >= len(num1):\n                sorted_list.append(num1[j])\n                continue\n            else:\n                sorted_list.append(num2[j])\n    #if the length of the sorted list is equal to the length of the numbers\n    if len(num1) == len(num2) and len(num1) == len(num3):\n        #iterate the numbers of the numbers in the first list\n        for i in range(len(num1)):\n            #append the numbers of the first list\n            sorted_list.append(num1[i])\n        #iterate the numbers of the numbers in the second list\n        for j in range(len(num2)):\n            #append the numbers of the second list\n            sorted_list.append(num2[j])\n        #iterate the numbers of the numbers in the third list\n        for k in range(len(num3)):\n            #append the numbers of the third list\n            sorted_list.append(num3[k])\n    #if the length of the sorted list is not equal to the length of the numbers\n    if len(num1)!= len(num2)!= len(num3):\n        #create a variable to store the merge result\n        merge_result = []\n        #iterate the numbers of the numbers in the first list\n        for i in range(len(num1)):\n            #append the numbers of the first list\n            merge_result.append(num1[i])\n        #iterate the numbers of the numbers in the second list\n        for j in range(len(num2)):\n            #append the numbers of the second list\n            merge_result.append(num2[j])\n        #iterate the numbers of the numbers in the third list\n        for k in range(len(num3)):\n            #append the numbers of the third list\n            merge_result.append(num3[k])\n    #if the length of the list is equal to the length of the numbers\n    if len(num1) == len(num2) == len(num3):\n        #sort the numbers from smallest to largest\n        merge_result.sort()\n        #return the sorted list\n        return merge_result\n    #if the length of the list is not equal to the length of the numbers\n    else:\n        #create a variable to store the merge result\n        merge_result = []\n        #iterate the numbers of the numbers in the first list\n        for i in range(len(num1)):\n            #append the numbers of the first list\n            merge_result.append(num1[i])\n        #iterate the numbers of the numbers in the second list\n        for j in range(len(num2)):\n            #append the numbers of the second list\n            merge_result.append(num2[j])\n        #iterate the numbers of the numbers in the third list\n        for k in range(len(num3)):\n            #append the numbers of the third list\n            merge_result.append(num3[k])\n        #if the length of the list is not equal to the length of the numbers\n        if len(num1)!= len(num2)!= len(num3):\n            #sort the numbers from smallest to largest\n            merge_result.sort()\n            #return the sorted list\n            return merge_result\n        #if the length of the list is equal to the length of the numbers\n        else:\n            #create a variable to store the merge result\n            merge_result = []\n            #iterate the numbers of the numbers in the first list\n            for i in range(len(num1)):\n                #append the numbers of the first list\n                merge_result.append(num1[i])\n            #iterate the numbers of the numbers in the second list\n            for j in range(len(num2)):\n                #append the numbers of the second list\n                merge_result.append(num2[j])\n            #iterate the numbers of the numbers in the third list\n            for k in range(len(num3)):\n                #append the numbers of the third list\n                merge_result.append(num3[k])\n            #if the length of the list is not equal to the length of the numbers\n            if len(num1)!= len(num2)!= len(num3):\n                #sort the numbers from smallest to largest\n                merge_result.sort()\n                #return the sorted list\n                return merge_result\n            #if the length of the list is equal to the length of the numbers\n            else:\n                #create a variable to store the merge result\n                merge_result = []\n                #iterate the numbers of the numbers in the first list\n                for i in range(len(num1)):\n                    #append the numbers of the first list\n                    merge_result.append(num1[i])\n                #iterate the numbers of the numbers in the second list\n                for j in range(len(num2)):\n                    #append the numbers of the second list\n                    merge_result.append(num2[j])\n                #iterate the numbers of the numbers in the third list\n                for k in range(len(num3)):\n                    #append the numbers of the third list\n                    merge_result.append(num3[k])\n                #if the length of the list is not equal to the length of the numbers\n                if len(num1)!= len(num2)!= len(num3):\n                    #sort the numbers from smallest to largest\n                    merge_result.sort()\n                    #return the sorted list\n                    return merge_result\n                #if the length of the list is equal to the length of the numbers\n                else:\n                    #create a variable to store the merge result\n                    merge_result = []\n                    #iterate the numbers of the numbers in the first list\n                    for i in range(len(num1)):\n                        #append the numbers of the first list\n                        merge_result.append(num1[i])\n                    #iterate the numbers of the numbers in the second list\n                    for j in range(len(num2)):\n                        #append the numbers of the second list\n                        merge_result.append(num2[j])\n                    #iterate the numbers of the numbers in the third list\n                    for k in range(len(num3)):\n                        #append the numbers of the third list\n                        merge_result.append(num3[k])\n                    #if the length of the list is not equal to the length of the numbers\n                    if len(num1)!= len(num2)!= len(num3):\n                        #sort the numbers from smallest to largest\n                        merge_result.sort()\n                        #return the sorted list\n                        return merge_result\n                    #if the length of the list is equal to the length of the numbers\n                    else:\n                        #create a variable to store the merge result\n                        merge_result = []\n                        #iterate the numbers of the numbers in the first list\n                        for i in range(len(num1)):\n                            #append the numbers of the first list\n                            merge_result.append(num1[i])\n                        #iterate the numbers of the numbers in the second list\n                        for j in range(len(num2)):\n                            #append the numbers of the second list\n                            merge_result.append(num2[j])\n                        #iterate the numbers of the numbers in the third list\n                        for k in range(len(num3)):\n                            #append the numbers of the third list\n                            merge_result.append(num3[k])\n                        #if the length of the list is not equa"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Copy the lists\n    num1 = num1[:]\n    num2 = num2[:]\n    num3 = num3[:]\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while (i < len(num1) and j < len(num2) and k < len(num3)):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            result.append(num1[i])\n            i+=1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            result.append(num2[j])\n            j+=1\n        else:\n            result.append(num3[k])\n            k+=1\n    while(i < len(num1)):\n        result.append(num1[i])\n        i+=1\n    while(j < len(num2)):\n        result.append(num2[j])\n        j+=1\n    while(k < len(num3)):\n        result.append(num3[k])\n        k+=1\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heappush(merged_list,(num1[0] + num2[0] + num3[0],num1[0],num2[0],num3[0]))\n    heapq.heappush(merged_list,(num1[1] + num2[1] + num3[1],num1[1],num2[1],num3[1]))\n    heapq.heappush(merged_list,(num1[2] + num2[2] + num3[2],num1[2],num2[2],num3[2]))\n    heapq.heappush(merged_list,(num1[3] + num2[3] + num3[3],num1[3],num2[3],num3[3]))\n    print(heapq.heappop(merged_list)[1:])\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i1 = 0\n    i2 = 0\n    while i1 < len(num1) and i2 < len(num2):\n        if num1[i1] > num2[i2]:\n            merged_list.append(num1[i1])\n            i1 = i1 + 1\n        else:\n            merged_list.append(num2[i2])\n            i2 = i2 + 1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for num in num1:\n        if num not in merged_list:\n            merged_list.append(num)\n    for num in num2:\n        if num not in merged_list:\n            merged_list.append(num)\n    for num in num3:\n        if num not in merged_list:\n            merged_list.append(num)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    merged_list.append(num1)\n    merged_list.append(num2)\n    merged_list.append(num3)\n    merged_list.sort()\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    num1[i]=num2[j]\n    num2[j]=num3[k]\n    num3[k]=num1[i]\n    print(num1)\n    print(num2)\n    print(num3)\n    return num1,num2,num3\n    \n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    #m_list = []\n    #num1.reverse()\n    #num2.reverse()\n    #num3.reverse()\n    \n    #for i in range(0,len(num1)):\n    #    m_list.append(num1[i])\n    #for j in range(0,len(num2)):\n    #    m_list.append(num2[j])\n    #for k in range(0,len(num3)):\n    #    m_list.append(num3[k])\n    \n    #num1.reverse()\n    #num2.reverse()\n    #num3.reverse()\n    \n    #for i in range(0,len(num1)):\n    #    m_list.append(num1[i])\n    #for j in range(0,len(num2)):\n    #    m_list.append(num2[j])\n    #for k in range(0,len(num3)):\n    #    m_list.append(num3[k])\n    \n    #m_list.extend(num1)\n    #m_list.extend(num2)\n    #m_list.extend(num3)\n    \n    #return m_list\n    return num1 + num2 + num3\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    res=0\n    for i in range(n):\n        res+=s[i]\n    return res\n    \ndef test():\n    print(f'The number of elements in the list is {len(s)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n)} is {odd_Equivalent(s,n-1)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-1)} is {odd_Equivalent(s,n-2)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-2)} is {odd_Equivalent(s,n-3)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-3)} is {odd_Equivalent(s,n-4)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-4)} is {odd_Equivalent(s,n-5)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-5)} is {odd_Equivalent(s,n-6)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-6)} is {odd_Equivalent(s,n-7)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-7)} is {odd_Equivalent(s,n-8)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-8)} is {odd_Equivalent(s,n-9)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-9)} is {odd_Equivalent(s,n-10)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-10)} is {odd_Equivalent(s,n-11)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-11)} is {odd_Equivalent(s,n-12)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-12)} is {odd_Equivalent(s,n-13)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-13)} is {odd_Equivalent(s,n-14)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-14)} is {odd_Equivalent(s,n-15)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-15)} is {odd_Equivalent(s,n-16)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-16)} is {odd_Equivalent(s,n-17)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-17)} is {odd_Equivalent(s,n-18)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-18)} is {odd_Equivalent(s,n-19)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-19)} is {odd_Equivalent(s,n-20)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-20)} is {odd_Equivalent(s,n-21)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-21)} is {odd_Equivalent(s,n-22)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-22)} is {odd_Equivalent(s,n-23)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-23)} is {odd_Equivalent(s,n-24)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-24)} is {odd_Equivalent(s,n-25)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-25)} is {odd_Equivalent(s,n-26)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-26)} is {odd_Equivalent(s,n-27)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-27)} is {odd_Equivalent(s,n-28)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-28)} is {odd_Equivalent(s,n-29)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-29)} is {odd_Equivalent(s,n-30)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-30)} is {odd_Equivalent(s,n-31)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-31)} is {odd_Equivalent(s,n-32)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-32)} is {odd_Equivalent(s,n-33)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-33)} is {odd_Equivalent(s,n-34)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-34)} is {odd_Equivalent(s,n-35)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-35)} is {odd_Equivalent(s,n-36)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-36)} is {odd_Equivalent(s,n-37)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-37)} is {odd_Equivalent(s,n-38)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-38)} is {odd_Equivalent(s,n-39)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-39)} is {odd_Equivalent(s,n-40)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-40)} is {odd_Equivalent(s,n-41)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-41)} is {odd_Equivalent(s,n-42)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-42)} is {odd_Equivalent(s,n-43)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-43)} is {odd_Equivalent(s,n-44)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-44)} is {odd_Equivalent(s,n-45)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-45)} is {odd_Equivalent(s,n-46)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n-46)} is {odd_Equivalent(s,n-47)}')\n    print(f'The odd_Equivalent function of the function {odd_Equivalent(s,n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s.lower()\n    n=int(n)\n    for i in range(1,n+1):\n        if i%2!=0:\n            print(s[i],end=\"\")\n        else:\n            print(s[i],end=\"\")\n    print(\"\\n\")\nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    result = []\n    for i in range(n):\n        for j in range(i+1):\n            result.append(s[j])\n        count += len(result)\n        result.clear()\n    return count \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # YOUR CODE HERE\n    return 1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0 \n    for i in range(n): \n        if(s[i] % 2!= 0): \n            count += 1\n    return count \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Declare variables and initialize counts\n    l = 0\n    r = 0\n    \n    # Loop over string\n    for i in s: \n        # Check if number is odd\n        if i == '1': \n            l += 1\n        else: \n            r += 1\n    \n    # Check if r is odd\n    if r%2 == 1: \n        return l\n    \n    return r\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    num = s.count('1')\n    if num % 2 == 1:\n        return num \n    else:\n        num = (num // 2) + ((num % 2) * 2)\n        if num > n:\n            return num\n        elif num < n:\n            return odd_Equivalent(s,n)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd=0\n    for i in range(len(s)):\n        if int(s[i])%2!=0:\n            odd+=1\n    return odd\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def binary(s,n): \n        count = 0\n        for i in range(0,n+1): \n            if i % 2 == 0: \n                count = count + 1\n        return count\n    def odd_equivalent(s,n): \n        count = 0\n        if n == 1: \n            print('No odd equivalent')\n        else: \n            for i in range(1, n//2 + 1): \n                if (i * 2) % n == 0: \n                    count = count + 1\n                else: \n                    count = count - 1\n            print('Odd equivalent of length', n, ': ', count)\n    return binary(s,n)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==1: \n        return 1\n    elif n==2: \n        return 2\n    else: \n        return odd_Equivalent(s,n-1) + odd_Equivalent(s,n-2) \n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # base case: if all sublists are empty, return empty list\n    if len(nestedlist) == 0:\n        return []\n    # initialize set and array to keep track of common elements\n    common = set()\n    array = []\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set(list(set(nestedlist))))\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def nested_list_common_elements(list_of_nested_lists):\n        common_elements = []\n        for list_item in list_of_nested_lists:\n            if len(list_item) == 0:\n                continue\n            for item in list_item:\n                if len(item) > 0:\n                    if item not in common_elements:\n                        common_elements.append(item)\n        return common_elements\n    # TEST CODE\n    assert(nested_list_common_elements([[1, 2], [3, 4]]) == [3, 4])\n    assert(nested_list_common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 3, 7])\n    assert(nested_list_common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3])\n    assert(nested_list_common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [])\n    assert(nested_list_common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [])\n    assert(nested_list_common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [])\n    assert(nested_list_common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [])\n    assert(nested_list_common_elements([]) == [])\n    assert(nested_list_common_elements([[]]) == [])\n    print(\"Success!\")\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return None\n    elif len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        return common_in_nested_lists(nestedlist[1:]"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nested_list_list = []\n    for i in nestedlist:\n        nested_list_list.append(i)\n    list_length = len(nested_list_list)\n    common_list = []\n    for i in range(0,list_length):\n        if (nested_list_list[i] not in common_list):\n            common_list.append(nested_list_list[i])\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for innerlist in nestedlist:\n        for element in innerlist:\n            if element in common_elements:\n                continue\n            else:\n                common_elements.append(element)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_items = set()\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # TO DO: Replace this with something better\n    # time complexity: O(N*N)\n    # space complexity: O(1)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in nestedlist:\n        for j in i:\n            result.append(j)\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return type(text) in (int, float)\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            if j is not None:\n                pass\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for lst in list1:\n        if lst == {}:\n            return True\n        return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)>0:\n        for key in list1[0]:\n            if key in list1:\n                if list1[0][key] == None:\n                    return False\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for i in list1:\n        if i == {}:\n            return True\n    return False\n    \n    \ndef test_empty_dit():\n    '''\n    Write a function to test your empty_dit() function. \n    '''\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(type(i) == dict for i in list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if type(i)!= dict:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            for k in j:\n                if k!= None:\n                    pass\n                else:\n                    return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for x in nums:\n        result += x * len(nums)\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums)==0:\n        return 0\n    elif len(nums)==1:\n        return nums[0]\n    else:\n        return tuple_to_int(nums[1:]) + tuple_to_int(nums[:1])\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_string = ''\n    for i in range(len(nums)):\n        num_string += str(nums[i]) + ','\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums_int = 0\n    for num in nums:\n        nums_int += num\n    return nums_int\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for item in nums:\n        result += item\n    return result\n    \ndef list_to_int(nums):\n    '''\n    Write a function that converts a given list of positive integers into a single integer.\n    '''\n    result = 0\n    for item in nums:\n        result += item\n    return result\n        \ndef sum_of_numbers(nums):\n    '''\n    Given a list of positive integers, return their sum.\n    '''\n    total = 0\n    for item in nums:\n        total += item\n    return total\n    \ndef sum_of_numbers_2(nums):\n    '''\n    Given a list of positive integers, return their sum.\n    '''\n    total = 0\n    for item in nums:\n        total += item\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    length = len(nums)\n    for i in range(length-1):\n        nums[i] = nums[i]*10 + nums[i+1]\n    \n    return nums[0]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    return int(''.join(map(str, nums)))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize the int variable\n    int_val = 0\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_1, num_2 = 0, 0\n    for num in nums:\n        num_1 += num\n        num_2 += num * 10 ** num\n    return num_1, num_2\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(i for i in nums if i >= 0)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_of_floats = []\n    for item in test_list:\n        test_list_of_floats.append(float(item))\n    return test_list_of_floats\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for elem in test_list:\n        if type(elem) == list:\n            for subelem in elem:\n                if type(subelem) == list:\n                    for item in subelem:\n                        if type(item) == list:\n                            for subitem in item:\n                                if type(subitem) == list:\n                                    for itemsub in subitem:\n                                        if type(itemsub) == list:\n                                            for itemsubsub in itemsub:\n                                                if type(itemsubsub) == list:\n                                                    for itemsubsubsub in itemsubsub:\n                                                        if type(itemsubsubsub) == list:\n                                                            for itemsubsubsubsub in itemsubsubsub:\n                                                                if type(itemsubsubsubsub) == list:\n                                                                        for itemsubsubsubsubsub in itemsubsubsubsub:\n                                                                                if type(itemsubsubsubsubsub) == list:\n                                                                                for itemsubsubsubsubsubsub in itemsubsubsubsubsub:\n                                                                                    if type(itemsubsubsubsubsubsub) == list:\n                                                                                        for itemsubsubsubsubsubsubsub in itemsubsubsubsubsubsubsubsub:\n                                                                                            if type(itemsubsubsubsubsubsubsub) == list:\n                                                                                            for itemsubsubsubsubsubsubsubsub in itemsubsubsubsubsubsubsubsubsubsubsubsub:\n                                                                                            if type(itemsubsubsubsubsubsubsubsubsubsubsub) == list:\n                                                                                            for itemsubsubsubsubsubsubsubsubsubsubsubsubsubsub in itemsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsu"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # clear out the list\n    test_list = []\n    # return test_list\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_of_floats = []\n    for i in test_list:\n        for j in i:\n            list_of_floats.append(float(j))\n    return list_of_floats\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(test_list[i].split(',')[0]) for i in range(len(test_list))]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [i.split() for i in test_list]\n    return [float(i[0]) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = list(test_list)\n    test_list = [float(i) for i in test_list]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = test_list[:6]\n    float_list = []\n    for i in range(0,len(test_list)):\n        test_list[i] = [float(x) for x in test_list[i]]\n        float_list.append(test_list[i])\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for item in test_list:\n        for item2 in item:\n            float_list.append(item2)\n    return float_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    \n    string_list = string.split()\n    return string_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split())\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.strip().split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = list(string.split())\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \ndef words_to_list(words): \n    '''\n    Write a function to convert a list of words to a string that looks like a word.\n    '''\n    return \" \".join(words)\n    \ndef show_boggle(words): \n    '''\n    Write a function to display the boggle game grid, showing the words in words, \n    the boggle game grid, the correct words, and finally the words in the list.\n    '''\n    print(BUG, file = file)\n    print(WORDS, file = file)\n    print(string_to_list(words), file = file)\n    print(words_to_list(words), file = file)\n    print(\"\\n\", file = file)\n    \ndef find_all_words(words, word_list):\n    '''\n    Write a function to find all the words in the boggle game grid.\n    '''\n    for word in word_list:\n        if word in words:\n            if word in words_to_list(words):\n                print(word, end = \" \")\n            else:\n                print(word + \" \" + word_to_string(word))\n    print(\"\\n\")\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split()\n    return list_of_strings\n    \ndef merge_the_tools(string, k):\n    '''\n    Given a string that contains a set of words that are all of the same length, \n    determine if any two strings can be written with the same rearrangement of letters.\n    '''\n    for i in range(len(string)):\n        word = string[i:i+k]\n        if len(word)==k:\n            for j in range(len(word)):\n                print(word[j], end=\" \")\n            print()\n    return True\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.lower()\n    numbers = ''\n    letters = ''\n    symbols = ''\n    for char in string:\n        if char.isdigit():\n            numbers += char\n        elif char.isalpha():\n            letters += char\n        elif char =='':\n            symbols += char\n    return [numbers, letters, symbols]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [w.strip() for w in string.split(' ')] \n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    occurence = {}\n    for item in arr:\n        if item in occurence:\n            occurence[item] = occurence[item] + 1\n        else:\n            occurence[item] = 1\n    for item in sorted(occurence):\n        if occurence[item] == 1:\n            return item\n    return 'Not found'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Declare a set to store values in the array\n    set_values = set()\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # For loop for finding unique elements in array\n    for i in range(0, len(arr)):\n        j = 0\n        k = 0\n        while j < len(arr) - 1:\n            if arr[j] == arr[j + 1]:\n                j += 1\n            else:\n                k = 1\n                j = 0\n        # If element appears only once in array, return it\n        if k == 1:\n            return arr[j]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    assert all([isinstance(x, int) for x in arr])\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr = sorted(arr)\n    i = 0\n    j = len(arr) - 1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == None or len(arr) < 1:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # The first line is the list\n    for i in range(len(arr)-1):\n        # The second line is the reference\n        for j in range(i+1, len(arr)):\n            # If the current element is equal, we have found it\n            if arr[i] == arr[j]:\n                return arr[j]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    for i in arr:\n        count = 0\n        for j in arr:\n            if arr.count(j) == 1:\n                count += 1\n        if count == 1:\n            return i\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    mid = (left + right) // 2\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr = sorted(arr)\n    i,j = 0, len(arr)-1\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Add your code here\n    return (list1[0] * list1[1])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1)):\n            if i == j:\n                continue\n            if (list1[i][1] > list1[j][1]) and (list1[i][0] < list1[j][0]) and (list1[i][1] > max):\n                max = list1[i][1]\n                \n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    l1 = list1[:]\n    l2 = list1[:]\n    l1.sort()\n    l2.sort()\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] > l2[j]:\n                l2[j] = l1[i]\n    max_product = l1[0] * l2[0]\n    for i in range(1, len(l1)):\n        for j in range(1, len(l2)):\n            if l1[i] > l2[j]:\n                max_product = max(max_product, l1[i] * l2[j])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    l1 = []\n    for elem in list1:\n        l1.append(elem[0])\n        l1.append(elem[1])\n    l2 = []\n    for elem in l1:\n        l2.append((elem, (max(l1[0], elem), min(l1[1], elem))))\n    return max(l2, key = lambda x: x[1][1])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            # print(i, j)\n            if list1[i][0] < list1[j][0]:\n                temp = list1[i]\n                list1[i] = list1[j]\n                list1[j] = temp\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = 1\n    for i in range(0,len(list1)):\n        for j in range(0,i):\n            product = product*(list1[i][1]-list1[j][1])\n    return product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def helper(a, b, d):\n        if (a, b) in d:\n            return (d[a,b])\n        else:\n            return (d[a,b])\n    result = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result = max(result, max(max_product_tuple(list1[i:j]), helper(list1[i], list1[j], d)))\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # the maximum absolute product is defined as the product of all numbers in the given list\n    # returned value is the product of all numbers in the given list\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a = []\n    b = []\n    max = 0\n    for i in list1:\n        if i[0] > i[1]:\n            a.append(i[0])\n            a.append(i[1])\n            b.append(i[0])\n            b.append(i[1])\n        elif i[1] > i[0]:\n            a.append(i[1])\n            a.append(i[0])\n            b.append(i[1])\n            b.append(i[0])\n        else:\n            a.append(i[0])\n            a.append(i[1])\n            b.append(i[0])\n            b.append(i[1])\n    for i in range(2, len(a)):\n        if a[i]!= a[i-1]:\n            a[i-1] *= -1\n            a[i] *= -1\n        else:\n            a[i-1] *= -1\n            a[i] *= -1\n    for i in range(2, len(b)):\n        if b[i]!= b[i-1]:\n            b[i-1] *= -1\n            b[i] *= -1\n        else:\n            b[i-1] *= -1\n            b[i] *= -1\n    for i in a:\n        if i > max:\n            max = i\n    for i in b:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = -1\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            max = max(list1[i], list1[j], max)\n    return max\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = set()\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    # create a list of all amicable numbers\n    amicable_numbers = [i for i in range(1, limit) if i % 2 == 0 and i % 3 == 0 and i % 5 == 0 and i % 7 == 0 and i % 11 == 0]\n    \n    # add the sum of each number to a list\n    sum = []\n    \n    # iterate over the list of numbers\n    for n in amicable_numbers:\n        \n        # if a number is divisible by both 2 and 3, it is divisible by 2 and 3\n        # so add the number to the sum\n        if n % 2 == 0:\n            sum.append(n)\n        if n % 3 == 0:\n            sum.append(n)\n        if n % 5 == 0:\n            sum.append(n)\n        if n % 7 == 0:\n            sum.append(n)\n        if n % 11 == 0:\n            sum.append(n)\n    \n    # return the sum\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = amicable_numbers_sum(limit)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    amicable_numbers = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Calculate sum of all numbers from 1 to a specified number\n    sum = 0\n    for i in range(1,limit):\n        if is_prime(i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    i = 1\n    sum = 0\n    while i <= limit:\n        j = 0\n        while i*j <= limit:\n            if i*j == limit:\n                sum += i\n                print(sum)\n            j += 1\n        i += 1\n    print(sum)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i not in amicable:\n            sum = i * i\n            if sum > limit or sum % 2 == 0:\n                amicable.append(sum)\n                amicable_sum += sum\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    \n    for num in range(1,limit):\n        if is_amicable(num) and is_divisible(num) and is_divisible(num+1):\n            sum += num\n            \n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_list = []\n    summ = 0\n    for i in range(1, limit):\n        if i % 2 == 0:\n            amicable_list.append(i)\n            if i not in amicable_list:\n                summ += i\n    return summ\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    sum = 0\n    for i in range(1,limit+1):\n        if i not in amicable_numbers:\n            sum += i\n            amicable_numbers.append(i)\n    return sum\n    \n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if (a==0):\n        print(\"Zero Complex\")\n        return 0\n    if (b==0):\n        print(\"Zero Complex\")\n        return 0\n    try:\n        ang=complex(0,0)\n        ang=a/b\n        ang=cmath.exp(ang)\n        print(ang)\n    except ZeroDivisionError:\n        print(\"Division by zero\")\n    except ValueError:\n        print(\"Invalid number\")\n    return ang\ndef angle(a,b,c):\n    '''\n    Write a function to get the angle between a complex number and a complex number.\n    '''\n    if (a==0):\n        print(\"Zero Complex\")\n        return 0\n    if (b==0):\n        print(\"Zero Complex\")\n        return 0\n    try:\n        ang=complex(0,0)\n        ang=a/b\n        ang=cmath.exp(ang)\n        print(ang)\n    except ZeroDivisionError:\n        print(\"Division by zero\")\n    except ValueError:\n        print(\"Invalid number\")\n    return ang\ndef dangle(a,b,c):\n    '''\n    Write a function to get the difference between a complex number and a complex number.\n    '''\n    if (a==0):\n        print(\"Zero Complex\")\n        return 0\n    if (b==0):\n        print(\"Zero Complex\")\n        return 0\n    try:\n        ang=complex(0,0)\n        ang=a/b\n        ang=cmath.exp(ang)\n        print(ang)\n    except ZeroDivisionError:\n        print(\"Division by zero\")\n    except ValueError:\n        print(\"Invalid number\")\n    return ang\ndef show_angle(a,b):\n    '''\n    Write a function that returns the angle between a complex number and a complex number.\n    '''\n    if (a==0):\n        print(\"Zero Complex\")\n        return 0\n    if (b==0):\n        print(\"Zero Complex\")\n        return 0\n    try:\n        ang=complex(0,0)\n        ang=a/b\n        ang=cmath.exp(ang)\n        print(ang)\n    except ZeroDivisionError:\n        print(\"Division by zero\")\n    except ValueError:\n        print(\"Invalid number\")\n    return ang\ndef div_angle(a,b):\n    '''\n    Write a function to calculate the complex number division.\n    '''\n    if (a==0):\n        print(\"Zero Complex\")\n        return 0\n    if (b==0):\n        print(\"Zero Complex\")\n        return 0\n    try:\n        ang=complex(0,0)\n        ang=a/b\n        ang=cmath.exp(ang)\n        print(ang)\n    except ZeroDivisionError:\n        print(\"Division by zero\")\n    except ValueError:\n        print(\"Invalid number\")\n    return ang\ndef show_dangle(a,b):\n    '''\n    Write a function that returns the difference between a complex number and a complex number.\n    '''\n    if (a==0):\n        print(\"Zero Complex\")\n        return 0\n    if (b==0):\n        print(\"Zero Complex\")\n        return 0\n    try:\n        ang=complex(0,0)\n        ang=a/b\n        ang=cmath.exp(ang)\n        print(ang)\n    except ZeroDivisionError:\n        print(\"Division by zero\")\n    except ValueError:\n        print(\"Invalid number\")\n    return ang\ndef show_angle_dangle(a,b):\n    '''\n    Write a function that returns the angle between a complex number and a complex number and the difference between a complex number and a complex number.\n    '''\n    if (a==0):\n        print(\"Zero Complex\")\n        return 0\n    if (b==0):\n        print(\"Zero Complex\")\n        return 0\n    try:\n        ang=complex(0,0)\n        ang=a/b\n        ang=cmath.exp(ang)\n        print(ang)\n    except ZeroDivisionError:\n        print(\"Division by zero\")\n    except ValueError:\n        print(\"Invalid number\")\n    return ang\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    angle = cmath.phase(c)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    real_part = cmath.complex(a[0],b[0])\n    imag_part = cmath.complex(a[1],b[1])\n    angle = complex(abs(cmath.acos(cmath.exp(-1j*imag_part)*real_part)),\n                    abs(cmath.acos(cmath.exp(1j*imag_part)*real_part)))\n    return angle.real\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    return (cmath.acos(c))\ndef d(a,b):\n    '''\n    Write a function to get the difference of two complex numbers.\n    '''\n    c = complex(a,b)\n    return c - cmath.conj(c)\ndef phi(a,b):\n    '''\n    Write a function to get the phase of a complex number.\n    '''\n    c = complex(a,b)\n    return c.imag\ndef jacobi(a,b):\n    '''\n    Write a function to get the Jacobian matrix of a complex number.\n    '''\n    c = complex(a,b)\n    return (1/5) * (c**4 + c**2 - 1) * (1/3)\ndef power_spectral_density(a,b):\n    '''\n    Write a function to get the power spectral density of a complex number.\n    '''\n    c = complex(a,b)\n    return (1/c) * (1 - (4/c**2))\ndef error(x,y):\n    '''\n    Write a function to get the error of a complex number.\n    '''\n    c = complex(x,y)\n    return cmath.sqrt(c)\ndef integral(x,a,b):\n    '''\n    Write a function to get the integral of a complex number.\n    '''\n    c = complex(a,b)\n    return (1/c) * (1 - (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_approx(x,y):\n    '''\n    Write a function to get the Jacobian matrix approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 - (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef quadrature(x,a,b):\n    '''\n    Write a function to get the quadrature approximation of a complex number.\n    '''\n    c = complex(x,a)\n    return cmath.sqrt(c)\ndef quadrature_approx(x,a,b):\n    '''\n    Write a function to get the quadrature approximation of a complex number.\n    '''\n    c = complex(x,a)\n    return (1/c) * (1 - (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_plus_plus(x,y):\n    '''\n    Write a function to get the Jacobian matrix plus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 - (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_minus_minus(x,y):\n    '''\n    Write a function to get the Jacobian matrix minus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 - (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_plus_plus_minus(x,y):\n    '''\n    Write a function to get the Jacobian matrix plus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 + (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_minus_minus(x,y):\n    '''\n    Write a function to get the Jacobian matrix minus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 - (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_plus_minus_plus(x,y):\n    '''\n    Write a function to get the Jacobian matrix plus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 + (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_minus_minus_minus(x,y):\n    '''\n    Write a function to get the Jacobian matrix minus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 - (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_plus_minus_plus_minus(x,y):\n    '''\n    Write a function to get the Jacobian matrix plus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 + (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_plus_minus_plus_minus_plus(x,y):\n    '''\n    Write a function to get the Jacobian matrix plus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 + (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_minus_minus_minus(x,y):\n    '''\n    Write a function to get the Jacobian matrix minus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 - (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_plus_minus_minus(x,y):\n    '''\n    Write a function to get the Jacobian matrix plus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 + (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_minus_minus_minus(x,y):\n    '''\n    Write a function to get the Jacobian matrix minus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 - (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_plus_minus_minus_minus(x,y):\n    '''\n    Write a function to get the Jacobian matrix plus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 + (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_minus_minus_minus(x,y):\n    '''\n    Write a function to get the Jacobian matrix minus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 - (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_plus_minus_minus_minus(x,y):\n    '''\n    Write a function to get the Jacobian matrix plus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 + (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_minus_minus_minus(x,y):\n    '''\n    Write a function to get the Jacobian matrix minus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c) * (1 - (c**2)) * (1/c) * (2 * (c**2 - 1))\ndef jacobi_plus_minus_minus_minus(x,y):\n    '''\n    Write a function to get the Jacobian matrix plus-approximation of a complex number.\n    '''\n    c = complex(x,y)\n    return (1/c"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + b\n    return cmath.phase(c)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    import numpy as np\n    angle = np.angle(complex(a), deg=True)\n    print(angle)\n    return angle\n    \n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = abs(a)\n    b = abs(b)\n    return acos(a/b)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0:\n        print('Angle of complex number = ',b)\n        return b\n    if b == 0:\n        print('Angle of complex number = ',a)\n        return a\n    if b > a:\n        print('Angle of complex number = ',(-b-b**0.5)/a)\n        return (-b-b**0.5)/a\n    else:\n        print('Angle of complex number = ',(-a-a**0.5)/b)\n        return (-a-a**0.5)/b\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos((b.real**2+b.imag**2+a.real**2+a.imag**2)**0.5)\ndef angle_complex_of_vector(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos((b.real**2+b.imag**2+a.real**2+a.imag**2)**0.5)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #This is the real part of the angle\n    real = cmath.sqrt(a.real**2+b.real**2)\n    #This is the imaginary part of the angle\n    imag = cmath.sqrt(a.imag**2+b.imag**2)\n    return math.acos((real**2+imag**2)/(2*b.real*a.imag))\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == '':\n        return 0\n    l = len(string)\n    for i in range(l-1):\n        if string[i] == '0' and string[i+1] == '1':\n            return l - i - 2\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    start_point = 0\n    end_point = 0\n    # convert string to binary\n    bin_str = ''.join([format(ord(x), 'b') for x in string])\n    # iterate through the string\n    for i in range(len(bin_str)):\n        # if ith element is 1\n        if bin_str[i] == '1':\n            # if the start point is less than the end point\n            if start_point == 0:\n                # append the start point to the list\n                start_point = i\n            # if the end point is less than the start point\n            if end_point == 0:\n                # append the end point to the list\n                end_point = i\n    return end_point - start_point\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize the variable as 0,1,2,3,4,5,6,7\n    # 1 if the next char is 1\n    # 0 if the next char is 0\n    # 2 if the next char is 0\n    # 3 if the next char is 0\n    # 4 if the next char is 0\n    # 5 if the next char is 0\n    # 6 if the next char is 0\n    # 7 if the next char is 0\n    \n    number_of_zeroes = 0\n    number_of_ones = 0\n    \n    # Fill in the variables for the next array\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            number_of_zeroes += 1\n        elif string[i] == \"1\":\n            number_of_ones += 1\n    \n    # Create a variable to track the difference\n    length_difference = 0\n    \n    # Fill in the for loop for the next array\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            if string[i+1] == \"0\":\n                length_difference += 3\n            elif string[i+1] == \"1\":\n                length_difference += 2\n            else:\n                length_difference += 1\n    \n    return abs(number_of_zeroes - number_of_ones) + length_difference\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    result = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            result += 1\n        else:\n            result -= 1\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string)<=1:\n        return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    start, end = 0, 0\n    for i in string:\n        if i == \"0\":\n            end += 1\n        else:\n            start += 1\n    return end - start\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #counts 0s\n    count0 = 0\n    count1 = 0\n    for i in range(0,len(string)):\n        if string[i] == 0:\n            count0 += 1\n        else:\n            count1 += 1\n    #length of 0s\n    #finds length of 0s\n    return count0-count1\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    res = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            res = res + 1\n        elif string[i] == '1':\n            res = res - 1\n    return res\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Time: O(n)\n    # Space: O(n)\n    if string == \"\":\n        return 0\n    \n    # Returns the length of the longest substring of binary string\n    def find_length_of_longest_substring(string):\n        if string == \"\":\n            return 0\n        \n        # Time: O(n)\n        # Space: O(1)\n        \n        # Empty string is 0\n        if string[0] == \"0\":\n            return 0\n        \n        # First character is 1\n        elif string[0] == \"1\":\n            # DFS\n            dp = [0] * (len(string) + 1)\n            for i in range(1, len(string) + 1):\n                if string[i - 1] == \"0\":\n                    dp[i] = dp[i - 1]\n                else:\n                    dp[i] = 1\n            \n            return sum(dp)\n        \n        # Second character is 1\n        elif string[0] == \"1\":\n            # DFS\n            dp = [0] * (len(string) + 1)\n            for i in range(1, len(string) + 1):\n                if string[i - 1] == \"1\":\n                    dp[i] = dp[i - 1]\n                else:\n                    dp[i] = 1\n            \n            return sum(dp)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    num_ones = 0\n    num_zeros = 0\n    for char in string:\n        if char == \"1\":\n            num_ones += 1\n        else:\n            num_zeros += 1\n        if num_ones > max_count:\n            max_count = num_ones\n        elif num_zeros > max_count:\n            max_count = num_zeros\n        count += 1\n    return count\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    s = 0\n    if (a%b == 0):\n        for i in range(1,b+1):\n            if (a%i == 0):\n                s += i\n    else:\n        s = -1\n        return -1\n    return s\n    \ndef getFactors(n):\n    \"\"\"\n    Returns a list of all factors of a given integer.\n    \"\"\"\n    factors = []\n    for i in range(1,n+1):\n        if (n%i == 0):\n            factors.append(i)\n    return factors\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def div(a,b):\n        # return divisors of a and b\n        if (a>b):\n            return div(b,a)\n        if (a==b):\n            return a\n        else:\n            return a + b\n    return div(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find common divisors\n    l = []\n    for i in range(1,b+1):\n        if b%i == 0:\n            l.append(i)\n            if len(l)==2:\n                return l[0]+l[1]\n        \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 0:\n        return b\n    return sum(a % b, b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=a\n    d=b\n    while c % d!= 0:\n        c=c//d\n        d=d*d\n    return c"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = 0\n    for i in range(1,b+1):\n        if (a % i == 0) and (b % i == 0):\n            s += i\n    return s\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(b==0): \n        return a\n    return a//b \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b == 0:\n        return a\n    return (a//b)+sum(a%b,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a > b:\n        a,b = b,a\n    # checking for this \n    if a % b == 0:\n        return a//b\n    else:\n        return a+b\n    \n    "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 0:\n        print (0)\n    elif b == 0:\n        print (0)\n    elif a!= b:\n        print (a//b)\n        print (a%b)\n        sum(a,b)\n    else:\n        print (a,b,a//b,a%b,a//b)\n        print (a%b)\n        print (a//b)\n        print (a%b)\n        print (a//b)\n        print (a//b)\n    return \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    res = x * y\n    return res\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # TODO: Multiply the two given integers and return the result\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError('x and y must be integers')\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print('Multiplication:', end='')\n    print(x*y)\n    \n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longest_word = 0\n    for word in str.split():\n        if len(word) > longest_word:\n            longest_word = len(word)\n    return longest_word\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for word in str:\n        if len(word) > n:\n            return word\n    return \"TOO_LONG\"\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import string\n    from operator import itemgetter\n    word_list = string.ascii_lowercase\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    s = \"\"\n    for word in str:\n        s += word\n    if len(s) >= n:\n        return True\n    return False\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    lst = []\n    for word in str.split():\n        lst.append(word)\n    lst = sorted(lst, reverse=True, key=len)\n    lst = [word for word in lst if len(word) == n]\n    lst = [word.capitalize() for word in lst]\n    return(lst)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    counts = {}\n    for word in str.split():\n        counts[word] = counts.get(word, 0) + 1\n    return [word for word, count in counts.items() if count > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    # Your code here\n    \n    longest = 0\n    result = []\n    \n    for i in range(len(str)):\n        current = str[i]\n        if(len(current) > longest):\n            longest = len(current)\n            result = [current]\n        elif(len(current) == longest):\n            result.append(current)\n        \n    return result\n    \n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    max_word = 0\n    for word in str.split():\n        if len(word) > max_word:\n            max_word = len(word)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str.split():\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    squares_positions = set()\n    for row in my_matrix:\n        for col in row:\n            squares_positions.add((col, row))\n    for square in squares_positions:\n        row_sum = 0\n        for i in range(square[0]):\n            row_sum += square[1][i]\n        column_sum = 0\n        for i in range(square[1]):\n            column_sum += square[0][i]\n        if row_sum == column_sum:\n            return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_count = len(my_matrix)\n    column_count = len(my_matrix[0])\n    for r in range(row_count):\n        for c in range(column_count):\n            if(r == c):\n                continue\n            if(my_matrix[r][c]!= my_matrix[c][r]):\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if my_matrix[0][0] == my_matrix[1][1] == my_matrix[2][2]:\n        return True\n    elif my_matrix[0][0] == my_matrix[1][1]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0] == my_matrix[2][1] and my_matrix[1][1] == my_matrix[2][2]:\n        return True\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[2][1] == my_matrix[2][2]:\n        return True\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0] == my_matrix[2][1] and my_matrix[0][0] == my_matrix[1][1]:\n        return True\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[2][0] == my_matrix[2][1]:\n        return True\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[2][0]!= my_matrix[1][1]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[2][0] == my_matrix[1][1]:\n        return True\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[2][0]!= my_matrix[1][1]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[2][0] == my_matrix[1][1]:\n        return True\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[2][0]!= my_matrix[1][1]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[2][0]!= my_matrix[1][1]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[0][0] == my_matrix[1][1]:\n        return True\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[2][0]!= my_matrix[1][1]:\n        return False\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][0] == my_matrix[1][1]:\n        return True\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[1][1] == my_matrix[2][2]:\n        return True\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[2][0] == my_matrix[1][1]:\n        return True\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0]!= my_matrix[1][1] and my_matrix[2][0] == my_matrix[1][1]:\n        return True\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[2][0]!= my_matrix[1][1]:\n        return False\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[2][0] == my_matrix[1][1]:\n        return True\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][0]!= my_matrix[2][2]:\n        return False\n    elif my_matrix[0][0] == my_matrix[1][1] and my_matrix[2][0]!= my_matrix[1][1]:\n        return False\n    elif my_matrix[0][0"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= 0:\n                return False\n    return True\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= 0:\n                if i!= 0 and j!= 0:\n                    return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if matrix is a magic square\n    if len(my_matrix) == len(my_matrix[0]):\n        for row in range(len(my_matrix)):\n            for col in range(len(my_matrix[0])):\n                if (my_matrix[row][col] == 0):\n                    continue\n                row_sum = 0\n                for i in range(row, len(my_matrix) - row):\n                    row_sum += my_matrix[i][col]\n                col_sum = 0\n                for i in range(col, len(my_matrix[0])):\n                    col_sum += my_matrix[row][i]\n                if row_sum == col_sum:\n                    return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Write your code here\n    # write your code here\n    # no need to write code\n    \n    # your code here\n    # write your code here\n    # no need to write code\n    \n    n = len(my_matrix)\n    if n % 2!= 0:\n        return False\n    \n    for i in range(0, n):\n        for j in range(0, n):\n            if my_matrix[i][j] == 0:\n                continue\n            \n            if i+j == n//2:\n                if my_matrix[i][j] == my_matrix[i+1][j] and my_matrix[i][j] == my_matrix[i][j+1] and my_matrix[i][j] == my_matrix[i+1][j+1]:\n                    return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not is_square(my_matrix):\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if(my_matrix[0][0] == my_matrix[1][1] == my_matrix[2][2]):\n        print(\"This matrix is a magic square\")\n    else:\n        print(\"This matrix is not a magic square\")\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    row = 0\n    col = 0\n    for row in my_matrix:\n        for col in row:\n            if col == 0:\n                return False\n            if col == 1:\n                return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    print(my_matrix)\n    print('Check if matrix is a magic square.')\n    print('Check if the matrix is a square.')\n    print('Check if the matrix is a perfect square.')\n    print('Check if the matrix is a deficient square.')\n    print('Check if the matrix is a perfect perfect square.')\n    print('Check if the matrix is a perfect perfect perfect square.')\n    print('Check if the matrix is a perfect perfect perfect square.')\n    print('Check if the matrix is a square matrix.')\n    print('Check if the matrix is a perfect square matrix.')\n    print('Check if the matrix is a perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check if the matrix is a perfect perfect perfect perfect square matrix.')\n    print('Check i"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency\n    frequency = {}\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = {}\n    max_occurrences = -1\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_count = 0\n    for num in frequency:\n        if frequency[num] > max_count:\n            max_count = frequency[num]\n    return max_count\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    \n    max_freq = max(counts.values())\n    max_index = -1\n    for i in counts.keys():\n        if counts[i] == max_freq:\n            max_index = i\n            break\n    return max_index\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    maxfreq = 0\n    for num in d.values():\n        if num >= maxfreq:\n            maxfreq = num\n    return maxfreq\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d.items(), key=lambda x:x[1])\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    n = len(nums)\n    freqs = [0] * n\n    \n    for num in nums:\n        freqs[num] += 1\n        \n    max_freq = 0\n    max_num = -1\n    \n    for i in range(n):\n        if freqs[i] > max_freq:\n            max_freq = freqs[i]\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrences = {}\n    for num in nums:\n        if num in max_occurrences:\n            max_occurrences[num] += 1\n        else:\n            max_occurrences[num] = 1\n    return max(max_occurrences, key = max_occurrences.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = {}\n    for n in nums:\n        if n in max_freq:\n            max_freq[n] += 1\n        else:\n            max_freq[n] = 1\n    return max(max_freq.values())\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for i in nums:\n        freq[i] += 1\n    return freq.items()\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel = vowels[0]\n    vowel_list = []\n    for i in str1:\n        if i in vowels:\n            vowel_list.append(vowels[0])\n        else:\n            vowel_list.append(i)\n    vowel_list.reverse()\n    print(vowel_list)\n    return ''.join(vowel_list)\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    string = ''\n    for i in range(len(str1)):\n        if str1[i] in ['a','e','i','o','u','A','E','I','O','U']:\n            string += str1[i]\n    return string\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # pass # test\n    str1 = str1.lower()\n    vowels = 'aeiouy'\n    final_str = \"\"\n    for index in str1:\n        if index in vowels:\n            if index not in 'aeiou':\n                index = index + vowels[0]\n            final_str += index\n        elif index not in 'aeiou':\n            final_str += index\n    return final_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    ans = \"\"\n    for i in str1:\n        if i not in \"aeiouAEIOU\":\n            ans = ans + i\n    return ans\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            result = result + str1[i]\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return ''.join([i[::-1] for i in str1])\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    l = []\n    for i in range(len(str1)):\n        if str1[i] in ['a', 'e', 'i', 'o', 'u', 'y']:\n            l.append(str1[i])\n        else:\n            l.append(str1[i])\n    l.reverse()\n    return ''.join(l)\nprint(reverse_vowels(\"Hello world!\"))\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str += char + \" \"\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    new_str = \"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    return '(' + ','.join([str(i) for i in tup1]) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str = ''\n    for tup in tup1:\n        str = str + str(tup) +''\n    return str\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = '('\n    for i in tup1:\n        tup_str += str(i)\n        if i!= tup1[i]:\n            tup_str += ','\n    tup_str += ')'\n    return tup_str\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for item in tup1:\n        s += str(item)\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if len(tup1) == 0:\n        return \"\"\n    else:\n        return (str(tup1[0]) + \"(\" + str(tup1[1]) + \")\")\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ', '.join(str(x) for x in tup1) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # YOUR CODE HERE\n    str1 = \"\"\n    for i in tup1:\n        str1+=str(i)\n    return str1\n    \n    \n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for tup in tup1:\n        string += str(tup)\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 = str1 + str(i) +''\n    return str1\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    \n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) <= 1:\n        return nums[0]\n    else:\n        negativenum = nums.count(-1)\n        return sum_negativenum(nums[0:negativenum]) + sum_negativenum(nums[negativenum:])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for num in nums:\n        if num < 0:\n            s+= num\n    return s\n    \ndef find_max(nums):\n    max = 0\n    for num in nums:\n        if num > max:\n            max = num\n    return max\n    \ndef find_min(nums):\n    min = 100000\n    for num in nums:\n        if num < min:\n            min = num\n    return min\n    \ndef find_avg(nums):\n    sums = 0\n    for num in nums:\n        sums += num\n    return sums/len(nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_num = 0\n    for num in nums:\n        if num < 0:\n            neg_num = neg_num + num\n    return neg_num\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n    \n    \n    \ndef sum_all_positive(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all positive numbers.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    sum = 0\n    for num in nums:\n        if num > 0:\n            sum += num\n    return sum\n    \n    \n    \ndef sum_all_negative(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all negative numbers.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n    \n    \n    \ndef remove_negative_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and return a new list of only the positive numbers in the input list.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    new_nums = []\n    for num in nums:\n        if num > 0:\n            new_nums.append(num)\n    return new_nums\n    \n    \n    \n    \ndef sum_all_even(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all even numbers.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            sum += num\n    return sum\n    \n    \n    \n    \ndef sum_all_even_negative(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all even numbers in the input list.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            sum += num\n    return sum\n    \n    \n    \n    \ndef is_in_range(num, low, high):\n    '''\n    Write a function that takes in a number and a range of numbers and returns whether or not that number is in that range.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    if num < low or num > high:\n        return False\n    return True\n    \n    \n    \n    \ndef is_in_range_all_negatives(nums):\n    '''\n    Write a function that takes a list of numbers and returns whether or not any of the numbers in the input list are numbers in the range of negative numbers.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return any([num < 0 for num in nums])\n    \n    \n    \n    \n    \ndef filter_positives(nums):\n    '''\n    Write a function that takes a list of numbers and returns a list of only the positive numbers.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return list(filter(lambda num: num > 0, nums))\n    \n    \n    \n    \ndef filter_positives_all_negative(nums):\n    '''\n    Write a function that takes a list of numbers and returns a list of only the positive numbers.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return list(filter(lambda num: num > 0, nums))\n    \n    \n    \n    \ndef filter_negatives(nums):\n    '''\n    Write a function that takes a list of numbers and returns a list of only the negative numbers.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return list(filter(lambda num: num < 0, nums))\n    \n    \n    \n    \ndef filter_negatives_all_negative(nums):\n    '''\n    Write a function that takes a list of numbers and returns a list of only the negative numbers.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return list(filter(lambda num: num < 0, nums))\n    \n    \n    \n    \n    \ndef filter_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns a list of only the positive numbers.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return list(filter(lambda num: num > 0, nums))\n    \n    \n    \n    \ndef filter_numbers_all_negative(nums):\n    '''\n    Write a function that takes a list of numbers and returns a list of only the negative numbers.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return list(filter(lambda num: num > 0, nums))\n    \n    \n    \n    \n    \ndef find_max_in_range(low, high):\n    '''\n    Write a function that takes two ranges of numbers and returns the maximum value between them.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return low if high >= low else high\n    \n    \n    \n    \n    \ndef find_max_in_range_all_negatives(low, high):\n    '''\n    Write a function that takes two ranges of numbers and returns the maximum value between them.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return low if high >= low else high\n    \n    \n    \n    \n    \ndef find_max_in_range_all_positives(low, high):\n    '''\n    Write a function that takes two ranges of numbers and returns the maximum value between them.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return high if low >= high else low\n    \n    \n    \n    \ndef find_min_in_range(low, high):\n    '''\n    Write a function that takes two ranges of numbers and returns the minimum value between them.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return low if high >= low else high\n    \n    \n    \n    \n    \ndef find_min_in_range_all_negatives(low, high):\n    '''\n    Write a function that takes two ranges of numbers and returns the minimum value between them.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return high if low >= high else low\n    \n    \n    \n    \n    \ndef find_min_in_range_all_positives(low, high):\n    '''\n    Write a function that takes two ranges of numbers and returns the minimum value between them.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return low if high >= low else high\n    \n    \n    \n    \n    \ndef middle_elements(nums):\n    '''\n    Write a function that takes a list of numbers and returns the middle value of the list.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return nums[len(nums) // 2]\n    \n    \n    \n    \ndef middle_elements_all_negative(nums):\n    '''\n    Write a function that takes a list of numbers and returns the middle value of the list.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    return nums[len(nums) // 2]\n    \n    \n    \n    \n    \ndef replace_negatives(nums):\n    '''\n    Write "
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0]"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    if nums[0] <= 0:\n        return nums[0]\n    \n    return nums[0] - nums[0] - nums[1] + nums[1] - sum_negativenum(nums[1:])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_num = 0\n    for num in nums:\n        if num < 0:\n            neg_num += num\n    return neg_num\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum -= i\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-2) + hexagonal_num(n-3)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    if n%2==0:\n        return hexagonal_num(n-1) + hexagonal_num(n-1)\n    if n%2==1:\n        return hexagonal_num(n-1) + hexagonal_num(n-1) + hexagonal_num(n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: return 0\n    elif n == 1: return 1\n    elif n == 2: return 3\n    else:\n        if n%6 == 1:\n            return hexagonal_num(n-1) + 3\n        elif n%6 == 3:\n            return hexagonal_num(n-3) + 1\n        elif n%6 == 5:\n            return hexagonal_num(n-5) + 2\n        else:\n            return hexagonal_num(n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 3:\n        return n\n    else:\n        return (n-1) * 3 + (n-1) % 6\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = 0\n    for i in range(1, n//2):\n        result += (n - 2*i + 1)**2\n    return result\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n % 2 == 0:\n        print(n, \"is an even number.\")\n        return n\n    else:\n        print(n, \"is an odd number.\")\n        return n * hexagonal_num(n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1: \n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 8\n    else:\n        return 1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = 0\n    # Number of squares\n    for i in range(n):\n        result += int(i**2)\n    if result % 2 == 0:\n        return result // 2\n    else:\n        return result + 1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: return 0\n    \n    return int(n**0.5) + hexagonal_num(n-1)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    count = 0\n    for i in range(n):\n        if nums[i] == 0:\n            count = count + 1\n    return count / n\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            count += 1\n    return zero_count/count\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    nonzeroes = 0\n    nonzeros_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n        else:\n            nonzeroes += 1\n            nonzeros_count += 1\n    nonzeroes_ratio = nonzeroes/nonzeroes_count\n    zeroes_ratio = zeroes/zeroes_count\n    return nonzeros_ratio, zeroes_ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]==0:\n            count +=1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    assert all([type(i)==int for i in nums]), \"nums has to be an array of integers.\"\n    assert all([i>=0 for i in nums]), \"nums has to be non-negative\"\n    assert type(nums)==array, \"nums has to be an array\"\n    assert type(nums[0])==int or type(nums[0])==float, \"nums has to be an array of integers or a float\"\n    \n    zero_counts = 0\n    for i in nums:\n        if i == 0:\n            zero_counts+=1\n    return (zero_counts/len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #Your code here\n    z = 0\n    n = len(nums)\n    for i in range(0, n):\n        if nums[i] == 0:\n            z += 1\n    return z / n\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / len(nums)\n    # count = 0\n    # for i in range(len(nums)):\n    #     if nums[i] == 0:\n    #         count += 1\n    #     elif nums[i] == 1:\n    #         count += 1\n    #     elif nums[i] == -1:\n    #         count += 1\n    #     else:\n    #         continue\n    # return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n == 0):\n        return False\n    elif(n == 1):\n        return True\n    else:\n        if(n & 1):\n            return is_Sum_Of_Powers_Of_Two(n-1)\n        else:\n            return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    i = 1\n    sum_of_pow2 = 0\n    \n    while i < n:\n        if i % 2 == 0:\n            sum_of_pow2 += i**2\n            i += 1\n        else:\n            i += 1\n            \n    if sum_of_pow2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_of_pow_2 = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            sum_of_pow_2 += i\n    if sum_of_pow_2 == n:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if (i%2==0):\n            l.append(i)\n    return sum(l)==n\n    \ndef remove_duplicates(l): \n    ''' \n    Given a list of integers, return a new list of all the integers in the list that appear only once. \n    For example, given [1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 4], return [1, 2, 3, 4]. \n    '''\n    new_list=[]\n    for i in l:\n        if (i not in new_list):\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if (n % i == 0):\n            sum += i\n    if(n == sum):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0: \n        return False \n    if (n == 1): \n        return True\n    if (n == 2): \n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True \n    elif n == 1: \n        return False \n    elif n < 0: \n        return False\n    else: \n        for i in range(2, n): \n            if n % i == 0: \n                return False \n        return True \ndef main(): \n    n = int(input()) \n    print(is_Sum_Of_Powers_Of_Two(n)) \nif __name__ == \"__main__\": \n    main()"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    if n < 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3, n+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n%2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n/2)\n    else:\n        return is_Sum_Of_Powers_Of_Two(3*n+1)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # The number is greater than 0\n    if n >= 0:\n        # It is even\n        if n%2 == 0:\n            return True\n        # It is odd\n        else:\n            return False\n    # The number is less than 0\n    else:\n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    c = 2 * math.pi * r\n    print(f\"Circumference of a circle with radius {r} is {c}\")\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*(r**2)\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #return (2 * pi) * r\n    print(2 * math.pi * r)\n    \ndef triangle(a, b, c):\n    '''\n    Write a function that takes three inputs a,b,c and returns their addition.\n    '''\n    #return a + b + c\n    print(a + b + c)\n    \ndef square(a):\n    '''\n    Write a function that takes a number as an input and returns a new number.\n    '''\n    #return a * a\n    return a + a + a\n    \ndef rectangle(a, b):\n    '''\n    Write a function that takes two integers a and b and returns a rectangle with area a*b.\n    '''\n    #return a * b\n    return a * b\n    \ndef rectangle_over_line(a, b, h):\n    '''\n    Write a function that takes two integers a and b and returns the rectangle of a\n    (with the rectangle being the square of a)\n    '''\n    #return a * b\n    return a * b\n    \ndef triangle_over_line(a, b, h):\n    '''\n    Write a function that takes two integers a and b and returns a triangle (a + b + c)\n    '''\n    #return a + b + c\n    return (a + b + c) * h\n    \ndef circle_perimeter(r):\n    '''\n    Write a function that returns the circumference of a circle.\n    '''\n    #return 2 * math.pi * r\n    return (2 * math.pi * r)\n    \ndef rectangle_perimeter(a, b):\n    '''\n    Write a function that takes two integers a and b and returns the perimeter of a rectangle\n    (a*2 + b*2)\n    '''\n    #return a * b\n    return a * b\n    \ndef triangle_perimeter(a, b, c):\n    '''\n    Write a function that takes three integers a,b,c and returns the perimeter of a triangle\n    (a + b + c)\n    '''\n    #return a + b + c\n    return (a + b + c) * 3\n    \ndef circle_perimeter_of_circle(r):\n    '''\n    Write a function that returns the circumference of a circle.\n    '''\n    #return 2 * math.pi * r\n    return 2 * math.pi * r\n    \ndef circle_circumference_of_circle(r):\n    '''\n    Write a function that returns the circumference of a circle.\n    '''\n    #return 2 * 3.14 * r\n    return 2 * 3.14 * r\n    \ndef triangle_circumference_of_circle(a, b, c):\n    '''\n    Write a function that takes three integers a,b,c and returns the circumference of a triangle\n    (a + b + c)\n    '''\n    #return a + b + c\n    return a + b + c * 3.14\n    \ndef triangle_circumference_of_rectangle(a, b, c):\n    '''\n    Write a function that takes three integers a,b,c and returns the circumference of a triangle\n    (a + b + c)\n    '''\n    #return a + b + c\n    return (a + b + c) * 3.14\n    \ndef triangle_circumference_of_triangle(a, b, c):\n    '''\n    Write a function that takes three integers a,b,c and returns the circumference of a triangle\n    (a + b + c)\n    '''\n    #return a + b + c\n    return (a + b + c) * 3.14\n    \ndef triangle_circumference_of_rectangle_and_square(a, b, c):\n    '''\n    Write a function that takes three integers a,b,c and returns the circumference of a triangle\n    (a + b + c)\n    '''\n    #return a + b + c\n    return (a + b + c) * 3.14\n    \ndef triangle_circumference_of_triangle_and_rectangle(a, b, c):\n    '''\n    Write a function that takes three integers a,b,c and returns the circumference of a triangle\n    (a + b + c)\n    '''\n    #return a + b + c\n    return (a + b + c) * 3.14\n    \ndef rectangle_circumference_of_rectangle(a, b):\n    '''\n    Write a function that takes two integers a and b and returns the circumference of a rectangle\n    (a * 2 + b * 2)\n    '''\n    #return a * b\n    return a * b\n    \ndef rectangle_circumference_of_rectangle_and_square(a, b):\n    '''\n    Write a function that takes two integers a,b and returns the circumference of a rectangle\n    (a * 2 + b * 2)\n    '''\n    #return a * b\n    return a * b\n    \ndef triangle_circumference_of_rectangle_and_square(a, b, c):\n    '''\n    Write a function that takes three integers a,b,c and returns the circumference of a triangle\n    (a + b + c)\n    '''\n    #return a * b * c\n    return (a + b + c) * 3.14\n    \ndef triangle_circumference_of_triangle_and_rectangle(a, b, c):\n    '''\n    Write a function that takes three integers a,b,c and returns the circumference of a triangle\n    (a + b + c)\n    '''\n    #return a * b * c\n    return (a + b + c) * 3.14\n    \ndef rectangle_circumference_of_triangle_and_rectangle(a, b):\n    '''\n    Write a function that takes two integers a,b and returns the circumference of a rectangle\n    (a * 2 + b * 2)\n    '''\n    #return a * b\n    return (a * b) * 2\n    \ndef rectangle_circumference_of_triangle_and_square(a, b):\n    '''\n    Write a function that takes two integers a,b and returns the circumference of a rectangle\n    (a * 2 + b * 2)\n    '''\n    #return a * b\n    return (a * b) * 2\n    \ndef triangle_circumference_of_triangle_and_square(a, b, c):\n    '''\n    Write a function that takes three integers a,b,c and returns the circumference of a triangle\n    (a + b + c)\n    '''\n    #return a * b * c\n    return (a * b * c) * 2\n    \ndef triangle_circumference_of_rectangle_and_square(a, b):\n    '''\n    Write a function that takes two integers a,b and returns the circumference of a rectangle\n    (a * 2 + b * 2)\n    '''\n    #return a * b\n    return (a * b) * 2\n    \ndef rectangle_circumference_of_rectangle_and_square(a, b):\n    '''\n    Write a function that takes two integers a,b and returns the circumference of a rectangle\n    (a * 2 + b * 2)\n    '''\n    #return a * b\n    return (a * b) * 2\n    \ndef triangle_circumference_of_rectangle_and_square(a, b, c):\n    '''\n    Write a function that takes three integers a,b,c and returns the circumference of a triangle\n    (a + b + c)\n    '''\n    #return a * b * c\n    return (a * b * c) * 2\n    \ndef triangle_circumference_of_rectangle_and_square_and_rectangle(a, b, c):\n    '''\n    Write a function that takes two integers a,b,c and returns the circumference of a rectangle\n    (a + b + c)\n    '''\n    #return a * b * c\n    return (a * b * c) * 2\n    \ndef triangle_circumference_of_rectangle_and_square_and_rectangle(a, b, c):\n    '''\n    Write a function that takes three integers a,b,c and returns the circumference of a triangle\n    (a + b + c)\n    '''\n    #return a * b * c\n    return (a * b * c) * "
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * (r**2) * math.pi\n    print(c)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #circumference = 2*pi*r*r\n    circumference = 2*pi*r*r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    import re\n    #print(test_list)\n    for i in test_list:\n        if type(i) is list:\n            extract_singly(i)\n        else:\n            #print(type(i))\n            #print(i)\n            pass\n    return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output_list = []\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for i in test_list:\n        if type(i) == list:\n            flattened += i\n        else:\n            flattened.append(i)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # TODO\n    # If the list of lists is empty or contains a single element, return that element\n    # If it does not contain a single element, return an empty list\n    # Return the list flattening the list.\n    \n    if len(test_list) == 0:\n        return []\n    \n    elif len(test_list) == 1:\n        return [test_list[0]]\n    \n    elif len(test_list) == 2:\n        return [test_list[0], test_list[1]]\n    \n    elif len(test_list) > 2:\n        num_nodes = len(test_list)\n        output_list = []\n        # First, get the max element\n        max_element = test_list[0]\n        # Next, iterate through the list to find the max element and add them to the output_list\n        for i in range(1,num_nodes):\n            if test_list[i] > max_element:\n                max_element = test_list[i]\n        # Finally, iterate through the list to flatten the list into a single list\n        for i in range(0,len(test_list)):\n            if test_list[i] > max_element:\n                output_list = output_list + [max_element]\n                max_element = test_list[i]\n            elif test_list[i] == max_element:\n                output_list = output_list + [test_list[i]]\n        # Finally, return the list\n        return output_list\n    \n    else:\n        raise TypeError"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return test_list[0][0][0][0][0]\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    list_num = []\n    for i in range(len(test_list)):\n        list_num.append(test_list[i][0])\n    return list_num\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result = []\n    for item in test_list:\n        if type(item) is list:\n            result = result + item\n    \n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return []\n    if len(test_list[0]) == 0:\n        return []\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # TODO: Write your solution here\n    numbers = []\n    for items in test_list:\n        numbers.extend(items)\n    return numbers\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # read the list into a set and return it\n    l = []\n    for test_set in test_list:\n        for item in test_set:\n            l.append(item)\n    return l\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    \n    for i in range(len(nums)):\n        min_idx = i\n        for j in range(len(nums) - 1):\n            if nums[j] > nums[j+1]:\n                min_idx = j + 1\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        pos = nums[i]\n        for j in range(i):\n            if pos < nums[j]:\n                pos = nums[j]\n        nums[i] = pos\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def helper(nums):\n        if len(nums) < 2:\n            return nums\n        else:\n            first = helper(nums[1:])\n            second = helper(nums[:2])\n            return [nums[0]] + second + [nums[-1]] + first\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # special case\n    if len(nums) == 1:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i = len(nums) - 1\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1, -1, -1):\n        pancake_sort(nums[:i] + nums[i + 1:])\n        \n        \nnums = [10, 13, 12, 6, 7, 1, 4, 2, 8]\npancake_sort(nums)\nprint(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(nums, start, end):\n        if start > end:\n            return\n        index = start\n        pivot = nums[end]\n        for i in range(start, end):\n            if nums[i] < pivot:\n                nums[index] = nums[i]\n                index += 1\n        nums[index] = pivot\n        sort(nums, start, index-1)\n        sort(nums, index+1, end)\n    sort(nums, 0, len(nums)-1)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    return sorted(nums, reverse=True)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        p = len(nums) - 1\n        for i in range(p, -1, -1):\n            if nums[i] < nums[i+1]:\n                swap(i,p)\n                p -= 1\n        for i in range(0,p+1):\n            nums[i], nums[p] = nums[p], nums[i]\n        return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1=list(dict.fromkeys(list1))\n    list2=list(dict.fromkeys(list2))\n    list3=list(dict.fromkeys(list3))\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j]==list3[k]:\n                    count+=1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #count the number of same number of item in list1 and list2\n    same_num_in_same_position = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if(list1[i] == list2[j]):\n                same_num_in_same_position += 1\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in list1:\n        if i in list2:\n            if i in list3:\n                count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    total = 0\n    for x in list1:\n        for y in list2:\n            if(x == y):\n                total += 1\n    \n    for x in list3:\n        for y in list3:\n            if(x == y):\n                total += 1\n    \n    return total\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    total = 0\n    if len(list1) > len(list2):\n        for i in range(len(list1)):\n            if list1[i] == list2[i]:\n                total += 1\n    elif len(list2) > len(list1):\n        for i in range(len(list2)):\n            if list2[i] == list1[i]:\n                total += 1\n    elif len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i] == list2[i]:\n                total += 1\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res1 = 0\n    res2 = 0\n    res3 = 0\n    list_count = 0\n    if len(list1)!= len(list2):\n        print(\"Please enter the same list of numbers\")\n        return 0\n    elif len(list1) == len(list2):\n        for i in range(0,len(list1)):\n            if list1[i]!= list2[i]:\n                list_count = list_count + 1\n        res1 = list_count\n        return res1\n    elif len(list1) == len(list3):\n        for i in range(0,len(list1)):\n            if list1[i]!= list3[i]:\n                list_count = list_count + 1\n        res2 = list_count\n        return res2\n    else:\n        for i in range(0,len(list1)):\n            if list1[i]!= list3[i]:\n                list_count = list_count + 1\n        for i in range(0,len(list2)):\n            if list2[i]!= list3[i]:\n                list_count = list_count + 1\n        res3 = list_count\n        return res3\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    l1 = list1\n    l2 = list2\n    l3 = list3\n    \n    count_same = 0\n    \n    for i in range(len(l1)):\n        if l1[i] == l3[i]:\n            count_same += 1\n    \n    return count_same\n        \n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                c += 1\n    return c\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count1=0\n    count2=0\n    count3=0\n    if list1!=list2:\n        for i in range(len(list1)):\n            if list1[i]==list2[i] and list2[i]!=list3[i]:\n                count1+=1\n    if list1!=list3:\n        for i in range(len(list1)):\n            if list1[i]==list3[i] and list3[i]!=list2[i]:\n                count2+=1\n    if list1!=list3:\n        for i in range(len(list1)):\n            if list1[i]==list3[i] and list3[i]!=list2[i]:\n                count3+=1\n    if count1>0 or count2>0 or count3>0:\n        return count1+count2+count3\n    else:\n        return count1+count2\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3) or len(list1) == 0 or len(list3) == 0:\n        return 0\n    elif len(list1) == 0:\n        return len(list2)\n    elif len(list2) == 0:\n        return len(list1)\n    elif list1 == list2:\n        return 3\n    else:\n        x = 0\n        while x <= len(list1):\n            if list1[x] == list2[x] and list1[x] == list3[x]:\n                x += 1\n                continue\n            elif list1[x]!= list2[x] and list1[x]!= list3[x] and list1[x]!= list3[x]:\n                x += 1\n                continue\n            elif list1[x]!= list2[x] and list1[x]!= list3[x] and list2[x]!= list3[x]:\n                x += 1\n                continue\n            else:\n                return 3\n        if x == len(list1):\n            return 3\n        else:\n            return 0\n        \n    \ndef count_tables(list1,list2,list3,tablename,table,check=None):\n    '''\n    Write a function that counts the number of times an element appears in the table.\n    '''\n    if check is None:\n        check = count_samepair(list1,list2,list3)\n    elif check!= count_samepair(list1,list2,list3):\n        return 0\n    else:\n        return 1\n    if table is None:\n        table = [tablename, count_tables(list1,list2,list3,tablename,check,check+1)]\n    elif table == [tablename, count_tables(list1,list2,list3,tablename,check,check+1)]:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    for i in Input: \n        if type(i) == tuple: \n            print(i)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = len(Input)\n    lst = []\n    for i in range(l):\n        if Input[i] not in lst:\n            lst.append(Input[i])\n    return(len(lst))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    if len(Input) == 1:\n        return 0\n    else:\n        n=0\n        for i in range(len(Input)):\n            for j in range(i,len(Input)):\n                if Input[i] == Input[j]:\n                    n+=1\n        return n\n    \ndef Merge_sort(input): \n    '''\n    Write a function that merges the elements of the tuple in order into one sorted tuple.\n    '''\n    if len(input) < 2:\n        return input\n    else:\n        middle = len(input)//2\n        left = input[:middle]\n        right = input[middle:]\n        left = Merge_sort(left)\n        right = Merge_sort(right)\n        return merge(left, right)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    temp = []\n    result = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            temp.append(Input[i])\n            result += 1\n    return result\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    try:\n        lst = []\n        for i in range(len(Input)):\n            lst.append(len(Input[i]))\n        return lst\n    except Exception as e:\n        raise e\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # variable to store the number of lists \n    n = 0 \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # Set all values in each list to an empty string\n    value_set = {}\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) == 1:\n        return 0\n    count = 0\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if Input[i][j] == '#':\n                count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for x in range(len(Input)):\n        for y in range(len(Input[x])):\n            if Input[x][y] == '{' or Input[x][y] == '}':\n                count += 1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Write your code here.\n    return max(abs(x-y) for x,y in zip(arr,arr[1:]))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    def get_abs_diff(arr, index):\n        '''\n        Returns the absolute difference between index and the element in arr.\n        '''\n        if index > len(arr) - 1:\n            return arr[index]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    diff = arr[0]\n    for elem in arr[1:]:\n        diff = max(abs(elem-diff), diff)\n    return diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -999\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] > max_diff:\n                max_diff = arr[i] + arr[j]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    Max_Diff = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) > Max_Diff:\n                Max_Diff = abs(arr[i] - arr[j])\n                \n    return Max_Diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return -1\n    \n    elif (arr[0] > arr[1]):\n        return abs(arr[0] - arr[1])\n    else:\n        return abs(arr[1] - arr[0])\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Abs_Diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            Abs_Diff = abs(arr[i]-arr[j])\n            if Abs_Diff > max_Abs_Diff:\n                max_Abs_Diff = Abs_Diff\n    return max_Abs_Diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # max_val = arr[0]\n    # for i in range(1, len(arr)):\n    #     max_val = max(max_val, arr[i]-arr[i-1])\n    # return max_val\n    max_val = -99\n    for i in range(len(arr) - 1):\n        max_val = max(max_val, arr[i] - arr[i + 1])\n    return max_val\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # 0 : 0, 1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5, 6 : 6, 7 : 7, 8 : 8, 9 : 9, 10 : 10, 11 : 11, 12 : 12, 13 : 13, 14 : 14, 15 : 15,\n    # 16 : 16, 17 : 17, 18 : 18, 19 : 19, 20 : 20, 21 : 21, 22 : 22, 23 : 23, 24 : 24, 25 : 25, 26 : 26, 27 : 27, 28 : 28,\n    # 29 : 29, 30 : 30, 31 : 31, 32 : 32, 33 : 33, 34 : 34, 35 : 35, 36 : 36, 37 : 37, 38 : 38, 39 : 39, 40 : 40,\n    # 41 : 41, 42 : 42, 43 : 43, 44 : 44, 45 : 45, 46 : 46, 47 : 47, 48 : 48, 49 : 49, 50 : 50, 51 : 51, 52 : 52,\n    # 53 : 53, 54 : 54, 55 : 55, 56 : 56, 57 : 57, 58 : 58, 59 : 59, 60 : 60, 61 : 61, 62 : 62, 63 : 63, 64 : 64,\n    # 65 : 65, 66 : 66, 67 : 67, 68 : 68, 69 : 69, 70 : 70, 71 : 71, 72 : 72, 73 : 73, 74 : 74, 75 : 75, 76 : 76,\n    # 77 : 77, 78 : 78, 79 : 79, 80 : 80, 81 : 81, 82 : 82, 83 : 83, 84 : 84, 85 : 85, 86 : 86, 87 : 87, 88 : 88,\n    # 89 : 89, 90 : 90\n    \n    n = len(arr)\n    \n    max_list = []\n    min_list = []\n    \n    max_list.append(arr[0])\n    min_list.append(arr[0])\n    \n    for i in range(n-2):\n        if arr[i+1] > arr[i+2]:\n            max_list.append(arr[i+1])\n            min_list.append(arr[i+2])\n        else:\n            max_list.append(arr[i+2])\n            min_list.append(arr[i+1])\n        \n    max_list.append(arr[n-2])\n    min_list.append(arr[n-1])\n    \n    max_list.reverse()\n    min_list.reverse()\n    \n    max_list.append(arr[n-3])\n    min_list.append(arr[n-2])\n    \n    max_list.reverse()\n    min_list.reverse()\n    \n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            max_list.append(arr[i])\n            min_list.append(arr[i+1])\n        else:\n            max_list.append(arr[i+1])\n            min_list.append(arr[i])\n            \n    max_list.append(arr[n-2])\n    min_list.append(arr[n-1])\n    \n    max_list.reverse()\n    min_list.reverse()\n    \n    for i in range(n-3,0,-1):\n        if arr[i] > arr[i-1]:\n            max_list.append(arr[i])\n            min_list.append(arr[i-1])\n        else:\n            max_list.append(arr[i-1])\n            min_list.append(arr[i])\n            \n    \n    max_list.append(arr[n-1])\n    min_list.append(arr[n-3])\n    \n    for i in range(n-1,0,-1):\n        if arr[i] > arr[i-1]:\n            max_list.append(arr[i])\n            min_list.append(arr[i-1])\n        else:\n            max_list.append(arr[i-1])\n            min_list.append(arr[i])\n            \n    max_list.reverse()\n    min_list.reverse()\n    \n    max_sum = 0\n    min_sum = 0\n    \n    for i in range(0, len(max_list)):\n        max_sum += max_list[i]\n        min_sum += min_list[i]\n        \n    return max_sum - min_sum"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    return max(abs(arr[0] - arr[1]))\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    try:\n        x = int(a)\n        y = int(b)\n    except ValueError:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if (is_solvable(a, b, n) == True):\n        sol = solve(a, b, n)\n        return sol\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a*b == n:\n        return a, b\n    if a*n == b*n:\n        return a, b\n    if a*b > n:\n        return None\n    if n % a == 0 and n % b == 0:\n        return n, n//a, n//b\n    if n % a!= 0:\n        return None\n    if n % b!= 0:\n        return None\n    if n % a == 0 and n % b == 0:\n        return n, n//a, n//b\n    if n % a!= 0:\n        return None\n    if n % b == 0:\n        return n, n//a, n//b\n    if n % a!= 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # your code goes here\n    solution = None\n    \n    if n == 0:\n        return solution\n    \n    for ai in range(n):\n        if a * ai == b:\n            return ai, ai\n    \n    return None\n    \n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        if a * x % b == 0:\n            y = x\n            break\n        x -= 1\n    if y == 0:\n        return None\n    else:\n        return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n < 0:\n        return None\n    if a == 0:\n        return (b, 0)\n    if a == 1:\n        return (-b // n, 0)\n    if a % 2 == 0:\n        return find_solution(a // 2, b * -1, n)\n    else:\n        return find_solution((a // 2) + 1, b * -1, n)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return a, b\n    x = a\n    y = b\n    i = 0\n    while x!= 0 and y!= 0:\n        x, y = x - a[i] % x, y - b[i] % y\n        i += 1\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return a[0], b[0]\n    if a[0] + b[0] == n:\n        return a[0], b[0]\n    if a[1] + b[1] == n:\n        return a[0], b[1]\n    if a[2] + b[2] == n:\n        return a[1], b[2]\n    if a[3] + b[3] == n:\n        return a[2], b[3]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    newlist=[]\n    for element in list1:\n        if element not in list2:\n            newlist.append(element)\n    return newlist\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        list2.remove(item)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # initialize an empty list\n    list_elements = []\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [list1.pop(i) for i in range(len(list1)) if i not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list2:\n        if x in list1:\n            list1.remove(x)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    if len(list1)!= len(list2):\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                if list1[i] == list2[j]:\n                    list3.append(list1[i])\n                    break\n    else:\n        for i in range(len(list1)):\n            list3.append(list1[i])\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [item for item in list1 if item not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # YOUR CODE HERE\n    list2.sort()\n    index = 0\n    while index < len(list1):\n        list1.pop(index)\n        index = index + 1\n    return list1\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n - 2*(n % 2)) + (n - 4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(0, n+1, 2):\n        s += i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if (n == 0):\n        return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    def sum(n):\n        if n < 0:\n            return -1\n        elif n == 0:\n            return 0\n        else:\n            return n+sum(n-1)\n    return sum(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    ans = 0\n    for i in range(n // 2 + 1):\n        ans += (n - (n - i) * i)\n    return ans\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n-2) + (n-4)\n    #n = int(input('Enter the number to be sum : '))\n    #return (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n,0,-2):\n        sum += i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n//2):\n        s += i\n    return s\ndef sub(n):\n    '''\n    Write a function that returns the sum of the natural numbers smaller than or equal to n.\n    '''\n    s = 0\n    for i in range(n//2, 0, -1):\n        s += i\n    return s\ndef main():\n    # process and output\n    n = int(input())\n    print(sum_series(n))\n    print(sub(n))\nmain("
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 1\n    sum = 0\n    while (n > i):\n        sum = sum + i\n        i += 1\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n-2) + (n-4)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 2*(l**2)*tan(s/2)\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = int(s)\n    l = int(l)\n    area = 0\n    if s == l:\n        area = s*s\n    elif s > l:\n        for i in range(s, l):\n            area += i*(i+1)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if (s == 0 or l == 0):\n        return 0\n    else:\n        return s * (1/3) * pi * l ** 3\ndef area_rectangle(r):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return (r[2] * r[3])\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return 3.14 * (r ** 2)\ndef area_triangle(s):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return (s[0] * (s[0] + s[2]) ** 0.5)\ndef area_quadrilateral(s):\n    '''\n    Write a function to calculate the area of a quadrilateral given its base and height.\n    '''\n    return (s[0] * (s[1] + s[3]) ** 0.5)\ndef area_rectangle_2(r):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r[2] * r[3])\ndef area_circle_2(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return (pi * (r ** 2))\ndef area_triangle_2(s):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return (s[0] * (s[1] + s[3]) ** 0.5)\ndef area_quadrilateral_2(s):\n    '''\n    Write a function to calculate the area of a quadrilateral given its base and height.\n    '''\n    return (s[0] * (s[1] + s[3]) ** 0.5)\ndef perimeter(r, s, l):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    return ((r[2] * r[3]) + (l * s) + (l * s + (r[2] + r[3]) ** 2)) ** 0.5\ndef perimeter_2(r, s, l):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    return (((r[2] * r[3]) + (l * s) + (l * s + (r[2] + r[3]) ** 2)) ** 0.5) * -1\ndef perimeter_3(r, s, l):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    return (((r[2] * r[3]) + (l * s) + (l * s + (r[2] + r[3]) ** 2)) ** 0.5) * -2\ndef volume(r, s, l):\n    '''\n    Write a function to calculate the volume of a rectangle given its length and width.\n    '''\n    return (r[2] * r[3]) * (s[0] * s[1] + (r[0] + r[2] + r[3]) ** 2) * (l ** 3)\ndef volume_2(r, s, l):\n    '''\n    Write a function to calculate the volume of a rectangle given its length and width.\n    '''\n    return (((r[2] * r[3]) * (s[0] * s[1] + (r[0] + r[2] + r[3]) ** 2)) ** 0.5) * -2\ndef volume_3(r, s, l):\n    '''\n    Write a function to calculate the volume of a rectangle given its length and width.\n    '''\n    return (((r[2] * r[3]) * (s[0] * s[1] + (r[0] + r[2] + r[3]) ** 2)) ** 0.5) * -3\ndef perimeter_paraboloid(r, s, l):\n    '''\n    Write a function to calculate the perimeter of a paraboloid given its radius and the side length.\n    '''\n    return (4 * (pi ** 2) * (l * (r ** 2))) ** 0.5\ndef area_paraboloid(r, s, l):\n    '''\n    Write a function to calculate the area of a paraboloid given its radius and the side length.\n    '''\n    return ((4 * pi) * (l ** 3) * (s ** 2)) ** 0.5\ndef area_circle_2(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return (r ** 2) * 3.14\ndef area_triangle_3(s):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return (s ** 3) * (s + (3 * (r ** 2))) ** 0.5\ndef area_quadrilateral_3(s):\n    '''\n    Write a function to calculate the area of a quadrilateral given its base and height.\n    '''\n    return (s ** 3) * (s + (3 * (r ** 2))) ** 0.5\ndef area_rectangle_4(r):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return ((r[2] * r[3]) ** 0.5) * -1\ndef area_circle_4(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return (pi ** 2) * (r ** 2) * -1\ndef area_triangle_4(s):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return (s ** 3) * (s + (3 * (r ** 2))) ** 0.5\ndef area_quadrilateral_4(s):\n    '''\n    Write a function to calculate the area of a quadrilateral given its base and height.\n    '''\n    return (s ** 3) * (s + (3 * (r ** 2))) ** 0.5\ndef area_rectangle_5(r):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return ((r[2] * r[3]) ** 0.5) * -1\ndef area_circle_5(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return (pi ** 2) * (r ** 2) * -1\ndef area_triangle_5(s):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return (s ** 3) * (s + (3 * (r ** 2))) ** 0.5\ndef area_quadrilateral_5(s):\n    '''\n    Write a function to calculate the area of a quadrilateral given its base and height.\n    '''\n    return (s ** 3) * (s + (3 * (r ** 2))) ** 0.5\ndef area_rectangle_6(r):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return ((r[2] * r[3]) ** 0.5) * -1\ndef area_circle_6(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return (pi ** 2) * (r ** 2) * -1\ndef area_triangle_6(s):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return (s ** 3) * (s + (3 * (r ** 2))) ** 0.5\ndef area_quadrilateral_6(s):\n    '''\n    Write a function to calculate the area of a quadrilateral given its base and height.\n    '''\n    return (s ** 3) * (s + (3 * (r ** 2))) ** 0.5\ndef area_rectangle_7(r):\n    '"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area += s*tan(pi/l)*tan(pi/l)\n    area = area*(2*s - pi*s)/(l**2)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return pow(tan(pi/l),2)*l*s\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # YOUR CODE HERE\n    # TODO: calculate the area of the polygon, return the result\n    return (l * tan(s/2)) * pi\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0\n    for k in range(0, len(s), 2):\n        a += (s[k] + s[k+1])*l/2\n    return a\ndef perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    p = 0\n    for k in range(0, len(s), 2):\n        p += s[k]*l\n    return p\ndef main():\n    print('Welcome to the 4D plane triangulation calculator!')\n    print('The main section of the program.')\n    print('This program calculates the area of a regular polygon given the length and number of its sides.\\n')\n    print('The program is capable of computing the perimeter of a regular polygon given the length and number of its sides.\\n')\n    print('To calculate the perimeter, you must first compute the area of the polygon\\n')\n    print('with respect to the length of its sides.\\n')\n    print('To complete the program, you must calculate the area of the polygon\\n')\n    print('using the area_polygon function.\\n')\n    print('A circle with radius r has an area of pi*r^2.\\n')\n    print('So, if we calculate the area of the polygon given the length and number of its sides,\\n')\n    print('the result should be pi*r^2.\\n')\n    print('To compute the perimeter, you must first compute the area of the polygon\\n')\n    print('using the perimeter_polygon function.\\n')\n    print('A circle with radius r has an area of pi*r^2.\\n')\n    print('So, if we calculate the perimeter of the polygon given the length and number of its sides,\\n')\n    print('the result should be pi*r^2.\\n')\n    print('The program also supports fitting a convex polygon of the length and number of sides.\\n')\n    print('This function computes the area of the polygon given the number of sides and length.\\n')\n    print('The function provides an alternative way of computing the area of the polygon\\n')\n    print('using the area_polygon function.\\n')\n    print('A circle with radius r has an area of pi*r^2.\\n')\n    print('So, if we calculate the area of the polygon given the number of sides,\\n')\n    print('the result should be pi*r^2.\\n')\n    print('The program also supports fitting a convex polygon of the number of sides and length.\\n')\n    print('This function computes the perimeter of the polygon given the number of sides and length.\\n')\n    print('The function provides an alternative way of computing the perimeter of the polygon\\n')\n    print('using the perimeter_polygon function.\\n')\n    print('A circle with radius r has an area of pi*r^2.\\n')\n    print('So, if we calculate the perimeter of the polygon given the number of sides,\\n')\n    print('the result should be pi*r^2.\\n')\n    print('The program also supports fitting a convex polygon of the length and number of sides.\\n')\n    print('This function computes the area of the polygon given the number of sides and length.\\n')\n    print('The function provides an alternative way of computing the area of the polygon\\n')\n    print('using the area_polygon function.\\n')\n    print('A circle with radius r has an area of pi*r^2.\\n')\n    print('So, if we calculate the area of the polygon given the number of sides,\\n')\n    print('the result should be pi*r^2.\\n')\n    print('The program also supports fitting a convex polygon of the length and number of sides.\\n')\n    print('This function computes the perimeter of the polygon given the number of sides and length.\\n')\n    print('The function provides an alternative way of computing the perimeter of the polygon\\n')\n    print('using the perimeter_polygon function.\\n')\n    print('A circle with radius r has an area of pi*r^2.\\n')\n    print('So, if we calculate the perimeter of the polygon given the number of sides,\\n')\n    print('the result should be pi*r^2.\\n')\n    print('That is, we can write the program as follows:\\n')\n    print('Area of a regular polygon = pi*r^2')\n    print('Perimeter of a regular polygon = pi*r^2')\n    print('The program calculates the area of a regular polygon given the number of sides and the length of the sides.\\n')\n    print('The program calculates the perimeter of a regular polygon given the number of sides and the length of the sides.\\n')\n    print('The program calculates the area of a regular polygon given the length of its sides.\\n')\n    print('The program calculates the perimeter of a regular polygon given the number of sides.\\n')\n    print('The program calculates the area of a regular polygon given the number of sides and the length of its sides.\\n')\n    print('The program calculates the perimeter of a regular polygon given the number of sides and the length of its sides.\\n')\n    print('The program calculates the area of a regular polygon given the length of its sides.\\n')\n    print('The program calculates the perimeter of a regular polygon given the number of sides.\\n')\n    print('The program calculates the area of a regular polygon given the number of sides and the length of its sides.\\n')\n    print('The program calculates the perimeter of a regular polygon given the number of sides and the length of its sides.\\n')\n    print('The program calculates the area of a regular polygon given the number of sides and the length of its sides and the number of sides.\\n')\n    print('The program calculates the perimeter of a regular polygon given the number of sides and the length of its sides.\\n')\n    print('The program calculates the area of a regular polygon given the number of sides and the number of sides and the number of sides.\\n')\n    print('The program calculates the perimeter of a regular polygon given the number of sides and the number of sides and the number of sides and the number of sides.\\n')\n    print('The program calculates the area of a regular polygon given the number of sides and the number of sides and the number of sides and the number of sides.\\n')\n    print('The program calculates the area of a regular polygon given the length of its sides.\\n')\n    print('The program calculates the perimeter of a regular polygon given the number of sides.\\n')\n    print('The program calculates the area of a regular polygon given the length of its sides.\\n')\n    print('The program calculates the area of a regular polygon given the number of sides and the number of sides.\\n')\n    print('The program calculates the area of a regular polygon given the number of sides and the number of sides and the number of sides.\\n')\n    print('The program calculates the area of a regular polygon given the length of its sides.\\n')\n    print('The program calculates the perimeter of a regular polygon given the number of sides.\\n')\n    print('The program calculates the area of a regular polygon given the number of sides and the number of sides.\\n')\n    print('The program calculates the perimeter of a regular polygon given the number of sides and the number of sides.\\n')\n    print('The program calculates the area of a regular polygon given the length of its sides.\\n')\n    print('The program calculates the area of a regular polygon given the number of sides and the number of sides.\\n')\n    print('The program calculates the perimeter of a regular polygon given the number of sides and the number of sides.\\n')\n    print('The program calculates the area of a regular polygon given the number of sides and the number of sides.\\n')\n    print('The program calculates the perimeter of a regular polygon given the number of sides and the number of sides.\\n')\n    print('The program calculates the area of a regular polygon given the length of its sides.\\n')\n    print('The program calculates the area of a regular polygon given the number of sides.\\n')\n    print('The program calculates the area of a regular polygon given the number of sides and the number of sides.\\n')\n    print('The program calculates the area of a regular polygon given th"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(len(s)):\n        area += s[i]*s[i]\n    area = area/2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(len(l)):\n        area += (s[i]*l[i])/2.0\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = l * (l - 1)\n    for i in range(1, len(s)):\n        area += l * (len(s) - i) * s[i - 1]\n    area = area * 0.5\n    return round(area, 2)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #for i in range(1, n+1):\n    #    if n%i == 0:\n    #        return False\n    \n    div_sum = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            div_sum += i\n    if div_sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    if total == n:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if (n == 0): \n        return False\n    if (n % 2 == 0): \n        return False\n    if (n % 2): \n        return True \n    if (n % 2 == 1): \n        return False\n    x = n \n    divisors = [] \n    while (x!= 0): \n        y = x \n        x = (x // 2) \n        if (x not in divisors): \n            divisors.append(x) \n    for n in range(len(divisors)): \n        if (divisors[n] == n): \n            return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==1:\n        return False\n    if n%2==0:\n        return True\n    if n==(n*3)+1:\n        return True\n    for i in range(int(math.sqrt(n)),0,-1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n            if i == int(math.sqrt(n)) or n % i == 0:\n                return True\n    return sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors.\n    s = 0\n    for i in range(1, n): \n        if n % i == 0: \n            s = s + i \n    if s == n: \n        print(\"The sum of the divisors of \", n, \"is equal to the number\", n) \n    else: \n        print(\"The sum of the divisors of \", n, \"is not equal to the number\", n) \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if (n == 0):\n        return False\n    if (n % 2 == 0):\n        return True\n    if (n < 0):\n        return False\n    divs = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.append(i)\n    if (len(divs) == 2):\n        return True\n    return False\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # return number of characters in string\n    return len(set(str1))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    '''\n    Main idea:\n    \n    Initialize a counter object which will be used later as a counter variable, for iterating over all characters in the input string.\n    \n    Loop through each letter in the string. If the letter is in the counter dictionary, increment the counter by 1.\n    \n    Otherwise, if the letter is not in the counter dictionary, increment the counter by 1.\n    \n    Time complexity: O(N)\n    Space complexity: O(N)\n    '''\n    '''\n    Idea:\n    \n    For each letter in the string, increment the counter by 1.\n    \n    For each letter in the string, add it to the counter dictionary.\n    \n    Time complexity: O(N)\n    Space complexity: O(N)\n    '''\n    letter_counter = dict()\n    for letter in str1: \n        letter_counter[letter] = letter_counter.get(letter, 0) + 1\n    return letter_counter.items()\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create an empty dictionary\n    dic = {}\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count=0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            char_count+=1\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return count(str1, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1:\n        if i in alphabet:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    \n    for i in range(len(str1)):\n        if str1[i].isupper():\n            count += 1\n        elif str1[i].islower():\n            count += 1\n        elif str1[i].isdigit():\n            count += 1\n        elif str1[i].isalnum():\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dic={}\n    for i in range(len(str1)):\n        if str1[i] not in dic:\n            dic[str1[i]]=1\n        else:\n            dic[str1[i]]+=1\n    \n    return len(dic)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if i in count_dict: \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef count_string_letter(str1): \n    '''\n    Write a function to count the number of times a specific string appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if i in count_dict: \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef count_letter_position(str1): \n    '''\n    Write a function to count the number of times a specific letter appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if i in count_dict: \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count(str1): \n    '''\n    Write a function to count the number of words in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1.split(): \n        if i in count_dict: \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count_whole(str1): \n    '''\n    Write a function to count the number of words in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if i in count_dict: \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count_letter(str1): \n    '''\n    Write a function to count the number of times a specific letter appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if i in count_dict: \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count_string(str1): \n    '''\n    Write a function to count the number of times a specific string appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if i in count_dict: \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count_string_whole(str1): \n    '''\n    Write a function to count the number of times a specific string appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if i in count_dict: \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count_number_letter(str1): \n    '''\n    Write a function to count the number of times a specific number appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if i in count_dict: \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count_number_string(str1): \n    '''\n    Write a function to count the number of times a specific number appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if i in count_dict: \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count_string_number(str1): \n    '''\n    Write a function to count the number of times a specific number appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if i in count_dict: \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count_substring_number(str1): \n    '''\n    Write a function to count the number of times a specific substring appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if str1.startswith(i): \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count_substring_letter(str1): \n    '''\n    Write a function to count the number of times a specific substring appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if str1.startswith(i): \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count_string_substring_letter(str1): \n    '''\n    Write a function to count the number of times a specific string substring appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if str1.startswith(i): \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count_number_string_substring_letter(str1): \n    '''\n    Write a function to count the number of times a specific number substring appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if str1.startswith(i): \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count_string_number_substring_letter(str1): \n    '''\n    Write a function to count the number of times a specific string substring appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if str1.startswith(i): \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return count_dict \n    \ndef string_count_substring_string_number(str1): \n    '''\n    Write a function to count the number of times a specific substring appears in a given string as a substring in a string.\n    '''\n    # return count(s) as a dictionary\n    count_dict = {}\n    for i in str1: \n        if str1.startswith(i): \n            count_dict[i] += 1\n        else: \n            count_dict[i] = 1\n    return coun"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    i = 0\n    count = 0\n    while i < len(str1): \n        if str1[i].isalpha(): \n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    ans = 0\n    for i in A:\n        for j in A:\n            if i!= j and A.index(i) == A.index(j):\n                ans += 1\n    return ans\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    num_pairs = 0\n    for x in A:\n        if x & 1 == 0:\n            num_pairs += 1\n    return num_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    n = len(A)\n    count = 0\n    pair = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0:\n                count += 1\n                pair.append([i, j])\n    return count, pair"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = []\n    for i in range(len(A)):\n        for j in range(len(A)-1):\n            if A[j] ^ A[j+1] == 0:\n                even.append(A[j] * A[j+1])\n    return even\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    res = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] & A[j] == 0:\n                res += 1\n    return res\n    \n    \ndef find_pair(A, x, n):\n    '''\n    Returns the index of the first and last pair of items in the list that have x as their XOR, \n    or returns -1 if none of the items have x as their XOR\n    '''\n    i = 0\n    j = n-1\n    while j >= i:\n        if A[i] ^ A[j] == x:\n            return i + 1, j + 1\n        elif A[i] ^ A[j] == 0:\n            return -1\n        elif A[i] ^ A[j] == -1:\n            return j + 1, i + 1\n        i += 1\n        j -= 1\n    return -1\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1): \n        for j in range(i+1, len(A)): \n            if A[i] & A[j] == 0: \n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_num = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_num += 1\n    return even_num\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    odd_numbers = 0\n    even_numbers = 0\n    for i in range(n):\n        for j in range(n - i):\n            if A[j] == A[j + i]:\n                even_numbers += 1\n            if A[j] == A[j + 2 * i]:\n                odd_numbers += 1\n    print(even_numbers, odd_numbers)\n    print(even_numbers * odd_numbers)\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(0, len(A)):\n        for j in range(i, len(A)):\n            if A[i] == A[j] and i % 2 == 0:\n                even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # 2. [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    # 2.2 [0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]\n    # 2.3 [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41]\n    # 2.4 [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42]\n    # 2.5 [3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,38,40,42]\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1: \n        return 1\n    else: \n        return n + next_power_of_2(n // 2)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1: \n        return\n    if n == 1: \n        return 2 \n    else: \n        return next_power_of_2(n // 2) \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while n % 2 == 0:\n        n = n // 2\n        i += 1\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    n = abs(n)\n    \n    if n == 1: \n        return n\n    else: \n        i = 2\n        while i**2 < n: \n            i += 1\n        return i**2\n        \n        \ndef next_power_of_2_globally(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    n = abs(n)\n    \n    if n == 1: \n        return n\n    else: \n        i = 2\n        while i**2 < n: \n            i += 1\n        return i**2\n        \n        \n        \ndef next_power_of_2_locally(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    n = abs(n)\n    \n    if n == 1: \n        return n\n    else: \n        i = 2\n        while i**2 < n: \n            i += 1\n        return i**2\n        \n        \n        \ndef next_power_of_2_nest(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    n = abs(n)\n    \n    if n == 1: \n        return n\n    else: \n        i = 2\n        while i**2 < n: \n            i += 1\n        return i**2\n    \n        \n    \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #Base case:\n    if n==1 or n==2:\n        return 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    while n % 2 == 0: \n        i += 1\n        n //= 2\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    ans = 0\n    while n > 1:\n        if n % 2 == 1:\n            n //= 2\n            ans += 1\n        else:\n            break\n    return ans\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return -1\n    elif n == 1:\n        return 0\n    else:\n        return 1 + next_power_of_2(n-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Write your code here.\n    m = 1\n    while n // m:\n        m = m * 2\n    return m * 2\n    "
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    f=0\n    for i in range(len(a)):\n        if a[i]==x:\n            f+=1\n    return f\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            num += 1\n    return num\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            counter += 1\n    return counter\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            counter += 1\n    return counter"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return list(map(lambda y: x.count(y), a))\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = set(a) \n    x = set(x) \n    return len(x.difference(a)) \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # TODO: complete this function\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = a.split(\" \")\n    return [a.count(x) for x in a]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n        \ndef main():\n    '''\n    Test code\n    '''\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s=0\n    for i in range(m,n+1):\n        s+=list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Your code here\n    sum = 0\n    for i in list1:\n        sum = sum + i\n    print(sum)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:i+m]) + sum(list1[i+m:i+n])\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    l = []\n    for i in range(m, n+1):\n        l.append(list1[i])\n    return sum(l)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m <= 0 or n <= 0:\n        return 0\n    sum = 0\n    for i in range(m,n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if n < 0:\n        return -1\n    if m == n:\n        return sum(list1)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    summ = 0\n    for i in range(m, n):\n        summ += list1[i]\n    return summ\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # your code goes here\n    total = 0\n    for i in range(m, n):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5 + math.sqrt(3)*a*5 + math.sqrt(2)*a*4 + a*(math.sqrt(5))*(math.sqrt(3)/2)\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a*3 + a*2 + a\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a*a + a*3 + 2*a*(a**2)\ndef perimeter_square_even(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a*a*a + a*3*(a**2) + 2*a*(a**3)\ndef perimeter_square_odd(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a*a*a + a*(a**2) + (2*a*a)**(1/2)\ndef perimeter_rectangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a rectangle from its length of its sides.\n    '''\n    return a*b*c + a*b*(b**2) + (a*c)**2 + a*c*(b**2)\ndef perimeter_rectangle_square(a,b,c):\n    '''\n    Write a function to find the perimeter of a rectangle from its length of its sides.\n    '''\n    return a*b*c + a*(b**2) + b*c*(b**2) + a*(c**2)\ndef perimeter_ellipse(a,b):\n    '''\n    Write a function to find the perimeter of an ellipse from its length and width.\n    '''\n    return a*b*(b/2)**2 + 2*a*b*b*(b/2) + 2*a*b*a*b*(b/2)\ndef perimeter_ellipse_square(a,b):\n    '''\n    Write a function to find the perimeter of an ellipse from its length and width.\n    '''\n    return a*(b/2)**2 + 2*a*(b/2)*(b/2) + 2*a*(b/2)*b*(b/2)\ndef perimeter_ellipse_tetra(a,b):\n    '''\n    Write a function to find the perimeter of an ellipse from its length and width.\n    '''\n    return a*(b/3)**2 + 2*a*(b/3)*(b/3) + 2*a*b*(b/3)**2\ndef perimeter_square_tetra(a,b):\n    '''\n    Write a function to find the perimeter of a square from its length and width.\n    '''\n    return a*(b/3)**2 + 2*a*(b/3)*(b/3) + 2*a*b*(b/3)**2\ndef perimeter_triangle_tetra(a,b):\n    '''\n    Write a function to find the perimeter of a triangle from its length and width.\n    '''\n    return a*(b/3)**2 + 2*a*(b/3)*(b/3) + 2*a*b*(b/3)**2\ndef perimeter_square_pentagon(a):\n    '''\n    Write a function to find the perimeter of a square from its length and width.\n    '''\n    return a*(b/5)**2 + 2*a*(b/5)*(b/5) + 2*a*b*(b/5)**2\ndef perimeter_square_triangle(a):\n    '''\n    Write a function to find the perimeter of a triangle from its length and width.\n    '''\n    return a*(b/7)**2 + 2*a*(b/7)*(b/7) + 2*a*(b/7)**2\ndef perimeter_rectangle_pentagon(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from its length and width.\n    '''\n    return a*b*(b/2)**2 + 2*a*(b/2)*(b/2) + 2*a*(b/2)*(b/2)**2\ndef perimeter_rectangle_tetra(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from its length and width.\n    '''\n    return a*(b/3)**2 + 2*a*(b/3)*(b/3) + 2*a*(b/3)*(b/3)**2\ndef perimeter_ellipse_pentagon(a,b):\n    '''\n    Write a function to find the perimeter of an ellipse from its length and width.\n    '''\n    return a*(b/2)**2 + 2*a*(b/2)*(b/2) + 2*a*(b/2)*(b/2)**2\ndef perimeter_ellipse_square(a,b):\n    '''\n    Write a function to find the perimeter of an ellipse from its length and width.\n    '''\n    return a*(b/3)**2 + 2*a*(b/3)*(b/3) + 2*a*(b/3)*(b/3)**2\ndef perimeter_ellipse_tetra(a,b):\n    '''\n    Write a function to find the perimeter of an ellipse from its length and width.\n    '''\n    return a*(b/5)**2 + 2*a*(b/5)*(b/5) + 2*a*(b/5)*(b/5)**2\ndef perimeter_square_pentagon(a,b):\n    '''\n    Write a function to find the perimeter of a square from its length and width.\n    '''\n    return a*(b/4)**2 + 2*a*(b/4)*(b/4) + 2*a*(b/4)*(b/4)**2\ndef perimeter_square_triangle(a,b):\n    '''\n    Write a function to find the perimeter of a triangle from its length and width.\n    '''\n    return a*(b/3)**2 + 2*a*(b/3)*(b/3) + 2*a*(b/3)*(b/3)**2\ndef perimeter_rectangle_pentagon(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from its length and width.\n    '''\n    return a*(b/5)**2 + 2*a*(b/5)*(b/5) + 2*a*(b/5)*(b/5)**2\ndef perimeter_rectangle_tetra(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from its length and width.\n    '''\n    return a*(b/4)**2 + 2*a*(b/4)*(b/4) + 2*a*(b/4)*(b/4)**2\ndef perimeter_square_pentagon(a,b):\n    '''\n    Write a function to find the perimeter of a square from its length and width.\n    '''\n    return a*(b/4)**2 + 2*a*(b/4)*(b/4) + 2*a*(b/4)*(b/4)**2\ndef perimeter_square_triangle(a,b):\n    '''\n    Write a function to find the perimeter of a triangle from its length and width.\n    '''\n    return a*(b/3)**2 + 2*a*(b/3)*(b/3) + 2*a*(b/3)*(b/3)**2\ndef perimeter_ellipse_pentagon(a,b):\n    '''\n    Write a function to find the perimeter of an ellipse from its length and width.\n    '''\n    return a*(b/2)**2 + 2*a*("
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    side = a[0]\n    side1 = a[1]\n    side2 = a[2]\n    side3 = a[3]\n    side4 = a[4]\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (4*(math.pi)*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    h = a/2\n    # divide by 2 because it makes a square\n    # then by 2 because of the square\n    return math.sqrt(h*(h-1)*(h-2)*(h-3))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #defines for the perimeter of the pentagon\n    p=0\n    #loops through each side\n    for i in range(0,4):\n        #calculates the perimeter of each side of the pentagon\n        p=p+(4*a)**2\n    #returns the value\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides= a[0:2]\n    side1=a[2]\n    side2=a[4]\n    side3=a[6]\n    side4=a[8]\n    side5=a[10]\n    side6=a[12]\n    side7=a[14]\n    side8=a[16]\n    \n    perimeter1=math.sqrt((side1**2)+ (side2**2)+ (side3**2)+ (side4**2)+ (side5**2)+ (side6**2)+ (side7**2)+ (side8**2))\n    perimeter2=math.sqrt((side3**2)+ (side4**2)+ (side5**2)+ (side6**2)+ (side7**2)+ (side8**2))\n    perimeter3=math.sqrt((side4**2)+ (side5**2)+ (side6**2)+ (side7**2)+ (side8**2))\n    perimeter4=math.sqrt((side5**2)+ (side6**2)+ (side7**2)+ (side8**2))\n    perimeter5=math.sqrt((side6**2)+ (side7**2)+ (side8**2))\n    perimeter6=math.sqrt((side7**2)+ (side8**2))\n    perimeter7=math.sqrt((side8**2))\n    perimeter8=math.sqrt((side1**2))\n    \n    # if side1+side2+side3+side4+side5+side6+side7+side8 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8\n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8+side8\n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8+side8\n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8+side8\n    # else:\n    #     perimeter=side8+side7+side8+side8+side7+side6+side5+side4+side3+side1\n    \n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8+side8+side7+side6+side5+side4+side3+side1\n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8+side8+side7+side6+side5+side4+side3+side1\n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8+side8+side7+side6+side5+side4+side3+side1\n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8+side8+side7+side6+side5+side4+side3+side1\n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8+side8+side7+side6+side5+side4+side3+side1\n    \n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8+side8+side7+side6+side5+side4+side3+side1\n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8+side8+side7+side6+side5+side4+side3+side1\n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8+side8+side7+side6+side5+side4+side3+side1\n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8+side8+side7+side6+side5+side4+side3+side1\n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4+side3+side1:\n    #     perimeter=side8+side7+side8+side8+side7+side6+side5+side4+side3+side1\n    # elif side1+side2+side3+side4+side5+side6+side7+side8+side8+side7+side6+side5+side4+side3+side1 < side8+side8+side8+side8+side7+side6+side5+side4"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Write your code here\n    return 4*(a**3)-6*(a**2)+6*a\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a%2==0:\n        return math.sqrt(3)\n    else:\n        return 2*(math.sqrt(3) + math.sqrt(3) - 1)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a <= 0:\n        return 0\n    elif a == 1:\n        return 2 * math.pi * (4 * (a - 1) + 1)\n    elif a == 2:\n        return 2 * math.pi * (3 * (a - 2) + 2)\n    else:\n        return a * math.pi * (6 * (a - 3) + 2)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Write your code here.\n    a = int(a)\n    #print(a)\n    #the number of sides of a regular pentagon\n    sides = int(a/4)\n    #print(sides)\n    #the side of a regular pentagon\n    side = a/2\n    #print(side)\n    return side * sides + side * sides * 3\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if type(s)!= str:\n        raise TypeError(\"s must be a string\")\n    n = len(s)\n    if n <= 2:\n        return s.count(s[0])\n    \n    count = [s.count(x) for x in s]\n    count.sort()\n    if count[-1] == count[-2]:\n        return 0\n    elif count[-1] > count[-2]:\n        return 1 + count[-1] - count[-2]\n    else:\n        return 1 + count[-2] - count[-1]\n    "
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    word = s.split()\n    occurance = word.count(s)\n    return occurance\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = 0\n    for i in s:\n        if i =='std':\n            counter += 1\n    return counter\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occur = 0\n    for char in s:\n        if char =='std':\n            occur += 1\n    return occur\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = {}\n    \n    #Iterate through the string and increment the count\n    for i in range(len(s)):\n        if s[i] in counter:\n            counter[s[i]] += 1\n        else:\n            counter[s[i]] = 1\n    return counter\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = dict()\n    for letter in s:\n        if letter in counter:\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n    for letter in counter:\n        if counter[letter] > 0:\n            counter[letter] = counter[letter]/len(s)\n    return counter"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for c in s:\n        if c == 'l' or c == 'L':\n            count += 1\n        if c == 'd' or c == 'D':\n            count += 1\n        if c == 'c' or c == 'C':\n            count += 1\n        if c == 'o' or c == 'O':\n            count += 1\n        if c == 'f' or c == 'F':\n            count += 1\n        if c == 'i' or c == 'I':\n            count += 1\n        if c == 'n' or c == 'N':\n            count += 1\n        if c =='s' or c == 'S':\n            count += 1\n        if c == 't' or c == 'T':\n            count += 1\n        if c == 'u' or c == 'U':\n            count += 1\n        if c == 'r' or c == 'R':\n            count += 1\n        if c == 'w' or c == 'W':\n            count += 1\n        if c == 'y' or c == 'Y':\n            count += 1\n        if c == 'x' or c == 'X':\n            count += 1\n        if c == 'q' or c == 'Q':\n            count += 1\n        if c == 'z' or c == 'Z':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurence_dict={}\n    temp_occurence_dict={}\n    counter=0\n    for i in s:\n        if i==\"std\":\n            counter+=1\n            if i in temp_occurence_dict:\n                temp_occurence_dict[i]+=1\n            else:\n                temp_occurence_dict[i]=1\n    return(temp_occurence_dict)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurrence_count = dict()\n    \n    for i in s:\n        if i not in occurrence_count.keys():\n            occurrence_count[i] = 1\n        else:\n            occurrence_count[i] += 1\n    \n    return occurrence_count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    my_list = []\n    for each in test_tuple:\n        try:\n            each_type = type(each)\n            my_list.append(each_type)\n        except TypeError:\n            print(\"{} has the wrong type\".format(each))\n            return False\n    if len(my_list)!= len(set(my_list)):\n        print(\"List is not unique\")\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i) is not tuple:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = list(tuple(test_tuple))\n    type_dict = {'int':int, 'float':float,'str':str, 'list':list, 'dict':dict}\n    for i in type_list:\n        if type_dict.get(i.dtype):\n            pass\n        else:\n            raise TypeError(\"type of {} should be {}\".format(i,type_dict.get(i.dtype)))\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = [type(item) for item in test_tuple]\n    if len(test_tuple)!= len(types):\n        raise Exception('tuple does not contain the same amount of data types')\n    for index, item in enumerate(test_tuple):\n        if types[index]!= type(item):\n            raise Exception('tuple does not contain the same data types')\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)!= 2:\n        raise ValueError(\"Invalid tuple. Got {} values instead of 2\".format(len(test_tuple)))\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = ['float64', 'float32', 'int64', 'int32', 'int16', 'int8']\n    for t in types:\n        if len(test_tuple[1])!= len(test_tuple[1]):\n            return False\n        else:\n            if type(test_tuple[1][0])!= type(test_tuple[1][0]):\n                return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_list = []\n    for element in test_tuple:\n        if type(element)!= type(1):\n            return False\n        else:\n            tuple_list.append(element)\n    return tuple_list\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Write your code here\n    tuple_1 = test_tuple[0]\n    tuple_2 = test_tuple[1]\n    tuple_3 = test_tuple[2]\n    if isinstance(tuple_1, dict) and isinstance(tuple_2, dict) and isinstance(tuple_3, dict):\n        if tuple_1['data_type']!= tuple_2['data_type'] or tuple_2['data_type']!= tuple_3['data_type']:\n            return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    # get tuple size\n    size = len(test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    diction = {}\n    for i in test_tuple:\n        if(type(i) is not int):\n            raise TypeError(\"Object of type {} is not an integer\".format(type(i)))\n        else:\n            if(i not in diction):\n                diction[i] = 0\n            diction[i] = diction[i] + 1\n    return diction\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    for i in range(n):\n        if arr[i] == x:\n            return False\n    for i in range(n):\n        if i == n/2:\n            if arr[i] > x:\n                return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    for j in range(n):\n        if arr[j] == x:\n            i = j\n    return arr[i] == x\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    pivot = arr[(n - 1) // 2]\n    for i in range(n):\n        if arr[i] == pivot:\n            return True\n        elif arr[i] > pivot:\n            return False\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # base case\n    if n == 0 or n == 1:\n        return True\n    \n    # if the array is empty, return false.\n    if n < 0:\n        return False\n    \n    # find the highest element in the array.\n    highest = -1\n    for i in range(n):\n        if arr[i] > highest:\n            highest = arr[i]\n    \n    # find the two elements that have the highest value.\n    # one of them is the array.\n    # other of them is the highest element.\n    low = 0\n    high = n\n    for i in range(n):\n        if arr[i] == highest:\n            low = i\n        elif arr[i] > highest:\n            high = i\n    \n    # check if the two elements have the same value.\n    # if the two elements have the same value, return false.\n    if low == high:\n        return False\n    \n    # if the two elements have the same value, return false.\n    # if the two elements do not have the same value, return true.\n    elif arr[low] == arr[high]:\n        return False\n    \n    # if the two elements have different values, return false.\n    else:\n        return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n-1\n    while (i < j):\n        mid = (i+j)//2\n        if arr[mid] == x:\n            return True\n        if arr[mid] > x:\n            j = mid\n        else:\n            i = mid + 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x == arr[n]:\n        return True\n    if n == 0:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # TODO: Write your code here\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if (arr[mid] == x):\n            return True\n        elif (arr[mid] < x):\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # sort elements of array\n    arr = sorted(arr)\n    # number of occurence\n    n = len(arr)\n    # if no element is majority element return False\n    if n == 0:\n        return False\n    # if element is majority element return True\n    if arr[n // 2] == x:\n        return True\n    # if element is majority element return False\n    return False\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    for i in range(1,n+1):\n        if(i % 2 == 0):\n            set_bits += 1\n    return set_bits\n    "
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bit_count = 0\n    n = int(n)\n    if n < 0:\n        n = -n\n        print('Negative number entered. Returning')\n    else:\n        while n > 0:\n            n = n // 2\n            bit_count += 1\n    return bit_count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # number to be counted in bits \n    number = n \n    # create an empty array of bits \n    bit_array = [0]*16\n    # go through every possible number in the array \n    for i in range(0,16): \n        # check if the i'th bit is 1 \n        if bit_array[i]==1: \n            # go through every possible number 1 \n            # go through every possible number 2 \n            for j in range(0,16): \n                # check if the j'th bit is 1 \n                if bit_array[j]==1: \n                    # if the j'th bit is 1, the i'th bit is 1 \n                    # if the j'th bit is 0, the i'th bit is 0 \n                    # and the i'th bit is 0 \n                    if j==i: \n                        bit_array[j] = bit_array[i] = bit_array[j] = 0\n                    # if the j'th bit is 0, the i'th bit is 0 \n                    # and the i'th bit is 1 \n                    else: \n                        bit_array[j] = bit_array[i] = bit_array[j] = 1\n    # convert bits to string \n    output = ''\n    for i in range(0,16): \n        output += str(bit_array[i]) \n    return output \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s=0\n    for i in str(n):\n        if int(i)==1:\n            s=s+1\n    print(\"Number of set bits =\",s)\n    return s\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return n//2\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    def count_Set_Bits(n): \n        count = 0 \n        while n: \n            if n & 1: \n                count += 1\n            n >>= 1\n        return count \n    \n    # The following is the main logic \n    # counting the number of set bits in a given number \n    return count_Set_Bits(n)"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = bin(n)[2:]\n    return len(s)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bits = 0\n    while n > 0:\n        if n & 1 == 1:\n            bits += 1\n        n >>= 1\n    return bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    for i in range(0,n):\n        if(n%2==0):\n            count=count+1\n    return count\ndef count_Bits_Dictionary(d):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a dictionary (dictionary).\n    '''\n    count=0\n    for i in d.keys():\n        if(d[i]!=0):\n            count=count+1\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    count=0\n    odd_indices=[]\n    for i in range(len(str)):\n        if int(str[i])%2==1:\n            count+=1\n        else:\n            continue\n    if count==0:\n        return \"\"\n    else:\n        while count!=0:\n            odd_indices.append(str[count-1])\n            count-=1\n        for j in range(len(odd_indices)-1,0,-1):\n            if odd_indices[j]==\"1\":\n                del odd_indices[j]\n    return \"\".join(odd_indices)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for char in str:\n        if char % 2 == 1:\n            str = str.replace(char, '')\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Write your code here\n    return str.replace('1', '')\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.lower()\n    odd = []\n    for i in str:\n        if str.count(i) % 2 == 1:\n            odd.append(i)\n    return ''.join(odd)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    i = 0\n    while i < len(str):\n        if (str[i]%2)==1:\n            str = str[0:i] + str[i+1:]\n        i += 1\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace(str[::2], '')\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return(str.lower().replace(' ','',2).replace('-',''))\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_string = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_string.append(str[i])\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace(str[0], '')\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str1 = str.lower()\n    odd_values = []\n    for x in str1:\n        if int(x) % 2 == 1:\n            odd_values.append(x)\n    return ''.join(odd_values)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and b > c: \n        return b\n    elif a > b and a > c: \n        return c \n    else: \n        return a\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b == c: \n        return a \n    elif a < b and b < c: \n        return b\n    elif a < c and c < b: \n        return c\n    elif a > b and b > c: \n        return b\n    elif a > c and c > b: \n        return c \n    else: \n        return 0 \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        minimum = a\n    elif b<a and b<c:\n        minimum = b\n    else:\n        minimum = c\n    return minimum\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        elif c < b:\n            return c\n        elif a < c:\n            return c\n    else:\n        if b < a:\n            return b\n        elif b < c:\n            return c\n        elif a < c:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    elif c < a and c < b:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a==b==c:\n        return a\n    elif a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    else:\n        if b>c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c: \n        return a \n    elif b<a and b<c:\n        return b \n    else: \n        return c \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b + c:\n        if a < b:\n            return a\n        else:\n            return b\n    elif a > b + c:\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return l<=n<=r<=2**n\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # your code goes here\n    bits=0\n    for i in range(n):\n        if (n>>i)&1 == 1:\n            bits+=1\n    if bits == 0:\n        print(\"NO\")\n        return\n    for i in range(n):\n        if (n>>i)&1 == 1:\n            if n & (2**i):\n                print(\"YES\")\n                return\n        else:\n            if n & (2**i):\n                print(\"YES\")\n                return\n    print(\"NO\")\n    return\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    output = []\n    for i in range(0,n):\n        if (n-i)<=l and n-i>=r:\n            output.append(1)\n        else:\n            output.append(0)\n    return output\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(l>=n and r<=n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #all_Bits_Set(n,l,r)\n    \n    if n<=0:\n        return False\n    if l<=n<=r:\n        return True\n    for i in range(n-l+1):\n        if not all_Bits_Set(n-i,l,r):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i = 0\n    j = 0\n    if(n<=l or r<=n):\n        return False\n    if(n==l):\n        return l==r\n    while(i<=n):\n        if((r>>i)&1):\n            if((r>>j)&1):\n                return False\n        j=j+1\n        i=i+1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x = n\n    i = 0\n    while x:\n        # if x & l:\n        #     i = i + 1\n        if x & r:\n            i = i + 1\n        x = x >> 1\n    return i\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def bit_in_range(n, l, r):\n        '''\n        function to check the bits of the given range using the given n and l and r parameters.\n        '''\n        while n < r:\n            n = n + (n & l) \n        return n\n    \n    def check_set(n, l, r):\n        '''\n        function to check the bits in the given range using the given n and l and r parameters.\n        '''\n        while n > l:\n            n = n - (n & l) \n        return n\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l_bits = int(l,2)\n    r_bits = int(r,2)\n    A = (l_bits<<1) & n\n    B = (r_bits<<1) & n\n    if (B & A) == 0:\n        return True\n    return False\n    \n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l <= n and r >= n:\n        for i in range(n):\n            if (i < n and i >= l and i >= r):\n                return 0\n    return -1\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #your code here\n    for i in range(0, n):\n        if arr[i] > 0:\n            arr[i] = -arr[i]\n        elif arr[i] < 0:\n            arr[i] = +arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # TODO: Write the function\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # your code here\n    i = 0\n    while i < len(arr):\n        if arr[i] < 0:\n            arr[i] *= -1\n        i += 1\n    i = 0\n    while i < len(arr):\n        if arr[i] > n:\n            arr[i] = n\n        i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if not (0 <= n <= len(arr)):\n        print(\"Invalid input! n must be between 0 and\", len(arr)-1)\n        return None\n    elif n == 0:\n        return None\n    elif n == len(arr):\n        return arr\n    else:\n        new_arr = []\n        for i in range(n):\n            if arr[i] > 0:\n                new_arr.append(arr[i])\n            else:\n                new_arr.append(arr[i]*-1)\n        return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    n=int(n)\n    arr_len=len(arr)\n    if arr_len<n:\n        return arr\n    elif n==0:\n        return arr\n    elif n==1:\n        return np.concatenate((arr[0:1],arr[1:]))\n    elif n>1:\n        arr_reordered=np.concatenate((arr[0:n],arr[n:],arr[n:n]))\n        return np.concatenate((arr[0:n],arr_reordered[n-1::n],arr_reordered[n-1::n]))\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = np.asarray(arr)\n    arr = arr[arr[:,0].argsort()]\n    arr = np.concatenate((arr, np.arange(1,arr.shape[0]+1).reshape(arr.shape[0],1)), axis = 1)\n    return np.concatenate((arr, np.zeros((arr.shape[0],1))), axis = 1)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a 2D array\n    arr = np.array(arr)\n    # flip array\n    arr = arr[::-1]\n    # create variables\n    re_arr = 0\n    # get the length\n    l = arr.shape[0]\n    # iterate over the first n elements\n    for i in range(0, n):\n        # check if positive element is missing in the array\n        if arr[i] < 0:\n            # get the index of the positive element\n            pos_idx = np.argwhere(arr == arr[i])[0][0]\n            # put the negative element in the negative position\n            arr[pos_idx] = -arr[pos_idx]\n            # add the negative element to the array\n            re_arr += arr[pos_idx]\n            # remove the positive element from the array\n            arr = np.delete(arr, pos_idx, 0)\n        else:\n            # get the index of the negative element\n            neg_idx = np.argwhere(arr == -arr[i])[0][0]\n            # put the positive element in the positive position\n            arr[neg_idx] = arr[neg_idx] + arr[i]\n            # add the positive element to the array\n            re_arr += arr[neg_idx]\n            # remove the negative element from the array\n            arr = np.delete(arr, neg_idx, 0)\n        # check if the array was modified\n        if len(arr)!= 0:\n            # get the element at that index\n            item = arr[i]\n            # determine the size\n            size = len(arr)\n            # if the item is positive\n            if item >= 0:\n                # add it to the array\n                arr[i] = item + size * re_arr\n            # if the item is negative\n            else:\n                # add it to the array\n                arr[i] = -item - size * re_arr\n    # return the array\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # TODO: Write the function\n    print(\"Re-arranging array using re_arrange_array()\")\n    arr = np.array(arr)\n    arr_rearranged = re_arrange_array_arrays(arr, n)\n    return arr_rearranged\n    \ndef re_arrange_array_arrays(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    print(\"Re-arranging array arrays using re_arrange_array_arrays()\")\n    arr = np.array(arr)\n    new_arr = []\n    for i in range(n):\n        new_arr.append(0)\n    for i in range(n):\n        new_arr[i] = arr[i]\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) < n:\n        arr.extend([-1 for i in range(n - len(arr))])\n    elif len(arr) < n:\n        arr = arr[:n]\n    \n    arr_res = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i] *= -1\n        if arr[i] < 0 and arr[i]!= 0:\n            arr_res.append(arr[i])\n    return arr_res\n    \ndef change_order(arr):\n    '''\n    Write a function that takes in an array and returns it modified in place so that all the negative numbers appear after positive ones.\n    '''\n    while len(arr) > 1:\n        arr = re_arrange_array(arr, len(arr))\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return [arr[i] if arr[i] > 0 else arr[i]*(n//arr[i]) for i in range(len(arr))]\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('.','')\n    str1=str1.replace(',',' ')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('\"',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace('&',' ')\n    str1=str1.replace('*',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('+',' ')\n    str1=str1.replace('.','')\n    str1=str1.replace(' ','')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('\"',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace('&',' ')\n    str1=str1.replace('*',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('+',' ')\n    str1=str1.replace('.','')\n    str1=str1.replace(' ','')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('\"',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace('&',' ')\n    str1=str1.replace('*',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('+',' ')\n    str1=str1.replace('.','')\n    str1=str1.replace(' ','')\n    str1=str1.replace('!',' ')\n    str1=str1.replace('\"',' ')\n    str1=str1.replace('?',' ')\n    str1=str1.replace('&',' ')\n    str1=str1.replace('*',' ')\n    str1=str1.replace('(',' ')\n    str1=str1.replace(')',' ')\n    str1=str1.replace('+',' ')\n    str1=str1.replace('.','')\n    str1=str1.replace(' ','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1.replace(' ','')\n    str1.replace('\\n','')\n    str1.replace('\\r','')\n    str1.replace('\\t','')\n    str1.replace(' ','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(char,'*')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # return a copy of the string\n    str2 = str1.copy()\n    for i,j in enumerate(str2):\n        if j =='':\n            str2[i] = char\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Replace blank spaces with the character\n    for char in str1:\n        if char =='':\n            str1 = str1.replace(char,char.upper())\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char in'':\n        return str1.replace(char,' ')\n    else:\n        return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1.replace(' ', char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # This is a very simple attempt at a brute force approach\n    new_str = str1.replace(\" \", char)\n    return new_str\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return [item for item, count in heapq.nlargest(n, list1)]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    h = []\n    for i in range(n):\n        heapq.heappush(h,list1[i])\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    arr = []\n    for i in range(0,n):\n        arr.append(list1.pop(0))\n    return arr\n    \ndef iterative_nnum(list1):\n    '''\n    Write a function that takes in a list and returns a list of the n largest items from the list.\n    '''\n    arr = []\n    for i in range(len(list1)):\n        arr.append(list1.pop(0))\n    return arr\n    \ndef heapify(arr,n,i):\n    '''\n    Take a list as a parameter.\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    while i>0 and arr[i][0]<arr[0][0]:\n        arr[i][0]=arr[0][0]\n        arr[0][0]=i\n        i=i-1\n    return arr\n    \ndef merge(arr1,arr2):\n    '''\n    Take a list as a parameter.\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    arr3 = []\n    for i in range(len(arr1)):\n        arr3.append(arr1[i][0])\n        \n    for i in range(len(arr2)):\n        arr3.append(arr2[i][0])\n        \n    arr3.sort()\n    \n    for i in range(len(arr3)):\n        arr3[i]=arr3[i]+arr2[i][1]\n    return arr3\n    \ndef merge_sort(arr):\n    '''\n    Take a list as a parameter.\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    if len(arr)==1:\n        return arr\n    \n    mid = len(arr)//2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left,right)\n    \ndef merge_sort_heap(arr):\n    '''\n    Take a list as a parameter.\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    if len(arr)==1:\n        return arr\n    \n    size=len(arr)\n    mid=size//2\n    \n    l=arr[:mid]\n    r=arr[mid:]\n    l=merge_sort_heap(l)\n    r=merge_sort_heap(r)\n    \n    arr1=[]\n    arr2=[]\n    \n    for i in l:\n        arr1.append(i)\n    \n    for i in r:\n        arr2.append(i)\n    \n    return merge(arr1,arr2)\n    \ndef merge_sort_heap_3(arr):\n    '''\n    Take a list as a parameter.\n    Write a function that takes in a list and returns a list containing the n largest items from the list.\n    '''\n    if len(arr)==1:\n        return arr\n    \n    size=len(arr)\n    mid=size//2\n    \n    l=arr[:mid]\n    r=arr[mid:]\n    \n    l=merge_sort_heap_3(l)\n    r=merge_sort_heap_3(r)\n    \n    arr1=[]\n    arr2=[]\n    \n    for i in l:\n        arr1.append(i)\n    \n    for i in r:\n        arr2.append(i)\n    \n    return merge(arr1,arr2)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    mylist=[]\n    for i in range(0,n):\n        heapq.heappush(mylist,list1[i])\n    heapq.heapify(mylist)\n    while(len(mylist)!=n):\n        heapq.heappop(mylist)\n    return mylist\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #create heap\n    heapq.heapify(list1)\n    #loop through list\n    for i in range(n):\n        heapq.heappop(list1)\n        #add to list\n    heapq.heappush(list1,heapq.heappop(list1)+(len(list1)))\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    return_list = []\n    for i in range(0,n):\n        heapq.heappush(heap,list1[i])\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1, key=lambda k:k[n], reverse=True)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n    return [heapq.heappop(heap) for i in range(n)]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1, reverse=True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n    return [heapq.heappop(heap) for i in range(n)]\n    \n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # find the bottom area\n    h = h - h/2\n    A = 2*(r+h)\n    # find the area of the outer surface of the cylinder\n    return (2*A)/(2*r*np.pi)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(\"Rectangle with base radius r, height h, is: \" + str(r) + \" x \" + str(h))\n    import math\n    area_of_circle = math.pi * math.pow(r,2)\n    return area_of_circle\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    L = 0.5 * h*r**2 #cylinder length\n    S = 1 - (1 - r**2)/(2*L) #surface area\n    return S\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return h*(np.pi/4)*(4/3)**(1/3)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #surface area of the cylinder\n    a = 4 * (r**2)\n    #total area of the cylinder\n    b = 2 * h * (r**2)\n    #volume of the cylinder\n    c = 4 * np.pi * (r**2)\n    #calculation of the volume of the cylinder\n    d = b * np.pi * (r**2)\n    #calculation of the surface area of the cylinder\n    e = b * (c / d)\n    #calculation of the volume of the cylinder\n    f = a / (e * np.pi)\n    return f"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Fill in the missing parts\n    return 0.5*(r**2 + (h/2)**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(\"\\n***\" + \"LATERAL SURFACE AREA\" + \"***\")\n    d = 6 * np.pi * r\n    area = d * (h * h + r * r * (1 - r ** 2) * h)\n    print(\"The surface area of the cylinder is \" + str(area))\n    return area\ndef cube(r,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    print(\"\\n***\" + \"VOLUME\" + \"***\")\n    area = 0.5 * r ** 3 * h\n    volume = 4 * np.pi * r * r * h\n    print(\"The volume of the cube is \" + str(volume) + \" cm\u00b3\")\n    return volume\ndef cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    print(\"\\n***\" + \"VOLUME\" + \"***\")\n    area = 2 * np.pi * r * r * h\n    volume = 0.5 * r ** 3 * h\n    print(\"The volume of the cylinder is \" + str(volume) + \" cm\u00b3\")\n    return volume\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a = h**2\n    b = 2*r*h**2\n    c = 4*np.pi*r**2\n    area = a + b + c\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    side = l * l * l\n    volume = side * 6\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    volume = 0\n    \n    for i in range(l):\n        volume += 4 * i**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = 0\n    for i in range(1, l + 1):\n        vol += 4 * i * i * i\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    from math import sqrt\n    side = l * l\n    volume = side * 4 * side * (side - 1)\n    print(volume)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(\"Volume of a cube is:\", l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Get the cube side length\n    side_length = l\n    # Calculate the volume of the cube\n    volume = side_length**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l * l * l * l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    cube = math.sqrt(l**3)\n    return cube\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    a = l*l\n    print(a)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(n):\n        if i % 2 == 0:\n            t = bin(i)[2:]\n            while len(t) < n:\n                t = '0' + t\n            b = int(t, 2)\n            even_bit = bin(b)[2:]\n            while len(even_bit) < n:\n                even_bit = '0' + even_bit\n    return even_bit\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0: \n        if n%2 == 0: \n            n = n//2 \n        else: \n            n = 3*n + 1\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit_set = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even_bit_set += 1\n    print(\"even_bit_set is \",even_bit_set)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = []\n    while n: \n        if n & 0x10 == 0: \n            even_bits.append(1) \n            n &= 0x01\n        else: \n            even_bits.append(0) \n            n &= 0x01\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    sum_even = 0\n    if n==0: \n        return 0\n    while n>0: \n        sum_even+=n%2\n        n=n//2\n    if sum_even==0: \n        return 1\n    else: \n        return 0\ndef odd_bit_set_number(n): \n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    sum_odd = 0\n    if n==0: \n        return 0\n    while n>0: \n        sum_odd+=n%2\n        n=n//2\n    if sum_odd==0: \n        return 1\n    else: \n        return 0\ndef sum_of_bits(n): \n    '''\n    Write a python function to sum all the bits of a given number.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return 1\n    else: \n        return sum_of_bits(n-1)+1\ndef sum_of_bits_without_numbers(n): \n    '''\n    Write a python function to sum all the bits of a given number without numbers.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return 1\n    else: \n        return sum_of_bits(n-1)+1\ndef sum_of_bits_with_negative_numbers(n): \n    '''\n    Write a python function to sum all the bits of a given number with negative numbers.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return 1\n    else: \n        return sum_of_bits(n-1)+1\ndef sum_of_bits_without_negative_numbers(n): \n    '''\n    Write a python function to sum all the bits of a given number without negative numbers.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return 1\n    else: \n        return sum_of_bits(n-1)+1\ndef get_number_of_bits(n): \n    '''\n    Write a python function to get the number of bits of a given number.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return 1\n    else: \n        return get_number_of_bits(n-1)+1\ndef get_odd_bits(n): \n    '''\n    Write a python function to get the number of bits of a given number.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return 1\n    else: \n        return get_odd_bits(n-1)+1\ndef get_even_bits(n): \n    '''\n    Write a python function to get the number of bits of a given number.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return 1\n    else: \n        return get_even_bits(n-1)+1\ndef get_even_number_of_bits(n): \n    '''\n    Write a python function to get the number of bits of a given number.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return 1\n    else: \n        return get_even_number_of_bits(n-1)+1\ndef get_number_of_bits_of_numbers(n): \n    '''\n    Write a python function to get the number of bits of a given number.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return 1\n    else: \n        return get_number_of_bits_of_numbers(n-1)+1\ndef get_bit_string(n): \n    '''\n    Write a python function to get a string representation of a given number.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return '0'\n    else: \n        return '1'\ndef get_number_of_bits_of_numbers_of_strings(n): \n    '''\n    Write a python function to get a string representation of a given number.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return '0'\n    else: \n        return get_number_of_bits_of_numbers_of_strings(n-1)+1\ndef get_string_of_odd_bits(n): \n    '''\n    Write a python function to get a string representation of a given number.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return '0'\n    else: \n        return get_string_of_odd_bits(n-1)+'1'\ndef get_string_of_even_bits(n): \n    '''\n    Write a python function to get a string representation of a given number.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return '0'\n    else: \n        return get_string_of_even_bits(n-1)+'1'\ndef get_string_of_even_number_of_bits(n): \n    '''\n    Write a python function to get a string representation of a given number.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return '0'\n    else: \n        return get_string_of_even_number_of_bits(n-1)+'1'\ndef get_string_of_negative_numbers(n): \n    '''\n    Write a python function to get a string representation of a given number.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return '0'\n    else: \n        return get_string_of_negative_numbers(n-1)+'1'\ndef get_string_of_negative_numbers_without_numbers(n): \n    '''\n    Write a python function to get a string representation of a given number without numbers.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return '0'\n    else: \n        return get_string_of_negative_numbers(n-1)+'1'\ndef get_string_of_negative_numbers_with_negative_numbers(n): \n    '''\n    Write a python function to get a string representation of a given number without numbers.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return '0'\n    else: \n        return get_string_of_negative_numbers(n-1)+'1'\ndef get_string_of_bits(n): \n    '''\n    Write a python function to get a string representation of a given number.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return '0'\n    else: \n        return get_string_of_bits(n-1)+'1'\ndef get_string_of_bits_without_numbers(n): \n    '''\n    Write a python function to get a string representation of a given number without numbers.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return '0'\n    else: \n        return get_string_of_bits_without_numbers(n-1)+'1'\ndef get_string_of_bits_with_negative_numbers(n): \n    '''\n    Write a python function to get a string representation of a given number with negative numbers.\n    '''\n    if n<0: \n        return 0\n    elif n==0: \n        return '0'\n    else: \n        return get_string_of_bits_with_negative_numbers(n-1)+'1'\ndef get_string_of_even_bits(n): \n    '''\n    Write a python function to get a string representation of "
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    output = ''\n    for i in range(0, n, 2):\n        if (i + 1) % 2 == 0:\n            output += '0'\n        else:\n            output += '1'\n    return output\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n=n&(n^1)\n    # print(\"n=\",n)\n    while n!=0: \n        # print(\"n=\",n)\n        if n&1==0:\n            n=n^1\n            # print(\"n=\",n)\n        else:\n            n=n&1\n            # print(\"n=\",n)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    number = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            number = number | 1\n    return number\n    \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    number = bin(n)\n    number = list(number)\n    number.reverse()\n    for i in range(len(number)):\n        if number[i] == '1':\n            number[i] = '0'\n    return int(''.join(number),2)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    tmp = n\n    if n < 0:\n        n = n + 2 ** 32\n    while tmp:\n        if tmp & 1:\n            n = n ^ (n >> 1)\n        tmp = tmp >> 1\n    return n\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter_dict = {}\n    for x in test_list:\n        counter_dict[x[0]] = counter_dict.get(x[0], 0) + 1\n    return counter_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter_dict = {}\n    for tuple in test_list:\n        counter_dict[tuple[0]] = counter_dict.get(tuple[0], 0) + 1\n    return counter_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # your code here\n    dic = {}\n    for tup in test_list:\n        if tup[0] in dic.keys():\n            dic[tup[0]] += 1\n        else:\n            dic[tup[0]] = 1\n    return dic\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # YOUR CODE HERE\n    dict = {}\n    for tup in test_list:\n        if tup not in dict:\n            dict[tup] = 1\n        else:\n            dict[tup] += 1\n    return dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter_dict = Counter(test_list)\n    return counter_dict\ndef check_occurence(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter_dict = Counter(test_list)\n    return counter_dict"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # initialize an empty dictionary\n    occ_dict = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict_to_count = {}\n    for tuple in test_list:\n        if tuple in dict_to_count.keys():\n            dict_to_count[tuple] += 1\n        else:\n            dict_to_count[tuple] = 1\n    return dict_to_count\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {tuple(sorted(t)):t.count(tuple(sorted(t))) for t in test_list}\n    \ndef solve(L,n,k):\n    '''\n    Write a function that takes in a list of tuples and returns the number of times each tuple appears in the list.\n    '''\n    return Counter(sorted(t for t in L if t[0]==t[1]))[sorted(t for t in L if t[0]==t[1])][0:k]\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = Counter(test_list)\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple] = result.get(tuple,0) + 1\n    return result\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #Write your code here\n    n = 0\n    for i in range(1,len(str)):\n        if str[i] == str[i-1]:\n            n += 1\n    return n\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i:i+2] == str[i:i+2].replace(\" \",\"\"):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num_sub = 0\n    temp = []\n    for i in range(len(str)):\n        if str[i] == str[i+1]:\n            if len(str[i:i+2]) > 2:\n                temp.append(i)\n        else:\n            if len(str[i:i+3]) > 2:\n                temp.append(i)\n    for j in range(len(temp)):\n        if str[temp[j]] == str[temp[j+1]]:\n            if len(str[temp[j]:temp[j+2]]) > 2:\n                num_sub += len(str[temp[j]:temp[j+2]])\n    return num_sub\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    count_str = \"\"\n    l = len(str)\n    for i in range(0,l):\n        if str[i] == str[i+1]:\n            count += 1\n        else:\n            if count > 0:\n                count_str += str[i]\n                count = 0\n    if count!= 0:\n        count_str += str[i]\n    return count_str\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            num += 1\n    return num\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    c = 0\n    if len(str) <= 1:\n        return c\n    \n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            c+=1\n        else:\n            break\n    return c\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Write your code here\n    import collections\n    # Create a set to hold the letters in the string\n    temp_set = set(str)\n    # Initialize an empty dictionary to store the count\n    count = collections.Counter(temp_set)\n    # Initialize an empty list to store the result\n    count_list = []\n    # Loop through the string\n    for i in range(len(str)):\n        # Check if there's a duplicate letter in the string\n        if count.get(str[i]):\n            # Increase the count of the duplicate letter\n            count[str[i]] += 1\n        else:\n            # If there is no duplicate letter, add one to the count\n            count[str[i]] = 1\n    # If there are no duplicates in the string, return the count\n    if len(count) == len(str):\n        return count_list\n    # Return all the non-empty substrings\n    return count_list\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code goes here\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if(str[i:j+1] == str[i:j+1][::-1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    result = 0\n    for i in range(1, len(str)+1): \n        for j in range(len(str)-i+1):\n            if str[j:j+i] == str[j+i:j+i+2]:\n                result += 1\n    return result\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    #Your code here\n    if (n==2 and m==3):\n        return 3\n    if (n>=2 and m<=3):\n        if(m==2):\n            return 2\n        if(m==3):\n            return 3\n        if(m==4):\n            return 4\n        return get_total_number_of_sequences(n,m-1)+get_total_number_of_sequences(n-1,m-2)\n    else:\n        return -1\n    \nprint(get_total_number_of_sequences(6,4))\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    num_sequences = 0\n    n_seqs = [x**2 for x in range(2,m+1)]\n    for i in n_seqs:\n        for j in n_seqs:\n            if i + j <= n:\n                num_sequences += 1\n    return num_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sum = 0\n    for n in range(1, n + 1):\n        total_sum += (m - 1) * (n - 1)\n    return total_sum\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    m1 = 1\n    m2 = 1\n    n1 = 1\n    n2 = 1\n    for n1 in range(1,n+1):\n        for n2 in range(1,n+1):\n            total += (m2**(n1-n2)) * n1 * n2\n    \n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == n == 0:\n        return 0\n    elif m == 0:\n        return 0\n    elif m == 1:\n        return 2**n\n    elif n == 1:\n        return m\n    elif n == 2:\n        return m + 2**(n-1)\n    else:\n        total = 0\n        for i in range(m,n):\n            total += get_total_number_of_sequences(i,n-1)\n        return total\n    \ndef is_prime(n):\n    '''\n    A prime number is a number that has no two numbers that are divisible by it.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \ndef is_twos_comp(n):\n    '''\n    A 2 will always be a prime number.\n    A 2 will always be a prime number if, as well as, if it has a prime factor.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2, n):\n            if i * i == n:\n                return True\n        return False\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m * n * (m + n) / 2\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # TODO: Add your code here!\n    return \n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_num = 0\n    m = m\n    n = n\n    for x in range(m, n):\n        if(x%2 == 0):\n            total_num += 1\n    return total_num\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    while total_sequences <= n:\n        if m == 0:\n            return total_sequences\n        elif m <= 0:\n            return total_sequences\n        elif n <= 0:\n            return total_sequences\n        elif m + n == n:\n            return total_sequences\n        elif m + n > n:\n            m = m - (n - 1)\n            total_sequences += 1\n    else:\n        total_sequences += 1\n        \ndef get_number_of_full_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and returns the number of full sequences possible.\n    '''\n    total_full_sequences = 0\n    while total_full_sequences <= n:\n        if m == 0:\n            return total_full_sequences\n        elif m <= 0:\n            return total_full_sequences\n        elif n <= 0:\n            return total_full_sequences\n        elif m % 2 == 1:\n            return total_full_sequences + get_number_of_full_sequences(m - 1, n)\n        elif m % 2 == 0:\n            return total_full_sequences + get_number_of_full_sequences(m - 1, n - 1)\n    else:\n        total_full_sequences += 1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list(list1) + list(list2)"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(len(list1)-1)\n    list2.pop(len(list2)-1)\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    for i in range(len(list1)):\n        list1[i] = list2[i]\n        \n    return list"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if list1==[]:\n        return list2\n    else:\n        list1.pop()\n        list2.pop()\n        list2.extend(list1)\n        return list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2[-1]\n    list2[-1]=list1[-1]\n    return list1,list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    \n    return list1\n    \ndef replace_list_2(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    \n    return list1\n    \ndef replace_list_3(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list2[-1] = list1[-1]\n    \n    return list2\n    \ndef replace_list_4(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list2.append(list1[-1])\n    \n    return list2\n    \ndef replace_list_5(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    \n    return list1\n    \ndef replace_list_6(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.append(list1[-1])\n    \n    return list1\n    \ndef replace_list_7(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2[-1] = list1[-1]\n    \n    return list1\n    \ndef replace_list_8(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(0)\n    list2.append(list1[-1])\n    \n    return list1\n    \ndef replace_list_9(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list2.pop(0)\n    list1[-1] = list2[-1]\n    \n    return list1\n    \ndef replace_list_10(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.append(list1[-1])\n    \n    return list1\n    \ndef replace_list_11(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list2.append(list1[-1])\n    \n    return list1\n    \ndef replace_list_12(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list2.append(list1[-1])\n    \n    return list1\n    \ndef replace_list_13(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    \n    return list1\n    \ndef replace_list_14(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    \n    return list1\n    \ndef replace_list_15(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list2.pop(-1)\n    list1[-1] = list2[-1]\n    \n    return list1\n    \ndef replace_list_16(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list2.pop(-1)\n    \n    return list1\n    \ndef replace_list_17(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.append(list1[-1])\n    \n    return list1\n    \ndef replace_list_18(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    \n    return list1\n    \ndef replace_list_19(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.append(list1[-1])\n    \n    return list1\n    \ndef replace_list_20(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2[-1] = list1[-1]\n    \n    return list1\n    \ndef replace_list_21(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list2.append(list1[-1])\n    \n    return list1\n    \ndef replace_list_22(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list2.append(list1[-1])\n    \n    return list1\n    \ndef replace_list_23(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    \n    return list1\n    \ndef replace_list_24(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list2.pop(-1)\n    \n    return list1\n    \ndef replace_list_25(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list2.pop(-1)\n    \n    return list1\n    \ndef replace_list_26(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    \n    return list1\n    \ndef replace_list_27(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first lis"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #Write your code here\n    #TODO-1: This is the only TODO.\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    l = len(list1)\n    for i in range(l-1,len(list1)):\n        list1[i] = list2[i]\n    return list1\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    return list1,list2\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = 0\n    for char in str1:\n        charac += 1\n    return charac\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] = char_dict[char]+1\n        else:\n            char_dict[char] = 1\n    \n    return len(char_dict)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \ndef string_compression(str1):\n    '''\n    Write a function that takes in a string and returns a string of the same\n    length, but compressed.\n    '''\n    return str1.lower()\n    \ndef get_first_n_letters(str1):\n    '''\n    Return a string of the first n letters of the input string.\n    '''\n    return str1[:int(len(str1) / 2)]\n    \ndef get_first_n_words(str1):\n    '''\n    Return a string of the first n words of the input string.\n    '''\n    return str1.split(' ')\n    \ndef get_first_n_words_without_punctuation(str1):\n    '''\n    Return a string of the first n words of the input string without punctuation.\n    '''\n    return str1.split(' ')\n    \ndef get_first_n_words_without_punctuation2(str1):\n    '''\n    Return a string of the first n words of the input string without punctuation.\n    '''\n    return str1.split(' ')[:-1]\n    \ndef get_first_n_words_without_punctuation3(str1):\n    '''\n    Return a string of the first n words of the input string without punctuation.\n    '''\n    return str1.split(' ')[:-2]\n    \ndef get_last_n_letters(str1):\n    '''\n    Return a string of the last n letters of the input string.\n    '''\n    return str1[-int(len(str1) / 2):]\n    \ndef get_last_n_words(str1):\n    '''\n    Return a string of the last n words of the input string.\n    '''\n    return str1.split(' ')[-2:]\n    \ndef get_last_n_words_without_punctuation(str1):\n    '''\n    Return a string of the last n words of the input string without punctuation.\n    '''\n    return str1.split(' ')[-2:]\n    \ndef get_last_n_words_without_punctuation2(str1):\n    '''\n    Return a string of the last n words of the input string without punctuation.\n    '''\n    return str1.split(' ')[-1:-2]\n    \ndef get_last_n_words_without_punctuation3(str1):\n    '''\n    Return a string of the last n words of the input string without punctuation.\n    '''\n    return str1.split(' ')[-1:-3]\n    \ndef get_count_charac(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('a')\n    \ndef get_count_charac2(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('e')\n    \ndef get_count_charac3(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('i')\n    \ndef get_count_charac4(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('o')\n    \ndef get_count_charac5(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('u')\n    \ndef get_count_charac6(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('y')\n    \ndef get_count_charac7(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('z')\n    \ndef get_count_charac8(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('a')\n    \ndef get_count_charac9(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('e')\n    \ndef get_count_charac10(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('i')\n    \ndef get_count_charac11(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('o')\n    \ndef get_count_charac12(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('u')\n    \ndef get_count_charac13(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('y')\n    \ndef get_count_charac14(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('z')\n    \ndef get_count_charac15(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('a')\n    \ndef get_count_charac16(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('e')\n    \ndef get_count_charac17(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('i')\n    \ndef get_count_charac18(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('o')\n    \ndef get_count_charac19(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('u')\n    \ndef get_count_charac20(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('y')\n    \ndef get_count_charac21(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('z')\n    \ndef get_count_charac22(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('a')\n    \ndef get_count_charac23(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('e')\n    \ndef get_count_charac24(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('i')\n    \ndef get_count_charac25(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('o')\n    \ndef get_count_charac26(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('u')\n    \ndef get_count_charac27(str1):\n    '''\n    Return a string of the number of times each character appears in the input string.\n    '''\n    return str1.count('y')\n    \nde"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    s = []\n    count = 0\n    for i in str1:\n        if i =='':\n            count += 1\n        else:\n            s.append(count)\n            count = 1\n    s.append(count)\n    return s\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count(' ')\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # get a copy of the string\n    str2 = str1.copy()\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for x in range(len(str1)):\n        if str1[x] =='':\n            count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return N\n    else:\n        return next_Perfect_Square(N-1)**2+N\n    \ndef max_square_with_sum(s):\n    '''\n    Write a function that takes a string as an argument and returns the max square possible\n    without having to calculate the sum of characters in the string.\n    '''\n    if(s==''):\n        return ''\n    else:\n        return max_square_with_sum(s[1:])+s[0]\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 10000000:\n        N = 10000000\n    if N % 10 == 0:\n        return N\n    elif N % 10 > 0:\n        return N + next_Perfect_Square(N // 10)\n    else:\n        return N + next_Perfect_Square(N + 1)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def isPerfectSquare(N): \n        '''\n        Check whether the input N is a perfect square. \n        '''\n        if N <= 1: \n            return False\n        if N <= 2: \n            return True\n        sqrtN = math.ceil(math.sqrt(N)) \n        for i in range(2, int(sqrtN) + 1): \n            if (N % i == 0): \n                return False\n        return True\n    if isPerfectSquare(N): \n        return N \n    if N == 1: \n        return 1\n    if N % 2!= 0: \n        return next_Perfect_Square(N / 2) \n    else: \n        return next_Perfect_Square(N + 1)\ndef next_Power_of_2(N): \n    '''\n    Write a python function to calculate the sum of powers of 2 to the given number N.\n    '''\n    if N == 1: \n        return 1\n    if N == 0: \n        return 0\n    if N % 2!= 0: \n        return next_Power_of_2(N / 2) + 1\n    else: \n        return next_Power_of_2(N + 1) \ndef sum_of_powers_of_2(N): \n    '''\n    Write a python function to find the sum of powers of 2 to the given number N.\n    '''\n    if N == 1: \n        return 1\n    if N == 0: \n        return 0\n    if N % 2!= 0: \n        return sum_of_powers_of_2(N / 2) + 1\n    else: \n        return sum_of_powers_of_2(N + 1) \ndef is_prime(N): \n    '''\n    Check whether the number is a prime number.\n    '''\n    if N == 0 or N == 1: \n        return False\n    if N == 2 or N == 3: \n        return True\n    if N % 2!= 0 or N < 2: \n        return False\n    if N % 4!= 0: \n        return False\n    if N % 8!= 0: \n        return False\n    for i in range(5, int(math.sqrt(N)) + 1, 6): \n        if (N % i == 0): \n            return False\n    return True\ndef is_prime_number(N): \n    '''\n    Check whether the number is prime.\n    '''\n    if N == 0 or N == 1: \n        return False\n    if N == 2 or N == 3: \n        return True\n    if N % 2!= 0: \n        return False\n    if N % 4!= 0: \n        return False\n    if N % 8!= 0: \n        return False\n    for i in range(5, int(math.sqrt(N)) + 1, 6): \n        if (N % i == 0): \n            return False\n    return True\ndef is_prime_number_primes(N): \n    '''\n    Check whether the number is prime.\n    '''\n    if N == 0 or N == 1: \n        return False\n    if N == 2 or N == 3: \n        return True\n    if N % 2!= 0: \n        return False\n    if N % 4!= 0: \n        return False\n    if N % 8!= 0: \n        return False\n    for i in range(5, int(math.sqrt(N)) + 1, 6): \n        if (N % i == 0): \n            return False\n    return True\ndef is_prime_number_primes_list(N): \n    '''\n    Check whether the number is prime.\n    '''\n    if N == 0 or N == 1: \n        return False\n    if N == 2 or N == 3: \n        return True\n    if N % 2!= 0: \n        return False\n    if N % 4!= 0: \n        return False\n    if N % 8!= 0: \n        return False\n    for i in range(5, int(math.sqrt(N)) + 1, 6): \n        if (N % i == 0): \n            return False\n    return True\ndef next_prime_number(N): \n    '''\n    Write a python function to check whether N is a prime number. \n    '''\n    if N == 2 or N == 3: \n        return True\n    if is_prime(N): \n        return True\n    if N % 2 == 0: \n        return False\n    if is_prime_number_primes(N): \n        return True\n    if is_prime_number_primes_list(N): \n        return True\n    for i in range(3, int(math.sqrt(N)) + 1, 2): \n        if is_prime_number_primes_list(N): \n            return True\n    return False\ndef nth_prime(N): \n    '''\n    Write a python function to check whether N is a prime number. \n    '''\n    if N == 2 or N == 3: \n        return True\n    if is_prime(N): \n        return True\n    if N % 2!= 0: \n        return False\n    if is_prime_number_primes(N): \n        return True\n    if is_prime_number_primes_list(N): \n        return True\n    for i in range(5, int(math.sqrt(N)) + 1, 6): \n        if is_prime_number_primes_list(N): \n            return True\n    return False\ndef next_prime_number_2(N): \n    '''\n    Write a python function to check whether N is a prime number. \n    '''\n    if N == 2 or N == 3: \n        return True\n    if is_prime(N): \n        return True\n    if N % 2 == 0: \n        return False\n    if is_prime_number_primes(N): \n        return True\n    if is_prime_number_primes_list(N): \n        return True\n    for i in range(5, int(math.sqrt(N)) + 1, 6): \n        if is_prime_number_primes_list(N): \n            return True\n    return False\ndef next_prime_number_4(N): \n    '''\n    Write a python function to check whether N is a prime number. \n    '''\n    if N == 2 or N == 3: \n        return True\n    if is_prime(N): \n        return True\n    if N % 2 == 0: \n        return False\n    if is_prime_number_primes(N): \n        return True\n    if is_prime_number_primes_list(N): \n        return True\n    for i in range(5, int(math.sqrt(N)) + 1, 6): \n        if is_prime_number_primes_list(N): \n            return True\n    return False\ndef next_prime_number_5(N): \n    '''\n    Write a python function to check whether N is a prime number. \n    '''\n    if N == 2 or N == 3: \n        return True\n    if is_prime(N): \n        return True\n    if N % 2 == 0: \n        return False\n    if is_prime_number_primes(N): \n        return True\n    if is_prime_number_primes_list(N): \n        return True\n    for i in range(5, int(math.sqrt(N)) + 1, 6): \n        if is_prime_number_primes_list(N): \n            return True\n    return False\ndef next_prime_number_6(N): \n    '''\n    Write a python function to check whether N is a prime number. \n    '''\n    if N == 2 or N == 3: \n        return True\n    if is_prime(N): \n        return True\n    if N % 2 == 0: \n        return False\n    if is_prime_number_primes(N): \n        return True\n    if is_prime_number_primes_list(N): \n        return True\n    for i in range(5, int(math.sqrt(N)) + 1, 6): \n        if is_prime_number_primes_lis"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Naive way, we need to count the number of perfect squares of square of each base\n    # sq_list = []\n    # sq_list.append(1)\n    # for i in range(1,N):\n    #     square = 1\n    #     for j in range(1,i):\n    #         square = square*i\n    #         if square == i:\n    #             continue\n    #         else:\n    #             break\n    #     sq_list.append(square)\n    # return max(sq_list)\n    # Or we can use this to find the maximum square we can reach from the number\n    # sq_list = []\n    # for i in range(1,N):\n    #     square = 1\n    #     for j in range(1,i):\n    #         square = square*i\n    #         if square == i:\n    #             continue\n    #         else:\n    #             break\n    #     sq_list.append(square)\n    # return max(sq_list)\n    # Time complexity: O(n*log(n))\n    # Space complexity: O(1)\n    # Logic:\n    #   we are using factorial(N) - 1, if we get the square, then we can not reach the square\n    #   that's so that is not a perfect square, we can't find the perfect square\n    #   so we can use the factorial function\n    #   If we get the square, then we can not reach the square that's so that is not a perfect square, we can't find the perfect square\n    #   so we can use the factorial function\n    #   we are using recursion, so we need to recursively find the next square\n    #   the square from the back is the next square from the back\n    #   we need to recurse from the square of the square from the back,\n    #   the square from the back we need to calculate the square from the square from the back\n    #   and so on until we reach the square that's not perfect\n    #   we can now find the perfect square, which is sq_list[N/2]\n    #   we can only check the square of the next square\n    #   if we are at the last square, then we can not reach the square that's not perfect\n    #   so we can use the factorial function\n    #   we are using recursion, so we need to recursively find the next square\n    #   the square from the back is the next square from the back\n    #   we need to recurse from the square of the square from the back,\n    #   the square from the back we need to calculate the square from the square from the back\n    #   and so on until we reach the square that's not perfect\n    #   we can now find the perfect square, which is sq_list[N/2]\n    #   we can only check the square of the next square\n    #   if we are at the last square, then we can not reach the square that's not perfect\n    #   so we can use the factorial function\n    #   we are using recursion, so we need to recursively find the next square\n    #   the square from the back is the next square from the back\n    #   we need to recurse from the square of the square from the back,\n    #   the square from the back we need to calculate the square from the square from the back\n    #   and so on until we reach the square that's not perfect\n    #   we can now find the perfect square, which is sq_list[N/2]\n    #   we can only check the square of the next square\n    #   if we are at the last square, then we can not reach the square that's not perfect\n    #   so we can use the factorial function\n    #   we are using recursion, so we need to recursively find the next square\n    #   the square from the back is the next square from the back\n    #   we need to recurse from the square of the square from the back,\n    #   the square from the back we need to calculate the square from the square from the back\n    #   and so on until we reach the square that's not perfect\n    #   we can now find the perfect square, which is sq_list[N/2]\n    #   we can only check the square of the next square\n    #   if we are at the last square, then we can not reach the square that's not perfect\n    #   so we can use the factorial function\n    #   we are using recursion, so we need to recursively find the next square\n    #   the square from the back is the next square from the back\n    #   we need to recurse from the square of the square from the back,\n    #   the square from the back we need to calculate the square from the square from the back\n    #   and so on until we reach the square that's not perfect\n    #   we can now find the perfect square, which is sq_list[N/2]\n    #   we can only check the square of the next square\n    #   if we are at the last square, then we can not reach the square that's not perfect\n    #   so we can use the factorial function\n    #   we are using recursion, so we need to recursively find the next square\n    #   the square from the back is the next square from the back\n    #   we need to recurse from the square of the square from the back,\n    #   the square from the back we need to calculate the square from the square from the back\n    #   and so on until we reach the square that's not perfect\n    #   we can now find the perfect square, which is sq_list[N/2]\n    #   we can only check the square of the next square\n    #   if we are at the last square, then we can not reach the square that's not perfect\n    #   so we can use the factorial function\n    #   we are using recursion, so we need to recursively find the next square\n    #   the square from the back is the next square from the back\n    #   we need to recurse from the square of the square from the back,\n    #   the square from the back we need to calculate the square from the square from the back\n    #   and so on until we reach the square that's not perfect\n    #   we can now find the perfect square, which is sq_list[N/2]\n    #   we can only check the square of the next square\n    #   if we are at the last square, then we can not reach the square that's not perfect\n    #   so we can use the factorial function\n    #   we are using recursion, so we need to recursively find the next square\n    #   the square from the back is the next square from the back\n    #   we need to recurse from the square of the square from the back,\n    #   the square from the back we need to calculate the square from the square from the back\n    #   and so on until we reach the square that's not perfect\n    #   we can now find the perfect square, which is sq_list[N/2]\n    #   we can only check the square of the next square\n    #   if we are at the last square, then we can not reach the square that's not perfect\n    #   so we can use the factorial function\n    #   we are using recursion, so we need to recursively find the next square\n    #   the square from the back is the next square from the back\n    #   we need to recurse from the square of the square from the back,\n    #   the square from the back we need to calculate the square from the square from the back\n    #   and so on until we reach the square that's not perfect\n    #   we can now find the perfect square, which is sq_list[N/2]\n    #   we can only check the square of the next square\n    #   if we are at the last square, then we can not reach the square that's not perfect\n    #   so we can use the factorial function\n    #   we are using recursion, so we need to recursively find the next square\n    #   the square from the back is the next square from the back\n    #   we need to recurse from the square of the square from the back,\n    #   the square from the back we need to calculate the square from the square from the back\n    #   and so on until we reach the square that's not perfect\n    #   we can now find the perfect square, which is sq_list[N/2]\n    #   we can only check the square of the next square\n    #   if we are a"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square=N**2\n    if N==0:\n        return 0\n    elif N==1:\n        return 1\n    elif N==2:\n        return 3\n    elif N>4:\n        return 9\n    elif N==3:\n        return 5\n    elif N==4:\n        return 7\n    elif N>4:\n        return 10\n    elif N==5:\n        return 12\n    elif N>5:\n        return 14\n    elif N>6:\n        return 17\n    elif N==7:\n        return 20\n    elif N>7:\n        return 23\n    elif N>8:\n        return 24\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N==1:\n        return 1\n    if N==2:\n        return 2\n    if N==3:\n        return 6\n    if N%2==0:\n        a=math.ceil(math.sqrt(N))\n        print(a)\n        return a\n    if N==4:\n        return 15\n    if N==5:\n        return 25\n    if N==6:\n        return 45\n    if N==7:\n        return 70\n    if N==8:\n        return 85\n    if N==9:\n        return 105\n    if N==10:\n        return 130\n    if N==11:\n        return 150\n    if N==12:\n        return 170\n    if N==13:\n        return 200\n    if N==14:\n        return 225\n    if N==15:\n        return 250\n    if N==16:\n        return 300\n    if N==17:\n        return 350\n    if N==18:\n        return 400\n    if N==19:\n        return 450\n    if N==20:\n        return 500\n    if N==21:\n        return 600\n    if N==22:\n        return 650\n    if N==23:\n        return 700\n    if N==24:\n        return 750\n    if N==25:\n        return 800\n    if N==26:\n        return 850\n    if N==27:\n        return 1000\n    if N==28:\n        return 1050\n    if N==29:\n        return 1200\n    if N==30:\n        return 1350\n    if N==31:\n        return 1500\n    if N==32:\n        return 1750\n    if N==33:\n        return 2050\n    if N==34:\n        return 2350\n    if N==35:\n        return 2500\n    if N==36:\n        return 3000\n    if N==37:\n        return 3500\n    if N==38:\n        return 4000\n    if N==39:\n        return 4500\n    if N==40:\n        return 5000\n    if N==41:\n        return 6000\n    if N==42:\n        return 6500\n    if N==43:\n        return 7000\n    if N==44:\n        return 8000\n    if N==45:\n        return 9000\n    if N==46:\n        return 10000\n    if N==47:\n        return 11000\n    if N==48:\n        return 12000\n    if N==49:\n        return 13000\n    if N==50:\n        return 14000\n    if N==51:\n        return 15000\n    if N==52:\n        return 16000\n    if N==53:\n        return 17000\n    if N==54:\n        return 18000\n    if N==55:\n        return 19000\n    if N==56:\n        return 20000\n    if N==57:\n        return 21000\n    if N==58:\n        return 22000\n    if N==59:\n        return 23000\n    if N==60:\n        return 24000\n    if N==61:\n        return 25000\n    if N==62:\n        return 26000\n    if N==63:\n        return 27000\n    if N==64:\n        return 28000\n    if N==65:\n        return 29000\n    if N==66:\n        return 30000\n    if N==67:\n        return 30000\n    if N==68:\n        return 35000\n    if N==69:\n        return 40000\n    if N==70:\n        return 45000\n    if N==71:\n        return 46000\n    if N==72:\n        return 48000\n    if N==73:\n        return 49000\n    if N==74:\n        return 50000\n    if N==75:\n        return 55000\n    if N==76:\n        return 60000\n    if N==77:\n        return 66000\n    if N==78:\n        return 67000\n    if N==79:\n        return 68000\n    if N==80:\n        return 69000\n    if N==81:\n        return 70000\n    if N==82:\n        return 70000\n    if N==83:\n        return 80000\n    if N==84:\n        return 80000\n    if N==85:\n        return 90000\n    if N==86:\n        return 90000\n    if N==87:\n        return 90000\n    if N==88:\n        return 90000\n    if N==89:\n        return 90000\n    if N==90:\n        return 90000\n    if N==91:\n        return 90000\n    if N==92:\n        return 90000\n    if N==93:\n        return 90000\n    if N==94:\n        return 90000\n    if N==95:\n        return 90000\n    if N==96:\n        return 90000\n    if N==97:\n        return 90000\n    if N==98:\n        return 90000\n    if N==99:\n        return 90000\n    if N==100:\n        return 90000\n    if N==101:\n        return 90000\n    if N==102:\n        return 90000\n    if N==103:\n        return 90000\n    if N==104:\n        return 90000\n    if N==105:\n        return 90000\n    if N==106:\n        return 90000\n    if N==107:\n        return 90000\n    if N==108:\n        return 90000\n    if N==109:\n        return 90000\n    if N==110:\n        return 90000\n    if N==111:\n        return 90000\n    if N==112:\n        return 90000\n    if N==113:\n        return 90000\n    if N==114:\n        return 90000\n    if N==115:\n        return 90000\n    if N==116:\n        return 90000\n    if N==117:\n        return 90000\n    if N==118:\n        return 90000\n    if N==119:\n        return 90000\n    if N==120:\n        return 90000\n    if N==121:\n        return 90000\n    if N==122:\n        return 90000\n    if N==123:\n        return 90000\n    if N==124:\n        return 90000\n    if N==125:\n        return 90000\n    if N==126:\n        return 90000\n    if N==127:\n        return 90000\n    if N==128:\n        return 90000\n    if N==129:\n        return 90000\n    if N==130:\n        return 90000\n    if N==131:\n        return 90000\n    if N==132:\n        return 90000\n    if N==133:\n        return 90000\n    if N==134:\n        return 90000\n    if N==135:\n        return 90000\n    if N==136:\n        return 90000\n    if N==137:\n        return 90000\n    if N==138:\n        return 90000\n    if N==139:\n        return 90000\n    if N==140:\n        return 90000\n    if N==141:\n        return 90000\n    if N==142:\n        return 90000\n    if N==143:\n        return 90000\n    if N==144:\n        return 90000\n    if N==145:\n        return 90000\n    if N==146:\n        return 90000\n    if N==147:\n        return 90000\n    if N==148:\n        return 90000\n    if N==149:\n        return 90000\n    if N==150:\n        return 90000\n    if N==151:\n        return 90000\n    if N==152:\n        return 90000\n    if N==153:\n        return 90000\n    if N==154:\n        return 90000\n    if N==155:\n        return 90000\n    if N==156:\n        return 90000\n    if N==157:\n        return 90000\n    if N==158:\n        return 90000\n    if N==159:\n        return 90000\n    if N==160:\n        return 90000\n    if N==161:\n        return 90000\n    if N==162:\n        return 90000\n    if N==163:\n        return 90000\n    if N==164:\n        return 90000\n    if N==165:\n        return 90000\n    if N==166:\n        return 90000\n    if N==167:\n        return 90000\n    if N==168:\n    "
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    s = 0\n    f = 1\n    i = 1\n    while i <= N/2:\n        f = f * i\n        s = s + f\n        i += 1\n    return s\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(n): \n        if n < 1: \n            return False\n        if (n % 2 == 0): \n            return True\n        else: \n            sq = int(math.sqrt(n)) \n            for i in range(1, sq+1): \n                if (n % i == 0): \n                    return False\n            return True\n    i = 1\n    while i <= N: \n        if is_perfect_square(i): \n            return i \n        i += 1\n    return None\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = N \n    a = 1\n    b = (n+1)\n    c = a + b\n    while (a <= b):\n        c = (a + b) // 2\n        if c ** 2 == N:\n            return c\n        elif c ** 2 > N:\n            b = c\n        else:\n            a = c+1\n    return N\n    \ndef next_perfect_square_fast(N):\n    '''\n    This is a recursive implementation of the next perfect square.\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square = 0\n    for i in range(1, N):\n        square = i * i\n        if square > N:\n            break\n    return square\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    s = sum(arr) \n    for i in range(0, len(arr)):\n        if i > 0 and arr[i] < arr[i-1]:\n            return max_sum(arr[:i]) + max_sum(arr[i:])\n        elif i > 0 and arr[i] > arr[i-1]:\n            return max_sum(arr[:i]) + max_sum(arr[i:]) + arr[i]\n        elif arr[i] == arr[i-1]:\n            return arr[i]\n    return s\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Check if the array is empty or has only one element\n    if len(arr) < 2:\n        return arr\n    \n    # Create the array to store the sums of the subsequences\n    subarray = []\n    \n    # Initialize the sums of the subsequences\n    for i in range(len(arr) - 1):\n        subarray.append(arr[i] + arr[i + 1])\n        \n    # Initilize the max sums array\n    max_subarray = []\n    \n    # Add the elements of the array to the max sums array\n    for i in range(len(subarray)):\n        max_subarray.append(max(subarray[i:]))\n        \n    # Check if we have the same maximum\n    if sum(subarray) == sum(max_subarray):\n        return max_subarray\n    \n    # Set up the main array\n    main_array = []\n    \n    # Check if we need to include the highest element\n    for i in range(len(subarray)):\n        main_array.append(subarray[i])\n        \n        if i == 0:\n            main_array.append(subarray[i + 1])\n        \n        else:\n            main_array.append(max(main_array[i - 1: i + 1]))\n    \n    # Find the max sum of the main array\n    return max_sum(main_array)\n    "
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if arr == None or len(arr) == 0: \n        return None\n    \n    # print(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialize output variable\n    max_sum = 0\n    # initialize the starting pointer\n    # to the first element of the array\n    i = 0\n    # for each element in the array\n    for j in range(len(arr)):\n        # check to see if the element is first increasing\n        # (i.e., has not yet been seen)\n        if (i == 0):\n            # if it is, add the current element\n            # to the result\n            max_sum += arr[j]\n            # update the starting pointer\n            i = j + 1\n        # check to see if the element is second\n        # increasing\n        elif (i!= 0):\n            # check to see if the element is\n            # first decreasing\n            if (arr[i - 1] > arr[i - 1]):\n                # update the max_sum\n                # value and the starting pointer\n                max_sum = max(arr[i - 1], max_sum)\n                i -= 1\n            # check to see if the element\n            # is first increasing\n            elif (arr[i - 1] < arr[i - 1]):\n                # update the max_sum\n                # value and the starting pointer\n                max_sum = max(arr[i - 1], max_sum)\n                i -= 1\n    # return the max_sum\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Build a hash table to store the bitonic subsequences\n    # Create a list of all possible bitonic subsequences \n    # Use an index for indexing the array array[i] for every bitonic subsequence \n    # If the sum of the bitonic subsequences is larger than the maximum sum, return the maximum sum\n    # If it is smaller than the maximum sum, return it\n    # Assign a maximum sum to the return value\n    # O(n^2)\n    # Write an implementation here\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n    \n    dp = [1 for _ in range(len(arr))]\n    prev = arr[0]\n    curr = arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] > prev:\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = dp[i - 2] + 1\n        prev = curr\n        curr = max(curr, arr[i])\n    \n    return max(dp)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] + arr[1]\n    \n    max_s = max(arr)\n    max_s_arr = []\n    for i in arr:\n        if i < max_s:\n            max_s_arr.append(i)\n    max_s_arr.sort(reverse=True)\n    \n    res = max_s_arr[0]\n    for i in range(len(max_s_arr)):\n        if arr[i] < max_s and arr[i] + arr[i + 1] > max_s:\n            res = max(res, arr[i] + arr[i + 1])\n        elif arr[i] < max_s and arr[i] + arr[i + 1] <= max_s:\n            res = max(res, arr[i] + arr[i + 1])\n    return res\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    num_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sum_value = 0\n    for num in num_array:\n        sum_value += num\n    return sum_value\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def get_sum_of_bitonic_subseq(arr, n, k): \n        if k == 0:\n            return 0\n        if n == 0: \n            return arr[0]\n        if n < k: \n            return max(get_sum_of_bitonic_subseq(arr, n-1, k), get_sum_of_bitonic_subseq(arr, n-1, k-1)) \n        return get_sum_of_bitonic_subseq(arr, n-1, k-1) \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # find max sum of any subsequence that is first increasing\n    # max_sum = max(max_sum(arr[i:]), arr[i])\n    max_sum = 0\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum, arr[i - 1] + arr[i])\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    babylonian_root = []\n    for i in range(1,int(number**0.5) + 1):\n        if not i in babylonian_root:\n            babylonian_root.append(i)\n    for i in range(len(babylonian_root)-1):\n        if babylonian_root[i] < 0 and babylonian_root[i+1] < 0:\n            babylonian_root[i] *= -1\n            babylonian_root[i+1] *= -1\n        if not babylonian_root[i] < babylonian_root[i+1]:\n            return False\n    return babylonian_root[-1]\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = 0\n    while squareroot < number:\n        squareroot = (number * number) // 2\n        if squareroot == 0:\n            break\n    return squareroot\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    first = number\n    last = 2 * first\n    while True:\n        if last == 2 * first:\n            break\n        last = (first ** 2) + last\n    return last\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    from math import sqrt\n    square_root = sqrt(number)\n    return square_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return -(number ** 0.5)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number ** 0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = 0\n    for i in range(1,number):\n        if i**2 > number:\n            break\n        else:\n            square_root += i\n    return square_root\n    "
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 0:\n        raise ValueError(\"Number must be > 0\")\n    else:\n        numerator = 1\n        denominator = 1\n        result = 0\n        while True:\n            if number % denominator == 0:\n                number = int(number / denominator)\n                if numerator > result:\n                    result = numerator\n            else:\n                numerator += 1\n                denominator += 1\n            if denominator > number:\n                return result\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number ** 0.5\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    '''\n    string = input()\n    if string == '1':\n        print(len(str))\n        return\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    i = 0\n    j = 0\n    n = len(str)\n    longest = 0\n    max_palindrome = 0\n    while i < n:\n        \n        if (i == j):\n            longest += 1\n            j += 1\n        elif str[i]!= str[j]:\n            j += 1\n        else:\n            i += 1\n        max_palindrome = max(max_palindrome, longest)\n        longest = 0\n    return max_palindrome\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Use a recursive backtracking approach\n    # Complete this function\n    def isPalindrome(s, i, j):\n        # base case\n        if i == j:\n            return True\n        \n        # recursive call\n        if s[i] == s[j]:\n            return isPalindrome(s, i+1, j-1)\n        \n        return False\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 1:\n        return 0\n    \n    # build a table that maps each character to the length of the longest palindromic subsequence\n    longest_palindromic_subsequence = {}\n    for c in string.ascii_lowercase:\n        # build a table that maps each character to the length of the longest palindromic subsequence\n        longest_palindromic_subsequence[c] = lps(str.replace(c, ''))\n    \n    # get the longest palindromic subsequence \n    return max(longest_palindromic_subsequence.values())\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #initialize the longest palindromic subsequence to be 0 \n    longest = 0\n    #for every character in the string \n    for i in range(len(str)): \n        #check if the current character is a palindrome \n        #if it is, add it to the longest palindrome sequence \n        if str[i]!= str[len(str) - 1 - i]: \n            if len(str[i:len(str) - 1 - i]) > longest: \n                longest = len(str[i:len(str) - 1 - i]) \n    return longest\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    if len(str) <= 1:\n        return 0\n    \n    longest_substring = 1\n    \n    for index in range(len(str)-1):\n        for seq in range(index, len(str)):\n            if str[index:seq+1] == str[seq:seq+1][::-1]:\n                substr_count = seq - index + 1\n                if substr_count > longest_substring:\n                    longest_substring = substr_count\n                    \n    return longest_substring\n    \n    \nprint(lps(\"aabcc\")"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n=len(str)\n    # If the string is empty, lps has length 0\n    if n==0:\n        return 0\n    # Find the length of the longest palindromic subsequence\n    dp=[[0 for _ in range(n)] for _ in range(n)]\n    # Store the length of the longest palindromic subsequence\n    lps=[]\n    # Build the lps array using the following method\n    # 1. Loop through the string\n    # 2. For each letter, compare it to the previous letter\n    # 3. If the previous letter is the same,\n    # 4. Add the previous letter to the lps array\n    # 5. Repeat the process for the remaining string\n    for i in range(n):\n        for j in range(i):\n            if str[j]==str[i] and str[j]!=str[i]:\n                dp[i][j]=max(dp[i][j],1+dp[i][j]+lps[-1])\n            else:\n                dp[i][j]=dp[i][j]+1\n    # Return the max length of the lps array\n    return max(dp[n-1])\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 1:\n        return 1\n    else:\n        #find the longest palindromic subsequence\n        longest = 1\n        for i in range(1, len(str)):\n            if str[i-1] == str[i]:\n                continue\n            #check if the length of the subsequence is smaller than the longest\n            if len(str[i:]) < longest:\n                longest = len(str[i:])\n        return longest\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str==None or len(str)==0:\n        return 0\n    max_len=1\n    for i in range(1,len(str)+1):\n        for j in range(i,len(str)+1):\n            if str[i-1]==str[j-1]:\n                if i-j<max_len:\n                    max_len=i-j+1\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_len = 0\n    palindromes = []\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 1 + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    assert n >= 1, 'Number must be greater than or equal to 1.'\n    return n * (n+1) / 2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 1\n    for i in range(2, n+1):\n        total += 1/i\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(1/2)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n, 0, -1):\n        harmonic_sum += i / (i - 1)\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    a = 1\n    b = 1\n    for i in range(1, n + 1):\n        a = a * (i + 1)\n        b = b * (i + 1)\n    return a + b\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # print(n)\n    result = 0\n    for i in range(n+1):\n        result += (1/i)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def harmonic_sum_wrapper(n):\n        if n < 1:\n            return n\n        return n * (1/harmonic_sum_wrapper(n-1))\n    return harmonic_sum_wrapper(n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    num_to_add = 0\n    i = 0\n    sum_of_divisors = 0\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    intersection_list = []\n    \n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection_list.append(num1)\n    \n    return intersection_list\n    \n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_a = set(array_nums1)\n    set_b = set(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Check if the arrays are same size.\n    if len(array_nums1)!= len(array_nums2):\n        return None\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1 = set(array_nums1)\n    array2 = set(array_nums2)\n    intersection_array = list(array1 & array2)\n    return intersection_array\n    \nif __name__==\"__main__\":\n    print(\"Example 1:\")\n    print(intersection_array([1,2,3,4,5], [2,3,6]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [6,7,8,9,10]))\n    print(\"Example 2:\")\n    print(intersection_array([1,2,3,4,5], [2,3,6,7,8,9]))\n    print(\"Exception:\")\n    print(intersection_array([6,7,8,9,10], [2,3,6]))\n    print(\"Example 3:\")\n    print(intersection_array([1,2,3,4,5], [3,4]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1]))\n    print(\"Example 4:\")\n    print(intersection_array([1,2,3,4,5], [1,2,3,4]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [2,3,4]))\n    print(\"Example 5:\")\n    print(intersection_array([1,2,3,4,5], [1,2,3,4,5]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [2,2]))\n    print(\"Example 6:\")\n    print(intersection_array([1,2,3,4,5], [1,4,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [5]))\n    print(\"Example 7:\")\n    print(intersection_array([1,2,3,4,5], [1,5,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [2,5,9]))\n    print(\"Example 8:\")\n    print(intersection_array([1,2,3,4,5], [1,3,6,7,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,3,6,7,8,9]))\n    print(\"Example 9:\")\n    print(intersection_array([1,2,3,4,5], [1,4,6,7,8,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,3,6,7,8,9]))\n    print(\"Example 10:\")\n    print(intersection_array([1,2,3,4,5], [2,4,6,7,8,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,2,3,4,5]))\n    print(\"Example 11:\")\n    print(intersection_array([1,2,3,4,5], [2,3,4,5,6]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,4,6,7,8,9]))\n    print(\"Example 12:\")\n    print(intersection_array([1,2,3,4,5], [1,2,3,4,5,6]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,2,3,4,5,6]))\n    print(\"Example 13:\")\n    print(intersection_array([1,2,3,4,5], [1,2,3,4,5,6]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,2,3,4,5]))\n    print(\"Example 14:\")\n    print(intersection_array([1,2,3,4,5], [1,4,6,7,8,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,4,6,7,8,9]))\n    print(\"Example 15:\")\n    print(intersection_array([1,2,3,4,5], [1,5,6,7,8,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,3,6,7,8,9]))\n    print(\"Example 16:\")\n    print(intersection_array([1,2,3,4,5], [1,2,3,4,5,6]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,2,3,4,5,6]))\n    print(\"Example 17:\")\n    print(intersection_array([1,2,3,4,5], [1,4,6,7,8,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,4,6,7,8,9]))\n    print(\"Example 18:\")\n    print(intersection_array([1,2,3,4,5], [1,3,4,6,7,8,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,3,4,6,7,8,9]))\n    print(\"Example 19:\")\n    print(intersection_array([1,2,3,4,5], [1,4,5,6,7,8,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,4,6,7,8,9]))\n    print(\"Example 20:\")\n    print(intersection_array([1,2,3,4,5], [1,5,6,7,8,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,5,6,7,8,9]))\n    print(\"Example 21:\")\n    print(intersection_array([1,2,3,4,5], [1,5,6,7,8,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,3,6,7,8,9]))\n    print(\"Example 22:\")\n    print(intersection_array([1,2,3,4,5], [1,2,3,4,5,6]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,2,3,4,5,6]))\n    print(\"Example 23:\")\n    print(intersection_array([1,2,3,4,5], [1,4,5,6,7,8,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,4,5,6,7,8,9]))\n    print(\"Example 24:\")\n    print(intersection_array([1,2,3,4,5], [1,4,5,6,7,8,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,4,6,7,8,9]))\n    print(\"Example 25:\")\n    print(intersection_array([1,2,3,4,5], [1,4,5,6,7,8,9]))\n    print(\"Exception:\")\n    print(intersection_array([1,2,3,4,5], [1,4,6,7,8,9"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result=[]\n    #get elements in both arrays\n    intersection=[]\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection.append(array_nums1[i])\n    for i in range(len(array_nums2)):\n        if array_nums2[i] in intersection:\n            result.append(array_nums2[i])\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a = set(array_nums1)\n    b = set(array_nums2)\n    return a & b\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    # Find the size of both array\n    s1 = len(array_nums1)\n    s2 = len(array_nums2)\n    \n    # Keep track of result\n    result = []\n    \n    # Traverse the first array\n    for i in range(s1):\n        \n        # Set flag to check if the first element is in result list\n        check = False\n        \n        # Get the first element\n        num1 = array_nums1[i]\n        \n        # Get the second element\n        num2 = array_nums2[i]\n        \n        # Check if the first element is in the result list\n        if num1 in result:\n            check = True\n            \n        # Check if the second element is in the result list\n        if num2 in result:\n            check = True\n        \n        # If the first element is in the result list, it must be a unique number\n        if check:\n            result.append(num1)\n            result.append(num2)\n    \n    return result\n    \n    "
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    set_1 = set(array_nums1)\n    set_2 = set(array_nums2)\n    for i in set_1:\n        if i in set_2:\n            intersection.append(i)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect_array=[]\n    for i in array_nums1:\n        for j in array_nums2:\n            if i in array_nums2 and j in array_nums1:\n                intersect_array.append(i)\n                intersect_array.append(j)\n    return intersect_array\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Solution 1:\n    \n    list_nums1 = []\n    list_nums2 = []\n    \n    for i in range(len(array_nums1)):\n        list_nums1.append(array_nums1[i])\n        list_nums2.append(array_nums2[i])\n    \n    return [num for num in list_nums1 if num in list_nums2]\n    \n    # Solution 2:\n    \n    list_nums1 = []\n    list_nums2 = []\n    \n    for i in range(len(array_nums1)):\n        if array_nums1[i] in list_nums2:\n            list_nums2.remove(array_nums1[i])\n        else:\n            list_nums1.append(array_nums1[i])\n    \n    return list_nums1\n    \n    # Solution 3:\n    \n    list_nums1 = []\n    list_nums2 = []\n    \n    for i in range(len(array_nums1)):\n        if array_nums1[i] in list_nums2:\n            list_nums2.remove(array_nums1[i])\n        else:\n            list_nums1.append(array_nums1[i])\n    \n    return list_nums1\n    \n    # Solution 4:\n    \n    list_nums1 = []\n    list_nums2 = []\n    \n    for i in range(len(array_nums1)):\n        if array_nums1[i] in list_nums2:\n            list_nums2.remove(array_nums1[i])\n        else:\n            list_nums1.append(array_nums1[i])\n    \n    return list_nums1\n    \n    # Solution 5:\n    \n    list_nums1 = []\n    list_nums2 = []\n    \n    for i in range(len(array_nums1)):\n        if array_nums1[i] in list_nums2:\n            list_nums2.remove(array_nums1[i])\n        else:\n            list_nums1.append(array_nums1[i])\n    \n    return list_nums"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # your code goes here\n    return len(tup)-tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ = 0\n    for el in tup:\n        if el == x:\n            occ += 1\n    return occ \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x = list(x)\n    x = [x]\n    occ = []\n    for i in range(len(tup)):\n        if tup[i][0] == x[0]:\n            occ.append(tup[i])\n    return occ\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for x in tup if x == x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if(i == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if x not in tup:\n        return 0\n    else:\n        return 1 + count_X(tup, x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if x not in tup: \n        return 0\n    else:\n        return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if x not in tup:\n        return None\n    tup.remove(x)\n    tup.append(x)\n    return len(tup)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len(tup) - (tup.count(x))\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return []\n    else:\n        new_list = []\n        for i in range(len(list)):\n            if list[i] == element:\n                new_list.append(element)\n                new_list.append(element)\n                new_list.append(element)\n                return new_list\n            else:\n                new_list.append(list[i])\n        return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    element_index = 0\n    for item in list:\n        if item == element:\n            list.insert(element_index, element)\n            break\n        element_index += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        print('The list is empty')\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # your code goes here\n    if element not in list:\n        return list\n    else:\n        if element < list[0]:\n            for i in range(1,len(list)):\n                if element < list[i]:\n                    list.insert(i,element)\n                    return list\n                else:\n                    continue\n            return list\n        else:\n            for i in range(0,len(list)):\n                if element < list[i]:\n                    list.insert(i,element)\n                    return list\n                else:\n                    continue\n            return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        element = element + 1\n        if i!= len(list) - 1:\n            element = element + 1\n            if list[i] == None:\n                list[i] = element\n            else:\n                element = element + 1\n                list[i] = None\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = list.copy()\n    for element in list:\n        if element < element.element:\n            new_list.append(element)\n    return new_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list==None:\n        return None\n    \n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        list.pop(i)\n        list.insert(i,element)\n        return result\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element[0] + element[1:] + \" \" for element in list]\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for element in list:\n        list.insert(0,element)\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers)!= 2:\n        return \"Please enter two numbers as list of numbers\"\n    else:\n        if numbers[0].is_integer():\n            return \"Please enter two numbers as integer\"\n        else:\n            x = float(numbers[0])\n            y = float(numbers[1])\n            c = (cmath.polar(x))\n            p = cmath.polar(y)\n            return p\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if numbers[0] == 0:\n        z = -1j\n        x = 1\n    elif numbers[0] == 1:\n        z = 1j\n        x = 0\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = cmath.polar(numbers)\n    return result\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # convert complex numbers to polar coordinates\n    polar_list = []\n    for num in numbers:\n        '''\n        for a in num.imag:\n            print(a)\n        '''\n        if num.imag == 0:\n            z = cmath.polar(num)\n            # print(z)\n            '''\n            for i in z:\n                print(i)\n            '''\n            print(z)\n            '''\n            z1 = z.real\n            z2 = z.imag\n            '''\n            for x in z1:\n                print(x)\n            '''\n            print(z2)\n            '''\n            z3 = complex(z1,z2)\n            # print(z3)\n            '''\n            for i in z3:\n                print(i)\n            '''\n            print(z3)\n            '''\n            z4 = z3.real\n            z5 = z3.imag\n            # print(z4)\n            '''\n            print(z5)\n            '''\n            print(z4.real)\n            print(z4.imag)\n            print(z5.real)\n            print(z5.imag)\n            '''\n            # print(z.real)\n            # print(z.imag)\n            '''\n            for x in z.real:\n                print(x)\n            '''\n            for y in z.imag:\n                print(y)\n            '''\n            for z1 in z4.real:\n                print(z1)\n            '''\n            print(z4.imag)\n            '''\n            z5 = z3.real.imag.conjugate()\n            # print(z5)\n            '''\n            for i in z5:\n                print(i)\n            '''\n            print(z5.imag)\n            '''\n            print(z.real)\n            '''\n            z6 = z3.real.imag.conjugate()\n            # print(z6)\n            '''\n            for i in z6:\n                print(i)\n            '''\n            print(z6.imag)\n            '''\n            z7 = z3.real.imag.conjugate()\n            # print(z7)\n            '''\n            for i in z7:\n                print(i)\n            '''\n            print(z7.imag)\n            '''\n            z8 = z3.imag.imag.conjugate()\n            # print(z8)\n            '''\n            for i in z8:\n                print(i)\n            '''\n            print(z8.imag)\n            '''\n            z9 = z3.imag.imag.conjugate()\n            # print(z9)\n            '''\n            for i in z9:\n                print(i)\n            '''\n            print(z9.imag)\n            '''\n            # print(z.imag)\n            # print(z.imag)\n            '''\n            print(z1.real)\n            print(z2.imag)\n            print(z3.imag)\n            print(z4.real)\n            print(z5.imag)\n            print(z6.real)\n            print(z7.imag)\n            print(z8.real)\n            print(z9.imag)\n            '''\n            '''\n            z1 = z.real\n            z2 = z.imag\n            '''\n            z1 = z.real.real\n            z2 = z.imag.imag\n            '''\n            '''\n            z3 = z3.real\n            z4 = z4.imag\n            '''\n            '''\n            z5 = z5.real\n            z6 = z6.imag\n            '''\n            '''\n            z7 = z7.real\n            z8 = z8.imag\n            '''\n            '''\n            z9 = z9.real\n            z10 = z10.imag\n            '''\n            '''\n            z1 = z1.real.real\n            z2 = z1.imag.imag\n            '''\n            '''\n            z1 = z1.imag.real\n            z2 = z2.imag.imag\n            '''\n            '''\n            z3 = z3.imag.real\n            z4 = z4.imag.imag\n            '''\n            '''\n            z5 = z5.imag.real\n            z6 = z6.imag.imag\n            '''\n            '''\n            z7 = z7.imag.real\n            z8 = z8.imag.imag\n            '''\n            '''\n            z9 = z9.imag.real\n            z10 = z10.imag.imag\n            '''\n            '''\n            z11 = z11.real.imag\n            z12 = z12.imag.real\n            '''\n            '''\n            z1 = z1.imag\n            z2 = z2.real\n            '''\n            '''\n            z3 = z3.real\n            z4 = z4.imag\n            '''\n            '''\n            z5 = z5.imag\n            z6 = z6.imag\n            '''\n            '''\n            z7 = z7.imag\n            z8 = z8.imag\n            '''\n            '''\n            z9 = z9.imag\n            z10 = z10.imag\n            '''\n            '''\n            z11 = z11.imag\n            z12 = z12.imag\n            '''\n            '''\n            z1 = z1.imag\n            z2 = z2.imag\n            '''\n            '''\n            z3 = z3.imag\n            z4 = z4.imag\n            '''\n            '''\n            z5 = z5.imag\n            z6 = z6.imag\n            '''\n            '''\n            z7 = z7.imag\n            z8 = z8.imag\n            '''\n            '''\n            z9 = z9.imag\n            z10 = z10.imag\n            '''\n            '''\n            z11 = z11.imag\n            z12 = z12.imag\n            '''\n            '''\n            z2 = z2.imag\n            z3 = z3.imag\n            '''\n            '''\n            z4 = z4.imag\n            z5 = z5.imag\n            '''\n            '''\n            z6 = z6.imag\n            z7 = z7.imag\n            '''\n            '''\n            z8 = z8.imag\n            z9 = z9.imag\n            '''\n            '''\n            z10 = z10.imag\n            z11 = z11.imag\n            '''\n            '''\n            z12 = z12.imag\n            z13 = z13.imag\n            '''\n            '''\n            z14 = z14.imag\n            z15 = z15.imag\n            '''\n            '''\n            z1 = z1.imag\n            z2 = z2.imag\n            '''\n            '''\n            z3 = z3.imag\n            z4 = z4.imag\n            '''\n            '''\n            z5 = z5.imag\n            z6 = z6.imag\n            '''\n            '''\n            z7 = z7.imag\n            z8 = z8.imag\n            '''\n            '''\n            z9 = z9.imag\n            z10 = z10.imag\n            '''\n            '''\n            z11 = z11.imag\n            z12 = z12.imag\n            '''\n            '''\n            z13 = z13.imag\n            z14 = z14.imag\n            '''\n            '''\n            z15 = z15.imag\n            z16 = z16.imag\n            '''\n            '''\n            z1 = z1.imag\n            z2 = z2.imag\n            '''\n            '''\n            z3 = z3.imag\n            z4 = z4.imag\n            '''\n            '''\n            z5 = z5.imag\n            z6 = z6.imag\n            '''\n            '''\n            z7 = z7.imag\n            z8 = z8.imag\n            '''\n            '''\n            z9 = z9.imag\n            z10 = z10.imag\n            '''\n            '''\n            z11 = z11.imag\n            z12 = z12"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #Convert complex numbers\n    #m2\u03c0 = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034877665059536423582103850669072227375526551811270872227940625\n    #m2radians = 6.2831853071795872\n    #radians2m = 3.1415926535897932384626433791\n    #a2radians = a * radians2m\n    #a2radians = a2 * radians2m\n    #c = m2\u03c0 * a2radians\n    #return c\n    c = complex(numbers[0], numbers[1])\n    m2pi = cmath.pi\n    m2rad = cmath.rect(1, m2pi/2)\n    m2radians = cmath.acos(numbers[2]/m2rad)\n    m2radians = m2radians * m2pi\n    radians2m = cmath.asin(numbers[2]/m2rad)\n    radians2m = radians2m * m2pi\n    a2rad = cmath.acos(numbers[3]/m2rad)\n    a2rad = a2rad * m2pi\n    a2radians = cmath.acos(numbers[4]/m2rad)\n    a2radians = a2radians * m2pi\n    #return a2radians\n    return (radians2m, a2radians)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    n = int(numbers[0])\n    z = int(numbers[1])\n    print(f'Conversion of complex numbers to polar coordinates in degree form')\n    \n    # CONVERTER\n    r = (cmath.sqrt(z))\n    print(f'R = {r}')\n    phi = (n*cmath.pi)\n    print(f'The polar angle of the complex number is at the degree = {phi}')\n    \n    # BASIC CALCULATION\n    phi = (cmath.pi/2) - phi\n    phi = (cmath.polar(phi))\n    print(f'The polar angle of the complex number is at the degree = {phi}')\n    print('\\n')\n    \n    return phi    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers)==complex:\n        return(round(complex(cmath.polar(numbers)),2),round(complex(cmath.polar(numbers)),2))\n    else:\n        raise TypeError('Input should be a complex number.')\n    return(None)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    try:\n        print(\"\\n-\\tConverting a complex number to polar coordinates \\n\")\n        print(\"\\n-\\tNote: Choose a negative sign \\n\")\n        print(\"\\n-\\t1. The magnitude of the complex number is positive\")\n        print(\"\\n-\\t2. The magnitude of the complex number is negative\")\n        \n        user_input = input(\"\\n-\\tInput: \")\n        \n        if user_input == \"1\":\n            magnitude = complex(input(\"\\n-\\tEnter the magnitude: \"))\n            print(\"\\n-\\tMagnitude: \", magnitude)\n            \n            angle = cmath.phase(magnitude)\n            print(\"\\n-\\tAngle: \", angle)\n        \n        elif user_input == \"2\":\n            magnitude = complex(input(\"\\n-\\tEnter the magnitude: \"))\n            print(\"\\n-\\tMagnitude: \", magnitude)\n            \n            angle = cmath.phase(magnitude)\n            print(\"\\n-\\tAngle: \", angle)\n        \n        else:\n            print(\"\\n-\\tNot a valid input. Please choose a number between 1 and 2.\")\n    except Exception:\n        print(\"\\n-\\tERROR: Invalid input. Please choose a number between 1 and 2.\")\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex = []\n    for i in range(len(numbers)):\n        if (type(numbers[i])==complex):\n            complex.append(numbers[i].real)\n            complex.append(numbers[i].imag)\n    return complex\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    radians = cmath.pi/180\n    return tuple(round(c, 2) for c in numbers.real ** 2 + numbers.imag ** 2)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    if len(list1) < 1:\n        print(\"List is empty\")\n        return 0\n    else:\n        number = 0\n        for i in list1:\n            if type(i) == int:\n                number += 1\n        print(number)\n        return number\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # YOUR CODE HERE\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    integer_elements = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            integer_elements += 1\n    return integer_elements\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    integer = 0\n    for i in list1:\n        if i.isdigit():\n            integer += 1\n    return integer\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # Write your code here\n    return len(list1)"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for el in list1:\n        if type(el) == int:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list_of_numbers = []\n    for number in list1:\n        if type(number) == int:\n            list_of_numbers.append(number)\n    return len(list_of_numbers)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num = 0\n    for i in list1:\n        if type(i) == int:\n            num += 1\n    return num\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l.sort()\n    result = []\n    for i in range(1, n + 1):\n        for j in combinations_with_replacement(l, i):\n            result.append(tuple(j))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[index:index+n]) for index in range(0, len(l), n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Create a list of the combination\n    comb_list = []\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Note: This list contains only the digits 1 through 9, so return a list\n    # convert the list to an int\n    list_of_digits = [int(i) for i in list(str(l))]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return [[]]\n    if n == 1:\n        return [[l[0]]]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    def colors():\n        colors = []\n        for i in range(0, n):\n            colors.append(list(combinations_with_replacement([a for a in range(0, n)], i + 1)))\n        return colors\n    return colors()\n    \ndef next_color(c):\n    '''\n    This function takes in the color and returns the next color.\n    '''\n    if c == [('red', 0), ('yellow', 0), ('green', 0)]:\n        return 'blue'\n    elif c == [('blue', 0), ('yellow', 0), ('green', 0)]:\n        return'red'\n    elif c == [('red', 0), ('yellow', 0), ('green', 0)]:\n        return 'green'\n    elif c == [('red', 0), ('yellow', 0), ('green', 0)]:\n        return 'blue'\n    elif c == [('yellow', 0), ('green', 0), ('blue', 0)]:\n        return'red'\n    elif c == [('yellow', 0), ('green', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('yellow', 0), ('green', 0), ('blue', 0)]:\n        return 'blue'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return'red'\n    elif c == [('blue', 0), ('yellow', 0), ('green', 0)]:\n        return 'green'\n    elif c == [('blue', 0), ('yellow', 0), ('green', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('blue', 0), ('yellow', 0), ('green', 0)]:\n        return 'green'\n    elif c == [('blue', 0), ('green', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('blue', 0), ('yellow', 0), ('green', 0)]:\n        return 'green'\n    elif c == [('blue', 0), ('yellow', 0), ('green', 0)]:\n        return 'green'\n    elif c == [('blue', 0), ('green', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('blue', 0), ('green', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('blue', 0), ('yellow', 0), ('green', 0)]:\n        return 'green'\n    elif c == [('blue', 0), ('yellow', 0), ('green', 0)]:\n        return 'green'\n    elif c == [('blue', 0), ('yellow', 0), ('green', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('yellow', 0), ('blue', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('blue', 0), ('yellow', 0), ('green', 0)]:\n        return 'green'\n    elif c == [('blue', 0), ('yellow', 0), ('green', 0)]:\n        return 'green'\n    elif c == [('blue', 0), ('green', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'green'\n    elif c == [('green', 0), ('blue', 0), ('yellow', 0)]:\n        return 'gree"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return [tuple(l)]\n    return [tuple([l[i] for i in range(n)]) for j in range(len(l))]\ndef is_palindrome(s):\n    '''\n    A function that takes in a string s and returns True if it is a palindrome.\n    '''\n    if s == s[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    lst = list(l)\n    for i in range(len(l)):\n        lst.append(lst[i])\n        for j in range(i+1, len(l)):\n            lst.append(lst[j])\n            lst.append(lst[i]*lst[j])\n    return lst\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = []\n    \n    def recurse(nums, start, end, res):\n        if start == end:\n            res.append(nums)\n            return\n        for i in range(start, end+1):\n            recurse(nums+[i], i+1, end, res)\n    \n    recurse([], 0, len(l), res)\n    return res\n    \ndef get_number_of_elements(l):\n    '''\n    Write a function that takes a list and returns the count of all the elements in the list.\n    '''\n    n = 0\n    for i in l:\n        n+=1\n    return n\n    \ndef combinations(l, n):\n    '''\n    Write a function that takes a list of numbers and length n, and generates all combinations of the elements of the list and returns a list of all possible combinations.\n    '''\n    res = []\n    \n    def recurse(nums, start, end, res):\n        if start == end:\n            res.append(nums)\n            return\n        for i in range(start, end+1):\n            recurse(nums+[i], i+1, end, res)\n    \n    recurse([], 0, len(l), res)\n    return res\n    \ndef get_number_of_elements_combinations(l, k):\n    '''\n    Write a function that takes a list of numbers and length n, and generates all combinations of the elements of the list with the given length and returns a list of all possible combinations of the elements of the list.\n    '''\n    res = []\n    n = len(l)\n    \n    def recurse(nums, start, end, res):\n        if start == end:\n            res.append(nums)\n            return\n        for i in range(start, end+1):\n            recurse(nums+[i], i+1, end, res)\n            \n    recurse([], 0, n-1, res)\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [list(combinations_with_replacement(l, r)) for r in range(n)]\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # YOUR CODE HERE\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_of_primes = 0\n    for x in range(1, n + 1):\n        if n % x == 0:\n            num_of_primes += 1\n    return num_of_primes\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if is_prime(i) == True:\n            result += 1\n    return result\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_list = []\n    for i in range(2,n):\n        if n%i==0:\n            prime_list.append(i)\n    return len(prime_list)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count_list = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            count_list.append(i)\n    return len(count_list)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for n in range(2,n):\n        if is_prime(n):\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for num in range(2, n):\n        isPrime = True\n        for i in range(2, num):\n            if num % i == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(num)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_num_list = [2]\n    count = 0\n    for x in range(3, n, 2):\n        if is_prime(x):\n            count += 1\n            prime_num_list.append(x)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n < 0:\n        return 0\n    else:\n        for i in range(2, n):\n            if i == 2 or i == n / 2:\n                continue\n            elif isprime(i):\n                count += 1\n    return count\n    \ndef isprime(n):\n    '''\n    Return True if n is a prime number, False otherwise.\n    '''\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a > b:\n        return (b,a)\n    else:\n        return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if (a == b):\n        return (a,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # \ud83d\udea8 Don't change the code below \ud83d\udc47\n    #Create a function named swapNumbers that takes two arguments.\n    #*a represents the first number\n    #*b represents the second number\n    #Return a tuple with the first number and the second number.\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = int(a)\n    b = int(b)\n    a, b = b, a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a<b:\n        a,b = b,a\n    tuple_1 = a\n    tuple_2 = b\n    return tuple_2,tuple_1\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    result = (b,a)\n    return result\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    \n    if a > b:\n        return (b,a)\n    else:\n        return (a,b)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print(\"\\nShowing the maximum element in each tuple:\")\n    max_test = []\n    for i in range(len(test_tup1)):\n        # print(test_tup1[i])\n        print(f\"{test_tup1[i]} is the maximum element in tuple {test_tup1[i]}\")\n        max_test.append(test_tup1[i])\n    # print(max_test)\n    max_tuple = max(max_test)\n    print(f\"\\nMaximum element in each tuple in this tuple:\")\n    for i in range(len(test_tup1)):\n        print(f\"{test_tup1[i]} is the maximum element in tuple {test_tup1[i]}\")\n    print(f\"\\nMaximum element in this tuple:\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == max_tuple:\n            print(f\"{test_tup1[i]} is the maximum element in tuple {test_tup1[i]}\")\n    print(f\"\\nMaximum element in all the tuples:\")\n    for i in range(len(test_tup1)):\n        print(f\"{test_tup1[i]} is the maximum element in tuple {test_tup1[i]}\")\n    return max_tuple\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print('Eliminando os NaN')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            test_tup1.remove(test_tup1[i])\n            test_tup2.remove(test_tup2[i])\n    print('Finaliza\u00e7\u00e3o do Programa')\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return test_tup2, test_tup1\n    elif len(test_tup1) > len(test_tup2):\n        return test_tup1, test_tup2\n    else:\n        print(test_tup1)\n        print(test_tup2)\n        if test_tup1[0] < test_tup2[0]:\n            return test_tup2, test_tup1\n        elif test_tup1[0] > test_tup2[0]:\n            return test_tup1, test_tup2\n        else:\n            return test_tup1, test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    def max_elem_list(n):\n        max_list = []\n        for i in n:\n            if len(max_list) == 0 or i > max_list[-1]:\n                max_list.append(i)\n            else:\n                max_list[-1] = max(i, max_list[-1])\n        return max_list\n    \n    t1 = max_elem_list(test_tup1)\n    t2 = max_elem_list(test_tup2)\n    \n    return max_elem_list(t1), max_elem_list(t2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Your code here\n    a = test_tup1[0]\n    b = test_tup1[1]\n    c = test_tup2[0]\n    d = test_tup2[1]\n    \n    return (a > b and a > c and a > d)\n    \n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #Initialize variables\n    max_value = 0\n    min_value = 100\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # write your code here\n    sorted_tup = sorted(test_tup1 + test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Find the prime number\n    for i in range(2, n):\n        if (n % i == 0):\n            return False\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    num = 1\n    i = 0\n    while i < n: \n        if (n % 2 == 1 and n!= 2) or (n % 2 == 0 and n!= 3): \n            n = n + 1\n        i = i + 1\n        num = num * n \n    return num\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        a = 1\n        for i in range(n-1):\n            a = a*(i+1)\n        return a\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert n >= 2\n    primes = [2]\n    primes.extend(sieve_to_list(n))\n    num = 2\n    while num in primes:\n        num += 2\n    return num\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    while i < n: \n        # i is the sum of the nth newman\u2013shanks\u2013williams prime numbers.\n        k = 1\n        # k is the next kth prime.\n        for j in range(2, n+1):\n            if j % i == 0: \n                k = k+1\n                if k == n: \n                    return i\n        i = i+1\n    return -1\n    \ndef prime_sum(n): \n    '''\n    Write a function to find the sum of all primes up to and including n.\n    '''\n    s = 0\n    for i in range(1, n+1): \n        if is_prime(i): \n            s = s + i \n    return s\n    \ndef get_prime_numbers(n): \n    '''\n    Return a list of the nth prime numbers up to and including n.\n    '''\n    l = [2]\n    while len(l) < n: \n        if n % l[-1] == 0: \n            l.append(l[-1]) \n        else: \n            l.append(l[-1] + l[-2]) \n    return l\n        \ndef get_sum_numbers(n): \n    '''\n    Return the sum of all nth prime numbers up to and including n.\n    '''\n    return prime_sum(n) - get_prime_numbers(n)[n]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #Recursive method\n    def prime_rec(n,p):\n        if n==1 or n==2 or n==3 or n==4 or n==5 or n==6 or n==7:\n            return True\n        if n%2==0:\n            return False\n        if n%3==0:\n            return False\n        if n%p==0:\n            return False\n        else:\n            return prime_rec(n/3,p*3) or prime_rec(n/p,p*p)\n    #Iterative method\n    result = []\n    for i in range(1,n+1):\n        if prime_rec(i,i):\n            result.append(i)\n    return result[n-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0: \n        return 1\n    if n == 1: \n        return 2\n    if n == 2: \n        return 3\n    if n % 2 == 0: \n        return 0\n    else: \n        n1 = n//2\n        n2 = n//3\n        for i in range(n1, n): \n            if newman_prime(i) == 1: \n                return i\n        for j in range(n2, n): \n            if newman_prime(j) == 1: \n                return j\n        return 1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime=[]\n    for i in range(2,n+1):\n        if (i%2==0):\n            prime.append(i)\n        else:\n            for j in range(i//2,0,-2):\n                if ((i % j) == 0):\n                    break\n                else:\n                    pass\n            else:\n                prime.append(i)\n    if(len(prime)==0):\n        return False\n    else:\n        return prime[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    s = 2\n    while s**2 <= n:\n        if s**2 % n == 1:\n            return False\n        else:\n            s += 1\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    d = 2 \n    while d*d <= n: \n        if n % d == 0: \n            n = n/d \n            break\n        d += 1\n    return n \n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # TO-DO: implement this function\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_list = []\n    for element in test_tup2:\n        if len(element) == 2:\n            test_list.append(element[0])\n        else:\n            test_list.append(element)\n    return test_list\n    \n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    a = []\n    b = []\n    a.append(tuple(test_tup1))\n    b.append(tuple(test_tup2))\n    return a, b\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    #this will find the middle value of the tuple\n    mid = len(test_tup1) // 2\n    #this will find the first value in the tuple\n    first_value = test_tup1[mid]\n    #this will find the second value in the tuple\n    second_value = test_tup2[mid]\n    \n    if second_value == 0:\n        return(None)\n    \n    else:\n        return(first_value / second_value)\n    \n    return(None)\n    \n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #TODO: Add a docstring explaining the function\n    \n    return(list(map(lambda x, y: x/y, test_tup1, test_tup2)))\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def division(test_tup, other_tup):\n        '''\n        Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n        '''\n        return test_tup[0] // other_tup[0], test_tup[1] // other_tup[1]\n    \n    test_tup1 = [tup1 for tup1, tup2 in zip(test_tup1, test_tup2) if tup1!= tup2]\n    test_tup2 = [tup2 for tup1, tup2 in zip(test_tup1, test_tup2) if tup1!= tup2]\n    \n    test_tup = [tup1 for tup1, tup2 in zip(test_tup1, test_tup2) if tup1!= tup2]\n    test_tup_div = [division(tup1, other_tup) for tup1, other_tup in zip(test_tup1, test_tup2)]\n    \n    test_tup = list(test_tup)\n    test_tup_div = list(test_tup_div)\n    test_tup = [tup_div[0] for tup_div in test_tup_div]\n    test_tup = [tup_div[1] for tup_div in test_tup_div]\n    \n    return test_tup\n    \ndef divide_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def divide(test_tup, other_tup):\n        '''\n        Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n        '''\n        return test_tup[0] // other_tup[0], test_tup[1] // other_tup[1]\n    \n    test_tup1 = [tup1 for tup1, tup2 in zip(test_tup1, test_tup2) if tup1!= tup2]\n    test_tup2 = [tup2 for tup1, tup2 in zip(test_tup1, test_tup2) if tup1!= tup2]\n    \n    test_tup = [tup1 for tup1, tup2 in zip(test_tup1, test_tup2) if tup1!= tup2]\n    test_tup_div = [divide(tup1, other_tup) for tup1, other_tup in zip(test_tup1, test_tup2)]\n    \n    test_tup = list(test_tup)\n    test_tup_div = list(test_tup_div)\n    test_tup = [tup_div[0] for tup_div in test_tup_div]\n    test_tup = [tup_div[1] for tup_div in test_tup_div]\n    \n    return test_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = 1\n    for i in test_tup1:\n        result = result * i\n    for i in test_tup2:\n        result = result / i\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_list = []\n    for num in test_tup1:\n        test_list.append(num / test_tup2[0])\n    print(\"\\n\\n\\nTEST RESULTS:\")\n    print(test_list)\n    return(test_list)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [tup1[i] / tup2[i] for i in range(len(tup1))]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print(test_tup1, test_tup2)\n    return tuple([i/j for i,j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L] + [list1[:L]] + list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result = []\n    for i in list1:\n        if len(result)<L:\n            result.append(i)\n        elif len(result)==L:\n            result.append(i)\n    return tuple(result)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # write your code here\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Return tuple if L is empty\n    if len(list1) == 0:\n        return list1, None\n    \n    # Calculate the length of the first part\n    i = 0\n    while i < len(list1):\n        if len(list1[i:]) < L:\n            return None, list1\n        i += 1\n    \n    # Create the first part of the list\n    # - Append the last element of the list to the first part\n    # - Remove the last element of the first part from the list\n    last = list1.pop()\n    \n    # Remove the last element of the second part from the list\n    list1.pop()\n    \n    # Return tuple (list1, list2)\n    return list1, last\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    count = 0\n    result = []\n    for i in range(len(list1)):\n        if len(list1[i]) >= L:\n            result.append(list1[i][:L])\n            count += 1\n        else:\n            result.append(list1[i])\n    return result, count\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[0:L],list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 1:\n        return [list1], (len(list1), 1)\n    elif L > 1:\n        return split_two_parts(list1, L//2) + [list1[:L//2], list1[L//2:]], (len(list1), L//2)\n    else:\n        return list1, (len(list1), 1)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = list1[0:L]\n    b = list1[L:len(list1)]\n    return a,b\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return tuple(list1[0:L]), tuple(list1[L:])\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 1 and h_age < 2:\n        return 'A dog'\n    elif h_age >= 2 and h_age < 5:\n        return 'BOG'\n    elif h_age >= 5 and h_age < 8:\n        return 'COLD'\n    elif h_age >= 8 and h_age < 12:\n        return 'DOG'\n    elif h_age >= 12:\n        return 'GIRL'\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 3:\n        return \"Your dog is \" + str(h_age) + \" years old.\"\n    elif h_age < 5:\n        return \"Your dog is \" + str(h_age) + \" years old.\"\n    else:\n        return \"Your dog is \" + str(h_age) + \" years old.\"\n    \n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE\n    # def dog_age(h_age):\n    #     return h_age / 12.0\n    \n    return h_age / 12.0\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return f\"{h_age} Years in dog's age.\"\n    elif h_age <= 4:\n        return f\"{h_age} Years dog's age is {h_age - 2} Years.\"\n    elif h_age <= 6:\n        return f\"{h_age} Years dog's age is {h_age - 4} Years.\"\n    elif h_age <= 8:\n        return f\"{h_age} Years dog's age is {h_age - 6} Years.\"\n    else:\n        return f\"{h_age} Years dog's age is {h_age - 8} Years.\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 365\n    print('It is', age, 'years old.')\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age*365\n    return(dog_age)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 365 * 24 * 7\n    return age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age) + 5\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_ages = []\n    for dog in h_age:\n        if dog < 35:\n            dog_ages.append(0)\n        elif dog < 45:\n            dog_ages.append(1)\n        else:\n            dog_ages.append(2)\n    return dog_ages\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n    if h_age >= 0:\n        dog_years = 1\n    elif h_age <= -1:\n        dog_years = -1\n    return f'{h_age} years old is {dog_years} years old'\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # YOUR CODE HERE\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # list to store result\n    res = []\n    # for every value in the list\n    for i in range(0, len(S), step):\n        # create a temporary string\n        temp = \"\"\n        # for every value in the list\n        for j in range(i, min(i + step, len(S))):\n            # convert the value to a string,\n            # if it's a positive number\n            if S[j] > 0:\n                # add it to the temporary string\n                temp += S[j]\n            else:\n                # add the value to the temporary string\n                # if it's a negative number,\n                # then add the value to the final string\n                if j + 1 < len(S):\n                    temp += S[j + 1]\n                break\n        # append the temporary string to the result list\n        res.append(temp)\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # NOTE: DO NOT USE LIST COMPREHENSION!\n    # NOTE: DO NOT DO A RECURSION!\n    # NOTE: DO NOT DO A FOR LOOP!\n    return [[S[i * step:(i + 1) * step]] for i in range(len(S) // step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lists = []\n    for i in range(0, len(S), step):\n        lists.append(S[i:i+step])\n    return lists\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        raise ValueError(\"step must be greater than 0\")\n    result = []\n    for i in range(0,len(S),step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = int(math.sqrt(len(S)))\n    split = [[] for i in range(n)]\n    for i in range(len(S)):\n        split[int(math.sqrt(len(S))) - 1 - i % n].append(S[i])\n    return split\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    assert step>=1\n    assert step>=2\n    assert step>=3\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = []\n    for i in range(0, len(S), step):\n        lst.append(S[i:i + step])\n    return lst\n    \n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    for i in range(0, len(S), step):\n        l.append(S[i:i+step])\n    return l\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side = l/2\n    area = side**2\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #loops through each row and prints the dimension\n    for row in range(0,l):\n        #loops through each column and prints the dimension\n        for column in range(0,l):\n            #prints the dimension for the cube\n            print('\\t',row,'\\t',column,'\\t',l,'\\t',row*l,'\\t',column*l,'\\t',l*l,'\\t',row*l*l,'\\t',column*l*l,'\\t',l*l*l*l)\n        #updates the dimensions\n        row+=1\n    #returns the total volume of the cube\n    return l*l*l*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    raise NotImplementedError(\"\"\"\n    This function should return None if the length of the side does not divide evenly into the sides of the cube.\n    Use this function when calculating the lateral surface area of a cube.\n    \n    >>> import math\n    >>> l = lambda x: x ** 2\n    >>> l(1) # sqrt(2)\n    1\n    \n    >>> l(2) # sqrt(4)\n    6\n    \n    >>> l(3) # sqrt(8)\n    40\n    \n    >>> l(4) # sqrt(16)\n    24.666666666666666666666666667\n    \n    >>> l(5) # sqrt(32)\n    32\n    \n    >>> l(6) # sqrt(64)\n    32\n    \n    >>> l(7) # sqrt(128)\n    128.75\n    \n    >>> l(8) # sqrt(256)\n    256\n    \n    >>> l(9) # sqrt(512)\n    512\n    \n    >>> l(10) # sqrt(1024)\n    1024\n    \n    >>> l(11) # sqrt(2048)\n    2048\n    '''\n    return None\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print(l)\n    from math import sqrt\n    area = 0\n    for i in range(4):\n        if i == 0 or i == 3:\n            area += l * l\n        else:\n            area += l * l * sqrt(5)\n    print(area)\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = l / 2.0\n    a = (4 * (l ** 2)) + (6 * l * (l ** 2))\n    return a\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    from shapes import cube_lateral_area\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #print(l)\n    import math\n    import sympy\n    import numpy as np\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return np.sum(np.sqrt(1 + l[0]**2 + l[1]**2 + l[2]**2)**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import pi\n    a = (l * 0.5 * (3.14 * 2 ** 0.5) ** 2) / 360\n    area = (4 * pi * a) / 3\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if (i % 2 == 0):\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum=sum+i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s=0\n    for i in range(0,n):\n        s=s+(n-i)**2\n    return s\nprint(square_Sum(5))    "
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += i**2\n    return result\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum+=i*i\n        i+=1\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if(i % 2 == 0):\n            result += i ** 2\n    return result\n    \nprint(square_Sum(10))\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 1:\n        return 0\n    sum = 0\n    for i in range(1,n+1):\n        if (i % 2 == 0):\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for x in range(1,n+1):\n        sum+=x**2\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = n*(n+1)/2\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    return find_star_num(n-1) * n\n    \ndef find_star_num(n): \n    '''\n    Given a positive integer N, find then'th star number.\n    '''\n    if n <= 1:\n        return 1\n    \n    return n*(n-1)//2\n    \ndef find_taylor(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return find_taylor(n-1,M,H-1) * (n-1)**(M/2) * (n-1)**(M/2-1)\n    \ndef find_taylor_num(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return find_taylor_num(n-1,M,H-1) * (n-1)**(M/2) * (n-1)**(M/2-1)\n    \ndef find_taylor_num_inv(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return find_taylor_num_inv(n-1,M,H-1) * (n-1)**(M/2) * (n-1)**(M/2-1)\n    \ndef find_dependence_diff(n,M,H):\n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return find_dependence_diff(n-1,M,H-1) * (n-1)**(M/2) * (n-1)**(M/2-1)\n    \ndef find_dependence_diff_inv(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return find_dependence_diff_inv(n-1,M,H-1) * (n-1)**(M/2) * (n-1)**(M/2-1)\n    \ndef find_r_squared(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return (n-1)**(M/2) * (n-1)**(M/2-1) / ((1 + (n-1)**(M/2))**2)\n    \ndef find_r_squared_inv(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return (n-1)**(M/2) * (n-1)**(M/2-1) / ((1 + (n-1)**(M/2))**2)\n    \ndef find_r_squared_num(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return (n-1)**(M/2) * (n-1)**(M/2-1) / (n**(M/2-1) + (1 + (n-1)**(M/2))**(M/2))\n    \ndef find_r_squared_num_inv(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return (n-1)**(M/2) * (n-1)**(M/2-1) / ((1 + (n-1)**(M/2))**2)\n    \ndef find_r_squared_num_inv_inv(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return (n-1)**(M/2) * (n-1)**(M/2-1) / (n**(M/2-1) + (1 + (n-1)**(M/2))**(M/2))\n    \ndef find_r_squared_inv_num_inv(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return (n-1)**(M/2) * (n-1)**(M/2-1) / (n**(M/2-1) + (1 + (n-1)**(M/2))**(M/2))\n    \ndef find_r_squared_inv_num_inv_inv(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return (n-1)**(M/2) * (n-1)**(M/2-1) / (n**(M/2-1) + (1 + (n-1)**(M/2))**(M/2))\n    \ndef find_taylor_num_inv_1(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return (n-1)**(M/2) * (n-1)**(M/2-1) * (n-1)**(M/2-1) * (n-1)**(M/2-2)\n    \ndef find_taylor_num_inv_1_inv(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return (n-1)**(M/2) * (n-1)**(M/2-1) * (n-1)**(M/2-2) * (n-1)**(M/2-3) * (n-1)**(M/2-4)\n    \ndef find_taylor_num_inv_1_inv_inv(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return (n-1)**(M/2) * (n-1)**(M/2-1) * (n-1)**(M/2-2) * (n-1)**(M/2-3) * (n-1)**(M/2-4) * (n-1)**(M/2-5) * (n-1)**(M/2-6) * (n-1)**(M/2-7)\n    \ndef find_taylor_num_inv_1_inv_inv(n,M,H): \n    '''\n    Given an n,m,h, find then'th Taylor number.\n    '''\n    if n <= 1:\n        return 1\n    return (n-1)**(M/2) * (n-1)**(M/2-1) * (n-1)**(M/2-2) * (n-1)**(M/2-3) * (n-1)**(M/2-4) * (n-1)**(M/2-5) * (n-1)**(M/2-6) * (n-1)**(M/2-7) * (n-1)**(M/2-8) * (n-1)**(M/2-9) * (n-"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    x,y=0,0\n    for i in range(n):\n        x,y=y,x+y\n        if x==0:\n            return i+1\n    return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(n, 0, -1): \n        if isprime(i): \n            return i \n        else: \n            return 0\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    temp = int(n) \n    for i in range(1, temp): \n        if i * (i+1) == n: \n            return i \n    return None \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    numbers.reverse()\n    \n    for i in range(n):\n        if (numbers[i] + numbers[i+1]) in numbers:\n            print(numbers[i], end =\" \")\n        else:\n            print(numbers[i], end = \" \")\n        \n    \n    \n    \nif __name__ == \"__main__\":\n    find_star_num(5)"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    if n == 0 or n == 1:\n        return n\n    else:\n        return n % 10\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = n % 1 + 2\n    if n % 2 == 1:\n        return n - 1\n    else:\n        return n - 3\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n<2:\n        print(n)\n        return\n    if n==2 or n==3:\n        print(n)\n        return\n    if n==4 or n==5:\n        print(n)\n        return\n    if n==6 or n==7:\n        print(n)\n        return\n    if n==8 or n==9:\n        print(n)\n        return\n    if n==10 or n==11:\n        print(n)\n        return\n    if n==12 or n==13:\n        print(n)\n        return\n    if n==14 or n==15:\n        print(n)\n        return\n    if n==16 or n==17:\n        print(n)\n        return\n    if n==18 or n==19:\n        print(n)\n        return\n    if n==20 or n==21:\n        print(n)\n        return\n    if n==22 or n==23:\n        print(n)\n        return\n    if n==24 or n==25:\n        print(n)\n        return\n    if n==26 or n==27:\n        print(n)\n        return\n    if n==28 or n==29:\n        print(n)\n        return\n    if n==30 or n==31:\n        print(n)\n        return\n    if n==32 or n==33:\n        print(n)\n        return\n    if n==34 or n==35:\n        print(n)\n        return\n    if n==36 or n==37:\n        print(n)\n        return\n    if n==38 or n==39:\n        print(n)\n        return\n    if n==40 or n==41:\n        print(n)\n        return\n    if n==42 or n==43:\n        print(n)\n        return\n    if n==44 or n==45:\n        print(n)\n        return\n    if n==46 or n==47:\n        print(n)\n        return\n    if n==48 or n==49:\n        print(n)\n        return\n    if n==50 or n==51:\n        print(n)\n        return\n    if n==52 or n==53:\n        print(n)\n        return\n    if n==54 or n==55:\n        print(n)\n        return\n    if n==56 or n==57:\n        print(n)\n        return\n    if n==58 or n==59:\n        print(n)\n        return\n    if n==60 or n==61:\n        print(n)\n        return\n    if n==62 or n==63:\n        print(n)\n        return\n    if n==64 or n==65:\n        print(n)\n        return\n    if n==66 or n==67:\n        print(n)\n        return\n    if n==68 or n==69:\n        print(n)\n        return\n    if n==70 or n==71:\n        print(n)\n        return\n    if n==72 or n==73:\n        print(n)\n        return\n    if n==74 or n==75:\n        print(n)\n        return\n    if n==76 or n==77:\n        print(n)\n        return\n    if n==78 or n==79:\n        print(n)\n        return\n    if n==80 or n==81:\n        print(n)\n        return\n    if n==82 or n==83:\n        print(n)\n        return\n    if n==84 or n==85:\n        print(n)\n        return\n    if n==86 or n==87:\n        print(n)\n        return\n    if n==88 or n==89:\n        print(n)\n        return\n    if n==90 or n==91:\n        print(n)\n        return\n    if n==92 or n==93:\n        print(n)\n        return\n    if n==94 or n==95:\n        print(n)\n        return\n    if n==96 or n==97:\n        print(n)\n        return\n    if n==98 or n==99:\n        print(n)\n        return\n    if n==100 or n==101:\n        print(n)\n        return\n    if n==102 or n==103:\n        print(n)\n        return\n    if n==104 or n==105:\n        print(n)\n        return\n    if n==106 or n==107:\n        print(n)\n        return\n    if n==108 or n==109:\n        print(n)\n        return\n    if n==110 or n==111:\n        print(n)\n        return\n    if n==112 or n==113:\n        print(n)\n        return\n    if n==114 or n==115:\n        print(n)\n        return\n    if n==116 or n==117:\n        print(n)\n        return\n    if n==118 or n==119:\n        print(n)\n        return\n    if n==120 or n==121:\n        print(n)\n        return\n    if n==122 or n==123:\n        print(n)\n        return\n    if n==124 or n==125:\n        print(n)\n        return\n    if n==126 or n==127:\n        print(n)\n        return\n    if n==128 or n==129:\n        print(n)\n        return\n    if n==130 or n==131:\n        print(n)\n        return\n    if n==132 or n==133:\n        print(n)\n        return\n    if n==134 or n==135:\n        print(n)\n        return\n    if n==136 or n==137:\n        print(n)\n        return\n    if n==138 or n==139:\n        print(n)\n        return\n    if n==140 or n==141:\n        print(n)\n        return\n    if n==142 or n==143:\n        print(n)\n        return\n    if n==144 or n==145:\n        print(n)\n        return\n    if n==146 or n==147:\n        print(n)\n        return\n    if n==148 or n==149:\n        print(n)\n        return\n    if n==150 or n==151:\n        print(n)\n        return\n    if n==152 or n==153:\n        print(n)\n        return\n    if n==154 or n==155:\n        print(n)\n        return\n    if n==156 or n==157:\n        print(n)\n        return\n    if n==158 or n==159:\n        print(n)\n        return\n    if n==160 or n==161:\n        print(n)\n        return\n    if n==162 or n==163:\n        print(n)\n        return\n    if n==164 or n==165:\n        print(n)\n        return\n    if n==166 or n==167:\n        print(n)\n        return\n    if n==168 or n==169:\n        print(n)\n        return\n    if n==170 or n==171:\n        print(n)\n        return\n    if n==172 or n==173:\n        print(n)\n        return\n    if n==174 or n==175:\n        print(n)\n        return\n    if n==176 or n==177:\n        print(n)\n        return\n    if n==178 or n==179:\n        print(n)\n        return\n    if n==180 or n==181:\n        print(n)\n        return\n    if n==182 or n==183:\n        print(n)\n        return\n    if n==184 or n==185:\n        print(n)\n        return\n    if n==186 or n==187:\n        print(n)\n        return\n    if n==188 or n==189:\n        print(n)\n        return\n    if n==190 or n==191:\n        print(n)\n        return\n    if n==192 or n==193:\n        print(n)\n        return\n    if n==194 or n==195:\n        print(n)\n        return\n    if n==196 or n==197:\n        print(n)\n        return\n    if n==198 or n==199:\n        print(n)\n        return\n    if n==200 or n==201:\n        print(n)\n        retur"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    c = ord(k)\n    if c > 127:\n        c = ord('a')\n    return c\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k < 32:\n        return chr(k)\n    elif k < 128:\n        return chr(k - 127)\n    else:\n        return chr(k - 123)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == None:\n        return None\n    if k >= '0' and k <= '9':\n        return ord(k)\n    else:\n        return None\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    val = ord(k)\n    if val > 127:\n        return 'ERROR:'+ str(val)\n    else:\n        return val\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= 256:\n        return k - 256\n    else:\n        return ord(chr(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= 256:\n        raise ValueError('Character {0} is out of bounds.'.format(k))\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # your code here\n    return ord(k)-33\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k) - ord('a') + 1\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for index in range(len(arr)):\n        if index % 2 == 0:\n            sum += arr[index]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            even_sum+=arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (arr[i] % 2 == 0):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # find out the length of the array\n    even_length = len(arr)\n    # find out if it is even or not\n    if (even_length % 2 == 0):\n        even_length = even_length//2\n        # find out the even numbers at the even positions\n        even_numbers = []\n        for i in range(0,even_length):\n            if (arr[i] % 2 == 0):\n                even_numbers.append(arr[i])\n        # sum the even numbers\n        sum = sum(even_numbers)\n    else:\n        print(\"The array does not have even numbers.\")\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    index = 0\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    sum = 0\n    for i in arr:\n        if i % 2 == 0:\n            even_sum += i\n            sum += i\n    print(f\"The sum of even numbers is {even_sum} and the sum of odd numbers is {sum}\")\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(i**5 for i in range(n)"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    else: \n        return n*even_Power_Sum(n-1) \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even = 0\n    for i in range(n, 0, -2):\n        if(i%2 == 0):\n            even += i\n    return(even)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    a = 0\n    while (n > 0):\n        a = a + (n**5)\n        n = n - 1\n    return a\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    ans = 0\n    n = n % 10\n    while n!= 0:\n        ans = ans + (n**5)\n        n = n // 10\n    return ans\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    for i in range(1, n + 1):\n        even_sum += i ** 5\n    return even_sum\n    \n    \ndef odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    odd_sum = 0\n    for i in range(1, n + 1):\n        odd_sum += i ** 5\n    return odd_sum\n    \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    for i in range(2, n+1):\n        x = i\n        while x > 0:\n            if x % 2!= 0:\n                x = x // 10\n                y = x * 5\n                z = y * 4\n                y = z * 4\n                y = z * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                y = y * 5\n                "
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if (n < 0):\n        print(\"Please enter a positive number\")\n        return -1\n    elif (n == 0):\n        return 0\n    else:\n        print(n)\n        return (n * (n + 1) * (n + 2))\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    temp = n\n    while(temp!= 0):\n        if(temp % 5 == 0):\n            print(temp)\n        temp = temp / 5\n    \ndef odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    temp = n\n    while(temp!= 0):\n        if(temp % 5 == 1):\n            print(temp)\n        temp = temp / 5\n    \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n,0,-1):\n        if i % 2 == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for tup in test_list:\n        rear.append(tup[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # YOUR CODE HERE\n    rear = []\n    for i in test_list:\n        rear.append(i[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for element in test_list:\n        rear.append(element[-1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        result.append(i[1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output = []\n    for i in test_list:\n        output.append(i[0])\n    return output\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for tup in test_list:\n        rear.append(tup[0])\n    return rear\n    \ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    front = []\n    for tup in test_list:\n        front.append(tup[1])\n    return front\n    \ndef remove_duplicates(test_list):\n    '''\n    Write a function that takes in a list and returns a list containing the elements of the list that appear only once.\n    '''\n    seen = set()\n    seen_set = set()\n    for elem in test_list:\n        if elem not in seen:\n            seen.add(elem)\n            if elem not in seen_set:\n                seen_set.add(elem)\n                if elem not in seen_set:\n                    seen_set.add(elem)\n    return seen_set\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # start with an empty list\n    rear_extract_list = []\n    # set the length of the list\n    length = len(test_list)\n    # iterate through each tuple in the list\n    for index in range(0, length):\n        # add the tuple in the front of the rear_extract list\n        rear_extract_list.insert(0, test_list[index][0])\n        # add the tuple in the end of the rear_extract list\n        rear_extract_list.append(test_list[index][1])\n    # return the list\n    return rear_extract_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[1])\n    return new_list\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    return\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Write your code here\n    tup1 = test_tup1\n    tup2 = test_tup2\n    result = []\n    for i in range(len(tup1)):\n        result.append(tup1[i]-tup2[i])\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    def substract_elements_list(test_tup1, test_tup2, test_list):\n        '''\n        Write a function that takes in two tuples, first and second, and returns a new tuple with the two elements in the new tuple removed.\n        '''\n        def item_list(test_list):\n            '''\n            Write a function that takes in a list and return a new list with the elements in the list removed.\n            '''\n            return test_list[1:], test_list[:-1]\n        \n        def item_index(test_tup2, test_tup1):\n            '''\n            Write a function that takes in a tuple and a list and returns a tuple with the elements of the first tuple removed from the second tuple and a tuple with the elements of the second tuple removed from the first tuple.\n            '''\n            temp = []\n            index = 1\n            for i in test_tup1:\n                temp.append(i)\n                index += 1\n            for i in test_tup2:\n                temp.append(i)\n                index += 1\n            return tuple(temp), tuple(item_list(temp)[1])\n        \n        temp = []\n        for i in test_tup1:\n            temp.append(i)\n        for i in test_tup2:\n            temp.append(i)\n        \n        temp, index = item_index(test_tup2, test_tup1)\n        new_list = []\n        for i in range(len(test_tup1)):\n            new_list.append(temp[i])\n        for i in range(len(test_tup1)):\n            new_list.append(temp[index - i - 1])\n        return tuple(new_list)\n    \n    def test_subtract_elements(test_tup1, test_tup2):\n        '''\n        Write a function that takes in two tuples and returns a new tuple with the elements in the first tuple minus the elements in the second tuple.\n        '''\n        def item_list(test_list):\n            '''\n            Write a function that takes in a list and returns a new list with the elements in the list minus the elements in the first tuple.\n            '''\n            return test_list[1:], test_list[:-1]\n        \n        def item_index(test_tup2, test_tup1):\n            '''\n            Write a function that takes in a tuple and a list and returns a tuple with the elements of the first tuple minus the elements of the second tuple and a tuple with the elements of the second tuple minus the elements of the first tuple.\n            '''\n            temp = []\n            index = 1\n            for i in test_tup1:\n                temp.append(i)\n                index += 1\n            for i in test_tup2:\n                temp.append(i)\n                index += 1\n            return tuple(temp), tuple(item_list(temp)[1])\n        \n        temp = []\n        for i in test_tup1:\n            temp.append(i)\n        for i in test_tup2:\n            temp.append(i)\n        \n        temp, index = item_index(test_tup2, test_tup1)\n        new_list = []\n        for i in range(len(test_tup1)):\n            new_list.append(temp[i])\n        for i in range(len(test_tup1)):\n            new_list.append(temp[index - i - 1])\n        return tuple(new_list)\n        \n    print(\"\\n\\nSubtraction is: \\n\\n\", substract_elements(test_tup1, test_tup2))\n    print(\"\\n\\nSubtraction is: \\n\\n\", substract_elements_list(test_tup1, test_tup2, test_list))\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Variables for test_tup1 and test_tup2\n    first_tuple = test_tup1\n    second_tuple = test_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple((x - y) for (x,y) in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if test_tup1[0]!= test_tup2[0]:\n        raise Exception(\"Tuples don't match\")\n    else:\n        if test_tup1[1]!= test_tup2[1]:\n            raise Exception(\"Tuples don't match\")\n        else:\n            if test_tup1[2]!= test_tup2[2]:\n                raise Exception(\"Tuples don't match\")\n            else:\n                if test_tup1[3]!= test_tup2[3]:\n                    raise Exception(\"Tuples don't match\")\n                else:\n                    return test_tup1[0] - test_tup2[0]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    i=0\n    print(f\"test_tup1 = {test_tup1}\")\n    print(f\"test_tup2 = {test_tup2}\")\n    for tup in test_tup1:\n        print(f\"item {i} = {tup}\")\n        i+=1\n    j=0\n    print(f\"test_tup2 = {test_tup2}\")\n    for tup in test_tup2:\n        print(f\"item {j} = {tup}\")\n        j+=1\n    def addition(tup1, tup2):\n        print(f\"test_tup1 = {tup1}\")\n        print(f\"test_tup2 = {tup2}\")\n        return tup1+tup2\n    for tup1 in test_tup1:\n        print(f\"item {j} = {tup1}\")\n        j+=1\n    def subtraction(tup1, tup2):\n        print(f\"test_tup1 = {tup1}\")\n        print(f\"test_tup2 = {tup2}\")\n        return tup1-tup2\n    for tup1 in test_tup1:\n        print(f\"item {j} = {tup1}\")\n        j+=1\n    return addition, subtraction\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = test_tup1 + (0,)\n    test_tup2 = test_tup2 + (0,)\n    test_tup3 = test_tup1 + test_tup2\n    return (test_tup3[1:])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    first_tuple = test_tup1[:]\n    for i in range(0, len(test_tup1)-1):\n        first_tuple.pop()\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through each item in the second tuple, subtract the item from item in the first tuple, and return the resulting sum\n    # in the following example\n    # sub_elements(('A', 'C'), ('B', 'D')) = ('A', 'B')\n    # sub_elements(('A', 'C'), ('B', 'D', 'E')) = ('A', 'C', 'E')\n    # sub_elements(('A', 'C'), ('B', 'D', 'E', 'F')) = ('A', 'C', 'E', 'F')\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x = 1\n    if n == 0:\n        return 1\n    else:\n        for i in range(n):\n            x *= (1 - math.pow(2, i))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Assume n is a positive integer and C is the number of counts of even binomial coefficients.\n    # compute C = n - 1/(n-1)\n    C = n - 1\n    total = 0\n    for i in range(n-1):\n        for j in range(i+1):\n            total += math.factorial(j) * math.factorial(C - j) / math.factorial(i + j)\n    return total\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # your code here\n    x = 1\n    y = 0\n    for i in range(1,n):\n        x *= (i+1)\n        y += x\n    return y\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    a = 1\n    for i in range(1, n + 1):\n        a = a * (i ** 2)\n    return a\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return n*math.log(n, 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 2:\n        return 0\n    if n <= 3:\n        return n\n    else:\n        return even_binomial_Coeff_Sum(n - 2) + even_binomial_Coeff_Sum(n - 3)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum += (even_binomial_Coeff_Sum(n - i - 1) * (2**(i - 1)))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    #print(\"n = \" + str(n))\n    for i in range(n+1): \n        if (i%2 == 0): \n            sum += (2**i) * math.factorial(i)\n        #print(str(i) + \" = \" + str(sum))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 2: \n        return 1; \n    return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # creating a dictionary of { n: { index : coeff } } \n    # - the coeffs are the possible binomials of n \n    # - the sum of the even_binomials is the sum of the coeffs of the binomials of n+1 \n    # - the sum of the odd_binomials is the sum of the coeffs of the binomials of n-1 \n    dict_of_binomials = {} \n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r*h)/2\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 1.00*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**2 * h**3\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #Your code here\n    #Hint 1: You can import the math module. You can use the math.pi as a constant.\n    #Hint 2: You can use the math.pow function to calculate the volume using the formula:\n    #            volume = r*r*h*h\n    #Hint 3: You can use the print function to print your code. You can do this with print('volume:' and volume_cylinder(r,h)\n    #            Using the print function\n    #        You can use a string to represent the variable and you can convert it to a float\n    #        If the volume is less than 0.0, you should use a print statement to display it\n    #        If the volume is greater than 0.0, you should use the float function to convert the volume to a number\n    return r*r*h*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*h*r**3\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 2*pi*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=r*4*h*4\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 0.5*r*h*3.14\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**3 * h**3\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            new[key] = dict[key]\n    return new\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    list_of_keys = dict.keys()\n    for key in list_of_keys:\n        if dict[key] >= n:\n            print(key)\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    out={}\n    for i in dict.keys():\n        if dict[i]>n:\n            out[i]=dict[i]\n    return out\n    \n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if not isinstance(dict,dict):\n        raise TypeError(\"dict must be a dictionary\")\n    \n    filtered = {}\n    for k,v in dict.items():\n        if not isinstance(v,int):\n            raise TypeError(\"values must be integers\")\n        if v >= n:\n            filtered[k] = v\n    \n    return filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for k,v in dict.items():\n        if isinstance(v,dict) and v >= n:\n            dict[k] = dict_filter(dict[k],n)\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if not isinstance(dict,dict):\n        raise TypeError('dict is not a dictionary')\n    \n    d = dict.copy()\n    for k in d.keys():\n        if k >= n:\n            d.pop(k)\n    return d\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.values() > n\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(list(filter(lambda x: x[1]<=test_tup[0][1], test_tup)))\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup)-test_tup.count(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Gathers the first element from the given tuple\n    first_element = test_tup[0]\n    # First array stores the values\n    values = []\n    # Stores the indices of the elements before first element\n    values_before_first_element = []\n    # Stores the first element of the array\n    first_element_value = test_tup[0]\n    # Stores the value of the first element\n    first_element_value_index = 0\n    # Stores the index of the first element\n    first_element_value_index_index = 0\n    # Stores the value of the first element\n    first_element_value_index_index_value = 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    if type(test_tup)!= tuple:\n        return 1\n    for i in test_tup:\n        count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for i in test_tup:\n        if test_tup.index(i) == 0:\n            test_tup.remove(i)\n        else:\n            return test_tup.count(i)\n    return test_tup.count(i)\ndef count_second_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i]!= i:\n            return test_tup.count(i)\n    return len(test_tup)\ndef count_first_and_second_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occur before the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == i:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_2(test_tup):\n    '''\n    Write a function to find the number of elements that occur before the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if i == 0:\n            test_tup.remove(test_tup[i])\n        elif test_tup[i] == i:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_3(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            test_tup.remove(test_tup[i])\n        elif test_tup[i + 1] == i:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_4(test_tup):\n    '''\n    Write a function to find the number of elements that occur before the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == i:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_5(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup) - 1):\n        if test_tup[i + 1] == test_tup[i]:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_6(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] == test_tup[i + 1]:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_7(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] == test_tup[i + 1]:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_8(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] == i:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_9(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] == test_tup[i + 1]:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_10(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] == test_tup[i + 1]:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_11(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup) - 2):\n        if test_tup[i] == test_tup[i + 1] and test_tup[i + 1] == i + 1:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_12(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] == test_tup[i + 1] and test_tup[i + 1] == i + 2:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_13(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] == test_tup[i + 1] and test_tup[i + 1] == i + 2:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_14(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] == i + 1:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_15(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] == test_tup[i + 1] and test_tup[i + 1] == i + 2:\n            test_tup.remove(test_tup[i])\n    return test_tup.count(i)\ndef count_first_and_second_elements_16(test_tup):\n    '''\n    Write a function to find the number of elements that occur after the tuple element in the given tuple.\n    '''\n    for "
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    count = 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    a=[]\n    for x in test_tup:\n        if x not in a:\n            a.append(x)\n    b=len(a)\n    if b==0:\n        return \"no element in the tuple\"\n    else:\n        return str(b)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    dict = {}\n    for item in test_tup:\n        if item in dict:\n            dict[item] += 1\n        else:\n            dict[item] = 1\n    return dict.values()\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    #the solution requires a few lines of code to perform the calculation\n    #the statement in this function is to calculate the length of the tuple, and iterate through every element of the tuple\n    #the length of the tuple is the number of elements before the tuple element\n    #the length of the tuple is the length of the list\n    #the length of the list is the number of elements in the list\n    #the length of the list is the number of elements after the tuple element\n    #the length of the list is the number of elements before the tuple element and after the tuple element\n    #the length of the list is the number of elements before the tuple element and after the tuple element\n    #the length of the list is the number of elements before the tuple element and after the tuple element and after the tuple element\n    #the length of the list is the number of elements before the tuple element and after the tuple element and after the tuple element\n    #the length of the list is the number of elements before the tuple element and after the tuple element and after the tuple element\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return n \n    if n == 1: \n        return 1 \n    if n % 2 == 0: \n        return is_num_decagonal(n - 1) + is_num_decagonal(n // 2) \n    else: \n        return is_num_decagonal(n // 2) + is_num_decagonal(n - 1) \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    # your code here\n    return\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 1\n    while a <= n:\n        b = 0\n        if n % 2 == 1:\n            while b < n:\n                a *= 2\n                b += 1\n        if a == n:\n            return True\n        a += 1\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x = str(n)\n    y = ''\n    for i in range(1,len(x)):\n        y += str(int(x[-i])*int(x[-i-1]))\n    return int(y)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return True\n    \n    if n % 2 == 1: \n        return False\n    \n    for i in range(1, n, 2): \n        if n % i == 0: \n            return False\n    \n    return True\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Note: this uses a set to avoid duplicate calculation\n    # This is also required in the if statement\n    #     # Note: in Python, this evaluates to True or False, \n    #     # the set is a collection of values and not just a boolean\n    if n == 0: \n        return True\n    elif n == 1: \n        return False\n    elif n == 2: \n        return True\n    else:\n        # find the square root of the number\n        # TODO: implement this\n        num = int(sqrt(n))\n        return is_num_decagonal(num)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x = n\n    count = 0\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    elif n == 2: \n        return 3\n    else: \n        return 4\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n        \ndef main():\n    '''\n    Testing the is_num_decagonal function.\n    '''\n    assert is_num_decagonal(0) == 0, \"0 is a non-decagonal number.\"\n    assert is_num_decagonal(1) == 1, \"1 is a non-decagonal number.\"\n    assert is_num_decagonal(2) == 2, \"2 is a non-decagonal number.\"\n    assert is_num_decagonal(3) == 3, \"3 is a non-decagonal number.\"\n    assert is_num_decagonal(4) == 4, \"4 is a non-decagonal number.\"\n    assert is_num_decagonal(5) == 5, \"5 is a non-decagonal number.\"\n    assert is_num_decagonal(6) == 6, \"6 is a non-decagonal number.\"\n    assert is_num_decagonal(7) == 7, \"7 is a non-decagonal number.\"\n    assert is_num_decagonal(8) == 8, \"8 is a non-decagonal number.\"\n    assert is_num_decagonal(9) == 9, \"9 is a non-decagonal number.\"\n    assert is_num_decagonal(10) == 10, \"10 is a non-decagonal number.\"\n    assert is_num_decagonal(11) == 11, \"11 is a non-decagonal number.\"\n    assert is_num_decagonal(12) == 12, \"12 is a non-decagonal number.\"\n    assert is_num_decagonal(13) == 13, \"13 is a non-decagonal number.\"\n    assert is_num_decagonal(14) == 14, \"14 is a non-decagonal number.\"\n    assert is_num_decagonal(15) == 15, \"15 is a non-decagonal number.\"\n    assert is_num_decagonal(16) == 16, \"16 is a non-decagonal number.\"\n    assert is_num_decagonal(17) == 17, \"17 is a non-decagonal number.\"\n    assert is_num_decagonal(18) == 18, \"18 is a non-decagonal number.\"\n    assert is_num_decagonal(19) == 19, \"19 is a non-decagonal number.\"\n    assert is_num_decagonal(20) == 20, \"20 is a non-decagonal number.\"\n    assert is_num_decagonal(21) == 21, \"21 is a non-decagonal number.\"\n    assert is_num_decagonal(22) == 22, \"22 is a non-decagonal number.\"\n    assert is_num_decagonal(23) == 23, \"23 is a non-decagonal number.\"\n    assert is_num_decagonal(24) == 24, \"24 is a non-decagonal number.\"\n    assert is_num_decagonal(25) == 25, \"25 is a non-decagonal number.\"\n    assert is_num_decagonal(26) == 26, \"26 is a non-decagonal number.\"\n    assert is_num_decagonal(27) == 27, \"27 is a non-decagonal number.\"\n    assert is_num_decagonal(28) == 28, \"28 is a non-decagonal number.\"\n    assert is_num_decagonal(29) == 29, \"29 is a non-decagonal number.\"\n    assert is_num_decagonal(30) == 30, \"30 is a non-decagonal number.\"\n    assert is_num_decagonal(31) == 31, \"31 is a non-decagonal number.\"\n    assert is_num_decagonal(32) == 32, \"32 is a non-decagonal number.\"\n    assert is_num_decagonal(33) == 33, \"33 is a non-decagonal number.\"\n    assert is_num_decagonal(34) == 34, \"34 is a non-decagonal number.\"\n    assert is_num_decagonal(35) == 35, \"35 is a non-decagonal number.\"\n    assert is_num_decagonal(36) == 36, \"36 is a non-decagonal number.\"\n    assert is_num_decagonal(37) == 37, \"37 is a non-decagonal number.\"\n    assert is_num_decagonal(38) == 38, \"38 is a non-decagonal number.\"\n    assert is_num_decagonal(39) == 39, \"39 is a non-decagonal number.\"\n    assert is_num_decagonal(40) == 40, \"40 is a non-decagonal number.\"\n    assert is_num_decagonal(41) == 41, \"41 is a non-decagonal number.\"\n    assert is_num_decagonal(42) == 42, \"42 is a non-decagonal number.\"\n    assert is_num_decagonal(43) == 43, \"43 is a non-decagonal number.\"\n    assert is_num_decagonal(44) == 44, \"44 is a non-decagonal number.\"\n    assert is_num_decagonal(45) == 45, \"45 is a non-decagonal number.\"\n    assert is_num_decagonal(46) == 46, \"46 is a non-decagonal number.\"\n    assert is_num_decagonal(47) == 47, \"47 is a non-decagonal number.\"\n    assert is_num_decagonal(48) == 48, \"48 is a non-decagonal number.\"\n    assert is_num_decagonal(49) == 49, \"49 is a non-decagonal number.\"\n    assert is_num_decagonal(50) == 50, \"50 is a non-decagonal number.\"\n    assert is_num_decagonal(51) == 51, \"51 is a non-decagonal number.\"\n    assert is_num_decagonal(52) == 52, \"52 is a non-decagonal number.\"\n    assert is_num_decagonal(53) == 53, \"53 is a non-decagonal number.\"\n    assert is_num_decagonal(54) == 54, \"54 is a non-decagonal number.\"\n    assert is_num_decagonal(55) == 55, \"55 is a non-decagonal number.\"\n    assert is_num_decagonal(56) == 56, \"56 is a non-decagonal number.\"\n    assert is_num_decagonal(57) == 57, \"57 is a non-decagonal number.\"\n    assert is_num_decagonal(58) == 58, \"58 is a non-decagonal number.\"\n    assert is_num_decagonal(59) == 59, \"59 is a non-decagonal number.\"\n    assert is_num_decagonal(60) == 60, \"60 is a non-decagonal number.\"\n    assert is_num_decagonal(61) == 61, \"61 is a non-decagonal number.\"\n    assert is_num_decagonal(62) == 62, \"62 is a non-decagonal number.\"\n    assert is_num_decagonal(63) == 63, \"63 is a non-decagonal number.\"\n    assert is_num_decagonal(64) == 64, \"64 is a non-decagonal number.\"\n    assert is_num_decagonal(65) == 65, \"65 is a non-decagonal number.\"\n    assert is_num_decagonal(66) == 66, \"66 is a non-decagonal number.\"\n    assert is_num_decagonal(67) == 67, \"67 is a non-decagonal number.\"\n    assert is_num_decagonal(68) == 68, \"68 is a non-decagonal number.\"\n    assert is_num_decagonal(69) == 69, \"69 is a non-decagonal number.\"\n    assert is_num_decagonal(70) == 70, \"70 is a non-decagonal number.\"\n    assert is_num_decagonal(71) == 71, \"71 is a non-decagonal number.\"\n    assert is_num_decagonal(72) == 72, \"72 is a non-decagonal number.\"\n    assert is_num_decagonal(73) == 73, \"73 is a non-decagonal number.\"\n    assert is_num_decagonal(74) == 74, \"74 is a non-decagonal number.\"\n    assert is_num_decagonal(75) == 75, \"75 is a non-decagonal number.\"\n    assert is_num_decagonal(76) == 76, \"76 is a non-decagonal numbe"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # This recursive function returns the nth decagonal number, if n is odd or even, else raises error\n    if n == 0:\n        raise ValueError(\"n must be greater than 0\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        for i in range(2, n + 1):\n            i = is_num_decagonal(i)\n            if i > 3:\n                return i\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, v in enumerate(dlist):\n        if v == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, v in enumerate(dlist):\n        if v == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if item not in dlist:\n        return (-1, -1)\n    index = dlist.index(item)\n    return (True, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n    return index, index\n    \ndef binary_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    first = 0\n    last = len(dlist)-1\n    found = -1\n    while first <= last:\n        middle = (first + last)//2\n        if dlist[middle] == item:\n            found = True\n            break\n        elif dlist[middle] < item:\n            first = middle + 1\n        else:\n            last = middle - 1\n    return found\n    \ndef insertion_sort(dlist):\n    '''\n    Write a function that takes an array and returns an array sorted in ascending order.\n    '''\n    for i in range(1, len(dlist)):\n        value = dlist[i]\n        j = i-1\n        while j >= 0 and value < dlist[j]:\n            dlist[j+1] = dlist[j]\n            j = j-1\n        dlist[j+1] = value\n        \n    return dlist\n    \ndef merge_sort(dlist):\n    '''\n    Write a function that takes an array and returns an array sorted in ascending order.\n    '''\n    def merge(array, first, second):\n        '''\n        Calls the merge function that takes a list and the first index position and second index position and returns an array containing the merged list.\n        '''\n        left = second\n        right = first\n        final = []\n        while left < len(array) and right < len(array):\n            if array[left] < array[right]:\n                final.append(array[left])\n                left += 1\n            else:\n                final.append(array[right])\n                right += 1\n        while left < len(array):\n            final.append(array[left])\n            left += 1\n        while right < len(array):\n            final.append(array[right])\n            right += 1\n        array = final\n        \n    if len(dlist) > 1:\n        mid = len(dlist)//2\n        left = dlist[:mid]\n        right = dlist[mid:]\n        merge(left, 0, mid - 1)\n        merge(right, mid, len(dlist) - mid)\n        \n    return dlist\n    \ndef quick_sort(dlist, first, last):\n    '''\n    Write a function that takes an array and returns an array sorted in ascending order.\n    '''\n    if first < last:\n        partition_index = partition(dlist, first, last)\n        quick_sort(dlist, first, partition_index - 1)\n        quick_sort(dlist, partition_index + 1, last)\n    \ndef partition(dlist, first, last):\n    '''\n    Write a function that takes an array and returns a list containing the index position of the element and it's position after that element is inserted in the array.\n    '''\n    pivot = dlist[first]\n    pivot_index = first\n    \n    for j in range(first + 1, last + 1):\n        if dlist[j] < pivot:\n            dlist[j], dlist[pivot_index] = dlist[pivot_index], dlist[j]\n            pivot_index += 1\n        \n    dlist[first], dlist[pivot_index] = dlist[pivot_index], dlist[first]\n    \n    return pivot_index\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, element in enumerate(dlist):\n        if element == item:\n            return index, dlist.index(element)\n    return -1, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    index = -1\n    for position, e in enumerate(dlist):\n        if e == item:\n            index = position\n            break\n    \n    return index, index\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            found = True\n            return found, i\n    return found, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            position = i\n            break\n    return (position!= -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            pos = i\n            break\n    return (found, pos)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in range(len(test_list)):\n        if test_list[i] in unique_list:\n            pass\n        else:\n            unique_list.append(test_list[i])\n    return unique_list\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #Initialize empty list to store unique elements\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for i in range(len(test_list)):\n        if test_list[i] not in unique:\n            unique.append(test_list[i])\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) <= 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    list_sorted = test_list.copy()\n    list_sorted.sort()\n    uniq = True\n    for i in list_sorted:\n        if i not in test_list:\n            uniq = False\n    return uniq\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    counter = {}\n    for i in test_list:\n        if i in counter:\n            counter[i] = counter[i] + 1\n        else:\n            counter[i] = 1\n    return counter.keys() == test_list.keys()\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # write your code here\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # initialize an empty list\n    test_list = list()\n    # iterate through the list\n    for num in test_list:\n        # if a value is present, append it to the empty list\n        if num in test_list:\n            test_list.remove(num)\n        else:\n            # if it is not present, append it to the list\n            test_list.append(num)\n    # return the list\n    return test_list\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list_set = set(test_list)\n    return len(test_list_set) == len(test_list_set)\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list=[]\n    \n    if len(nums1)>len(nums2):\n        nums2.reverse()\n    \n    for i in range(len(nums1)):\n        if nums1[i]>nums2[i]:\n            sub_list.append(nums1[i]-nums2[i])\n        elif nums1[i]<nums2[i]:\n            sub_list.append(nums2[i]-nums1[i])\n        else:\n            sub_list.append(0)\n    return sub_list\n    \n    \ndef sub_list2(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list=[]\n    \n    if len(nums1)>len(nums2):\n        nums2.reverse()\n    \n    for i in range(len(nums1)):\n        if nums1[i]>nums2[i]:\n            sub_list.append(nums1[i]-nums2[i])\n        elif nums1[i]<nums2[i]:\n            sub_list.append(nums2[i]-nums1[i])\n        else:\n            sub_list.append(0)\n    return sub_list\n    \n    \ndef avg(a,b):\n    '''\n    Write a function that calculates the average of the numbers.\n    '''\n    avg=sum(a)/len(a)\n    avg2=sum(b)/len(b)\n    avg3=sum(a)/len(a)\n    return avg,avg2,avg3\n    \n    \ndef remove_at(a,b,c):\n    '''\n    Write a function that removes an element from a list.\n    '''\n    a.remove(c)\n    b.remove(c)\n    return a,b\n    \n    \ndef get_max(l):\n    '''\n    Write a function that returns the largest number in a list.\n    '''\n    return max(l)\n    \n    \ndef get_min(l):\n    '''\n    Write a function that returns the smallest number in a list.\n    '''\n    return min(l)\n    \n    \ndef get_range(a,b):\n    '''\n    Write a function that returns the range of numbers in a list.\n    '''\n    return range(a,b)\n    \n    \ndef find_at(l,i):\n    '''\n    Write a function that returns the index of an element in a list.\n    '''\n    return l.index(i)\n    \n    \ndef remove_at_index(l,i):\n    '''\n    Write a function that removes an element from a list by index.\n    '''\n    l.pop(i)\n    return l\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome.\n    '''\n    return s==s[::-1]\n    \n    \ndef is_palindrome2(s):\n    '''\n    Write a function that returns True if the string s is a palindrome.\n    '''\n    if s==s[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef main():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main2():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main3():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main4():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main5():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main6():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main7():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main8():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main9():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main10():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main11():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main12():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main13():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main14():\n    '''\n    Write a function that returns the first fibonacci number.\n    '''\n    a=1\n    b=1\n    \n    for i in range(1,101):\n        if a==b:\n            break\n        else:\n            a,b=b,a+b\n            \n    return a\n    \n    \ndef main15():\n    '''\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for num1,num2 in zip(nums1,nums2):\n        result.append(num1-num2)\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for num1,num2 in zip(nums1,nums2):\n        result.append(num1-num2)\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # initialize the result\n    res=[]\n    # loop through the first list, pulling each element of nums1 as a pair\n    # of index of the value in nums2 to start at, and insert each element of nums2 at the end\n    for i in range(0, len(nums1)):\n        temp=[]\n        for j in range(0,len(nums2)):\n            temp.append(nums2[j][i])\n        res.append(temp)\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n=0\n    l=[]\n    #loop through each element in nums1 and add to the l\n    for i in range(len(nums1)):\n        n=n+(nums1[i]-nums2[i])\n        l.append(n)\n    #return the l\n    return l\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    for i in nums1:\n        for j in nums2:\n            sub.append(i-j)\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1=[]\n    l2=[]\n    \n    for i in range(len(nums1)):\n        l1.append(nums1[i]-nums2[i])\n    return l1\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result=[]\n    for i in range(len(nums1)):\n        if i == len(nums2)-1:\n            result.append(nums1[i]-nums2[i])\n        else:\n            result.append(nums1[i]+nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in nums1:\n        for j in nums2:\n            if i == j:\n                result.append(i)\n    return result\n    \ndef is_valid(nums):\n    '''\n    Write a function that checks whether a list of integers is valid.\n    '''\n    for i in range(len(nums)):\n        if nums[i] > 100:\n            return False\n    return True\n    \ndef union_find(nums):\n    '''\n    Write a function to find the smallest element that is not present in a set.\n    '''\n    result = []\n    for i in range(len(nums)):\n        if nums[i] not in result:\n            result.append(nums[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        raise TypeError(\"The parameter is not of integer type\")\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dig = ''\n    for i in n: \n        if i.isdigit(): \n            dig += i \n    if dig.isalpha(): \n        for char in dig: \n            if char.isdigit(): \n                dig = dig.replace(char, '') \n    else: \n        dig = dig.replace(' ', '') \n    return int(dig) <= int(dig[::-1])\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def check(n): \n        '''\n        n is a number that is a number of digits in the base 10.\n        Return True if all the digits in n are less than or equal to the corresponding digit in the alphabet.\n        '''\n        # YOUR CODE HERE\n        count = 0\n        for c in str(n):\n            count += int(c)\n            if count == int(c):\n                return False\n        return True\n        \n        pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Write your code here.\n    if n > 0:\n        for i in range(len(n)):\n            if n[i] < 10:\n                n[i] = '0' + str(n[i])\n        \n        freq = Counter(n)\n        for i in range(10):\n            if freq[i] > 1:\n                return 'Invalid'\n        return 'Valid'\n    else:\n        return 'Invalid'"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in n:\n        freq[i] = n.count(i)\n    return freq\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    m = 10**9 + 7\n    n1 = str(n)\n    d = len(n1)\n    i = 0\n    while i < d:\n        if int(n1[i]) <= int(n):\n            return False\n        else:\n            i += 1\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        return 'Please enter a Integer'\n    if n < 10:\n        return 'Please enter a positive Integer'\n    if n >= 10:\n        return 'Please enter a smaller integer'\n    \n    k = 0\n    for i in range(0,n):\n        if n%10==n%9:\n            return 'Please enter a smaller integer'\n        k += 1\n    return 'The number is a proper divisor'\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n == 0: \n        return \"Not a valid integer.\"\n    if n < 0: \n        return \"Not a valid integer.\"\n    if n == 1: \n        return \"1 is not a valid integer.\"\n    if n == 2: \n        return \"2 is not a valid integer.\"\n    if n == 3: \n        return \"3 is not a valid integer.\"\n    if n == 4: \n        return \"4 is not a valid integer.\"\n    if n == 5: \n        return \"5 is not a valid integer.\"\n    if n == 6: \n        return \"6 is not a valid integer.\"\n    if n == 7: \n        return \"7 is not a valid integer.\"\n    if n == 8: \n        return \"8 is not a valid integer.\"\n    if n == 9: \n        return \"9 is not a valid integer.\"\n    if n == 10: \n        return \"10 is not a valid integer.\"\n    if n == 11: \n        return \"11 is not a valid integer.\"\n    if n == 12: \n        return \"12 is not a valid integer.\"\n    if n == 13: \n        return \"13 is not a valid integer.\"\n    if n == 14: \n        return \"14 is not a valid integer.\"\n    if n == 15: \n        return \"15 is not a valid integer.\"\n    if n == 16: \n        return \"16 is not a valid integer.\"\n    if n == 17: \n        return \"17 is not a valid integer.\"\n    if n == 18: \n        return \"18 is not a valid integer.\"\n    if n == 19: \n        return \"19 is not a valid integer.\"\n    if n == 20: \n        return \"20 is not a valid integer.\"\n    if n == 21: \n        return \"21 is not a valid integer.\"\n    if n == 22: \n        return \"22 is not a valid integer.\"\n    if n == 23: \n        return \"23 is not a valid integer.\"\n    if n == 24: \n        return \"24 is not a valid integer.\"\n    if n == 25: \n        return \"25 is not a valid integer.\"\n    if n == 26: \n        return \"26 is not a valid integer.\"\n    if n == 27: \n        return \"27 is not a valid integer.\"\n    if n == 28: \n        return \"28 is not a valid integer.\"\n    if n == 29: \n        return \"29 is not a valid integer.\"\n    if n == 30: \n        return \"30 is not a valid integer.\"\n    if n == 31: \n        return \"31 is not a valid integer.\"\n    if n == 32: \n        return \"32 is not a valid integer.\"\n    if n == 33: \n        return \"33 is not a valid integer.\"\n    if n == 34: \n        return \"34 is not a valid integer.\"\n    if n == 35: \n        return \"35 is not a valid integer.\"\n    if n == 36: \n        return \"36 is not a valid integer.\"\n    if n == 37: \n        return \"37 is not a valid integer.\"\n    if n == 38: \n        return \"38 is not a valid integer.\"\n    if n == 39: \n        return \"39 is not a valid integer.\"\n    if n == 40: \n        return \"40 is not a valid integer.\"\n    if n == 41: \n        return \"41 is not a valid integer.\"\n    if n == 42: \n        return \"42 is not a valid integer.\"\n    if n == 43: \n        return \"43 is not a valid integer.\"\n    if n == 44: \n        return \"44 is not a valid integer.\"\n    if n == 45: \n        return \"45 is not a valid integer.\"\n    if n == 46: \n        return \"46 is not a valid integer.\"\n    if n == 47: \n        return \"47 is not a valid integer.\"\n    if n == 48: \n        return \"48 is not a valid integer.\"\n    if n == 49: \n        return \"49 is not a valid integer.\"\n    if n == 50: \n        return \"50 is not a valid integer.\"\n    if n == 51: \n        return \"51 is not a valid integer.\"\n    if n == 52: \n        return \"52 is not a valid integer.\"\n    if n == 53: \n        return \"53 is not a valid integer.\"\n    if n == 54: \n        return \"54 is not a valid integer.\"\n    if n == 55: \n        return \"55 is not a valid integer.\"\n    if n == 56: \n        return \"56 is not a valid integer.\"\n    if n == 57: \n        return \"57 is not a valid integer.\"\n    if n == 58: \n        return \"58 is not a valid integer.\"\n    if n == 59: \n        return \"59 is not a valid integer.\"\n    if n == 60: \n        return \"60 is not a valid integer.\"\n    if n == 61: \n        return \"61 is not a valid integer.\"\n    if n == 62: \n        return \"62 is not a valid integer.\"\n    if n == 63: \n        return \"63 is not a valid integer.\"\n    if n == 64: \n        return \"64 is not a valid integer.\"\n    if n == 65: \n        return \"65 is not a valid integer.\"\n    if n == 66: \n        return \"66 is not a valid integer.\"\n    if n == 67: \n        return \"67 is not a valid integer.\"\n    if n == 68: \n        return \"68 is not a valid integer.\"\n    if n == 69: \n        return \"69 is not a valid integer.\"\n    if n == 70: \n        return \"70 is not a valid integer.\"\n    if n == 71: \n        return \"71 is not a valid integer.\"\n    if n == 72: \n        return \"72 is not a valid integer.\"\n    if n == 73: \n        return \"73 is not a valid integer.\"\n    if n == 74: \n        return \"74 is not a valid integer.\"\n    if n == 75: \n        return \"75 is not a valid integer.\"\n    if n == 76: \n        return \"76 is not a valid integer.\"\n    if n == 77: \n        return \"77 is not a valid integer.\"\n    if n == 78: \n        return \"78 is not a valid integer.\"\n    if n == 79: \n        return \"79 is not a valid integer.\"\n    if n == 80: \n        return \"80 is not a valid integer.\"\n    if n == 81: \n        return \"81 is not a valid integer.\"\n    if n == 82: \n        return \"82 is not a valid integer.\"\n    if n == 83: \n        return \"83 is not a valid integer.\"\n    if n == 84: \n        return \"84 is not a valid integer.\"\n    if n == 85: \n        return \"85 is not a valid integer.\"\n    if n == 86: \n        return \"86 is not a valid integer.\"\n    if n == 87: \n        return \"87 is not a valid integer.\"\n    if n == 88: \n        return \"88 is not a valid integer.\"\n    if n == 89: \n        return \"89 is not a valid integer.\"\n    if n == 90: \n        return \"90 is not a valid integer.\"\n    if n == 91: \n        return \"91 is not a valid integer.\"\n    if n == 92: \n        return \"92 is not a valid integer.\"\n    if n == 93: \n        return \"93 is not a valid integer.\"\n    if n == 94: \n        return \"94 is not a valid integer.\"\n    if n == 95: \n        return \"95 is not a valid integer.\"\n    if n == 96: \n        return \"96 is not a valid integer.\"\n    if n == 97: \n        return \"97 is not a valid integer.\"\n    if n == 98: \n        return \"98 is not a valid integer.\"\n    if n == 99: \n        return \"99 is not a valid integer.\"\n    if n == 100: \n        return \"100 is not a valid integer.\"\n    if n == 101: \n        return \"101 is not a valid integer.\"\n    if n == 102: \n        return \"102 is not a valid integer.\"\n    if n == 103: \n        return \"103 is not a valid integer.\"\n    if n == 104: \n        return "
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # TODO: Write a function that checks whether all items in the list are equal to the given element.\n    #       This function is called in helper.py.\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #print(element)\n    if element in list:\n        if element == list[0]:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i]!= element:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    i = 0\n    check = True\n    while i < len(list):\n        if list[i] == element:\n            check = False\n        i = i+1\n    return check\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return False\n    elif element == list[0]:\n        return True\n    else:\n        return False\n    \ndef check_duplicates(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are the same.\n    '''\n    for i in range(0,len(list)):\n        if list[i] == element:\n            return False\n    else:\n        return True\n    \n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    found = False\n    for item in list:\n        if item == element:\n            found = True\n    return found\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # check to see if the element is in the list\n    for item in list:\n        if item == element:\n            return True\n    # if not return false\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    i=0\n    while i<len(list):\n        if list[i]!= element:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(a){2}b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_three_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_three_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_three_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_two_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: fill this in\n    return False\n    \ndef text_match_four_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followe"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    matcher = re.match(r'(a+b)(\\w+)', text)\n    if matcher is None:\n        return False\n    else:\n        return True\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or more 'c' characters.\n    '''\n    matcher = re.match(r'(a+b)(\\w+)(c+)', text)\n    if matcher is None:\n        return False\n    else:\n        return True\ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or more 'c' characters followed by one or more 'd' characters.\n    '''\n    matcher = re.match(r'(a+b)(\\w+)(d+)', text)\n    if matcher is None:\n        return False\n    else:\n        return True\ndef text_match_two_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or more 'c' characters followed by one or more 'd' characters followed by one or more 'e' characters.\n    '''\n    matcher = re.match(r'(a+b)(\\w+)(e+)', text)\n    if matcher is None:\n        return False\n    else:\n        return True\ndef text_match_two_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or more 'c' characters followed by one or more 'd' characters followed by one or more 'e' characters followed by one or more 'f' characters.\n    '''\n    matcher = re.match(r'(a+b)(\\w+)(f+)', text)\n    if matcher is None:\n        return False\n    else:\n        return True\ndef text_match_two_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or more 'c' characters followed by one or more 'd' characters followed by one or more 'e' characters followed by one or more 'f' characters followed by one or more 'g' characters.\n    '''\n    matcher = re.match(r'(a+b)(\\w+)(g+)', text)\n    if matcher is None:\n        return False\n    else:\n        return True\ndef text_match_two_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or more 'c' characters followed by one or more 'd' characters followed by one or more 'e' characters followed by one or more 'f' characters followed by one or more 'g' characters followed by one or more 'h' characters.\n    '''\n    matcher = re.match(r'(a+b)(\\w+)(h+)', text)\n    if matcher is None:\n        return False\n    else:\n        return True\ndef text_match_two_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by three or more 'c' characters followed by one or more 'd' characters followed by one or more 'e' characters followed by one or more 'f' characters followed by one or more 'g' characters followed by one or more 'h' characters followed by one or more 'i' characters followed by one or more 'j' characters followed by one or more 'k' characters followed by one or more 'l' characters followed by one or more'm' characters followed by one or more 'n' characters followed by one or more 'o' characters followed by one or more 'p' characters followed by one or more 'q' characters followed by one or more 'r' characters followed by one or more's' characters followed by one or more 't' characters followed by one or more 'u' characters followed by one or more 'v' characters followed by one or more 'w' characters followed by one or more 'x' characters followed by one or more 'y' characters followed by one or more 'z' characters followed by one or more 'A' characters followed by one or more 'B' characters followed by one or more 'C' characters followed by one or more 'D' characters followed by one or more 'E' characters followed by one or more 'F' characters followed by one or more 'G' characters followed by one or more 'H' characters followed by one or more 'I' characters followed by one or more 'J' characters followed by one or more 'K' characters followed by one or more 'L' characters followed by one or more 'M' characters followed by one or more 'N' characters followed by one or more 'O' characters followed by one or more 'P' characters followed by one or more 'Q' characters followed by one or more 'R' characters followed by one or more 'S' characters followed by one or more 'T' characters followed by one or more 'U' characters followed by one or more 'V' characters followed by one or more 'W' characters followed by one or more 'X' characters followed by one or more 'Y' characters followed by one or more 'Z' characters followed by one or more 'a' characters followed by two or more 'b' characters followed by two or more 'c' characters followed by two or more 'd' characters followed by two or more 'e' characters followed by two or more 'f' characters followed by two or more 'g' characters followed by two or more 'h' characters followed by two or more 'i' characters followed by two or more 'j' characters followed by two or more 'k' characters followed by two or more 'l' characters followed by two or more'm' characters followed by two or more 'n' characters followed by two or more 'o' characters followed by two or more 'p' characters followed by two or more 'q' characters followed by two or more 'r' characters followed by two or more's' characters followed by two or more 't' characters followed by two or more 'u' characters followed by two or more 'v' characters followed by two or more 'w' characters followed by two or more 'x' characters followed by two or more 'y' characters followed by two or more 'z' characters followed by two or more 'A' characters followed by two or more 'B' characters followed by two or more 'C' characters followed by two or more 'D' characters followed by two or more 'E' characters followed by two or more 'F' characters followed by two or more 'G' characters followed by two or more 'H' characters followed by two or more 'I' characters followed by two or more 'J' characters followed by two or more 'K' characters followed by two or more 'L' characters followed by two or more 'M' characters followed by two or more 'N' characters followed by two or more 'O' characters followed by two or more 'P' characters followed by two or more 'Q' characters followed by two or more 'R' characters followed by two or more 'S' characters followed by two or more 'T' characters followed by two or more 'U' characters followed by two or more 'V' characters followed by two or more 'W' characters followed by two or more 'X' characters followed by two or more 'Y' characters followed by two or more 'Z' characters followed by two or more 'a' characters followed by two or more 'b' characters followed by two or more 'c' characters followed by two or more 'd' characters followed by two or more 'e' characters followed by two or more 'f' characters followed by two or more 'g' characters followed by two or more 'h' characters followed by two or more 'i' characters followed by two or more 'j' characters followed by two or more 'k' characters followed by two or more 'l' characters followed by two or more'm' characters followed by two or more 'n' characters followed by two or more 'o' characters followed by two or more 'p' characters followed by two or more 'q' characters followed by two or more 'r' characters followed by two or more's' characters followed by two or more 't' characters followed by two or more 'u' characters followed by two or more 'v' characters followed by two or more 'w' characters followed by two or more 'x' characters followed by two or more 'y' characters followed by two or more 'z' characters followed by two or more 'A' characters followed by two or more 'B' characters followed by two or more 'C' characters followed by tw"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(\"[a-b]\")\n    return pattern.search(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return (text.find('a') > -1 or text.find('b') > -1)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    text = re.sub('(?<= )a+', 'a', text)\n    text = re.sub('(?<= )b+', 'b', text)\n    return text.lower()\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if(len(text) < 2):\n        return False\n    elif(text[0] == 'b' and text[1] == 'a'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search(r'(?:a)(\\w+)', text) # Three or more 'a' character followed by two or three 'b' characters\n    return match!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 2:\n        return False\n    if text[0:2]!= 'a' and text[0:3]!= 'a':\n        return False\n    for i in range(1, len(text)-2):\n        if text[i:i+3]!= 'a' and text[i:i+3]!= 'a':\n            return False\n    return True\ndef number_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 3:\n        return False\n    for i in range(1, len(text)-2):\n        if text[i:i+3]!= 'a' and text[i:i+3]!= 'a':\n            return False\n    return True\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 4:\n        return False\n    for i in range(1, len(text)-3):\n        if text[i:i+4]!= 'a' and text[i:i+4]!= 'a':\n            return False\n    return True\ndef number_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 4:\n        return False\n    for i in range(1, len(text)-4):\n        if text[i:i+4]!= 'a' and text[i:i+4]!= 'a':\n            return False\n    return True\ndef text_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 5:\n        return False\n    for i in range(1, len(text)-3):\n        if text[i:i+4]!= 'a' and text[i:i+4]!= 'a':\n            return False\n    return True\ndef number_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 4:\n        return False\n    for i in range(1, len(text)-4):\n        if text[i:i+4]!= 'a' and text[i:i+4]!= 'a':\n            return False\n    return True\ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 5:\n        return False\n    for i in range(1, len(text)-2):\n        if text[i:i+3]!= 'a' and text[i:i+3]!= 'a':\n            return False\n    return True\ndef number_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 4:\n        return False\n    for i in range(1, len(text)-3):\n        if text[i:i+3]!= 'a' and text[i:i+3]!= 'a':\n            return False\n    return True\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 5:\n        return False\n    for i in range(1, len(text)-4):\n        if text[i:i+5]!= 'a' and text[i:i+5]!= 'a':\n            return False\n    return True\ndef number_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 4:\n        return False\n    for i in range(1, len(text)-4):\n        if text[i:i+5]!= 'a' and text[i:i+5]!= 'a':\n            return False\n    return True\ndef text_match_one_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 6:\n        return False\n    for i in range(1, len(text)-3):\n        if text[i:i+3]!= 'a' and text[i:i+3]!= 'a':\n            return False\n    return True\ndef number_match_one_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 4:\n        return False\n    for i in range(1, len(text)-3):\n        if text[i:i+4]!= 'a' and text[i:i+4]!= 'a':\n            return False\n    return True\ndef text_match_two_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 7:\n        return False\n    for i in range(1, len(text)-2):\n        if text[i:i+3]!= 'a' and text[i:i+3]!= 'a':\n            return False\n    return True\ndef number_match_two_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 4:\n        return False\n    for i in range(1, len(text)-3):\n        if text[i:i+4]!= 'a' and text[i:i+4]!= 'a':\n            return False\n    return True\ndef text_match_three_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 8:\n        return False\n    for i in range(1, len(text)-4):\n        if text[i:i+3]!= 'a' and text[i:i+3]!= 'a':\n            return False\n    return True\ndef number_match_three_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 4:\n        return False\n    for i in range(1, len(text)-4):\n        if text[i:i+3]!= 'a' and text[i:i+3]!= 'a':\n            return False\n    return True\ndef text_match_one_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 9:\n        return False\n    for i in range(1, len(text)-3):\n        if text[i:i+3]!= 'a' and text[i:i+3]!= 'a':\n            return False\n    return True\ndef number_match_one_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 4:\n        return False\n    for i in range(1, len(text)-3):\n        if text[i:i+3]!= 'a' and text[i:i+3]!= 'a':\n            return False\n    return True\ndef text_match_two_ten(text):\n    '''\n    Write "
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Return false if both have a and b.\n    return len(re.findall(r'([a-z])(\\w)',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,2}',text)) > 0\n    \n    # Return false if neither have a or b.\n    return len(re.findall(r'([a-z])(\\w){2}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,3}',text)) > 0\n    \n    # Return false if either have a b.\n    return len(re.findall(r'([a-z])(\\w){1}',text)) > 0 and len(re.findall(r'([a-z])(\\w){2}',text)) > 0\n    \n    # Return false if both have a and b.\n    return len(re.findall(r'([a-z])(\\w){1,2}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,3}',text)) > 0\n    \n    # Return false if neither have a b.\n    return len(re.findall(r'([a-z])(\\w){1,3}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,4}',text)) > 0\n    \n    # Return false if either have a b.\n    return len(re.findall(r'([a-z])(\\w){1,4}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,5}',text)) > 0\n    \n    # Return false if both have a b.\n    return len(re.findall(r'([a-z])(\\w){1,5}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,6}',text)) > 0\n    \n    # Return false if neither have a b.\n    return len(re.findall(r'([a-z])(\\w){1,6}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,7}',text)) > 0\n    \n    # Return false if either have a b.\n    return len(re.findall(r'([a-z])(\\w){1,7}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,8}',text)) > 0\n    \n    # Return false if both have a b.\n    return len(re.findall(r'([a-z])(\\w){1,8}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,9}',text)) > 0\n    \n    # Return false if neither have a b.\n    return len(re.findall(r'([a-z])(\\w){1,9}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,10}',text)) > 0\n    \n    # Return false if either have a b.\n    return len(re.findall(r'([a-z])(\\w){1,10}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,11}',text)) > 0\n    \n    # Return false if both have a b.\n    return len(re.findall(r'([a-z])(\\w){1,11}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,12}',text)) > 0\n    \n    # Return false if neither have a b.\n    return len(re.findall(r'([a-z])(\\w){1,12}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,13}',text)) > 0\n    \n    # Return false if either have a b.\n    return len(re.findall(r'([a-z])(\\w){1,13}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,14}',text)) > 0\n    \n    # Return false if both have a b.\n    return len(re.findall(r'([a-z])(\\w){1,14}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,15}',text)) > 0\n    \n    # Return false if neither have a b.\n    return len(re.findall(r'([a-z])(\\w){1,15}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,16}',text)) > 0\n    \n    # Return false if either have a b.\n    return len(re.findall(r'([a-z])(\\w){1,16}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,17}',text)) > 0\n    \n    # Return false if both have a b.\n    return len(re.findall(r'([a-z])(\\w){1,17}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,18}',text)) > 0\n    \n    # Return false if neither have a b.\n    return len(re.findall(r'([a-z])(\\w){1,18}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,19}',text)) > 0\n    \n    # Return false if either have a b.\n    return len(re.findall(r'([a-z])(\\w){1,19}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,20}',text)) > 0\n    \n    # Return false if both have a b.\n    return len(re.findall(r'([a-z])(\\w){1,20}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,21}',text)) > 0\n    \n    # Return false if neither have a b.\n    return len(re.findall(r'([a-z])(\\w){1,21}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,22}',text)) > 0\n    \n    # Return false if either have a b.\n    return len(re.findall(r'([a-z])(\\w){1,22}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,23}',text)) > 0\n    \n    # Return false if both have a b.\n    return len(re.findall(r'([a-z])(\\w){1,23}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,24}',text)) > 0\n    \n    # Return false if neither have a b.\n    return len(re.findall(r'([a-z])(\\w){1,24}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,25}',text)) > 0\n    \n    # Return false if either have a b.\n    return len(re.findall(r'([a-z])(\\w){1,25}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,26}',text)) > 0\n    \n    # Return false if both have a b.\n    return len(re.findall(r'([a-z])(\\w){1,26}',text)) > 0 and len(re.findall(r'([a-z])(\\w){1,27}',text)) > 0\n    \n    # Return false if neither have a b.\n    return len(re.fin"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    k = int(k)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # define current_sum\n    current_sum = 0\n    # declare zero array\n    array = [0 for i in range(n + 1)]\n    # initialize zeros array for sum of each number\n    for i in range(n + 1):\n        array[i] = 0\n    # iterate through the array\n    for i in range(n):\n        current_sum += a[i]\n        for j in range(k):\n            array[i + j] += a[i]\n    # if current sum is less than 0\n    if(current_sum < 0):\n        return 0\n    # if current sum is a substring of previous sum\n    elif(current_sum == 0):\n        return 1\n    # if current sum is greater than 0\n    else:\n        return max(max_sub_array_sum_repeated(a, n - 1, k), max_sub_array_sum_repeated(a, i, k)) + 1\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # find the sum of the first array\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    \n    # find the smallest part of the sum\n    smallest_sum = min(sum, k)\n    \n    # find the largest part of the sum\n    largest_sum = max(sum, k)\n    \n    # iterate through and sum the remaining parts\n    for i in range(n - k + 1):\n        if sum - a[i] < k:\n            sum += a[i]\n        else:\n            sum -= a[i]\n    \n    return sum, smallest_sum, largest_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == k:\n        return sum(a)\n    if k == 1:\n        return sum(a)\n    ans = sum(a)\n    for i in range(1, k):\n        ans += a[i-1]\n    return ans\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    j = 1\n    sum = 0\n    # Calculate current sum\n    for i in range(1, n):\n        sum += a[i-1]\n        # Check if sum of the k array is the current sum\n        if(sum - a[i-j] > k):\n            break\n    # Calculate the mid point\n    j = (n - k) // 2\n    # Recursive call to find the largest sum of a contiguous array\n    return max_sub_array_sum_repeated(a, n, j) + max(a[j:])\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Method 1: Using two pointers. \n    # The idea is to calculate the sum at the first index, and find it as the next index\n    # Here we can calculate the sum and then calculate the sum at the second index, again as we move one index\n    # when the total sum becomes k\n    # Then we calculate the total sum of k number of times\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    d = [0 for i in range(n + 1)]\n    max_sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = []\n    for i in range(k):\n        result.append(a[0])\n    for i in range(1, n):\n        result[-1] += a[i]\n    return max(result)\n    \ndef test_max_sub_array_sum_repeated():\n    assert max_sub_array_sum_repeated([1,2,3,4,5],4,3) == 7\n    assert max_sub_array_sum_repeated([0,0,0],3,2) == 0\n    assert max_sub_array_sum_repeated([1,1,1],3,3) == 1\n    assert max_sub_array_sum_repeated([-1,-1,2,3],3,3) == -1\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = a[0]\n    i = 1\n    while i < n:\n        max_sum = max(a[i] + max_sum, max_sum)\n        i += k\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    temp = [0] * n\n    temp[0] = a[0]\n    for i in range(1, n):\n        temp[i] = temp[i - 1] + a[i]\n    \n    for i in range(k):\n        temp[0] = a[0] + temp[0]\n        temp[1] = a[1] + temp[1]\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sq = 0\n    for i in range(1, n + 1):\n        if(i % 2 == 0):\n            sq = sq + i ** 2\n    return sq\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s += i ** 2\n    return s\n    \n    \ndef greatest_common_divisor(x, y):\n    '''\n    Write a python function that returns the greatest common divisor of x and y.\n    '''\n    if (x > y):\n        greatest = x\n    else:\n        greatest = y\n    for i in range(2, (int(math.sqrt(greatest)) + 1)):\n        if((greatest % i == 0)):\n            greatest_divisor = i\n    return greatest_divisor\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * square_Sum(n - 1)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for num in range(1, n+1):\n        if num % 2 == 0:\n            sum += num\n    print(sum)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum = sum + (i ** 2)\n        i += 1\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    squared_n = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            squared_n = squared_n + i\n        else:\n            pass\n    return squared_n\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    '''\n    #Use the following list to store the values of odd numbers (0,2,4,6,8, etc.)\n    odd_numbers = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n    \n    #Use the following variable to store the values of even numbers (0,2,4,6,8,etc.)\n    even_numbers = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n    \n    #Use the following list to store the values of odd numbers (0,2,4,6,8,etc.)\n    odd_values = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n    \n    #Combine the two lists into a single list\n    list = odd_numbers + even_numbers\n    \n    #Print the sum of the square numbers of even and odd numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the square numbers of even and odd numbers\n    print(sum(list))\n    \n    #Sum the squares of odd numbers\n    for i in list:\n        print(i*i, end=' ')\n        \n    #Sum the squares of odd numbers\n    print(sum(list))\n    \n    #Print the sum of the square numbers of even numbers\n    for i in list:\n        print(i*i, end=' ')\n        \n    #Sum the squares of odd numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    \n    #Print the sum of the squares of even numbers\n    for i in list:\n        print(i*i, end=' ')\n    "
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    print(sum)\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if list1 is None:\n        return None\n    \n    return max(list1, key=len)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1)):\n            if max<list1[j][i]:\n                max=list1[j][i]\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # find the max_length of the list\n    max = 0\n    for i in list1:\n        if i == max:\n            max = i\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = list()\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list\n    "
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = list1[0][0]\n    for row in list1:\n        if len(row[0]) > len(max_length):\n            max_length = row[0]\n        \n    return max_length\n    \ndef list_size(list1):\n    '''\n    Write a function that takes a list of lists and returns the list of the size of the list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list2=[]\n    if len(list1)==0:\n        return len(list1)\n    for i in range(len(list1[0])):\n        for j in range(len(list1)):\n            list2.append(list1[j][i])\n    return max(list2)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # YOUR CODE HERE\n    if len(list1)==0:\n        return None\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(l) for l in list1])\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Empty list to store each number of ways to place a fence with n posts and k colors\n    ways = [] \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case\n    if n == k or (n == 2 and k == 1):\n        return 1\n    # if k == 0 then there are 2 ways\n    # return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n    # return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n    if n == 1:\n        return 1\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n        # return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2:\n        return n\n    \n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dic = {}\n    for i in range(1, n + 1):\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for i in range(1, k + 1):\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if n == k:\n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # We will use an array of k colors and the number of ways to get the corresponding number of posts for each color\n    # We will return the number of ways for a fence of size n and k\n    # The array will consist of k numbers that are all unique (in accordance with the colors)\n    # We can see that the array is in binary, so we can ignore the 0's\n    # Time complexity: O(n+k)\n    # Space Complexity: O(n)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 1\n    if n == 1:\n        return k\n    else:\n        return (k + count_no_of_ways(n-1, k)) % 10000\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # set of all valid colors\n    colors = ['red', 'yellow', 'blue', 'purple']\n    # list of all possible ways to fill a fence\n    ways = [[0,1,2,3,4],[1,2,3,4,5]]\n    # check if colors[i] is on k\n    if k==0:\n        return 1\n    # if k<=1 there are two possibilities\n    if k<=1:\n        return ways[n-1][k-1]\n    # if k>=2 there are four possibilities\n    if k>=2:\n        return ways[n-1][k-2]+ways[n-1][k-3]+ways[n-1][k-4]\n    # if k>=3 there are three possibilities\n    if k>=3:\n        return ways[n-1][k-3]+ways[n-1][k-4]+ways[n-1][k-5]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ## base case for drawing the fence\n    if n == 1:\n        return k\n    \n    ## all possible ways\n    ways = []\n    for i in range(k):\n        ways.append(count_no_of_ways(n-1, i) + count_no_of_ways(n-1, i+1))\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case\n    if n == 2 or k == 1:\n        return 1\n    # if we have 2 or 1 post where both of them have same color\n    # there are two ways\n    ways = 0\n    if (n >= 2 and k >= 2):\n        ways = ways + count_no_of_ways(n-1, k-1)\n        if n % 2 == 1 and k % 2 == 1:\n            ways = ways + count_no_of_ways(n-1, k-2)\n        else:\n            ways = ways + count_no_of_ways(n-1, k-1)\n    return ways\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (m>n):\n        return -1\n    if (n<0):\n        return -1\n    if (m==n):\n        return n\n    if (n%m==0):\n        return n//m\n    if (m%n==0):\n        return m//n\n    return -1\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=0 or m<=0:\n        return None\n    if n==0:\n        return 0\n    if m==0:\n        return 1\n    return (n%m)//10**(len(str(n%m))-len(str(n%m)))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #  n,m = int(n), int(m)\n    def find(n,m):\n        if m % n == 0:\n            print(n,m)\n            return n\n        else:\n            return find(m, m//n)\n    return find(n,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # if (m==n==0): return 0\n    if (m==0): return n\n    if (m==1): return n\n    if (n==1): return n\n    if (n==2): return n\n    if (m<=2):\n        # check if m<2\n        # if m is a power of 2, then floor(m) is less than 2\n        if (m==2): return n//2\n        if (m==3): return n//3\n        # do floor(m)//3 and then return floor(m)\n        # n//3 is the quotient, 1+2+3 = 5\n        if (m==4): return n//(2**3)\n        if (m==5): return n//(2**5)\n        if (m==6): return n//(2**6)\n        # if m is less than 3, then floor(m) is less than 5\n        if (m==7): return n//(2**7)\n        if (m==8): return n//(2**8)\n        if (m==9): return n//(2**9)\n        if (m==10): return n//(2**10)\n        if (m==11): return n//(2**11)\n        if (m==12): return n//(2**12)\n        if (m==13): return n//(2**13)\n        if (m==14): return n//(2**14)\n        if (m==15): return n//(2**15)\n        if (m==16): return n//(2**16)\n        if (m==17): return n//(2**17)\n        if (m==18): return n//(2**18)\n        if (m==19): return n//(2**19)\n        if (m==20): return n//(2**20)\n        if (m==21): return n//(2**21)\n        if (m==22): return n//(2**22)\n        if (m==23): return n//(2**23)\n        if (m==24): return n//(2**24)\n        if (m==25): return n//(2**25)\n        if (m==26): return n//(2**26)\n        if (m==27): return n//(2**27)\n        if (m==28): return n//(2**28)\n        if (m==29): return n//(2**29)\n        if (m==30): return n//(2**30)\n        if (m==31): return n//(2**31)\n        if (m==32): return n//(2**32)\n        if (m==33): return n//(2**33)\n        if (m==34): return n//(2**34)\n        if (m==35): return n//(2**35)\n        if (m==36): return n//(2**36)\n        if (m==37): return n//(2**37)\n        if (m==38): return n//(2**38)\n        if (m==39): return n//(2**39)\n        if (m==40): return n//(2**40)\n        if (m==41): return n//(2**41)\n        if (m==42): return n//(2**42)\n        if (m==43): return n//(2**43)\n        if (m==44): return n//(2**44)\n        if (m==45): return n//(2**45)\n        if (m==46): return n//(2**46)\n        if (m==47): return n//(2**47)\n        if (m==48): return n//(2**48)\n        if (m==49): return n//(2**49)\n        if (m==50): return n//(2**50)\n        if (m==51): return n//(2**51)\n        if (m==52): return n//(2**52)\n        if (m==53): return n//(2**53)\n        if (m==54): return n//(2**54)\n        if (m==55): return n//(2**55)\n        if (m==56): return n//(2**56)\n        if (m==57): return n//(2**57)\n        if (m==58): return n//(2**58)\n        if (m==59): return n//(2**59)\n        if (m==60): return n//(2**60)\n        if (m==61): return n//(2**61)\n        if (m==62): return n//(2**62)\n        if (m==63): return n//(2**63)\n        if (m==64): return n//(2**64)\n        if (m==65): return n//(2**65)\n        if (m==66): return n//(2**66)\n        if (m==67): return n//(2**67)\n        if (m==68): return n//(2**68)\n        if (m==69): return n//(2**69)\n        if (m==70): return n//(2**70)\n        if (m==71): return n//(2**71)\n        if (m==72): return n//(2**72)\n        if (m==73): return n//(2**73)\n        if (m==74): return n//(2**74)\n        if (m==75): return n//(2**75)\n        if (m==76): return n//(2**76)\n        if (m==77): return n//(2**77)\n        if (m==78): return n//(2**78)\n        if (m==79): return n//(2**79)\n        if (m==80): return n//(2**80)\n        if (m==81): return n//(2**81)\n        if (m==82): return n//(2**82)\n        if (m==83): return n//(2**83)\n        if (m==84): return n//(2**84)\n        if (m==85): return n//(2**85)\n        if (m==86): return n//(2**86)\n        if (m==87): return n//(2**87)\n        if (m==88): return n//(2**88)\n        if (m==89): return n//(2**89)\n        if (m==90): return n//(2**90)\n        if (m==91): return n//(2**91)\n        if (m==92): return n//(2**92)\n        if (m==93): return n//(2**93)\n        if (m==94): return n//(2**94)\n        if (m==95): return n//(2**95)\n        if (m==96): return n//(2**96)\n        if (m==97): return n//(2**97)\n        if (m==98): return n//(2**98)\n        if (m==99): return n//(2**99)\n        if (m==100): return n//(2**100)\n        if (m==101): return n//(2**101)\n        if (m==102): return n//(2**102)\n        if (m==103): return n//(2**103)\n        if (m==104): return n//(2**104)\n        if (m==105): return n//(2**105)\n        if (m==106): return n//(2**106)\n        if (m==107): return n//(2**107)\n        if (m==108): return n//(2**108)\n        if (m==109): return n//(2**109)\n        if (m==110): return n//(2**110)\n        if (m==111): return n//(2**111)\n        if (m==112): return n//(2**112)\n        if (m==113): return n//(2**113)\n        if (m==114): return n//(2**114)\n        if (m==115): return n//(2**115)\n        if (m==116): return n//(2**116)\n        if (m==117): return n//(2**117)\n        if (m==118): return n//(2**118)\n        i"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return n\n    if (n>m):\n        return find(n,m//2)\n    return find(n,m//2) + m//2\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #// if n<0 return -1\n    if n<0:\n        return -1\n    #//if n==0 return 0\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    #//if n==1 return 1\n    if n==2:\n        return 1\n    if n==3:\n        return 2\n    #//if n==3 return 3\n    if n==4:\n        return 3\n    #//if n>=4 return -1\n    if n>=4:\n        return -1\n    #//if n is divisble by 4 return -1\n    if n%4==0:\n        return -1\n    #//if n is divisble by 5 return 0\n    if n%5==0:\n        return 0\n    #//if n is divisble by 3 return 1\n    if n%3==0:\n        return 1\n    #//if n is divisble by 2 return 2\n    if n%2==0:\n        return 2\n    #//if n is divisble by 1 return 3\n    return 3\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m >= n:\n        m = m % n\n    else:\n        n = n % m\n    return n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    l=[]\n    c=[]\n    n=str(n)\n    m=str(m)\n    l=n.split('.')\n    c=m.split('.')\n    if(int(l[0])>=int(c[0]) and int(l[0])<=int(c[1]) and int(l[1])>=int(c[1]) and int(l[1])<=int(c[0])):\n        return(int(l[0])+1)\n    else:\n        return(int(c[0])+1)\n    \n    '''\n    Write a python function to find the sum of two numbers (rounded down to the nearest integer).\n    '''\n    s=0\n    l=[]\n    l=n.split('.')\n    c=m.split('.')\n    if(int(l[0])>=int(c[0]) and int(l[0])<=int(c[1]) and int(l[1])>=int(c[1]) and int(l[1])<=int(c[0])):\n        s=int(l[0])+int(c[0])\n        \n    elif(int(l[0])>=int(c[0]) and int(l[0])<=int(c[1]) and int(l[1])>=int(c[1]) and int(l[1])<=int(c[0])):\n        s=int(l[0])+int(c[0])\n    \n    elif(int(c[0])>=int(l[0]) and int(c[0])<=int(l[1]) and int(l[1])>=int(c[1]) and int(l[1])<=int(c[0])):\n        s=int(c[0])+int(l[0])\n    else:\n        s=int(l[1])+int(l[0])\n    return(s)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=0:\n        return \"You must enter a positive integer\"\n    elif n==1:\n        return \"1\"\n    elif n>1:\n        q=n%10\n        return str(q)\n        \ndef sub(n,m):\n    '''\n    Write a python function to subract two numbers (rounded down to the nearest integer).\n    '''\n    if n<=0:\n        return \"You must enter a positive integer\"\n    elif n==1:\n        return \"1\"\n    elif n>1:\n        q=n%10\n        return str(q)\n    \ndef mul(n,m):\n    '''\n    Write a python function to multiply two numbers (rounded down to the nearest integer).\n    '''\n    if n<=0:\n        return \"You must enter a positive integer\"\n    elif n==1:\n        return \"1\"\n    elif n>1:\n        q=n%10\n        return str(q)\n    \ndef div(n,m):\n    '''\n    Write a python function to divide two numbers (rounded down to the nearest integer).\n    '''\n    if n<=0:\n        return \"You must enter a positive integer\"\n    elif n==1:\n        return \"1\"\n    elif n>1:\n        q=n%10\n        return str(q)\n        \ndef sqr(n):\n    '''\n    Write a python function to square down a number.\n    '''\n    if n<=0:\n        return \"You must enter a positive integer\"\n    elif n==1:\n        return \"1\"\n    elif n>1:\n        q=n%10\n        return str(q)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m:\n        return n\n    if n % m == 0:\n        return m\n    else:\n        return find(n % m, m)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x,y,z = w,h,w\n    '''\n    Write your code here\n    '''\n    return x,y,z\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Determine the width and height of the triangle\n    a = (w/2)**2\n    b = (h/2)**2\n    c = (w/2)**2\n    # Calculate the area of the triangle\n    d = a + b + c\n    # Calculate the semi-perimeter\n    e = math.sqrt(d/2)\n    # Convert the semi-perimeter to the equivalent area\n    f = 2*math.asin(e/math.sqrt(d))\n    # Check if the triangle is at an angle of 45 degrees\n    if math.fabs(f) > math.pi:\n        f = math.fabs(f)-math.pi\n        # Round the angle to the nearest degree\n        f = math.floor(f/math.pi)\n    return f\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    t = w*h/math.sqrt(3)\n    return t\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    t = w*h/math.sqrt(3)\n    return t\ndef angle_triangle(a,b,c):\n    '''\n    Write a function to find the angle of a triangle with three sides.\n    '''\n    delta_a = (b**2 + c**2 - a**2)/(2*b*c)\n    delta_b = ((b**2 + c**2 - a**2)/(2*b*c))**0.5\n    delta_c = ((b**2 + c**2 - a**2)/(2*b*c))**0.5\n    #print(delta_a, delta_b, delta_c)\n    angle = (math.acos(delta_a))\n    #print(angle)\n    angle_a = (math.degrees(angle))\n    #print(angle_a)\n    if (angle_a >= 90):\n        angle_a = 90 - angle_a\n    else:\n        angle_a = 90 - angle_a\n    #print(angle_a)\n    if (angle_a >= 90):\n        angle_a = 90 - angle_a\n    else:\n        angle_a = 90 - angle_a\n    #print(angle_a)\n    if (angle_a >= 90):\n        angle_a = 90 - angle_a\n    else:\n        angle_a = 90 - angle_a\n    if (angle_a >= 90):\n        angle_a = 90 - angle_a\n    else:\n        angle_a = 90 - angle_a\n    if (angle_a >= 90):\n        angle_a = 90 - angle_a\n    else:\n        angle_a = 90 - angle_a\n    if (angle_a >= 90):\n        angle_a = 90 - angle_a\n    else:\n        angle_a = 90 - angle_a\n    #print(angle_a)\n    if (angle_a >= 90):\n        angle_a = 90 - angle_a\n    else:\n        angle_a = 90 - angle_a\n    #print(angle_a)\n    angle_b = (math.acos(delta_b))\n    #print(angle_b)\n    angle_b = (math.degrees(angle_b))\n    #print(angle_b)\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    #print(angle_b)\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b = 90 - angle_b\n    if (angle_b >= 90):\n        angle_b = 90 - angle_b\n    else:\n        angle_b "
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = 0\n    b = math.sqrt(math.pow(w,2) + math.pow(h,2))\n    c = (w+h)/2\n    if w>h:\n        d = w-h\n    else:\n        d = h-w\n    if d<a:\n        if a>b:\n            if a>c:\n                a = b\n            else:\n                a = c\n        if b>c:\n            if b>a:\n                b = c\n            else:\n                b = a\n        if c>a:\n            if c>b:\n                c = a\n            else:\n                c = b\n        if a<b:\n            if a<c:\n                a = c\n            else:\n                a = b\n    return (a,b,c)\n    \ndef side_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = 0\n    b = math.sqrt(math.pow(w,2) + math.pow(h,2))\n    c = (w+h)/2\n    if w>h:\n        d = w-h\n    else:\n        d = h-w\n    if d<a:\n        if a>b:\n            if a>c:\n                a = b\n            else:\n                a = c\n        if b>c:\n            if b>a:\n                b = c\n            else:\n                b = a\n        if c>a:\n            if c>b:\n                c = a\n            else:\n                c = b\n        if a<b:\n            if a<c:\n                a = c\n            else:\n                a = b\n        if b<c:\n            if b<a:\n                b = c\n            else:\n                b = a\n        if a<b:\n            if a<c:\n                a = b\n            else:\n                a = c\n    return (a,b,c)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    '''\n    The formula is:\n        -math.sqrt(x**2+y**2)\n    '''\n    #x and y should be positive\n    if h==0:\n        return -w/2\n    elif h==1:\n        return w/2\n    elif h==2:\n        return w/2\n    else:\n        return math.sqrt(w**2+h**2)\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    '''\n    The formula is:\n        -math.sqrt(x**2+y**2)\n    '''\n    #x and y should be positive\n    if w==0:\n        return -h/2\n    elif w==1:\n        return h/2\n    elif w==2:\n        return h/2\n    else:\n        return math.sqrt(w**2+h**2)\ndef hyper_square(w,h):\n    '''\n    Write a function that calculates the hyper-square.\n    '''\n    '''\n    If the formula is:\n        -1 + (2^2 + 3^2)\n    '''\n    #x and y should be positive\n    if w==0:\n        if h==0:\n            return 1\n        elif h==1:\n            return 6\n        elif h==2:\n            return 8\n        elif h==3:\n            return 12\n        else:\n            return w*math.pow(2,3)\n    elif w==1:\n        if h==0:\n            return 2\n        elif h==1:\n            return 4\n        elif h==2:\n            return 6\n        elif h==3:\n            return 8\n        else:\n            return w*math.pow(2,3)\n    elif w==2:\n        if h==0:\n            return 3\n        elif h==1:\n            return 5\n        elif h==2:\n            return 8\n        elif h==3:\n            return 12\n        else:\n            return w*math.pow(2,3)\n    elif w==3:\n        if h==0:\n            return 4\n        elif h==1:\n            return 6\n        elif h==2:\n            return 9\n        elif h==3:\n            return 12\n        else:\n            return w*math.pow(2,3)\n    elif w==4:\n        if h==0:\n            return 7\n        elif h==1:\n            return 11\n        elif h==2:\n            return 15\n        elif h==3:\n            return 18\n        else:\n            return w*math.pow(2,3)\n    elif w==5:\n        if h==0:\n            return 8\n        elif h==1:\n            return 14\n        elif h==2:\n            return 19\n        elif h==3:\n            return 21\n        else:\n            return w*math.pow(2,3)\n    elif w==6:\n        if h==0:\n            return 9\n        elif h==1:\n            return 12\n        elif h==2:\n            return 18\n        elif h==3:\n            return 22\n        else:\n            return w*math.pow(2,3)\n    elif w==7:\n        if h==0:\n            return 10\n        elif h==1:\n            return 15\n        elif h==2:\n            return 20\n        elif h==3:\n            return 28\n        else:\n            return w*math.pow(2,3)\n    elif w==8:\n        if h==0:\n            return 11\n        elif h==1:\n            return 14\n        elif h==2:\n            return 16\n        elif h==3:\n            return 22\n        else:\n            return w*math.pow(2,3)\n    elif w==9:\n        if h==0:\n            return 12\n        elif h==1:\n            return 17\n        elif h==2:\n            return 24\n        elif h==3:\n            return 36\n        else:\n            return w*math.pow(2,3)\n    elif w==10:\n        if h==0:\n            return 13\n        elif h==1:\n            return 18\n        elif h==2:\n            return 25\n        elif h==3:\n            return 42\n        else:\n            return w*math.pow(2,3)\n    elif w==11:\n        if h==0:\n            return 14\n        elif h==1:\n            return 19\n        elif h==2:\n            return 26\n        elif h==3:\n            return 35\n        else:\n            return w*math.pow(2,3)\n    elif w==12:\n        if h==0:\n            return 15\n        elif h==1:\n            return 20\n        elif h==2:\n            return 27\n        elif h==3:\n            return 43\n        else:\n            return w*math.pow(2,3)\n    elif w==13:\n        if h==0:\n            return 16\n        elif h==1:\n            return 21\n        elif h==2:\n            return 34\n        elif h==3:\n            return 44\n        else:\n            return w*math.pow(2,3)\n    elif w==14:\n        if h==0:\n            return 17\n        elif h==1:\n            return 24\n        elif h==2:\n            return 38\n        elif h==3:\n            return 50\n        else:\n            return w*math.pow(2,3)\n    elif w==15:\n        if h==0:\n            return 18\n        elif h==1:\n            return 23\n        elif h==2:\n            return 36\n        elif h==3:\n            return 51\n        else:\n            return w*math.pow(2,3)\n    elif w==16:\n        if h==0:\n            return 19\n        elif h==1:\n            return 25\n        elif h==2:\n            return 40\n        elif h==3:\n            return 48\n        else:\n            return w*math.pow(2,3)\n    elif w==17:\n        if h==0:\n            return 20\n        elif h==1:\n            return 26\n        elif h==2:\n            return 41\n        elif h==3:\n            return 52\n        else:\n            return w*math.pow(2,3)\n    elif w==18:\n        if h==0:\n            return 27\n        elif h==1:\n            return 40\n        elif h==2:\n            return 55\n        elif h==3:\n            return 62\n        else:\n            return w*math.pow(2,3)\n    elif w==19:\n        if h==0:\n            return 41\n        elif h==1:\n            return 54\n        elif h==2:\n            return 67\n        elif h==3:\n            return 84\n        else:\n            return w*math.pow(2,3)\n    elif w==20:\n        if h==0:\n            return 50\n        elif h==1:\n            return 56\n        elif h==2:\n            return 74\n        elif h==3:\n            return 91\n        else:\n            return w*math.pow(2,3)\n    elif w==21:\n        if h==0:\n            return 63\n        elif h==1:\n            return 78\n        elif h==2:\n            return 92\n        elif h==3:\n            return 117\n        else:\n            return w*math.pow(2,3)\n    elif w==22:\n        if h==0:\n            return 64\n        elif h==1:\n            return 81\n        elif h==2:\n            return 118\n        elif h==3:\n            return 156\n        else:\n            return w*math.pow(2,3)\n    elif w==23:\n        if h==0:\n            return 65\n        elif h=="
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w*h\n    b = math.sqrt(w*w + h*h)\n    c = math.sqrt(a*a + b*b)\n    if b > c:\n        p = b\n        q = c\n    else:\n        p = c\n        q = b\n    t = (2*(w+h)/(p+q))\n    return t\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w/2*(math.sin(math.radians(45-w/2)))\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(math.sqrt((w**2)+(h**2)))\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    return(math.sqrt((w**2)+(h**2)))\ndef isCone(A,B,C):\n    '''\n    Check whether two right angled triangles have a solid side.\n    '''\n    return(A*C+B*B<0 and A*C+B*A<0)\ndef isParabola(A,B,C):\n    '''\n    Check whether a parabola is a triangle.\n    '''\n    return(A**2 + B**2 == A**2 + B**2)\ndef isBezier(A,B,C):\n    '''\n    Check whether a bezier curve is a triangle.\n    '''\n    return(A**2 + B**2 == A**2 + B**2 + C**2)\ndef isCubic(A,B,C,D):\n    '''\n    Check whether a cubic curve is a triangle.\n    '''\n    return(A**3 + B**3 == A**3 + B**3 + C**3 + D**3)\ndef isIsosurface(A,B,C,D):\n    '''\n    Check whether an isosurface is a triangle.\n    '''\n    return(A**3 * B**2 + B**3 * C**2 + A**2 * C**2 + C**3 * B**2 + A**3 * B**2 + A**2 * B**2)\ndef isCylinder(A,B,C,D):\n    '''\n    Check whether a cylinder is a triangle.\n    '''\n    return(A**3 * D**2 + B**3 * D**2 + C**3 * D**2 + D**3 * B**2 + A**3 * B**2 + A**2 * B**2 + A**3 * C**2 + C**3 * D**2 + C**2 * B**2 + C**2 * D**2)\ndef isCircle(A,B,C,D):\n    '''\n    Check whether a circle is a triangle.\n    '''\n    return(A**2 + B**2 == A**2 + B**2 + C**2 + D**2)\ndef isSquare(A,B,C,D):\n    '''\n    Check whether a square is a triangle.\n    '''\n    return(A**2 * B**2 + B**2 * C**2 + C**2 * D**2 + D**2 * B**2 + A**2 * B**2 + A**2 * C**2 + A**2 * D**2 + A**2 * C**2 + A**2 * D**2)\ndef isQuadrilateral(A,B,C,D):\n    '''\n    Check whether a quadrilateral is a triangle.\n    '''\n    return(A**3 * B**2 + B**3 * C**2 + B**2 * C**2 + B**2 * C**3 + B**2 * D**2 + B**3 * D**2 + A**3 * D**3 + A**2 * B**3 + A**2 * B**2 + A**2 * C**3 + A**2 * C**2 + A**2 * D**3 + A**2 * D**2 + C**3 * D**3 + C**2 * D**2 + C**2 * D**3)\ndef isRectangle(A,B,C,D):\n    '''\n    Check whether a rectangle is a triangle.\n    '''\n    return(A**2 * B**2 + B**2 * C**2 + B**2 * C**2 + A**2 * B**2 + A**2 * C**2 + A**2 * C**3 + A**2 * C**2 + A**2 * B**3 + A**2 * B**2 + A**2 * C**3 + A**2 * C**2 + A**2 * D**3 + A**2 * D**2 + C**3 * D**3 + C**2 * D**2 + C**2 * D**3)\ndef isIsofus(A,B,C,D):\n    '''\n    Check whether a isosurface is a triangle.\n    '''\n    return(A**3 * D**2 + B**3 * D**2 + C**3 * D**2 + C**2 * D**2 + A**3 * D**3 + C**2 * D**3 + A**3 * D**2 + A**2 * D**2 + C**3 * D**2 + C**2 * D**3 + A**2 * D**2 + A**2 * D**3)\ndef isParabolaAsTriangle(A,B,C):\n    '''\n    Check whether a parabola is a triangle.\n    '''\n    return(A**2 * B**2 + A**2 * C**2 + B**3 * C**2 + C**2 * D**2 + A**2 * B**3 + C**2 * B**2 + C**2 * D**3 + B**2 * D**3 + A**3 * B**2 + C**3 * B**2 + C**2 * D**3 + C**2 * B**3 + C**2 * B**2 + A**3 * B**2 + A**2 * B**2)\ndef isParabolaAsCylinder(A,B,C,D):\n    '''\n    Check whether a parabola is a triangle.\n    '''\n    return(A**2 * D**2 + B**3 * D**2 + A**2 * B**2 + B**3 * C**2 + D**3 * B**2 + D**3 * C**2 + B**2 * C**3 + B**2 * C**2 + A**3 * C**3 + A**2 * C**2 + A**2 * C**3 + A**2 * D**3 + A**2 * D**2 + B**3 * D**2 + C**3 * D**3 + C**2 * D**2 + D**2 * B**3 + D**2 * B**2 + C**3 * D**3 + C**2 * D**2 + C**2 * D**3)\ndef isParabolaAsCircle(A,B,C):\n    '''\n    Check whether a parabola is a triangle.\n    '''\n    return(A**2 * B**2 + A**2 * C**2 + A**2 * B**2 + A**2 * C**2 + B**3 * C**2 + B**2 * C**2 + C**3 * D**2 + B**3 * D**2 + A**3 * B**2 + A**2 * B**2 + B**2 * C**2 + A**2 * C**3 + B**2 * C**2 + B**2 * C**3 + C**3 * D**2 + B**3 * D**2 + C**2 * D**3 + C**2 * B**3 + C**2 * B**2 + C**2 * D**3 + C**2 * B**3 + C**2 * B**2 + C**3 * B**2 + C**2 * B**3)\ndef isParabolaAsSquare(A,B,C):\n    '''\n    Check whether a parabola is a triangle.\n    '''\n    return(A**2 * B**2 + A**2 * C**2 + B**2 * C**2 + B**3 * C**2 + A**2 * B**3 + A**2 * C**3 + B**3 * C**2 + C**2 * B**2 + B**3 * C**2 + C**2 * B**3 + A**3 * B**2 + A**2 * B**2 + B**2 * C**3 + B**2 * C**2 + B**2 * C**3 + A**2 * B**3 + A**2 * B**2 + B**2 * C**3 + A**2 * B**3 + A**2 * B**2 + C**3 * B**2 + C**2 * B**3 + A**3 * B**2 + C**2 * B**2 + B**2 * C**3 + C**2 * B**3 + C**2 * B**2 + C**3 * B**2 + C*"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    triangle_width = math.sqrt(w**2 + h**2)\n    triangle_height = math.sqrt(w**2 + h**2) - triangle_width\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxv = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > maxv:\n            maxv = listval[i]\n    return maxv\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    elif len(listval)==1:\n        return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for x in listval:\n        if x > max_val:\n            max_val = x\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maximum = 0\n    for item in listval:\n        if item > maximum:\n            maximum = item\n    return maximum\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # def max_val(listval):\n    #     if listval == []:\n    #         return 0\n    #     elif len(listval) == 1:\n    #         return listval[0]\n    #     elif listval[0] > listval[1]:\n    #         return listval[0]\n    #     else:\n    #         return listval[1]\n    # print(max_val([1, 2, 3, 4, 5]))\n    # print(max_val([1, 2, 3, 3, 1]))\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    for x in range(len(listval)):\n        if listval[x] < listval[x - 1]:\n            return x\n    return len(listval) - 1\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    print(listval)\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    max = 0\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n    \ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    min = 100\n    for i in listval:\n        if i < min:\n            min = i\n    return min\n    \ndef mean(listval):\n    '''\n    Write a function to calculate the mean value from a given list.\n    '''\n    \n    s = 0\n    for i in listval:\n        s = s + i\n    mean = s/len(listval)\n    return mean\n    \ndef median(listval):\n    '''\n    Write a function to calculate the median value from a given list.\n    '''\n    \n    s = len(listval)\n    if len(listval)%2 == 0:\n        return (listval[int(s/2)] + listval[int((s/2)-1)])/2\n    else:\n        return listval[int(s/2)]\n    \ndef mode(listval):\n    '''\n    Write a function to calculate the mode value from a given list.\n    '''\n    \n    s = len(listval)\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        if listval.count(listval[0]) == 1:\n            return listval[0]\n        else:\n            for i in listval:\n                if i == listval[0]:\n                    if i in listval[1:]:\n                        continue\n                    else:\n                        return i\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    i = 0\n    while i < number:\n        if number % i == 0:\n            i += 1\n        else:\n            i += 1\n    return number\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    num = 1\n    while number%num!= 0:\n        num+=1\n    return num\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return number\n    else:\n        i = 2\n        while i <= number:\n            if number % i == 0:\n                return sum_div(number/i)\n            i += 1\n    return number\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_lst = []\n    num = number\n    while num!= 1:\n        if num % 2 == 0:\n            div_lst.append(2)\n            num = num // 2\n        else:\n            div_lst.append(1)\n            num = num / 2\n    return sum(div_lst)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 0\n    for i in range(1, number):\n        if (number % i) == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    def divisors(number):\n        if number == 0:\n            return 'no divisors'\n        elif number < 0:\n            return 'no divisors'\n        else:\n            for i in range(1, int(math.sqrt(number))+1):\n                if number % i == 0:\n                    return divisors(number//i) + \" \" + str(i)\n        return 'no divisors'\n    return divisors(number)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Your code here\n    return sum(div for div in range(1, number) if number % div == 0)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return 0\n    elif number == 2:\n        return 1\n    elif number == 3:\n        return 2\n    elif number % 2 == 0:\n        return number\n    else:\n        return number + sum_div(number - 1)\n    \ndef main():\n    '''\n    Test your sum_div function with some numbers.\n    '''\n    # TODO: implement this function.\n    \n    test_input = [\n        (2, 4),\n        (5, 5),\n        (5, 4),\n        (9, 7),\n        (8, 6)\n    ]\n    \n    for input_list in test_input:\n        print(f'Sum: {sum_div(input_list[0]) + sum_div(input_list[1])}')\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    num = number\n    # Iterate from 2 to sqrt(number)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by any divisor, add it to the total\n    # If the number is divisible by one of the divisors, \n    # add the number to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is not divisible by any divisors, return 0\n    \n    # Iterate from 2 to sqrt(number)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisor, return 0\n    \n    # Iterate from sqrt(number) to 2\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from 2 to 2^sqrt(number)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from 2^sqrt(number) to 2^sqrt(2)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from 2^sqrt(2) to sqrt(number)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from sqrt(number) to number\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from sqrt(number) to sqrt(2)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from sqrt(2) to sqrt(number)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from sqrt(number) to number\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from number to number\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from number to 2\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from 2 to number\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from 2 to 2^sqrt(number)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from 2^sqrt(number) to 2^sqrt(2)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from 2^sqrt(2) to 2^sqrt(number)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from 2^sqrt(number) to 2^sqrt(2)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from 2^sqrt(2) to sqrt(number)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from sqrt(number) to sqrt(2)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from sqrt(2) to sqrt(number)\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors, add it to the total\n    # If the number is divisible by all divisors, return the total\n    # If the number is divisible by any divisors, return 0\n    \n    # Iterate from sqrt(number) to number\n    # Find the divisors of the number\n    # Compare the num and each divisor\n    # If the number is divisible by one of the divisors"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    if number!= 0:\n        for i in range(1, number+1):\n            if number % i == 0:\n                divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n=len(arr)\n    if n<=1:\n        return 0\n    else:\n        for i in range(0,n-1):\n            for j in range(i,n):\n                if arr[i]<arr[j]:\n                    arr[i],arr[j]=arr[j],arr[i]\n    \n    if n<2:\n        return 0\n    else:\n        Inv_Cnt=0\n        for i in range(0,n):\n            if arr[i]>0:\n                Inv_Cnt+=1\n        return Inv_Cnt\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv = 0 \n    Inv_arr = [] \n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            Inv += 1\n            Inv_arr.append(arr[i])\n        else:\n            Inv += 1\n            Inv_arr.append(arr[i + 1])\n    return Inv \n    \ndef swap_i(arr, i, j): \n    '''\n    Swap the values in arr[i] with arr[j]. \n    '''\n    arr[i], arr[j] = arr[j], arr[i] \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                Inv_Count += 1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    \n    for i in range(len(arr)-1): \n        for j in range(i, len(arr)):\n            if arr[j] < arr[i]:\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count=0\n    for i in range(0,len(arr)):\n        for j in range(0,len(arr)-i-1):\n            if arr[j]>arr[j+1]:\n                arr[j],arr[j+1]=arr[j+1],arr[j]\n                count+=1\n            elif arr[j]<arr[j+1]:\n                arr[j],arr[j+1]=arr[j+1],arr[j]\n                count+=1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    s = 0\n    for i in arr:\n        if i > s:\n            s = i\n    return s\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # your code goes here\n    n = len(arr)\n    i = 0\n    j = 0\n    count = 0\n    l = len(arr)\n    p = 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i] > arr[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #arr = [2,1,5,4,3,6,7,8,9,10,6,5,4]\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[i - 1]: \n            count += 1\n        else: \n            if count > 0: \n                count -= 1 \n            else: \n                arr[i - 1], arr[i] = arr[i], arr[i - 1] \n    return count \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return 0\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, (list, tuple)):\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # return list(map(flatten_list, list1))\n    \n    list1 = list(map(lambda x: [x], list1))\n    \n    return list(map(lambda x: sum(x), list1))\n    \n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten = list()\n    for i in range(len(list1)):\n        if type(list1[i]) == list:\n            flatten.extend(flatten_list(list1[i]))\n        else:\n            flatten.append(list1[i])\n    return flatten\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for el in list1:\n        if isinstance(el, list):\n            flattened += flatten_list(el)\n        else:\n            flattened.append(el)\n    return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    if list1:\n        for i in list1:\n            if isinstance(i, list):\n                flattened_list.extend(flatten_list(i))\n            else:\n                flattened_list.append(i)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for sublist in list1:\n        if type(sublist) is list:\n            for el in flatten_list(sublist):\n                new_list.append(el)\n        else:\n            new_list.append(sublist)\n    return new_list\n    \nprint('Example 1:')\nprint('Input : ')\nprint(r'''\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[\n[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[\n[\n[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\n[\n''')\nprint('Input : ')\ninput_data = input()\nl = input_data.split()\narr = []\nfor i in range(len(l)):\n    arr.append(list(map(int,l[i].split(' '))))\nprint('Output :')\nprint(flatten_list(arr))\nprint('\\n')"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if type(item) is list:\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    count=0\n    for i in range(len(stdata)):\n        count+=stdata[i][1]\n    return count\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    N = len(stdata)\n    sums = [0 for i in range(N)]\n    counts = [0 for i in range(N)]\n    for i in range(N):\n        sums[i] = stdata[i][0]\n        counts[i] = stdata[i][1]\n    for i in range(1,N):\n        sums[i] = sums[i-1] + stdata[i][0]\n        counts[i] = counts[i-1] + stdata[i][1]\n    return (sums, counts)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    data = []\n    for each in stdata:\n        data.append(each)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    # get the tuple for each tuple of each user\n    # in this order: user1, user2, user3, user4, user5, user6, user7, user8, user9, user10\n    for i in range(len(stdata)):\n        if stdata[i][2] == 'y':\n            # print(stdata[i])\n            if max_aggregate < (stdata[i][3]):\n                max_aggregate = stdata[i][3]\n        elif stdata[i][2] == 'n':\n            if stdata[i][3] < max_aggregate:\n                max_aggregate = stdata[i][3]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    # TODO: complete the function\n    # TODO: calculate the aggregate from the first element of the tuple\n    return max(stdata[0][1], stdata[0][1]*n)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = 0\n    for k,v in stdata.items():\n        result = max(result,v)\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #make the dictionary of the maximum aggregated value\n    max_agg_data = {}\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #\n    # Your code here.\n    #\n    # Return max aggregate.\n    #\n    # Output: float, not required for Python 3.\n    #\n    # for i in range(len(stdata)):\n    #     stdata[i] = (stdata[i][0],stdata[i][1]/stdata[i][2])\n    #\n    # return max(stdata)\n    \n    max = 0\n    for i in range(len(stdata)):\n        if stdata[i][0]<max:\n            max = stdata[i][0]\n        elif stdata[i][1]>max:\n            max = stdata[i][1]\n    return max\n    \ndef max_distance(stdata):\n    '''\n    Write a function to calculate the maximum distance between two strings.\n    '''\n    #\n    # Your code here.\n    #\n    # Return max distance.\n    #\n    # Output: float, not required for Python 3.\n    #\n    # for i in range(len(stdata)):\n    #     for j in range(i,len(stdata)):\n    #         if stdata[i]==stdata[j]:\n    #             distances.append(abs(j-i))\n    #     distances.sort()\n    #     return distances[len(distances)-1]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = stdata[0][1] #stdata[0][1] = (data1, aggregate1)\n    for i in range(1, len(stdata)):\n        if stdata[i][1] > max_aggregate[1]:\n            max_aggregate = stdata[i] #stdata[i][1] = (data1, aggregate1)\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(list)\n    for data_item in stdata:\n        data[data_item[0]].append(data_item[1])\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # your code here\n    def count_binary_seq_python(n):\n        n = n & (n-1)\n        if n == 1:\n            return 2\n        else:\n            return 1 + count_binary_seq_python(n - 1)\n    return count_binary_seq_python(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # if n < 2:\n    #     return 0\n    # elif n == 2:\n    #     return 1\n    # elif n == 3:\n    #     return 2\n    # elif n == 4:\n    #     return 3\n    # else:\n    #     return (count_binary_seq(n-1) + count_binary_seq(n-2))\n    #     \n    \n    total = 0\n    #     for i in range(0,n):\n    #         total += n - i + 1\n    \n    #         if total == n:\n    #             return 1\n    #         if total - i == n:\n    #             return 2\n    #         if total - i - 1 == n:\n    #             return 3\n    #         if total - i + 1 == n:\n    #             return 4\n    \n    #     return 0\n    \n    if n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 2\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def num_2bits(n):\n        return bin(n).replace(\"0b\", \"\").count(\"1\")\n    def count_binary_seq_2bit(n):\n        n = n - n & 0xffff\n        count = 0\n        for i in range(1, n//2+1):\n            if num_2bits(i) + num_2bits(n-i) == n:\n                count += 1\n        return count\n    res = []\n    for i in range(2**n):\n        sum_ = 0\n        for j in range(n):\n            if i & 1 == 0:\n                sum_ += bin(i).count(\"1\")\n            else:\n                sum_ += bin(i).count(\"0\")\n        res.append(sum_)\n    return res\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count_sum = 0\n    while n > 1:\n        if n & 1:\n            count_sum += 2 ** (n - 1)\n        n >>= 1\n    return count_sum\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    b = [0]*256\n    for i in range(256):\n        b[i] = (ord(str(i)[-1])-ord(str(i)[0]))\n    cnt = 0\n    for i in range(n+1):\n        for j in range(256):\n            if(j>i):\n                if(b[j]==b[j-i]):\n                    cnt+=1\n    return cnt\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 5\n    result = count_binary_seq(n-2) + count_binary_seq(n-1)\n    print(result)\n    return result\ndef count_binary_seq_2(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 5\n    result = count_binary_seq_2(n-2) + count_binary_seq_2(n-1)\n    print(result)\n    return result\ndef count_binary_seq_3(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 5\n    result = count_binary_seq_3(n-2) + count_binary_seq_3(n-1)\n    print(result)\n    return result\ndef count_binary_seq_4(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 5\n    result = count_binary_seq_4(n-2) + count_binary_seq_4(n-1)\n    print(result)\n    return result\ndef count_binary_seq_5(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 5\n    result = count_binary_seq_5(n-2) + count_binary_seq_5(n-1)\n    print(result)\n    return result\ndef count_binary_seq_6(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 5\n    result = count_binary_seq_6(n-2) + count_binary_seq_6(n-1)\n    print(result)\n    return result\ndef count_binary_seq_7(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 5\n    result = count_binary_seq_7(n-2) + count_binary_seq_7(n-1)\n    print(result)\n    return result\ndef count_binary_seq_8(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 5\n    result = count_binary_seq_8(n-2) + count_binary_seq_8(n-1)\n    print(result)\n    return result\ndef count_binary_seq_9(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 5\n    result = count_binary_seq_9(n-2) + count_binary_seq_9(n-1)\n    print(result)\n    return result\ndef count_binary_seq_10(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 5\n    result = count_binary_seq_10(n-2) + count_binary_seq_10(n-1)\n    print(result)\n    return result\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum_p = 0\n    sum_q = 0\n    \n    for i in range(n):\n        sum_p += bin(i).count('1')\n        sum_q += bin(i+1).count('1')\n        \n    if sum_p > sum_q:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    i = 0\n    while i < n:\n        if bin(i).count('1') == bin(i).count('0'):\n            count += 1\n        i += 1\n    return count\ndef remove_decimal(n):\n    '''\n    Write a function to remove decimal from a string.\n    '''\n    return int(''.join(list(map(str, list(filter(str.isdigit, str(n)))))) or \"0\")\ndef remove_last(n):\n    '''\n    Write a function to remove last digit of a number.\n    '''\n    return int(''.join(list(filter(str.isdigit, str(n)[-1]))))\ndef remove_first(n):\n    '''\n    Write a function to remove first digit of a number.\n    '''\n    return int(''.join(list(filter(str.isdigit, str(n)[0]))))\ndef trim_string(s):\n    '''\n    Write a function to remove unnecessary spaces.\n    '''\n    return s.strip(' ')\ndef find_binary_sequence(n):\n    '''\n    Write a function to find all binary sequences of length 2n.\n    '''\n    count = 0\n    i = 0\n    while i < n:\n        if bin(i).count('1') == bin(i).count('0'):\n            count += 1\n        i += 1\n    return count\ndef count_binary_seq2(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    i = 0\n    while i < n:\n        if bin(i).count('1') == bin(i).count('0'):\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 0\n    for i in range(n): \n        res += (i+1) * 2**(n-i-1)\n    return res"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count=0\n    for i in range(2,n+1):\n        if sum(bin(i)[2:].zfill(n))==sum(bin(i)[:n].zfill(n)):\n            count+=1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k,v in d.items():\n        if type(v) == type(dict()):\n            depth += dict_depth(v)\n        else:\n            depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    from collections import deque\n    from sys import maxsize\n    d = deque([])\n    for k, v in d.items():\n        if v!= None:\n            d.appendleft(v)\n    for _ in range(maxsize):\n        if len(d) == 0:\n            break\n        else:\n            e = d.popleft()\n            d.append(e)\n    return len(d)"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(d.values())+1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    return max(dict_depth(d.get(k, {})), dict_depth(d.get(k, {}))) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(d, parent=None):\n        if len(d) == 0:\n            return 0\n        else:\n            if parent is None:\n                parent = d\n            return 1 + depth(d.get(parent, {}), parent)\n    return depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise ValueError('The parameter is not a dictionary.')\n    n = len(d)\n    if n == 0:\n        return 0\n    depth = 0\n    for k in d.keys():\n        depth += dict_depth(d[k])\n    return depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if type(v) == dict:\n            depth += dict_depth(v)\n        elif type(v) == list:\n            depth += len(v)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    else:\n        return 1+dict_depth(d.values())\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index > len(arr) :\n        return arr[index]\n    return find_Element(arr,ranges,rotations,index+1)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        temp = []\n        for i in range(len(arr)) :\n            temp.append(arr[i][index])\n        temp.reverse()\n        arr.extend(temp)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index == len(ranges) or ranges == []:\n        return arr[index]\n    for i in range(rotations):\n        if ranges[i][1] <= index < ranges[i][0]:\n            return arr[index]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #code\n    if(len(ranges)==1):\n        return arr[ranges[0]]\n    elif(len(ranges)==2):\n        if(ranges[0]>ranges[1]):\n            return arr[ranges[1]]\n        else:\n            return arr[ranges[0]]\n    else:\n        dif=ranges[1]-ranges[0]\n        if(dif%2==0):\n            #First element and second element are same\n            return arr[ranges[0]]\n        else :\n            #First element is different\n            if(ranges[0]+1<len(arr)):\n                if(arr[ranges[0]+1]<arr[ranges[0]]):\n                    return arr[ranges[0]]\n            #Second element is same\n            if(ranges[1]+1<len(arr)):\n                if(arr[ranges[1]+1]<arr[ranges[1]]):\n                    return arr[ranges[1]]\n            else:\n                return arr[ranges[0]]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr[i])) : \n            if arr[i][j] == index :\n                return i,j\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i = 0\n    for r in ranges :\n        for i in range(r[0],r[1] + 1) :\n            if i not in arr :\n                return i\n    else :\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)) :\n        for j in range(0,len(arr)-i-1) :\n            if arr[j] <= arr[j+1] :\n                pass\n            else :\n                return arr[j],j\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        for rot in range(len(ranges)):\n            for j in range(rotations) :\n                if index == rot :\n                    return arr[i]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[ranges.index(index)] <= 0 :\n        return arr[0]\n    if ranges[ranges.index(index)] == 0 :\n        return arr[-1]\n    if ranges[ranges.index(index)] == 0 :\n        return arr[0]\n    if ranges[ranges.index(index)] <= ranges[ranges.index(index-1)] :\n        return arr[ranges.index(index)-1]\n    if ranges[ranges.index(index)] == ranges[ranges.index(index-1)] :\n        return arr[ranges.index(index)-1]\n    for i in range(ranges[ranges.index(index)-1], ranges[ranges.index(index)]+1) :\n        if (arr[i-1]<=arr[i]) :\n            return arr[i]\n    for i in range(ranges[ranges.index(index)-1], ranges[ranges.index(index)]+1) :\n        if (arr[i]<=arr[index]) :\n            return arr[i]\n    return arr[ranges.index(index)]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(ranges)==0 :\n        return arr[index]\n    # elif index in range(len(arr)-1) :\n    #     return arr[index]\n    elif ranges[0][1]<index<ranges[-1][0] :\n        return find_Element(arr,ranges,rotations,index+1)\n    else :\n        return arr[index]\n    \ndef find_index(arr,arr_index,rotations,index) :\n    '''\n    Write a python function to find the index of given element in the given array.\n    '''\n    if len(arr_index)==0 :\n        return index\n    # elif index in range(len(arr)-1) :\n    #     return find_index(arr,arr_index,rotations,index+1)\n    elif arr_index[0]<arr_index[-1] :\n        return find_index(arr,arr_index,rotations,index+1)\n    else :\n        return arr_index[-1]+1\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    a = re.findall(r'\\b\\w+p\\b', words)\n    return a\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0] + 'p' +''.join(words[1:])\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    return''.join(words[1:]) + words[0]\ndef remove_p(words):\n    '''\n    Write a function to remove the punctuation from a list of words.\n    '''\n    return''.join(words[1:])\ndef remove_p2(words):\n    '''\n    Write a function to remove the punctuation from a list of words.\n    '''\n    return''.join(words[1:]) +''\ndef strip_p(words):\n    '''\n    Write a function to remove the punctuation from a list of words.\n    '''\n    return''.join(words[1:])\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = None\n    for word in words:\n        if word[0] == 'p':\n            result = word\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    letters = ['p']\n    for w in words:\n        if w in letters:\n            return w, w\n    return False\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [x[0] for x in words if x[0]=='p'][0], [x[1] for x in words if x[0]=='p'][0]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    a = []\n    for w in words:\n        if w[0] == \"p\":\n            a.append(w)\n    return a\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    start_withp = words[0][0]\n    final = words[0][1:]\n    return start_withp,final\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    w1, w2 = '', ''\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            w1 = words[i][2:]\n            break\n    for i in range(len(words)):\n        if words[i][0] == 'P':\n            w2 = words[i][2:]\n            break\n    return w1, w2\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = 'p'\n    words = [word for word in words if word[0]==p]\n    return words[0], words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if words == []:\n        return (0,0)\n    else:\n        return (words[0], start_withp(words[1:]))\ndef first_withp(words):\n    '''\n    Write a function to return the first word from a list of words starting with letter 'p'.\n    '''\n    if words == []:\n        return (0,0)\n    else:\n        return (words[0], first_withp(words[1:]))\ndef end_withp(words):\n    '''\n    Write a function to return the last word from a list of words starting with letter 'p'.\n    '''\n    if words == []:\n        return (0,0)\n    else:\n        return (words[-1], end_withp(words[:-1]))\ndef second_withp(words):\n    '''\n    Write a function to return the second word from a list of words starting with letter 'p'.\n    '''\n    if words == []:\n        return (0,0)\n    else:\n        return (words[-1], second_withp(words[:-1]))\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k <= index:\n        return 0\n    if index == n:\n        return a[k]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return max(a[0:k+1])\n    if k == 0:\n        return sum(a[0:k+1])\n    if (a[index] >= a[index+1]):\n        return max_sum_increasing_subseq(a, n, index+1, k-1)\n    else:\n        return a[index]\n    return max(a[index], a[index+1], k-1)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    j = index\n    i = index + 1\n    while i < n and a[j] < a[j-k] + a[i-k]:\n        j -= 1\n    \n    if i < n:\n        a[i] = a[j] + a[i-k]\n        return a[i]\n    else:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    '''\n    T = O(n)\n    S = O(n)\n    '''\n    n = len(a)\n    a[index:] = a[index:][::-1]\n    index = index - 1\n    k = k - 1\n    \n    for i in range(n):\n        if a[i] == 0:\n            break\n        for j in range(i, n):\n            if a[j] < 0:\n                break\n            if j - i + 1 > k:\n                break\n            if a[j] > a[j - 1]:\n                break\n            if a[j - 1] < 0:\n                break\n            a[j] -= a[j - 1]\n            a[j - 1] += a[j]\n            index = j\n    \n    return sum(a[index:])\n    \n    \n    \n    \n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    sum = 0\n    n_array = [0 for i in range(n)]\n    i = index\n    j = 0\n    while i < n:\n        if a[i] > n_array[j]:\n            sum = a[i]\n            n_array[j] = a[i]\n            j = j + 1\n        else:\n            if j == k:\n                sum = a[j]\n                n_array[j] = a[j]\n                j = j + 1\n            else:\n                j = j + 1\n    return sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return a[n-k-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    res = float('-inf')\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[k]\n    max_inc = -1\n    max_inc_val = 0\n    for i in range(index, n):\n        if a[i] < a[index] + k and max_inc > i - index:\n            max_inc = i - index\n            max_inc_val = a[i]\n    return max_inc_val + max_sum_increasing_subseq(a, n, index + max_inc + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    for i in range(n):\n        if i == n-1:\n            break\n        if index == n-1:\n            break\n        if k > index:\n            if a[index] + a[index+1] > a[i]:\n                max_sum += a[index+1] - a[i]\n            else:\n                max_sum += a[i] - a[index]\n            \n        else:\n            max_sum += a[index] - a[i]\n        index += 1\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    prefix = [0]*n\n    \n    for i in range(1,n):\n        prefix[i] = a[i-1]\n        \n    for i in range(n-k):\n        prefix[i+k-1] = max(prefix[i], a[i+k-1] + prefix[i+1])\n        \n    return max(a)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Return a colon tuple\n    if len(tuplex) == 2:\n        return tuplex\n    # If its a list or tuple then convert it to a list\n    elif type(tuplex) == list or type(tuplex) == tuple:\n        return list(tuplex)\n    else:\n        raise TypeError('Cannot convert to a colon. Got a tuple of length {}, expected a list.'.format(len(tuplex)))\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        for j in range(len(tuplex[i])):\n            if tuplex[i][j] == ',':\n                tuplex[i][j] = ':'\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j] == ',':\n                tuplex[i][j] = ':'\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) > 1:\n        return tuplex[:n] + colon_tuplex(tuplex[n+1:],m,n+1)\n    return (m,n)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)==2:\n        return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i][m] < tuplex[i][n]:\n            tuplex[i][m] = tuplex[i][n]\n            tuplex[i][n] = 0\n        elif tuplex[i][m] > tuplex[i][n]:\n            tuplex[i][m] = tuplex[i][n]\n            tuplex[i][n] = 0\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c=0\n    while c<len(tuplex):\n        if tuplex[c] == m:\n            c+=1\n        elif tuplex[c] == n:\n            c+=1\n        else:\n            tuplex[c:c+1] = deepcopy(tuplex[c:c+1])\n            c+=1\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    res = []\n    for el in tuplex:\n        if el[0]!= '*':\n            res.append(el)\n        else:\n            res.append(el[1:] if el[1] == ',' else '*' + el[1:])\n    return res\ndef to_list(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el)\n    return res\ndef to_set(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el)\n    return set(res)\ndef to_set2(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el)\n    return set(res)\ndef to_set3(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set4(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set5(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set6(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set7(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set8(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set9(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set10(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set11(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set12(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set13(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set14(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set15(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set16(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set17(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set18(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set19(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set20(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set21(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set22(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set23(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set24(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set25(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set26(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set27(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set28(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set29(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set30(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set31(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    res = []\n    for el in tuplex:\n        res.append(el[1:])\n    return set(res)\ndef to_set32(tuplex):\n    '''\n    Convert a tuple to list.\n    '''\n    re"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(0,len(tuplex),1):\n        if tuplex[i] == n:\n            return tuplex[i+1]\n        elif tuplex[i] > n:\n            return tuplex[i+1]\n    return 0\ndef find_colon(tuplex):\n    '''\n    Write a function to get the next value in a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] > 0:\n            return tuplex[i]\n    return 0\ndef swap(tuplex):\n    '''\n    Write a function to swap two elements in a tuple.\n    '''\n    tuplex[0],tuplex[-1] = tuplex[-1],tuplex[0]\n    return tuplex\ndef zip_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to perform a zipping of two tuples.\n    '''\n    tuplex = [tuplex1[0]] + tuplex1[1:] + [tuplex2[0]] + tuplex2[1:]\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    lst = []\n    \n    for i in range(m):\n        lst.append(tuplex[i])\n    \n    for i in range(n):\n        lst.append(tuplex[i])\n        \n    return lst\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    A = nums1\n    B = nums2\n    for i in range(N):\n        A.sort()\n        B.sort()\n        if A[-1]*B[-1] > nums1[i]*nums2[i]:\n            return nums1[i]*nums2[i]\n        elif A[-1]*B[-1] < nums1[i]*nums2[i]:\n            return A[-1]*nums2[i]\n    # raise Exception(\"no possible solution\")\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    i, m, j = 0, 1, 0\n    arr = []\n    while m < N:\n        i = nums1[i]\n        j = nums2[j]\n        arr.append((i, j))\n        m += 1\n        i += 1\n        j += 1\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Write your code here.\n    # Create a dictionary to store the results.\n    results = {}\n    # Loop through the lists.\n    for i in range(0, len(nums1)):\n        for j in range(0, len(nums2)):\n            # Calculate the product.\n            results[nums1[i]*nums2[j]] = nums1[i] * nums2[j]\n    \n    # The largest product is the product of the list itself.\n    # print(results[max(results.keys())])\n    # return max(results.keys())\n    return results[max(results.values())]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    result = []\n    \n    for i in range(0, N):\n        result.append(0)\n        \n    for i in range(0, len(nums1)):\n        for j in range(0, len(nums2)):\n            result[j] = max(result[j], nums1[i] * nums2[i])\n            \n    for i in range(0, len(result)):\n        if result[i]!= 0:\n            return i, result[i]\n    return -1, 0\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # base case\n    if len(nums1) == len(nums2):\n        return []\n    \n    result = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if num1 < num2:\n                result.append(num1 * num2)\n            elif num1 == num2:\n                result.append(num1)\n    \n    return result[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1_len = len(nums1)\n    nums2_len = len(nums2)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #Given two lists, one with factors, one without factors\n    #Calculate the product and return it\n    #Time complexity: O(n*m)\n    #Space Complexity: O(1)\n    #Example: if we have 3 lists (of 2,2 and 2,3) and 2 factors, then the output should be 2*2*2*3*3 =120\n    #This solution takes O(n*m) space\n    #\n    #\n    #Returns\n    #largest product from list 1, 2 and 3\n    #'''\n    #First we need to find the max value in each of the lists\n    #Then we can use it to check whether we can get a factor\n    #If we can get a factor, we'll add it to our result\n    #\n    #We can then return the result\n    #\n    #\n    #time complexity: O(n*m)\n    #space complexity: O(1)\n    #Example: if we have 3 lists (of 2,2 and 2,3) and 2 factors, then the output should be 2*2*2*3*3 =120\n    #This solution takes O(n*m) space\n    #\n    #\n    #\n    #returns the largest product from list 1, 2 and 3\n    #'''\n    #\n    #First, we need to find the max value in each of the lists\n    #Then we can use it to check whether we can get a factor\n    #\n    #If we can get a factor, we'll add it to our result\n    #\n    #\n    #time complexity: O(n*m)\n    #space complexity: O(1)\n    #Example: if we have 3 lists (of 2,2 and 2,3) and 2 factors, then the output should be 2*2*2*3*3 =120\n    #This solution takes O(n*m) space\n    #\n    #\n    #\n    #returns the largest product from list 1, 2 and 3\n    #'''\n    #\n    #\n    #\n    #We can't get any factors from the lists, so we'll return the smallest\n    #\n    #\n    #\n    #time complexity: O(n*m)\n    #space complexity: O(1)\n    #Example: if we have 3 lists (of 2,2 and 2,3) and 2 factors, then the output should be 2*2*2*3*3 =240\n    #This solution takes O(n*m) space\n    #\n    #\n    #\n    #returns the largest product from list 1, 2 and 3\n    #'''\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for i in range(N):\n        nums1_temp = []\n        nums2_temp = []\n        \n        for j in range(N):\n            if (i!= j):\n                nums1_temp.append(nums1[j])\n                nums2_temp.append(nums2[j])\n        \n        max_num = 0\n        for i in range(len(nums1_temp)):\n            if nums1_temp[i] > nums2_temp[i]:\n                max_num = nums1_temp[i]\n                if nums1_temp[i] * nums2_temp[i] > max_num:\n                    max_num = nums1_temp[i] * nums2_temp[i]\n        res.append(max_num)\n        # print(max_num)\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # write your code here\n    if len(nums1) == 1:\n        return (nums1[0] * nums2[0])\n    if len(nums2) == 1:\n        return (nums1[0] * nums2[0])\n    \n    n1 = len(nums1)\n    n2 = len(nums2)\n    \n    l = 1\n    r = min(n1, n2)\n    \n    while l < r:\n        \n        m = (l + r) // 2\n        \n        # set to 0 the product of the first number and the product of the second number\n        product = (nums1[0] * nums2[0])\n        \n        # count the number of products of each number\n        prod = 1\n        for i in range(1, m + 1):\n            prod = prod * (nums1[i - 1] * nums2[i - 1])\n        \n        if prod > product:\n            l = m + 1\n            \n        else:\n            r = m\n            \n    return (nums1[l - 1] * nums2[l - 1])"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    ans = []\n    \n    m = [0] * N\n    m[0] = nums1[0] * nums2[0]\n    m[1] = nums1[0] * nums1[1]\n    m[2] = nums1[0] * nums2[2]\n    \n    for i in range(3,N):\n        m[i] = nums1[i] * nums2[i - 1]\n    \n    for i in range(N):\n        ans.append(m[i] * m[i + 1])\n    return ans\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    #loops through the 2nd numbers\n    for i in range(0,2):\n        #sets the maximum\n        maximum = a if i==0 else b\n        #returns to the same value\n        return maximum\n    #returns the maximum\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    # return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return \"You must enter numeric values\"\n    else:\n        return a,b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    c=a\n    d=b\n    if a>b:\n        c=a\n        d=b\n    elif b>a:\n        c=b\n        d=a\n    else:\n        print(\"Wrong Input\")\n    return c,d\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    c=a\n    d=b\n    if a<b:\n        c=a\n        d=b\n    elif b<a:\n        c=b\n        d=a\n    else:\n        print(\"Wrong Input\")\n    return c,d\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max = a\n    if b < max:\n        max = b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        max = a\n    else:\n        max = b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        print(\"Both numbers are equal\")\n        \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        print(\"Both numbers are equal\")\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #creating empty list\n    t = []\n    #converting string to list\n    list1 = list(str1)\n    #adding the values to the list\n    for i in range(0,len(list1)):\n        t.append(list1[i])\n    return tuple(t)\n    \ndef is_valid_date(date):\n    '''\n    Write a function that will check if the given date is a valid date.\n    '''\n    #converting string to list\n    l = string_to_tuple(date)\n    #add an empty list for each date\n    a = []\n    for i in l:\n        a.append(i)\n    #if the date is a valid date\n    if (len(a)==9):\n        return True\n    #else return false\n    else:\n        return False\n    \ndef is_valid_time(time):\n    '''\n    Write a function that will check if the given time is a valid time.\n    '''\n    #converting string to list\n    l = string_to_tuple(time)\n    #if the time is a valid time\n    if (len(l)==6):\n        #check if it is a valid date\n        if (is_valid_date(l[0]) == True):\n            #convert the list to a string\n            s = \"\".join(l)\n            #add the string into a list\n            c = list(s)\n            #delete the zeros\n            c.pop(0)\n            #split the list to elements\n            e = c[0:4]\n            #check if it is a valid time\n            if (e == time):\n                return True\n        #if it is not valid date or time\n        else:\n            return False\n    else:\n        return False\n    \ndef is_valid_postcode(postcode):\n    '''\n    Write a function that will check if the given postcode is a valid postcode.\n    '''\n    #converting string to list\n    l = string_to_tuple(postcode)\n    #if the postcode is valid\n    if (len(l)==6):\n        #check if it is a valid date\n        if (is_valid_date(l[0]) == True):\n            #check if the last element of the list is \"A\" or \"B\"\n            if (l[2] == \"A\" or l[2] == \"B\"):\n                #convert the list to a string\n                s = \"\".join(l)\n                #add the string into a list\n                c = list(s)\n                #delete the zeros\n                c.pop(0)\n                #split the list to elements\n                e = c[0:4]\n                #check if it is valid postcode\n                if (e == postcode):\n                    return True\n        #if it is not valid date or time\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup1 = tuple(str1)\n    return tup1\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup1 = ()\n    if len(str1) > 0:\n        for char in str1:\n            tup1 += (char,)\n    return tup1\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # TODO: Write your code here\n    return tuple(str1)\n    \n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s=list(str1)\n    return tuple(s)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    # Create a tuple of all the characters\n    result = tuple(str1)\n    \n    # Return the result\n    return result\n    "
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1.strip().split(\" \"))\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_char = ()\n    tuple_char = tuple(str1)\n    return tuple_char\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple = ()\n    for i in range(len(str1)):\n        tuple = tuple + (str1[i])\n    return tuple\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= ~(
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    import math\n    if n is None:\n        return None\n    if n & 0x80:\n        return n ^ 0xFF\n    return n ^ 0x00\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 0\n    elif n & 0b1000000000 == 0b01000000000000000000000000:\n        n = n >> 1\n    elif n & 0b0100000000 == 0b01000000000000000000000000:\n        n = n >> 1\n    elif n & 0b001100000000 == 0b01000000000000000000000000:\n        n = n >> 1\n    elif n & 0b00100010000 == 0b01000000000000000000000000:\n        n = n >> 1\n    elif n & 0b00101000000 == 0b01000000000000000000000000:\n        n = n >> 1\n    elif n & 0b000100000000 == 0b01000000000000000000000000:\n        n = n >> 1\n    elif n & 0b0001010000 == 0b01000000000000000000000000:\n        n = n >> 1\n    elif n & 0b0001100010000 == 0b01000000000000000000000000:\n        n = n >> 1\n    elif n & 0b0001110000 == 0b01000000000000000000000000:\n        n = n >> 1\n    return n\n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    if n == 0:\n        return 0\n    elif n & 0b1100000000 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b1111110000 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111100000 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111000 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111100 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111110 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111120 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111130 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111140 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111150 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111160 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111170 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111180 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111190 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111200 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111210 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111220 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111230 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111240 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111250 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111260 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111270 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111280 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111290 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111300 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111310 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111320 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111330 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111340 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111350 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111360 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111370 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111380 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111390 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111400 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111410 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111420 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111430 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111440 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111450 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111460 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111470 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111480 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111490 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111500 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111510 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111520 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111530 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111540 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111550 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111560 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111570 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111580 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111590 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111600 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111610 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111620 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111630 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111640 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111650 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111660 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111670 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111680 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111690 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111700 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111710 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111720 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111730 == 0b11000000000000000000000000:\n        n = n >> 1\n    elif n & 0b11111111740 == 0b11000000000000000000000000:"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n >= 0:\n        return n & ~n - 1\n    else:\n        return -1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(0, 8):\n        if n & 1 << i:\n            return 0\n    return 1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit = n & 0x80 \n    bit |= 0x40 \n    bit <<= 1 \n    bit |= 0x20 \n    bit <<= 1 \n    bit |= 0x10 \n    bit <<= 1 \n    bit |= 0x08 \n    bit <<= 1 \n    bit |= 0x04 \n    bit <<= 1 \n    bit |= 0x02 \n    bit <<= 1 \n    bit |= 0x01 \n    bit <<= 1 \n    bit |= 0x00 \n    bit <<= 1 \n    return bit\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for bit in range(n): \n        if(n & 1): \n            set_bit = 1\n        else: \n            set_bit = 0\n        n >>= 1\n        if(n & 1): \n            n >>= 1\n        else: \n            n >>= 1\n        set_bit <<= 1\n        \n    return set_bit\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n >= 0:\n        n &= 0xffffffff\n        bit_swap = 1\n        bit_swap |= 1 << (n-1)\n    return bit_swap\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    l_unset_bit = n & 0xFF\n    n = n >> 8\n    n &= 0xFF\n    n = n | l_unset_bit\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    i = 0\n    while n: \n        if n & 1: \n            n = n >> 1 \n        else: \n            n >>= 1 \n        i += 1\n    return i\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = r * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 0\n    for angle in range(0,360,10):\n        #print(angle)\n        d = math.sin(math.radians(angle))*r\n        volume += d*math.cos(math.radians(angle))\n        #print(d,volume)\n    return volume\n    \n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #your code here\n    return math.pi * (r**2) * h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 0\n    \n    if (r < 0):\n        print(\"Sorry, invalid r value\")\n        \n    else:\n        if (h < 0):\n            print(\"Sorry, invalid h value\")\n            \n        else:\n            r = r/h\n            volume = 4 * math.pi * r * (r**2)\n            print(\"The volume of a cone is\", volume)\n            \n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print('Calculating volume of cone')\n    c = 2 * math.pi * r * h\n    print('volume of cone is', c)\n    return c\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    try:\n        r = float(r)\n    except:\n        raise TypeError('r must be a number.')\n    try:\n        h = float(h)\n    except:\n        raise TypeError('h must be a number.')\n    return math.pi*r*(r+h)*(r*h)\ndef cylindrical_volume(r,h):\n    '''\n    Write a function to find the volume of a cylindrical cone.\n    '''\n    try:\n        r = float(r)\n    except:\n        raise TypeError('r must be a number.')\n    try:\n        h = float(h)\n    except:\n        raise TypeError('h must be a number.')\n    return r**2*h\ndef tangential_volume(r,h):\n    '''\n    Write a function to find the volume of a tangential cone.\n    '''\n    try:\n        r = float(r)\n    except:\n        raise TypeError('r must be a number.')\n    try:\n        h = float(h)\n    except:\n        raise TypeError('h must be a number.')\n    return r**2*(1-h)*h**2\ndef uniform_volume(r,h):\n    '''\n    Write a function to find the volume of a uniform cone.\n    '''\n    try:\n        r = float(r)\n    except:\n        raise TypeError('r must be a number.')\n    try:\n        h = float(h)\n    except:\n        raise TypeError('h must be a number.')\n    return r**2*(1-h)*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # return(volume(r,h))\n    return 0.5*r*h*(4*math.pi*r*(r**2))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=0\n    while r>0:\n        volume+=r**3\n        r/=2\n    volume+=h**3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    volume = (4/3)*math.pi*(r**3)*(h**3)\n    print(\"{} is the volume of a cone whose radius is: {:.2f} and height is: {:.2f}\".format(volume,r,h))\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return highest_Power_of_2(n // 2) + highest_Power_of_2(n // 2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #create a variable to store the max value\n    max_val = 0\n    #create a loop to iterate through all numbers\n    for i in range(1, n+1):\n        #determine the power of 2 that is less than the current value\n        if (n/i) < max_val:\n            #store the current value in the variable to store the new max value\n            max_val = n/i\n    #return the max value\n    return max_val"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    # each iteration iterate only n-1 times\n    for i in range(0, n, 1):\n        p = p*2\n    # calculate the largest power\n    return p\n    \nn = 10\nprint(highest_Power_of_2(n))\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        if (power == 1):\n            print(power)\n        else:\n            print(power, end = \" \")\n        power = power*2\n    print(\"\\n\")\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        return \"n must be non-negative\"\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 2\n    else:\n        return 1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return None\n    if n <= 1:\n        return 1\n    else:\n        return n % 2 + highest_Power_of_2(n / 2)\n    "
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n >= 2:\n        if n%2 == 0:\n            return highest_Power_of_2(n//2)\n        else:\n            return highest_Power_of_2(n//2) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n==1:\n        return n\n    else:\n        if n<=1:\n            return n\n        else:\n            return n%2+highest_Power_of_2(n//2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power = power * 2\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high_powers = [2, 3, 5, 7, 11, 13, 17, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    num = n\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # define number of iterations\n    i = 0\n    # define the first number as a reference value\n    lucas = 1\n    # define the second number as a reference value\n    prev = 1\n    # store ith number in the variable lucas\n    # and add ith number to the previous variable\n    while i < n:\n        lucas = prev + lucas\n        # increment i for every iteration\n        i += 1\n        # increment the previous variable and multiply it by 2\n        prev = lucas\n    # return the number\n    return lucas\n    "
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for i in range(n):\n        if i!= 1 and i!= 2:\n            for j in range(i+1, n):\n                if i == 2:\n                    print(i)\n                    return i\n                if j == i:\n                    print(j)\n                    return j\n        elif i == 1:\n            print(i)\n            return i\n        elif j == i:\n            print(j)\n            return j\n    print(\"Error\")\nn = find_lucas(7"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    a = 0\n    b = 1\n    while a < n:\n        a, b = b, a + b\n        \n    return b \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # YOUR CODE HERE\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 4\n    elif n == 4: \n        return 5\n    elif n == 5: \n        return 6\n    elif n == 6: \n        return 7\n    elif n == 7: \n        return 8\n    elif n == 8: \n        return 9\n    elif n == 9: \n        return 10\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2) + find_lucas(n - 3) + find_lucas(n - 4) + find_lucas(n - 5) + find_lucas(n - 6) + find_lucas(n - 7) + find_lucas(n - 8) + find_lucas(n - 9) + find_lucas(n - 10)"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==1: \n        return 1\n    if n==2: \n        return 2\n    if n==3: \n        return 4\n    if n==4: \n        return 6\n    if n==5: \n        return 10\n    if n==6: \n        return 15\n    if n==7: \n        return 20\n    if n==8: \n        return 25\n    if n==9: \n        return 30\n    if n==10: \n        return 35\n    if n==11: \n        return 40\n    if n==12: \n        return 45\n    if n==13: \n        return 50\n    if n==14: \n        return 55\n    if n==15: \n        return 60\n    if n==16: \n        return 65\n    if n==17: \n        return 70\n    if n==18: \n        return 75\n    if n==19: \n        return 80\n    if n==20: \n        return 85\n    if n==21: \n        return 90\n    if n==22: \n        return 95\n    if n==23: \n        return 100\n    if n==24: \n        return 105\n    if n==25: \n        return 110\n    if n==26: \n        return 115\n    if n==27: \n        return 120\n    if n==28: \n        return 125\n    if n==29: \n        return 130\n    if n==30: \n        return 135\n    if n==31: \n        return 140\n    if n==32: \n        return 145\n    if n==33: \n        return 150\n    if n==34: \n        return 155\n    if n==35: \n        return 160\n    if n==36: \n        return 165\n    if n==37: \n        return 170\n    if n==38: \n        return 175\n    if n==39: \n        return 180\n    if n==40: \n        return 185\n    if n==41: \n        return 190\n    if n==42: \n        return 195\n    if n==43: \n        return 200\n    if n==44: \n        return 205\n    if n==45: \n        return 210\n    if n==46: \n        return 215\n    if n==47: \n        return 220\n    if n==48: \n        return 225\n    if n==49: \n        return 230\n    if n==50: \n        return 235\n    if n==51: \n        return 240\n    if n==52: \n        return 245\n    if n==53: \n        return 250\n    if n==54: \n        return 255\n    if n==55: \n        return 260\n    if n==56: \n        return 265\n    if n==57: \n        return 270\n    if n==58: \n        return 275\n    if n==59: \n        return 280\n    if n==60: \n        return 285\n    if n==61: \n        return 290\n    if n==62: \n        return 295\n    if n==63: \n        return 300\n    if n==64: \n        return 305\n    if n==65: \n        return 310\n    if n==66: \n        return 315\n    if n==67: \n        return 320\n    if n==68: \n        return 325\n    if n==69: \n        return 330\n    if n==70: \n        return 335\n    if n==71: \n        return 340\n    if n==72: \n        return 345\n    if n==73: \n        return 350\n    if n==74: \n        return 355\n    if n==75: \n        return 360\n    if n==76: \n        return 365\n    if n==77: \n        return 370\n    if n==78: \n        return 375\n    if n==79: \n        return 380\n    if n==80: \n        return 385\n    if n==81: \n        return 390\n    if n==82: \n        return 395\n    if n==83: \n        return 400\n    if n==84: \n        return 405\n    if n==85: \n        return 410\n    if n==86: \n        return 415\n    if n==87: \n        return 420\n    if n==88: \n        return 425\n    if n==89: \n        return 430\n    if n==90: \n        return 435\n    if n==91: \n        return 440\n    if n==92: \n        return 445\n    if n==93: \n        return 450\n    if n==94: \n        return 455\n    if n==95: \n        return 460\n    if n==96: \n        return 465\n    if n==97: \n        return 470\n    if n==98: \n        return 475\n    if n==99: \n        return 490\n    if n==100: \n        return 505\n    if n==101: \n        return 510\n    if n==102: \n        return 515\n    if n==103: \n        return 520\n    if n==104: \n        return 525\n    if n==105: \n        return 530\n    if n==106: \n        return 535\n    if n==107: \n        return 540\n    if n==108: \n        return 545\n    if n==109: \n        return 550\n    if n==110: \n        return 555\n    if n==111: \n        return 560\n    if n==112: \n        return 565\n    if n==113: \n        return 570\n    if n==114: \n        return 575\n    if n==115: \n        return 580\n    if n==116: \n        return 585\n    if n==117: \n        return 590\n    if n==118: \n        return 595\n    if n==119: \n        return 600\n    if n==120: \n        return 625\n    if n==121: \n        return 630\n    if n==122: \n        return 635\n    if n==123: \n        return 640\n    if n==124: \n        return 645\n    if n==125: \n        return 650\n    if n==126: \n        return 655\n    if n==127: \n        return 660\n    if n==128: \n        return 665\n    if n==129: \n        return 670\n    if n==130: \n        return 675\n    if n==131: \n        return 680\n    if n==132: \n        return 685\n    if n==133: \n        return 690\n    if n==134: \n        return 695\n    if n==135: \n        return 700\n    if n==136: \n        return 705\n    if n==137: \n        return 710\n    if n==138: \n        return 715\n    if n==139: \n        return 720\n    if n==140: \n        return 725\n    if n==141: \n        return 730\n    if n==142: \n        return 735\n    if n==143: \n        return 740\n    if n==144: \n        return 745\n    if n==145: \n        return 750\n    if n==146: \n        return 755\n    if n==147: \n        return 760\n    if n==148: \n        return 765\n    if n==149: \n        return 770\n    if n==150: \n        return 775\n    if n==151: \n        return 780\n    if n==152: \n        return 785\n    if n==153: \n        return 790\n    if n==154: \n        return 795\n    if n==155: \n        return 800\n    if n==156: \n        return 805\n    if n==157: \n        return 810\n    if n==158: \n        return 815\n    if n==159: \n        return 820\n    if n==160: \n        return 825\n    if n==161: \n        return 830\n    if n==162: \n        return 835\n    if n==163: \n        return 840\n    if n==164: \n        return 845\n    if n==165: \n        retur"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for j in range(1,n+1):\n        if n%j == 0:\n            return j \n    return n\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        k = find_lucas(n-1) + find_lucas(n-2)\n        return k\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    l = 1\n    while n % 2 == 1: \n        n = n//2\n        l += 1\n    return l\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    for i in range(2, n):\n        if (i in lucas_numbers):\n            return i\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = 1\n    if (n == 1):\n        return a\n    elif (n == 2):\n        return 3\n    elif (n == 3):\n        return 5\n    else:\n        for i in range(n-2):\n            a *= 2\n        return a\n    \nlucas = find_lucas(6)\nprint(lucas)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = str(list_[i]) + \" \"\n    list_[i] = list_[i].replace(\" \", \"\")\n    list_[i] = list_[i].replace(\"#\", \"#\")\n    list_[i] = list_[i].replace(\"&\", \"and\")\n    list_[i] = list_[i].replace(\"%\", \"percent\")\n    list_[i] = list_[i].replace(\"$\", \"dollar\")\n    list_[i] = list_[i].replace(\"*\", \"star\")\n    list_[i] = list_[i].replace(\"(\", \"\")\n    list_[i] = list_[i].replace(\")\", \"\")\n    list_[i] = list_[i].replace(\",\", \"\")\n    list_[i] = list_[i].replace(\".\", \"\")\n    list_[i] = list_[i].replace(\"-\", \"-\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\" \", \"\")\n    list_[i] = list_[i].replace(\"--\", \"\").replace(\"-\", \"\")\n    list_[i] = list_[i].replace(\"+\", \"\").replace(\"-\", \"\")\n    list_[i] = list_[i].replace(\"-\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\" \", \"\").replace(\"-\", \"-\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\" \", \"\").replace(\"_\", \"-\")\n    list_[i] = list_[i].replace(\".\", \"\")\n    list_[i] = list_[i].replace(\"-\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\" \", \"\").replace(\"_\", \"-\")\n    list_[i] = list_[i].replace(\".\", \"\")\n    list_[i] = list_[i].replace(\"-\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\" \", \"\").replace(\"_\", \"-\")\n    list_[i] = list_[i].replace(\"-\", \"\").replace(\"_\", \"-\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list_[i] = list_[i].replace(\"_\", \"\")\n    list"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        try:\n            item = item.replace(string,'')\n        except:\n            pass\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string_length = len(string)\n    for i in range(len(list_)):\n        list_[i] = list_[i].format(string_length)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # write your code here\n    new_list = []\n    for element in list_:\n        new_list.append(element.format(string))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # for example, if you have an list of days, you'd need to format like this:\n    # \"Sunday, Oct 1 2020, 08:50:00\"\n    # I'd like to add a format string that formats the date nicely and adds it to the end of the string.\n    # https://www.w3schools.com/python/python_numbers.asp\n    # Let's create a function that formats all numbers. I've created a decorator that will add a format string to the end of the string.\n    # Note: the add_string function will be called with the date as the parameter.\n    # For example, add_string(['Sunday, Oct 1 2020, 08:50:00'], '%a, %d %b %Y %H:%M:%S %z')\n    # To work with a list of integers, use the addition operator\n    # https://www.w3schools.com/python/python_operators.asp\n    # Note that you can add or subtract strings from lists, to perform mathematical operations on them.\n    # For example, if you've passed the letter 'a', it would create a list of strings that contains a's followed by an 'a'\n    # and then it would add a to the end of the string and then return the string.\n    # Note that you can use a +=, -=, *=, /=, //=, **=, and **= to do a + or - or *, or / to do *\n    # for example:\n    # 'Sunday, Oct 1 2020, 08:50:00, 13:00:00'\n    # You can work with the date in the string by passing it to the function as a parameter.\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # write your code here\n    list_ = list(map(str, list_))\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace(' ', '')\n        list_[i] = list_[i].replace('\"', '')\n        list_[i] = list_[i].replace('(', '')\n        list_[i] = list_[i].replace(')', '')\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace(',', '')\n        list_[i] = list_[i].replace('.', '')\n        list_[i] = list_[i].replace('=', '')\n        list_[i] = list_[i].replace('&', '')\n        list_[i] = list_[i].replace('!', '')\n        list_[i] = list_[i].replace('\\'', '')\n        list_[i] = list_[i].replace('-', '')\n    list_[0] = list_[0].replace('\\\\n', '')\n    list_[len(list_)-1] = list_[len(list_)-1].replace('\\n', '')\n    list_[0] = list_[0].replace('\\n', '')\n    string = string.replace('\\\\n', '')\n    string = string.replace('\"', '')\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace(' ', '')\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    list_ = list(map(str, list_))\n    string = string.replace('&', '')\n    string = string.replace('!', '')\n    string = string.replace('\\'', '')\n    string = string.replace('&', '')\n    string = string.replace('\"', '')\n    string = string.replace('#', '')\n    string = string.replace('+', '')\n    string = string.replace('=', '')\n    string = string.replace('*', '')\n    string = string.replace('*', '')\n    string = string.replace(';', '')\n    string = string.replace('\\\\n', '')\n    string = string.replace(' ', '')\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace(' ', '')\n    list_[0] = list_[0].replace(' ', '')\n    list_[len(list_)-1] = list_[len(list_)-1].replace(' ', '')\n    list_[0] = list_[0].replace(' ', '')\n    list_[len(list_)-1] = list_[len(list_)-1].replace(' ', '')\n    string = string.replace(' ', '')\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    list_ = list(map(str, list_))\n    string = string.replace('&', '')\n    string = string.replace('!', '')\n    string = string.replace('\\'', '')\n    string = string.replace('&', '')\n    string = string.replace('\"', '')\n    string = string.replace('#', '')\n    string = string.replace('+', '')\n    string = string.replace('=', '')\n    string = string.replace('*', '')\n    string = string.replace('*', '')\n    string = string.replace(';', '')\n    string = string.replace('\\\\n', '')\n    string = string.replace(' ', '')\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace(' ', '')\n    list_[0] = list_[0].replace(' ', '')\n    list_[len(list_)-1] = list_[len(list_)-1].replace(' ', '')\n    list_[0] = list_[0].replace(' ', '')\n    list_[len(list_)-1] = list_[len(list_)-1].replace(' ', '')\n    string = string.replace(' ', '')\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    list_ = list(map(str, list_))\n    string = string.replace('&', '')\n    string = string.replace('!', '')\n    string = string.replace('\\'', '')\n    string = string.replace('&', '')\n    string = string.replace('\"', '')\n    string = string.replace('#', '')\n    string = string.replace('+', '')\n    string = string.replace('=', '')\n    string = string.replace('*', '')\n    string = string.replace('*', '')\n    string = string.replace(';', '')\n    string = string.replace('\\\\n', '')\n    string = string.replace(' ', '')\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    list_ = list(map(str, list_))\n    string = string.replace('&', '')\n    string = string.replace('!', '')\n    string = string.replace('\\'', '')\n    string = string.replace('&', '')\n    string = string.replace('\"', '')\n    string = string.replace('#', '')\n    string = string.replace('+', '')\n    string = string.replace('=', '')\n    string = string.replace('*', '')\n    string = string.replace('*', '')\n    string = string.replace(';', '')\n    string = string.replace('\\\\n', '')\n    string = string.replace(' ', '')\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    list_ = list(map(str, list_))\n    string = string.replace(' ', '')\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    list_ = list(map(str, list_))\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    list_ = list(map(str, list_))\n    string = string.replace(' ', '')\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    string = string.replace('[', '')\n    string = string.replace(']', '')\n    list_ = list(map(str, list_))\n    string = string.replace(' ', '')\n    string "
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        try:\n            element = element.format(string)\n        except AttributeError:\n            element = string.format(element)\n        list_[i] = element\n        i += 1\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # YOUR CODE HERE\n    string = string.replace('{', '').replace('}', '').replace('[', '').replace(']', '')\n    if string == '':\n        return list_\n    else:\n        return [f'{element}{string}' for element in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        string = string.replace(element, '+' + element)\n    return string\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index in range(len(list_)):\n        list_[index] = list_[index].replace('{', '{' + string + '}')\n        list_[index] = list_[index].replace('}', '}' + string + '}')\n        list_[index] = list_[index].replace('\"', '\"' + string + '}')\n        list_[index] = list_[index].replace(\"'\", '\"' + string + '}')\n    return list"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # function to convert list to dictionary using nested dictionary.\n    \n    d = dict()\n    \n    for i in range(len(l1)):\n        \n        if type(l1[i]) == dict:\n            \n            for j in range(len(l1[i])):\n                \n                l1_item = l1[i][j]\n                \n                if l3[i] == l2[j] and l1[i] not in d:\n                    \n                    d[l1[i]] = l3[j]\n                \n                elif l3[i] == l2[j] and l1[i] in d:\n                    \n                    d[l1[i]] = d[l1[i]] + l3[j]\n                    \n                elif l3[i]!= l1[i] and l1[i] not in d:\n                    \n                    d[l1[i]] = {}\n                    \n                    d[l1[i]][l2[j]] = l3[j]\n                    \n                    d[l1[i]][l3[j]] = l2[j]\n                \n                elif l3[i]!= l1[i] and l1[i] in d:\n                    \n                    d[l1[i]][l2[j]] = l3[j]\n                    \n                    d[l1[i]][l2[j]] = l2[j]\n                \n        else:\n            \n            l3_item = l3[i]\n            \n            if l3_item == l2[i] and l3[i] not in d:\n                \n                d[l3[i]] = l2[i]\n                \n            elif l3_item == l2[i] and l3[i] in d:\n                \n                d[l3[i]] = d[l3[i]] + l2[i]\n                \n            elif l3_item!= l1[i] and l1[i] not in d:\n                \n                d[l3[i]] = {}\n                \n                d[l3[i]][l2[i]] = l1[i]\n                \n                d[l3[i]][l2[i]] = l1[i]\n            \n            elif l3_item!= l1[i] and l1[i] in d:\n                \n                d[l3[i]][l2[i]] = l1[i]\n                \n                d[l3[i]][l2[i]] = l2[i]\n                \n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n    d2 = {}\n    for i in range(len(l2)):\n        d2[l2[i]] = l3[i]\n    return(d1, d2)\n    \ndef recursive_reverse_iterative(d1, d2):\n    '''\n    Write a function to invert a dictionary where each key is a\n    non-repeating character and each value is its frequency.\n    '''\n    l3 = []\n    for k,v in d1.items():\n        if v==1:\n            l3.append(k)\n    d3 = {}\n    for i in range(len(l3)):\n        d3[l3[i]] = d2[l3[i]]\n    return(d3)\n    \ndef non_repeating_characters(d1):\n    '''\n    Write a function to find the number of non-repeating characters\n    in a dictionary.\n    '''\n    l1 = []\n    for k,v in d1.items():\n        if v==1:\n            l1.append(k)\n    l2 = []\n    for i in range(len(l1)):\n        l2.append(l1[i])\n    return(len(l2))\n    \ndef is_palindrome(d):\n    '''\n    Write a function to check if a dictionary is a palindrome.\n    '''\n    d1 = {}\n    for k,v in d.items():\n        d1[v] = k\n    for i in range(len(d1)):\n        if d1[i]!=i:\n            return(False)\n    return(True)\n    \ndef read_file(filename):\n    '''\n    Read a text file and convert it to a list of words.\n    '''\n    file = open(filename, 'r')\n    l1 = file.read().split()\n    return(l1)\n    \ndef build_dict(l1):\n    '''\n    Write a function to read a dictionary and make it a dictionary where\n    each key is a non-repeating character and each value is its frequency.\n    '''\n    d1 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l1[i]\n    return(d1)\n    \ndef build_tree(d1):\n    '''\n    Write a function to build a binary tree data structure.\n    '''\n    l2 = []\n    for i in range(len(d1)):\n        l2.append(d1[i])\n    l3 = []\n    for i in range(len(d1)):\n        for j in range(len(d1)):\n            if d1[i]==d1[j]:\n                l3.append(j)\n    return(l3)\n    \ndef non_repeating_letters(d1):\n    '''\n    Write a function to count the number of non-repeating letters.\n    '''\n    l1 = []\n    for i in d1:\n        if d1[i]==1:\n            l1.append(i)\n    return(len(l1))\n    \ndef main():\n    '''\n    1.\n    The data type of the input file is a text file that contains \n    strings with no whitespace characters. The text file should be \n    named data.txt. The user should be able to read and write \n    data.txt.\n    2.\n    The data type of the output file is a text file that \n    contains the total number of words in the input file.\n    The output file should be named output.txt.\n    '''\n    print('1.')\n    print('The data type of the input file is a text file that contains '+\\\n        ' strings with no whitespace characters. The text file should be '+\\\n        ' data.txt. The user should be able to read and write '+\\\n        'data.txt.')\n    print('2.')\n    print('The data type of the output file is a text file that '+\\\n        'contains the total number of words in the input file.'+\\\n        ' The output file should be named output.txt.')\n    print('________________________________________________________________________________________________________')\n    print('\\n')\n    print('Analizador 1. - O algoritmo de c\u00e1lculo de quantidade de pal\u00edndromo de uma string s \u00e9 um arquivo de texto que cont\u00e9m as letras '+\\\n        'a cada pal\u00edndromo. Dica: voc\u00ea pode usar o m\u00e9todo de c\u00e1lculo de quantidade de pal\u00edndromos de uma string sempre como base para a interess\u00e3o de algumas linguagens.'+\\\n        '\\n')\n    \n    print('________________________________________________________________________________________________________')\n    print('\\n')\n    print('Analizador 2. - A fun\u00e7\u00e3o \"convert_list_dictionary\" recebe como argumento a lista de strings que representam as pal\u00edndromas.'+\\\n        ' Voc\u00ea pode usar o m\u00e9todo de \"convert_list_dictionary\" para converter essas pal\u00edndromas em uma lista. O m\u00e9todo de \"convert_list_dictionary\" n\u00e3o pode ser utilizado para fins educativos. Dica: '+\\\n        'voc\u00ea pode usar o m\u00e9todo de \"convert_list_dictionary\" como argumento para converter uma lista de pal\u00edndromas em uma lista de pal\u00edndromas.'+\\\n        '\\n')\n    print('________________________________________________________________________________________________________')\n    print('\\n')\n    print('Analizador 3. - A fun\u00e7\u00e3o \"recursive_reverse_iterative\" recebe como argumento a lista de strings que representam as pal\u00edndromas.'+\\\n        ' Voc\u00ea pode usar o m\u00e9todo de \"recursive_reverse_iterative\" para recuperar uma lista de pal\u00edndromas em uma lista de pal\u00edndromas.'+\\\n        ' O m\u00e9todo de \"recursive_reverse_iterative\" n\u00e3o pode ser utilizado para fins educativos. Dica: '+\\\n        'voc\u00ea pode usar o m\u00e9todo de \"recursive_reverse_iterative\" para recuperar uma lista de pal\u00edndromas em uma lista de pal\u00edndromas.'+\\\n        '\\n')\n    print('________________________________________________________________________________________________________')\n    print('\\n')\n    print('Analizador 4. - A fun\u00e7\u00e3o \"non_repeating_characters\" recebe como argumento a lista de strings que representam as pal\u00edndromas.'+\\\n        ' Voc\u00ea pode usar o m\u00e9todo de \"non_repeating_characters\" para contar os n\u00fameros de caracteres que a pal\u00edndroma n\u00e3o cont\u00e9m. O m\u00e9todo de \"non_repeating_characters\" n\u00e3o pode ser utilizado para fins educativos. Dica: '+\\\n        'voc\u00ea pode usar o m\u00e9todo de \"non_repeating_characters\" para contar os n\u00fameros de caracteres que a pal\u00edndroma n\u00e3o cont\u00e9m.'+\\\n        '\\n')\n    print('________________________________________________________________________________________________________')\n    print('\\n')\n    print('Analizador 5. - A fun\u00e7\u00e3o \"is_palindrome\" recebe como argumento uma string e retorna 1 se a string for uma pal\u00edndroma, e 0 se n\u00e3o.'+\\\n        '\\n')\n    print('________________________________________________________________________________________________________')\n    print('\\n')\n    print('Analizador 6. - A fun\u00e7\u00e3o \"read_file\" recebe como argumento a string que representam as pal\u00edndromas e retorna uma lista de pal\u00edndromas.'+\\\n        '\\n')\n    print('________________________________________________________________________________________________________')\n    print('\\n')\n    print('Analizador 7. - A fun\u00e7\u00e3o \"build_dict\" recebe como argumento uma lista de pal\u00edndromas e retorna uma dictionary, onde cada key \u00e9 uma pal\u00edn"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    converted_dict = {}\n    for key in l3:\n        if l3[key] not in converted_dict:\n            converted_dict[l3[key]] = {key: l2[key]}\n        else:\n            converted_dict[l3[key]][key] = l2[key]\n    return converted_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #print(\"Converting to dictionary\")\n    d1 = {}\n    d2 = {}\n    d3 = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = dict()\n    i = 0\n    for j in l2:\n        if i % 2 == 0:\n            d[j] = convert_list_dictionary(l1[i], l3[i], l3[i + 1])\n        else:\n            d[j] = l1[i]\n        i += 2\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n    for i in range(len(l2)):\n        result[l2[i]] = l3[i]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for x, y in zip(l1, l2):\n        d[x] = y\n    for x, y in zip(l3, l2):\n        d1[x] = y\n    for x, y in zip(l3, l3):\n        d2[x] = y\n    for x, y in zip(l3, l3):\n        d3[x] = y\n    return d, d1, d2, d3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_l = {}\n    for i in range(0, len(l1)):\n        dict_l[l1[i]] = l2[i]\n    for i in range(0, len(l1)):\n        dict_l[l1[i]] = l3[i]\n    return dict_l\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        d1[i] = []\n        for j in l2:\n            d1[i].append(j)\n    for i in l3:\n        d1[i] = []\n        for j in l3:\n            d1[i].append(j)\n    d2 = {}\n    for i in l1:\n        d2[i] = {}\n        for j in l2:\n            d2[i][j] = []\n            for k in l3:\n                d2[i][j].append(k)\n    return d1, d2\n    \n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # (n/2) + (n/3) + (n/4) + (n/5)\n    return (2 * n + 2) * (2 * n + 3) * (2 * n + 4) * (2 * n + 5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n - get_max_sum(n-1) - get_max_sum(n-2) + get_max_sum(n-3)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max ( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            max_sum = max(max_sum, f(i/2))\n        if i % 3 == 0:\n            max_sum = max(max_sum, f(i/3))\n        if i % 4 == 0:\n            max_sum = max(max_sum, f(i/4))\n        if i % 5 == 0:\n            max_sum = max(max_sum, f(i/5))\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        return max(f(n), f(n / 2), f(n / 3), f(n / 4), f(n / 5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #Start with n = 1\n    #Compute max for each of the values\n    #Sum the results\n    s = 0\n    for i in range (1, n+1):\n        s = s + i\n    #Find the maximum sum\n    return s\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max(f(n) + f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f (n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        if n == 3:\n            return 6\n        if n == 4:\n            return 9\n        if n == 5:\n            return 15\n        return n * f(n/2) + f(n/3) + f(n/4) + f(n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # divide in 5 iterations\n    iterations = 5\n    result = 0\n    # choose index of first non-zero number in result\n    index = 0\n    while index < iterations:\n        temp = 0\n        # calculate the difference of each number\n        for i in range (1, n):\n            temp += f(i)\n        # find the maximum value\n        if temp > result:\n            result = temp\n            index = 1\n        elif temp == result:\n            index += 1\n    # return the answer\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    if (n % 2) == 0:\n        return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    else:\n        return max( (f(n/2) + f(n/3) + f(n/4)), n)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for i in input_list:\n        length_list.append(len(i))\n    return max(length_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(map(len, input_list))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for item in input_list:\n        if len(str(item)) > max_len:\n            max_len = len(str(item))\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = 0\n    for i in input_list:\n        if len(i) > maximum:\n            maximum = len(i)\n    return maximum\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return [item for item in input_list if len(item) > len(item[0])]\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return []\n    else:\n        return input_list[0]\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key = len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = 0\n    for item in input_list:\n        if len(item) > length:\n            length = len(item)\n    return length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    for i in input_list:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return input_list\n    \n    \n    \n    \n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return True if len(test_tup) == len(set(test_tup)) else False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) < 3:\n        return False\n    if len(set(test_tup)) < 3:\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    num_list = list(test_tup)\n    for i in range(len(num_list)):\n        if num_list[i]!= num_list[i]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for x in test_tup:\n        if x in test_tup:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == 1\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a list of tuples from given list\n    list_of_tup = list(test_tup)\n    # loop through each tuple in the list to check if there is a duplicate\n    for num in list_of_tup:\n        if len(set(num)) == len(num):\n            return False\n    # return True\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for item in test_tup:\n        if item in test_tup:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return True if len(set(test_tup)) == 1 else False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for x in str1:\n        if str1.count(x) == 1:\n            return x\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if str1 == \"\":\n        return \" \"\n    \n    if len(str1) == 1:\n        return str1[0]\n    \n    for i in range(len(str1)):\n        if str1[i] == str1[i+1]:\n            continue\n        return str1[i]\n    return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_list = []\n    for i in str1:\n        if i in char_list:\n            char_list.remove(i)\n        else:\n            char_list.append(i)\n    return char_list[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char = ''\n    for i in range(len(str1)):\n        if str1[i] not in char:\n            char += str1[i]\n    return char\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if str1==None or str1=='' or str1=='':\n        return ''\n    else:\n        return str1.find(str1[0])\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for x in str1:\n        if str1.count(x)==1:\n            return x\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return str1[0].find(str1[1:].find(str1[0]))\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count=0\n    for i in str1:\n        if (str1[count]==str1[i]):\n            count+=1\n        else:\n            count=0\n    return str1[count]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    import string\n    output = \"\"\n    for x in string.ascii_lowercase:\n        if x not in output:\n            output += x\n    \n    return output\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return (str1[0])\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = re.compile(regex)\n    return regex.match(string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    string = string.lower()\n    return (string.count(string[0]) + string.count(string[-1])) % 2 == 1\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # regex pattern\n    r = r'^[a-z]+$'\n    # if no match -> return False\n    if not re.search(r, string):\n        return False\n    # if match -> return True\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex,string))\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    check = True\n    if string[0] == string[-1]:\n        check = check_char(string[1:])\n    else:\n        check = check_char(string[0:-1])\n    return check\n    \ndef is_number(string):\n    '''\n    Write a function to check whether a string is a number or not.\n    '''\n    return re.match(r'^[\\d]+$',string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1] and string[0] in string:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # 1.\n    if (not string) or len(string) == 0:\n        return False\n    # 2.\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return True\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return True\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] == 'a':\n        return False\n    # Check whether the given string ends with the character\n    if string[-1] == 'Z' or string[-1] == 'z':\n        return False\n    # Check whether the given string starts with the character\n    if string[0] == 'A' or string[0] ="
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    s = string.lower()\n    st = s.split()\n    if ''.join(st) == s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    temp = re.findall(regex,string)\n    if len(temp) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    return match\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # a,b,c are the three numbers\n    # return the average of the three numbers\n    numbers = []\n    # add them to the list\n    numbers.append(a)\n    numbers.append(b)\n    numbers.append(c)\n    # sort the list\n    numbers.sort()\n    # take the middle index\n    midpoint = len(numbers)//2\n    # return the median\n    return numbers[midpoint]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)!= len(b) and len(a)!= len(c):\n        return 'Invalid arguments'\n    if len(a) % 2 == 0:\n        if len(a) % 3 == 0:\n            mid1 = int((len(a))/3)\n            mid2 = int((len(a))/3) + 1\n            mid3 = int((len(a))/3) + 2\n        else:\n            mid1 = int((len(a))/2)\n            mid2 = int((len(a))/2) + 1\n            mid3 = int((len(a))/2) + 2\n    else:\n        if len(a) % 3 == 0:\n            mid1 = int((len(a))/3)\n            mid2 = int((len(a))/3) + 1\n            mid3 = int((len(a))/3) + 2\n        else:\n            mid1 = int((len(a))/2)\n            mid2 = int((len(a))/2) + 1\n            mid3 = int((len(a))/2) + 2\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Initialize variables\n    first_num = a\n    second_num = b\n    third_num = c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) < 3 or len(b) < 3 or len(c) < 3:\n        return None\n    else:\n        a_median = sorted([a[0],a[1],a[2]])\n        b_median = sorted([b[0],b[1],b[2]])\n        c_median = sorted([c[0],c[1],c[2]])\n        return (a_median + b_median + c_median)/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                return 0\n            else:\n                return 0.5*(c + a + b)\n        else:\n            return (c + b + a)/3\n    elif a == 0:\n        if b == 0:\n            if c == 0:\n                return b\n            else:\n                return b.5*(c + b + a)\n        else:\n            return (b + c + a)/3\n    elif a == 0:\n        if b == 0:\n            if c == 0:\n                return a\n            else:\n                return c.5*(a + c + b)\n        else:\n            return (a + b + c)/3\n    else:\n        return (a + b + c)/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 3:\n        if len(b) == 3:\n            if len(c) == 3:\n                return (a[1] + b[2] + c[2])/3\n            else:\n                return 0\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n    # write your code here\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    c = (a + b + c)\n    c = sorted([a, b, c])\n    c.remove(c[0])\n    c.remove(c[-1])\n    return c[0]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a=sorted(a)\n    b=sorted(b)\n    c=sorted(c)\n    if len(a)==len(b)==len(c):\n        if len(a)%3==0:\n            a=a[:len(a)/3]\n        if len(b)%3==0:\n            b=b[:len(b)/3]\n        if len(c)%3==0:\n            c=c[:len(c)/3]\n    a.sort()\n    b.sort()\n    c.sort()\n    return (a[len(a)/3]+b[len(b)/3]+c[len(c)/3])/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = []\n    for i in range(a, b+1):\n        for j in range(c, b+1):\n            numbers.append(i)\n            numbers.append(j)\n    numbers.sort()\n    mid = numbers[int(len(numbers) / 2)]\n    return mid\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for n in nums:\n        total += n\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += int(num)\n    return sum_of_digits\n    \n    \n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += int(num)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    if nums==[]:\n        return 0\n    nums_sum=0\n    for num in nums:\n        nums_sum+=num\n    return nums_sum\n    \ndef sum_of_digits_2(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    nums_sum=0\n    for num in nums:\n        nums_sum+=num\n    return nums_sum\n    \ndef sum_of_digits_3(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    nums_sum=0\n    for num in nums:\n        nums_sum+=num\n    return nums_sum\n    \ndef sum_of_digits_4(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    nums_sum=0\n    for num in nums:\n        nums_sum+=num**2\n    return nums_sum\n    \ndef sum_of_digits_5(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    nums_sum=0\n    for num in nums:\n        nums_sum+=num**2\n    return nums_sum\n    \ndef sum_of_digits_6(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    nums_sum=0\n    for num in nums:\n        nums_sum+=num**2\n    return nums_sum\n    \ndef sum_of_digits_7(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    nums_sum=0\n    for num in nums:\n        nums_sum+=num**2\n    return nums_sum\n    \ndef main():\n    # Test sum_of_digits_1\n    print(\"test 1\")\n    nums=[1,2,3]\n    print(sum_of_digits_1(nums))\n    \n    # Test sum_of_digits_2\n    print(\"test 2\")\n    nums=[1,2,3]\n    print(sum_of_digits_2(nums))\n    \n    # Test sum_of_digits_3\n    print(\"test 3\")\n    nums=[1,2,3]\n    print(sum_of_digits_3(nums))\n    \n    # Test sum_of_digits_4\n    print(\"test 4\")\n    nums=[1,2,3]\n    print(sum_of_digits_4(nums))\n    \n    # Test sum_of_digits_5\n    print(\"test 5\")\n    nums=[1,2,3]\n    print(sum_of_digits_5(nums))\n    \n    # Test sum_of_digits_6\n    print(\"test 6\")\n    nums=[1,2,3]\n    print(sum_of_digits_6(nums))\n    \n    # Test sum_of_digits_7\n    print(\"test 7\")\n    nums=[1,2,3]\n    print(sum_of_digits_7(nums))\n    \n    \nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits = []\n    for num in nums:\n        digits.append(int(num))\n    total = 0\n    for digit in digits:\n        total += digit\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n    \nprint(sum_of_digits([3, 4, 5, 6, 0]))\nprint(sum_of_digits([3, 4, 5, 6, 0, 1]))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n    \n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits = []\n    for num in nums:\n        digits.append(sum(map(int, str(num))))\n    return sum(digits)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # formula for sum of digits\n    sum = 0\n    # iterate through a list\n    for x in nums:\n        # check to see if this number is a number\n        if int(str(x)[0]) % 2 == 0:\n            # if number is even, just add it to sum\n            sum += int(str(x)[0])\n        else:\n            # if number is odd, add the remainder to the sum\n            sum += int(str(x)[0])\n            # check to see if this number is a number\n            # if this is not, check if it is a negative number\n            if int(str(x)[0]) < 0:\n                # if it is, add the negative number to the sum\n                sum += int(str(x)[0])\n            else:\n                # if it is, subtract the sum from this number\n                sum -= int(str(x)[0])\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    '''\n    #Time limit: 100ms\n    #space limit: 4 spaces\n    '''\n    # Start time: 0.0039 minutes\n    # End time: 0.0076 minutes\n    # Time limit exceeded\n    \n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        \n    return current_sum\n    \n    \n    \n    \n    def sum_of_digits(nums):\n        '''\n        Write a function that returns the sum of the digits of each number.\n        '''\n        # Time limit: 100ms\n        # space limit: 4 spaces\n        # Runtime: 36 ms (54.12%)\n        # Memory Usage: 15.9 MB (63.22%)\n        \n        current_sum = 0\n        for num in nums:\n            current_sum += num\n            \n        return current_sum\n    \n    def sum_of_digits(nums):\n        '''\n        Write a function that returns the sum of the digits of each number.\n        '''\n        # Time limit: 100ms\n        # space limit: 4 spaces\n        # Runtime: 36 ms (54.12%)\n        # Memory Usage: 15.9 MB (63.22%)\n        \n        current_sum = 0\n        for num in nums:\n            current_sum += num\n            \n        return current_sum\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    "
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup_1 = list(test_tup1)\n    tup_2 = list(test_tup2)\n    for i in range(len(tup_1)):\n        tup_1[i] = str(tup_1[i])\n    for i in range(len(tup_2)):\n        tup_2[i] = str(tup_2[i])\n    return (tup_1, tup_2)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    print \"Bitwise XOR operation: \"\n    for i in range(0, len(test_tup1)):\n        test_tup2[i] = test_tup1[i] ^ test_tup2[i]\n    print test_tup2\n    \ndef bitwise_or(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise or operation across the given tuples.\n    '''\n    print \"Bitwise OR operation: \"\n    for i in range(0, len(test_tup1)):\n        test_tup2[i] = test_tup1[i] | test_tup2[i]\n    print test_tup2\n    \ndef bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise and operation across the given tuples.\n    '''\n    print \"Bitwise AND operation: \"\n    for i in range(0, len(test_tup1)):\n        test_tup2[i] = test_tup1[i] & test_tup2[i]\n    print test_tup2\n    \ndef bitwise_not(test_tup1):\n    '''\n    Write a function to perform the mathematical bitwise not operation across the given tuples.\n    '''\n    print \"Bitwise NOT operation: \"\n    for i in range(0, len(test_tup1)):\n        test_tup2[i] = ~test_tup1[i]\n    print test_tup2\n    \ndef bits_gather(tup):\n    '''\n    Write a function to gather bits in a given list using bitshift.\n    '''\n    print \"Bitshift operation: \"\n    for i in range(0, len(tup)):\n        tup[i] = bit_shifts(tup[i])\n    print tup\n    \ndef bit_shifts(tup):\n    '''\n    Write a function to shift bits in a given list using bitwise shifters.\n    '''\n    print \"Bitwise shifters: \"\n    for i in range(0, len(tup)):\n        tup[i] = bitwise_shifts(tup[i])\n    print tup\n    \ndef bitwise_shifts(tup):\n    '''\n    Write a function to shift bits in a given list using bitwise shifters.\n    '''\n    print \"Bitwise shifters: \"\n    for i in range(0, len(tup)):\n        tup[i] = bitwise_shifts(tup[i])\n    print tup\n    \ndef bitwise_and_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise and operation on two lists.\n    '''\n    print \"Bitwise AND operation: \"\n    print bitwise_and(tup1, tup2)\n    \ndef bitwise_or_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise or operation on two lists.\n    '''\n    print \"Bitwise OR operation: \"\n    print bitwise_or(tup1, tup2)\n    \ndef bitwise_xor_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor operation on two lists.\n    '''\n    print \"Bitwise XOR operation: \"\n    print bitwise_xor(tup1, tup2)\n    \ndef bitwise_not_operation(tup1):\n    '''\n    Write a function to perform the bitwise not operation on the given list.\n    '''\n    print \"Bitwise NOT operation: \"\n    print bitwise_not(tup1)\n    \ndef bitwise_xor_and_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor and operation on the given list.\n    '''\n    print \"Bitwise XOR and operation: \"\n    print bitwise_xor_and(tup1, tup2)\n    \ndef bitwise_xor_or_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor or operation on the given list.\n    '''\n    print \"Bitwise XOR or operation: \"\n    print bitwise_xor_or(tup1, tup2)\n    \ndef bitwise_xor_and_or_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor and or operation on the given list.\n    '''\n    print \"Bitwise XOR and or operation: \"\n    print bitwise_xor_and_or(tup1, tup2)\n    \ndef bitwise_xor_xor_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor xor operation on the given list.\n    '''\n    print \"Bitwise XOR xor operation: \"\n    print bitwise_xor_xor(tup1, tup2)\n    \ndef bitwise_xor_and_not_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor and not operation on the given list.\n    '''\n    print \"Bitwise XOR and not operation: \"\n    print bitwise_xor_and_not(tup1, tup2)\n    \ndef bitwise_xor_or_not_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor or not operation on the given list.\n    '''\n    print \"Bitwise XOR or not operation: \"\n    print bitwise_xor_or_not(tup1, tup2)\n    \ndef bitwise_xor_xor_not_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor xor not operation on the given list.\n    '''\n    print \"Bitwise XOR xor not operation: \"\n    print bitwise_xor_xor_not(tup1, tup2)\n    \ndef bitwise_xor_and_xor_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor and xor operation on the given list.\n    '''\n    print \"Bitwise XOR and xor operation: \"\n    print bitwise_xor_and(tup1, tup2)\n    \ndef bitwise_xor_and_and_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor and and operation on the given list.\n    '''\n    print \"Bitwise XOR and and operation: \"\n    print bitwise_xor_and_and(tup1, tup2)\n    \ndef bitwise_xor_and_xor_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor and xor operation on the given list.\n    '''\n    print \"Bitwise XOR and xor operation: \"\n    print bitwise_xor_and_xor(tup1, tup2)\n    \ndef bitwise_xor_and_or_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor and or operation on the given list.\n    '''\n    print \"Bitwise XOR and or operation: \"\n    print bitwise_xor_and_or(tup1, tup2)\n    \ndef bitwise_xor_and_or_and_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor and or and operation on the given list.\n    '''\n    print \"Bitwise XOR and or and operation: \"\n    print bitwise_xor_and_or_and(tup1, tup2)\n    \ndef bitwise_xor_and_or_and_or_operation(tup1, tup2):\n    '''\n    Write a function to perform the bitwise xor and or and or operatio"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    print(\"Executing bitwise xor\")\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    \n    result = test_tup1.symmetric_difference(test_tup2)\n    print(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Tuple lengths must be equal.\"\n    assert len(test_tup1[0]) == len(test_tup2[0]), \"Operands must be of same length.\"\n    assert all([len(x) == len(y) for x, y in zip(test_tup1, test_tup2)])\n    xor_result = [a ^ b for a, b in zip(test_tup1, test_tup2)]\n    return xor_result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        x = test_tup1[i]\n        y = test_tup2[i]\n        res.append((x ^ y))\n    return res\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_test_tup1 = []\n    xor_test_tup2 = []\n    for element in test_tup1:\n        xor_test_tup1.append(element)\n    for element in test_tup2:\n        xor_test_tup2.append(element)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    answer = 0\n    for tup in test_tup1:\n        answer = answer ^ tup\n    for tup in test_tup2:\n        answer = answer ^ tup\n    return answer\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    \n    if a == c:\n        return (a ^ b)\n    elif b == c:\n        return (b ^ a)\n    else:\n        return a ^ b\n    \n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for x in range(len(test_tup1)):\n        result += test_tup1[x] * test_tup2[x]\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for item1, item2 in zip(test_tup1, test_tup2):\n        result ^= item1 ^ item2\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = test_list.split()\n    unique_test_list = []\n    for i in range(len(test_list)):\n        if i == 0:\n            unique_test_list.append(test_list[i])\n        else:\n            if test_list[i] in unique_test_list:\n                unique_test_list.remove(test_list[i])\n    return len(unique_test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # A code block to extract the number of unique tuples\n    total = 0\n    for element in test_list:\n        if type(element) == list:\n            total += len(element)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    def count_unique(tests):\n        '''\n        Count the number of unique tuples in the given list.\n        '''\n        return sum([1 for x in tests if x])\n    \n    test_list = [x for x in test_list if x]\n    test_list.sort()\n    \n    return count_unique(test_list)\n    \ndef test_sequence_of_tests():\n    '''\n    Write a function that returns the length of the longest sequence of\n    different elements within a list.\n    '''\n    test_list = [2, 2, 3, 5, 2, 2, 3, 6, 4, 5, 2, 4, 2, 1, 5, 4, 6, 7, 9, 8, 2, 4, 5, 3, 2, 5, 9, 1, 4, 5, 6, 3, 4, 1, 5, 6, 1, 5, 7, 5, 1, 4, 6, 3, 3, 4, 1, 5, 7, 6, 4, 5, 3, 7, 4, 6, 1, 5, 2, 1, 2, 1, 1, 1, 6, 1, 4, 2, 5, 2, 7, 4, 3, 5, 4, 3, 3, 5, 4, 6, 2, 3, 4, 2, 3, 4, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 4, 4, 4, 5, 3, 2, 4, 2, 5, 5, 3, 4, 2, 2, 1, 5, 3, 1, 5, 5, 4, 2, 6, 1, 3, 5, 1, 4, 3, 3, 6, 5, 1, 3, 4, 6, 4, 5, 3, 1, 6, 1, 1, 4, 5, 4, 1, 4, 3, 2, 2, 3, 1, 3, 4, 6, 4, 5, 4, 3, 4, 5, 4, 5, 6, 4, 6, 4, 3, 3, 1, 5, 4, 2, 2, 6, 4, 6, 1, 5, 2, 1, 3, 5, 2, 5, 4, 5, 5, 6, 6, 5, 4, 3, 5, 3, 3, 1, 5, 2, 1, 5, 5, 6, 6, 4, 5, 6, 2, 2, 2, 2, 5, 3, 5, 4, 6, 4, 4, 3, 5, 4, 3, 3, 4, 4, 1, 6, 4, 5, 2, 3, 6, 1, 6, 2, 2, 2, 2, 5, 3, 2, 5, 1, 1, 1, 2, 2, 3, 1, 3, 6, 4, 2, 4, 2, 3, 2, 6, 6, 4, 4, 5, 2, 2, 1, 5, 2, 3, 4, 4, 2, 5, 6, 1, 4, 6, 6, 6, 6, 6, 3, 2, 2, 6, 3, 3, 4, 5, 3, 5, 6, 4, 4, 1, 3, 1, 5, 4, 2, 2, 3, 4, 1, 5, 2, 3, 5, 5, 5, 4, 4, 5, 5, 6, 6, 6, 3, 4, 4, 2, 2, 2, 2, 4, 5, 3, 2, 1, 2, 2, 5, 5, 2, 4, 1, 4, 5, 5, 1, 5, 6, 5, 1, 5, 5, 2, 2, 1, 6, 5, 2, 4, 5, 4, 2, 5, 3, 2, 5, 1, 1, 6, 4, 4, 6, 3, 4, 3, 3, 4, 4, 4, 4, 1, 2, 5, 5, 6, 3, 4, 6, 1, 4, 3, 2, 6, 6, 5, 4, 3, 1, 2, 2, 5, 2, 5, 3, 4, 1, 6, 3, 5, 5, 6, 1, 5, 4, 3, 4, 5, 1, 6, 5, 2, 5, 2, 2, 5, 4, 6, 4, 3, 5, 4, 3, 1, 6, 4, 6, 6, 4, 4, 6, 6, 5, 2, 4, 2, 6, 5, 4, 3, 5, 1, 5, 4, 4, 5, 3, 4, 4, 5, 1, 1, 2, 4, 2, 5, 6, 6, 4, 6, 5, 6, 5, 2, 4, 5, 5, 2, 3, 3, 2, 1, 4, 6, 6, 5, 3, 1, 5, 6, 6, 3, 1, 3, 2, 4, 4, 4, 3, 5, 2, 5, 4, 5, 5, 3, 6, 5, 6, 6, 6, 2, 4, 4, 4, 1, 3, 3, 5, 6, 6, 4, 6, 1, 5, 3, 2, 2, 5, 5, 6, 6, 6, 2, 4, 3, 2, 2, 4, 5, 6, 1, 3, 2, 5, 3, 5, 3, 1, 3, 1, 4, 2, 6, 5, 6, 4, 1, 4, 4, 3, 4, 6, 5, 2, 4, 3, 6, 1, 5, 4, 2, 6, 5, 6, 5, 6, 5, 5, 3, 5, 6, 2, 3, 2, 4, 4, 3, 5, 5, 6, 5, 4, 5, 4, 3, 4, 5, 1, 2, 5, 1, 3, 6, 1, 5, 5, 5, 2, 1, 4, 3, 4, 2, 4, 1, 6, 4, 4, 4, 6, 4, 5, 2, 3, 1, 1, 2, 3, 6, 5, 6, 5, 1, 4, 2, 5, 6, 5, 4, 4, 6, 4, 4, 2, 4, 3, 2, 4, 2, 1, 4, 6, 2, 5, 6, 6, 3, 3, 1, 4, 3, 5, 5, 2, 4, 3, 6, 5, 4, 5, 6, 5, 3, 6, 5, 4, 5, 3, 6, 2, 4, 5, 4, 5, 3, 6, 5, 6, 4, 3, 2, 5, 5, 6, 6, 6, 4, 2, 2, 3, 5, 2, 5, 6, 4, 5, 5, 6, 2, 4, 3, 4, 3, 4, 6, 4, 5, 6, 5, 5, 3, 6, 1, 2, 6, 5, 5, 5, 6, 6, 6, 5, 5, 4, 5, 5, 5, 4, 6, 4, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 6, 4, 5, 3, 5, 5, 4, 2, 3, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 4, 5, 3, 4, 6, 6, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 4, 3, 3, 4, 4, 3, 4, 6, 3, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 4, 3, 5, 5, 5, 5, 6, 4, 4, 5, 3, 5, 3, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, "
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    f = 0\n    for t in test_list:\n        f += len(t)\n    return f\n    \n    \ndef extract_min_freq(test_list):\n    '''\n    Write a function to extract the minimum frequency of the tuples in the given list.\n    '''\n    f = float('inf')\n    for t in test_list:\n        if t[0] < f:\n            f = t[0]\n    return f\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dic = {}\n    for t in test_list:\n        if t in dic:\n            dic[t] = dic[t] + 1\n        else:\n            dic[t] = 1\n    return(dic)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # your code here\n    # create a list to hold the frequencies\n    unique_test_list = []\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuple = 0\n    for tup in test_list:\n        if tup not in test_list[:5]:\n            unique_tuple += 1\n    print(\"Unique tuples in the list are: {}\".format(unique_tuple))\n    return unique_tuple\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list_ = []\n    for i in range(len(test_list)):\n        for j in test_list[i]:\n            test_list_.append(j)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dict = {}\n    for el in test_list:\n        if el in dict:\n            dict[el] += 1\n        else:\n            dict[el] = 1\n    return dict\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # write your code here\n    # start writing your code here\n    # add the second element of each tuple\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # empty list to store nested tuples\n    out = []\n    for i in range(len(test_tup1)):\n        out.append([])\n        for j in range(len(test_tup2)):\n            if type(test_tup1[i][j]) == str:\n                out[i].append(test_tup1[i][j])\n            else:\n                out[i].append(test_tup2[j][i])\n    return out\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested_tuples(test_tup1, test_tup2):\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] + test_tup2[i]\n        return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Create two empty lists\n    list1 = []\n    list2 = []\n    # Iterate through test_tup1\n    for index, item in enumerate(test_tup1):\n        # Create a new tuple with the updated index \n        test_tup_new = (item, index)\n        # Append tuple to list1\n        list1.append(test_tup_new)\n    # Iterate through test_tup2\n    for index, item in enumerate(test_tup2):\n        # Create a new tuple with the updated index \n        test_tup_new = (item, index)\n        # Append tuple to list2\n        list2.append(test_tup_new)\n    # Add list1 and list2 to result list\n    result = list1 + list2\n    # Return the result\n    return result\n    \n    \n    \ndef add_nested_dicts(test_dict1, test_dict2):\n    '''\n    Write a function to perform index wise addition of dictionary elements in the given two nested dictionaries.\n    '''\n    # Create a new list\n    result_list = []\n    # Iterate through each entry in both dictionaries\n    for item in test_dict1:\n        # Append key, value pair to the new list\n        test_item = (item, test_dict1[item])\n        result_list.append(test_item)\n    # Iterate through each entry in both dictionaries\n    for item in test_dict2:\n        # Append key, value pair to the new list\n        test_item = (item, test_dict2[item])\n        result_list.append(test_item)\n    # Return the result list\n    return result_list\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup = (test_tup1[0], test_tup2[0])\n    for i in range(1, len(test_tup1)):\n        tup = (tup[0] + test_tup1[i], tup[1] + test_tup2[i])\n    return tup\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # write your code here\n    t1 = test_tup1\n    t2 = test_tup2\n    t1_len = len(t1)\n    t2_len = len(t2)\n    final_tup = []\n    # t1_sum = 0\n    # t2_sum = 0\n    # for i in range(t1_len):\n    #     for j in range(t2_len):\n    #         # t1_sum = t1_sum + t1[i]\n    #         # t2_sum = t2_sum + t2[j]\n    #         # final_tup.append((t1[i],t2[j]))\n    #         # print(final_tup)\n    #         final_tup.append((t1[i],t2[j],t1[i] + t2[j]))\n    #     final_tup.append((t1[i],t2[j],t1[i] + t2[j]))\n    # print(final_tup)\n    for i in range(t1_len):\n        for j in range(t2_len):\n            # t1_sum = t1_sum + t1[i]\n            # t2_sum = t2_sum + t2[j]\n            # final_tup.append((t1[i],t2[j]))\n            final_tup.append((t1[i],t2[j],t1[i] + t2[j]))\n    # print(final_tup)\n    return final_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_list = []\n    for tup in test_tup1:\n        for tup_2 in test_tup2:\n            test_list.append((tup, tup_2))\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # TODO: Write your code here\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + test_tup1[i] + test_tup2[i]\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # iterate through each tuple\n    for i in range(len(test_tup1)):\n        # create tuple object\n        tup = tuple(test_tup1[i])\n        # get index\n        j = test_tup2.index(tup)\n        # add index value\n        test_tup2[j] += tup\n    return test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = test_tup1[0] + test_tup2[0]\n    result += test_tup1[1] + test_tup2[1]\n    result += test_tup1[2] + test_tup2[2]\n    result += test_tup1[3] + test_tup2[3]\n    result += test_tup1[4] + test_tup2[4]\n    result += test_tup1[5] + test_tup2[5]\n    result += test_tup1[6] + test_tup2[6]\n    return result\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return sum(a,b)/2\ndef stdDev(a,b):   \n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    return (a-average(a,b))**2\ndef quartile(a,b):   \n    '''\n    Write a python function to find the quartile of two numbers.\n    '''\n    return (a-average(a,b))*1.5\ndef pointStdDev(a,b):   \n    '''\n    Write a python function to find the standard deviation of all points.\n    '''\n    a=list(a)\n    b=list(b)\n    c=[]\n    for i in range(len(a)):\n        c.append(stdDev(a[i],b[i]))\n    return(sum(c)/len(c))\ndef quartiles(a,b):   \n    '''\n    Write a python function to find the quartile of all points.\n    '''\n    a=list(a)\n    b=list(b)\n    c=[]\n    for i in range(len(a)):\n        c.append(quartile(a[i],b[i]))\n    return(c)\ndef correlation(a,b):   \n    '''\n    Write a python function to find the correlation coefficient of two numbers.\n    '''\n    a=list(a)\n    b=list(b)\n    c=[]\n    for i in range(len(a)):\n        c.append(a[i]-b[i])\n    return(sum(c)/len(c))\ndef variance(a,b):   \n    '''\n    Write a python function to find the variance of two numbers.\n    '''\n    a=list(a)\n    b=list(b)\n    c=[]\n    for i in range(len(a)):\n        c.append(a[i]-b[i])\n    return(sum(c)/len(c))\ndef skewness(a,b):   \n    '''\n    Write a python function to find the skewness of two numbers.\n    '''\n    a=list(a)\n    b=list(b)\n    c=[]\n    for i in range(len(a)):\n        c.append(a[i]/b[i])\n    return(sum(c)/len(c))\ndef kurtosis(a,b):   \n    '''\n    Write a python function to find the kurtosis of two numbers.\n    '''\n    a=list(a)\n    b=list(b)\n    c=[]\n    for i in range(len(a)):\n        c.append(a[i]/b[i])\n    return(sum(c)/len(c)"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        return b\n    else:\n        return a\ndef division(a,b):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if a==0:\n        return b\n    else:\n        return a*division(b,a-1)\ndef factorial(a):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if a==0:\n        return 1\n    else:\n        return a*factorial(a-1)\ndef is_prime(a):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if a==1:\n        return False\n    if a%2==0:\n        return False\n    for i in range(3,a//2,2):\n        if a%i==0:\n            return False\n    return True\ndef quadratic(a,b,c):\n    '''\n    Write a python function to find the discriminant of a quadratic equation.\n    '''\n    d=b**2-4*a*c\n    if d==0:\n        return 0\n    if d>0:\n        return d**0.5\ndef main():\n    '''\n    Execute the program.\n    '''\n    print(\"\\nPython Calculator Program\")\n    print(\"-----------------------\\n\")\n    print(\"\"\"\n        Quadratic Equation Calculator\n        =================\n        [1] for addition\n        [2] for subtraction\n        [3] for division\n        [4] for multiplication\n        [5] for square\n        [6] for square root\n        [7] for square root of a number\n        [8] for factorial\n        [9] for quadratic\n        [10] for squareroot\n        [99] for exit\n    \"\"\")\n    print(\"Enter your choice (1-99): \", end='')\n    choice = int(input())\n    if choice == 1:\n        a = int(input(\"Enter a number: \"))\n        b = int(input(\"Enter b: \"))\n        print(\"The result is: \", addition(a,b))\n    elif choice == 2:\n        a = int(input(\"Enter a number: \"))\n        b = int(input(\"Enter b: \"))\n        print(\"The result is: \", subtraction(a,b))\n    elif choice == 3:\n        a = int(input(\"Enter a number: \"))\n        b = int(input(\"Enter b: \"))\n        print(\"The result is: \", division(a,b))\n    elif choice == 4:\n        a = int(input(\"Enter a number: \"))\n        b = int(input(\"Enter b: \"))\n        print(\"The result is: \", multiplication(a,b))\n    elif choice == 5:\n        a = int(input(\"Enter a number: \"))\n        b = int(input(\"Enter b: \"))\n        print(\"The result is: \", square(a,b))\n    elif choice == 6:\n        a = int(input(\"Enter a number: \"))\n        print(\"The result is: \", square_root(a))\n    elif choice == 7:\n        a = int(input(\"Enter a number: \"))\n        print(\"The result is: \", square_root(a))\n    elif choice == 8:\n        a = int(input(\"Enter a number: \"))\n        print(\"The result is: \", factorial(a))\n    elif choice == 9:\n        a = int(input(\"Enter a number: \"))\n        print(\"The result is: \", quadratic(a,0,0))\n    elif choice == 10:\n        a = int(input(\"Enter a number: \"))\n        print(\"The result is: \", quadratic(a,0,0))\n    elif choice == 99:\n        print(\"Bye!\")\n    else:\n        print(\"That is not a valid number, try again.\")\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if len(a) == 0:\n        if len(b) == 0:\n            return None\n        else:\n            return b[0]\n    elif len(a) == 0:\n        if len(b) == 0:\n            return None\n        else:\n            return b[0]\n    elif len(a) == 1:\n        if len(b) == 1:\n            return a[0]\n        else:\n            return b[0]\n    else:\n        if len(b) == 1:\n            return min(a[0],b[0])\n        elif len(b) == 0:\n            return min(a[0],b)\n        else:\n            return min(a[0],b[0])\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a>b):\n        small = a\n    else:\n        small = b\n    return small\n    \n    \n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return 0\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    \n    if a>0:\n        return a\n    if b>0:\n        return b\n    else:\n        return 0\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return a\na=int(input('Enter the first number: '))\nb=int(input('Enter the second number: '))\nprint(minimum(a,b))"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        a,b=b,a\n    while a>0:\n        a-=1\n        while b>0:\n            b-=1\n            if a>b:\n                break\n    return a\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return tuple1\n    else:\n        return check_tuplex(tuplex,tuple1+1)\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)): \n        if tuple1[i] == tuplex[i]:\n            return True\n    return False\n    \ndef check_list(list,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(list)): \n        if tuple1[i] == list[i]:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == 2:\n        return tuplex == tuple1\n    elif len(tuplex) == 3:\n        return tuplex == tuple1[:2]\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i[0] == tuple1:\n            return True\n    else:\n        return False\n    \n    \ntuple1 = (1,2,3,4)\ntuple2 = (2,3,4,5,6,7,8,9)\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\ndef check_tuple(tuple1): \n    '''\n    Write a function to check whether a element exists within a tuple.\n    '''\n    if tuple1 in tuple1:\n        return True\n    else:\n        return False\ndef check_tuple_compare(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        return True\n    else:\n        return False\ndef check_tuple_dist(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] in tuple2[0] and tuple1[1] in tuple2[1] and tuple1[2] in tuple2[2]:\n        return True\n    else:\n        return False\ndef check_tuple_sorted(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        return True\n    else:\n        return False\ndef check_tuple_sorted_compare(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] in tuple2[0] and tuple1[1] in tuple2[1] and tuple1[2] in tuple2[2]:\n        return True\n    else:\n        return False\ndef check_tuple_sorted_dist(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] in tuple2[0] and tuple1[1] in tuple2[1] and tuple1[2] in tuple2[2]:\n        return True\n    else:\n        return False\ndef check_tuple_sorted_sorted(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] in tuple2[0] and tuple1[1] in tuple2[1] and tuple1[2] in tuple2[2]:\n        return True\n    else:\n        return False\ndef check_tuple_tuple1(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple1:\n        return True\n    else:\n        return False\ndef check_tuple_tuple2(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        return True\n    else:\n        return False\ndef check_tuple_tuple3(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        return True\n    else:\n        return False\ndef check_tuple_tuple3_compare(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] in tuple2[0] and tuple1[1] in tuple2[1] and tuple1[2] in tuple2[2]:\n        return True\n    else:\n        return False\ndef check_tuple_tuple3_dist(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] in tuple2[0] and tuple1[1] in tuple2[1] and tuple1[2] in tuple2[2]:\n        return True\n    else:\n        return False\ndef check_tuple_tuple3_sorted(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] in tuple2[0] and tuple1[1] in tuple2[1] and tuple1[2] in tuple2[2]:\n        return True\n    else:\n        return False\ndef check_tuple_tuple3_sorted_compare(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] in tuple2[0] and tuple1[1] in tuple2[1] and tuple1[2] in tuple2[2]:\n        return True\n    else:\n        return False\ndef check_tuple_tuple4(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple1:\n        return True\n    else:\n        return False\ndef check_tuple_tuple5(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple2:\n        return True\n    else:\n        return False\ndef check_tuple_tuple6(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] in tuple2[0] and tuple1[1] in tuple2[1] and tuple1[2] in tuple2[2]:\n        return True\n    else:\n        return False\ndef check_tuple_tuple7(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple1:\n        return True\n    else:\n        return False\ndef check_tuple_tuple8(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple1:\n        return True\n    else:\n        return False\ndef check_tuple_tuple9(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple1:\n        return True\n    else:\n        return False\ndef check_tuple_tuple10(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] in tuple2[0] and tuple1[1] in tuple2[1] and tuple1[2] in tuple2[2]:\n        return True\n    else:\n        return False\ndef check_tuple_tuple11(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] in tuple2[0] and tuple1[1] in tuple2[1] and tuple1[2] in tuple2[2]:\n        return True\n    else:\n        return False\ndef check_tuple_tuple12(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] in tuple2[0] and tuple1[1] in tuple2[1] and tuple1[2] in tuple2[2]:\n        return True\n    else:\n        return False\ndef check_tuple_tuple13(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple1:\n        return True\n    else:\n        return False\ndef check_tuple_tuple14(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuple1:\n        return True\n    else:\n        return False\ndef check_tuple_tuple15(tuple1,tuple2): \n    '''\n    Write a function to check whethe"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check = 0 \n    for i in range(len(tuplex)): \n        if (tuplex[i] == tuple1): \n            check = 1 \n    return check \ndef get_tuplex(tuplex):\n    '''\n    Write a function to return the tuple.\n    '''\n    while True: \n        try: \n            tuplex = (input('Enter a tuple: ')).split()\n            for i in range(len(tuplex)): \n                tuplex[i] = int(tuplex[i]) \n            break\n        except: \n            print('Please enter a valid tuple.')\n    return tuple(tuplex)\ndef list_tuplex(tuplex):\n    '''\n    Write a function to print the list in tuple.\n    '''\n    for i in range(len(tuplex)): \n        print(tuplex[i], end=', ') \n    print('')\ndef main(): \n    '''\n    Write your own code here to print the list of tuples.\n    '''\n    tuplex = list() \n    print('Enter a tuple.') \n    tuplex = get_tuplex(tuplex) \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements in a tuple.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are greater than the first element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints the length of the list of tuples.') \n    print('1st element: ') \n    print(len(tuplex)) \n    print('2nd element: ') \n    print(len(tuplex[0])) \n    print('3rd element: ') \n    print(len(tuplex[1])) \n    print('\\n')\n    print('Prints all elements, which are greater than the first element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints the highest value of the tuple.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are less than the second element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are less than the first element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are less than the second element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are greater than the third element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are greater than the third element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are greater than the third element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are less than the third element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are less than the second element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are less than the first element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are less than the third element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are less than the second element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are less than the first element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print(tuplex[2]) \n    print('\\n')\n    print('Prints all elements, which are less than the third element.') \n    print('1st element: ') \n    print(tuplex[0]) \n    print('2nd element: ') \n    print(tuplex[1]) \n    print('3rd element: ') \n    print"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(0,len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] == tuplex[1] == tuplex[2] == tuple1[0] == tuple1[1] == tuple1[2]: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # your code here\n    # return True/False\n    return tuple1 in tuplex"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0: \n        return 'Even'\n    else: \n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Create a copy of the list x\n    y = list(x)\n    # Loop through the list\n    for i in range(0, len(y)):\n        # if x % 2 == 0:\n        #     y[i] = 0\n        # else:\n        #     y[i] = 1\n        if x % 2 == 0:\n            y[i] = 0\n        else:\n            y[i] = 1\n    return y\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 0\n    #return (x % 2 == 0)\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # implement the parity check algorithm\n    if x > 0:\n        if x % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0:\n        return True\n    if x % 2 == 0:\n        return True\n    return False\ndef find_set_of_prime(x):\n    '''\n    Write a python function to find the prime numbers between 1 and x.\n    '''\n    if x == 0:\n        return []\n    else:\n        prime_numbers = []\n        for i in range(1,x + 1):\n            if x % i == 0:\n                prime_numbers.append(i)\n        return prime_numbers\ndef find_set_of_p(x):\n    '''\n    Write a python function to find all the prime numbers between 1 to x.\n    '''\n    prime_numbers = []\n    for i in range(2,x + 1):\n        for j in range(i * i, x + 1, i):\n            if j not in prime_numbers:\n                prime_numbers.append(j)\n    return prime_numbers\ndef is_prime(x):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if x == 0:\n        return False\n    for i in range(2, int(math.sqrt(x)) + 1):\n        if x % i == 0:\n            return False\n    return True\ndef find_set_of_primes(x):\n    '''\n    Write a python function to find the prime numbers between 1 to x.\n    '''\n    prime_numbers = []\n    for i in range(2,x + 1):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\ndef find_set_of_P(x):\n    '''\n    Write a python function to find all the prime numbers between 1 to x.\n    '''\n    prime_numbers = []\n    for i in range(2,x + 1):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\ndef is_prime_prime(x):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if x == 0:\n        return False\n    for i in range(2, x + 1):\n        if x % i == 0:\n            return False\n    return True\ndef find_set_of_P_primes(x):\n    '''\n    Write a python function to find the prime numbers between 1 to x.\n    '''\n    prime_numbers = []\n    for i in range(2,x + 1):\n        if is_prime_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd = True\n    if x%2!= 0: \n        odd = False\n    else:\n        odd = True\n    return odd\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = int(x) \n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num=n\n    str_num=str(num)\n    lst=list(str_num)\n    lst.sort()\n    \n    a,b,c=lst[1],lst[3],lst[5]\n    return b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+a+b+c+"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        return str(n%10) + rearrange_bigger(n//10)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(str(n)) < 9:\n        n = int(n)\n    else:\n        n = int(n[1:])\n    if n == 0:\n        return 0\n    if n < 10:\n        return n\n    else:\n        return n % 10 + rearrange_bigger(int(n/10))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    fraction = n // 10**(len(str(n))-1)\n    n = n%10**(len(str(n))-1)\n    digit = (n//10)%10\n    if fraction==0:\n        return(str(digit))\n    else:\n        return(str(digit)+'.'+rearrange_bigger(n//10)+str(fraction))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    l = []\n    for i in str(n):\n        l.append(i)\n    n = \"\".join(l)\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a new list to store digits\n    res = [None]*9\n    # index number\n    for i in range(len(n)-9):\n        # get current number from list\n        num = int(n[i:i+9])\n        # find index of the smallest number\n        ind = find_smallest(n,9)\n        # set the number value to the smallest number\n        res[ind] = num\n    # return result\n    return ''.join(res)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #first pass: sort the digits from left to right\n    s = []\n    for i in range(len(str(n))):\n        s.append(str(n)[i])\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = n.zfill(10)\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    list_of_digits = [int(i) for i in str(n)]\n    \n    list_of_digits.sort(reverse = True)\n    \n    for i in list_of_digits:\n        n = n*10 + i\n    \n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    i = 0\n    j = 0\n    while(i < len(nums1) and j < len(nums2)):\n        if nums1[i] < nums2[j]:\n            i += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            if j == k-1:\n                break\n            elif i == k-1:\n                j += 1\n            else:\n                i += 1\n    if i == len(nums1):\n        i = 0\n    else:\n        i += 1\n    if j == len(nums2):\n        j = 0\n    else:\n        j += 1\n    while(i < len(nums1) and j < len(nums2)):\n        if nums1[i] < nums2[j]:\n            i += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            if j == k-1:\n                break\n            elif i == k-1:\n                j += 1\n            else:\n                i += 1\n    return(i, j)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    index_list = list(zip(nums1, nums2))\n    heapq.heapify(index_list)\n    res = []\n    for i in range(k):\n        a, b = heapq.heappop(index_list)\n        res.append((a, b))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    count = 0\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    a1 = []\n    a2 = []\n    a3 = []\n    for i in nums1:\n        a1.append(i)\n    for i in nums2:\n        a2.append(i)\n    for i in a1:\n        for j in a2:\n            if i!= j:\n                heapq.heappush(res, i*j)\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Write your code here\n    if len(nums1) < len(nums2):\n        for i in range(len(nums1)):\n            heapq.heappush(nums1, nums1[i] * -1)\n    else:\n        for i in range(len(nums2)):\n            heapq.heappush(nums2, nums2[i] * -1)\n        nums2.sort()\n    min_heap = []\n    ans = []\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    pairs = []\n    \n    # Append elements of the first array into heap\n    for i in nums1:\n        heapq.heappush(h, -i)\n    \n    # Append elements of the second array into heap\n    for i in nums2:\n        heapq.heappush(pairs, -i)\n    \n    # Extract first k elements from heap\n    k = min(k, len(pairs))\n    \n    # Sort the heap\n    pairs = [x for x in pairs]\n    pairs.sort()\n    \n    # Make sure that there are at least k elements in the first array\n    if len(pairs) < k:\n        return 0\n    \n    # Find the number of elements in the first array and then the number of elements in the second array\n    while len(pairs) >= k:\n        if pairs[0]!= pairs[-1]:\n            yield [pairs.pop(0), pairs.pop(0)]\n        else:\n            pairs.pop(0)\n    \n    return 0\n    \n    \nprint(k_smallest_pairs([1, 2, 3, 1], [1, 2, 3, 4], 2)"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    '''\n    if k <= 0:\n        return \"Please enter a positive integer\"\n    '''\n    # Time: O(n) - O(n)\n    # Space: O(n) - O(n)\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    if len(nums1) < k:\n        return \"Please enter a positive integer\"\n    '''\n    # Time: O(n)\n    # Space: O(k)\n    '''\n    i = 0\n    j = 0\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i, j))\n        j += 1\n    \n    for j in range(len(nums2)):\n        heapq.heappush(heap, (nums2[j], j, i))\n        i += 1\n    \n    for i in range(k):\n        if heap[0][0] < heap[1][0]:\n            heapq.heappop(heap)\n            heapq.heappop(heap)\n        else:\n            heapq.heappop(heap)\n            heapq.heappop(heap)\n    return len(heap)\n    '''\n    # Time: O(n)\n    # Space: O(n)\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    if len(nums1) < k:\n        return \"Please enter a positive integer\"\n    #Time: O(n)\n    #Space: O(1)\n    '''\n    # Time: O(n)\n    # Space: O(k)\n    '''\n    i = 0\n    j = 0\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i, j))\n        j += 1\n    \n    for j in range(len(nums2)):\n        heapq.heappush(heap, (nums2[j], j, i))\n        i += 1\n    \n    if len(heap) < k:\n        return \"Please enter a positive integer\"\n    return len(heap)\n    '''\n    # Time: O(n)\n    # Space: O(n)\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    if len(nums1) < k:\n        return \"Please enter a positive integer\"\n    #Time: O(n)\n    #Space: O(1)\n    '''\n    # Time: O(n)\n    # Space: O(k)\n    '''\n    i = 0\n    j = 0\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i, j))\n        j += 1\n    \n    for j in range(len(nums2)):\n        heapq.heappush(heap, (nums2[j], j, i))\n        i += 1\n    \n    if len(heap) < k:\n        return \"Please enter a positive integer\"\n    return len(heap)\n    '''\n    # Time: O(n)\n    # Space: O(n)\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    if len(nums1) < k:\n        return \"Please enter a positive integer\"\n    #Time: O(n)\n    #Space: O(k)\n    '''\n    i = 0\n    j = 0\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i, j))\n        j += 1\n    \n    for j in range(len(nums2)):\n        heapq.heappush(heap, (nums2[j], j, i))\n        i += 1\n    \n    if len(heap) < k:\n        return \"Please enter a positive integer\"\n    return len(heap)\n    '''\n    # Time: O(n)\n    # Space: O(n)\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    if len(nums1) < k:\n        return \"Please enter a positive integer\"\n    #Time: O(n)\n    #Space: O(k)\n    '''\n    i = 0\n    j = 0\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i, j))\n        j += 1\n    \n    for j in range(len(nums2)):\n        heapq.heappush(heap, (nums2[j], j, i))\n        i += 1\n    \n    if len(heap) < k:\n        return \"Please enter a positive integer\"\n    return len(heap)\n    '''\n    # Time: O(n)\n    # Space: O(n)\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    if len(nums1) < k:\n        return \"Please enter a positive integer\"\n    #Time: O(n)\n    #Space: O(k)\n    '''\n    i = 0\n    j = 0\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i, j))\n        j += 1\n    \n    for j in range(len(nums2)):\n        heapq.heappush(heap, (nums2[j], j, i))\n        i += 1\n    \n    if len(heap) < k:\n        return \"Please enter a positive integer\"\n    return len(heap)\n    '''\n    # Time: O(n)\n    # Space: O(n)\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    if len(nums1) < k:\n        return \"Please enter a positive integer\"\n    #Time: O(n)\n    #Space: O(k)\n    '''\n    i = 0\n    j = 0\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i, j))\n        j += 1\n    \n    for j in range(len(nums2)):\n        heapq.heappush(heap, (nums2[j], j, i))\n        i += 1\n    \n    if len(heap) < k:\n        return \"Please enter a positive integer\"\n    return len(heap)\n    '''\n    # Time: O(n)\n    # Space: O(n)\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    if len(nums1) < k:\n        return \"Please enter a positive integer\"\n    #Time: O(n)\n    #Space: O(k)\n    '''\n    i = 0\n    j = 0\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i, j))\n        j += 1\n    \n    for j in range(len(nums2)):\n        heap"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1)!= len(nums2):\n        return '0'\n    minheap = []\n    for num in nums1:\n        heapq.heappush(minheap, num)\n    for num in nums2:\n        heapq.heappush(minheap, -num)\n    k_pairs = []\n    for _ in range(k):\n        nums1_smallest = heapq.heappop(minheap)\n        nums2_smallest = heapq.heappop(minheap)\n        k_pairs.append([nums1_smallest, nums2_smallest])\n    return '\\n'.join(str(p) for p in k_pairs)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        tmp = nums1\n        nums1 = nums2\n        nums2 = tmp\n    heap = []\n    for i in nums1:\n        heapq.heappush(heap, i)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, [nums1[i], i])\n        heapq.heappush(heap, [nums2[i], i])\n    \n    \n    count = 0\n    smallest = 0\n    while(count < k):\n        value1 = heapq.heappop(heap)[1]\n        value2 = heapq.heappop(heap)[1]\n        if (value1 == 0 and value2 == 0):\n            return 0\n        elif (value1 == 0 and value2 == 1):\n            return 1\n        elif (value1 == 1 and value2 == 0):\n            return 1\n        elif (value1 == 1 and value2 == 1):\n            count += 1\n            heapq.heappush(heap, [nums1[value1], value1])\n            heapq.heappush(heap, [nums2[value2], value2])\n            smallest += 1\n    return smallest\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    lst = []\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            lst.append((list1[i][1]+list1[j][1],list1[i][0]+list1[j][0]))\n    lst.sort()\n    return lst[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = 0\n    for i in range(0, len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if list1[i] + list1[j] < min:\n                min = list1[i] + list1[j]\n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    t1=[]\n    t2=[]\n    min_tuple=[]\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            min_tuple=list1[i]*list1[j]\n            t1.append(list1[i])\n            t1.append(list1[j])\n            t2.append(min_tuple)\n            t2.append(list1[i]*list1[j])\n    \n    return t1,t2\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    if len(list1) < 1:\n        return 0\n    \n    min_price = list1[0][1]\n    min_quant = list1[0][0]\n    \n    for i in range(1, len(list1)):\n        if list1[i][1] < min_price:\n            min_price = list1[i][1]\n            min_quant = list1[i][0]\n    \n    return min_price * min_quant\n        \ndef product_list(list1):\n    '''\n    Write a function that returns the product of the values of the elements of the given list, which are positive integers.\n    '''\n    \n    product = 1\n    for i in list1:\n        product *= i\n    \n    return product\n    \ndef max_product(list1):\n    '''\n    Write a function that returns the product of the values of the elements of the given list, which are negative integers.\n    '''\n    \n    product = list1[0][1]\n    for i in list1:\n        product *= i[0]\n    \n    return product\n    \ndef main():\n    \n    print(\"\\nSimple Menu:\\n\")\n    print(\"- Add item\\n\")\n    print(\"- Remove item\\n\")\n    print(\"- Remove all items\\n\")\n    print(\"- Save and exit\\n\")\n    \n    print(\"A simple menu for the calculator\")\n    print(\"\")\n    while True:\n        command = input(\"\\nWhat would you like to do?\\n\")\n        \n        if command == \"Add item\":\n            print(\"Add item\")\n            print(\"\")\n            item_name = input(\"Enter the item name: \")\n            quantity = input(\"Enter the quantity: \")\n            price = input(\"Enter the price: \")\n            print(\"\")\n            \n            list = [item_name, quantity, price]\n            \n            print(\"The price of the item is {}\".format(price))\n            print(\"The quantity of the item is {}\".format(quantity))\n            \n            print(\"The total price of the item is {}\".format(product_list(list)))\n            \n        elif command == \"Remove item\":\n            print(\"Remove item\")\n            print(\"\")\n            item_name = input(\"Enter the item name: \")\n            print(\"\")\n            \n            list = [item_name]\n            \n            print(\"The item name is {}\".format(item_name))\n            print(\"The quantity is {}\".format(list))\n            \n            print(\"The total price of the item is {}\".format(product_list(list)))\n            \n        elif command == \"Remove all items\":\n            print(\"Remove all items\")\n            print(\"\")\n            \n            list = []\n            \n            print(\"The total quantity is {}\".format(product_list(list)))\n            \n        elif command == \"Save and exit\":\n            break\n        \n        else:\n            print(\"Invalid command\")\n            \n    print(\"\")\n    print(\"Thank you for using the calculator\")\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = []\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i] * list1[j] < 0:\n                min_product.append((list1[i], list1[j]))\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][1] * list1[0][0]\n    for i in range(1, len(list1)):\n        min_product = min(min_product, list1[i][1] * list1[i][0])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = 1\n    for a,b in list1:\n        product *= a\n        product *= b\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = list1[0][0]\n    for i in range(0,len(list1)-1):\n        if list1[i][0] < min:\n            min = list1[i][0]\n        if list1[i][1] < min:\n            min = list1[i][1]\n    return min"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0][1]\n    elif len(list1) == 0:\n        return 'No product'\n    else:\n        a, b = list1.pop()\n        return min_product_tuple((a, b)) * min_product_tuple((b, a))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    min_tuple = ()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            min_product += list1[i][0] * list1[j][0]\n    if min_product < min_tuple[0]*min_tuple[1]:\n        min_product = min_tuple[0] * min_tuple[1]\n    return min_product\n    \n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = float(listval[0])\n    for value in listval:\n        if value < minimum:\n            minimum = value\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    min=listval[0]\n    for el in listval:\n        if el<min:\n            min=el\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return(minval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return None\n    minval = listval[0]\n    for val in listval:\n        if minval < val:\n            minval = val\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    min_index = 0\n    for index in range(1, len(listval)):\n        if listval[index] < min:\n            min = listval[index]\n            min_index = index\n    return min_index\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    val = None\n    for x in listval:\n        if val == None:\n            val = x\n        else:\n            if x < val:\n                val = x\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval=listval[0]\n    for i in range(len(listval)):\n        if listval[i]<minval:\n            minval=listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for element in listval:\n        if element < minimum:\n            minimum = element\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s1 = re.search(r'([a-z]+)([A-Z])', word)\n    if s1!= None:\n        if s1.group(2) == \"\":\n            s2 = re.sub(r'([A-Z])', r'\\1_\\2', word)\n        else:\n            s2 = re.sub(r'([A-Z])', r'\\1_\\2', word.upper())\n        return s2\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '_':\n        return '_'\n    first_ch = word[0]\n    if first_ch in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']:\n        return word[1:]\n    if first_ch in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']:\n        return first_ch.upper() + '_' + word[1:]\n    else:\n        return word[0].upper() + word[1:]\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    if word == '_':\n        return '_'\n    first_ch = word[0]\n    if first_ch in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']:\n        return word[1:]\n    if first_ch in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']:\n        return first_ch.upper() + '_' + word[1:]\n    else:\n        return word[0].upper() + word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return word.title()\n    \n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef camel_to_snake_space_separated(word):\n    '''\n    Write a function to convert the given snake case string to camel case string with spaces separated.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef snake_to_snake_space_separated(word):\n    '''\n    Write a function to convert the given snake case string to camel case string with spaces separated.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef camel_to_snake_case(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef snake_to_snake_case(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef snake_to_camel_case(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef camel_to_camel_case(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef camel_to_snake_case_space_separated(word):\n    '''\n    Write a function to convert the given snake case string to camel case string with spaces separated.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef snake_to_camel_case_space_separated(word):\n    '''\n    Write a function to convert the given snake case string to camel case string with spaces separated.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef snake_to_snake_case_separated(word):\n    '''\n    Write a function to convert the given snake case string to camel case string with spaces separated.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef camel_to_snake_case_space_separated(word):\n    '''\n    Write a function to convert the given snake case string to camel case string with spaces separated.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef camel_to_snake_case_separated_with_number(word):\n    '''\n    Write a function to convert the given snake case string to camel case string with spaces separated and with a number.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef snake_to_camel_case_separated_with_number(word):\n    '''\n    Write a function to convert the given snake case string to camel case string with spaces separated and with a number.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef snake_to_snake_case(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef snake_to_snake_case_space_separated(word):\n    '''\n    Write a function to convert the given snake case string to snake case string with spaces separated.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef snake_to_camel_case_space_separated(word):\n    '''\n    Write a function to convert the given snake case string to camel case string with spaces separated.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef snake_to_camel_case(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef snake_to_camel_case_space_separated(word):\n    '''\n    Write a function to convert the given snake case string to camel case string with spaces separated.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef snake_to_camel_case_separated(word):\n    '''\n    Write a function to convert the given snake case string to camel case string with spaces separated.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z][a-z]+', '', word.title())\n    \n    \ndef camel_to_camel_case_space_separated(word):\n    '''\n    Write a function to convert the given snake case string to camel case string with spaces separated.\n    '''\n    if not re.match('[A-Z][a-z]+', word):\n        return word\n    else:\n        return re.sub('[^A-Z]"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', result).lower()\ndef run_solution():\n    print(\"EXERCISE 4\")\n    print(\"Exercise 4.1\")\n    print(\"\")\n    print(\"#\" * 72)\n    print(\"\")\n    print(\"SNAKE CASE TO Camel CASE EXERCISE 4.1\")\n    print(\"\")\n    print(\"EXERCISE 4.1.1\")\n    print(\"\")\n    print(\"EXERCISE 4.1.2\")\n    print(\"\")\n    print(\"EXERCISE 4.1.3\")\n    print(\"\")\n    print(\"EXERCISE 4.1.4\")\n    print(\"\")\n    print(\"EXERCISE 4.1.5\")\n    print(\"\")\n    print(\"EXERCISE 4.1.6\")\n    print(\"\")\n    print(\"EXERCISE 4.1.7\")\n    print(\"\")\n    print(\"EXERCISE 4.1.8\")\n    print(\"\")\n    print(\"EXERCISE 4.1.9\")\n    print(\"\")\n    print(\"EXERCISE 4.1.10\")\n    print(\"\")\n    print(\"EXERCISE 4.1.11\")\n    print(\"\")\n    print(\"EXERCISE 4.1.12\")\n    print(\"\")\n    print(\"EXERCISE 4.1.13\")\n    print(\"\")\n    print(\"EXERCISE 4.1.14\")\n    print(\"\")\n    print(\"EXERCISE 4.1.15\")\n    print(\"\")\n    print(\"EXERCISE 4.1.16\")\n    print(\"\")\n    print(\"EXERCISE 4.1.17\")\n    print(\"\")\n    print(\"EXERCISE 4.1.18\")\n    print(\"\")\n    print(\"EXERCISE 4.1.19\")\n    print(\"\")\n    print(\"EXERCISE 4.1.20\")\n    print(\"\")\n    print(\"EXERCISE 4.1.21\")\n    print(\"\")\n    print(\"EXERCISE 4.1.22\")\n    print(\"\")\n    print(\"EXERCISE 4.1.23\")\n    print(\"\")\n    print(\"EXERCISE 4.1.24\")\n    print(\"\")\n    print(\"EXERCISE 4.1.25\")\n    print(\"\")\n    print(\"EXERCISE 4.1.26\")\n    print(\"\")\n    print(\"EXERCISE 4.1.27\")\n    print(\"\")\n    print(\"EXERCISE 4.1.28\")\n    print(\"\")\n    print(\"EXERCISE 4.1.29\")\n    print(\"\")\n    print(\"EXERCISE 4.1.30\")\n    print(\"\")\n    print(\"EXERCISE 4.1.31\")\n    print(\"\")\n    print(\"EXERCISE 4.1.32\")\n    print(\"\")\n    print(\"EXERCISE 4.1.33\")\n    print(\"\")\n    print(\"EXERCISE 4.1.34\")\n    print(\"\")\n    print(\"EXERCISE 4.1.35\")\n    print(\"\")\n    print(\"EXERCISE 4.1.36\")\n    print(\"\")\n    print(\"EXERCISE 4.1.37\")\n    print(\"\")\n    print(\"EXERCISE 4.1.38\")\n    print(\"\")\n    print(\"EXERCISE 4.1.39\")\n    print(\"\")\n    print(\"EXERCISE 4.1.40\")\n    print(\"\")\n    print(\"EXERCISE 4.1.41\")\n    print(\"\")\n    print(\"EXERCISE 4.1.42\")\n    print(\"\")\n    print(\"EXERCISE 4.1.43\")\n    print(\"\")\n    print(\"EXERCISE 4.1.44\")\n    print(\"\")\n    print(\"EXERCISE 4.1.45\")\n    print(\"\")\n    print(\"EXERCISE 4.1.46\")\n    print(\"\")\n    print(\"EXERCISE 4.1.47\")\n    print(\"\")\n    print(\"EXERCISE 4.1.48\")\n    print(\"\")\n    print(\"EXERCISE 4.1.49\")\n    print(\"\")\n    print(\"EXERCISE 4.1.50\")\n    print(\"\")\n    print(\"EXERCISE 4.1.51\")\n    print(\"\")\n    print(\"EXERCISE 4.1.52\")\n    print(\"\")\n    print(\"EXERCISE 4.1.53\")\n    print(\"\")\n    print(\"EXERCISE 4.1.54\")\n    print(\"\")\n    print(\"EXERCISE 4.1.55\")\n    print(\"\")\n    print(\"EXERCISE 4.1.56\")\n    print(\"\")\n    print(\"EXERCISE 4.1.57\")\n    print(\"\")\n    print(\"EXERCISE 4.1.58\")\n    print(\"\")\n    print(\"EXERCISE 4.1.59\")\n    print(\"\")\n    print(\"EXERCISE 4.1.60\")\n    print(\"\")\n    print(\"EXERCISE 4.1.61\")\n    print(\"\")\n    print(\"EXERCISE 4.1.62\")\n    print(\"\")\n    print(\"EXERCISE 4.1.63\")\n    print(\"\")\n    print(\"EXERCISE 4.1.64\")\n    print(\"\")\n    print(\"EXERCISE 4.1.65\")\n    print(\"\")\n    print(\"EXERCISE 4.1.66\")\n    print(\"\")\n    print(\"EXERCISE 4.1.67\")\n    print(\"\")\n    print(\"EXERCISE 4.1.68\")\n    print(\"\")\n    print(\"EXERCISE 4.1.69\")\n    print(\"\")\n    print(\"EXERCISE 4.1.70\")\n    print(\"\")\n    print(\"EXERCISE 4.1.71\")\n    print(\"\")\n    print(\"EXERCISE 4.1.72\")\n    print(\"\")\n    print(\"EXERCISE 4.1.73\")\n    print(\"\")\n    print(\"EXERCISE 4.1.74\")\n    print(\"\")\n    print(\"EXERCISE 4.1.75\")\n    print(\"\")\n    print(\"EXERCISE 4.1.76\")\n    print(\"\")\n    print(\"EXERCISE 4.1.77\")\n    print(\"\")\n    print(\"EXERCISE 4.1.78\")\n    print(\"\")\n    print(\"EXERCISE 4.1.79\")\n    print(\"\")\n    print(\"EXERCISE 4.1.80\")\n    print(\"\")\n    print(\"EXERCISE 4.1.81\")\n    print(\"\")\n    print(\"EXERCISE 4.1.82\")\n    print(\"\")\n    print(\"EXERCISE 4.1.83\")\n    print(\"\")\n    print(\"EXERCISE 4.1.84\")\n    print(\"\")\n    print(\"EXERCISE 4.1.85\")\n    print(\"\")\n    print(\"EXERCISE 4.1.86\")\n    print(\"\")\n    print(\"EXERCISE 4.1.87\")\n    print(\"\")\n    print(\"EXERCISE 4.1.88\")\n    print(\"\")\n    print(\"EXERCISE 4.1.89\")\n    print(\"\")\n    print(\"EXERCISE 4.1.90\")\n    print(\"\")\n    print(\"EXERCISE 4.1.91\")\n    print(\"\")\n    print(\"EXERCISE 4.1.92\")\n    print(\"\")\n    print(\"EXERCISE 4.1.93\")\n    print(\"\")\n    print(\"EXERCISE 4.1.94\")\n    print(\"\")\n    print(\"EXERCISE 4.1.95\")\n    print(\"\")\n    print(\"EXERCISE 4.1.96\")\n    print(\"\")\n    print(\"EXERCISE 4.1.97\")\n    print(\"\")\n    print(\"EXERCISE 4.1.98\")\n    print(\"\")\n    print(\"EXERCISE 4.1.99\")\n    print(\"\")\n    print(\"EXERCISE 4.1.100\")\n    print(\"\")\n    print(\"EXERCISE 4.1.101\")\n    print(\"\")\n    print(\"EXERCISE 4.1.102\")\n    print(\"\")\n    print(\"EXERCISE 4.1.103\")\n    print(\"\")\n    print(\"EXERCISE 4.1.104\")\n    print(\"\")\n    print(\"E"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('[^A-Z]', '', word)\n    return word[0].lower() + word[1:] + '_'\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert the snake case string to camel case string\n    # take a list of words in snake case and convert each word to camel case\n    # print the result\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s=[]\n    for i in word.lower().split('_'):\n        if len(i)==0:\n            continue\n        elif i.isupper():\n            s.append(i.capitalize())\n        elif i.islower():\n            s.append(i.lower())\n        elif i in 'abcdefghijklmnopqrstuvwxyz':\n            s.append(i.upper())\n    return ''.join(s)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l_copy = l[:]\n    odd_l = []\n    for i in l_copy:\n        if i % 2!= 0:\n            odd_l.append(i)\n    return odd_l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l.remove(l[i])\n            print(l)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for i in l:\n        if i % 2 == 0:\n            new_l.append(i)\n    return new_l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    return [val for i,val in enumerate(l) if i%2!=0]\n    \ndef main():\n    '''\n    Demonstrate a function for removing even numbers from a given list.\n    '''\n    \n    l = [2, 4, 5, 8, 10, 15, 20, 25, 35, 40, 45, 55, 64, 75, 80, 85, 90, 95, 100]\n    print(remove_odd(l))\n    \nmain()"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    my_list = []\n    for item in l:\n        if item % 2 == 0:\n            my_list.append(item)\n    return my_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    odd_count = 0\n    for i in l:\n        if i % 2 == 1:\n            new_list.append(i)\n            odd_count = odd_count + 1\n    if odd_count > 0:\n        print(\"{} odd numbers were removed from the list\".format(odd_count))\n        return new_list\n    else:\n        print(\"No odd numbers were removed from the list\")\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for item in l:\n        if item % 2 == 1:\n            odd_list.append(item)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l == []:\n        return l\n    else:\n        if l[0] % 2 == 0:\n            l.pop(0)\n        else:\n            l.pop(0)\n        return remove_odd(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if not l:\n        return None\n    l_tmp = []\n    for i in l:\n        if i % 2!= 0:\n            l_tmp.append(i)\n    return l_tmp\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    remove = []\n    for num in l:\n        if num % 2 == 1:\n            remove.append(num)\n    for num in remove:\n        l.remove(num)\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 0:\n        return None\n    else:\n        return list1[n - 1][0]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        raise ValueError('Number of elements provided is greater than length of list')\n    if n < 1:\n        raise ValueError('Number of elements provided is less than or equal to 0')\n    index = 1\n    result = list1[n-1][index]\n    for element in list1[n-1][index+1:]:\n        result = element\n        index += 1\n    return result\n    \n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0 or n > len(list1):\n        return None\n    \n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list1.sort(reverse = True)\n    l = len(list1)\n    return list1[l - n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    \n    \n    "
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 0:\n        return None\n    elif n > len(list1):\n        return None\n    else:\n        return list1[n - 1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.sort()\n    list2.sort()\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list(list1) == list(list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return (list1[0] in list2 and list2[0] in list1) or (list1[-1] in list2 and list2[-1] in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # No need to use zip(), it will be replaced with list() function\n    return any(val in list1 for val in list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return (list1!=list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for index,value in enumerate(list1):\n        if value not in list2[index]:\n            return False\n        elif value in list1[index+1:]:\n            return True\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # your code here\n    s=0\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            s+=1\n    if s == len(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    highest_product = 0\n    for i in arr:\n        for j in arr:\n            if i * j > highest_product:\n                highest_product = i * j\n    return (highest_product, arr)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxProduct = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = arr[i] * arr[j]\n            if product > maxProduct:\n                maxProduct = product\n                index_i = i\n                index_j = j\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables\n    max_p = arr[0]\n    max_p_index = 0\n    for index in range(len(arr)):\n        if arr[index] > max_p:\n            max_p = arr[index]\n            max_p_index = index\n    return max_p,max_p_index\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 0:\n        return None\n    else:\n        arr.sort()\n        return (arr[0],max(arr[0]*arr[1],arr[0]*arr[2]))\n    \n    \n    \n    \n    "
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return (arr[0], arr[0])\n    n = len(arr)\n    l = [(i, arr[i]) for i in range(n)]\n    l.sort()\n    return (l[0][1], l[0][1])\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    p = 0\n    q = 0\n    val = arr[0]\n    for i in range(1, len(arr)):\n        if val > arr[i]:\n            val = arr[i]\n            p = i\n    if p!= 0:\n        q = arr.index(val)\n        temp = arr[q]\n        arr[q] = arr[p]\n        arr[p] = temp\n    return arr\narr = [7,4,5,2,6,1,3]\nprint(max_Product(arr))"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    return max(arr, key=lambda x: (x[1], x[0])"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Define the upperbound and lowerbound\n    upperbound = 0\n    lowerbound = len(arr) - 1\n    # Initialize a maximum product\n    max_product = 0\n    # loop through each element in the array\n    for x in range(len(arr)):\n        # If this element is bigger than the max product\n        if arr[x] > arr[upperbound] and arr[x] > arr[lowerbound]:\n            # If this is the max product\n            if arr[x] == arr[upperbound]:\n                # update the upperbound element\n                upperbound = x\n            # If this is the max product\n            elif arr[x] == arr[lowerbound]:\n                # update the lowerbound element\n                lowerbound = x\n            # If this is not equal to max product\n            else:\n                # update the max product\n                max_product = arr[x]\n    # Return the maximum product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_Product_value = -1\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if (arr[i]*arr[j] > max_Product_value):\n                max_Product_value = arr[i]*arr[j]\n    return max_Product_value\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    print(\"Working with tuples\")\n    hash_set = set()\n    for i in Input:\n        hash_set.add(i[0])\n    print(hash_set)\n    return hash_set\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Your code here\n    a=list(map(tuple, Input))\n    a.sort()\n    return a[0]"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = [i[0] for i in Input]\n    # print(lst)\n    list_set = set(lst)\n    # print(list_set)\n    # print(len(list_set))\n    return list_set"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #TO DO\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n = len(Input)\n    output = []\n    for i in range(0, n):\n        for j in range(0, n-i-1):\n            if (Input[j] == Input[j+1]):\n                output.append(Input[j])\n    return output\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first = None\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i] == Input[j]:\n                first = Input[i]\n                break\n    return first\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(dict.fromkeys(Input))[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for i in Input:\n        if i[0] in Input:\n            Output.append(i)\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    x = 0\n    y = 0\n    n = len(Input)\n    while (y < n):\n        if (Input[x] == Input[y]):\n            y += 1\n        elif (Input[x] < Input[y]):\n            x += 1\n        else:\n            y += 1\n            \n    return (Input[x])\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # get length of the list\n    length = len(Input)\n    \n    # initialize the result list\n    result = []\n    \n    # get the first element\n    first_element = Input[0]\n    \n    # iterate over the list,\n    # if the first element equals the second element,\n    # add the element to result list\n    if first_element in Input[1:]:\n        result.append(first_element)\n    \n    # if there is not a common element,\n    # return empty list\n    else:\n        result = []\n    \n    # return the result\n    return result\n    "
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # print(lst)\n    # count = 0\n    # for i in range(len(lst)):\n    #     for j in range(len(lst)):\n    #         if lst[i] == lst[j]:\n    #             count += 1\n    #     if count == len(lst):\n    #         return lst[i]\n    # return 'Not Found'\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst==[]: \n        return 0\n    elif lst==[1]: \n        return 1\n    elif lst==[1,2,3]: \n        return 2\n    else: \n        for i in range(len(lst)): \n            for j in range(len(lst)): \n                if lst[i]>lst[j]: \n                    lst[i],lst[j]=lst[j],lst[i] \n        return max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=lst[0]\n    for i in lst:\n        if(i>max):\n            max=i\n    return max\nl=[]\nnum=int(input('Enter number of elements : '))\nfor i in range(num):\n    e=int(input('Enter element : '))\n    l.append(e)\nprint('The maximum length of the list is :',Find_Max(l))"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0: \n        return 0\n    if len(lst) == 1: \n        return lst[0] \n    #Maximum element of list is the element with the maximum length\n    return max([i[0] for i in lst])"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if lst[i] > max_len:\n            max_len = lst[i]\n    return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for x in lst:\n        if len(str(x))>max:\n            max=len(str(x))\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return \"No element in list\"\n    else:\n        for i in range(len(lst)):\n            if lst[i] > lst[i]:\n                lst[i], lst[i] = lst[i], lst[i]\n        return max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    s = []\n    for x in lst:\n        if x not in s:\n            s.append(x)\n    print(s)\n    return s[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max\n        \n    \n    \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = lst[0]\n    for i in lst:\n        if i > Max:\n            Max = i\n    return Max\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if len(list1) == 0:\n        return 0\n    for num in list1:\n        list1.remove(num)\n    sum = 0\n    for num in list1:\n        sum += num\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(sum([round(x, 3) for x in list1]))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += num\n    return sum\n    \ndef calc_total_sum(list1):\n    '''\n    Write a function to calculate and return the total sum of a given list of numbers.\n    '''\n    total = 0\n    for num in list1:\n        total += num\n    return total\n    \ndef main():\n    print('Welcome to the tip calculator!')\n    print('What was the total bill?')\n    bill = float(input('How much was the bill? '))\n    tip = int(input('How much tip would you like to give? 10, 12, or 15? '))\n    people = int(input('How many people to split the bill? '))\n    \n    bill_per_person = bill/people\n    tip_amount = bill_per_person * tip\n    total = round_and_sum([bill_per_person, tip_amount])\n    \n    print(f'Each person should pay: {total}')\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #for i in list1:\n    #    print(i, sum(list1))\n    i=0\n    total_sum=0\n    for i in range(len(list1)):\n        total_sum=total_sum+list1[i]\n    return total_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum=0\n    for i in list1:\n        total_sum+=i\n    print(total_sum*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if type(list1)!= list:\n        raise TypeError(\"Input must be a list\")\n    else:\n        try:\n            n = len(list1)\n            round_list = []\n            for i in range(0,n):\n                #print(list1[i])\n                round_list.append(list1[i])\n            total = sum(round_list)\n            print(\"The total is\",total)\n        except TypeError:\n            print(\"input not a list\")\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Write your code here\n    total=0\n    for i in list1:\n        total+=i\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for num in list1:\n        list1.append(round(num,2))\n    return sum(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for element in list1:\n        total += element\n    print(round(total/len(list1),2))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += num\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubeSum = 0\n    for i in range(1,n+1):\n        cubeSum += i**3\n    return cubeSum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    x = 1\n    for i in range(1, n + 1):\n        x = x * i\n    return x\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i ** 3\n    return sum \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * cube_Sum(n - 1)\ndef triangle(n):\n    '''\n    Write a python function to print a triangle on the screen.\n    '''\n    if n == 0:\n        print(\"Triangle\")\n    elif n == 1:\n        print(\"Triangle\")\n    else:\n        print(\"Triangle\")\n        print(\"  \", end=\"\")\n        for i in range(n,0,-1):\n            print(i, end=\"\")\n        print(\"\\n\")\n        for i in range(n,0,-1):\n            print(i, end=\"\")\n        print(\"\\n\")\ndef pyramid(n):\n    '''\n    Write a python function to print a pyramid on the screen.\n    '''\n    if n == 0:\n        print(\"Pyramid\")\n    elif n == 1:\n        print(\"Pyramid\")\n    else:\n        print(\"Pyramid\")\n        print(\"  \", end=\"\")\n        for i in range(n,0,-1):\n            print(i, end=\"\")\n        print(\"\\n\")\n        for i in range(n,0,-1):\n            print(i, end=\"\")\n        print(\"\\n\")\ndef pyramid_reduce(n):\n    '''\n    Write a python function to print a pyramid on the screen.\n    '''\n    if n == 0:\n        print(\"Pyramid\")\n    elif n == 1:\n        print(\"Pyramid\")\n    else:\n        print(\"Pyramid\")\n        print(\"  \", end=\"\")\n        for i in range(n,0,-1):\n            print(i, end=\"\")\n        print(\"\\n\")\n        for i in range(n,0,-1):\n            print(i, end=\"\")\n        print(\"\\n\")\ndef pyramid_end(n):\n    '''\n    Write a python function to print a pyramid on the screen.\n    '''\n    if n == 0:\n        print(\"Pyramid\")\n    elif n == 1:\n        print(\"Pyramid\")\n    else:\n        print(\"Pyramid\")\n        print(\"  \", end=\"\")\n        for i in range(n,0,-1):\n            print(i, end=\"\")\n        print(\"\\n\")\n        for i in range(n,0,-1):\n            print(i, end=\"\")\n        print(\"\\n\")\n        "
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(n+1)*(3*n+1)*(5*n+1)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    return sum\nprint(cube_Sum(100))"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(1, n+1): \n        if i % 2 == 0: \n            sum += i \n    return sum \nprint(\"cube_Sum :\",cube_Sum(int(input()))) \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        a=[]\n        for i in range(1,n+1):\n            a.append(i**3)\n        return sum(a)\nprint(cube_Sum(int(input()))"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 0: \n        return 0\n    if n == 1: \n        return 1\n    sum = 0\n    for i in range(1, n): \n        sum += i**3\n    return sum\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n    \ndef one_tuple(tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple([str(i) for i in test_tup])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup = list(test_tup)\n    test_tup = tuple(test_tup)\n    return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup[i] for i in range(len(test_tup)))\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # put your logic here\n    return \"\".join(tuple(test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) == 0:\n        return ()\n    else:\n        return tuple([test_tup[0]]) + concatenate_tuple(test_tup[1:])\n    \n    \ndef map_reduce(function, iterable):\n    '''\n    Write a function that returns a list of tuples from the input iterable,\n    using the function function to apply the function to each element of the\n    iterable.\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return f'{\",\".join(test_tup)}{test_tup[-1]}{test_tup[0]}'\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    list1 = []\n    for i in range(0,n):\n        num = i ** 3\n        list1.append(num)\n    return sum(list1) / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes_of_n = []\n    for i in range(1,n+1):\n        cubes_of_n.append(i**3)\n    return sum(cubes_of_n)/len(cubes_of_n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    for i in range(n):\n        cubes = []\n        for j in range(i+1):\n            cubes.append(j*j*j)\n        print(f\"Cube {i+1} has value {sum(cubes)}\")\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum / (n * (n - 1) * n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    temp = []\n    i = 1\n    while i <= n:\n        temp.append(i**3)\n        i += 1\n    average = sum(temp) / len(temp)\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    number=[]\n    sum=0\n    for i in range(1, n+1):\n        number.append(i**3)\n        sum+=i\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    x = 0\n    y = 1\n    z = 1\n    num_list = []\n    # num_list.append(n)\n    while n!= 1:\n        x = y\n        y = z\n        z = x + y\n        num_list.append(z)\n        n = n - 1\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 3\n    return result / (n ** 3)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    i=0\n    while i<len(test_tuple[1]):\n        if test_tuple[1][i]=='R':\n            return test_tuple[0][i]\n        i+=1\n    return -1\n    \ndef extract_front(test_tuple):\n    '''\n    Write a function to extract only the front index element of each string in the given tuple.\n    '''\n    i=0\n    while i<len(test_tuple[1]):\n        if test_tuple[1][i]=='F':\n            return test_tuple[0][i]\n        i+=1\n    return -1\n    \ndef extract_bottom(test_tuple):\n    '''\n    Write a function to extract only the bottom index element of each string in the given tuple.\n    '''\n    i=0\n    while i<len(test_tuple[1]):\n        if test_tuple[1][i]=='B':\n            return test_tuple[0][i]\n        i+=1\n    return -1\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for index in range(len(test_tuple)):\n        if test_tuple[index][-1] == \"R\":\n            rear_index.append(index)\n    return rear_index\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = test_tuple[0][1].split(\"-\")\n    return rear_index\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return list(filter(lambda x: x[-1] == 'R', test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front, rear, rear_index = test_tuple\n    return (front, rear, rear_index)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([i[-1] for i in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for index, value in enumerate(test_tuple):\n        if index == 0:\n            rear_index.append(value)\n        else:\n            if index == 1:\n                rear_index.append(value[::-1])\n    return tuple(rear_index)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for i in test_tuple:\n        if i.find('rear')!= -1:\n            rear.append(i)\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    data = [l.split() for l in test_tuple[0].split(',')]\n    test_tuple = [data[i:i+1] for i in range(0, len(data), 1)]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    string, rear_index = test_tuple\n    result = ''\n    if string:\n        for i in range(len(string)):\n            result += string[i]\n            if i!= len(string) - 1:\n                result += ','\n    else:\n        return\n    return result\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if (list1[i] == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if(list1[i][x] == True):\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for l in range(len(list1)): \n        if list1[l] == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in list1:\n        if i.count(x) > 1:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i][x] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    return len(list1)\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    num = 1\n    for i in list1:\n        if x in i:\n            num += 1\n    return num\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    i = 0\n    while i<len(list1):\n        if list1[i] == x:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    #we know a list is sorted by its elements\n    #we know we know that it can have a length of 0 or 1\n    count = 0\n    for x in list1:\n        if x == x:\n            count += 1\n    #we know that the current element is the same as the target\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # O(n)\n    numbers_to_filter = [i for i in nums if i % 2!= 0]\n    return numbers_to_filter\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    n = len(nums)\n    l = []\n    for i in range(0, n):\n        if nums[i] % 2 == 0:\n            l.append(nums[i])\n    return l\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for i in nums:\n        if i%2!= 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num%2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            nums[i] = 0\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # O(n) complexity\n    oddnums = []\n    for num in nums:\n        if num % 2 == 1:\n            oddnums.append(num)\n    return oddnums\n    \n    # O(n) time complexity\n    # Create a new list, then remove all odd numbers from the list\n    # and return it\n    # Runtime: O(n) - need to sort the list\n    # Space: O(1) - empty list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    filtered = []\n    for i in nums:\n        if i % 2 == 0:\n            filtered.append(i)\n    return filtered\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filter_list = []\n    for i in range(len(nums)):\n        if(nums[i] % 2 == 1):\n            filter_list.append(nums[i])\n    return filter_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.strip()\n    if not dt:\n        return dt\n    if len(dt) == 10:\n        return dt\n    if len(dt) == 13:\n        month_name = ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december']\n        for i in range(len(month_name)):\n            dt = dt.replace(month_name[i], str(i+1))\n        return dt\n    if len(dt) == 15:\n        day_name = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday','saturday','sunday','monday', 'tuesday', 'wednesday', 'thursday', 'friday','saturday','sunday']\n        for i in range(len(day_name)):\n            dt = dt.replace(day_name[i], str(i+1))\n        return dt\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = re.findall(r\"(\\d{4})-(\\d{2})-(\\d{2})\", dt)\n    d = [x for x in d if x]\n    return d\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not isinstance(dt, str):\n        return \"Invalid Date. Invalid format. Must be yyyy-mm-dd format\"\n    elif dt.startswith('-'):\n        return \"Invalid Date. Day must be in format of DD-MM-YYYY.\"\n    elif dt.find('-') > -1:\n        return \"Invalid Date. Day must be in format of DD-MM-YYYY.\"\n    elif dt.find('.-') > -1:\n        return \"Invalid Date. DD-MM-YYYY.\"\n    elif dt.find('.') > -1:\n        return \"Invalid Date. DD-MM-YYYY.\"\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"^\\d{4}-\\d{2}-\\d{2}$\"\n    match = re.search(pattern, dt)\n    if match is None:\n        raise ValueError(\"Input date format is not correct.\")\n    new_date = dt[:match.start()]\n    new_date = new_date[:3]+\"-\"+new_date[3:5]+\"-\"+new_date[5:]\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    dt = dt.replace('-', '')\n    dt = dt.replace(' ', '')\n    dt = dt.replace(',', '-')\n    dt = dt.replace('.', '-')\n    dt = dt.replace('/', '-')\n    dt = dt.replace('/', '-')\n    dt = dt.replace(' ', '')\n    dt = dt.replace('-', '')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt[-2:] == \"19\":\n        dt = dt[0:4]+\"-\"+dt[5:7]+\"-\"+dt[8:]\n    elif dt[-2:] == \"21\":\n        dt = dt[0:4]+\"-\"+dt[5:7]+\"-\"+dt[8:10]\n    else:\n        dt = dt[0:4]+\"-\"+dt[5:7]+\"-\"+dt[8:12]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # split into date format\n    m = re.match(r'(\\d{4})', dt)\n    day, month, year = m.groups()\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        month_num = int(dt[1])\n    except:\n        month_num = dt[1]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt[3] == '0':\n        return dt[:2]+dt[4:]\n    else:\n        return dt[:2]+dt[2:4]+dt[4:]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import datetime\n    dt = re.sub('[^0-9]', '', dt)\n    m = re.match(\"(0[1-9]|1[0-2])-(0[1-9]|[12][0-9])-(0[1-9]|[1-2][0-9]|3[01])\", dt)\n    if m is not None:\n        year, month, day = m.groups()\n        m = re.match(\"[^0-9]\", year)\n        year = int(year) if m is None else int(year) + 1900\n        year += 2000 if year < 10 else 2000\n        dt = f'{day}-{month}-{year}'\n    return dt\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) <= 1:\n        return my_list\n    \n    step = 1\n    while step < len(my_list):\n        for i in range(0, len(my_list) - step):\n            if my_list[i] < my_list[i + step]:\n                my_list[i], my_list[i + step] = my_list[i + step], my_list[i]\n        step += 1\n    return my_list\n    \nif __name__ == '__main__':\n    print(shell_sort([6, 5, 4, 3, 2, 1]))"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap >= 1:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # start of the shell sort\n    # total steps\n    total_steps = len(my_list) - 1\n    step = 2\n    while step <= total_steps:\n        # divide by the step size\n        # on each iteration, modify the current value\n        # by decreasing the value of the step\n        # by comparing it with the value of the step\n        # with the previous value\n        # the first time the value of the step\n        # is less than the current value\n        # the second time\n        # is less than the current value\n        # so it's the step\n        # iteration\n        i = step - 1\n        while i >= 0:\n            if my_list[i] > my_list[i + step]:\n                temp = my_list[i]\n                # move the current value of the list\n                # to the end of the list\n                # (and, maintaining it's\n                # position)\n                my_list[i] = my_list[i + step]\n                my_list[i + step] = temp\n            i -= 1\n        step += 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # loop through n-1 elements\n    # until n is equal to number of elements in the array.\n    while n > 1:\n        # slice the array\n        for i in range(0, n-1):\n            # current element of array is next\n            # less than current element\n            # or same as current element\n            # of previous slice\n            j = i\n            while j >= 0 and my_list[j] > my_list[j+1]:\n                # swap current element\n                # with next element\n                # using next as index\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n                j -= 1\n        # decrement i\n        # to reach 0\n        i += 1\n        # repeat n-1 elements\n        # to reach 1\n        # and go down\n        n = n - 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Your code here\n    for i in range(1, len(my_list)):\n        position = i\n        while position > 0 and my_list[position-1] > my_list[position]:\n            my_list[position], my_list[position-1] = my_list[position-1], my_list[position]\n            position -= 1\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while my_list[j] > my_list[j + gap] and j >= gap:\n                my_list[j], my_list[j + gap] = my_list[j + gap], my_list[j]\n                j = j - gap\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Write your code here.\n    if len(my_list) < 2:\n        return my_list\n    \n    for i in range(len(my_list) - 1):\n        for j in range(0, len(my_list) - i - 1):\n            if my_list[j] > my_list[j + 1]:\n                my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n    return my_list\n        \n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] & test_tup2[0], test_tup1[1] & test_tup2[1], test_tup1[2] & test_tup2[2], test_tup1[3] & test_tup2[3], test_tup1[4] & test_tup2[4], test_tup1[5] & test_tup2[5]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"The number of tuples must be equal!\"\n    assert type(test_tup1[0]) is int and type(test_tup2[0]) is int, \"Tuples must be integers!\"\n    assert type(test_tup1[-1]) is tuple and type(test_tup2[-1]) is tuple, \"Tuples must be tuples!\"\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_tup)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    t1 = ()\n    for i in range(len(test_tup1)):\n        t1 += (test_tup1[i],)\n    t2 = ()\n    for i in range(len(test_tup2)):\n        t2 += (test_tup2[i],)\n    return t1,t2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [test_tup1[0], test_tup2[0]]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if not isinstance(test_tup1, (list, tuple)):\n        print('Error: Input is not a list or tuple.')\n        exit()\n    elif not isinstance(test_tup2, (list, tuple)):\n        print('Error: Input is not a list or tuple.')\n        exit()\n    else:\n        if len(test_tup1)!= len(test_tup2):\n            print('Error: The number of tuple elements must be equal.')\n            exit()\n        elif not test_tup1[0] == test_tup2[0]:\n            print('Error: The first element of tuples must be the same.')\n            exit()\n        else:\n            for i in range(len(test_tup1)):\n                if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n                    if not isinstance(test_tup1[i], list):\n                        print('Error: The elements of the tuple must be a list.')\n                        exit()\n                    elif not isinstance(test_tup2[i], list):\n                        print('Error: The elements of the tuple must be a list.')\n                        exit()\n                    elif not isinstance(test_tup1[i], list):\n                        print('Error: The elements of the tuple must be a list.')\n                        exit()\n                    else:\n                        if len(test_tup1[i])!= len(test_tup2[i]):\n                            print('Error: The tuple elements must have the same length.')\n                            exit()\n                        elif not isinstance(test_tup1[i][0], (int, float, complex)):\n                            print('Error: The first element of the tuple must be an int or a float.')\n                            exit()\n                        elif not isinstance(test_tup2[i][0], (int, float, complex)):\n                            print('Error: The first element of the tuple must be an int or a float.')\n                            exit()\n                        elif len(test_tup1[i])!= len(test_tup2[i]):\n                            print('Error: The tuple elements must have the same length.')\n                            exit()\n                        else:\n                            if not isinstance(test_tup1[i][0], int):\n                                print('Error: The first element of the tuple must be an int.')\n                                exit()\n                            if not isinstance(test_tup2[i][0], int):\n                                print('Error: The first element of the tuple must be an int.')\n                                exit()\n                            if not isinstance(test_tup1[i][0], int):\n                                print('Error: The first element of the tuple must be an int.')\n                                exit()\n                            if not isinstance(test_tup2[i][0], int):\n                                print('Error: The first element of the tuple must be an int.')\n                                exit()\n                            if len(test_tup1[i])!= len(test_tup2[i]):\n                                print('Error: The tuple elements must have the same length.')\n                                exit()\n                            else:\n                                for j in range(len(test_tup1[i])):\n                                    if not isinstance(test_tup1[i][j], (int, float, complex)):\n                                        print('Error: The element of the tuple must be an int or a float.')\n                                        exit()\n                                    elif not isinstance(test_tup2[i][j], (int, float, complex)):\n                                        print('Error: The element of the tuple must be an int or a float.')\n                                        exit()\n                                    elif test_tup1[i][j]!= test_tup2[i][j]:\n                                        print('Error: The elements of the tuple must be the same.')\n                                        exit()\n                                    else:\n                                        for k in range(len(test_tup1[i])):\n                                            if not isinstance(test_tup1[i][k], (int, float, complex)):\n                                                print('Error: The element of the tuple must be an int or a float.')\n                                                exit()\n                                        if not isinstance(test_tup2[i][k], (int, float, complex)):\n                                            print('Error: The element of the tuple must be an int or a float.')\n                                            exit()\n                                        if test_tup1[i][k]!= test_tup2[i][k]:\n                                            print('Error: The elements of the tuple must be the same.')\n                                            exit()\n                                        else:\n                                            if len(test_tup1[i])!= len(test_tup2[i]):\n                                                print('Error: The tuple elements must have the same length.')\n                                                exit()\n                                            else:\n                                                if not isinstance(test_tup1[i][0], int):\n                                                    print('Error: The first element of the tuple must be an int.')\n                                                    exit()\n                                                if not isinstance(test_tup2[i][0], int):\n                                                    print('Error: The first element of the tuple must be an int.')\n                                                    exit()\n                                                if not isinstance(test_tup1[i][0], int):\n                                                    print('Error: The first element of the tuple must be an int.')\n                                                    exit()\n                                                if test_tup1[i][0]!= test_tup2[i][0]:\n                                                    print('Error: The first element of the tuple must be the same.')\n                                                    exit()\n                                                else:\n                                                    if len(test_tup1[i])!= len(test_tup2[i]):\n                                                        print('Error: The tuple elements must have the same length.')\n                                                        exit()\n                                                    else:\n                                                        if not isinstance(test_tup1[i][0], float):\n                                                            print('Error: The first element of the tuple must be a float.')\n                                                            exit()\n                                                        if not isinstance(test_tup2[i][0], float):\n                                                            print('Error: The first element of the tuple must be a float.')\n                                                            exit()\n                                                        if not isinstance(test_tup1[i][0], float):\n                                                            print('Error: The first element of the tuple must be a float.')\n                                                            exit()\n                                                        if not isinstance(test_tup2[i][0], float):\n                                                            print('Error: The first element of the tuple must be a float.')\n                                                            exit()\n                                                        if test_tup1[i][0]!= test_tup2[i][0]:\n                                                            print('Error: The first element of the tuple must be the same.')\n                                                            exit()\n                                                        else:\n                                                            if len(test_tup1[i])!= len(test_tup2[i]):\n                                                                print('Error: The tuple elements must have the same length.')\n                                                                exit()\n                                                            else:\n                                                                for j in range(len(test_tup1[i])):\n                                                                    if not isinstance(test_tup1[i][j], (int, float, complex)):\n                                                                        print('Error: The element of the tuple must be an int or a float.')\n                                                                        exit()\n                                                                    if not isinstance(test_tup2[i][j], (int, float, complex)):\n                                                                        print('Error: The element of the tuple must be an int or a float.')\n                                                                        exit()\n                                                                    if not isinstance(test_tup1[i][j], (int, float, complex)):\n                                                                        print('Error: The element of the tuple must be an int or a float.')\n                                                                        exit()\n                                                                    if test_tup1[i][j]!= test_tup2[i][j]:\n                                                                        print('Error: The elements of the tuple must be the same.')\n                                                                        exit()\n                                                                    else:\n                                                                    if len(test_tup1[i])!= len(test_tup2[i]):\n                                                                        print('Error: The tuple elements must have the same length.')"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Write your code here\n    return (test_tup1[0] and test_tup2[0]),(test_tup1[1] and test_tup2[1])\n    \n    \n    \n    \ndef extract_elements(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elements from the given two tuples and print them.\n    '''\n    # Write your code here\n    return test_tup1[0] and test_tup2[0] or test_tup1[1] and test_tup2[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # TODO: Write your code here.\n    test_tup = test_tup1 + test_tup2\n    return tuple(test_tup)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #define variables\n    test_tup1 = test_tup1[:]\n    test_tup2 = test_tup2[:]\n    #loop throught the list\n    for i in range(len(test_tup1)):\n        #print(test_tup1[i],test_tup2[i])\n        #check if this element is in the given tuple\n        if test_tup1[i] in test_tup2:\n            #print('In test_tup1', test_tup1[i], 'test_tup2', test_tup2[i])\n            test_tup1[i] = test_tup2[i]\n        else:\n            #print('Not in test_tup1', test_tup1[i], 'test_tup2', test_tup2[i])\n            #generate new tuple for this element\n            test_tup1[i] = (test_tup1[i],test_tup2[i])\n    return test_tup1\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    if b**2 - 4 * a * c >= 0:\n        if b**2 - 4 * a * c == 0:\n            return math.sqrt(b**2 - 4 * a * c)\n        elif b**2 - 4 * a * c < 0:\n            return -math.sqrt(b**2 - 4 * a * c)\n        elif b**2 - 4 * a * c == 0:\n            return 0\n        else:\n            return -(b**2 - 4 * a * c) / math.sqrt(b**2 - 4 * a * c)\n    else:\n        return -1\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a > 0):\n        print (\"parabola 1:\", a)\n    if (a < 0):\n        print (\"parabola 2:\", b)\n    if (b > 0):\n        print (\"parabola 3:\", c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*(b**2-c**2)**.5\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0.5 * (a + b)\n    y = (0.5 * (a ** 2 + b ** 2)) ** 0.5\n    z = ((-1 * (a ** 2 + b ** 2)) ** 0.5) / 2.0\n    return x, y, z\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = (b**2 - 4*a*c) / (2*b)\n    print(x)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def parabola(a, b, c):\n        return a * ((b ** 2) - (c ** 2))\n    return parabola(a, b, c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*c + b\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # your code goes here\n    if a == 0 or b == 0 or c == 0:\n        return\n    else:\n        x = -(b**2 - 4*a*c)\n        y = (b**2 - 4*a*c)\n        if x >= 0 and x > 0:\n            return x, y\n        else:\n            return -1, -1\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    try:\n        print(f\"Directrix of a parabola of type: {type(a)}\")\n        print(f\"Input: {a}\")\n        print(f\"Output: {directrix(a, b, c)}\")\n    except:\n        print(\"Error: No directrix.\")\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return \"a + b*x + c*x^2\"\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1.intersection(list2)) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    common = True\n    for i in list1:\n        if i not in list2:\n            common = False\n            break\n    return common\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        if x in list2:\n            list2.remove(x)\n    return len(list2)!= 0"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if lists are empty\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    \n    # Check if common element present in first list\n    if len(set(list1))!= len(list1):\n        return False\n    \n    # Check if common element present in second list\n    if len(set(list2))!= len(list2):\n        return False\n    \n    # Return true if common elements are present in both lists\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list3 = []\n    for i in list1:\n        list3.append(i)\n    for j in list2:\n        if list3.count(j) > 0:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        return len(list1) == len(list2)\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            list2.remove(element)\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_ele = list(set(list1).intersection(set(list2)))\n    return len(common_ele) > 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 == base2:\n        return (base1 + base2)/2\n    else:\n        l = base1 + base2\n        r = base2 - base1\n        height = height/2\n        h = height * (r-l)\n        f = l + height - l\n        return l/2 + h/2 + f/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height == 1:\n        return base1\n    if height == 2:\n        return base1+base2\n    if height % 2 == 0:\n        return base1+base2+base1\n    return (base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height<=0:\n        return 0\n    elif height<base1+base2:\n        return base1+base2-height\n    else:\n        return base1+base2-height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trapezium(n1,n2,n3,n4,n5):\n        return int(n1+n2+n3+n4+n5/2)\n    \n    if height>0:\n        # Calculate the sum of all the values\n        sum_1 = base1 + base2 + base3 + base4 + base5\n        sum_2 = base1 + base2 + base3 + base4\n        sum_3 = base1 + base2 + base3 + base4\n        sum_4 = base1 + base2 + base3 + base4\n        sum_5 = base1 + base2 + base3 + base4\n        \n        # Calculate the average value\n        avg_1 = (sum_1/height)\n        avg_2 = (sum_2/height)\n        avg_3 = (sum_3/height)\n        avg_4 = (sum_4/height)\n        avg_5 = (sum_5/height)\n        \n        # Find the median\n        median = trapezium(avg_1,avg_2,avg_3,avg_4,avg_5)\n        median_1 = int(avg_1) + int(avg_2) + int(avg_3) + int(avg_4) + int(avg_5)\n        median_2 = int(avg_1) + int(avg_2) + int(avg_3)\n        median_3 = int(avg_1) + int(avg_2) + int(avg_3) + int(avg_4)\n        median_4 = int(avg_1) + int(avg_2) + int(avg_3) + int(avg_4)\n        median_5 = int(avg_1) + int(avg_2) + int(avg_3) + int(avg_4) + int(avg_5)\n        \n        # Print the median\n        print('The median is:'+ str(median))\n        return median\n    else:\n        # If the input is 0, the function should print \"NOT A VALID INPUT\".\n        print(\"NOT A VALID INPUT\")\n        return 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #Initialise a sum array of heights\n    sum = [0]*(height+1)\n    #Iterate through every height\n    for i in range(height+1):\n        #Check if height i is less than base1\n        if(i<base1):\n            #Add the height value to the sum array\n            sum[i]=base1-i\n        #Check if height i is less than base2\n        elif(i<base2):\n            #Add the height value to the sum array\n            sum[i]=base2-i\n        #Check if sum array contains a value\n        if sum[i]!=0:\n            #Add the value to the sum array\n            sum[i]+=height\n        else:\n            #Add the value to the sum array\n            sum[i]=height\n    #Find the median of the sum array\n    return sum[height//2]//2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_length = (base1 + base2)/2\n    median = (height/2) + trapezium_length\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def get_height(base):\n        return(abs(base2[0] - base1[0]))\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    midpoint1 = (base1 + base2) / 2\n    midpoint2 = height / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(\"\\nMedian Trapezium\")\n    if height == 0:\n        print(\"0\",end=\"\")\n        return 0\n    else:\n        print(\"{:.2f}\".format(base1*base2/height),end=\"\")\n        print(\", {:.2f}\".format((base2*base1)/(height-1)),end=\"\")\n        print(\"\\n\")\n        return (base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #Calculate the median length of a trapezium\n    #Calculate the medians of the height\n    #Calculate the trapezium with the width = height\n    #Calculate the medians of the trapezium with the width = height\n    #Return the median length\n    #For instance, when we have a trapezium with width of 1,\n    #and height of 2, the median length will be 3\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return all([arr[x] > number for x in range(len(arr))])\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] > number:\n        print('-1')\n    elif arr[len(arr)-1] < number:\n        print('-1')\n    else:\n        for i in range(len(arr)-2):\n            if arr[i+1] > number:\n                print('-1')\n            elif arr[i] < number:\n                print('-1')\n            else:\n                return 'YES'\n                break\n        print('-1')\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number < arr[0]:\n        return False\n    for i in range(1, len(arr)):\n        if number > arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > number:\n            count += 1\n    if count >= 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n        \n    return Fals"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    numbers_list = arr.copy()\n    numbers_list.sort()\n    if number > numbers_list[0]:\n        return False\n    elif number > numbers_list[-1]:\n        return False\n    else:\n        return True\n    \n    \ndef check_greater_matrix(arr, number):\n    '''\n    Write a function that checks whether a given matrix contains the given element.\n    '''\n    numbers_list = arr.copy()\n    numbers_list.sort()\n    if check_greater(numbers_list, number) == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    if arr == []:\n        return False\n    if number < arr[0]:\n        return False\n    \n    i = 1\n    \n    while i < len(arr):\n        if arr[i] > number:\n            return False\n        i += 1\n        \n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return text.lower().count('a') >= 1\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two b's.\n    '''\n    return text.lower().count('a') >= 1 and text.lower().count('b') >= 1\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by two b's and three c's.\n    '''\n    return text.lower().count('a') >= 1 and text.lower().count('b') >= 1 and text.lower().count('c') >= 1\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by two b's and four c's.\n    '''\n    return text.lower().count('a') >= 1 and text.lower().count('b') >= 1 and text.lower().count('c') >= 1 and text.lower().count('d') >= 1\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by two b's and five c's.\n    '''\n    return text.lower().count('a') >= 1 and text.lower().count('b') >= 1 and text.lower().count('c') >= 1 and text.lower().count('d') >= 1 and text.lower().count('e') >= 1 and text.lower().count('f') >= 1\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by two b's and six c's.\n    '''\n    return text.lower().count('a') >= 1 and text.lower().count('b') >= 1 and text.lower().count('c') >= 1 and text.lower().count('d') >= 1 and text.lower().count('e') >= 1 and text.lower().count('f') >= 1 and text.lower().count('g') >= 1 and text.lower().count('h') >= 1\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by two b's and seven c's.\n    '''\n    return text.lower().count('a') >= 1 and text.lower().count('b') >= 1 and text.lower().count('c') >= 1 and text.lower().count('d') >= 1 and text.lower().count('e') >= 1 and text.lower().count('f') >= 1 and text.lower().count('g') >= 1 and text.lower().count('h') >= 1 and text.lower().count('i') >= 1 and text.lower().count('j') >= 1 and text.lower().count('k') >= 1 and text.lower().count('l') >= 1\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by two b's and eight c's.\n    '''\n    return text.lower().count('a') >= 1 and text.lower().count('b') >= 1 and text.lower().count('c') >= 1 and text.lower().count('d') >= 1 and text.lower().count('e') >= 1 and text.lower().count('f') >= 1 and text.lower().count('g') >= 1 and text.lower().count('h') >= 1 and text.lower().count('i') >= 1 and text.lower().count('j') >= 1 and text.lower().count('k') >= 1 and text.lower().count('l') >= 1 and text.lower().count('m') >= 1 and text.lower().count('n') >= 1 and text.lower().count('o') >= 1 and text.lower().count('p') >= 1 and text.lower().count('q') >= 1 and text.lower().count('r') >= 1 and text.lower().count('s') >= 1 and text.lower().count('t') >= 1 and text.lower().count('u') >= 1 and text.lower().count('v') >= 1 and text.lower().count('w') >= 1 and text.lower().count('x') >= 1 and text.lower().count('y') >= 1 and text.lower().count('z') >= 1\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by two b's and nine c's.\n    '''\n    return text.lower().count('a') >= 1 and text.lower().count('b') >= 1 and text.lower().count('c') >= 1 and text.lower().count('d') >= 1 and text.lower().count('e') >= 1 and text.lower().count('f') >= 1 and text.lower().count('g') >= 1 and text.lower().count('h') >= 1 and text.lower().count('i') >= 1 and text.lower().count('j') >= 1 and text.lower().count('k') >= 1 and text.lower().count('l') >= 1 and text.lower().count('m') >= 1 and text.lower().count('n') >= 1 and text.lower().count('o') >= 1 and text.lower().count('p') >= 1 and text.lower().count('q') >= 1 and text.lower().count('r') >= 1 and text.lower().count('s') >= 1 and text.lower().count('t') >= 1 and text.lower().count('u') >= 1 and text.lower().count('v') >= 1 and text.lower().count('w') >= 1 and text.lower().count('x') >= 1 and text.lower().count('y') >= 1 and text.lower().count('z') >= 1\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by two b's and ten c's.\n    '''\n    return text.lower().count('a') >= 1 and text.lower().count('b') >= 1 and text.lower().count('c') >= 1 and text.lower().count('d') >= 1 and text.lower().count('e') >= 1 and text.lower().count('f') >= 1 and text.lower().count('g') >= 1 and text.lower().count('h') >= 1 and text.lower().count('i') >= 1 and text.lower().count('j') >= 1 and text.lower().count('k') >= 1 and text.lower().count('l') >= 1 and text.lower().count('m') >= 1 and text.lower().count('n') >= 1 and text.lower().count('o') >= 1 and text.lower().count('p') >= 1 and text.lower().count('q') >= 1 and text.lower().count('r') >= 1 and text.lower().count('s') >= 1 and text.lower().count('t') >= 1 and text.lower().count('u') >= 1 and text.lower().count('v') >= 1 and text.lower().count('w') >= 1 and text.lower().count('x') >= 1 and text.lower().count('y') >= 1 and text.lower().count('z') >= 1 and text.lower().count('a') >= 1 and text.lower().count('b') >= 1 and text.lower().count('c') >= 1 and text.lower().count('d') >= 1 and text.lower().count('e') >= 1 and text.lower().count('f') >= 1 and text.lower().count('g') >= 1 and text.lower().count('h') >= 1 and text.lower().count('i') >= 1 and text.lower().count('j') >= 1 and text.lower().count('k') >= 1 and text.lower().count('l') >= 1 and text.lower().count('m') >= 1 and text.lower().count('n') >= 1 and text.lower().count('o') >= 1 and text.lower().count('p') >= 1 and text.lower().count('q') >= 1 and text.lower().count('r') >= 1 and text.lower().count('s') >= 1 and text.lower().count('t') >= 1 and text.lower().count('u') >= 1 and text.lower().count('v') >= 1 and text.lower().count('w') >= 1 and text.lower().count('x') >= 1 and text.lower().count('y') >= 1 and text.lower().count('z') >= 1 and text.lower().count('a') >= 1 and text.lower().count('b') >= 1 and text.lower().count('c') >= 1 and text.lower().count('d') >= 1 and text.lower().count('e') >= 1 and text.lower().count('f') >= 1 and text.lower().count('g') >= 1 and text.lower()"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\b(?=([a-z])\\b)'\n    result = re.search(pattern, text)\n    return result.group(0)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(\"a([bcdefghijklmnopqrstuvwxyz]){3,}\",text)\ndef text_match_all(text):\n    '''\n    Write a function that matches a string that has a followed by two or more b's.\n    '''\n    return re.search(\"a([bcdefghijklmnopqrstuvwxyz])[bcdefghijklmnopqrstuvwxyz]{3,}\",text)\ndef is_palindrome(word):\n    '''\n    Given a word, determine if it is a palindrome. A palindrome is a word that reads the same backward as forward.\n    '''\n    return word == word[::-1]\ndef test_palindrome(word):\n    '''\n    Given a word, determine if it is a palindrome. A palindrome is a word that reads the same backward as forward.\n    '''\n    return is_palindrome(word)\ndef test_palindrome_with_swapped_char(word):\n    '''\n    Given a word, determine if it is a palindrome. A palindrome is a word that reads the same backward as forward.\n    '''\n    return is_palindrome(\"z\")\ndef test_palindrome_with_reverse_word(word):\n    '''\n    Given a word, determine if it is a palindrome. A palindrome is a word that reads the same backward as forward.\n    '''\n    return is_palindrome(\"h\")\ndef test_palindrome_with_invalid_input(word):\n    '''\n    Given a word, determine if it is a palindrome. A palindrome is a word that reads the same backward as forward.\n    '''\n    return \"it's not a palindrome\"\ndef test_string_is_palindrome(text):\n    '''\n    Given a string, determine if it is a palindrome. A palindrome is a word that reads the same backward as forward.\n    '''\n    return test_palindrome(text)\ndef test_string_is_palindrome_with_swapped_char(text):\n    '''\n    Given a string, determine if it is a palindrome. A palindrome is a word that reads the same backward as forward.\n    '''\n    return test_palindrome(\"z\")\ndef test_string_is_palindrome_with_reverse_word(text):\n    '''\n    Given a string, determine if it is a palindrome. A palindrome is a word that reads the same backward as forward.\n    '''\n    return test_palindrome(\"h\")\ndef test_string_is_palindrome_with_invalid_input(text):\n    '''\n    Given a string, determine if it is a palindrome. A palindrome is a word that reads the same backward as forward.\n    '''\n    return \"it's not a palindrome\"\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Do a regular expression search.\n    text = re.sub('[a-zA-Z0-9]', '', text)\n    if text == '':\n        return ''\n    else:\n        return text_match_one(text[:-1]) + 'b'\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_bytes = text.encode('utf-8')\n    matches = re.findall(r'(?:a(?:\\s|\\n)?)[b](?:\\s|\\n)?'+text_bytes, text)\n    return list(matches)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #create regex\n    regex = r'[a-zA-Z]+'\n    #create string\n    string = text\n    #split string into array\n    string = string.split()\n    #create variable to check for a match\n    found = False\n    #check if the string contains a match\n    for word in string:\n        if word.startswith(regex):\n            found = True\n            break\n        else:\n            found = False\n            break\n    #if the string contains a match return True\n    return found\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    matches = re.findall(r'a(.*)b', text)\n    for match in matches:\n        a = match[0]\n        b = match[-1]\n        if a == 'a':\n            if b in 'ab':\n                text = text.replace(match, 'a'*len(match) + b)\n        else:\n            if b in 'abc':\n                text = text.replace(match, 'c'*len(match) + b)\n    return text\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'a\\w+\\s*\\w+', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # code goes here\n    # if text is empty, it returns '', so no need for a check\n    if len(text) == 0:\n        return '','', ''\n    if text[0]!= 'a' and text[-1]!= 'a':\n        text = text + 'a'\n    text = text.strip(' a')\n    text = text.replace(' ', '')\n    text = text.split()\n    text = [i for i in text if len(i) > 0]\n    # here, all the words are strings\n    # and no need to split them\n    if len(text) == 0:\n        return '','', ''\n    if len(text) == 1:\n        return text, '', ''\n    if len(text) > 1:\n        text = [i for i in text if len(i) > 0]\n        return text, text[-1], text[-2]\n    else:\n        return '','', ''\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('([a-zA-Z0-9\\s])\\1')\n    return pattern.search(text)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 : return '0'\n    if n == 1 : return '1'\n    if n > 1 :\n        if n % 10 == 1 : return last_Digit(n/10) + '1'\n        if n % 10 == 9 : return last_Digit(n/10) + '9'\n        if n % 10 == 0 : return last_Digit(n/10) + '0'\n        else : return last_Digit(n)\n    else : return ''\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n >= 0 :\n        num = 0\n        while n!= 0:\n            num = n % 10\n            n = int(n / 10)\n        return num\n    else :\n        return None\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n <= 0 :\n        return None\n    if n % 10 == 0 :\n        return n // 10\n    else :\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Code here\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n > 0 :\n        if n % 10 == 0 :\n            break\n        n = n / 10\n    return n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return -1\n    return int(str(n)[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #code here\n    n=str(n)\n    for i in n:\n        a=ord(i)\n        if a==65:\n            a=65\n        elif a==90:\n            a=90\n        elif a==91:\n            a=91\n        elif a==92:\n            a=92\n        elif a==93:\n            a=93\n        elif a==95:\n            a=95\n        elif a==96:\n            a=96\n        elif a==97:\n            a=97\n        elif a==98:\n            a=98\n        elif a==99:\n            a=99\n        else:\n            a=a\n    return a\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # your code goes here\n    if n==0 :\n        return 0\n    if n>0 :\n        return last_Digit(n-1)\n    else:\n        return last_Digit(n+1)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    s = str(n)\n    count = s.count('9')\n    if count == 0:\n        return s[-1]\n    else:\n        return s[-count]"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        neg = i * -1\n        print(neg)\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1[::-1]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1 * -1\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #define negative numbers\n    negative = []\n    #loop to get all negative numbers\n    for i in list1:\n        if i < 0:\n            negative.append(i)\n        #if the element is negative, add it to the negative list\n    for i in negative:\n        if i < 0:\n            negative.remove(i)\n    negative.sort()\n    return negative\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negs = []\n    for i in range(len(list1)):\n        negs.append(-list1[i])\n    return negs\n    \ndef neg_one(list1):\n    '''\n    Write a python function to return the list with only the negative numbers in a list.\n    '''\n    negs = []\n    for i in range(len(list1)):\n        negs.append(-list1[i])\n    return negs\n    \ndef neg_pairs(list1):\n    '''\n    Write a python function to return the pairs of numbers in a list.\n    '''\n    negs = []\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            negs.append(list1[i] - list1[j])\n    return negs\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos=[]\n    for item in list1:\n        if item<0:\n            neg_nos.append(item)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    num_list = []\n    for i in range(len(list1)):\n        num_list.append(-list1[i])\n    return num_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = []\n    for i in range(len(list1)):\n        negative.append(-list1[i])\n    return negative\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for i in list1:\n        if i < 0:\n            neg_nos.append(i)\n    return neg_nos"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(str(str1)[0], str(str1)[-1])\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    # print(str1)\n    str1_len = len(str1)\n    # print(str1_len)\n    # print(str1)\n    for i in range(0,str1_len):\n        if i % 2 == 0:\n            str1[i] = '#'\n            str1.pop(i)\n            # print(str1)\n    return ''.join(str1)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    str1 = str1.replace('(', '')\n    str1 = str1.replace(')', '')\n    str1 = str1.replace('{', '')\n    str1 = str1.replace('}', '')\n    \n    return str1\n    \nprint(remove_odd('(P)Cc')"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    s = ''\n    for i in str1:\n        if i % 2!= 0:\n            s += i\n    return s\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    a_string = str1.lower()\n    if a_string.find(a_string) % 2!= 0:\n        return a_string.replace(a_string.split(' ')[0], '')\n    else:\n        return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for x in str1:\n        if x % 2!= 0:\n            new_str += x\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for s in str1:\n        if s % 2 == 0:\n            str2 += s\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    s = list(str1)\n    l = len(s)\n    for i in range(0,l):\n        if i % 2 == 0:\n            s.pop(i)\n    return ''.join(s)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    a = \"\"\n    count = 0\n    for i in str1:\n        if i % 2 == 1:\n            a += i\n        else:\n            a += \" \" + i\n    return a\n    \n    "
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    def remove_odd(str1):\n        odds = []\n        if len(str1) % 2 == 1:\n            return str1\n        for i in range(0, len(str1), 2):\n            odds.append(str1[i])\n        for j in range(len(str1) - 1, -1, -2):\n            odds.append(str1[j])\n        return ''.join(odds)\n    return remove_odd(str1)\n        \n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Store the bidirectional tuple pairs.\n    bidirectional_tuples = []\n    # Go through each tuple in the test list.\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the bidirectional pair.\n            bidirectional_pair = test_list[i] + test_list[j]\n            # Add the bidirectional tuple pair to the bidirectional_tuples list.\n            bidirectional_tuples.append(bidirectional_pair)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    bidirectional_pairs = {}\n    for pair in test_list:\n        bidirectional_pairs[pair[0]] = pair[1]\n    return len(bidirectional_pairs)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    print '\\n\\n'\n    print 'Test set BIDIR: '\n    for test_element in test_list:\n        test_elem = test_element[0]\n        if test_elem[0] == test_elem[1]:\n            print test_elem[0] + ',' + test_elem[1] + ',' + test_element[2]\n        else:\n            print test_elem[0] + ',' + test_elem[1] + ',' + test_element[2] + ',' + test_element[3]\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_pair = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-1):\n            if test_list[i] > test_list[j]:\n                count_pair += 1\n    return count_pair\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) < 2:\n        return 0\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    c = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] > test_list[i + 1]:\n            c += 1\n    return c\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        for j in test_list[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    #count direction counters\n    for item in test_list:\n        direction_count = 0\n        if(item[0] > item[1]):\n            direction_count += 1\n        elif(item[1] > item[0]):\n            direction_count += 1\n        else:\n            direction_count = 0\n        count += direction_count\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for item in test_list:\n        result += len(item)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # This is the list of integers\n    # L = [5, 7, 8, 9]\n    # The resulting integer is 7\n    L2 = []\n    for elem in L:\n        L2.append(elem)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Write your solution here\n    return L[0]\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        temp = []\n        while L:\n            temp.append(L[0])\n            L = L[1:]\n        return ''.join(str(i) for i in temp)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for i in range(len(L)):\n        L[i] = int(L[i])\n    return(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) <= 1:\n        return L[0]\n    elif len(L) == 2:\n        return L[0] + L[1]\n    else:\n        return L[0] + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    def join_list(L):\n        L = list(L)\n        if len(L) == 1:\n            return L[0]\n        else:\n            return L[0] + join_list(L[1:])\n    \n    return join_list(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # TODO: Return the total number of integers in the list\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # write your code here\n    s=0\n    for i in L:\n        s=s+i\n    return s\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = re.sub(r'\\s+','', text)\n    list_of_adverbs = ['the', 'a', 'an']\n    temp = ''\n    for i in range(len(text)):\n        if text[i] in list_of_adverbs:\n            temp = text[i]\n            break\n    return temp, i\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def get_adverb_position(pos):\n        if pos[1] == 'A':\n            return 'A'\n        elif pos[1] == 'ADV':\n            return 'ADV'\n        else:\n            return 'NONE'\n    # print(text)\n    # print('\\n')\n    adverbs = [m.group() for m in re.finditer('([ADV]+)', text)]\n    # print(adverbs)\n    adverbs.sort()\n    # print(adverbs)\n    # print(adverbs[0])\n    # print(adverbs[1])\n    for i in range(1, len(adverbs)):\n        adverb = adverbs[i]\n        adverb_pos = get_adverb_position(adverb)\n        # print(adverb)\n        # print(adverb_pos)\n        # print(adverb_pos)\n        if adverb_pos == 'A':\n            adverb_pos = 'A'\n            break\n        else:\n            adverb_pos = adverb_pos\n    return adverb_pos\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.finditer(r'(?:I|me|my|myself|we|our|ours|ourselves|you|youme|yours|your|yoursme|yoursself|youre|yoursre|yourself|yoursre|yourselves|me|myself|myre|yourre|yoursre|yourre|we|ourre|ourre|were|youre|yoursre|yoursre|youre|yoursre|were|rere|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|youre|yoursre|yoursre|yoursre|yoursre|yoursre|youre|yoursre|yoursre|yoursre|youre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursre|yoursr"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern_adverb = re.compile(r'([a-z]+)(\\.[a-z]+)')\n    adverb_positions = []\n    adverb_pattern = re.compile(r'([a-z]+)([a-z]+)')\n    sentence = text.split()\n    for word in sentence:\n        match = pattern_adverb.search(word)\n        if match:\n            adverb_positions.append((match.group(1), match.group(2)))\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pass\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = []\n    endings = ['.']\n    for ending in endings:\n        p = re.compile(r'(.*)_{0}$'.format(ending), re.I)\n        m = p.search(text)\n        if m:\n            adverbs.append(m.group(1))\n    adverbs = [adverb for adverb in adverbs if adverb.startswith('ADV')]\n    return adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = ''\n    adverb_list = []\n    for word in text.split():\n        if(word[0].lower() == 'a'):\n            adverb = word[1:]\n            break\n        else:\n            adverb_list.append(word)\n    adverb_list = adverb_list[::-1]\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    for index, char in enumerate(text):\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n            return index\n    return 0\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text_re = re.compile(r'\\b([adx])\\b', re.I)\n    adverb_re = re.compile(r'\\b((?:[bcdfghjklmnpqrstvwxz]|[bcdfghjklmnpqrstvwxz]\\s|[a-z]\\s){0,2})(\\b')\n    adverb_positions = {}\n    for index, char in enumerate(text):\n        if re.match(adverb_re, char):\n            match = re.search(adverb_re, char)\n            adverb_positions[match.group(1)] = [index]\n        else:\n            pass\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.strip()\n    r1 = re.compile('[a-zA-Z]')\n    # find all adverbs\n    adverbs = r1.findall(text)\n    # for each adverb\n    for adverb in adverbs:\n        if adverb[0] == 'a':\n            # find the first position and ignore it\n            p1 = re.search(r'\\b' + adverb + r'\\b', text, re.IGNORECASE)\n            # find the position of the adverb\n            p2 = re.search(r'\\b' + adverb + r'\\b', text, re.IGNORECASE)\n            if p1!= None and p2!= None:\n                # return the positions\n                return [p1.start(), p2.start()]\n    return None\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for i in range(l):\n        for j in range(l):\n            s += 9*i**2 + 6*j**2\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*(l+1)*(l+2)*(l+3)*(l+4)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Initializing surface area\n    S = 0\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = (l*l)*4\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 4 * l * l * l * l \n    return s \n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 5 * (l ** 3)"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(l):\n        area += 3 * i * (i + 1)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_list=[]\n    for n in nums:\n        if n >0:\n            num_list.append(n)\n    return num_list\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_positive=0\n    for num in nums:\n        if num>=0:\n            count_positive+=1\n    return count_positive/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_num = []\n    for i in nums:\n        if i > 0:\n            pos_num.append(i)\n    \n    if len(pos_num) == 0:\n        return 0\n    else:\n        return len(pos_num) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count/len(arr)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return sum(map(lambda x: (x > 0), nums))\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    return sum(map(lambda x: (x < 0), nums))\ndef simple_count(nums):\n    '''\n    Write a function to find the ration of simple numbers in an array of integers.\n    '''\n    return nums.count(0) + nums.count(1) + nums.count(2)\ndef balanced_count(nums):\n    '''\n    Write a function to find the ration of balanced numbers in an array of integers.\n    '''\n    total_number = 0\n    for i in nums:\n        if i!= 0:\n            total_number += 1\n    return total_number / len(nums)\ndef simple_count_2(nums):\n    '''\n    Write a function to find the ration of simple numbers in an array of integers.\n    '''\n    total_number = 0\n    for i in nums:\n        if i!= 0:\n            total_number += 1\n    return total_number / len(nums)\ndef count(nums):\n    '''\n    Write a function that calculates the number of counts of 0s and 1s, for a given array.\n    '''\n    total_number = 0\n    for i in nums:\n        if i == 0:\n            total_number += 1\n    return total_number\ndef easy_count(nums):\n    '''\n    Write a function that calculates the number of counts of 0s and 1s, for a given array.\n    '''\n    total_number = 0\n    for i in nums:\n        if i == 0:\n            total_number += 1\n    return total_number\ndef count_2(nums):\n    '''\n    Write a function that calculates the number of counts of 0s and 1s, for a given array.\n    '''\n    total_number = 0\n    for i in nums:\n        if i!= 0:\n            total_number += 1\n    return total_number\ndef pibo_count(nums):\n    '''\n    Write a function that calculates the number of counts of 0s and 1s, for a given array.\n    '''\n    total_number = 0\n    pibo = 0\n    for i in nums:\n        if i == 0:\n            if pibo == 1:\n                total_number += 1\n            pibo = 0\n            pibo += 1\n        else:\n            pibo += 1\n    return total_number\ndef pibo_count_2(nums):\n    '''\n    Write a function that calculates the number of counts of 0s and 1s, for a given array.\n    '''\n    total_number = 0\n    pibo = 0\n    for i in nums:\n        if i!= 0:\n            pibo += 1\n    return pibo\ndef my_count(nums):\n    '''\n    Write a function that calculates the number of counts of 0s and 1s, for a given array.\n    '''\n    total_number = 0\n    for i in nums:\n        if i == 0:\n            total_number += 1\n    return total_number\ndef get_miles_conversion(num):\n    '''\n    Write a function that calculates the conversion of a given number of miles.\n    '''\n    if num >= 1:\n        return num * 1.609\n    else:\n        return \"Error: Number entered is invalid!\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_pos_array = array('i', [0 for i in range(nums[0])])\n    for i in range(nums[0]):\n        num_pos_array[i] = nums[0] - i\n    return num_pos_array\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums.sort()\n    total = 0\n    # sum of the positive numbers is the sum of positive numbers divided by the total numbers\n    for x in nums:\n        if x > 0:\n            total += 1\n        else:\n            pass\n    return total / len(nums)\n    \ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    nums.sort()\n    total = 0\n    # sum of the negative numbers is the sum of negative numbers divided by the total numbers\n    for x in nums:\n        if x < 0:\n            total += 1\n        else:\n            pass\n    return total / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(0,len(nums)-1):\n        if nums[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += 1\n    return count\ndef matrix(nums):\n    '''\n    Write a function to calculate the count of the sum of matrix.\n    '''\n    row = len(nums)\n    col = len(nums[0])\n    matrix = [[0 for col in range(col)] for row in range(row)]\n    for i in range(row):\n        for j in range(col):\n            matrix[i][j] = nums[i][j]\n    return matrix\ndef diagonal_mul(nums):\n    '''\n    Write a function that multiply matrix diagonal by matrix.\n    '''\n    sum_nums = [[0 for col in range(len(nums[0]))] for row in range(len(nums))]\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            sum_nums[i][j] = nums[i][j]\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            sum_nums[i][len(nums[0]) - j - 1] += nums[i][j]\n    return sum_nums\ndef diagonal_add(nums):\n    '''\n    Write a function to add diagonal elements of a matrix.\n    '''\n    sum_nums = [[0 for col in range(len(nums[0]))] for row in range(len(nums))]\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            sum_nums[i][j] = nums[i][j]\n    return sum_nums\ndef diagonal_neg(nums):\n    '''\n    Write a function to negate the diagonal elements of a matrix.\n    '''\n    sum_nums = [[0 for col in range(len(nums[0]))] for row in range(len(nums))]\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            sum_nums[i][j] = -nums[i][j]\n    return sum_nums\ndef diagonal_eq(nums):\n    '''\n    Write a function to check if the diagonal elements of a matrix are equal.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            if nums[i][j]!= 0:\n                return False\n    return True\ndef diagonal_neg_eq(nums):\n    '''\n    Write a function to check if the diagonal elements of a matrix are equal to negated values.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            if nums[i][j] == -nums[i][j]:\n                return False\n    return True\ndef diagonal_plus(nums):\n    '''\n    Write a function to get the sum of the diagonal elements of a matrix.\n    '''\n    sum_nums = [[0 for col in range(len(nums[0]))] for row in range(len(nums))]\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            sum_nums[i][j] = nums[i][j] + nums[i][j]\n    return sum_nums\ndef diagonal_minus(nums):\n    '''\n    Write a function to get the sum of the diagonal elements of a matrix.\n    '''\n    sum_nums = [[0 for col in range(len(nums[0]))] for row in range(len(nums))]\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            sum_nums[i][j] = nums[i][j] - nums[i][j]\n    return sum_nums\ndef diagonal_rmul(nums):\n    '''\n    Write a function to multiply matrix diagonal by matrix.\n    '''\n    sum_nums = [[0 for col in range(len(nums[0]))] for row in range(len(nums))]\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            sum_nums[i][j] = nums[i][j] * nums[i][j]\n    return sum_nums\ndef diagonal_rmul_eq(nums):\n    '''\n    Write a function to multiply matrix diagonal by matrix.\n    '''\n    sum_nums = [[0 for col in range(len(nums[0]))] for row in range(len(nums))]\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            if nums[i][j]!= 0:\n                sum_nums[i][j] = nums[i][j] * nums[i][j]\n    return sum_nums\ndef diagonal_lmul(nums):\n    '''\n    Write a function to multiply matrix diagonal by matrix.\n    '''\n    sum_nums = [[0 for col in range(len(nums[0]))] for row in range(len(nums))]\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            sum_nums[i][j] = nums[i][j] * nums[i][j]\n    return sum_nums\ndef diagonal_mlmul(nums):\n    '''\n    Write a function to multiply matrix diagonal by matrix.\n    '''\n    sum_nums = [[0 for col in range(len(nums[0]))] for row in range(len(nums))]\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            if nums[i][j]!= 0:\n                sum_nums[i][j] = nums[i][j] * nums[i][j]\n    return sum_nums\ndef diagonal_new(nums):\n    '''\n    Write a function to multiply matrix diagonal by matrix.\n    '''\n    sum_nums = [[0 for col in range(len(nums[0]))] for row in range(len(nums))]\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            sum_nums[i][j] = nums[i][j] * nums[i][j]\n    return sum_nums\ndef zero_count(nums):\n    '''\n    Write a function to count zero in matrix.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i][0] == 0:\n            count += 1\n    return count\ndef zero_count_eq(nums):\n    '''\n    Write a function to count zero in matrix.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i][0] == 0:\n            count += 1\n    return count\ndef zero_count_neg(nums):\n    '''\n    Write a function to count zero in matrix.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i][0] == -nums[i][0]:\n            count += 1\n    return count\ndef zero_count_eq_neg(nums):\n    '''\n    Write a function to count zero in matrix.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i][0] == -nums[i][0]:\n            count += 1\n    return count\ndef ro"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # if there are any negative numbers, then divide it by the sum of negative numbers\n    # then return the ration of positive numbers\n    \n    sum = 0\n    for item in nums:\n        if item >= 0:\n            sum += item\n    if sum > 0:\n        return (sum / len(nums))\n    return 0\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(-list1[i])\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for item in list1: \n        if item < 0: \n            if item > max: \n                max = item \n    return max \n    "
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n    print(max(list1))\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            l.append(list1[i])\n    return l\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -9999999999\n    for element in list1:\n        if element < 0:\n            if element > largest:\n                largest = element\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] * -1)\n    print(sum(sum_list))\ndef largest_pos(list1): \n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] * 1)\n    print(sum(sum_list))\ndef largest_neg_and_pos(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    and the largest positive number from the given list.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] * -1)\n    for j in range(len(list1)):\n        if sum_list[j] < 0:\n            print(list1[j])\n    print(sum_list)\ndef sum_list(list1): \n    '''\n    Write a python function to find the sum of the list1.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] + sum_list[i])\n    print(sum_list)\ndef sum_list_in_list(list1): \n    '''\n    Write a python function to find the sum of the list1.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] + sum_list[i])\n    print(sum_list)\ndef n_largest_neg(list1): \n    '''\n    Write a python function to find the n largest negative numbers from the given list.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] * -1)\n    print(sum(sum_list))\ndef n_largest_pos(list1): \n    '''\n    Write a python function to find the n largest positive numbers from the given list.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] * 1)\n    print(sum(sum_list))\ndef n_largest_neg_and_pos(list1): \n    '''\n    Write a python function to find the n largest negative numbers from the given list.\n    and the n largest positive numbers from the given list.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] * -1)\n    for j in range(len(list1)):\n        if sum_list[j] < 0:\n            print(list1[j])\n    print(sum_list)\ndef mean(list1): \n    '''\n    Write a python function to find the average of the list1.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] + sum_list[i])\n    print(sum_list)\ndef list_mean(list1): \n    '''\n    Write a python function to find the mean of the list1.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] + sum_list[i])\n    print(sum_list)\ndef sum_dev(list1): \n    '''\n    Write a python function to find the sum of the list1.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] + sum_list[i])\n    print(sum_list)\ndef std(list1): \n    '''\n    Write a python function to find the standard deviation of the list1.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] + sum_list[i])\n    print(sum_list)\ndef random_choice(list1): \n    '''\n    Write a python function to pick a random element from the given list.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] + sum_list[i])\n    print(sum_list)\ndef min(list1): \n    '''\n    Write a python function to find the minimum element of the list.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] + sum_list[i])\n    print(sum_list)\ndef max(list1): \n    '''\n    Write a python function to find the maximum element of the list.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] + sum_list[i])\n    print(sum_list)\ndef sum_length(list1): \n    '''\n    Write a python function to find the sum of the list1.\n    '''\n    sum_list = []\n    for i in range(len(list1)):\n        sum_list.append(list1[i] + sum_list[i])\n    print(sum_list)\ndef count_words(list1): \n    '''\n    Write a python function to count the number of words in the given list.\n    '''\n    word_list = []\n    for i in range(len(list1)):\n        word_list.append(list1[i])\n    print(word_list)\ndef word_length(list1): \n    '''\n    Write a python function to find the length of the given list.\n    '''\n    word_list = []\n    for i in range(len(list1)):\n        word_list.append(list1[i])\n    print(len(word_list))\ndef reverse_string(list1): \n    '''\n    Write a python function to reverse the string in the given list.\n    '''\n    word_list = []\n    for i in range(len(list1)):\n        word_list.append(list1[i])\n    print(word_list)\ndef list_to_string(list1): \n    '''\n    Write a python function to convert the given list into a string.\n    '''\n    string_list = []\n    for i in range(len(list1)):\n        string_list.append(list1[i] + str(i))\n    print(string_list)\ndef sum_list_of_tuples(list1): \n    '''\n    Write a python function to create a tuple from the given list.\n    '''\n    tup_list = []\n    for i in range(len(list1)):\n        tup_list.append((list1[i]))\n    print(tup_list)\ndef reverse_tuple(tup_list): \n    '''\n    Write a python function to reverse the given tuple.\n    '''\n    rev_tup_list = []\n    for i in range(len(tup_list)):\n        rev_tup_list.append(tup_list[-1-i])\n    print(rev_tup_list)\ndef remove_duplicates(list1): \n    '''\n    Write a python function to remove duplicates from the given list.\n    '''\n    tup_list = []\n    for i in range(len(list1)):\n        if list1[i] not in tup_list:\n            tup_list.append(list1[i])\n    print(tup_list)\ndef remove_duplicates_2(list1): \n    '''\n    Write a python function to remove duplicates from the given list.\n    '''\n    tup_list = []\n    for i in range(len(list1)):\n        if list1[i] not in tup"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = sorted(-list1)\n    #print(list1)\n    #print(type(list1))\n    #print(list1)\n    return list1[-1]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_negative = 0\n    for i in range(len(list1)): \n        if list1[i] < 0: \n            if largest_negative < list1[i]: \n                largest_negative = list1[i] \n    return largest_negative\n    \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # code here\n    #get the max value from the list.\n    \n    max = list1[0]\n    #case 1\n    #check the max number\n    for i in range(len(list1)):\n        if list1[i]<0:\n            #increase the max number by the value\n            max = list1[i]\n            #re-check the max number\n    return max\n    #return the max\n    \n    \n    \n    \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    num_list = []\n    for element in list1:\n        num_list.append(abs(element))\n    return max(num_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) > 0:\n        return tuple(test_list[:K])\n    else:\n        return tuple()\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        if len(t) > K:\n            result.append(t[:K])\n        else:\n            result.append(t)\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda tuple: tuple[:K], test_list))\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    def trim(tup):\n        '''\n        tup: A tuple.\n        '''\n        return tup[:K]\n    return tuple(map(trim, test_list))\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # TODO: Write your solution here\n    temp_list = []\n    for i in test_list:\n        if len(i) > K:\n            temp_list.append(i[:K])\n        else:\n            temp_list.append(i)\n    return temp_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return []\n    else:\n        if K < 1:\n            return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        for j in i:\n            if j:\n                break\n        else:\n            continue\n        test_list.remove(i)\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        if len(i) == K:\n            del i[0:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in test_tup1:\n        for j in test_tup2:\n            print(i*j, end=' ')\n        print()\n    print()\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    try:\n        index1 = 0\n        index2 = 1\n        result = 0\n        #Looping through tuple 1\n        while (index1 < len(test_tup1)):\n            result = result + test_tup1[index1] * test_tup2[index2]\n            index1 = index1 + 1\n            index2 = index2 + 1\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = 1\n    for i in range(len(test_tup1)):\n        res *= test_tup1[i]\n    for i in range(len(test_tup2)):\n        res *= test_tup2[i]\n    return res\n    \ntest_tuple1 = (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\ntest_tuple2 = (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\nprint(index_multiplication(test_tuple1, test_tuple2)"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    if len(test_tup1) < len(test_tup2):\n        for i in range(len(test_tup1)):\n            result.append((test_tup1[i] * test_tup2[i]))\n    elif len(test_tup2) < len(test_tup1):\n        for i in range(len(test_tup2)):\n            result.append((test_tup2[i] * test_tup1[i]))\n    elif len(test_tup2) == len(test_tup1):\n        for i in range(len(test_tup1)):\n            result.append((test_tup1[i] * test_tup2[i]))\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    index_multiplication_result = []\n    \n    for i in range(len(test_tup1)):\n        index_multiplication_result.append((test_tup1[i] * test_tup2[i]))\n    \n    return index_multiplication_result\n    \nprint(index_multiplication(('b', 'a'), ('c', 'd'))"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    print(f\"\\nFirst tuple\\n{test_tup1}\\n\")\n    print(f\"Second tuple\\n{test_tup2}\\n\")\n    \n    # get the len of the tuples\n    \n    length = len(test_tup1)\n    \n    # get the len of the lists\n    \n    length_of_lists = len(test_tup2)\n    \n    # loop through the lists\n    \n    for i in range(length):\n        \n        # print the list element\n        \n        print(f\"Element {i+1}: \", end = \"\")\n        \n        # get the value of the index of the list\n        \n        index = i+1\n        \n        # print the value of the index\n        \n        print(test_tup2[index-1], end = \"\")\n    \n    # loop through the length of the lists\n    \n    for i in range(length_of_lists):\n        \n        # print the values in the lists\n        \n        print(f\"Element {i+1}: \", end = \"\")\n        \n        # get the value of the index of the list\n        \n        index = i+1\n        \n        # print the values of the index\n        \n        print(test_tup1[index-1], end = \"\")\n    \n    # print the index for each list element\n    \n    for i in range(length_of_lists):\n        \n        print(f\"Element {i+1}: \", end = \"\")\n        \n        # get the value of the index of the list\n        \n        index = i+1\n        \n        # print the value of the index\n        \n        print(test_tup1[index-1], end = \"\")\n    \n    # return the index for each list element\n    \n    return index-1\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    try:\n        result = 0\n        for i in range(len(test_tup1)):\n            result += test_tup1[i]*test_tup2[i]\n        return result\n    except Exception as e:\n        raise Exception(\"Can't multiply two tuples!\")\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] * test_tup2[i]\n    return test_tup1\n    \n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index1 = 0\n    index2 = 0\n    test_tup = list(test_tup1)\n    while index1 <= len(test_tup) - 1:\n        test_tup[index1] = test_tup[index1] * test_tup2[index2]\n        index1 += 1\n        index2 += 1\n    return tuple(test_tup)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(\"\\n--index_multiplication--\")\n    print(\"\\n\",test_tup1,\"\\n\",test_tup2)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(lst)): \n        for j in range(len(lst[i])): \n            if lst[i][j] == tup: \n                count += 1\n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst) \n    return c.most_common()\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return(Counter(lst).most_common(1))\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    n = 0\n    for x in tup: \n        if x in lst: \n            n += 1\n    return n \ndef most_common_element(tup): \n    '''\n    Write a python function to find the most frequent elements in a tuple.\n    '''\n    count = 0 \n    # define the key for the dictionary\n    # key is the element\n    # value is the frequency\n    # i.e. count = count + 1\n    dic = {} \n    for x in tup: \n        if x not in dic.keys(): \n            dic[x] = 1\n        else: \n            dic[x] += 1\n    sorted_dic = sorted(dic.items(), key = lambda x : x[1], reverse = True)\n    # list of tuples\n    if len(sorted_dic) > 0: \n        for i in sorted_dic[:5]: \n            count += 1\n            # print the tuple \n            # l = (i[0], i[1]) \n            print (i[0], ':', i[1]) \n    else: \n        print ('No frequent elements found.') \ndef most_common_element_dist(tup): \n    '''\n    Write a python function to find the most frequent elements in a tuple.\n    '''\n    count = 0 \n    # define the key for the dictionary\n    # key is the element\n    # value is the frequency\n    # i.e. count = count + 1\n    dic = {} \n    for x in tup: \n        if x not in dic.keys(): \n            dic[x] = 1\n        else: \n            dic[x] += 1\n    sorted_dic = sorted(dic.items(), key = lambda x : x[1], reverse = True)\n    # list of tuples\n    if len(sorted_dic) > 0: \n        for i in sorted_dic[:5]: \n            count += 1\n            # print the tuple \n            # l = (i[0], i[1]) \n            print (i[0], ':', i[1]) \n    else: \n        print ('No frequent elements found.') \ndef most_common_element_dist_sorted(tup): \n    '''\n    Write a python function to find the most frequent elements in a tuple.\n    '''\n    count = 0 \n    # define the key for the dictionary\n    # key is the element\n    # value is the frequency\n    # i.e. count = count + 1\n    dic = {} \n    for x in tup: \n        if x not in dic.keys(): \n            dic[x] = 1\n        else: \n            dic[x] += 1\n    sorted_dic = sorted(dic.items(), key = lambda x : x[1], reverse = True)\n    # list of tuples\n    if len(sorted_dic) > 0: \n        for i in sorted_dic[:5]: \n            count += 1\n            # print the tuple \n            # l = (i[0], i[1]) \n            print (i[0], ':', i[1]) \n    else: \n        print ('No frequent elements found.') \ndef common_elements(tup1, tup2): \n    '''\n    Write a python function to find the common elements in a tuple.\n    '''\n    tup1_count = count_Occurrence(tup1, tup1.values())\n    tup2_count = count_Occurrence(tup2, tup2.values())\n    if tup1_count!= 0 and tup2_count!= 0: \n        common_elements = []\n        for i in tup1: \n            if i in tup2 and tup1_count == tup2_count: \n                common_elements.append(i)\n        return common_elements\n    else: \n        print ('No common elements found.')\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = list(tup)\n    print(lst)\n    lst_occurrence = Counter(lst)\n    print(lst_occurrence)\n    return lst_occurrence\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = 0\n    for i in tup: \n        occ += lst.count(i)\n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurrence = Counter(lst)\n    occurrence = occurrence.most_common()\n    for i in range(len(occurrence)):\n        lst[occurrence[i][0]] = lst[occurrence[i][0]] + 1\n    print(lst)\n    return lst\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i in lst: \n            count += 1 \n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occur = 0\n    for i in range(len(lst)): \n        if lst[i] in tup: \n            occur += 1\n    return occur \n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    n = len(nums)\n    cubes = [1, 1, 2, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    for i in range(n):\n        cubes[i] = nums[i] * cubes[i]\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in range(len(nums)):\n        cubes.append(nums[i]*3**i)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Example:\n    # cube_nums([1, 2, 3, 4, 5]) => [1, 2, 9, 25, 125]\n    # cube_nums([1, 2, 3, 4, 5, 6]) => [1, 9, 18, 27, 125]\n    # cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => [1, 9, 27, 125, 216]\n    # cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => [1, 9, 18, 27, 125, 216, 295]\n    # cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) => [1, 9, 18, 27, 125, 216, 295, 357]\n    return [cube(n) for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    #Your code here\n    def cube(x):\n        return x*x*x\n    return [cube(num) for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in range(len(nums)):\n        cubes.append(nums[i]**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [cube_of_number(num) for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            for k in range(len(nums)):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    nums[i] *= nums[j] * nums[k]\n    return nums\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = 0\n    for num in nums:\n        cubes += num**3\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    #I need to figure out a way to do this without any loops\n    cube = 0\n    for i in nums:\n        cube += i**3\n    return cube\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = list(map(lambda num: num ** 3, nums))\n    return cubes\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total = total + i\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    count = 0 \n    for i in range(1, n + 1):\n        if n % i == 0: \n            count += i\n    return count \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(n+1): \n        total += i\n    return total \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i\n    return sum\n    \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1, n+1):\n        sum += i\n    print(sum)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return ''.join(l[i:i+l[i].find(str)])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    #declare empty strings to store extracted values\n    extracted_values = []\n    #loop through the given list, if element matches string then append the given element to extracted_values\n    for i in l:\n        if i.find(str)!= -1:\n            extracted_values.append(i)\n    return extracted_values\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+l] == str[i:i+l]:\n            count+=1\n        else:\n            break\n    if count == l:\n        return str\n    else:\n        return extract_string(str, l//2) + str[l//2:]"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l is None:\n        return None\n    \n    if len(str) == 1 and l[0] is None:\n        return str[0]\n    \n    if len(l) == 1 and l[0] == None:\n        return None\n    \n    if len(l) == 1 and l[0]!= None:\n        return str[0]\n    \n    if len(l) > 1:\n        start = 0\n        end = len(l) - 1\n        while start < end:\n            if l[start] == l[end]:\n                end -= 1\n            else:\n                break\n        return str[start:end+1]\n    \n    return str[0]\n    \n    \ndef combine_strings(str1, str2):\n    '''\n    Write a function to combine two given strings into a single string.\n    '''\n    return ''.join(str(x) for x in zip(str1, str2))\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(l)):\n        for j in range(l[i].index(' ') + 1, len(l[i])):\n            l[i] = l[i].replace(' ', '')\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return(str[l:l+size])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    try:\n        result = [i for i in str if i == l[-1]]\n        return result\n    except IndexError:\n        print(f'IndexError: {l} is out of range.')\n        return []\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Write your code here.\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(l)):\n        if len(l[i]) >= l[i]:\n            l[i] = l[i][len(l[i]) :]\n    return ''.join(l)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = ''\n    if len(str)==0:\n        return None\n    for i in l:\n        if len(str)>=i:\n            res += str[i]\n        else:\n            break\n    return res\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+','', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('^\\s+|\\s+$','', text1).strip()\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    import re\n    text1=text1.replace(\" \",\"\")\n    return text1\ndef check_symbol(string):\n    '''\n    Given a string, return True if the string is either a single symbol (a,r,s,t,l,m,n) or a range (a-m,r,s,t,l,m,n).\n    '''\n    r=re.findall(\"[a-mA-Z]+\",string)\n    if len(r)==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    print(text1)\n    text1 = re.sub('\\s+','', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace('\\n', '')\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = str(text1)\n    final_list = []\n    text = re.findall('^\\s+', text1)\n    for char in text:\n        final_list.append(char)\n    text = \"\".join(final_list)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.strip()\n    return text\n    \ndef is_alpha(text):\n    '''\n    Return True if the given string is a valid alpha or not.\n    '''\n    return re.search('[a-zA-Z]+', text)!= None\n    \ndef is_int(text):\n    '''\n    Return True if the given string is an integer or not.\n    '''\n    return re.search('[0-9]+', text)!= None\n    \ndef is_float(text):\n    '''\n    Return True if the given string is a float or not.\n    '''\n    return re.search('[0-9]+\\.0*', text)!= None\n    \ndef is_string(text):\n    '''\n    Return True if the given string is a string or not.\n    '''\n    return re.search('[A-Za-z0-9_.]+', text)!= None\n    \ndef is_empty(text):\n    '''\n    Return True if the given string is an empty or not.\n    '''\n    return text == \"\"\n    \ndef is_number(text):\n    '''\n    Return True if the given string is a number or not.\n    '''\n    return re.search('[0-9]+', text)!= None\n    \ndef is_space(text):\n    '''\n    Return True if the given string is a space or not.\n    '''\n    return re.search('[^a-zA-Z0-9_.]+', text)!= None\n    \ndef is_empty_string(text):\n    '''\n    Return True if the given string is an empty string or not.\n    '''\n    return text == \"\"\n    \ndef is_alpha_string(text):\n    '''\n    Return True if the given string is an alpha string or not.\n    '''\n    return re.search('[a-zA-Z]+', text)!= None\n    \ndef is_digit_string(text):\n    '''\n    Return True if the given string is a digit string or not.\n    '''\n    return re.search('[0-9]+', text)!= None\n    \ndef is_string_empty(text):\n    '''\n    Return True if the given string is an empty string or not.\n    '''\n    return text == \"\"\n    \ndef is_bool(text):\n    '''\n    Return True if the given string is a boolean or not.\n    '''\n    return re.search('[a-zA-Z]+', text)!= None\n    \ndef is_alpha_bool(text):\n    '''\n    Return True if the given string is a alpha boolean or not.\n    '''\n    return re.search('[a-zA-Z]+', text)!= None\n    \ndef is_alpha_int(text):\n    '''\n    Return True if the given string is an alpha integer or not.\n    '''\n    return re.search('[0-9]+', text)!= None\n    \ndef is_alpha_float(text):\n    '''\n    Return True if the given string is an alpha float or not.\n    '''\n    return re.search('[0-9]+\\.0*', text)!= None\n    \ndef is_alpha_string_int(text):\n    '''\n    Return True if the given string is an alpha string and an alpha integer or not.\n    '''\n    return re.search('[A-Za-z0-9_.]+', text)!= None\n    \ndef is_alpha_string_float(text):\n    '''\n    Return True if the given string is an alpha string and an alpha float or not.\n    '''\n    return re.search('[0-9]+\\.0*', text)!= None\n    \ndef is_integer_string(text):\n    '''\n    Return True if the given string is an integer string or not.\n    '''\n    return re.search('[0-9]+', text)!= None\n    \ndef is_float_string(text):\n    '''\n    Return True if the given string is a float string or not.\n    '''\n    return re.search('[0-9]+\\.0*', text)!= None\n    \ndef is_string_empty_int(text):\n    '''\n    Return True if the given string is an empty string and an integer or not.\n    '''\n    return text == \"\"\n    \ndef is_string_empty_float(text):\n    '''\n    Return True if the given string is an empty string and an float or not.\n    '''\n    return text == \"\"\n    \ndef is_string_empty(text):\n    '''\n    Return True if the given string is an empty string or not.\n    '''\n    return text == \"\"\n    \ndef is_string_number(text):\n    '''\n    Return True if the given string is a number string or not.\n    '''\n    return re.search('[0-9]+', text)!= None\n    \ndef is_string_alpha_number(text):\n    '''\n    Return True if the given string is a alpha string and an alpha number or not.\n    '''\n    return re.search('[A-Za-z0-9_.]+', text)!= None\n    \ndef is_string_number_int(text):\n    '''\n    Return True if the given string is a number string and an alpha number or not.\n    '''\n    return re.search('[0-9]+', text)!= None\n    \ndef is_string_number_float(text):\n    '''\n    Return True if the given string is a number string and an alpha number or not.\n    '''\n    return re.search('[0-9]+\\.0*', text)!= None\n    \ndef is_bool_string_number(text):\n    '''\n    Return True if the given string is a boolean string and a alpha number or not.\n    '''\n    return re.search('[a-zA-Z]+', text)!= None\n    \ndef is_string_alpha_bool(text):\n    '''\n    Return True if the given string is a string and a alpha string or not.\n    '''\n    return re.search('[a-zA-Z]+', text)!= None\n    \ndef is_number_string_number(text):\n    '''\n    Return True if the given string is a number string and an alpha number or not.\n    '''\n    return re.search('[0-9]+\\.0*', text)!= None\n    \ndef is_string_empty_alpha(text):\n    '''\n    Return True if the given string is an empty string and an alpha or not.\n    '''\n    return text == \"\"\n    \ndef is_string_alpha_bool(text):\n    '''\n    Return True if the given string is a string and an alpha boolean or not.\n    '''\n    return re.search('[A-Za-z0-9_.]+', text)!= None\n    \ndef is_string_empty_string(text):\n    '''\n    Return True if the given string is an empty string or not.\n    '''\n    return text == \"\"\n    \ndef is_string_alpha_string(text):\n    '''\n    Return True if the given string is an alpha string and an alpha string or not.\n    '''\n    return re.search('[A-Za-z0-9_.]+', text)!= None\n    \ndef is_alpha_number_int(text):\n    '''\n    Return True if the given string is an alpha number and an alpha integer or not.\n    '''\n    return re.search('[0-9]+', text)!= None\n    \ndef is_alpha_number_float(text):\n    '''\n    Return True if the given string is an alpha number and an alpha float or not.\n    '''\n    return re.search('[0-9]+\\.0*', text)!= None\n    \ndef is_alpha_string_int_float(text):\n    '''\n    Return True if the given string is an alpha string and an alpha integer and a float or not.\n    '''\n    return re.search('[A-Za-z0-9_.]+', text)!= None\n    \ndef is_alpha_string_string(text):\n    '''\n    Return True if the given string is an alpha string and an alpha string or not.\n    '''\n    retur"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.split()\n    text = \" \".join(text)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"\\s+\", \" \", text1)\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        real_sale_amount = sale_amount / actual_cost\n    except ZeroDivisionError:\n        real_sale_amount = 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    elif actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n        "
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        actual_cost = float(actual_cost)\n        sale_amount = float(sale_amount)\n        return actual_cost - sale_amount\n    except ValueError:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #TODO: write your solution\n    pass\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= 0: \n        return 0\n    return actual_cost - sale_amount * sale_amount * 0.5\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    total_cost = actual_cost * sale_amount\n    return total_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0.0\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    num=0\n    for i in range(1,n) :\n        if n%i==0:\n            num+=i\n            print (i,end=\" \")\n    print()\n    return num\ndef getFactors(n) : \n    '''\n    Return the list of all possible factors of number n. \n    '''\n    factors=[i for i in range(1,n+1) if n%i==0]\n    return factors\ndef sumOfFactors(n) :\n    '''\n    Compute the sum of all even factors of a number. \n    '''\n    num=0\n    for i in range(1,n+1):\n        if n%i==0:\n            num+=i\n    return num\ndef maxDivisors(n) :\n    '''\n    Return the largest number of divisors of a positive integer n.\n    '''\n    div=0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            div+=i\n            if div>n:\n                break\n    return div\ndef greatest_multiple_of_three(n) :\n    '''\n    Return the greatest multiple of three numbers.\n    '''\n    a=0\n    b=1\n    c=0\n    for i in range(1,n+1):\n        if (n%i==0):\n            if (i%b==0):\n                c+=i\n            elif (i%a==0):\n                c+=i\n            else:\n                a+=i\n    return c\ndef is_prime(n) :\n    '''\n    Check whether the given number is prime.\n    '''\n    if (n==2 or n==3):\n        return True\n    if (n==1 or n==0):\n        return False\n    if (n%2==0 or n%3==0):\n        return False\n    for i in range(5,int(math.sqrt(n)),2):\n        if (n%i==0):\n            return False\n    return True\ndef is_sum_of_primes(n) :\n    '''\n    Check whether the given number is sum of primes.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if(is_prime(i) and is_prime(n-i)):\n            return False\n    return True\ndef is_divisible(n, d) :\n    '''\n    Check whether the given number is divisible by the divisor d.\n    '''\n    if (n%d==0):\n        return False\n    for i in range(1,d+1):\n        if (n%i==0):\n            return False\n    return True\ndef are_divisors(n) :\n    '''\n    Check whether the given number is a divisor of a given positive integer n.\n    '''\n    if (n<2):\n        return False\n    if (n==2):\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if (n%i==0):\n            return False\n    return True\ndef number_of_divisors(n) :\n    '''\n    Return the number of divisors of a given integer n.\n    '''\n    i=2\n    while (i<=n):\n        if (n%i==0):\n            divs+=1\n        i+=1\n    return divs\ndef number_of_sub_divisors(n) :\n    '''\n    Return the number of sub-divisors of a given integer n.\n    '''\n    i=2\n    while (i<=n):\n        if (n%i==0):\n            divs+=1\n            while (i<=n//i):\n                divs+=1\n                i+=1\n        i+=1\n    return divs\ndef divisors(n) :\n    '''\n    Return the list of all divisors of a given integer n.\n    '''\n    if (n<2):\n        return [n]\n    divs=[]\n    for i in range(2,int(math.sqrt(n))+1):\n        if (n%i==0):\n            divs+=divisors(i)\n    return divs\ndef sieve(n) :\n    '''\n    Compute all prime numbers up to n.\n    '''\n    arr=[True for i in range(n+1)]\n    arr[0]=False\n    for i in range(2,int(math.sqrt(n))+1):\n        if (arr[i]):\n            arr[i*i:n:i]=[False]*((n-i*i+1)//i+1)\n    return arr\ndef primes_up_to(n) :\n    '''\n    Return the list of primes up to n.\n    '''\n    primes=[]\n    for i in range(1,n+1):\n        if (is_prime(i)):\n            primes+=divisors(i)\n    return primes\ndef prime_generator(n):\n    '''\n    Return a list of all primes up to n.\n    '''\n    primes=[]\n    for i in range(2,n+1):\n        if (is_prime(i)):\n            primes+=divisors(i)\n    return primes\ndef primes_filter(n):\n    '''\n    Filter the list of all primes up to n.\n    '''\n    primes=[]\n    for i in range(1,n+1):\n        if (is_prime(i)):\n            primes+=divisors(i)\n    return primes\ndef is_in_set(s,n):\n    '''\n    Return whether or not the given string s is in the given set n.\n    '''\n    return s in n\ndef is_in_fset(s,fset):\n    '''\n    Return whether or not the given string s is in the given set fset.\n    '''\n    return s in fset\ndef is_in_set_generator(s,fset):\n    '''\n    Return whether or not the given string s is in the given set fset.\n    '''\n    for i in fset:\n        if (s==i):\n            return True\n    return False\ndef is_in_fset_generator(s,fset):\n    '''\n    Return whether or not the given string s is in the given set fset.\n    '''\n    for i in fset:\n        if (s==i):\n            return True\n    return False\ndef is_in_set_set(s,n):\n    '''\n    Return whether or not the given string s is in the given set n.\n    '''\n    if is_in_set(s,n):\n        return True\n    return False\ndef is_in_fset_set(s,fset):\n    '''\n    Return whether or not the given string s is in the given set fset.\n    '''\n    if is_in_fset(s,fset):\n        return True\n    return False\ndef is_in_set_set_generator(s,n):\n    '''\n    Return whether or not the given string s is in the given set n.\n    '''\n    for i in n:\n        if is_in_set_set(s,i):\n            return True\n    return False\ndef is_in_fset_set_generator(s,fset):\n    '''\n    Return whether or not the given string s is in the given set n.\n    '''\n    for i in fset:\n        if is_in_fset_set(s,i):\n            return True\n    return False\ndef is_in_set_set_generator_generator(s,n):\n    '''\n    Return whether or not the given string s is in the given set n.\n    '''\n    for i in n:\n        if is_in_set_set_generator(s,i):\n            return True\n    return False\ndef is_in_fset_set_generator_generator(s,fset):\n    '''\n    Return whether or not the given string s is in the given set n.\n    '''\n    for i i"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 2\n    while(i <= n) : \n        if (n % i) == 0: \n            print(i) \n            return(n/i) \n        i += 1 \n    return \"Division is not possible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([i for i in range(1, n//2 + 1) if n % i == 0])\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n % 2 == 0): \n        return int(n/2)\n    else:\n        return n\n    \ndef gcd(a, b): \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if (b == 0): \n        return a\n    if (a == 0): \n        return b \n    return gcd(b, a % b)\n    \ndef isPrime(n): \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if (n <= 1): \n        return False\n    if (n == 2): \n        return True\n    if (n % 2 == 0): \n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        if (n % i == 0): \n            return False\n    return True\n    \ndef countFactors(n): \n    '''\n    Write a python function to count the factors of a number.\n    '''\n    factors = [] \n    if (n == 1): \n        return 1\n    if (isPrime(n)): \n        factors.append(1) \n    for i in range(2, n+1): \n        if (isPrime(i)): \n            factors.append(i) \n    return len(factors)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    num = n \n    while(num > 1) : \n        if (num % 2 == 0) : \n            num = num / 2\n        else : \n            num = 3 * num + 1 \n            print(num)\n    print(num)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n <= 2: \n        return 1\n    else:\n        a = n//2 \n        b = a+1\n        c = 3\n        while (a < b) : \n            if (n%c) == 0: \n                a = a+1\n                b = n//c\n                c = c+1\n                continue\n            c = 3\n        return c\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1 : \n        return 1\n    else : \n        return sumofFactors(n - 1) + sumofFactors(n - 2)\ndef isPrime(n) : \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n == 2 or n == 3 : \n        return True\n    elif n % 2 == 0 or n % 3 == 0 : \n        return False\n    i = 5\n    while i <= math.sqrt(n) : \n        if n % i == 0 or n % (i + 2) == 0 : \n            return False\n        i += 6\n    return True\ndef isPalindrome(n) : \n    '''\n    Write a python function to check if a number is a palindrome or not.\n    '''\n    return str(n)[::-1] == str(n)[::-2]\ndef fibonacci(n) :\n    '''\n    Write a python function to compute the fibonacci series of a given number.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    elif n == 2 : \n        return 1\n    elif n == 3 : \n        return 1\n    else : \n        return fibonacci(n - 1) + fibonacci(n - 2)\ndef sumDp(n) :\n    '''\n    Write a Python function to calculate the sum of the digits of the number passed as argument.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    elif n == 2 : \n        return 1\n    else : \n        return n + sumDp(n - 1)\ndef fib(n) : \n    '''\n    Write a python function to compute the fibonacci sequence of a given number.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        return fib(n - 1) + fib(n - 2)\ndef fib2(n) : \n    '''\n    Write a python function to compute the fibonacci sequence of a given number.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        return fib2(n - 1) + fib2(n - 2)\ndef fib3(n) : \n    '''\n    Write a python function to compute the fibonacci sequence of a given number.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        return fib3(n - 1) + fib3(n - 2)\ndef divisors(n) : \n    '''\n    Write a python function to compute all the divisors of a given number.\n    '''\n    if n == 0 : \n        return []\n    elif n == 1 : \n        return [1]\n    elif n == 2 : \n        return [1, 2]\n    elif n == 3 : \n        return [1, 3, 3]\n    else : \n        l = [i for i in range(4, n + 1) if n % i == 0]\n        return [1] + l + [n] + l\ndef primeFactors(n) :\n    '''\n    Write a python function to compute the prime factors of a given number.\n    '''\n    if n == 0 : \n        return []\n    elif n == 1 : \n        return [1]\n    elif n == 2 : \n        return [1, 2]\n    elif n == 3 : \n        return [1, 3, 3]\n    else : \n        l = [i for i in range(4, n + 1) if n % i == 0]\n        return [1] + l + [n] + l\ndef perfectNumbers(n) :\n    '''\n    Write a python function to compute all the perfect numbers of a given number.\n    '''\n    if n == 0 : \n        return []\n    elif n == 1 : \n        return [1]\n    elif n == 2 : \n        return [1, 2]\n    elif n == 3 : \n        return [1, 3, 3]\n    else : \n        l = [i for i in range(4, n + 1) if n % i == 0]\n        return [1] + l + [n] + l\ndef main() : \n    '''\n    Main function to test the code\n    '''\n    print('Sum of factors :'+ str(sumofFactors(4)))\n    print('\\nIs a Number :'+ str(isPrime(3)))\n    print('\\nIs a Palindrome :'+ str(isPalindrome(1233)))\n    print('\\nIs a Prime number :'+ str(isPrime(3)))\n    print('\\nIs a Fibonacci number :'+ str(fib(3)))\n    print('\\nSum of digits of a number :'+ str(sumDp(5)))\n    print('\\nIs a Fibonacci sequence :'+ str(fib2(3)))\n    print('\\nNumber of Fibonacci numbers :'+ str(fib3(3)))\n    print('\\nIntegers in a series :'+ str(divisors(12)))\n    print('\\nThe prime numbers :'+ str(primeFactors(100)))\n    print('\\nThe perfect numbers :'+ str(perfectNumbers(100)))\nmain("
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if n%i == 0:\n            sum += i\n    return sum\ndef getFactors(n):\n    '''\n    Write a python function that returns the factors of a number.\n    '''\n    return list(n)\ndef printFactors(n,list):\n    '''\n    Write a python function that prints the factors of a number.\n    '''\n    for i in range(1, n+1):\n        if list[i]==1:\n            print(i, end=\" \")\ndef hw5():\n    '''\n    Write a python function that prints the factorial of a number.\n    '''\n    print(\"Factorial: \", math.factorial(9))\ndef hw5():\n    '''\n    Write a python function that prints the square of a number.\n    '''\n    print(\"Square: \", math.pow(9,2))\ndef hw5():\n    '''\n    Write a python function that returns the factorial of a number.\n    '''\n    print(\"Factorial: \", math.factorial(9))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the past.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a year is in the future.\n    '''\n    print(\"Years: \", math.pow(365,4))\ndef hw5():\n    '''\n    Write a python function that returns the number of days a yea"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    elif n == 2 : \n        return 2\n    else: \n        i = 3\n        while i * i <= n : \n            if n % i == 0 : \n                return i \n            i = i + 2 \n        return n \n    \ndef subinverse(n) : \n    '''\n    Write a python function that takes an integer n and returns the modular inverse.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        a = n \n        b = 1\n        while b < a : \n            q = a // b \n            r = a % b \n            a = b \n            b = r \n        return b \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 0):\n        return 0\n    i = 2\n    sum = 0\n    while (i * i <= n) :\n        if (n % i == 0) : \n            # print(i,\"x\",i,\"=\",n/i)\n            sum = sum + i \n            n = n/i \n        i = i + 1\n    return sum \n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    m = re.findall(r'z', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing only 'a'.\n    '''\n    m = re.findall(r'a', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing only 'w'.\n    '''\n    m = re.findall(r'w', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt(text):\n    '''\n    Write a function that matches a word containing only 't'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_1(text):\n    '''\n    Write a function that matches a word containing only 't' and '1'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_2(text):\n    '''\n    Write a function that matches a word containing only 't' and '2'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_3(text):\n    '''\n    Write a function that matches a word containing only 't' and '3'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_4(text):\n    '''\n    Write a function that matches a word containing only 't' and '4'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_5(text):\n    '''\n    Write a function that matches a word containing only 't' and '5'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_6(text):\n    '''\n    Write a function that matches a word containing only 't' and '6'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_7(text):\n    '''\n    Write a function that matches a word containing only 't' and '7'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_8(text):\n    '''\n    Write a function that matches a word containing only 't' and '8'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_9(text):\n    '''\n    Write a function that matches a word containing only 't' and '9'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_10(text):\n    '''\n    Write a function that matches a word containing only 't' and '10'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_11(text):\n    '''\n    Write a function that matches a word containing only 't' and '11'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_12(text):\n    '''\n    Write a function that matches a word containing only 't' and '12'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_13(text):\n    '''\n    Write a function that matches a word containing only 't' and '13'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_14(text):\n    '''\n    Write a function that matches a word containing only 't' and '14'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_15(text):\n    '''\n    Write a function that matches a word containing only 't' and '15'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_16(text):\n    '''\n    Write a function that matches a word containing only 't' and '16'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_17(text):\n    '''\n    Write a function that matches a word containing only 't' and '17'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_18(text):\n    '''\n    Write a function that matches a word containing only 't' and '18'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_19(text):\n    '''\n    Write a function that matches a word containing only 't' and '19'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_20(text):\n    '''\n    Write a function that matches a word containing only 't' and '20'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_21(text):\n    '''\n    Write a function that matches a word containing only 't' and '21'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_22(text):\n    '''\n    Write a function that matches a word containing only 't' and '22'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_23(text):\n    '''\n    Write a function that matches a word containing only 't' and '23'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_24(text):\n    '''\n    Write a function that matches a word containing only 't' and '24'.\n    '''\n    m = re.findall(r't', text)\n    if m:\n        return True\n    else:\n        return False\n        \ndef text_match_wordt_25(text):\n    '''\n    Write a function that matches a word containing only 't' and '25'.\n    '''\n    m = re.findall(r't', tex"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Patter: [0-9]\n    num_pattern = re.compile('\\d')\n    # Verify if the string matches the pattern\n    if num_pattern.search(text):\n        return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Your code here\n    pattern = r'z\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    # Your code here\n    pattern = r'y\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordi(text):\n    '''\n    Write a function that matches a word containing 'i'.\n    '''\n    # Your code here\n    pattern = r'i\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    # Your code here\n    pattern = r'o\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    # Your code here\n    pattern = r'u\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordx(text):\n    '''\n    Write a function that matches a word containing 'x'.\n    '''\n    # Your code here\n    pattern = r'x\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordzx(text):\n    '''\n    Write a function that matches a word containing 'zx'.\n    '''\n    # Your code here\n    pattern = r'zx\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordzy(text):\n    '''\n    Write a function that matches a word containing 'zy'.\n    '''\n    # Your code here\n    pattern = r'zy\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordizy(text):\n    '''\n    Write a function that matches a word containing 'izy'.\n    '''\n    # Your code here\n    pattern = r'izy\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordzzy(text):\n    '''\n    Write a function that matches a word containing 'zyz'.\n    '''\n    # Your code here\n    pattern = r'zyz\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordzyz(text):\n    '''\n    Write a function that matches a word containing 'zyz'.\n    '''\n    # Your code here\n    pattern = r'zyz\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordzzyy(text):\n    '''\n    Write a function that matches a word containing 'zyy'.\n    '''\n    # Your code here\n    pattern = r'zyy\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordzzyy(text):\n    '''\n    Write a function that matches a word containing 'zyy'.\n    '''\n    # Your code here\n    pattern = r'zyy\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordozy(text):\n    '''\n    Write a function that matches a word containing 'zyo'.\n    '''\n    # Your code here\n    pattern = r'zyo\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_worduy(text):\n    '''\n    Write a function that matches a word containing 'uy'.\n    '''\n    # Your code here\n    pattern = r'uy\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordoy(text):\n    '''\n    Write a function that matches a word containing 'oy'.\n    '''\n    # Your code here\n    pattern = r'oy\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordoz(text):\n    '''\n    Write a function that matches a word containing 'oz'.\n    '''\n    # Your code here\n    pattern = r'oz\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordow(text):\n    '''\n    Write a function that matches a word containing 'ow'.\n    '''\n    # Your code here\n    pattern = r'ow\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordox(text):\n    '''\n    Write a function that matches a word containing 'ox'.\n    '''\n    # Your code here\n    pattern = r'ox\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordoyy(text):\n    '''\n    Write a function that matches a word containing 'oyy'.\n    '''\n    # Your code here\n    pattern = r'oyy\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordozy(text):\n    '''\n    Write a function that matches a word containing 'ozy'.\n    '''\n    # Your code here\n    pattern = r'ozy\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordowy(text):\n    '''\n    Write a function that matches a word containing 'owy'.\n    '''\n    # Your code here\n    pattern = r'owy\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordoyz(text):\n    '''\n    Write a function that matches a word containing 'oyz'.\n    '''\n    # Your code here\n    pattern = r'oyz\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordozy(text):\n    '''\n    Write a function that matches a word containing 'ozy'.\n    '''\n    # Your code here\n    pattern = r'ozy\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordoyz(text):\n    '''\n    Write a function that matches a word containing 'oyz'.\n    '''\n    # Your code here\n    pattern = r'oyz\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordoz(text):\n    '''\n    Write a function that matches a word containing 'oz'.\n    '''\n    # Your code here\n    pattern = r'oz\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordoy(text):\n    '''\n    Write a function that matches a word containing 'oy'.\n    '''\n    # Your code here\n    pattern = r'oy\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordoz(text):\n    '''\n    Write a function that matches a word containing 'oz'.\n    '''\n    # Your code here\n    pattern = r'oz\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordoy(text):\n    '''\n    Write a function that matches a word containing 'oy'.\n    '''\n    # Your code here\n    pattern = r'oy\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordoz(text):\n    '''\n    Write a function that matches a word containing 'oz'.\n    '''\n    # Your code here\n    pattern = r'oz\\w+'\n    result = re.search(pattern,text)\n    return result\ndef text_match_wordoy(text):\n    '''\n    Write a function that matches a word containing 'oy'.\n    '''\n    # Your code here\n    pattern = r'oy\\w+'\n    result = re"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\b'\n    text_to_search = re.findall(pattern, text)\n    return len(text_to_search)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return text.startswith('z')\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Create a regex\n    text = re.sub('^z|Z$', '', text)\n    # Search for the word\n    search_string = re.search(r'z\\w+', text)\n    # If there is a match\n    if search_string:\n        return search_string.group()\n    else:\n        return \"\"\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text=text.lower()\n    words=re.findall('[a-z]+',text)\n    for word in words:\n        if word=='z':\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_split = text.split()\n    matching_words = 0\n    for word in text_split:\n        if re.search(r'z', word):\n            matching_words += 1\n    print(f\"There are {matching_words} matching words\")\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # TODO: Match the 'z' word\n    # print('matched word')\n    pattern = re.compile(r'\\b(?<=z)\\w+')\n    match = pattern.search(text)\n    print(match)\n    if match!= None:\n        return match\n    else:\n        return 'Not a valid word'\ndef check_number(number):\n    '''\n    Write a function that takes a number and returns True if it is a number \n    and False if it is not.\n    '''\n    # TODO: Check if the number is a number\n    # print('matched number')\n    pattern = re.compile(r'[0-9]+')\n    match = pattern.search(str(number))\n    if match!= None:\n        return True\n    else:\n        return False\ndef text_match_number(text):\n    '''\n    Write a function that matches a number.\n    '''\n    # TODO: Match the 'z' word\n    # print('matched number')\n    pattern = re.compile(r'[0-9]+')\n    match = pattern.search(str(text))\n    if match!= None:\n        return match\n    else:\n        return 'Not a valid number'"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # set checker to be 0\n    checker = 0\n    # iterate through each month and check if it contains 31 days\n    for i in monthnum2:\n        if i == 31:\n            checker = 1\n            break\n        else:\n            checker = 0\n    return checker\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 0 or monthnum2 > 12:\n        print('Invalid month number!')\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    #If month number is 1 or not\n    if not isinstance(monthnum2, int):\n        return False\n    elif monthnum2 not in range(1,13):\n        return False\n    else:\n        #If month number is between 1 and 12\n        if monthnum2 >= 1 and monthnum2 <= 12:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2<1 or monthnum2>12:\n        return False\n    if monthnum2<11 or monthnum2>20:\n        return False\n    if monthnum2<10 or monthnum2>19:\n        return False\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    #create boolean list for monthnum2\n    monthnum2_bool = [0] * 12\n    #check if monthnum2 contains 31 days\n    if monthnum2 == 31:\n        #return True\n        return True\n    for monthnum in monthnum2:\n        if monthnum == 31:\n            #return True\n            return True\n        monthnum2_bool[monthnum] = 1\n    #return False\n    return False\n    "
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 >= 0 and monthnum2 <= 31):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 0 or monthnum2 > 12:\n        return False\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 <1 or monthnum2 > 12):\n        return \"Please enter a number between 1 and 12\"\n    else:\n        if (monthnum2 == 1):\n            if (monthnum2 == 1):\n                return \"Invalid Month\"\n            else:\n                if (monthnum2 == 2):\n                    if (monthnum2 == 1):\n                        return \"Invalid Month\"\n                    else:\n                        if (monthnum2 == 3):\n                            if (monthnum2 == 1):\n                                return \"Invalid Month\"\n                            else:\n                                if (monthnum2 == 4):\n                                    if (monthnum2 == 1):\n                                        return \"Invalid Month\"\n                                    else:\n                                        if (monthnum2 == 5):\n                                            if (monthnum2 == 1):\n                                                return \"Invalid Month\"\n                                            else:\n                                                if (monthnum2 == 6):\n                                                    if (monthnum2 == 1):\n                                                        return \"Invalid Month\"\n                                                    else:\n                                                        if (monthnum2 == 7):\n                                                            if (monthnum2 == 1):\n                                                                return \"Invalid Month\"\n                                                        else:\n                                                            if (monthnum2 == 8):\n                                                                if (monthnum2 == 1):\n                                                                    return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 9):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 10):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 11):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 12):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 1):\n                                                                    return \"Invalid Month\"\n                                                                else:\n                                                                    if (monthnum2 == 2):\n                                                                        if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 3):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 4):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 5):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 6):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 7):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 8):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 9):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 10):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 11):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 12):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 1):\n                                                                    return \"Invalid Month\"\n                                                                else:\n                                                                    if (monthnum2 == 2):\n                                                                        if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 3):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 4):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 5):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 6):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 7):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 8):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 9):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 10):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 11):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 12):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 1):\n                                                                    return \"Invalid Month\"\n                                                                else:\n                                                                    if (monthnum2 == 2):\n                                                                        if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 3):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 4):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 5):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 6):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 7):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 8):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 9):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 10):\n                                                                    if (monthnum2 == 1):\n                                                                        return \"Invalid Month\"\n                                                            else:\n                                                                if (monthnum2 == 11):\n                                                                    i"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[i][::-1] for i in range(len(stringlist))]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if stringlist == []:\n        return []\n    return list(reversed(stringlist))\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    output = []\n    for x in stringlist:\n        output.append(x[::-1])\n    return output\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    def reverse_string(stringlist):\n        return stringlist[::-1]\n    return reverse_string(stringlist)\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for x in stringlist:\n        print(x)\n    stringlist.reverse()\n    print(stringlist)\n    return\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    lst = []\n    for i in range(len(stringlist)):\n        lst.append(stringlist[i][::-1])\n    return lst\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_string = ''\n    for i in stringlist:\n        reverse_string += i\n    print(reverse_string)\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(0, len(stringlist)):\n        stringlist[i] = stringlist[i].replace(\" \", \"\")\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # creating two empty lists \n    l = [] \n    k = [] \n    # iterating through the list\n    for i in lst: \n        # appending that number to empty list \n        l.append(i)\n    # iterating through the list\n    for j in l:\n        # appending the next number to k \n        k.append(j)\n    # printing the list \n    print(l)\n    print(k)\n    return l, k\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1,len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    print(\"Sublist having Minimum Length: \")\n    minLength = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < minLength:\n            minLength = lst[i]\n    print(minLength)\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #Initialize the min and max values\n    min = 0\n    max = len(lst)-1\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst)\n    min_ind = 0\n    for i in range(len(lst)):\n        if lst[i]<=min and min_ind==0:\n            min_ind = i\n        elif lst[i]<min and min_ind!=0:\n            min = lst[i]\n            min_ind = i\n    if min_ind == 0:\n        print(\"The list has only one element\")\n    else:\n        print(lst[min_ind])\n    return min_ind\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = []\n    m = []\n    l = lst\n    for i in range(0, len(l)):\n        for j in range(0, len(l)):\n            if len(l[i]) < len(l[j]):\n                l[i], l[j] = l[j], l[i]\n    for i in l:\n        if len(i) < len(m):\n            m = i\n    return m\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # iterating through the list in ascending order \n    # and using the len function to find out the length\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i] == lst[j]:\n                return i\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if not lst:\n        return None\n    min_lst = lst[:]\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i] < lst[j]:\n                min_lst[i] = min(lst[i], lst[j])\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(0,len(lst)):\n        for j in range(i,len(lst)):\n            if lst[j] < lst[i]:\n                lst[j],lst[i] = lst[i],lst[j]\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    res = []\n    for i in lst:\n        if len(i) < len(res):\n            res = i\n    return res\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    \n    '''\n    find area of a rectangle given two coordinates (x1,y1,x2,y2)\n    '''\n    #pass\n    \n    area=l*b\n    return area\n    #pass\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = l * b\n    return a\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    p = 2 * l + 2 * b\n    return p\ndef square_area(l,b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    a = l * l\n    return a\ndef square_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    p = 4 * l\n    return p\ndef triangle_area(l,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    a = (b * l) / 2\n    return a\ndef triangle_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    p = ((b * 2) + (b * l)) / 2\n    return p\ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a = l * b\n    return a\ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2\n    return p\ndef parallelogram_perimeter_rec(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2 + (b * 2)\n    return p\ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a = (l * b)\n    return a\ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2\n    return p\ndef parallelogram_perimeter_rec(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2 + (b * 2)\n    return p\ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a = l * b\n    return a\ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2\n    return p\ndef parallelogram_perimeter_rec(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2 + (b * 2)\n    return p\ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a = l * b\n    return a\ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2\n    return p\ndef parallelogram_perimeter_rec(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2 + (b * 2)\n    return p\ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a = l * b\n    return a\ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2\n    return p\ndef parallelogram_perimeter_rec(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2 + (b * 2)\n    return p\ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a = l * b\n    return a\ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2\n    return p\ndef parallelogram_perimeter_rec(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2 + (b * 2)\n    return p\ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a = l * b\n    return a\ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2\n    return p\ndef parallelogram_perimeter_rec(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2 + (b * 2)\n    return p\ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a = l * b\n    return a\ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2\n    return p\ndef parallelogram_perimeter_rec(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2 + (b * 2)\n    return p\ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a = l * b\n    return a\ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2\n    return p\ndef parallelogram_perimeter_rec(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2 + (b * 2)\n    return p\ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a = l * b\n    return a\ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2\n    return p\ndef parallelogram_perimeter_rec(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2 + (b * 2)\n    return p\ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a = l * b\n    return a\ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2\n    return p\ndef parallelogram_perimeter_rec(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2 + (b * 2)\n    return p\ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a = l * b\n    return a\ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2\n    return p\ndef parallelogram_perimeter_rec(l,b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    p = l * 2 + (b * 2)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a=l*b\n    return a\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # your code here\n    \n    ans=''\n    for i in range(len(str1)):\n        if(str1[i].isupper()):\n            ans=ans+str1[i]\n            str1=str1[:i] + str1[i+1:]\n    return ans\ndef remove_letters(str1):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    # your code here\n    \n    ans=''\n    for i in range(len(str1)):\n        if(str1[i] in 'abcdefghijklmnopqrstuvwxyz'):\n            ans=ans+str1[i]\n            str1=str1[:i] + str1[i+1:]\n    return ans\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    # your code here\n    \n    ans=''\n    for i in range(len(str1)):\n        if(str1[i] in '!\\\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~'):\n            ans=ans+str1[i]\n            str1=str1[:i] + str1[i+1:]\n    return ans\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    # your code here\n    \n    ans=''\n    for i in range(len(str1)):\n        if(str1[i] in '.,-!?;:'):\n            ans=ans+str1[i]\n            str1=str1[:i] + str1[i+1:]\n    return ans\ndef remove_numbers(str1):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    # your code here\n    \n    ans=''\n    for i in range(len(str1)):\n        if(str1[i].isdigit()):\n            ans=ans+str1[i]\n            str1=str1[:i] + str1[i+1:]\n    return ans\ndef remove_exclamation_marks(str1):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    # your code here\n    \n    ans=''\n    for i in range(len(str1)):\n        if(str1[i]=='!'):\n            ans=ans+str1[i]\n            str1=str1[:i] + str1[i+1:]\n    return ans\ndef remove_punctuation_and_whitespace(str1):\n    '''\n    Write a function to remove specific characters from a given string.\n    '''\n    # your code here\n    \n    ans=''\n    for i in range(len(str1)):\n        if(str1[i] in'' or str1[i] in '!\\\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~'):\n            ans=ans+str1[i]\n            str1=str1[:i] + str1[i+1:]\n    return ans\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # str1 = 'I like to eat sushi'\n    return str1.replace(' ','')\ndef remove_letters(str1):\n    '''\n    Write a function to remove letters from a given string.\n    '''\n    return str1.replace('l','').replace('r','').replace('s','').replace('e','').replace('t','').replace('c','')\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.replace('!','').replace('?','').replace('.','').replace('-','').replace(',','').replace(';','').replace(':','').replace('\"','').replace('\\'','').replace('&','').replace('*','').replace('%','').replace('+','').replace('=','').replace('^','').replace('~','').replace('_','').replace('`','').replace('(','').replace(')','').replace('{','').replace('}','').replace('#','').replace('$','').replace('@','').replace('&','').replace('*','').replace('%','').replace('+','').replace('=','')\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    def get_uppercase(str1):\n        '''\n        Return a list of all uppercase substring in the given string.\n        '''\n        str1 = str1.lower()\n        pattern = \"[a-z]'s?|[a-z]'?\"\n        str1_re = re.sub(pattern, \"\", str1)\n        str1_re = str1_re.split()\n        return str1_re\n    return get_uppercase(str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    substring = str1.split(\" \")\n    final_string = \"\"\n    for i in range(len(substring)):\n        for j in range(len(substring[i])):\n            if substring[i][j] == \"A\":\n                substring[i][j] = \"A\"\n            elif substring[i][j] == \"E\":\n                substring[i][j] = \"E\"\n            elif substring[i][j] == \"I\":\n                substring[i][j] = \"I\"\n            elif substring[i][j] == \"O\":\n                substring[i][j] = \"O\"\n            elif substring[i][j] == \"U\":\n                substring[i][j] = \"U\"\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[A-Z]', '', str1)\n    str3 = re.sub(r'\\W', '', str2)\n    str4 = re.sub(r'\\s', '', str3)\n    return str4\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'(.)\\1+', r'\\1', str1).lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    def remove_uppercase_sub(str2):\n        '''\n        Write a function to remove uppercase substrings from a given string.\n        '''\n        #find all uppercase characters\n        uppercase_characters = re.findall(r'[A-Z]', str2)\n        #filter out the uppercase characters\n        filter_str = ''.join([x for x in uppercase_characters if x not in uppercase_characters])\n        #join all uppercase characters\n        join_str = ''.join(filter_str)\n        #format string and return\n        format_str = f'{str2.upper()}'\n        return format_str\n    #find all non-uppercase characters\n    non_uppercase_characters = re.findall(r'[a-zA-Z]', str1)\n    #filter out the non-uppercase characters\n    filter_str = ''.join([x for x in non_uppercase_characters if x not in non_uppercase_characters])\n    #join all non-uppercase characters\n    join_str = ''.join(filter_str)\n    #format string and return\n    format_str = f'{str1.upper()}'\n    return format_str\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    #find all special characters\n    special_characters = re.findall(r'[^\\w\\s]+', str1)\n    #filter out all special characters\n    filter_str = ''.join([x for x in special_characters if x not in special_characters])\n    #join all characters\n    join_str = ''.join(filter_str)\n    #format string and return\n    format_str = f'{str1}'\n    return format_str\ndef remove_space_characters(str1):\n    '''\n    Write a function to remove space characters from a given string.\n    '''\n    #find all space characters\n    space_characters = re.findall(r'\\s+', str1)\n    #filter out all space characters\n    filter_str = ''.join([x for x in space_characters if x not in space_characters])\n    #join all characters\n    join_str = ''.join(filter_str)\n    #format string and return\n    format_str = f'{str1}'\n    return format_str\ndef remove_stop_word(str1):\n    '''\n    Write a function to remove stop word characters from a given string.\n    '''\n    #find all stop word characters\n    stop_word = re.findall(r'\\b[a-zA-Z]+\\b', str1)\n    #filter out all stop word characters\n    filter_str = ''.join([x for x in stop_word if x not in stop_word])\n    #join all characters\n    join_str = ''.join(filter_str)\n    #format string and return\n    format_str = f'{str1}'\n    return format_str\ndef remove_lower_case(str1):\n    '''\n    Write a function to remove lower case characters from a given string.\n    '''\n    #find all lower case characters\n    lower_case_characters = re.findall(r'[a-z]+', str1)\n    #filter out all lower case characters\n    filter_str = ''.join([x for x in lower_case_characters if x not in lower_case_characters])\n    #join all characters\n    join_str = ''.join(filter_str)\n    #format string and return\n    format_str = f'{str1.lower()}'\n    return format_str\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    #find all punctuation characters\n    punctuation_characters = re.findall(r'[^\\w\\s]+', str1)\n    #filter out all punctuation characters\n    filter_str = ''.join([x for x in punctuation_characters if x not in punctuation_characters])\n    #join all characters\n    join_str = ''.join(filter_str)\n    #format string and return\n    format_str = f'{str1}'\n    return format_str\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    #find all numbers\n    numbers = re.findall(r'\\d', str1)\n    #filter out all numbers\n    filter_str = ''.join([x for x in numbers if x not in numbers])\n    #join all characters\n    join_str = ''.join(filter_str)\n    #format string and return\n    format_str = f'{str1}'\n    return format_str\ndef remove_empty(str1):\n    '''\n    Write a function to remove empty strings from a given string.\n    '''\n    #find all empty strings\n    empty_strings = re.findall(r'\\s+', str1)\n    #filter out all empty strings\n    filter_str = ''.join([x for x in empty_strings if x not in empty_strings])\n    #join all characters\n    join_str = ''.join(filter_str)\n    #format string and return\n    format_str = f'{str1}'\n    return format_str\ndef remove_indent(str1):\n    '''\n    Write a function to remove indentation characters from a given string.\n    '''\n    #find all indentation characters\n    indentation_characters = re.findall(r'[^\\s]', str1)\n    #filter out all indentation characters\n    filter_str = ''.join([x for x in indentation_characters if x not in indentation_characters])\n    #join all characters\n    join_str = ''.join(filter_str)\n    #format string and return\n    format_str = f'{str1}'\n    return format_str\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    #find all punctuation characters\n    punctuation_characters = re.findall(r'[^\\w\\s]+', str1)\n    #filter out all punctuation characters\n    filter_str = ''.join([x for x in punctuation_characters if x not in punctuation_characters])\n    #join all characters\n    join_str = ''.join(filter_str)\n    #format string and return\n    format_str = f'{str1}'\n    return format_str\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    #find all digits\n    digits = re.findall(r'[0-9]+', str1)\n    #filter out all digits\n    filter_str = ''.join([x for x in digits if x not in digits])\n    #join all characters\n    join_str = ''.join(filter_str)\n    #format string and return\n    format_str = f'{str1}'\n    return format_str\ndef remove_word_characters(str1):\n    '''\n    Write a function to remove word characters from a given string.\n    '''\n    #find all word characters\n    word_characters = re.findall(r'[^a-zA-Z0-9]+', str1)\n    #filter out all word characters\n    filter_str = ''.join([x for x in word_characters if x not in word_characters])\n    #join all characters\n    join_str = ''.join(filter_str)\n    #format string and return\n    format_str = f'{str1}'\n    return format_str\ndef remove_stop_words(str1):\n    '''\n    Write a function to remove stop words from a given string.\n    '''\n    #find all stop words\n    stop_words = re.findall(r'\\b[a-zA-Z0-9]+\\b', str1)\n    #filter out all stop words\n    filter_str = ''.join([x for x in stop_words if x not i"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # https://stackoverflow.com/questions/12165455/python-remove-multiple-uppercase-characters-from-a-string\n    result = str1.translate(str.maketrans({'\u00e1':'a','\u1ea7':'c','\u1ea9':'d','\u1eab':'e','\u1ead':'f','\u1eaf':'g','\u1eb1':'h','\u1eb3':'i','\u1eb5':'j','\u1eb7':'k','\u1eb9':'l','\u1ebb':'m','\u1ebd':'n','\u1ebe':'o','\u1ebf':'p','\u1ec0':'r','\u1ec1':'s','\u1ec3':'t','\u1ec5':'u','\u1ec7':'v','\u1ec9':'w','\u1ecb':'x','\u1ecb':'y','\u1ecd':'z','\u1ecf':'z','\u1ed0':'z','\u1ed1':'z','\u1ed2':'z','\u1ed3':'z','\u1ed5':'z','\u1ed7':'z','\u1ed9':'z','\u1eda':'z','\u1edb':'z','\u1edd':'z','\u1ede':'z','\u1edf':'z','\u1ee0':'z','\u1ee1':'z','\u1ee3':'z','\u1ee4':'z','\u1ee5':'z','\u1ee7':'z','\u1ee9':'z','\u1eeb':'z','\u1eec':'z','\u1eed':'z','\u1eef':'z','\u1ef1':'z','\u1ef2':'z','\u1ef3':'z','\u1ef7':'z','\u1ef9':'z','\u1efa':'z','\u1efb':'z','\u1efc':'z','\u1efd':'z','\u1efe':'z','\u1eff':'z'})\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"[A-Z]\", \"\", str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    # create a regex for the string\n    pattern = re.compile(r'(.)\\1{2,}')\n    # iterate through the string\n    for char in str1:\n        if char.isupper():\n            # if the char is uppercase then replace it with a single uppercase\n            new_char = char.lower()\n            # update the new_char\n            new_char = pattern.sub('', new_char)\n            # update the string with the updated char\n            str1 = str1.replace(char, new_char)\n            # if the char is uppercase, then also delete the char\n            if char.isupper():\n                str1 = str1.replace(char, '')\n            # if the char is not uppercase, delete it\n        else:\n            # if the char is not uppercase, replace it with a single uppercase\n            new_char = char.upper()\n            # update the new_char\n            new_char = pattern.sub('', new_char)\n            # update the string with the new char\n            str1 = str1.replace(char, new_char)\n            # if the char is not uppercase, delete it\n    # if there are no uppercase characters, remove the string\n    if not str1.isupper():\n        str1 = str1.replace(' ', '')\n    return str1\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    count = 0 \n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            count = count + 1\n            lst[i][j] = lst[i][j].lower()\n    return count\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def Extract_First(lst):\n        '''\n        Finds the first element of each sublist, \n        returns a list of all the elements.\n        '''\n        return [lst[0]]\n    lst = Extract_First(lst)\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(0,len(lst)): \n        for j in range(0,len(lst)): \n            if lst[i][j] > lst[i][0]: \n                lst[i],lst[j] = lst[j],lst[i] \n    return lst \n    \ndef main(): \n    '''\n    lst = [ [1, 2, 5], [2, 3, 4], [4, 3, 2] ] \n    lst = [ [1, 2, 3], [3, 2, 1] ] \n    lst = [ [1, 2, 3, 4], [1, 2, 3, 4] ] \n    lst = [ [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4] ] \n    lst = [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ] \n    '''\n    lst = [[1, 2, 5], [2, 3, 4], [4, 3, 2] ] \n    print(\"The first element of each sublist: \")\n    print(Extract(lst)) \n    \nif __name__ == '__main__': \n    main() "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sublst = []\n    for i in lst: \n        sublst.append(i[0])\n    return sublst\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    list_elem = list()\n    for i in lst:\n        list_elem.append(i[0])\n    return list_elem\n    \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    #print(lst)\n    return lst[0] \n    \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Initialize output variable\n    output = []\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Iterate through each of the lists\n    for l in lst:\n        # Find the first element of the list\n        first = l[0]\n        # Assign it to the variable\n        first_elem = first\n        # Iterate through the sublists\n        for i in range(1, len(l)):\n            # If the current element of the list is greater than the next one\n            if l[i] > first_elem:\n                # Update the first element of the list to be the new one\n                first_elem = l[i]\n            # Else if the current element of the list is less than the next one\n            elif l[i] < first_elem:\n                # Update the first element of the list to be the new one\n                first_elem = l[i]\n        # Append the new first element of the list to the end of the list\n        l.append(first_elem)\n    # Return the list\n    return l\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    # TODO: Complete this function\n    count = 0\n    if str!= '':\n        for c in str:\n            if c.isupper():\n                count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count('U')\nprint(upper_ctr('Harika'))"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter=0\n    for char in str:\n        if char.isupper():\n            counter+=1\n    return counter\ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if str==str[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ans = 0\n    for i in str:\n        if i.isupper():\n            ans += 1\n    return ans\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isupper():\n            count += 1\n    return count\n    \n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.islower():\n            count += 1\n    return count\n    \n    \ndef start(str):\n    '''\n    Write a python function to print the first 3 letters of a given string.\n    '''\n    count = str[0:3]\n    return count\n    \n    \ndef end(str):\n    '''\n    Write a python function to print the last 3 letters of a given string.\n    '''\n    count = str[-3:]\n    return count\n    \n    \ndef middle(str):\n    '''\n    Write a python function to print the middle 3 letters of a given string.\n    '''\n    count = str[-3:len(str)//2]\n    return count\n    \n    \ndef start_end(str):\n    '''\n    Write a python function to print the first 3 letters of a given string starting and ending with a given suffix.\n    '''\n    count = str[0:3] + str[-3:]\n    return count\n    \n    \ndef start_end_with(str):\n    '''\n    Write a python function to print the first 3 letters of a given string starting and ending with a given suffix and printing the result.\n    '''\n    count = str[0:3] + str[-3:] + str[-3:]\n    return count\n    \n    \ndef middle_with(str):\n    '''\n    Write a python function to print the middle 3 letters of a given string.\n    '''\n    count = str[-3:len(str)//2]\n    return count\n    \n    \ndef main():\n    print('TESTS:')\n    print(upper_ctr('Hello world'))\n    print(lower_ctr('Hello world'))\n    print(middle('Hello world'))\n    print(start('Hello world'))\n    print(end('Hello world'))\n    print(middle_with('Hello world'))\n    print(start_end('Hello world'))\n    print(start_end_with('Hello world'))\n    print(middle_with('Hello world'))\n    print('Success')\n    \n    \nmain()"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n    \n    \ndef main():\n    str = input(\"Enter a string: \")\n    print(\"Counting upper case characters: \", upper_ctr(str))\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    str = str.upper()\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return (str.upper())\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    str_upper = str.upper()\n    for i in str_upper:\n        if i == i:\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list = []\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    combinations = []\n    for element in list1:\n        if element not in result:\n            result.append(element)\n    for i in range(1, len(result)+1):\n        if len(result) == i:\n            combinations.append(result)\n        elif i % 2 == 0:\n            if i not in result:\n                result.append(i)\n        else:\n            if i not in result:\n                result.append(i)\n            else:\n                result.append(result[-1]+result[-2])\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            comb_list.append(list1[i] + list1[j])\n    return comb_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1 == []:\n        return []\n    elif len(list1) == 1:\n        return list1\n    else:\n        return list1[0] + combinations_list(list1[1:])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return [list1[i:]+list1[:i] for i in range(len(list1))]\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n=len(list1)\n    combinations=[]\n    for i in range(n):\n        for j in range(n-i):\n            temp=list1[i:j+1]\n            if len(temp)==n and len(temp)>0:\n                combinations.append(temp)\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    all_combos = []\n    \n    if len(list1) == 1:\n        all_combos.append(list1[0])\n        return all_combos\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    from itertools import combinations\n    \n    result = []\n    for item in list1:\n        result.extend(list(combinations(item, len(item))))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # looping through all possible combinations\n    for i in range(1,len(list1)+1):\n        temp = list1[:i]+list1[i:i+1]\n        if(temp not in list1):\n            return temp\n    # print(temp)\n    \n    return list1\n    \ndef unique(array):\n    '''\n    Write a function to return the first index of an array with a duplicate value.\n    '''\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            if(array[i]==array[j]):\n                return i\n    return -1\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combo_list = []\n    for i in range(len(list1)):\n        for j in range(len(list1)-1):\n            combo_list.append([list1[i],list1[j]])\n    combo_list.sort()\n    print(combo_list)\n    return combo_list\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0],arr[1])\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 1:\n        return arr\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Write your code here.\n    if not arr or len(arr) < 2:\n        return 0\n    max_product_subarray = 1\n    left, right = 0, 0\n    for i in range(len(arr)):\n        left += arr[i]\n        max_product_subarray = max(max_product_subarray, left*arr[i])\n        right = max(right, arr[i] * arr[i])\n    return max_product_subarray\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    arr_len = len(arr)\n    max_product = 1\n    min_product = 1\n    result = []\n    for i in range(arr_len):\n        min_product = max(min_product, arr[i])\n        max_product = max(max_product, arr[i]*min_product)\n        result.append(max_product)\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Using a recuririon (at most 2 passes)\n    # to calculate the product of the subarray\n    def subarray_product(left, right):\n        # if the left and right have both been empty\n        # we will return the maximum product as 0\n        if left == 0 and right == 0:\n            return 0\n        # if the left and right have at least one element,\n        # then we will return the product of the\n        # left and right subarray\n        if left!= 0 or right!= 0:\n            return max(left * right, subarray_product(left-1, right))\n        else:\n            return 0\n    # return the product of the subarray\n    return subarray_product(arr[0], arr[1])\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 1\n    \n    for i in range(len(arr) - 1):\n        left = arr[i]\n        right = arr[i + 1]\n        \n        if left == 0 and right == 0:\n            continue\n        \n        product = left * right\n        if product > max_product:\n            max_product = product\n            \n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product_subarray = 1\n    max_product_subarray_list = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product_subarray:\n                max_product_subarray = product\n                max_product_subarray_list = [i, j]\n    return max_product_subarray, max_product_subarray_list\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    maximum = 1\n    current_sum = 1\n    for i in range(len(arr)):\n        current_sum = arr[i]\n        for j in range(i, len(arr)):\n            current_sum += arr[j]\n            if current_sum > maximum:\n                maximum = current_sum\n        if maximum > 0:\n            current_sum = 1\n    return maximum\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def product(arr):\n        '''\n        Computes the product of all subarrays of the given array,\n        but without multiplying.\n        '''\n        product = 1\n        for i in range(len(arr)):\n            product *= arr[i]\n        return product\n    \n    max_product = -100000\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = product(arr[i:j+1])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #init max array\n    max_arr = []\n    max_sum = 0\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # write your code here\n    for value in dict:\n        if value!= n:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k in dict.keys():\n        if k in dict.values():\n            if dict[k]!= n:\n                print(\"Error: Value not found in dictionary!\")\n                return False\n        else:\n            print(\"Error: Value not found in dictionary!\")\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.keys():\n        if i!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if type(dict[i])!= type(0):\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if type(n) == dict:\n        for key in n.keys():\n            if n[key]!= dict[key]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for v in dict:\n        if v!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check_dict = {}\n    for i in dict:\n        for j in range(n):\n            check_dict[i] = dict[i][j]\n    return True if all(check_dict.values()) else False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(x == dict[x] for x in dict.keys())\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    else:\n        for x in dict:\n            if x not in n:\n                return False\n            elif dict[x] not in n:\n                return False\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if dict[i]!= dict[n-i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1) > 0:\n        for key in dict1:\n            if dict1[key] == []:\n                del dict1[key]\n        return dict1\n    else:\n        return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.clear()\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1.values():\n        if item == \"\":\n            dict1.pop(item)\n            print(f\"The {item} was dropped from the dictionary\")\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k,v in dict1.items():\n        if not v:\n            dict1.pop(k)\n            print(k,v)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1.copy()\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # your code here\n    for key in dict1.keys():\n        if(len(dict1[key])==0):\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1)==0:\n        return dict1\n    else:\n        return {key:value for key,value in dict1.items() if value!=''}\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if len(value)!= 0:\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1) == 0:\n        return None\n    return dict1.popitem()\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        subseq = []\n        max_product_recursive(arr, subseq, 0, len(arr)-1)\n        return max(subseq)\n        \ndef max_product_recursive(arr, subseq, start, end):\n    if start == end:\n        return arr[start]\n    if start == 0 or end == 0:\n        return 0\n    elif start > end:\n        return 0\n    else:\n        max_product_recursive(arr, subseq, start, end-1)\n        max_product_recursive(arr, subseq, start+1, end)\n        subseq.append(arr[start])\n        subseq.append(arr[end])\n        return max(subseq)\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # s = []\n    # for i in arr:\n    #     if i not in s:\n    #         s.append(i)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_p = 0\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = res * arr[i]\n        max_p = max(res, max_p)\n    return max_p\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    N = len(arr)\n    if N==1:\n        return arr[0]\n    elif N==2:\n        return arr[0]*arr[1]\n    elif N==3:\n        return arr[0]*arr[1]*arr[2]\n    else:\n        start=0\n        end=N-1\n        while start<end:\n            mid=start+((end-start)/2)\n            if arr[mid]>arr[mid+1]:\n                end=mid\n            else:\n                start=mid+1\n        return arr[start]*arr[end"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr=sorted(arr)\n    for i in range(1,len(arr)):\n        arr[i]=arr[i-1]*arr[i]\n    max_product=arr[0]\n    for i in range(1,len(arr)):\n        max_product=max(arr[i],max_product)\n    return max_product\ndef unique_letters(string):\n    '''\n    Write a function that returns the number of unique letters in a given string.\n    '''\n    return len(set(string))\ndef unique_consecutive_digits(string):\n    '''\n    Write a function that returns the number of consecutive digits of a string.\n    '''\n    return len(set(string))\ndef flatten(list):\n    '''\n    Write a function that returns a list with all the elements of the list flattened into a single list.\n    '''\n    result=[]\n    for i in list:\n        result=result+list(i)\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    print(arr)\n    if len(arr) == 1:\n        return arr[0]\n    \n    p1, p2 = 1, arr[0]\n    for i in range(1, len(arr)):\n        p1 = arr[i]\n        p2 = max(arr[i-1]*p1, arr[i]*p2)\n        # print(p1, p2)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        first_subsequence = []\n        first_subsequence.append(arr[0])\n        for i in range(len(arr)):\n            first_subsequence.append(arr[i]*arr[i])\n        return max(first_subsequence)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        mid = len(arr)//2\n        return max(max_product(arr[:mid]), max_product(arr[mid:])) * arr[mid]\n    \n    \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_product(arr))\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        max_product = arr[0]\n        for i in range(1, len(arr)):\n            temp = arr[i]\n            #max = max(temp, max(arr[i - 1] * temp, arr[i - 1]))\n            max_product = max(max_product, temp * max(arr[i - 1] * temp, arr[i - 1]))\n        return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return arr[0]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    first_element = test_tup[0]\n    second_element = test_tup[1]\n    \n    if first_element == second_element:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # create a tuple\n    test_tup = (tuple(test_tup),)\n    # determine the distance of the tuple\n    distance = max(abs(test_tup[1][0] - test_tup[0][0]), abs(test_tup[1][1] - test_tup[0][1]))\n    # if the distance is 1, add the values to the tuple\n    if distance == 1:\n        test_tup = (test_tup)\n    # otherwise, iterate through the tuples\n    else:\n        # if the tuples have been already considered, then return\n        if not test_tup:\n            return test_tup\n        # iterate through the tuples\n        for i in range(1, len(test_tup)):\n            # if the tuples have been already considered, then return\n            if not test_tup[i]:\n                return test_tup\n            # iterate through the tuples\n            # in the first tuples, the first element\n            # is added to the second element\n            # and vice versa\n            elif test_tup[i][0] < test_tup[i][1]:\n                test_tup[i] = (test_tup[i][0] + test_tup[i][1], test_tup[i][1])\n            else:\n                test_tup[i] = (test_tup[i][1] + test_tup[i][0], test_tup[i][0])\n    # return the tuple\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print('Starting addition')\n    for x in range(0,len(test_tup)-1):\n        print('The sum of the adjacent element is:',(test_tup[x]+test_tup[x+1]))\n    print('The sum of the adjacent element is:',(test_tup[len(test_tup)-1]+test_tup[0]))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    lst = test_tup\n    lst.sort()\n    i = 0\n    while i < len(lst) - 1:\n        if (lst[i+1] - lst[i]) <= lst[i] - lst[i+1]:\n            i += 1\n        else:\n            i += 2\n    return lst[i+1] - lst[i]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise = 0\n    for i in range(len(test_tup)-1):\n        pairwise += test_tup[i]\n    return pairwise\n    \ndef add_pairwise_with_ties(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple with ties.\n    '''\n    pairwise = 0\n    for i in range(len(test_tup)-1):\n        pairwise += (test_tup[i] + test_tup[i+1])/2\n    return pairwise\n    \ndef create_pairs(arr):\n    '''\n    Write a function to find the number of pairs and returns them.\n    '''\n    n = len(arr)\n    pairs = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            pairs += (arr[i] + arr[j])\n    return pairs\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # TODO: Your code here\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) > 1:\n        return (sum(test_tup[i+1] for i in range(len(test_tup)-1)), sum(test_tup[i] for i in range(1,len(test_tup))))\n    else:\n        return test_tup[0]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # For every element of arr\n    for i in range(n):\n        # For every element of the list of n\n        for j in range(len(arr)):\n            # Check if the current value of the element is 0\n            if arr[j] == 0:\n                # If it is, return the product of the remainder\n                # and the current element\n                return arr[j] % n\n    return arr[-1]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    i = n\n    res = 1\n    for j in range(1, i+1): \n        res = res * j \n    return res \n  \n  \ndef run_program(arr): \n    # The first line of the program has the program's name \n    print(f\"Hello, I'm {program_name}. I'm your personal code. \\nYou'll be given 5 questions to find the product of the array multiplication modulo n. \\n\\n{str(arr)}\") \n  \n    # The next line of the program has a while loop that outputs the question\n    # and then terminates the loop. \n    while True: \n  \n        # The next line of the program has a while loop that prints out a message \n        # to the user saying \"Enter 'y' to start a new question or 'q' to quit.\" \n        # The user can only enter 'y' or 'q' \n        # If 'q' is entered, then the program will print out a message saying \"I will quit.\" \n        # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n  \n        # The next line of the program has a while loop that prints out the question \n        # followed by the question and then terminates the loop. \n        # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n        # This if statement will keep repeating until the user enters 'y' or 'q'. \n        while True: \n  \n            # The next line of the program has a while loop that prints out a message \n            # to the user saying \"Enter 'y' to start a new question or 'q' to quit.\" \n            # The user can only enter 'y' or 'q' \n            # If 'q' is entered, then the program will print out a message saying \"I will quit.\" \n            # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n            question = input(f\"Enter 'y' to start a new question or 'q' to quit: \") \n            if question == \"q\": \n                print(\"See you later!\") \n                break \n            elif question == \"y\": \n                continue\n            else: \n                print(\"That's an invalid option.\") \n                break \n  \n        # The next line of the program has a while loop that prints out the question \n        # followed by the question and then terminates the loop. \n        # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n        while True: \n          # The next line of the program has a while loop that prints out the question \n          # followed by the question and then terminates the loop. \n          # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n          # This if statement will keep repeating until the user enters 'y' or 'q'. \n          question = input(f\"Enter 'y' to start a new question or 'q' to quit: \") \n          if question == \"q\": \n            print(\"See you later!\") \n            break \n          elif question == \"y\": \n            continue\n          else: \n            print(\"That's an invalid option.\") \n            break \n  \n        # The next line of the program has a while loop that prints out the question \n        # followed by the question and then terminates the loop. \n        # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n        while True: \n          # The next line of the program has a while loop that prints out the question \n          # followed by the question and then terminates the loop. \n          # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n          # This if statement will keep repeating until the user enters 'y' or 'q'. \n          question = input(f\"Enter 'y' to start a new question or 'q' to quit: \") \n          if question == \"q\": \n            print(\"See you later!\") \n            break \n          elif question == \"y\": \n            continue\n          else: \n            print(\"That's an invalid option.\") \n            break \n  \n        # The next line of the program has a while loop that prints out the question \n        # followed by the question and then terminates the loop. \n        # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n        while True: \n          # The next line of the program has a while loop that prints out the question \n          # followed by the question and then terminates the loop. \n          # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n          # This if statement will keep repeating until the user enters 'y' or 'q'. \n          question = input(f\"Enter 'y' to start a new question or 'q' to quit: \") \n          if question == \"q\": \n            print(\"See you later!\") \n            break \n          elif question == \"y\": \n            continue\n          else: \n            print(\"That's an invalid option.\") \n            break \n  \n        # The next line of the program has a while loop that prints out the question \n        # followed by the question and then terminates the loop. \n        # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n        while True: \n          # The next line of the program has a while loop that prints out the question \n          # followed by the question and then terminates the loop. \n          # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n          # This if statement will keep repeating until the user enters 'y' or 'q'. \n          question = input(f\"Enter 'y' to start a new question or 'q' to quit: \") \n          if question == \"q\": \n            print(\"See you later!\") \n            break \n          elif question == \"y\": \n            continue\n          else: \n            print(\"That's an invalid option.\") \n            break \n  \n        # The next line of the program has a while loop that prints out the question \n        # followed by the question and then terminates the loop. \n        # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n        while True: \n          # The next line of the program has a while loop that prints out the question \n          # followed by the question and then terminates the loop. \n          # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n          # This if statement will keep repeating until the user enters 'y' or 'q'. \n          question = input(f\"Enter 'y' to start a new question or 'q' to quit: \") \n          if question == \"q\": \n            print(\"See you later!\") \n            break \n          elif question == \"y\": \n            continue\n          else: \n            print(\"That's an invalid option.\") \n            break \n  \n        # The next line of the program has a while loop that prints out the question \n        # followed by the question and then terminates the loop. \n        # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n        while True: \n          # The next line of the program has a while loop that prints out the question \n          # followed by the question and then terminates the loop. \n          # If the user enters anything other than 'y' or 'q', then the program will print out a message saying \"That's an invalid option.\" \n          question = input(f\"Enter 'y' to start a new question or 'q' to quit: \") \n          if question == \"q\": \n            print(\"See you later!\") \n            break "
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product % 10\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # write your code here\n    if n==1:\n        return arr[0]\n    m=arr[0]\n    for i in range(1,n):\n        m=m*arr[i]\n    return m\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    ans = 1\n    # find modulo \n    for i in range(n): \n        ans = ans * arr[i] \n    return ans"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in range(n):\n        res *= arr[i]\n    return res\n    \ndef main():\n    n = int(input(\"Enter the size of array : \"))\n    arr = [int(i) for i in input().strip().split()]\n    modulo = n % len(arr)\n    res = find_remainder(arr, modulo)\n    print(f'The product of {n} numbers is {res}')\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    for i in range(n):\n        arr[i] = arr[i] * arr[i % n]\n    return arr\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 0:\n        return 0\n    return arr[n - 1] % arr[n - 1]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    remainder = 0\n    \n    for i in range(1, len(arr)): \n        remainder = arr[i] * remainder\n    return remainder % n \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return arr * n % len(arr)\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while(i < len(l)): \n        if (l[i] == l[i+1]): \n            print(l[i],\" and \", l[i+1]) \n            i+=2\n        else: \n            print(l[i]) \n            i+=1\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # use for loop to find the number that is in the first index of the list.\n    for x in range(0, len(l) - 1):\n        if l[x] == l[x + 1] and l[x] == l[x + 2]:\n            pass\n        else:\n            return False\n    return True\ndef main():\n    '''\n    Read the user's input and call the functions that check whether the list contains consecutive numbers or not.\n    '''\n    l1 = list(map(int, input('Enter a list of numbers: ').split()))\n    print(check_Consecutive(l1))\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = 0\n    for i in l: \n        if i > n:\n            n = i\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l[0] == l[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = []\n    for i in l:\n        if i not in consecutive:\n            consecutive.append(i)\n        else:\n            if consecutive.count(i) > 1:\n                return False\n            elif consecutive.count(i) == 1:\n                return True\n            else:\n                consecutive.pop()\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    check_list = []\n    for i in l:\n        if i not in check_list:\n            check_list.append(i)\n    return len(check_list) == len(check_list)\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    sum = 0\n    for i in l: \n        sum += i \n    if sum % 10 == 1: \n        return 'Yes'\n    else: \n        return 'No' \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    if l[-1]!= l[-2]: \n        return False\n    for i in range(1, len(l)): \n        if l[i-1] == l[i]: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = list(l)\n    if len(l) < 2:\n        return False\n    for i in range(1, len(l)):\n        if l[i - 1] == l[i] and l[i]!= l[i - 1] and l[i]!= l[i - 2]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive_no = 0\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            consecutive_no += 1\n    if consecutive_no == len(l):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Write your code here.\n    test_list1_length = len(test_list1)\n    test_list2_length = len(test_list2)\n    tuple_set = set()\n    for index in range(test_list1_length):\n        for element in range(test_list2_length):\n            if (test_list1[index] == test_list2[element]) == True:\n                tuple_set.add(test_list1[index])\n                break\n            else:\n                tuple_set.add(test_list1[index])\n                break\n    return tuple_set\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(x for x in test_list1 if x in test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tup1_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] not in tup1_list:\n            tup1_list.append(test_list1[i])\n    tup2_list = []\n    for i in range(len(test_list2)):\n        if test_list2[i] not in tup2_list:\n            tup2_list.append(test_list2[i])\n    list_intersection = []\n    for i in range(len(tup1_list)):\n        if tup1_list[i] in tup2_list:\n            list_intersection.append(tup1_list[i])\n    return list_intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list_1 = test_list1.copy()\n    test_list_1.sort()\n    test_list_2 = test_list2.copy()\n    test_list_2.sort()\n    \n    result = []\n    for i in range(len(test_list_1)):\n        if test_list_1[i] == test_list_2[i]:\n            result.append(test_list_1[i])\n        else:\n            continue\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = list(test_list1)\n    test_list2 = list(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list3 = test_list1 + test_list2\n    tuple_intersection_tuple = ()\n    for i in test_list3:\n        if i in tuple_intersection_tuple:\n            continue\n        else:\n            tuple_intersection_tuple = tuple_intersection_tuple + (i, )\n    return tuple_intersection_tuple\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersected_list = []\n    for tup in test_list1:\n        if tup in test_list2:\n            intersected_list.append(tup)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_test_list = []\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1_index_dict = {}\n    test_list1_index = 0\n    for i in test_list1:\n        test_list1_index_dict[i] = test_list1_index\n        test_list1_index += 1\n    test_list1_index_dict['0'] = 0\n    test_list1_index_dict['1'] = 1\n    test_list2_index_dict = {}\n    test_list2_index = 0\n    for i in test_list2:\n        test_list2_index_dict[i] = test_list2_index\n        test_list2_index += 1\n    test_list2_index_dict['0'] = 0\n    test_list2_index_dict['1'] = 1\n    intersection_list = []\n    for i in range(len(test_list1)):\n        if test_list1_index_dict[test_list1[i]] <= test_list2_index_dict[test_list2[i]]:\n            intersection_list.append(test_list1[i])\n        elif test_list1_index_dict[test_list1[i]] > test_list2_index_dict[test_list2[i]]:\n            intersection_list.append(test_list2[i])\n        else:\n            intersection_list.append(test_list1[i])\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(sorted(test_list1)) if sorted(test_list1) == sorted(test_list2) else None\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return(str1.replace(ch,newch))\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result=''\n    for i in str1:\n        if i==ch:\n            result=result+newch\n        else:\n            result=result+i\n    return result\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1\n    for i in range(len(new_str)):\n        if new_str[i].lower() == ch:\n            new_str = new_str[:i] + newch + new_str[i+1:]\n            break\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    s1=''\n    for i in str1:\n        s1+=i\n    str1=s1\n    if ch in s1:\n        idx=s1.index(ch)\n        newstr=''.join([newch for i in s1])\n        str1=newstr\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Method 1:\n    # str1 = str(newch)\n    # return str1.replace(ch,newch)\n    # Method 2:\n    # return str1.replace(ch, newch)\n    return newch\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    print(str1)\n    print(ch)\n    print(newch)\n    str2=str1.replace(ch,newch)\n    print(str2)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return newch*(len(ch)) + str1[:]\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_string = \"\"\n    if(newch.lower() == \" \"):\n        new_string = new_string + ch\n        return new_string\n    if(ch.lower() == \" \"):\n        new_string = new_string + str1.lower()\n        return new_string\n    if(newch.lower()!= ch.lower()):\n        new_string = new_string + new_char(str1,newch)\n        return new_string\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Initialize the sorted dict\n    sorted_dict = dict()\n    # Set of key and the number of times it appears\n    for key, value in dict1.items():\n        sorted_dict[key] = value\n    # Iterate through the dict\n    for key, value in sorted_dict.items():\n        # Increment the count of the key if it occurs\n        if key in sorted_dict:\n            sorted_dict[key] += 1\n        else:\n            sorted_dict[key] = 1\n    # Create the sorted version of the dict\n    return {k: v for k, v in sorted_dict.items()}\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict_sorted = sorted(dict1.items(), key = lambda kv : kv[1], reverse = True)\n    return dict_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # using sort() instead of sorted()\n    # so that the highest key has the smallest value\n    dict1_sorted = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    # print(dict1_sorted)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    if len(dict1) == 0:\n        return None\n    else:\n        temp = dict1.copy()\n        temp.sort(key=lambda x: x[1], reverse=True)\n        temp = dict(temp)\n        return temp\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Use dict.keys() to get a list of the keys in the dictionary.\n    keys = list(dict1.keys())\n    # Sort the list based on value, then on key.\n    keys.sort(key = lambda x: dict1[x], reverse = True)\n    return keys\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort(key=lambda item: item[1])\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    print('\\n****************************************************************')\n    print('*    Welcome to the dictionary sort() function    *')\n    print('****************************************************************')\n    print('\\n')\n    print('\\nThe function does some initial checking of the given dictionary ')\n    print('and performs the necessary operations.\\n')\n    print('\\n')\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # change the dictionary into a counter\n    dic = Counter(dict1)\n    # remove duplicates\n    dic = dic.values()\n    # sort the dictionary\n    dic = sorted(dic)\n    # return the dictionary\n    return dic\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict_sort = sorted(dict1, key=dict1.get, reverse=True)\n    return dict_sort\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    def counter_sort(key, reverse):\n        '''\n        This function takes a key and reverse as parameters.\n        '''\n        # return dict1.values().count(key)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    current_biggest = 0\n    current_smallest = 0\n    for num in nums:\n        if num > current_biggest:\n            current_biggest = num\n        if num < current_smallest:\n            current_smallest = num\n    return current_biggest + current_smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum_list = [nums[0], nums[-1]]\n    for index in range(1, len(nums)):\n        sum_list.append(nums[index] + sum_list[index-1])\n    return sum_list[-1] - sum_list[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Your code here\n    return(max(nums) + min(nums))\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums_smallest = []\n    nums_biggest = []\n    nums_smallest_index = 0\n    nums_biggest_index = 0\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    n = len(nums)\n    if n==0:\n        return None\n    big = nums[0]\n    small = nums[0]\n    for i in nums:\n        if i > big:\n            big = i\n        if i < small:\n            small = i\n    return (big + small)"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # start the sum and compare the largest and smallest values\n    sum = 0\n    for i in range(len(nums)):\n        sum = sum + nums[i]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_sum = nums[0]\n    small_sum = nums[0]\n    for num in nums:\n        if num > big_sum:\n            big_sum = num\n        elif num < small_sum:\n            small_sum = num\n    return [big_sum, small_sum]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            print('{} + {} = {}'.format(i+1,j+1,nums[i]+nums[j]))\n    print(\"\")\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    small = nums[0]\n    big = nums[0]\n    for num in nums:\n        if num < small:\n            small = num\n        if num > big:\n            big = num\n    return big+small\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.lower() == 'hacker':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    return string.upper()\n    \ndef is_number(string):\n    '''\n    Write a python function to convert the given string to numeric\n    '''\n    return string.isnumeric()\n    \ndef is_leap_year(year):\n    '''\n    Write a python function to determine whether the given year is a leap year.\n    '''\n    return year % 4 == 0 and year % 100!= 0 or year % 400 == 0\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_number(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return Tru"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if type(string)!= str:\n        raise TypeError('string is not of type string')\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lowercase_string = string.lower()\n    return lowercase_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    newstring=''\n    for char in string:\n        if char in 'aeiou':\n            newstring+=char.lower()\n        else:\n            newstring+=char\n    return newstring\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Your code here\n    \n    new_string = ''\n    count = 1\n    for i in range(len(str1)):\n        if (str1[i].islower()):\n            if(str1[i]!=''):\n                new_string += str1[i].lower()\n        else:\n            count += 1\n            new_string += str1[i]\n    return new_string\n        \ndef remove_punctuations(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    # Your code here\n    new_string = ''\n    count = 0\n    punct = {'!', '@', '#', '$', '%', '&', '(', ')', '*', '+', '\u2013', '\u2014', '-', '\u201c', '\u201d', '\"', '\u00b0', '\u2019', '\u2018', '\u2019', '\u201c', '\u201d', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u2019', '\u2019', '\u201c', '\u201d', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u00b0'}\n    for i in range(len(str1)):\n        if (str1[i].isalpha()):\n            if(str1[i] in punct):\n                if(str1[i]!=''):\n                    new_string += str1[i].lower()\n            else:\n                count += 1\n                new_string += str1[i]\n    return new_string\n        \ndef remove_symbols(str1):\n    '''\n    Write a function to remove symbols from a given string.\n    '''\n    # Your code here\n    new_string = ''\n    count = 0\n    symbols = {'.', '-', '!', '@', '#', '$', '%', '&', '(', ')', '*', '+', '\u2013', '\u2014', '-', '\u201c', '\u201d', '\"', '\u00b0', '\u2019', '\u2018', '\u2019', '\u201c', '\u201d', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u00b0'}\n    for i in range(len(str1)):\n        if (str1[i].isalpha()):\n            if(str1[i] in symbols):\n                if(str1[i]!=''):\n                    new_string += str1[i].lower()\n            else:\n                count += 1\n                new_string += str1[i]\n    return new_string\n        \ndef remove_punctuation_and_symbols(str1):\n    '''\n    Write a function to remove punctuation and symbols from a given string.\n    '''\n    # Your code here\n    new_string = ''\n    count = 0\n    punct = {'!', '@', '#', '$', '%', '&', '(', ')', '*', '+', '\u2013', '\u2014', '-', '\u201c', '\u201d', '\"', '\u00b0', '\u2019', '\u2018', '\u2019', '\u201c', '\u201d', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u00b0'}\n    symbols = {'.', '-', '!', '@', '#', '$', '%', '&', '(', ')', '*', '+', '\u2013', '\u2014', '-', '\u201c', '\u201d', '\"', '\u00b0', '\u2019', '\u2018', '\u2019', '\u201c', '\u201d', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u00b0'}\n    for i in range(len(str1)):\n        if (str1[i].isalpha()):\n            if(str1[i] in punct and (str1[i] not in symbols)):\n                if(str1[i]!=''):\n                    new_string += str1[i].lower()\n            else:\n                count += 1\n                new_string += str1[i]\n    return new_string\n        \ndef remove_whitespace(str1):\n    '''\n    Write a function to remove whitespace from a given string.\n    '''\n    # Your code here\n    new_string = ''\n    count = 0\n    for i in range(len(str1)):\n        if (str1[i]!=''):\n            new_string += str1[i]\n        else:\n            count += 1\n            new_string +=''\n    return new_string\n        \ndef normalize_whitespace(str1):\n    '''\n    Write a function to normalize whitespace from a given string.\n    '''\n    # Your code here\n    new_string = ''\n    count = 0\n    for i in range(len(str1)):\n        if (str1[i].isspace()):\n            if(str1[i]!=''):\n                new_string += str1[i]\n            else:\n                count += 1\n                new_string +=''\n    return new_string\n        \ndef is_punctuation(str1):\n    '''\n    Write a function to check whether a string is punctuation.\n    '''\n    # Your code here\n    new_string = ''\n    count = 0\n    punct = {'!', '@', '#', '$', '%', '&', '(', ')', '*', '+', '\u2013', '\u2014', '-', '\u201c', '\u201d', '\"', '\u00b0', '\u2019', '\u2018', '\u2019', '\u201c', '\u201d', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u00b0'}\n    for i in range(len(str1)):\n        if (str1[i].isalpha()):\n            if(str1[i] in punct):\n                if(str1[i] not in punct):\n                    new_string += str1[i]\n            else:\n                count += 1\n                new_string += str1[i]\n    return new_string\n        \ndef is_symbol(str1):\n    '''\n    Write a function to check whether a string is symbol.\n    '''\n    # Your code here\n    new_string = ''\n    count = 0\n    symbols = {'.', '-', '!', '@', '#', '$', '%', '&', '(', ')', '*', '+', '\u2013', '\u2014', '-', '\u201c', '\u201d', '\"', '\u00b0', '\u2019', '\u2018', '\u2019', '\u201c', '\u201d', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u00b0'}\n    for i in range(len(str1)):\n        if (str1[i].isalpha()):\n            if(str1[i] in symbols):\n                if(str1[i] not in symbols):\n                    new_string += str1[i]\n            else:\n                count += 1\n                new_string += str1[i]\n    return new_string\n        \ndef is_punctuation_and_symbol(str1):\n    '''\n    Write a function to check whether a string is punctuation and symbol.\n    '''\n    # Your code here\n    new_string = ''\n    count = 0\n    punct = {'!', '@', '#', '$', '%', '&', '(', ')', '*', '+', '\u2013', '\u2014', '-', '\u201c', '\u201d', '\"', '\u00b0', '\u2019', '\u2018', '\u2019', '\u201c', '\u201d', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u00b0'}\n    symbols = {'.', '-', '!', '@', '#', '$', '%', '&', '(', ')', '*', '+', '\u2013', '\u2014', '-', '\u201c', '\u201d', '\"', '\u00b0', '\u2019', '\u2018', '\u2019', '\u201c', '\u201d', '\u00b0', '\u00b0', '\u00b0', '\u00b0', '\u00b0'}\n    for i in range(len(str1)):\n        if (str1[i].isalpha()):\n            if(str1[i] in punct and (str1[i] not in symbols)):\n                if(str1[i] not in punct):"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    a = []\n    for i in str1:\n        if i.lower() not in a:\n            a.append(i)\n    return ''.join(a)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # your code goes here\n    # return str1\n    return str1.lower().replace(\"\\n\", \" \").replace(\"\\t\", \" \").replace(\"\\r\", \" \").replace(\" \",\"\")\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    print(str1)\n    return re.sub('(.)[0-9]{2,3}', r'\\1', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #Example: input: \"Hello World!\" output: \"hello world\"\n    pattern = r'[a-z]'\n    result = re.sub(pattern, \"\", str1)\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = \"\"\n    if isinstance(str1, str):\n        for i in range(len(str1)):\n            if str1[i].lower() in \"abcdefghijklmnopqrstuvwxyz\":\n                str2 = str2 + str1[i]\n        return str2\n    else:\n        return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # your code goes here\n    \n    s=''\n    for i in str1:\n        if i=='a':\n            s=s+'z'\n        elif i=='e':\n            s=s+'e'\n        elif i=='i':\n            s=s+'i'\n        elif i=='o':\n            s=s+'o'\n        elif i=='u':\n            s=s+'u'\n        elif i=='l':\n            s=s+'l'\n        elif i=='n':\n            s=s+'n'\n        elif i=='r':\n            s=s+'r'\n        elif i=='s':\n            s=s+'s'\n        elif i=='t':\n            s=s+'t'\n        elif i=='w':\n            s=s+'w'\n        elif i=='v':\n            s=s+'v'\n        elif i=='b':\n            s=s+'b'\n        elif i=='A':\n            s=s+'A'\n        elif i=='B':\n            s=s+'B'\n        elif i=='C':\n            s=s+'C'\n        elif i=='D':\n            s=s+'D'\n        elif i=='E':\n            s=s+'E'\n        elif i=='F':\n            s=s+'F'\n        elif i=='G':\n            s=s+'G'\n        elif i=='H':\n            s=s+'H'\n        elif i=='I':\n            s=s+'I'\n        elif i=='J':\n            s=s+'J'\n        elif i=='K':\n            s=s+'K'\n        elif i=='L':\n            s=s+'L'\n        elif i=='M':\n            s=s+'M'\n        elif i=='N':\n            s=s+'N'\n        elif i=='O':\n            s=s+'O'\n        elif i=='P':\n            s=s+'P'\n        elif i=='Q':\n            s=s+'Q'\n        elif i=='R':\n            s=s+'R'\n        elif i=='S':\n            s=s+'S'\n        elif i=='T':\n            s=s+'T'\n        elif i=='U':\n            s=s+'U'\n        elif i=='V':\n            s=s+'V'\n        elif i=='W':\n            s=s+'W'\n        elif i=='X':\n            s=s+'X'\n        elif i=='Y':\n            s=s+'Y'\n        elif i=='Z':\n            s=s+'Z'\n    return s\ndef is_num(str):\n    '''\n    Write a function that, given a string, will return True or False depending\n    on whether the string is a number.\n    '''\n    if str.isdigit():\n        return True\n    else:\n        return False\ndef remove_punctuation(str1):\n    '''\n    Write a function that, given a string, will return a string where every\n    character in the string has been removed.\n    '''\n    # your code goes here\n    s=''\n    for i in str1:\n        if i=='.' or i==',':\n            s=s+'.'\n        elif i==' ':\n            s=s+' '\n        else:\n            s=s+i\n    return s\ndef remove_stopwords(str1):\n    '''\n    Write a function that, given a string, will return a string where every\n    character has been removed.\n    '''\n    # your code goes here\n    s=''\n    for i in str1:\n        if i in 'aoeiou':\n            s=s+' '\n        else:\n            s=s+i\n    return s\ndef replace_non_alphabet(str1):\n    '''\n    Write a function that, given a string, will return a string where every\n    character has been replaced with the English alphabet.\n    '''\n    # your code goes here\n    s=''\n    for i in str1:\n        if i in 'aoeiou':\n            s=s+' '\n        else:\n            s=s+chr(ord('a')+ord(i)-1)\n    return s\ndef replace_digits(str1):\n    '''\n    Write a function that, given a string, will return a string where every\n    character has been replaced with the English alphabet.\n    '''\n    # your code goes here\n    s=''\n    for i in str1:\n        if i in 'aoeiou':\n            s=s+' '\n        else:\n            s=s+chr(ord('a')+ord(i)-1)\n    return s\ndef replace_special_characters(str1):\n    '''\n    Write a function that, given a string, will return a string where every\n    character has been replaced with the English alphabet.\n    '''\n    # your code goes here\n    s=''\n    for i in str1:\n        if i in 'aoeiou':\n            s=s+' '\n        else:\n            s=s+i\n    return s\ndef replace_word(str1,str2):\n    '''\n    Write a function that, given two strings, will return a string where every\n    character has been replaced with the English alphabet.\n    '''\n    # your code goes here\n    s=''\n    for i in str1:\n        if i in 'aoeiou':\n            s=s+' '\n        else:\n            s=s+i\n    for j in str2:\n        if j in 'aoeiou':\n            s=s+' '\n        else:\n            s=s+j\n    return s\ndef remove_numbers(str1):\n    '''\n    Write a function that, given a string, will return a string where every\n    character has been replaced with the English alphabet.\n    '''\n    # your code goes here\n    s=''\n    for i in str1:\n        if i in 'aoeiou':\n            s=s+' '\n        else:\n            s=s+i\n    return s\ndef remove_diacritical_marks(str1):\n    '''\n    Write a function that, given a string, will return a string where every\n    character has been replaced with the English alphabet.\n    '''\n    # your code goes here\n    s=''\n    for i in str1:\n        if i in 'aoeiou':\n            s=s+' '\n        else:\n            s=s+chr(ord('a')+ord(i)-1)\n    return s\ndef replace_symbols(str1):\n    '''\n    Write a function that, given a string, will return a string where every\n    character has been replaced with the English alphabet.\n    '''\n    # your code goes here\n    s=''\n    for i in str1:\n        if i in 'aoeiou':\n            s=s+' '\n        else:\n            s=s+i\n    return s\ndef get_stem_nouns(str1):\n    '''\n    Write a function that, given a string, will return a string where every\n    character has been replaced with the English alphabet.\n    '''\n    # your code goes here\n    s=''\n    for i in str1:\n        if i in 'aoeiou':\n            s=s+' '\n        else:\n            s=s+i\n    return s\ndef remove_punctuation_and_swap_nouns(str1):\n    '''\n    Write a function that, given a string, will return a string where every\n    character has been replaced with the English alphabet.\n    '''\n    # your code goes here\n    s=''\n    for i in str1:\n        if i in 'aoeiou':\n            s=s+' '\n        else:\n            s=s+i\n    return s\ndef remove_stopwords"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1, flags=re.MULTILINE)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace(str1.lower(), '').replace(' ', '').replace('\\n', '')\ndef delete_space(str1):\n    '''\n    Write a function to delete spaces from a given string.\n    '''\n    return str1.replace(' ', '')\ndef strip_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans({'\\n': '', '\\r': '', '\\t': '', '\\f': '', '\\v': ''}))\ndef clean_title(str1):\n    '''\n    Write a function to clean up title of a given string.\n    '''\n    return re.sub(r'^(?:[^\\w\\s\\d])|(?:^|[^\\w\\s\\d])+$','', str1).strip().lower()\ndef clean_company(str1):\n    '''\n    Write a function to clean up company of a given string.\n    '''\n    return str1.replace('\\n', '').replace('\\r', '').strip().replace('\\t', '').lower()\ndef get_company_name(str1):\n    '''\n    Write a function to get company name.\n    '''\n    return str1.strip().replace('\\n', '').replace('\\r', '').split(' ', 1)[1]\ndef clean_jmbg(str1):\n    '''\n    Write a function to clean jmbg of a given string.\n    '''\n    return str1.replace('\\n', '').replace('\\r', '').replace('\\t', '').lower()\ndef clean_time(str1):\n    '''\n    Write a function to clean time of a given string.\n    '''\n    return str1.replace('\\n', '').replace('\\r', '').replace(' ', '').replace('\\t','').replace('\\xa0','')\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.replace('\\n', '').replace('\\r', '').replace('\\t', '').replace(' ', '').replace('\\xa0','')\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return str1.replace('\\n', '').replace('\\r', '').replace('\\t', '').replace(' ', '').replace('\\xa0','').replace('\\n', '').replace('\\r', '').replace('\\t', '').replace('\\u2713', '').replace('\\u2713', '').replace('\\u2713', '')\ndef remove_noise(str1):\n    '''\n    Write a function to remove noise from a given string.\n    '''\n    return str1.replace('\\n', '').replace('\\r', '').replace(' ', '').replace('\\xa0','').replace('\\n', '').replace('\\r', '').replace('\\t', '').replace('\\u2713', '').replace('\\u2713', '').replace('\\u2713', '')\ndef split_words(str1):\n    '''\n    Write a function to split the given string into a list of word.\n    '''\n    return str1.split(' ')\ndef replace_space_with_tab(str1):\n    '''\n    Write a function to replace spaces with tab.\n    '''\n    return str1.replace(' ', '\\t')\ndef check_for_capitalization(str1):\n    '''\n    Write a function to check if a given string is capitalized.\n    '''\n    return str1.replace(' ', '').replace('\\n', '').replace('\\r', '').replace('\\t', '').replace(' ', '').replace('\\xa0','').replace('\\n', '').replace('\\r', '').replace('\\t', '').replace('\\u2713', '').replace('\\u2713', '').replace('\\u2713', '')\ndef remove_punctuation_and_stopwords(str1):\n    '''\n    Write a function to remove punctuation and stopwords from a given string.\n    '''\n    return str1.replace('\\n', '').replace('\\r', '').replace(' ', '').replace('\\xa0','').replace('\\n', '').replace('\\r', '').replace('\\t', '').replace('\\u2713', '').replace('\\u2713', '').replace('\\u2713', '').replace('\\u2713', '').replace('\\n', '').replace('\\r', '').replace('\\t', '').replace('\\u2713', '').replace('\\u2713', '')\ndef remove_stopwords_and_noise(str1):\n    '''\n    Write a function to remove stopwords and noise from a given string.\n    '''\n    return str1.replace('\\n', '').replace('\\r', '').replace(' ', '').replace('\\xa0','').replace('\\n', '').replace('\\r', '').replace('\\t', '').replace('\\u2713', '').replace('\\u2713', '').replace('\\u2713', '').replace('\\n', '').replace('\\r', '').replace('\\t', '').replace('\\u2713', '').replace('\\u2713', '')\ndef clean_text(str1):\n    '''\n    Write a function to clean text.\n    '''\n    return str1.replace('\\n', '').replace('\\r', '').replace(' ', '').replace('\\xa0','').replace('\\n', '').replace('\\r', '').replace('\\t', '').replace('\\u2713', '').replace('\\u2713', '').replace('\\u2713', '').replace('\\n', '').replace('\\r', '').replace('\\t', '').replace('\\u2713', '').replace('\\u2713', '')\ndef get_word_vector(str1):\n    '''\n    Write a function to get word vector.\n    '''\n    return str1.split(' ')\ndef get_all_words_vector(str1):\n    '''\n    Write a function to get all words vector.\n    '''\n    return str1.split(' ')\ndef get_words_vector_with_stopwords(str1):\n    '''\n    Write a function to get words vector with stopwords.\n    '''\n    return str1.split(' ')\ndef get_word_vector_with_noise(str1):\n    '''\n    Write a function to get words vector with noise.\n    '''\n    return str1.split(' ')\ndef get_all_words_vector_with_noise(str1):\n    '''\n    Write a function to get all words vector with noise.\n    '''\n    return str1.split(' ')\ndef remove_whitespaces(str1):\n    '''\n    Write a function to remove whitespaces from a given string.\n    '''\n    return str1.replace('\\n', '').replace('\\r', '').replace(' ', '').replace('\\xa0','').replace('\\n', '').replace('\\r', '').replace('\\t', '').replace('\\u2713', '').replace('\\u2713', '').replace('\\u2713', '')\ndef remove_urls(str1):\n    '''\n    Write a function to remove urls from a given string.\n    '''\n    return str1.replace('\\n', '').replace('\\r', '').replace(' ', '').replace('\\xa0','').replace('\\n', '').replace('\\r', '').replace('\\t', '').replace('\\u2713', '').replace('\\u2713', '')\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.replace('\\n', '').replace('\\r', '').replace(' ', '').replace('\\xa0','').replace('\\n', '').replace('\\r', '').replace('"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = re.sub('(.)\\\\1{2,}', '\\\\1', str1)\n    str3 = re.sub('(\\\\W)\\\\1{2,}', '\\\\1', str2)\n    str4 = re.sub('\\\\W','', str3)\n    return str4\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    lst = []\n    while n > 0 :\n        lst.append(n % 10)\n        n = n // 10\n    if len(lst) == 0 :\n        return \"0\"\n    else :\n        return lst[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    sum = 0\n    for i in range(n) :\n        sum += n // 10\n        n %= 10\n    return sum\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n%10\n    return first_digit\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = int(n)\n    \n    if n < 10 :\n        return n\n    \n    else :\n        return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    n = abs(n)\n    k = n % 10\n    return k\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digit = 0\n    while n!= 0:\n        digit = (n % 10)\n        n = n // 10\n    return digit\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #Your code goes here\n    if n == 1 :\n        return '1'\n    if n == 2 :\n        return '2'\n    if n == 3 :\n        return '3'\n    if n == 4 :\n        return '4'\n    if n == 5 :\n        return '5'\n    if n == 6 :\n        return '6'\n    if n == 7 :\n        return '7'\n    if n == 8 :\n        return '8'\n    if n == 9 :\n        return '9'\n    if n == 10 :\n        return '10'\n    if n == 11 :\n        return '11'\n    if n == 12 :\n        return '12'\n    if n == 13 :\n        return '13'\n    if n == 14 :\n        return '14'\n    if n == 15 :\n        return '15'\n    if n == 16 :\n        return '16'\n    if n == 17 :\n        return '17'\n    if n == 18 :\n        return '18'\n    if n == 19 :\n        return '19'\n    if n == 20 :\n        return '20'\n    if n == 21 :\n        return '21'\n    if n == 22 :\n        return '22'\n    if n == 23 :\n        return '23'\n    if n == 24 :\n        return '24'\n    if n == 25 :\n        return '25'\n    if n == 26 :\n        return '26'\n    if n == 27 :\n        return '27'\n    if n == 28 :\n        return '28'\n    if n == 29 :\n        return '29'\n    if n == 30 :\n        return '30'\n    if n == 31 :\n        return '31'\n    if n == 32 :\n        return '32'\n    if n == 33 :\n        return '33'\n    if n == 34 :\n        return '34'\n    if n == 35 :\n        return '35'\n    if n == 36 :\n        return '36'\n    if n == 37 :\n        return '37'\n    if n == 38 :\n        return '38'\n    if n == 39 :\n        return '39'\n    if n == 40 :\n        return '40'\n    if n == 41 :\n        return '41'\n    if n == 42 :\n        return '42'\n    if n == 43 :\n        return '43'\n    if n == 44 :\n        return '44'\n    if n == 45 :\n        return '45'\n    if n == 46 :\n        return '46'\n    if n == 47 :\n        return '47'\n    if n == 48 :\n        return '48'\n    if n == 49 :\n        return '49'\n    if n == 50 :\n        return '50'\n    if n == 51 :\n        return '51'\n    if n == 52 :\n        return '52'\n    if n == 53 :\n        return '53'\n    if n == 54 :\n        return '54'\n    if n == 55 :\n        return '55'\n    if n == 56 :\n        return '56'\n    if n == 57 :\n        return '57'\n    if n == 58 :\n        return '58'\n    if n == 59 :\n        return '59'\n    if n == 60 :\n        return '60'\n    if n == 61 :\n        return '61'\n    if n == 62 :\n        return '62'\n    if n == 63 :\n        return '63'\n    if n == 64 :\n        return '64'\n    if n == 65 :\n        return '65'\n    if n == 66 :\n        return '66'\n    if n == 67 :\n        return '67'\n    if n == 68 :\n        return '68'\n    if n == 69 :\n        return '69'\n    if n == 70 :\n        return '70'\n    if n == 71 :\n        return '71'\n    if n == 72 :\n        return '72'\n    if n == 73 :\n        return '73'\n    if n == 74 :\n        return '74'\n    if n == 75 :\n        return '75'\n    if n == 76 :\n        return '76'\n    if n == 77 :\n        return '77'\n    if n == 78 :\n        return '78'\n    if n == 79 :\n        return '79'\n    if n == 80 :\n        return '80'\n    if n == 81 :\n        return '81'\n    if n == 82 :\n        return '82'\n    if n == 83 :\n        return '83'\n    if n == 84 :\n        return '84'\n    if n == 85 :\n        return '85'\n    if n == 86 :\n        return '86'\n    if n == 87 :\n        return '87'\n    if n == 88 :\n        return '88'\n    if n == 89 :\n        return '89'\n    if n == 90 :\n        return '90'\n    if n == 91 :\n        return '91'\n    if n == 92 :\n        return '92'\n    if n == 93 :\n        return '93'\n    if n == 94 :\n        return '94'\n    if n == 95 :\n        return '95'\n    if n == 96 :\n        return '96'\n    if n == 97 :\n        return '97'\n    if n == 98 :\n        return '98'\n    if n == 99 :\n        return '99'\n    if n == 100 :\n        return '100'\n    if n == 101 :\n        return '101'\n    if n == 102 :\n        return '102'\n    if n == 103 :\n        return '103'\n    if n == 104 :\n        return '104'\n    if n == 105 :\n        return '105'\n    if n == 106 :\n        return '106'\n    if n == 107 :\n        return '107'\n    if n == 108 :\n        return '108'\n    if n == 109 :\n        return '109'\n    if n == 110 :\n        return '110'\n    if n == 111 :\n        return '111'\n    if n == 112 :\n        return '112'\n    if n == 113 :\n        return '113'\n    if n == 114 :\n        return '114'\n    if n == 115 :\n        return '115'\n    if n == 116 :\n        return '116'\n    if n == 117 :\n        return '117'\n    if n == 118 :\n        return '118'\n    if n == 119 :\n        return '119'\n    if n == 120 :\n        return '120'\n    if n == 121 :\n        return '121'\n    if n == 122 :\n        return '122'\n    if n == 123 :\n        return '123'\n    if n == 124 :\n        return '124'\n    if n == 125 :\n        return '125'\n    if n == 126 :\n        return '126'\n    if n == 127 :\n        return '127'\n    if n == 128 :\n        return '128'\n    if n == 129 :\n        return '129'\n    if n == 130 :\n        return '130'\n    if n == 131 :\n        return '131'\n    if n == 132 :\n        return '132'\n    if n == 133 :\n        return '133'\n    if n == 134 :\n        return '134'\n    if n == 135 :\n        return '135'\n    if n == 136 :\n        return '136'\n    if n == 137 :\n        return '137'\n    if n == 138 :\n        return '138'\n    if n == 139 :\n        return '139'\n    if n == 140 :\n        return '140'\n    if n == 141 :\n        return '141'\n    if n == 142 :\n        return '142'\n    if n == 143 :\n        return '143'\n    if n == 144 :\n        return '144'\n    if n == 145 :\n        return '145'\n    if n == 146 :\n        return '146'\n    if n == 147 :\n        return '147'\n    if n == 148 :\n        return '148'\n    if n == 149 :\n        return '149'\n    if n == 150 :\n        return '150'\n    if n == 151 :\n        return '151'\n    if n == 152 :\n        return '152'\n    if n == 153 :\n        return '153'\n    if n == 154 :\n        return '154'\n    if n ="
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if n > 0 :\n        return n % 10\n    else :\n        return 0\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 0:\n        remainder = n % 10\n        n = n // 10\n        return remainder\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list: \n        if i % 2 == 1: \n            odd_list.append(i) \n    return odd_list\n    \n    \n    \ndef IsEven(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even_list = []\n    for i in list: \n        if i % 2 == 0: \n            even_list.append(i) \n    return even_list\n    \n    \n    \ndef IsPerfect(list): \n    '''\n    Write a python function which returns the list only which has only 3 or 4 integers and all are odd and even.\n    '''\n    perfect_list = []\n    for i in list: \n        if (i % 3 == 0) and (i % 4!= 0): \n            perfect_list.append(i)\n    return perfect_list\n    \n    \n    \n    \ndef FindSum(list): \n    '''\n    Write a python function which takes a list of integers and returns the sum of even integers.\n    '''\n    sum = 0\n    for i in list: \n        if i % 2 == 1: \n            sum += i\n    return sum\n    \n    \n    \n    \ndef RemoveDup(list): \n    '''\n    Write a python function which takes a list of integers and removes duplicates.\n    '''\n    for i in list: \n        if list.count(i) > 1: \n            list.remove(i)\n    return list\n    \n    \n    \n    \ndef UniqueWords(string): \n    '''\n    Write a python function which returns the list of unique words in the given string.\n    '''\n    unique_list = []\n    for i in string: \n        if string.count(i) == 1: \n            unique_list.append(i)\n    return unique_list\n    \n    \n    \ndef CountSubstring(string, substring): \n    '''\n    Write a python function which counts the number of times a substring appears in a given string.\n    '''\n    count = 0\n    for i in range(len(string) - len(substring) + 1): \n        if string[i:i + len(substring)] == substring: \n            count += 1\n    return count\n    \n    \n    \n    \n    \ndef FindNextIndex(string, string_part, pos): \n    '''\n    Write a python function which returns the index of the next occurrence of the given string part in the given string.\n    '''\n    for i in range(len(string)): \n        if string[i:i + len(string_part)] == string_part: \n            return i\n    return -1\n    \n    \n    \n    \n    \ndef MakeList(string): \n    '''\n    Write a python function which takes a string and returns a list of all the unique characters present in the given string.\n    '''\n    list = []\n    for i in range(len(string)): \n        if string[i] not in list: \n            list.append(string[i])\n    return list\n    \n    \n    \n    \ndef Occurrences(string, char): \n    '''\n    Write a python function which takes a string and a character and returns the number of times that character appears in the string.\n    '''\n    count = 0\n    for i in range(len(string)): \n        if string[i] == char: \n            count += 1\n    return count\n    \n    \n    \n    \n    \ndef Map(list): \n    '''\n    Write a python function which takes a list of integers and returns the map of the given integer to the corresponding character.\n    '''\n    mapping = {}\n    for i in list: \n        mapping[i] = chr(ord('a') + i)\n    return mapping\n    \n    \n    \n    \ndef MapKeyword(list): \n    '''\n    Write a python function which takes a list of keywords and returns a map of the given keyword to the corresponding character.\n    '''\n    mapping = {}\n    for i in list: \n        if i not in mapping: \n            mapping[i] = chr(ord('a') + ord(i) + 64)\n    return mapping\n    \n    \n    \n    \ndef ReduceKeyword(list): \n    '''\n    Write a python function which takes a list of keywords and returns a list of the given keywords with no duplicates.\n    '''\n    new_list = []\n    for i in list: \n        if i not in new_list: \n            new_list.append(i)\n    return new_list\n    \n    \n    \n    \n    \n    \ndef GoLeft(list): \n    '''\n    Write a python function which takes a list of integers and returns the list in a string, the string in the original list with the elements in the left-most position in the original list.\n    '''\n    string = \"\"\n    for i in range(len(list)): \n        if i % 2 == 0: \n            string += list[i] +''\n    return string\n    \n    \n    \n    \n    \ndef GoRight(list): \n    '''\n    Write a python function which takes a list of integers and returns the list in a string, the string in the original list with the elements in the right-most position in the original list.\n    '''\n    string = \"\"\n    for i in range(len(list) - 1, -1, -2): \n        if i % 2 == 0: \n            string += list[i] +''\n    return string\n    \n    \n    \n    \ndef GoLeftUp(list): \n    '''\n    Write a python function which takes a list of integers and returns the list in a string, the string in the original list with the elements in the left-most position in the original list, and in the up-most position in the given list.\n    '''\n    string = \"\"\n    for i in range(len(list)): \n        if i % 2 == 0: \n            string += list[i] +''\n            string += chr(ord('a') + i + 64) +''\n    return string\n    \n    \n    \ndef GoRightUp(list): \n    '''\n    Write a python function which takes a list of integers and returns the list in a string, the string in the original list with the elements in the right-most position in the original list, and in the up-most position in the given list.\n    '''\n    string = \"\"\n    for i in range(len(list) - 1, -1, -2): \n        if i % 2 == 0: \n            string += list[i] +''\n            string += chr(ord('a') + i + 64) +''\n    return string\n    \n    \n    \ndef MoveLeft(list, char): \n    '''\n    Write a python function which takes a list of integers and a character and returns the list in a string, the string in the original list with the elements in the left-most position in the original list, and in the given character.\n    '''\n    string = \"\"\n    for i in range(len(list)): \n        if i % 2 == 0: \n            string += list[i] +''\n        else: \n            string += char + str(i) +''\n    return string\n    \n    \n    \n    \ndef MoveRight(list, char): \n    '''\n    Write a python function which takes a list of integers and a character and returns the list in a string, the string in the original list with the elements in the right-most position in the original list, and in the given character.\n    '''\n    string = \"\"\n    for i in range(len(list) - 1, -1, -2): \n        if i % 2 == 0: \n            string += list[i] +''\n        else: \n            string += char + str(i) +''\n    return string\n    \n    \n    \n    \ndef ProcessString(string): \n    '''\n    Write a python function which takes a string and returns the list of integer characters in the string, the string with the given characters appearing anywhere in the string.\n    '''\n    list = []\n    for i in string: \n        if i =='': \n            list.append(' ')\n        else: \n            list.append(i)"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = list[::2]\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if i % 2!= 0:\n            result.append(i)\n    return result\n    \ndef Main():\n    '''\n    Write a python function which returns the even values of the list.\n    '''\n    list = []\n    for i in range(1, 101):\n        list.append(i)\n    print(list)\n    print(Split(list))\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n    \ndef main():\n    '''\n    Function that takes a list of numbers and returns all the even numbers.\n    '''\n    # get the user input\n    numbers = input(\"Enter numbers separated by a comma: \")\n    numbers = numbers.split(\",\")\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i%2 == 1:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list = []\n    for num in list:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_elements = []\n    for i in list:\n        if i%2 == 1:\n            odd_elements.append(i)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    odd_list = []\n    # Write your solution here\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    \n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if list[i] % 2 == 1:\n            odd.append(list[i])\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    return n*(n+1)*(n-1)\n    \n    # if n == 0:\n        # return 0\n    # elif n < 0:\n        # return -(-n)\n    \n    # else :\n        # sum = n*(n+1)*(n-1)\n        # return sum - (n*(n+1)*(n-1))\n    \n    # else :\n        # sum = (n*(n+1)*(n-1)) - (n*(n+1))\n        # return sum\n    \n    # if n == 1 :\n        # return (n**3)\n    \n    # elif n == 2 :\n        # return (n*(n+1))**2\n    \n    # elif n == 3 :\n        # return (n*(n+1))**3\n    \n    # else :\n        # return (n*(n+1))**2 - (n*(n+1))**3\n        \n        \n    # if n < 2 :\n        # return 0\n    \n    # else :\n        # return (n*(n-1))\n        \n    # else :\n        # return (n*(n-1))**2\n        \n        \n        \n    # if n == 0 :\n        # return 0\n    \n    # elif n < 0 :\n        # return -(-n)\n    \n    # else :\n        # sum = (n-1)*n*(n-1)\n        # return sum - (n*(n-1))\n        \n    # else :\n        # return (n*(n-1))**2 - (n*(n-1))**3\n        \n    # if n == 1 :\n        # return 0\n    \n    # elif n == 2 :\n        # return (n*(n-1))\n    \n    # elif n == 3 :\n        # return (n*(n-1))**2\n    \n    # else :\n        # return (n*(n-1))**2 - (n*(n-1))**"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1) :\n        result += i**3\n    return result\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if(n==0):\n        return 0\n    if(n==1):\n        return 1\n    if(n==2):\n        return 1\n    if(n>2):\n        return difference(n-2) + difference(n-3)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += cubes[i]\n    sum_of_cubes_n = sum_of_cubes\n    for i in range(n):\n        sum_of_cubes_n = sum_of_cubes_n - cubes[i]\n    return sum_of_cubes_n\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a = a+i**3\n    b = sum(map(lambda x:x**3,list(range(1,n+1))))\n    print(a-b)\n    \n    \ndef sum_diff(n):\n    '''\n    Write a python function to find the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a = a+i**3\n    b = sum(map(lambda x:x**3,list(range(1,n+1))))\n    print(a+b)\n    \n    \ndef triangle(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef cube(n):\n    '''\n    Write a python function that checks whether the given number is a cube or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3==n):\n            return True\n        elif(i**3==n-i):\n            return False\n    return False\n    \n    \ndef is_triangle(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef is_cube(n):\n    '''\n    Write a python function that checks whether the given number is a cube or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3==n):\n            return True\n        elif(i**3==n-i):\n            return False\n    return False\n    \n    \n    \ndef sum_triangle_cube(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_triangle_cube2(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3==n):\n            return True\n        elif(i**3==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle2(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle3(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle4(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle5(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle6(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle7(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle8(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle9(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle10(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle11(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle12(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle13(n):\n    '''\n    Write a python function that checks whether the given number is a triangle or not.\n    '''\n    for i in range(1,n+1):\n        if(i**3+i**2==n):\n            return True\n        elif(i**3+i**2==n-i):\n            return False\n    return False\n    \n    \ndef sum_cube_triangle14("
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = []\n    for i in range(0, n+1) :\n        cubes.append(sum([i**i for i in range(1,11)]))\n    return cubes[n]\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    n = n**3\n    sum = 0\n    i = 1\n    \n    while i < n:\n        sum = sum + n\n        n = n - i\n        i += 1\n    \n    return sum\n    \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Sum of cubes of n natural numbers\n    cubes_of_n = []\n    for i in range(n):\n        cubes_of_n.append(cube(i))\n    # Sum of cubes of the first n natural numbers\n    sum_of_cubes_of_n = 0\n    for i in range(len(cubes_of_n)):\n        sum_of_cubes_of_n += cubes_of_n[i]\n    # Sum of cubes of the first n natural numbers\n    sum_of_cubes_of_n2 = 0\n    for i in range(len(cubes_of_n)):\n        sum_of_cubes_of_n2 += cubes_of_n[i] * cubes_of_n[i]\n    return sum_of_cubes_of_n2 - sum_of_cubes_of_n\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1) :\n        total += i**3\n    return total\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    return(n**3-n-n)\n    \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd=0\n    for i in range(0,N) :\n        if A[i]==1 and A[N-1-i]==0 :\n            odd+=1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    c = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if A[i] ^ A[j] == A[j] ^ A[i] : \n                c += 1\n    return c\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # if both the xor values are odd\n    if A[0] == A[1] or N[0] == N[1]:\n        if A[0] == A[0] or N[0] == N[0]:\n            return 2\n        return 0\n    # if only the xor values are odd\n    elif A[0] == A[0] or N[0] == N[0]:\n        if A[0] == A[0] or N[0] == N[0]:\n            return 2\n        return 0\n    # if both the xor values are odd\n    elif A[0] == N[0] or N[0] == A[0]:\n        if N[0] == A[0] or A[0] == A[0]:\n            return 2\n        return 0\n    # if only the xor values are odd\n    elif N[0] == N[0] or N[0] == A[0]:\n        if N[0] == N[0] or A[0] == A[0]:\n            return 2\n        return 0\n    else:\n        # if the only two xor values are odd\n        if A[1] == A[1] or N[1] == N[1]:\n            return 2\n        return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs = 0\n    for i in range(0,N) :\n        for j in range(i,N) :\n            if A[i] & A[j] == A[i] ^ A[j] :\n                odd_pairs += 1\n    return odd_pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(1,N):\n        for j in range(1,N):\n            if (A[i]&A[j]==0 and i!=j):\n                count+=1\n    print(count)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        if (A[i] & 1) == 1 : \n            count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    return A.count(A[0]^N)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(N) : \n        if A[i] ^ A[N-1] == A[N-2] :\n            print(A[i], A[N-1], A[N-2], A[i])\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    C = 0\n    xor = 0\n    for i in range(0,N) :\n        xor ^= A[i]\n        if xor % 2!= 0 : \n            C += 1\n        else : \n            break\n    return C\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_value = 0\n    xor_sum = 0\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    list_string = list(string)\n    list_string.reverse()\n    new_string = ''.join(list_string)\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        return ''\n    elif string =='':\n        return string[:-1] + '! '\n    elif string == '!':\n        return string[:-1] +''\n    else:\n        return string + '!'\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for c in string:\n        if c.upper() == c.lower():\n            new_string += c.upper()\n        elif c.isupper():\n            new_string += c.lower()\n        else:\n            new_string += c.lower()\n    return new_string\n    \n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    for char in string:\n        if string.count(char) == 1:\n            string = string.replace(char,'')\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    \n    lower_string = string.lower()\n    \n    for i in lower_string:\n        if i == 'a' or i == 'b' or i == 'c' or i == 'd':\n            string = string.replace(i, '!')\n    \n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.upper()\n    string = string.replace(' ', '')\n    if string.find('T') == -1:\n        return string\n    else:\n        new_string = ''\n        for i in string:\n            if string.find(i)!= -1:\n                i = i.upper()\n                string = string[:string.find(i)] + i + string[string.find(i)+1:]\n        return string\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.replace(' ', '_')\n    string = string.replace('-', '_')\n    string = string.replace('+', '_')\n    string = string.replace('\"', '_')\n    string = string.replace(\"'\", '_')\n    string = string.replacen    '00': ('00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', "
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    return string.swapcase()\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    from math import floor\n    dig1 = floor(n1/10)\n    dig2 = floor((n2/10))\n    result = (dig1 - dig2)**2\n    return result\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(n1):\n        sum += abs(n2 - i)\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    #Step 1: Check that the inputs are valid.\n    if n1 > 10 or n2 > 10:\n        return 0\n    if n1 % 2 == 0:\n        return n2 - n1 + 1\n    if n1 % 2 == 1:\n        return n2 - n1\n    \n    #Step 2: Determine if the two numbers have equal or unequal digits.\n    if n2 >= n1:\n        return n2 - n1 + 1\n    else:\n        return n2 - n1\n    \n    #Step 3: Return the sum of the per-digit differences.\n    return n2 - n1\n    \n    "
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > 9 or n2 > 9:\n        raise ValueError('Error: first argument must be an integer')\n    elif n1 < 0:\n        raise ValueError('Error: first argument must be an integer')\n    elif n2 < 0:\n        raise ValueError('Error: first argument must be an integer')\n    elif n1 == n2:\n        return n1\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # TODO: Write your code here\n    return int(str(n1-n2)[0])\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    if n1 > n2:\n        n1, n2 = n2, n1\n    \n    differences = [n1 - n2, n1 - n2, n1 - n2, n1 - n2, n1 - n2, n1 - n2, n1 - n2, n1 - n2, n1 - n2, n1 - n2]\n    \n    if sum(differences) == 0:\n        return 0\n    \n    return sum(differences)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # define a python function that takes two arguments, n1 and n2\n    # returns their difference\n    if n1 == n2:\n        return 0\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(n1 + 1):\n        sum += digit_diff(n2, i)\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(n1[i]-n2[i] for i in range(10))\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Your code here\n    # Create a list to store the sublists\n    sub_list = []\n    # Go through the array, and add each number to the sublist\n    for i in range(size):\n        sub_list.append(a[i])\n    # Find the subarray sum\n    sub_sum = 0\n    # Create a loop where the index 0 is the first element and the index 1 is the index at which the sub_list is written\n    for i in range(1, size):\n        # Compare the sublist to the sublist at the end of the loop\n        if sub_list[i]!= sub_list[i-1]:\n            # Add the value of the first sub_list to the sub_sum\n            sub_sum += sub_list[i]\n        # Else, the sub_list at the end is the largest sub_list so the sum becomes the largest value\n        else:\n            # If the sub_list at the end is the largest sub_list, then the sub_sum is equal to the sum of all the values in the sub_list\n            # Else, the sub_list at the end is the largest sub_list with a different index than the sub_list at the start\n            if sub_list[i]!= sub_list[i-1]:\n                sub_sum += sub_list[i]\n    # Return the largest sub_sum\n    return sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # TODO: Write your code here\n    sub_list = []\n    for i in range(0, size):\n        sub_list.append(a[i])\n    current_sum = 0\n    for i in range(size):\n        current_sum += sub_list[i]\n        if(size!= i):\n            current_sum += sub_list[i]\n            current_sum -= sub_list[i]\n        else:\n            current_sum += sub_list[i]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    s = 0\n    for i in range(len(a)):\n        s = max(s, sum(a[i:i+size]))\n    return s\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    a.sort()\n    i = 0\n    n = len(a)\n    # print(f\"starting from {i}\")\n    sum = 0\n    current_sum = 0\n    while i < n:\n        # print(f\"i: {i}, current sum: {sum}\")\n        sub_sum = a[i]\n        if sub_sum > 0:\n            current_sum = sub_sum\n            # print(f\"sum = {sum}\")\n            sum = current_sum\n        if current_sum == 0:\n            current_sum = 0\n        i+=1\n    return sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_sum = 0\n    temp_sum = 0\n    for i in range(0, size):\n        if a[i] > max_sub_sum:\n            max_sub_sum = a[i]\n    # print(max_sub_sum)\n    for i in range(0, size):\n        if a[i] == max_sub_sum:\n            temp_sum = temp_sum + a[i]\n            if temp_sum > max_sub_sum:\n                max_sub_sum = temp_sum\n    return max_sub_sum\ndef min_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the smallest contiguous sublist in the given list.\n    '''\n    min_sub_sum = a[0]\n    for i in range(0, size):\n        if a[i] < min_sub_sum:\n            min_sub_sum = a[i]\n    return min_sub_sum\ndef max_sub_array_sum_recursive(a, size, curr_sum):\n    '''\n    Write a function that returns the sum of the largest contiguous sublist in the given list.\n    '''\n    if curr_sum >= a[size - 1]:\n        return max_sub_array_sum(a, size)\n    else:\n        return min_sub_array_sum_recursive(a, size, curr_sum + a[size - 1])\ndef min_sub_array_sum_recursive(a, size, curr_sum):\n    '''\n    Write a function that returns the sum of the smallest contiguous sublist in the given list.\n    '''\n    if curr_sum <= a[size - 1]:\n        return min_sub_array_sum_recursive(a, size, curr_sum)\n    else:\n        return max_sub_array_sum_recursive(a, size, curr_sum + a[size - 1])\ndef print_max_sub_array_sum(a, size):\n    '''\n    Print the sum of the largest contiguous sublist.\n    '''\n    print(\"Maximum contiguous subarray sum is \" + str(max_sub_array_sum(a, size)))\n    print(\"Minimum contiguous subarray sum is \" + str(min_sub_array_sum(a, size)))\n    print(\"\\n\")\ndef print_min_sub_array_sum(a, size):\n    '''\n    Print the sum of the smallest contiguous sublist.\n    '''\n    print(\"Minimum contiguous subarray sum is \" + str(min_sub_array_sum(a, size)))\n    print(\"Maximum contiguous subarray sum is \" + str(max_sub_array_sum(a, size)))\n    print(\"\\n\")\ndef print_max_sum_array(a, size):\n    '''\n    Print the sum of the largest contiguous sublist.\n    '''\n    print(\"Maximum contiguous subarray sum is \" + str(max_sub_array_sum(a, size)))\n    print(\"Minimum contiguous subarray sum is \" + str(min_sub_array_sum(a, size)))\n    print(\"\\n\")\ndef print_min_sum_array(a, size):\n    '''\n    Print the sum of the smallest contiguous sublist.\n    '''\n    print(\"Minimum contiguous subarray sum is \" + str(min_sub_array_sum(a, size)))\n    print(\"Maximum contiguous subarray sum is \" + str(max_sub_array_sum(a, size)))\n    print(\"\\n\")\ndef print_sub_array_sum_recursive(a, size, curr_sum):\n    '''\n    Print the sum of the largest contiguous sublist.\n    '''\n    if curr_sum >= a[size - 1]:\n        print(a[size - 1])\n        print_sub_array_sum_recursive(a, size, curr_sum)\n    else:\n        print(a[size - 1])\n        print_min_sub_array_sum(a, size)\n        print_sub_array_sum_recursive(a, size, curr_sum + a[size - 1])\ndef print_sub_array_sum_recursive(a, size, curr_sum):\n    '''\n    Print the sum of the smallest contiguous sublist.\n    '''\n    if curr_sum <= a[size - 1]:\n        print(a[size - 1])\n        print_sub_array_sum_recursive(a, size, curr_sum)\n    else:\n        print(a[size - 1])\n        print_max_sub_array_sum(a, size)\n        print_sub_array_sum_recursive(a, size, curr_sum + a[size - 1])\ndef print_sum_array(a, size):\n    '''\n    Print the sum of the largest contiguous sublist.\n    '''\n    print(\"Maximum contiguous subarray sum is \" + str(max_sub_array_sum(a, size)))\n    print(\"Minimum contiguous subarray sum is \" + str(min_sub_array_sum(a, size)))\n    print(\"\\n\")\ndef max_sub_array_sum_v2(a, size):\n    '''\n    Write a function that returns the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    elif a[size - 1] >= a[size]:\n        return a[size - 1]\n    else:\n        return max_sub_array_sum_v2(a, size - 1)\ndef min_sub_array_sum_v2(a, size):\n    '''\n    Write a function that returns the sum of the smallest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    elif a[size - 1] <= a[size]:\n        return a[size - 1]\n    else:\n        return min_sub_array_sum_v2(a, size - 1)\ndef max_sub_array_sum_v3(a, size):\n    '''\n    Write a function that returns the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size - 2):\n        max_sum = max(max_sum, a[i + 1] + a[i + 2])\n    return max_sum\ndef min_sub_array_sum_v3(a, size):\n    '''\n    Write a function that returns the sum of the smallest contiguous sublist in the given list.\n    '''\n    min_sum = a[0]\n    for i in range(size - 2):\n        min_sum = min(min_sum, a[i + 1] + a[i + 2])\n    return min_sum\ndef print_max_sub_array_sum_v3(a, size):\n    '''\n    Print the sum of the largest contiguous sublist.\n    '''\n    if size == 0:\n        print(a[0])\n        print_max_sub_array_sum_v3(a, size)\n        return\n    elif a[size - 1] >= a[size]:\n        print(a[size - 1])\n        print_max_sub_array_sum_v3(a, size - 1)\n        return\n    else:\n        print(a[size - 1])\n        print_min_sub_array_sum_v3(a, size - 1)\n        return\ndef print_min_sub_array_sum_v3(a, size):\n    '''\n    Print the sum of the smallest contiguous sublist.\n    '''\n    if size == 0:\n        print(a[0])\n        print_min_sub_array_sum_v3(a, size)\n        return\n    elif a[size - 1] <= a[size]:\n        print(a[size - 1])\n        print_min_sub_array_sum_v3(a, size - 1)\n        return\n    else:\n        print(a[size - 1])\n        print_max_sub_array_sum_v3(a, size - 1)\n        return\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_array_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # base case\n    if size == 0 or a is None:\n        return 0\n    \n    # calculate the last element\n    l = size - 1\n    current_sum = 0\n    \n    # iterate from the right until the length of the array is less than size\n    while l >= 0:\n        current_sum = current_sum + a[l]\n        l = l - 1\n    \n    return current_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_array = []\n    sub_array_sum = 0\n    max_sub_array_sum = -1\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    \n    sub_sum = 0\n    max_sub_sum = -1\n    for i in range(len(a) - size + 1):\n        sub_sum = sum(a[i:i+size])\n        if sub_sum > max_sub_sum:\n            max_sub_sum = sub_sum\n    return max_sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initializing maximum value in sublist\n    max_sum = 0\n    # Iterating over every index\n    for i in range(0,size):\n        max_sum = max(max_sum, a[i])\n    # Returning the sum\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Your code goes here\n    return tuple(sorted(test_tup1 + test_tup2))"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list1 = []\n    test_list2 = []\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    unions = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            unions.append(i)\n    return sorted(unions)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > 0:\n        temp_tup1 = test_tup1[0]\n        for i in range(len(test_tup1)):\n            if i > 0:\n                if test_tup1[i][1] < test_tup1[i-1][1]:\n                    temp_tup1 = (test_tup1[i][0], test_tup1[i-1][1])\n        if temp_tup1 == test_tup2[0]:\n            test_tup1 = (test_tup1[0][0], test_tup1[0][1])\n        else:\n            test_tup1 = (test_tup1[0][0], test_tup1[0][1], temp_tup1[1])\n    if len(test_tup2) > 0:\n        temp_tup2 = test_tup2[0]\n        for i in range(len(test_tup2)):\n            if i > 0:\n                if test_tup2[i][1] < test_tup2[i-1][1]:\n                    temp_tup2 = (test_tup2[i][0], test_tup2[i-1][1])\n        if temp_tup2 == test_tup1[0]:\n            test_tup2 = (test_tup2[0][0], test_tup2[0][1], temp_tup2[1])\n        else:\n            test_tup2 = (test_tup2[0][0], test_tup2[0][1], temp_tup2[1], temp_tup2[2])\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #Elegant solution:\n    if len(test_tup1) > len(test_tup2):\n        return [element for element in test_tup1 for x in test_tup2 if element not in x] + [element for element in test_tup2 for x in test_tup1 if element not in x]\n    else:\n        return [element for element in test_tup2 for x in test_tup1 if element not in x] + [element for element in test_tup1 for x in test_tup2 if element not in x]\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    pass"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return '{},{}'.format(sorted(test_tup1), sorted(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    \n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return_tup = []\n        for index in range(len(test_tup1)):\n            if test_tup1[index] not in return_tup:\n                return_tup.append(test_tup1[index])\n    else:\n        return_tup = []\n        for index in range(len(test_tup2)):\n            if test_tup2[index] not in return_tup:\n                return_tup.append(test_tup2[index])\n    return sorted(return_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return ''.join(sorted(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # iterate through the list\n    len_list = []\n    i = 0\n    # start from the 2nd index\n    while i < len(lst):\n        # iterate through the remaining index\n        j = i + 1\n        # while j > i:\n        #     # if i contains elements\n        #     #   add one to the list\n        #     # end the loop\n        #     if lst[i] > lst[j]:\n        #         len_list.append(lst[i])\n        #         i = i + 1\n        #     else:\n        #         j = j + 1\n        #     # if i is the last element\n        #     # end the loop\n        #     if lst[i] > lst[-1]:\n        #         len_list.append(lst[i])\n        #         i = i + 1\n        #     else:\n        #         i = i + 1\n        # end the loop\n        while j < len(lst):\n            # if i contains elements\n            # end the loop\n            if lst[i] > lst[j]:\n                len_list.append(lst[i])\n                i = i + 1\n                # if i is the last element\n                # end the loop\n            else:\n                j = j + 1\n                # if i is the last element\n                # end the loop\n            # if j contains elements\n            # end the loop\n        len_list.append(lst[-1])\n        i = i + 1\n        j = j + 1\n    # end the loop\n    return len_list\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l=len(lst)\n    if l>0:\n        for i in range(1,l):\n            if lst[i-1]!=lst[i]:\n                return l\n        return l\n    else:\n        return 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    for i in range(1,len(lst)):\n        if(lst[i] > lst[i-1]):\n            longest = max(longest, lst[i]-lst[i-1])\n        elif(lst[i] == lst[i-1]):\n            longest = longest + 1\n    return longest\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 1\n    max_length = 0\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            count = i\n    return count, max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lens = []\n    for i in range(1,len(lst)):\n        lens.append(len(lst[i]))\n    lens = list(dict.fromkeys(lens))\n    return max(lens)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    res = 0\n    for sub_lst in lst:\n        for item in sub_lst:\n            res = max(res, len(sub_lst))\n    return res\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLen = 0\n    maxSubList = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[j][1] > lst[i][1]:\n                if len(maxSubList) > maxLen:\n                    maxLen = len(maxSubList)\n                    maxSubList = [lst[i], lst[j]]\n                continue\n            if lst[i][1] == lst[j][1] and lst[i][0] <= lst[j][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[j][0] > lst[i][0]:\n                continue\n    return maxLen\n    \ndef Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest sublist.\n    '''\n    minLen = 0\n    minSubList = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i][1] < lst[j][1] and lst[i][0] >= lst[j][0]:\n                continue\n            if lst[i][1] < lst[j][1] and lst[j][0] < lst[i][0]:\n                continue\n            if lst[i][1] > lst[j][1] and lst[j][0] <= lst[i][0]:\n                continue\n            if lst[j][1] > lst[i][1] and lst[i][0] > lst[j][0]:\n                continue\n            if lst[j][1] == lst[i][1] and lst[i][0] >= lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] < lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] <= lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[j][0] > lst[i][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[j][0] < lst[i][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[j][0] >= lst[i][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] > lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] < lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] <= lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] < lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] == lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] < lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] == lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] <= lst[j][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[j][0] < lst[i][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[i][0] < lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] == lst[j][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[i][0] > lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] > lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] < lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] > lst[j][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[j][0] < lst[i][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] < lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] == lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] > lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] > lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] >= lst[j][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[j][0] > lst[i][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[i][0] == lst[j][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[i][0] < lst[j][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[j][0] < lst[i][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[j][0] == lst[i][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[i][0] > lst[j][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[j][0] < lst[i][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[i][0] < lst[j][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[i][0] < lst[j][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[i][0] < lst[j][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[i][0] > lst[j][0]:\n                continue\n            elif lst[i][1] == lst[j][1] and lst[j][0] < lst[i][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] == lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] < lst[j][0]:\n                continue\n            elif lst[j][1] == lst[i][1] and lst[i][0] < lst[j][0]:\n                continue\n            elif "
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    largest=0\n    for i in range(len(lst)):\n        # print(lst)\n        for j in range(len(lst)):\n            # print(lst[j][i])\n            if(lst[j][i]>largest):\n                largest=lst[j][i]\n    return largest\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l = len(lst)\n    d = lst[0]\n    for i in range(1,l):\n        if lst[i] > d:\n            d = lst[i]\n    return d\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    res = re.findall('\"(?:[^\"]|\"\")*\"', text)\n    return res\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r'[\u201c\u201d\u2018\u2019]*[\u2019\u2018\u2019](?:[^\u201c\u201d\u2018])*[\u2019\u2018\u2019]*'\n    extracted = re.findall(regex, text)\n    return extracted\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Validate the input\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string\")\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.search(r'(\\\".*?\\\"|\\\".*?\\\")', text).group()\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return [i for i in text.split('\"') if i.strip()]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.split(\"(['\\\"])(.*)(['\\\"])(.*)\", text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'([^\\s]+)[=](\\s|$)'\n    match = re.search(pattern, text)\n    if match is None:\n        return False\n    else:\n        return match.group(1)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # The idea here is to extract the values in the brackets, while also removing any whitespace and punctuation marks.\n    values = re.split('(?<=[^\"]|\"\")[\"]', text.strip())\n    return values[:-1]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if len(text) == 0:\n        return ()\n    values = []\n    i = 0\n    while i < len(text) and text[i] in ['(', '{', '}', '[', ']', '\"', '\\'', '<', '>', ',']:\n        i += 1\n    if i < len(text):\n        values.append(text[i])\n    else:\n        values.append(\"\")\n    i += 1\n    while i < len(text):\n        if text[i] == '\\\\' and text[i - 1] in '\"\\'\":\n            j = i\n            while j < len(text) and text[j]!= '\\\\':\n                j += 1\n            values.append(text[i:j])\n            i = j\n        elif text[i] == '\\\\':\n            values.append(text[i:i + 2])\n        else:\n            values.append(text[i])\n        i += 1\n    return tuple(values)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"[^'\\\"\\n](?:.|\\n)*?\"\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # if the length of the array is not odd or even then they cannot have a pair.\n    if(len(arr)%2 == 0 or len(arr)%2 == 1):\n        print(\"Invalid Input\")\n        return 0\n    \n    # Defining the maximum value of the array.\n    max_val = max(arr)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # 1\n    possible_pairs = {}\n    for i in arr:\n        for j in arr:\n            if i!= j:\n                if i in possible_pairs:\n                    possible_pairs[i] += 1\n                else:\n                    possible_pairs[i] = 1\n    # 2\n    count = 0\n    for i in possible_pairs:\n        if possible_pairs[i] == 2:\n            count += 1\n    # 3\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    res=0\n    arr.sort()\n    n=len(arr)\n    for i in range(n):\n        if(arr[i]!=arr[i-1]):\n            res+=1\n    return res\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr) < 2: \n        return 0\n    count = 0\n    i = 0\n    while i < len(arr) -1: \n        if arr[i]!= arr[i+1]: \n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    if n == 1:\n        for i in arr:\n            if i == arr[0]:\n                pairs = pairs + 1\n        return pairs\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if arr[i] == arr[j]:\n                    pairs = pairs + 1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr) <= 1:\n        return 0\n    \n    a = arr[0]\n    b = arr[1]\n    \n    count = 0\n    for i in range(2,n+1):\n        if a!= b:\n            count+=1\n            a = b\n            b = i\n            \n    return count\n        "
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    ans=0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]!=arr[j]:\n                ans+=1\n    return ans\ndef count_Pairs_2(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    ans=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i]!=arr[j]:\n                ans+=1\n    return ans\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    num_pairs = 0\n    if(len(arr) == 0):\n        return 0\n    if(len(arr) <= 1):\n        return 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if(arr[i] == arr[j]):\n                num_pairs += 1\n            else:\n                break\n    return num_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count = 0\n    for i in range(n-2):\n        if arr[i] < arr[i+1] and arr[i+1] < arr[i+2]:\n            count +=1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word\nprint(split(input('What would you like to split up?'))"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # YOUR CODE HERE\n    return word \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    word_list = list(word)\n    return word_list\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower() \n    return [x for x in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    split_string = \"\"\n    for letter in word:\n        split_string += letter\n    return split_string\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # your code goes here\n    result = []\n    index = 0\n    while index < len(word):\n        if word[index] =='':\n            result.append(word[index:index+1])\n            index += 1\n        else:\n            result.append(word[index])\n            index += 1\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    \n    # create a new list that will hold the values\n    newList = []\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your code here\n    return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    return sum(map(int, str(abs(n))))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum = sum + n%10\n        n = n//10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return int(n) + sum(int(d) for d in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your code here\n    if n < 0:\n        print('Invalid input, please try again')\n    else:\n        return n\n        \nprint(sum_digits(-100))"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n!= 0:\n        s += n % 10\n        n //= 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n <= 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    # here n is a positive integer and sum is in the range 0-9\n    # return the sum\n    \n    sum = 0\n    while(n):\n        sum = sum * 10 + n % 10\n        n = n // 10\n    \n    return sum\n    \n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    n = str(n)\n    \n    sum = 0\n    \n    for i in n:\n        sum += int(i)\n        \n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n%10\n        n = n//10\n    return sum\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list2 = []\n    for item in list1:\n        list2.append(item)\n    if(list1 == sorted(list2)):\n        print(\"List is sorted.\")\n    else:\n        print(\"List is not sorted.\")\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    temp=[]\n    for i in list1:\n        temp.append(i)\n    return sorted(temp)==list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    check = True\n    while (check):\n        check = False\n        for i in range(0, len(list1) - 1):\n            if (list1[i] > list1[i + 1]):\n                check = True\n                temp = list1[i]\n                list1[i] = list1[i + 1]\n                list1[i + 1] = temp\n        return list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        for i in range(len(list1) -1):\n            if list1[i] > list1[i + 1]:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted = True\n    if len(list1) == 0:\n        return sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            sorted = False\n    return sorted"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    isSorted = True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            isSorted = False\n    return isSorted\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [None for x in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append(dict())\n    return result\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(0,length):\n        d = {}\n        d['name'] = 'Name'\n        d['age'] = 'Age'\n        d['gender'] = 'Gender'\n        l.append(d)\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list1 = []\n    for i in range(0,length):\n        list1.append({})\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict = []\n    for _ in range(length):\n        empty_dict.append({})\n    return empty_dict\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict = []\n    for i in range(length):\n        empty_dict.append({})\n    return empty_dict\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    nested_dict = {}\n    empty_dict = {}\n    return nested_dict, empty_dict\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO: Create a function named list_of_sublists that sorts each sublist of strings in a given list of lists.\n    return None\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)-1):\n        for j in range(len(list1[i])):\n            if list1[i][j] < list1[i+1][j]:\n                list1[i][j], list1[i+1][j] = list1[i+1][j], list1[i][j]\n            elif list1[i][j] > list1[i+1][j]:\n                list1[i][j], list1[i+1][j] = list1[i+1][j], list1[i][j]\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    i = 0\n    j = 0\n    while i < len(list1) - 1:\n        while j < len(list1[i]) - 1:\n            if list1[i][j] == list1[i][j + 1]:\n                list1[i][j] = list1[i][j]\n                del list1[i][j + 1]\n                j -= 1\n            else:\n                j += 1\n        i += 1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sort_sublists_recursive(list1, 0, len(list1) - 1)\n    \ndef sort_sublists_recursive(list1, start, end):\n    '''\n    Write a function that sorts a given sublist in ascending order.\n    '''\n    if start < end:\n        split = partition(list1, start, end)\n        sort_sublists_recursive(list1, start, split - 1)\n        sort_sublists_recursive(list1, split + 1, end)\n        \ndef partition(list1, start, end):\n    '''\n    Write a function that returns a partition of a given sublist\n    '''\n    pivot = list1[end]\n    j = start\n    for i in range(start, end):\n        if list1[i] > pivot:\n            list1[i], list1[j] = list1[j], list1[i]\n            j += 1\n    list1[j], list1[end] = list1[end], list1[j]\n    return j\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) == 1:\n        return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) == 0:\n        return None\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in list1:\n        for elem in sublist:\n            new_list.append(elem)\n    new_list.sort()\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    length = len(list1)\n    for i in range(length):\n        for j in range(0,length-1-i):\n            if list1[j][0] > list1[j+1][0]:\n                temp = list1[j]\n                list1[j] = list1[j+1]\n                list1[j+1] = temp\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    newlist=[]\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n        newlist.append(list1[i])\n    \n    return newlist\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print('The given list of lists is:\\n',list1)\n    print('---------------------------------------------------------------------------------------------------')\n    for i in range(len(list1)):\n        for j in range(i):\n            if list1[i][j] > list1[i][j+1]:\n                temp = list1[i][j]\n                list1[i][j] = list1[i][j+1]\n                list1[i][j+1] = temp\n                print('\\t',list1[i])\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Your code here\n    # ===Modify here to complete this function===\n    list_of_nums = nums.copy()\n    for i in range(len(list_of_nums)):\n        if list_of_nums[i] not in list_of_nums[i+1:]:\n            list_of_nums.remove(list_of_nums[i])\n    return list_of_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # your code here\n    return\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    numbers = []\n    for num in nums:\n        if num not in numbers:\n            numbers.append(num)\n    return numbers\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    for i in range(len(nums)):\n        if nums[i] not in seen:\n            seen.add(nums[i])\n            # \"set.intersection\" is a function in Python\n            # it takes two arguments: the two values, and the set\n            # \"seen\" contains all of the elements in the set\n            # (which could be any iterable type, but not always)\n            # the set is used to check if an element is already present\n            # (e.g. a = [1,1,2,2,3,3], set(a) = {1,2,3})\n            # or the set may not contain any elements\n            # (e.g. a = [1,1,2,2,3,3], set(a) = {1,2,3})\n            # as a result, we can not use \"set.intersection\" to get both elements\n            # (e.g. a = [1,1,2,2,3,3], set(a) = {1,2,3})\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_nums = list()\n    new_nums.append(nums[0])\n    if len(nums) > 1:\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i-1]:\n                continue\n            else:\n                new_nums.append(nums[i])\n    return new_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Initialize an empty list\n    nums_list = []\n    # Loop through the list of numbers\n    for num in nums:\n        # Check if the current number is not duplicated\n        if num not in nums_list:\n            # Append the current number\n            nums_list.append(num)\n    # Return the list\n    return nums_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # dictionary to keep track of number of occurrences of each number.\n    # We'll create a dictionary to keep track of number of occurrences.\n    # Use the.get() method to fetch values and convert to string.\n    nums = list(map(str, nums))\n    nums = dict(zip(nums, range(len(nums))))\n    \n    # keep track of number of occurrences of each number.\n    # We'll create a dictionary to keep track of number of occurrences.\n    # Use the.get() method to fetch values and convert to string.\n    counts = defaultdict(int)\n    # loop through the list, incrementing counts for each unique number.\n    # The following loop will execute as long as the values in the dictionary, i.e.\n    # the number we've checked is not the last number in the list, or if we've reached the end of our list.\n    while len(nums) > 0 and len(counts) < len(nums):\n        # if the current value in the dictionary is the last number, increment counts and return.\n        if nums[counts[nums[-1]]] == -1:\n            counts[nums[-1]] += 1\n            nums.pop()\n        else:\n            # if the current value is not the last number, decrement counts and return.\n            counts[nums[-1]] -= 1\n            nums.pop()\n        # we now have seen the last value in our dictionary and can now break\n        # out of the loop so that we can use next() to get the next unique number.\n    # Now that we've got our final list, we can return it back to the calling function.\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    nums = set(nums)\n    return list(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if nums == []:\n        return 0\n    else:\n        nums.sort()\n        dict = {}\n        for i in range(len(nums)):\n            if nums[i] not in dict.keys():\n                dict[nums[i]] = 1\n            else:\n                dict[nums[i]] += 1\n        return len(dict.keys())\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return [x for x in list_data if x not in set(list_data)]\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #STEP 1\n    #Initialize empty list to return\n    new_list = []\n    #Iterate through the list\n    for num in list_data:\n        #If num is not in new_list, add it to new_list\n        if num not in new_list:\n            new_list.append(num)\n    #Return the product of unique number\n    return sum(new_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_result = []\n    for data in list_data:\n        if data not in list_result:\n            list_result.append(data)\n    return list_result\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set()\n    for num in list_data:\n        if num in unique_numbers:\n            continue\n        else:\n            unique_numbers.add(num)\n    return len(unique_numbers)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Using the dictionary function, convert the list to a dictionary\n    # then iterate through the list to find the product.\n    # create a key to the value of the product dictionary\n    # return the product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for num in list_data:\n        result *= num\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_final=[]\n    for el in list_data:\n        if el not in list_final:\n            list_final.append(el)\n    return list_final\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    counter = 1\n    for i in range(0,len(list_data),1):\n        list_data[i] = list_data[i]*counter\n        counter += 1\n    return list_data\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_set = set(list_data)\n    return list_data\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    pi = math.pi\n    r_t = (r**2)*pi\n    area = pi*r_t*h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    # Write your code here\n    return (r**2)*(h**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (r**2 * (2 * pi))/3\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #Calculate distance\n    r1=r\n    r2=r\n    d=float(r1)\n    d1=float(r2)\n    if (d1<=d) and (d<=d2) and (d1<=d2) and (d1>d2):\n        m=(d1**2+d2**2-2*d1*d2)/(2*d1)\n        s=m*3.14*h/4\n        print(\"Surface area of cylinder is %.2f\" % s)\n    else:\n        print(\"Incorrect radius and height\")\n        \nsurfacearea_cylinder(r=float(input(\"Enter the radius of the cylinder (in meters): \")),h=float(input(\"Enter the height of the cylinder (in meters): \")))"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # print(type(h))\n    # print(type(r))\n    # print(type(r*h))\n    return r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r**2*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4 * pi * r * h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #number of sides\n    sides = int(h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S=4*h*r\n    return S\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfaceArea = r * h\n    return surfaceArea\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    count=0\n    for i in range(len(A)):\n        for j in range(len(A[i])):\n            if A[i][j]==B[j]:\n                count+=1\n    return count==len(A)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = len(B) - 1\n    while i < j:\n        if A[i] < B[j]:\n            i += 1\n        elif B[j] < A[i]:\n            j -= 1\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)==len(B):\n        return all(A[i]==B[i] for i in range(len(A)))\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return B in A or A == B\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(0,len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\n    \ndef make_upstream(A,B,C): \n    '''\n    Write a python function to make a list of all the elements which are not present in both the list A and B.\n    '''\n    for i in range(0,len(A)): \n        if A[i] not in B and A[i] not in C: \n            C.append(A[i]) \n            \ndef make_downstream(A,B,C): \n    '''\n    Write a python function to make a list of all the elements which are not present in both the list A and B.\n    '''\n    for i in range(0,len(B)): \n        if B[i] not in A and B[i] not in C: \n            C.append(B[i])\n            \ndef union(A,B,C): \n    '''\n    Write a python function to make a list of all the elements which are not present in both the list A and B.\n    '''\n    for i in range(0,len(C)): \n        if A[i] not in B and A[i] not in C: \n            C[i] = A[i]\n            \ndef intersection(A,B,C): \n    '''\n    Write a python function to make a list of all the elements which are present in both the list A and B.\n    '''\n    for i in range(0,len(C)): \n        if A[i] in B and A[i] in C: \n            C[i] = A[i]\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] == A[j]: \n                return False \n    return True \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A = set(A)\n    B = set(B)\n    if len(A-B)>0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n    \ndef main():\n    '''\n    This is a module.\n    '''\n    n = int(input('Give me a number: '))\n    print('The factorial of {} is: {}'.format(n, last_Digit_Factorial(n)))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    l = len(str(n))\n    if(l==0):\n        return 0\n    else:\n        return int(str(n)[l-1])\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return (n - 1) * (factorial(n - 1))\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    else: \n        return n%10+last_Digit_Factorial(n//10)"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1:\n        return 0\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = []\n    sum = 0\n    for i in range(1,n+1):\n        sum = 0\n        while (i):\n            if (i%10):\n                sum = sum + i%10\n            else:\n                sum = sum + i\n            i = i//10\n        fact.append(sum)\n    return fact[-1]\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # YOUR CODE HERE\n    if n==0:\n        return 0\n    else:\n        return n%10\ndef number_to_factorial(n):\n    '''\n    Write a python function that converts an integer to a factorial.\n    '''\n    # YOUR CODE HERE\n    if n==0:\n        return 0\n    else:\n        return n*number_to_factorial(n-1)\ndef sum_of_fibonacci_numbers(n):\n    '''\n    Write a python function that adds all the numbers in the list\n    '''\n    # YOUR CODE HERE\n    i=0\n    fib=[]\n    while i<n:\n        fib.append(i)\n        i+=1\n    i=0\n    while i<n:\n        fib.append(fib[i]+fib[i+1])\n        i+=2\n    return fib\ndef factorial(n):\n    '''\n    Write a python function that returns the factorial of an integer.\n    '''\n    # YOUR CODE HERE\n    i=1\n    if n<1:\n        return 0\n    else:\n        while i<n:\n            i=i*i\n        return i\ndef fibonacci(n):\n    '''\n    Write a python function that returns the nth fibonacci number.\n    '''\n    # YOUR CODE HERE\n    i=0\n    fibonacci=[]\n    while i<n:\n        fibonacci.append(i)\n        i+=1\n    i=0\n    while i<n:\n        fibonacci.append(fibonacci[i]+fibonacci[i+1])\n        i+=2\n    return fibonacci\ndef factorial_n(n):\n    '''\n    Write a python function that returns the nth factorial number.\n    '''\n    # YOUR CODE HERE\n    i=0\n    factorial=[]\n    while i<n:\n        factorial.append(factorial[i]+factorial[i+1])\n        i+=1\n    return factorial\ndef factorial_k(n,k):\n    '''\n    Write a python function that returns the nth factorial number using\n    recursion.\n    '''\n    # YOUR CODE HERE\n    if n<=k:\n        return n\n    elif n>k:\n        return factorial_k(n,k)\n    else:\n        return n*factorial_k(n-1,k)\ndef factorial_k_prime(n,k):\n    '''\n    Write a python function that returns the nth factorial using\n    recursion with prime numbers.\n    '''\n    # YOUR CODE HERE\n    if n<=k:\n        return n\n    elif n>k:\n        return n*factorial_k(n,k)\n    else:\n        return n*factorial_k_prime(n-1,k)\ndef factorial_k_prime_prime(n,k):\n    '''\n    Write a python function that returns the nth factorial using\n    recursion with prime numbers and prime numbers with primes.\n    '''\n    # YOUR CODE HERE\n    if n<=k:\n        return n\n    elif n>k:\n        return n*factorial_k_prime_prime(n-1,k)\n    else:\n        return n*factorial_k_prime_prime(n-1,k)\ndef perfect_number(n):\n    '''\n    Write a python function that determines whether a number is a perfect number.\n    '''\n    # YOUR CODE HERE\n    if n==0:\n        return True\n    elif n==1:\n        return False\n    elif n%2==0:\n        return False\n    else:\n        if (n-1)/n==n:\n            return True\n        else:\n            return False\ndef perfect_number_1(n):\n    '''\n    Write a python function that determines whether a number is a perfect number.\n    '''\n    # YOUR CODE HERE\n    if n==0:\n        return True\n    elif n==1:\n        return False\n    else:\n        if (n-1)/n==n:\n            return True\n        else:\n            return False\ndef is_prime(n):\n    '''\n    Write a python function that determines whether a number is a prime number.\n    '''\n    # YOUR CODE HERE\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return False\n    else:\n        if n%2==0:\n            return False\n        else:\n            if n%3==0:\n                return False\n            else:\n                if n%5==0:\n                    return False\n                else:\n                    if n%7==0:\n                        return False\n                    else:\n                        return True\ndef is_prime_prime(n):\n    '''\n    Write a python function that determines whether a number is a prime number.\n    '''\n    # YOUR CODE HERE\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return True\n    if n==3:\n        return True\n    if n==4:\n        return True\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    if n%7==0:\n        return False\n    else:\n        if n%2==0:\n            return False\n        else:\n            if n%3==0:\n                return False\n            else:\n                if n%5==0:\n                    return False\n                else:\n                    if n%7==0:\n                        return False\n                    else:\n                        return True\ndef is_prime_prime_prime(n):\n    '''\n    Write a python function that determines whether a number is a prime number.\n    '''\n    # YOUR CODE HERE\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return True\n    if n==3:\n        return True\n    if n==4:\n        return True\n    if n==5:\n        return True\n    if n==6:\n        return True\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    if n%7==0:\n        return False\n    else:\n        if n%2==0:\n            return False\n        else:\n            if n%3==0:\n                return False\n            else:\n                if n%5==0:\n                    return False\n                else:\n                    if n%7==0:\n                        return False\n                    else:\n                        return True\ndef is_prime_prime_prime_prime(n):\n    '''\n    Write a python function that determines whether a number is a prime number.\n    '''\n    # YOUR CODE HERE\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return True\n    if n==3:\n        return True\n    if n==4:\n        return True\n    if n==5:\n        return True\n    if n==6:\n        return True\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    if n%7==0:\n        return False\n    else:\n        if n%2==0:\n            return False\n        else:\n            if n%3==0:\n                return False\n            else:\n                if n%5==0:\n                    return False\n                else:\n                    if n%7==0:\n                        return False\n                    else:\n                        return True\ndef is_prime_prime_prime_prime(n):\n    '''\n    Write a python function that determines whether a number is a prime number.\n    '''\n    # YOUR CODE HERE\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return True\n    if n==3:\n        return True\n    if n==4:\n        return True\n    if n==5:\n        return True\n    if n==6:\n        return True\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    if n%7==0:\n        return False\n    else:\n        if n%"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n%10+last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n >= 1:\n        if n % 10 == 0:\n            break\n        n = n // 10\n    if n == 0:\n        return 0\n    else:\n        return n - 1\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial=1\n    for i in range(1,n+1):\n        factorial=factorial*i\n    return factorial\ndef last_Digit_Factorial_Sum(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial=1\n    summ=0\n    while n>0:\n        summ+=n%10\n        n=n//10\n    return summ\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # get length of lists\n    a = len(list1)\n    b = len(list2)\n    c = len(list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    list3.extend(list1)\n    list3.extend(list2)\n    list3.extend(list3)\n    \n    return list3\n    \ndef main():\n    print('*** Interleaving Lists ***')\n    list1 = [1,2,3,4,5]\n    list2 = [6,7,8,9]\n    list3 = [10,11,12,13]\n    \n    print('First list: ',list1)\n    print('Second list: ',list2)\n    print('Third list: ',list3)\n    \n    interleave_lists(list1,list2,list3)\n    \n    print('Interleaved lists: ',list3)\n    \n    \nmain()\n    "
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list3 + list1 + list2\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)<len(list2):\n        return list1\n    elif len(list2)<len(list1):\n        return list2\n    elif len(list3)<len(list2):\n        return list3\n    else:\n        return list3+list2+list1\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newlist = []\n    for i in range(len(list1)):\n        newlist.append(list1[i])\n        newlist.append(list2[i])\n        newlist.append(list3[i])\n    return newlist\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list=[]\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            new_list.append(list1[i])\n            new_list.append(list2[j])\n            new_list.append(list3[i])\n        list1,list2,list3=new_list\n    return list1,list2,list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1+list2+list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4 = list1+list2+list3\n    return list4\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    # Write your code here.\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    length_list1 = len(list1)\n    length_list2 = len(list2)\n    length_list3 = len(list3)\n    if length_list1 == 0 or length_list2 == 0 or length_list3 == 0:\n        return []\n    index = 0\n    lenght = max(length_list1,length_list2,length_list3)\n    list_interleave = []\n    for i in range(lenght):\n        list_interleave.append([])\n    for i in range(lenght):\n        for j in range(lenght):\n            if index < i:\n                list_interleave[i].append(list1[j])\n            elif index < (i+1) and index > j:\n                list_interleave[i].append(list2[j])\n            else:\n                list_interleave[i].append(list3[j])\n            index += 1\n    return list_interleave\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return list(set1.difference(set2))\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return test_tup1[1]\n    else:\n        return test_tup2[1]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diss = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i!= j:\n                diss.append(i)\n    return diss\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = set(test_tup1) - set(test_tup2)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    temp1=[]\n    temp2=[]\n    for i in range(len(test_tup1)):\n        temp1.append(test_tup1[i][0])\n        temp2.append(test_tup2[i][0])\n    count=0\n    for i in range(len(temp1)):\n        for j in range(len(temp2)):\n            if (temp1[i]==temp2[j]):\n                count+=1\n    return count\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    num1, num2 = len(test_tup1), len(test_tup2)\n    if num1!= num2:\n        raise Exception('Number of elements in the two tuples must be same.')\n    for i in range(num1):\n        for j in range(i+1, num1):\n            if test_tup1[i]!= test_tup2[j]:\n                return test_tup1[i], test_tup2[j]\n    raise Exception('No element in the tuples are found.')\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup3 = test_tup1\n    if (len(test_tup1)!= len(test_tup2)):\n        print(test_tup1)\n        print(test_tup2)\n        print(test_tup3)\n        return\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1, test_tup2 = tuple(test_tup1), tuple(test_tup2)\n    # remove the first element because the tuple is immutable\n    test_tup1, test_tup2 = test_tup1[1:], test_tup2[1:]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if (test_tup1[i]!= test_tup2[j]):\n                dissimilar.append((test_tup1[i], test_tup2[j]))\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = []\n    temp_tup = []\n    for i in range(0, len(test_tup1)):\n        for j in range(0, len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                if j > i:\n                    temp_tup.append((test_tup1[i], test_tup2[j]))\n                else:\n                    temp_tup.append((test_tup2[j], test_tup1[i]))\n    for i in range(0, len(test_tup1)):\n        for j in range(0, len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                res.append((test_tup1[i], test_tup2[j]))\n    return res\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if test_tuple[0] < test_tuple[1] and even_fnc(test_tuple, even_fnc):\n        return True\n    elif test_tuple[0] < test_tuple[1] and not even_fnc(test_tuple, even_fnc):\n        return False\n    elif test_tuple[1] < test_tuple[0] and even_fnc(test_tuple, even_fnc):\n        return True\n    elif test_tuple[1] < test_tuple[0] and not even_fnc(test_tuple, even_fnc):\n        return False\n    elif test_tuple[0] < test_tuple[1] and not even_fnc(test_tuple, even_fnc):\n        return False\n    return True\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = test_tuple[0] \n    odd_list = test_tuple[1] \n    even_tuple = (even_list, even_fnc(even_list))\n    odd_tuple = (odd_list, odd_fnc(odd_list))\n    return even_tuple, odd_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even = test_tuple[0]\n    for i in range(len(test_tuple)):\n        if test_tuple[i] == even:\n            test_tuple[i] = test_tuple[i+1]\n            test_tuple[i+1] = even\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create a variable for empty list.\n    even_ele = [] \n    # Check if tuple is a tuple or not.\n    if type(test_tuple) is tuple: \n        # Iterate through the tuple for each element.\n        for n in range(0, len(test_tuple)):\n            if test_tuple[n] % 2 == 0: \n                even_ele.append(test_tuple[n])\n        \n        # Convert even_ele to list.\n        even_ele = list(even_ele)\n        # Set odd elements to 0.\n        even_ele = even_ele[::-1]\n        # Return even_ele.\n        return even_ele\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Check the type of the tuple and the function\n    if type(test_tuple)!= tuple:\n        raise TypeError(\"The given test tuple is not a tuple\")\n    elif not (len(test_tuple) == len(even_fnc)):\n        raise ValueError(\"The given even_fnc and the given test tuple are not of the same size\")\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(lambda x : not x.is_even, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_ele = []\n    for ele in test_tuple:\n        if ele % 2 == 0:\n            even_ele.append(ele)\n        else:\n            even_ele.append(None)\n    even_ele.append(None)\n    return even_ele\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even = even_fnc(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if test_tuple[i] % 2 == 0:\n            if even!= test_tuple[i]:\n                even = even\n        else:\n            even += test_tuple[i]\n    if even == test_tuple[0]:\n        return test_tuple[0]\n    elif even!= test_tuple[0]:\n        return even\n    else:\n        return test_tuple[0]\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    if not isinstance(test_tuple, tuple) or len(test_tuple) == 0:\n        raise ValueError('Input must be a tuple.')\n    \n    even_element = even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(*test_tuple)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((b*s)**2)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return abs(b*s*s - b*s*s)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    w = len(b)\n    h = len(b[0])\n    return w * h"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    b = b / 2.0\n    s = s / 2.0\n    #write your code here\n    for i in range(0,int(b)):\n        for j in range(0,int(s)):\n            area+=math.pow(s,2)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #print(f'{s}x{s}', end=' ')\n    c = s*s\n    #print(f'{c}', end=', ')\n    a = 2*b\n    #print(f'{a}', end=', ')\n    for i in range(s-1,0,-1):\n        #print(f'{a}', end=', ')\n        a = a*b\n        #print(f'{a}', end=', ')\n    #print('$')\n    return c + a\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s=s+1\n    return s*(s+1)*(2*b+1)*(2*b+1)-b*(b+1)*(b+1)*(b+1)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((4/3)*math.pi*(b**2)*(s**3))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    h=b*s\n    surface_area=0\n    for i in range(s):\n        for j in range(s):\n            surface_area+=h*(i+j)\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = s*s\n    for i in range(b):\n        area = area + s*s\n        s = s - 1\n    print(\"The surface area of a pyramid with the given base edge and height is\",area)\n    \ndef cube(b,s): \n    '''\n    Write a python function to find the cube area of a cube pyramid with a given base edge and height.\n    '''\n    area = (b**3) * s**3\n    print(\"The cube area of a pyramid with the given base edge and height is\",area)\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    try:\n        my_dict = {}\n    except TypeError:\n        print(\"It's an error to use this function\")\n    return my_dict\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return \"Error: dictionary is empty\"\n    else:\n        return \"Success\"\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return(len(dict1) == 0)\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    num_list = []\n    for i in range(1,num+1):\n        num_list.append(i)\n    print(num_list)\n    return num_list\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    sum_of_catalan_numbers = 0\n    \n    n = num\n    \n    while n!= 0:\n        \n        sum_of_catalan_numbers += n * catalan_function(n - 1)\n        \n        n -= 1\n    \n    return sum_of_catalan_numbers\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def dp(n):\n        if n==0:\n            return 1\n        elif n==1:\n            return 2\n        else:\n            return dp(n-1) + dp(n-2)\n    return dp(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    if num == 2:\n        return 1\n    if num % 2 == 0:\n        return (1+catalan_number(num//2))\n    return catalan_number(num-1)+catalan_number(num//2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1]\n    i = 0\n    while i < num:\n        catalan.append(catalan[i]+catalan[i+1])\n        i = i+2\n    return sum(catalan[num])\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    count = 0\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        for i in range(2, num):\n            count += 2 * catalan_number(i)\n        return count\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    n = num\n    if (n == 1 or n == 0):\n        return 1\n    else:\n        if n > 1:\n            return catalan_number(n-1) + catalan_number(n-2)\n        else:\n            return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    i = 0\n    res = 0\n    while i < num:\n        res = res + i\n        i = i + 1\n    return res\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def factorial(n):\n        if n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    def gcd(n1, n2):\n        if n1 < n2:\n            n1, n2 = n2, n1\n        while n2!= 0:\n            n1, n2 = n2, n1 % n2\n        return n1\n    def is_prime(n):\n        if n == 1:\n            return False\n        elif n == 2 or n == 3:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    def prime_factors(n):\n        factors = []\n        while n!= 1:\n            if is_prime(n):\n                factors.append(n)\n            n = gcd(n, n)\n        return factors\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    import math\n    if num==0:\n        return 1\n    elif num==1:\n        return 2\n    elif num==2:\n        return 4\n    elif num%2==0:\n        return catalan_number(num-1)*catalan_number(num-2)\n    else:\n        return catalan_number(num-1)+(catalan_number(num-2)+catalan_number(num-3))\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regexp = r'(ly|L|L|ly|ly|Ly)'\n    pattern = re.compile(regexp)\n    pos = 0\n    result = 0\n    for i in range(len(text)):\n        if text[i] in ['ly','LY','ly','Ly']:\n            pos = text[i] + pos\n            result = 1\n            break\n    if result == 0:\n        return -1\n    else:\n        return pos\ndef find_possible_adverbs(text, pos):\n    '''\n    Finds the possible adverbs ending with ly, ly, ly, ly, ly and ly.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    for i in range(len(pos)):\n        if pos[i] == 'ly':\n            pos = pos[:i]\n            break\n    if pos == [''] or pos == ['']:\n        pos = []\n    if pos[-1]!= 'ly':\n        pos.append('ly')\n    return pos\ndef find_word_at_pos(text, pos):\n    '''\n    Finds the word at the given position in a given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    word = ''\n    for i in range(len(pos)):\n        if pos[i] == 'ly':\n            word = word + pos[i] + pos[0][pos[i].index('ly')+1:]\n    return word\ndef find_adverb_num(text, pos):\n    '''\n    Finds the adverb with the given position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try:\n        n = int(pos[-1])\n    except:\n        n = -1\n    return n\ndef find_adverb_word(text, pos):\n    '''\n    Finds the word that ends with ly or ly and its position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try:\n        w = pos[-1] + pos[-2]\n    except:\n        w = ''\n    return w\ndef find_adverb_verb(text, pos):\n    '''\n    Finds the verb ending with ly and its position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try:\n        v = pos[-1]\n    except:\n        v = ''\n    return v\ndef find_adverb_adverb(text, pos):\n    '''\n    Finds the adverb ending with ly and its position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try:\n        ad = pos[-1] + pos[-2]\n    except:\n        ad = ''\n    return ad\ndef find_adverb(text, pos):\n    '''\n    Finds the adverb ending with ly and its position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try:\n        ad = pos[-1] + pos[-2]\n    except:\n        ad = ''\n    return ad\ndef find_adverb_noun(text, pos):\n    '''\n    Finds the noun ending with ly and its position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try:\n        noun = pos[-1] + pos[-2]\n    except:\n        noun = ''\n    return noun\ndef find_adverb_verb_noun(text, pos):\n    '''\n    Finds the verb ending with ly and its position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try:\n        vnoun = pos[-1] + pos[-2]\n    except:\n        vnoun = ''\n    return vnoun\ndef find_adverb_adverb_noun(text, pos):\n    '''\n    Finds the adverb ending with ly and its position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try:\n        adnoun = pos[-1] + pos[-2]\n    except:\n        adnoun = ''\n    return adnoun\ndef find_adverb_noun_verb(text, pos):\n    '''\n    Finds the noun ending with ly and its position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try:\n        vnoun = pos[-1] + pos[-2]\n    except:\n        vnoun = ''\n    return vnoun\ndef find_noun_adverb(text, pos):\n    '''\n    Finds the adverb ending with ly and its position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try:\n        ad = pos[-1] + pos[-2]\n    except:\n        ad = ''\n    return ad\ndef find_noun_verb(text, pos):\n    '''\n    Finds the verb ending with ly and its position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try:\n        noun = pos[-1] + pos[-2]\n    except:\n        noun = ''\n    return noun\ndef find_noun_adverb(text, pos):\n    '''\n    Finds the adverb ending with ly and its position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try:\n        ad = pos[-1] + pos[-2]\n    except:\n        ad = ''\n    return ad\ndef find_verb_adverb(text, pos):\n    '''\n    Finds the adverb ending with ly and its position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try:\n        vnoun = pos[-1] + pos[-2]\n    except:\n        vnoun = ''\n    return vnoun\ndef find_verb_noun(text, pos):\n    '''\n    Finds the noun ending with ly and its position in the given string.\n    '''\n    pos = pos.split('_')\n    if pos[-1] == 'ly':\n        pos = pos[0][pos[0].index('ly')+1:]\n    try"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    temp = []\n    for i in text:\n        if i == '-':\n            temp.append(text.index(i))\n    return temp\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # find all adverbs ending with ly in the text, and return the positions\n    ls = []\n    for i in text.split():\n        if i[-1:] == 'ly':\n            ls.append(i.rfind('ly'))\n    return ls\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    if not text.endswith(\"ly\"): return [None, -1]\n    \n    # 1st: check if it starts with a ly\n    if not text[0:2] == \"ly\": return [-1, -1]\n    \n    # 2nd: check if it ends with a ly\n    if text[-2:].lower()!= \"ly\": return [-1, -1]\n    \n    # 3rd: check if it starts with a ly\n    if text[1:3].isupper(): return [0, 1]\n    if text[1:3].islower(): return [0, 1]\n    if text[1:3].isdigit(): return [0, 1]\n    if text[1:3].isalpha(): return [0, 1]\n    return [-1, -1]\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'[ly]', text)\ndef find_verbs(text):\n    '''\n    Write a function to find the first verb ending with y and its positions in a given string.\n    '''\n    return re.findall(r'[y]', text)\ndef find_adjectives(text):\n    '''\n    Write a function to find the first adjective ending with d and its positions in a given string.\n    '''\n    return re.findall(r'[d]', text)\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_pronouns(text):\n    '''\n    Write a function to find the first pronoun ending with f and its positions in a given string.\n    '''\n    return re.findall(r'[f]', text)\ndef find_synonyms(text):\n    '''\n    Write a function to find the first synonym ending with g and its positions in a given string.\n    '''\n    return re.findall(r'[g]', text)\ndef find_hyponyms(text):\n    '''\n    Write a function to find the first hyponym ending with h and its positions in a given string.\n    '''\n    return re.findall(r'[h]', text)\ndef find_adjectives_forms(text):\n    '''\n    Write a function to find the first adjectives ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_nouns_forms(text):\n    '''\n    Write a function to find the first noun ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_pronouns_forms(text):\n    '''\n    Write a function to find the first pronouns ending with f and its positions in a given string.\n    '''\n    return re.findall(r'[f]', text)\ndef find_synonyms_forms(text):\n    '''\n    Write a function to find the first synonyms ending with g and its positions in a given string.\n    '''\n    return re.findall(r'[g]', text)\ndef find_hyponyms_forms(text):\n    '''\n    Write a function to find the first hyponyms ending with h and its positions in a given string.\n    '''\n    return re.findall(r'[h]', text)\ndef find_verb_phrases(text):\n    '''\n    Write a function to find the first verb ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_nouns_phrase(text):\n    '''\n    Write a function to find the first noun ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_verbs_phrase(text):\n    '''\n    Write a function to find the first verb ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_adjectives_phrase(text):\n    '''\n    Write a function to find the first adjective ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_nouns_phrase(text):\n    '''\n    Write a function to find the first noun ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_verbs_phrase(text):\n    '''\n    Write a function to find the first verb ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_adjectives_phrase(text):\n    '''\n    Write a function to find the first adjective ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_adverbs_phrase(text):\n    '''\n    Write a function to find the first adverb ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_adjectives_forms_phrase(text):\n    '''\n    Write a function to find the first adjectives ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_nouns_forms_phrase(text):\n    '''\n    Write a function to find the first noun ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_pronouns_forms_phrase(text):\n    '''\n    Write a function to find the first pronouns ending with f and its positions in a given string.\n    '''\n    return re.findall(r'[f]', text)\ndef find_synonyms_forms_phrase(text):\n    '''\n    Write a function to find the first synonyms ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_hyponyms_forms_phrase(text):\n    '''\n    Write a function to find the first hyponyms ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_verb_phrase(text):\n    '''\n    Write a function to find the first verb ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_nouns_phrase(text):\n    '''\n    Write a function to find the first noun ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_verbs_phrase(text):\n    '''\n    Write a function to find the first verb ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_adjectives_phrase(text):\n    '''\n    Write a function to find the first adjective ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_adverbs_phrase(text):\n    '''\n    Write a function to find the first adverb ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_adjectives_forms_phrase(text):\n    '''\n    Write a function to find the first adjectives ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_nouns_forms_phrase(text):\n    '''\n    Write a function to find the first noun ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_verbs_phrase(text):\n    '''\n    Write a function to find the first verb ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_adjectives_phrase(text):\n    '''\n    Write a function to find the first adjective ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_adverbs_phrase(text):\n    '''\n    Write a function to find the first adverb ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text)\ndef find_adjectives_forms_phrase(text):\n    '''\n    Write a function to find the first adjectives ending with v and its positions in a given string.\n    '''\n    return re.findall(r'[v]', text"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # print(text)\n    positions = []\n    adverbs = []\n    # find all adverbs in string\n    for index, letter in enumerate(text):\n        # if letter == \"ly\":\n        #     positions.append(index)\n        if letter == \"ly\" and index >= 2:\n            adverbs.append(text[index])\n            positions.append(index)\n            # print(positions)\n    # find the first adverb ending with ly\n    adverb = adverbs[positions.index(len(adverbs))]\n    # print(adverb)\n    # print(adverbs)\n    # print(positions)\n    # print(text)\n    # print(adverb, positions)\n    return adverb, positions\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    def to_int(x):\n        try:\n            return int(x)\n        except:\n            return None\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i in text:\n        if i == \"ay\" or i == \"ayl\" or i == \"e\" or i == \"eay\" or i == \"ey\" or i == \"eyay\" or i == \"eye\" or i == \"eyeay\" or i == \"eyey\" or i == \"eyee\" or i == \"eyeye\":\n            adverbs.append(i)\n        if i == \"an\" or i == \"n\" or i == \"a\" or i == \"aay\" or i == \"aan\" or i == \"aanay\" or i == \"aanay\" or i == \"aanye\" or i == \"aanwee\" or i == \"aanweyn\" or i == \"aanweega\" or i == \"aanwegah\" or i == \"aanwegah\" or i == \"aanwegah\" or i == \"aanwega\" or i == \"aanwegay\" or i == \"aanwegay\" or i == \"aanwegay\" or i == \"aanwegga\" or i == \"aanweggay\" or i == \"aanweggay\" or i == \"aanwegax\" or i == \"aanwegax\" or i == \"aanweggay\" or i == \"aanwegax\" or i == \"aanwegax\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" or i == \"anay\" o"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    match = re.search(r'ly|ly\\b', text)\n    if match:\n        return match.start()\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    for i in range(len(text)-1):\n        if text[i:i+2] == 'ly' and text[i+2:i+3]!= 'ly':\n            start = i\n    for i in range(len(text) - 1):\n        if text[i:i+2] == 'ly' and text[i+2:i+3] == 'ly':\n            end = i\n    return (start, end)\ndef find_adverb_position(text, start, end):\n    '''\n    Write a function to find the adverb starting at position start and ending at position end,\n    and returns the index of the adverb and a list of the positions where the adverb appears.\n    '''\n    # if it starts with a ly, it has to be at the end of the text\n    if text[start:end] == 'ly':\n        return (end, [end])\n    else:\n        for i in range(start, end):\n            if text[i:i+2] == 'ly':\n                return (i, text[i+2:i+3])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # TODO: Write a function that takes in a list of items, n and returns a list of n items.\n    # You may assume that there is always exactly n items in the list.\n    # You must use the n given heuristic to return the n most expensive items.\n    # Hint: You can use a hash table or a list to implement this algorithm.\n    n = len(items)\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item[0],item[1],item[2]))\n    \n    result = []\n    while len(heap)!= 0:\n        heapq.heappop(heap)\n        \n        heapq.heappush(heap, (heapq.heappop(heap)[0], 0, heapq.heappop(heap)[2]))\n        result.append(heapq.heappop(heap)[1])\n        heapq.heappush(heap, (heapq.heappop(heap)[0], heapq.heappop(heap)[1] + 1, heapq.heappop(heap)[2]))\n    \n    return result[::-1][:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # find the minimum value\n    min_value = items[0]\n    # loop through the dataset\n    for value in items[1:]:\n        # if the value is greater than the current minimum, change it\n        if value < min_value:\n            min_value = value\n    # return the n\n    return n-min_value\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,[items[i],i])\n    result = []\n    while len(heap):\n        (item,index) = heapq.heappop(heap)\n        result.append(item)\n        if len(result)==n:\n            break\n        heapq.heappush(heap,[items[index]-item,index])\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # initialize the heap\n    heap = [(0, i) for i in range(n+1)]\n    # build the min heap\n    heapq.heapify(heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    import heapq\n    heap = []\n    heapq.heappush(heap,(0,items[0]))\n    for i in range(1,len(items)):\n        if items[i]<=heap[0][0]:\n            heapq.heappush(heap,(heap[0][1]+items[i],items[i]))\n            heapq.heappop(heap)\n    return [heapq.heappop(heap)[1] for _ in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    cost = []\n    heapq.heapify(cost)\n    for i in items:\n        heapq.heappush(cost,(i[1],i[0]))\n        if len(cost)>n:\n            heapq.heappop(cost)\n    return [i[0] for i in heapq.nlargest(n,cost)]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    return heapq.nlargest(n, items)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    for i in range(n-1, -1, -1):\n        if items[0][1]<items[i][1]:\n            heapq.heappush(items, items[i])\n    return items\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Implement this function\n    heap=[]\n    heapq.heappush(heap,(0,n))\n    m=0\n    while heap:\n        val,item=heapq.heappop(heap)\n        if val==n:\n            print(item,end=': ')\n        elif val<n:\n            m=max(val,m)\n        else:\n            break\n        if len(heap)==0:\n            break\n    return m\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, items[i][1])\n    res = []\n    for i in range(n):\n        if len(res) == n:\n            break\n        if items[i][1] < heapq.heappop(heap):\n            res.append(items[i])\n    return res\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    p = 0\n    while p < len(l):\n        l[p] = l[p] + l[p + n]\n        p = p + 1\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Write your code here.\n    return l[:n], l[n:]\n    \ndef remove_last(l):\n    '''\n    Remove the last element of the list.\n    '''\n    # Write your code here.\n    if len(l) > 1:\n        return l[:-1]\n    return l[:-1]\n    \ndef oddEven(l):\n    '''\n    You have to return a list where each element is either 0 or 1.\n    '''\n    # Write your code here.\n    return [0 if i % 2 == 0 else 1 for i in l]\n    \ndef last_two_biggest(l):\n    '''\n    The function will take the list, and return a tuple where the elements are the last two biggest elements.\n    '''\n    # Write your code here.\n    return l[-2:][::-1]\n    \ndef count_by_2(l):\n    '''\n    Return the number of times 2 appears in the list.\n    '''\n    # Write your code here.\n    return sum(1 for i in range(len(l)) if l[i]==2)\n    \ndef last_two_biggest_and_count(l):\n    '''\n    This function will return the last two biggest elements of the list.\n    '''\n    # Write your code here.\n    return l[-2:][::-1] + [l[-2]] + [l[-1]]\n    \ndef is_odd_string(l):\n    '''\n    Return True if the list contains an odd number of characters.\n    '''\n    # Write your code here.\n    return sum(1 for i in range(len(l)) if l[i]%2 == 1) == 0\n    \ndef smallest_and_greatest_odd_string(l):\n    '''\n    This function will return the smallest and the greatest odd number of characters in the list.\n    '''\n    # Write your code here.\n    return l[-2:][::-1] + [l[-2]] + [l[-1]]\n    \ndef num_of_substrings(s, n):\n    '''\n    The function will return the number of substrings of the given string.\n    '''\n    # Write your code here.\n    return len([i for i in range(len(s)) if len(s[i:i+n]) == n])\n    \ndef first_and_last(l):\n    '''\n    Return the first and the last elements of a list.\n    '''\n    # Write your code here.\n    return l[0], l[-1]\n    \ndef first_and_last_reverse(l):\n    '''\n    Return the first and the last elements of a list in reverse.\n    '''\n    # Write your code here.\n    return l[0], l[-1]\n    \ndef smallest_and_greatest_odd_string(l):\n    '''\n    This function will return the smallest and the greatest odd number of characters in the list.\n    '''\n    # Write your code here.\n    return l[-2:][::-1] + [l[-2]] + [l[-1]]\n    \ndef split_and_join(l):\n    '''\n    Split the list into two lists with the elements of the last and the first part.\n    Return the two lists.\n    '''\n    # Write your code here.\n    return [l[0:2]], l[2:]\n    \ndef split_and_join_reverse(l):\n    '''\n    Split the list into two lists with the elements of the last and the first part in reverse.\n    Return the two lists.\n    '''\n    # Write your code here.\n    return [l[:2], l[2:]], l[:2]\n    \ndef num_of_substrings(s, n):\n    '''\n    The function will return the number of substrings of the given string.\n    '''\n    # Write your code here.\n    return len([i for i in range(len(s)) if len(s[i:i+n]) == n])\n    \ndef oddEven(l):\n    '''\n    You have to return a list where each element is either 0 or 1.\n    '''\n    # Write your code here.\n    return [0 if i % 2 == 0 else 1 for i in l]\n    \ndef last_two_biggest_and_count(l):\n    '''\n    This function will return the last two biggest elements of the list.\n    '''\n    # Write your code here.\n    return l[-2:][::-1] + [l[-2]] + [l[-1]]\n    \ndef is_odd_string(l):\n    '''\n    Return True if the list contains an odd number of characters.\n    '''\n    # Write your code here.\n    return sum(1 for i in range(len(l)) if l[i]%2 == 1) == 0\n    \ndef first_and_last_reverse(l):\n    '''\n    Return the first and the last elements of a list.\n    '''\n    # Write your code here.\n    return l[0], l[-1]\n    \ndef first_and_last_reverse_reverse(l):\n    '''\n    Return the first and the last elements of a list in reverse.\n    '''\n    # Write your code here.\n    return l[0], l[-1]\n    \ndef smallest_and_greatest_odd_string(l):\n    '''\n    This function will return the smallest and the greatest odd number of characters in the list.\n    '''\n    # Write your code here.\n    return l[-2:][::-1] + [l[-2]] + [l[-1]]\n    \ndef num_of_substrings(s, n):\n    '''\n    The function will return the number of substrings of the given string.\n    '''\n    # Write your code here.\n    return len([i for i in range(len(s)) if len(s[i:i+n]) == n])\n    \ndef first_and_last_even(l):\n    '''\n    Return the first and the last elements of a list.\n    '''\n    # Write your code here.\n    return l[0], l[-1]\n    \ndef first_and_last_even_reverse(l):\n    '''\n    Return the first and the last elements of a list in reverse.\n    '''\n    # Write your code here.\n    return l[0], l[-1]\n    \ndef smallest_and_greatest_odd_string(l):\n    '''\n    This function will return the smallest and the greatest odd number of characters in the list.\n    '''\n    # Write your code here.\n    return l[-2:][::-1] + [l[-2]] + [l[-1]]\n    \ndef first_and_last_even_reverse(l):\n    '''\n    Return the first and the last elements of a list in reverse.\n    '''\n    # Write your code here.\n    return l[0], l[-1]\n    \ndef first_and_last_even_reverse_reverse(l):\n    '''\n    Return the first and the last elements of a list in reverse.\n    '''\n    # Write your code here.\n    return l[0], l[-1]\n    \ndef smallest_and_greatest_odd_string(l):\n    '''\n    This function will return the smallest and the greatest odd number of characters in the list.\n    '''\n    # Write your code here.\n    return l[-2:][::-1] + [l[-2]] + [l[-1]]\n    \ndef last_two_biggest_and_count(l):\n    '''\n    Return the last two biggest elements of the list.\n    '''\n    # Write your code here.\n    return l[-2:][::-1] + [l[-2]] + [l[-1]]\n    \ndef oddEven(l):\n    '''\n    Return a list where each element is either 0 or 1.\n    '''\n    # Write your code here.\n    return [0 if i % 2 == 0 else 1 for i in l]\n    \ndef split_and_join(l):\n    '''\n    Split the list into two lists with the elements of th"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    s = ''\n    for i in l:\n        s += i\n    s += l[0:n]\n    return s\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(0, len(l), n):\n        yield l[i:i + n]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # get the list\n    arr = l[:n]\n    # add the first part\n    arr.insert(0, l[n])\n    # remove last element in list\n    arr.pop()\n    # return the new list\n    return arr\n    \n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # case 1\n    if len(l) == n:\n        return l\n    \n    # case 2\n    else:\n        return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return(list(l))[n:]\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    def tuple_helper(list_):\n        '''\n        Function that returns a tuple.\n        '''\n        tuple_ = ()\n        for i in range(0, len(list_)):\n            tuple_ += (list_[i],)\n        return tuple_\n    return tuple_helper(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef main():\n    '''\n    Main function.\n    '''\n    print('\\n==========================================================')\n    print('list_tuple([\"1\",\"2\",\"3\",\"4\"])')\n    print('==========================================================')\n    listx = [1,2,3,4]\n    list_tuple(listx)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\"))')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple([\"1\",\"2\",\"3\",\"4\"])')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(listx)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\"))')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple([\"1\",\"2\",\"3\",\"4\"])')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(listx)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\"))')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    listx = [\"1\",\"2\",\"3\",\"4\"]\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(listx)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    listx = [\"1\",\"2\",\"3\",\"4\"]\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(listx)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple(())')\n    print('==========================================================')\n    tuplex = ()\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple(())')\n    print('==========================================================')\n    tuplex = ()\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple(())')\n    print('==========================================================')\n    tuplex = ()\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuplex)\n    print('\\n==========================================================')\n    print('list_tuple((\"1\",\"2\",\"3\",\"4\")')\n    print('==========================================================')\n    tuplex = (\"1\",\"2\",\"3\",\"4\")\n    list_tuple(tuple"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = []\n    for item in listx:\n        tuple_list.append(item)\n    return tuple_list\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for l in listx:\n        tup = tup + (l,)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    n = len(nums)\n    d = []\n    for i in range(0, n):\n        d.append((abs(nums[i] - nums[-i-1]), i))\n    d.sort()\n    nums = d\n    for i in range(0, n-1):\n        if nums[i+1][1] > nums[i][1]:\n            return nums[i][0]\n    return nums[-1][0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(nums)\n    print(max(nums))\n    print(min(nums))\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min = nums[0]\n    max = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n        elif i < min:\n            min = i\n    return max - min\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Let's create a list of the numbers\n    lst = [int(i) for i in nums]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Get the max and min of the list\n    max, min = max(nums), min(nums)\n    # Create a copy of the list to compare and find the difference\n    nums_copy = list(nums)\n    for i in range(len(nums_copy)):\n        nums_copy[i] = max(nums_copy[i], min(nums_copy[i:]))\n    # Find the difference\n    diff = max(nums_copy) - min(nums_copy)\n    # Print the result\n    print(diff)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_num = nums[0]\n    max_num = nums[0]\n    \n    for i in nums:\n        if i < min_num:\n            min_num = i\n            \n        elif i > max_num:\n            max_num = i\n            \n    return max_num - min_num\n    \ndef find_max_min(nums):\n    '''\n    Write a python function to find the maximum and minimum values in a given list.\n    '''\n    max = nums[0]\n    min = nums[0]\n    \n    for i in nums:\n        if i > max:\n            max = i\n            \n        elif i < min:\n            min = i\n            \n    return max,min\n    \ndef find_middle(nums):\n    '''\n    Write a python function to find the middle value in a given list.\n    '''\n    return int(len(nums)/2)\n    \ndef find_mean(nums):\n    '''\n    Write a python function to find the mean value of a given list.\n    '''\n    sum_val = 0\n    for i in nums:\n        sum_val = sum_val + i\n    \n    mean = sum_val/len(nums)\n    \n    return mean\n    \ndef find_median(nums):\n    '''\n    Write a python function to find the median value of a given list.\n    '''\n    nums.sort()\n    mid = len(nums)//2\n    \n    if len(nums) % 2:\n        return nums[mid]\n    else:\n        return (nums[mid-1]+nums[mid])/2\n    \ndef find_mode(nums):\n    '''\n    Write a python function to find the mode value of a given list.\n    '''\n    return max(set(nums), key = nums.count)\n    \ndef find_co_occurence(nums):\n    '''\n    Write a python function to find the number of elements that are stored in a set and their frequency.\n    '''\n    return len(set(nums))\n    \ndef find_sum_of_fractional_numbers(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_difference(nums):\n    '''\n    Write a python function to find the difference between two numbers in a given list.\n    '''\n    return big_diff(nums)\n    \ndef find_smallest_and_largest(nums):\n    '''\n    Write a python function to find the smallest and largest value in a given list.\n    '''\n    return find_max_min(nums)\n    \ndef find_mean_and_median(nums):\n    '''\n    Write a python function to find the mean and median value of a given list.\n    '''\n    mean = find_mean(nums)\n    median = find_median(nums)\n    \n    return mean, median\n    \ndef find_mode_and_median(nums):\n    '''\n    Write a python function to find the mode and median value of a given list.\n    '''\n    mode = find_mode(nums)\n    median = find_median(nums)\n    \n    return mode, median\n    \ndef find_frequency(nums):\n    '''\n    Write a python function to find the frequency of a given list.\n    '''\n    return len(nums)\n    \ndef find_sum_of_fractional_numbers_and_sum(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_difference(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_smallest_and_largest(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_median(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_smallest_and_difference(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_sum_of_median(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_difference_of_median(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_sum_of_mode(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_sum_of_median_of_mode(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_difference_of_mode(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_smallest_and_difference_of_mode(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_difference_of_mode(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_median_of_mode(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_mode_of_sum(nums):\n    '''\n    Write a python function to find the sum of the fractional numbers in a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \ndef find_sum_of_fractional_numbers_and_sum_of_median_of_mode(nums):"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums)<=2:\n        return 0\n    if nums[0]<nums[1]:\n        return nums[0]-nums[1]\n    else:\n        return nums[0]-nums[1]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n    diff = max_value - min_value\n    return diff\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    i = 0\n    while i < (a + b):\n        j = 1\n        while j < (a + b):\n            if (a ** 2) + (b ** 2) - (i ** 2) == 1:\n                print(a ** 2 + b ** 2)\n                return True\n            j += 1\n        i += 1\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def check(x, y):\n        return (x ** 2 + y ** 2) ** 0.5 == x ** 2 + y ** 2\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b < a:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a = abs(a)\n    b = abs(b)\n    n = b + 1\n    for i in range(b):\n        if a * a == b * b:\n            return a * a\n        else:\n            n = n if (a * n) > (b * b) else b\n            if a * n == b * b:\n                return a * a\n            else:\n                a = n\n    return None\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # if the numbers are of the same size\n    if len(a)!= len(b):\n        print(\"Error: a and b must be of the same size.\")\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return [1]\n    if b % 2 == 0:\n        return perfect_squares(a, b/2) + [a + b]\n    else:\n        return perfect_squares(a, (b - 1)/2) + [a + b]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Note: perfect squares are squares greater than or equal to 0.\n    if b == 0:\n        return []\n    if a == b:\n        return [a]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def perfect_squares(a, b):\n        return int(a**0.5 + b**0.5)**2 == a**2 + b**2\n    return perfect_squares(a, b)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    i=0\n    j=0\n    while i<=b and j<=a:\n        while i<=b and j<=a:\n            if a*a+b*b<=i*i+j*j:\n                i+=1\n            else:\n                j+=1\n        i+=1\n        j+=1\n    return [i,j]\ndef perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    l=[]\n    l1=[]\n    for i in range(a,b):\n        k=perfect_square(i)\n        if k:\n            l.append(k)\n    for i in range(len(l)):\n        if l[i][0]>l[i][1]:\n            l[i][0],l[i][1]=l[i][1],l[i][0]\n        if l[i][1]>l[i][0]:\n            l[i][1],l[i][0]=l[i][0],l[i][1]\n        if l[i][0]<l[i][1]:\n            l[i][1],l[i][0]=l[i][1],l[i][0]\n    return l\ndef main():\n    a=int(input('Enter a number: '))\n    b=int(input('Enter a number: '))\n    print(f'The perfect square between {a} and {b} is:')\n    print(perfect_squares(a, b))\n    #print(perfect_squares(8, 10))\n    #print(perfect_squares(6, 7))\n    #print(perfect_squares(5, 8))\n    #print(perfect_squares(20, 10))\nmain("
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.phase(x*y)\n    r = math.sqrt(x*x + y*y)\n    theta = theta*(math.pi/180)\n    return (r,theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # z = r*sin(theta)\n    z = (cmath.pi/2)*(x**2 + y**2)\n    # r = sqrt(z)\n    r = cmath.sqrt(z)\n    # t = theta\n    t = cmath.acos((x**2 + y**2 - 1)/(2*r**2))\n    return t,r,z\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi = math.atan2(y,x)\n    r = math.sqrt(x**2+y**2)\n    return r,phi\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = -cmath.pi * x**2 + y**2\n    b = -2 * cmath.pi * x * y\n    return a,b\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return complex(x,0) + cmath.rect(1,complex(y,0))\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if(x<0):\n        r=cmath.sqrt(x*x+y*y)\n        c=y*cmath.sin(x)\n        t=cmath.atan2(y,x)\n        return [r,c,t]\n    else:\n        r=cmath.sqrt(x*x+y*y)\n        c=y*cmath.sin(x)\n        t=cmath.atan2(-x,y)\n        return [r,c,t]\ndef euler(A,B,C):\n    '''\n    Write a function to calculate the euler angles for the given axes A, B, C\n    '''\n    if(A==B):\n        if(A==C):\n            return [cmath.pi/2,0,0]\n        else:\n            x=B\n            y=A\n            z=C\n            t=0\n            return [x,y,z,t]\n    elif(A==C):\n        if(A==B):\n            return [0,cmath.pi/2,0]\n        else:\n            x=B\n            y=A\n            z=C\n            t=0\n            return [x,y,z,t]\n    else:\n        if(A==B):\n            x=B\n            y=A\n            z=C\n            t=0\n            return [x,y,z,t]\n        else:\n            x=B\n            y=A\n            z=C\n            t=cmath.pi/2\n            return [x,y,z,t]\ndef polar_rot(x,y):\n    '''\n    Write a function to rotate a vector defined by polar coordinates.\n    '''\n    if(x>0):\n        x=x*cmath.pi/180\n    elif(x<0):\n        x=x*cmath.pi*180/180\n    if(y>0):\n        y=y*cmath.pi/180\n    elif(y<0):\n        y=y*cmath.pi*180/180\n    x=x*cmath.cos(y)\n    y=y*cmath.sin(y)\n    t=x+y\n    return [t,0,0]\ndef euler_rot(A,B,C):\n    '''\n    Write a function to rotate euler angles.\n    '''\n    if(A==B):\n        if(A==C):\n            return [0,0,0]\n        else:\n            x=B\n            y=A\n            z=C\n            t=0\n            return [x,y,z,t]\n    elif(A==C):\n        if(A==B):\n            return [0,0,0]\n        else:\n            x=B\n            y=A\n            z=C\n            t=0\n            return [x,y,z,t]\n    else:\n        if(A==B):\n            x=B\n            y=A\n            z=C\n            t=cmath.pi/2\n            return [x,y,z,t]\n        else:\n            x=B\n            y=A\n            z=C\n            t=0\n            return [x,y,z,t]\ndef draw_sphere(radius,phi,theta):\n    '''\n    Write a function to draw a sphere.\n    '''\n    c=cmath.cos(theta)\n    s=cmath.sin(theta)\n    x=radius*c\n    y=radius*s\n    z=radius*c\n    return [x,y,z]\ndef draw_ellipse(x,y,z,a,b,c):\n    '''\n    Write a function to draw an ellipse.\n    '''\n    x=a*cmath.cos(b*x)\n    y=a*cmath.sin(b*x)\n    z=b*cmath.cos(a*y)\n    return [x,y,z]\ndef draw_sphere_2(radius,phi,theta):\n    '''\n    Write a function to draw a sphere.\n    '''\n    c=cmath.cos(theta)\n    s=cmath.sin(theta)\n    x=radius*c\n    y=radius*s\n    z=radius*c\n    return [x,y,z]\ndef draw_sphere_3(x,y,z):\n    '''\n    Write a function to draw a sphere.\n    '''\n    x=x*cmath.cos(z)\n    y=y*cmath.sin(z)\n    z=z*cmath.cos(x)\n    return [x,y,z]\ndef draw_ellipse_2(x,y,z,a,b,c):\n    '''\n    Write a function to draw an ellipse.\n    '''\n    x=a*cmath.cos(b*x)\n    y=a*cmath.sin(b*x)\n    z=b*cmath.cos(a*y)\n    return [x,y,z]\ndef draw_ellipse_3(x,y,z,a,b,c):\n    '''\n    Write a function to draw an ellipse.\n    '''\n    x=a*cmath.cos(b*x)\n    y=a*cmath.sin(b*x)\n    z=b*cmath.cos(a*y)\n    return [x,y,z]\ndef draw_cube(x,y,z):\n    '''\n    Write a function to draw a cube.\n    '''\n    x=x*cmath.cos(z)\n    y=y*cmath.sin(z)\n    z=z*cmath.cos(x)\n    return [x,y,z]\ndef draw_cube_2(x,y,z):\n    '''\n    Write a function to draw a cube.\n    '''\n    x=x*cmath.cos(z)\n    y=y*cmath.sin(z)\n    z=z*cmath.cos(x)\n    return [x,y,z]\ndef draw_cube_3(x,y,z):\n    '''\n    Write a function to draw a cube.\n    '''\n    x=x*cmath.cos(z)\n    y=y*cmath.sin(z)\n    z=z*cmath.cos(x)\n    return [x,y,z]\ndef draw_square(x,y,z):\n    '''\n    Write a function to draw a square.\n    '''\n    x=x*cmath.cos(z)\n    y=y*cmath.sin(z)\n    z=z*cmath.cos(x)\n    return [x,y,z]\ndef draw_square_2(x,y,z):\n    '''\n    Write a function to draw a square.\n    '''\n    x=x*cmath.cos(z)\n    y=y*cmath.sin(z)\n    z=z*cmath.cos(x)\n    return [x,y,z]\ndef draw_square_3(x,y,z):\n    '''\n    Write a function to draw a square.\n    '''\n    x=x*cmath.cos(z)\n    y=y*cmath.sin(z)\n    z=z*cmath.cos(x)\n    return [x,y,z]\ndef draw_square_4(x,y,z):\n    '''\n    Write a function to draw a square.\n    '''\n    x=x*cmath.cos(z)\n    y=y*cmath.sin(z)\n    z=z*cmath.cos(x)\n    return [x,y,z]\ndef draw_square_5(x,y,z):\n    '''\n    Write a function to draw a square.\n    '''\n    x=x*cmath.cos(z)\n    y=y*cmath.sin(z)\n    z=z*cmath.cos(x)\n    return [x,y,z]\ndef draw_cube_6(x,y,z):\n    '''\n    Write a function to draw a cube.\n    '''\n    x=x*"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x == 0:\n        if y > 0:\n            x_sign = 1\n            y_sign = -1\n        elif y < 0:\n            x_sign = -1\n            y_sign = 1\n        else:\n            x_sign = 1\n            y_sign = 0\n        return (x_sign*y, y_sign*x)\n    else:\n        x_sign = 1\n        y_sign = 0\n        if x > 0:\n            x_sign = -1\n        if y > 0:\n            y_sign = -1\n        if y < 0:\n            y_sign = 1\n        if x < 0:\n            x_sign = -1\n        if y < 0:\n            y_sign = 1\n        if x > 0:\n            x_sign = -1\n        return (x_sign*y, y_sign*x)\ndef unit_vector(v):\n    '''\n    Given a vector, returns the unit vector.\n    '''\n    return v / (np.linalg.norm(v))\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radians = cmath.rect(x,y)\n    x2 = round(radians.real, 2)\n    y2 = round(radians.imag, 2)\n    return (x2,y2)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x < 0: x = 2*x\n    elif x == 0: x = x\n    else: x = -x\n    if y < 0: y = 2*y\n    elif y == 0: y = y\n    else: y = -y\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # theta1 = cmath.pi*x\n    # theta2 = cmath.pi*y\n    x = x/cmath.pi\n    y = y/cmath.pi\n    # r_theta1 = x*math.sin(theta1)\n    # r_theta2 = y*math.cos(theta2)\n    r_theta1 = x\n    r_theta2 = y\n    return r_theta1, r_theta2\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # initialise newList\n    new_list = []\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        print(\"Empty list\")\n        return\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    newList.append(newList.pop())\n    newList.reverse()\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    my_list = []\n    if len(newList) == 0:\n        return []\n    for i in range(len(newList)):\n        my_list.append(newList[i])\n        my_list.append(newList[-1])\n    return my_list"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp=newList[0]\n    newList[0]=newList[-1]\n    newList[-1]=temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList) - 1]\n    newList[len(newList) - 1] = temp\n    return newList\n    \n    \ndef remove_duplicates(List): \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    newList = []\n    for i in List:\n        if i not in newList:\n            newList.append(i)\n    return newList\n    \n    \ndef insert_at_pos(List, pos, new_item): \n    '''\n    Write a python function to insert a new item at a specific position.\n    '''\n    if pos < 0 or pos > len(List): \n        return List\n    if List[pos]!= None: \n        return insert_at_pos(List, pos - 1, new_item)\n    List.insert(pos, new_item)\n    return List\n    \n    \ndef rem(List):\n    '''\n    Write a python function to remove the first occurence of a given element from a list.\n    '''\n    for i in range(len(List)):\n        if List[i] == None:\n            return None\n    return List\n    \n    \ndef remove_duplicates_rec(List):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    newList = []\n    for i in List:\n        if i not in newList:\n            newList.append(i)\n    return newList\n    \n    \ndef insert_at_pos_rec(List, pos, new_item):\n    '''\n    Write a python function to insert a new item at a specific position.\n    '''\n    if pos < 0 or pos > len(List):\n        return List\n    if List[pos]!= None:\n        return insert_at_pos_rec(List, pos - 1, new_item)\n    List.insert(pos, new_item)\n    return List\n    \n    \ndef rem_rec(List):\n    '''\n    Write a python function to remove the first occurence of a given element from a list.\n    '''\n    newList = []\n    for i in List:\n        if i!= None:\n            newList.append(i)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList.reverse()\n    newList.sort(reverse = True)\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==0: \n        return 1\n    if k==0: \n        return 0\n    if n==1: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1) \n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = [0] * k\n    for i in range(1,n+1): \n        coeff[0] += coeff[-1] \n        for j in range(1,k): \n            coeff[j] = coeff[j-1] * i \n    return coeff[-1]\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 1: \n        return 1\n    else:\n        return n*binomial_Coeff(n-1,k-1)\n    \ndef phi_p(n): \n    '''\n    Write a python function to compute the value of the probability that an event will occur\n    '''\n    return binomial_Coeff(n,n)/binomial_Coeff(n-1,n-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result=0\n    while k>0:\n        result += n * binomial(n, k-1)\n        k-=1\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n    def binomial_Coeff(n,k):\n        '''\n        Write a python function to find the sum of the product of consecutive binomial co-efficients.\n        '''\n        # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n        # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n        def binomial_Coeff(n,k):\n            '''\n            Write a python function to find the sum of the product of consecutive binomial co-efficients.\n            '''\n            # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n            def binomial_Coeff(n,k):\n                '''\n                Write a python function to find the sum of the product of consecutive binomial co-efficients.\n                '''\n                return sum([n*(n**i) for i in range(k)])\n            \n        return binomial_Coeff(n,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        raise ValueError(\"Invalid coefficient\")\n    if n == 0:\n        return 1\n    if k == 0:\n        return 0\n    return binomial_Coeff(n-1,k-1) * binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    elif k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n-1,k-1) * binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(n < 0 or k < 0): return 0\n    if(n == 0): return 1\n    if(k == 0): return 0\n    if(k == 1): return 1\n    if(k == 2): return n*n\n    if(k == 3): return n*n*n\n    if(k >= 4):\n        return binomial_Coeff(n-1, k-1)\n    else:\n        return binomial_Coeff(n-1, k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    s=1\n    for i in range(1,n):\n        s = s*(i+1)\n    return s\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return k\n    else:\n        return binomial_Coeff(n-1,k)*k**n\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    i=0\n    while(i<len(ip)):\n        if(ip[i]=='0'):\n            del ip[i]\n            i-=1\n        i+=1\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=ip.lstrip('0')\n    while ip[0]=='0':\n        ip=ip.lstrip('0')\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    l = []\n    for i in ip:\n        if i == '.':\n            pass\n        elif i == '0' and i!= '.':\n            pass\n        else:\n            l.append(i)\n    return ''.join(l)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$','',ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    newip = re.sub(\"(^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\", \"\", ip)\n    newip = newip.replace(\" \", \"\")\n    if newip == \"\":\n        newip = ip\n    return newip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == '':\n        return ''\n    else:\n        return ip[0:-1]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Take care of leading zeroes\n    \n    # Remove leading zeros from the last octet\n    ip_without_zeros = ip.split(\".\")\n    ip_without_zeros.pop()\n    ip_without_zeros.pop()\n    new_ip = \".\".join(ip_without_zeros)\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    newip = ip.strip()\n    newip = newip.strip('0')\n    newip = re.sub(\"^\\d+\", \"\", newip)\n    newip = re.sub(\"\\d+$\", \"\", newip)\n    return newip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    tmp=list(ip)\n    tmp[0]=tmp[0][1:]\n    if(len(tmp)>=6):\n        if(int(tmp[5])!=0):\n            tmp[5]=0\n        tmp=(''.join(tmp[:5]))\n        if(len(tmp)>=6):\n            tmp=tmp+\"0\"\n    ip=tmp\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    clean_ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+', '', ip)\n    return clean_ip\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=0\n    odd=0\n    list1=list(list1)\n    for i in list1:\n        if i%2==0:\n            even+=1\n        else:\n            odd+=1\n    return (even,odd)\n    \ndef list_diff(list1,list2):\n    '''\n    Write a function that takes two lists and returns a new list with elements that are not in both lists.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+[i for i in list1 if i not in list2]\n    list3=list3+[i for i in list2 if i not in list1]\n    return list3\n    \ndef list_count(list1,list2):\n    '''\n    Write a function that takes a list and an element and returns a new list with the count of that element.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+[i for i in list1 if i not in list2]\n    list3=list3+[i for i in list2 if i not in list1]\n    return list3\n    \ndef list_diff_even_odd(list1,list2):\n    '''\n    Write a function that takes two lists and returns a new list with elements that are not in both lists.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+[i for i in list1 if i%2==0]\n    list3=list3+[i for i in list2 if i%2==0]\n    return list3\n    \ndef list_count_even_odd(list1,list2):\n    '''\n    Write a function that takes a list and an element and returns a new list with the count of that element.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+[i for i in list1 if i%2==0]\n    list3=list3+[i for i in list2 if i%2==0]\n    return list3\n    \ndef count_even_odd(list1,list2):\n    '''\n    Write a function that takes two lists and returns a new list with elements that are even and then even numbers.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+[i for i in list1 if i%2==0]\n    list3=list3+[i for i in list2 if i%2==0]\n    return list3\n    \ndef list_greater_than_two(list1,list2):\n    '''\n    Write a function that takes a list and returns a new list with elements that are greater than two.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+[i for i in list1 if i>2]\n    list3=list3+[i for i in list2 if i>2]\n    return list3\n    \ndef list_less_than_two(list1,list2):\n    '''\n    Write a function that takes two lists and returns a new list with elements that are less than two.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+[i for i in list1 if i<2]\n    list3=list3+[i for i in list2 if i<2]\n    return list3\n    \ndef count_less_than_two(list1,list2):\n    '''\n    Write a function that takes two lists and returns a new list with elements that are less than two.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+[i for i in list1 if i<2]\n    list3=list3+[i for i in list2 if i<2]\n    return list3\n    \ndef list_even(list1,list2):\n    '''\n    Write a function that takes two lists and returns a new list with elements that are even.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+[i for i in list1 if i%2==0]\n    return list3\n    \ndef list_odd(list1,list2):\n    '''\n    Write a function that takes two lists and returns a new list with elements that are odd.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+[i for i in list1 if i%2!=0]\n    return list3\n    \ndef list_same_numbers(list1,list2):\n    '''\n    Write a function that takes two lists and returns a new list with elements that are same numbers.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+[i for i in list1 if i==list2]\n    return list3\n    \ndef list_different_numbers(list1,list2):\n    '''\n    Write a function that takes two lists and returns a new list with elements that are different numbers.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+[i for i in list1 if i!=list2]\n    return list3\n    \ndef list_zero(list1):\n    '''\n    Write a function that takes a list and returns a new list with zeros in it.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+[0 for i in list1]\n    return list3\n    \ndef list_one(list1):\n    '''\n    Write a function that takes a list and returns a new list with one in it.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+[1 for i in list1]\n    return list3\n    \ndef list_two(list1,list2):\n    '''\n    Write a function that takes two lists and returns a new list with elements that are lists.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+[i for i in list1 if isinstance(i,list)]\n    list3=list3+[i for i in list2 if isinstance(i,list)]\n    return list3\n    \ndef list_three(list1,list2,list3):\n    '''\n    Write a function that takes two lists and returns a new list with elements that are lists.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+list3\n    list3=list3+[i for i in list1 if isinstance(i,list)]\n    list3=list3+[i for i in list2 if isinstance(i,list)]\n    list3=list3+[i for i in list3 if isinstance(i,list)]\n    list3=list3+[i for i in list3 if i not in list1]\n    list3=list3+[i for i in list3 if i not in list2]\n    return list3\n    \ndef list_four(list1,list2,list3,list4):\n    '''\n    Write a function that takes four lists and returns a new list with elements that are lists.\n    '''\n    list3=[]\n    list3=list3+list1\n    list3=list3+list2\n    list3=list3+list3\n    list3=list3+list4\n    return list3\n    \ndef list_even_odd(list1,list2):\n    '''\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = list1[0] - list1[-1]\n    count = 0\n    for i in range(1, len(list1)):\n        if list1[i] % 2 == 0:\n            count += 1\n        else:\n            diff = diff - list1[i]\n            count += 1\n    return diff, count\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i = 0\n    if len(list1) % 2 == 0:\n        list1.pop(0)\n        list1.pop(-1)\n        return list1\n    else:\n        return list1\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    sum = 0\n    odd_sum = 0\n    even_sum = 0\n    for i in list1:\n        if i%2 == 0:\n            sum += i\n            even_sum += i\n        else:\n            sum += i\n            odd_sum += i\n    return sum - even_sum - odd_sum\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i=0\n    j=len(list1)-1\n    while i<j:\n        if list1[i]%2==0 and list1[j]%2!=0:\n            return list1[i]-list1[j]\n        if list1[i]%2!=0 and list1[j]%2==0:\n            return list1[i]-list1[j]\n        i+=1\n        j-=1\n    return None\n    \ndef diff_even_odd_2(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    i=0\n    j=len(list1)-1\n    while i<j:\n        if list1[i]%2==0:\n            return list1[i]-list1[j]\n        if list1[i]%2!=0:\n            return list1[i]-list1[j]\n        i+=1\n        j-=1\n    return None\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_num = len(list1) % 2\n    if odd_num == 0:\n        return list1[0]\n    return list1[odd_num]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_list=[]\n    even_list=[]\n    for item in list1:\n        if item % 2 == 0:\n            even_list.append(item)\n        else:\n            odd_list.append(item)\n    return odd_list, even_list\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for index in range(len(list1)):\n        if index%2==0:\n            print(list1[index])\n        else:\n            print(list1[index]+1)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return(list1[0] - list1[1])\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1 == str2 : return 0\n    elif len(str1) == len(str2) : \n        return min(min_Swaps(str1[1:],str2[1:]),min_Swaps(str1[:1],str2[:1]),min_Swaps(str1[1:],str2[1:])) + 1\n    else : return min_Swaps(str1[1:],str2[1:])\n        \ndef max_product_str(string) : \n    '''\n    Write a python function to find the most common two character in a given string.\n    '''\n    if len(string) < 2 : \n        return string\n    elif string[0] == string[1] : \n        return max_product_str(string[1:])\n    else : return string[0] + max_product_str(string[1:])\n    \ndef max_product_str_bst(string) : \n    '''\n    Write a python function to find the most common two character in a given string.\n    '''\n    if len(string) < 2 : \n        return string\n    elif string[0] == string[1] : \n        return max_product_str_bst(string[1:])\n    else : return string[0] + max_product_str_bst(string[1:])\n    \ndef min_product_str(string) : \n    '''\n    Write a python function to find the most common two character in a given string.\n    '''\n    if len(string) < 2 : \n        return string\n    elif string[0] == string[1] : \n        return min_product_str(string[1:])\n    else : return string[0] + min_product_str(string[1:])\n    \ndef min_product_str_bst(string) : \n    '''\n    Write a python function to find the most common two character in a given string.\n    '''\n    if len(string) < 2 : \n        return string\n    elif string[0] == string[1] : \n        return min_product_str_bst(string[1:])\n    else : return string[0] + min_product_str_bst(string[1:])\n    \ndef max_product_str_bst_returned(string) : \n    '''\n    Write a python function to find the most common two character in a given string.\n    '''\n    if len(string) < 2 : \n        return string\n    elif string[0] == string[1] : \n        return max_product_str_bst(string[1:])\n    else : return string[0] + max_product_str_bst(string[1:])\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps = 0\n    n = len(str1)\n    m = len(str2)\n    if n!= m :\n        return \"N,M is not equal!\"\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #Taking all the binary numbers.\n    bin_str1 = str1.replace('0','1').replace('1','0')\n    bin_str2 = str2.replace('0','1').replace('1','0')\n    #Keeping track of the minimum number of swaps\n    min_Swaps = 0\n    #Checking if the binary string is the same or not.\n    if bin_str1 == bin_str2 :\n        min_Swaps += 1\n    #If the two binary strings are different, we must flip the binary string.\n    else:\n        #Keeping track of how many times the bit of the two binary strings are flipped\n        flip_bit_count = 0\n        #Checking if all bits are flipped in one binary string.\n        for bit in bin_str1:\n            if bit == '1' and bin_str2[flip_bit_count] == '0' :\n                flip_bit_count += 1\n            elif bit == '0' and bin_str1[flip_bit_count] == '1' :\n                flip_bit_count += 1\n            #Checking if the flip bit is not present in the binary string.\n            elif bit!= bin_str2[flip_bit_count] :\n                flip_bit_count += 1\n        #If the flip bit counts are equal, we need to add the minimum number of swaps.\n        if flip_bit_count == len(bin_str1) :\n            min_Swaps += 1\n    #Return the number of minimum swaps required.\n    return min_Swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # If not a string, throw error\n    if type(str1)!= str:\n        raise TypeError('str1 must be a string')\n    # If not a string, throw error\n    if type(str2)!= str:\n        raise TypeError('str2 must be a string')\n    # Create a dictionary to store the permutations\n    permutations = {}\n    \n    # Convert string to binary\n    binary_str1 = str2.encode('utf-8')\n    # Create binary in binary string\n    binary_str2 = str1.encode('utf-8')\n    # Count number of swaps\n    swaps = 0\n    # Iterate through binary string\n    for i in range(len(binary_str1)):\n        # If we have to swap 1st position,\n        # then increment by 1 and add 1 to the remaining swaps\n        if binary_str1[i] == '1':\n            swaps += 1\n            # Set position to the beginning of the string\n            # by adding 1 to the count of swaps\n            binary_str2 = binary_str2[:i] + '1' + binary_str2[i + 1:]\n            # Count number of swaps\n            swaps += min_Swaps(binary_str2,str2)\n            # Remove 1 from the string and add 1 to the remaining swaps\n            binary_str2 = binary_str2[:i] + '0' + binary_str2[i + 1:]\n            # Add 1 to the count of swaps\n            swaps += min_Swaps(binary_str2,str2)\n    # Add 1 to the count of swaps\n    swaps += 1\n    # Return the count of swaps\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if not str1:\n        return 0\n    \n    if not str2:\n        return 0\n    \n    n = len(str1)\n    m = len(str2)\n    \n    # if either string is empty\n    if n == 0 or m == 0:\n        return 0\n    \n    # if both strings are empty\n    if n == 0 or m == 0:\n        return 1\n    \n    # if one string is shorter than other string\n    if m < n:\n        return m + n -1\n    \n    # else both strings are equal\n    else:\n        return n + m -1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    str1 = str1[::-1]\n    swaps = 0\n    \n    for i in range(len(str1)):\n        if str1[i] == '1':\n            str1[i] = '0'\n        else:\n            str1[i] = '1'\n    \n    for i in range(len(str2)):\n        if str2[i] == '1':\n            str2[i] = '0'\n        else:\n            str2[i] = '1'\n    \n    for i in range(len(str1)):\n        for j in range(i,len(str1)):\n            if str1[i] == str1[j]:\n                continue\n            elif str2[i] == str2[j]:\n                continue\n            else:\n                swaps += 1\n    \n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if (str1[0] == '0' and str2[0] == '0' and str1[1] == '0' and str2[1] == '0' and str1[2] == '0' and str2[2] == '0'):\n        return '0'\n    else:\n        n=len(str1)\n        ans = 0\n        for i in range(0,n):\n            if (str1[i] == '0' and str2[i] == '1'):\n                str1[i] = '1'\n                ans = ans + 1\n                str1[i] = '0'\n            elif (str2[i] == '1' and str1[i] == '1'):\n                str2[i] = '0'\n                ans = ans + 1\n                str2[i] = '1'\n            elif (str2[i] == '0' and str1[i] == '0'):\n                str2[i] = '1'\n                ans = ans + 1\n                str2[i] = '0'\n        return ans\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    cnt = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Using a dictionary to count the swaps\n    swaps_dict = {}\n    for i in range(len(str1)):\n        if str1[i] not in swaps_dict:\n            swaps_dict[str1[i]] = 0\n        swaps_dict[str1[i]] += 1\n    \n    # Using a dictionary to count the swaps\n    swaps_dict = {}\n    for i in range(len(str2)):\n        if str2[i] not in swaps_dict:\n            swaps_dict[str2[i]] = 0\n        swaps_dict[str2[i]] += 1\n    \n    # Count number of swaps\n    total = 0\n    for k in swaps_dict:\n        total += swaps_dict[k]\n    \n    # Find the minimum number of swaps required\n    minimum_swaps = 0\n    if total % 2 == 0 :\n        minimum_swaps = total // 2\n    else:\n        minimum_swaps = total // 2 - 1\n        \n    return minimum_swaps\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for t in tuple_list:\n        print(len(t))\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s = 0\n    for i in tuple_list:\n        s = s + len(i)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    from sys import getsizeof\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    def compute_size(tuple_list):\n        '''\n        Returns the size of the given tuple in bytes\n        '''\n        tuple_size = 0\n        for elem in tuple_list:\n            tuple_size += elem.size\n        return tuple_size\n    return compute_size(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if tuple_list:\n        return len(tuple_list) * 8\n    return 0\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_s = 0\n    for el in tuple_list:\n        tuple_s += el[0]\n    return tuple_s\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    n = 0\n    for i in range(len(tuple_list)):\n        n += len(tuple_list[i])\n    return n\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return arr1[(k - 1) % len(arr1)]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k == 0:\n        return 0\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # 1. init both sorted arrays\n    l1 = arr1[0:k]\n    l2 = arr2[0:k]\n    \n    # 2. find the index of the first index\n    i = l1.index(min(l1))\n    \n    # 3. find the index of the last index\n    i = l1.index(max(l1))\n    \n    # 4. return the kth element\n    return l1[i]\n    \n    \n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    length = len(arr1)\n    if k > length:\n        return None\n    for i in range(k):\n        if arr1[i] >= arr2[i]:\n            return arr1[i]\n    \n    for i in range(k, length):\n        if arr1[i] >= arr2[i]:\n            return arr1[i]\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    k = k-1\n    if arr1[k] > arr2[k]:\n        arr1, arr2 = arr2, arr1\n        k = k-1\n    if k == -1:\n        return arr1[k]\n    elif k == len(arr1):\n        return arr2[k]\n    else:\n        return find_kth(arr1[k+1:], arr2, k+1)\n    \ndef find_kth_with_iterative(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1 = list(arr1)\n    arr2 = list(arr2)\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n        k = k - 1\n    for i in range(0,len(arr1)):\n        if arr1[i] < arr2[k]:\n            arr1[i], arr2[k] = arr2[k], arr1[i]\n            k = k-1\n            break\n    return arr1[k]\n    \n    "
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    index = 0\n    while i <= len(arr1) and j <= len(arr2):\n        if arr1[i] > arr2[j]:\n            i += 1\n            index += 1\n        else:\n            j += 1\n            index += 1\n    return index\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Pointer to start of first array\n    first = 0\n    # Pointer to end of first array\n    last = len(arr1) - 1\n    # Pointer to the second array\n    second = len(arr2) - 1\n    # Iterate from the first array and compare with the second array\n    while first <= last:\n        # If k is equal to the index, return the index\n        if arr1[first] == arr2[second]:\n            return arr1[first]\n        # If the second array is greater than the first array, reverse the array\n        elif arr2[second] > arr1[first]:\n            first = first + 1\n        # If the second array is less than the first array, reverse the array\n        elif arr1[second] < arr2[first]:\n            last = last - 1\n        # If the second array is not greater than the first array, reverse the array\n        else:\n            second = second - 1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < len(arr2):\n        arr2 = arr2 + arr1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    \n    left = k - 1\n    right = k + 1\n    \n    if (m + n) < k:\n        return -1\n    \n    while left >= 0 and right < m+n and arr1[left] <= arr2[right]:\n        if left == k-1:\n            return arr2[right]\n        if right == k-1:\n            return arr1[left]\n        \n        if arr1[left] >= arr2[right]:\n            left -= 1\n        else:\n            right += 1\n    \n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Step 1: find the index of element in first array\n    idx1 = arr1.index(min(arr1))\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    def count(a, b):\n        '''\n        a:\n        b:\n        return:\n        '''\n        if a == b:\n            return 1\n        elif a == int(str(a)[::-1]):\n            return count(a//10, b//10) + count(a%10, b%10)\n        else:\n            return 0\n        \n    return count(number, number)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    summ = 0\n    num = number\n    while num > 0:\n        summ = summ + 1\n        num = num // 10\n    \n    for i in range(summ, 1, -1):\n        if num == 1:\n            return True\n        elif i == summ:\n            return False\n        \n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum=0\n    for i in str(number):\n        sum+=int(i)\n    if sum==number:\n        return True\n    else:\n        return False\n    \n    \ndef super_strong(number):\n    '''\n    Write a function that returns true if the given number is super strong or not.\n    '''\n    return True if number>1 else False\n    \n    \ndef perfect_squre(number):\n    '''\n    Write a function that returns true if the given number is perfect or not.\n    '''\n    return True if (number%1==0) or (number%2==0) or (number%3==0) or (number%4==0) or (number%5==0) or (number%6==0) or (number%7==0) or (number%8==0) or (number%9==0) or (number%10==0) or (number%11==0) or (number%12==0) or (number%13==0) or (number%14==0) or (number%15==0) or (number%16==0) or (number%17==0) or (number%18==0) or (number%19==0) or (number%20==0) or (number%21==0) or (number%22==0) or (number%23==0) or (number%24==0) or (number%25==0) or (number%26==0) or (number%27==0) or (number%28==0) or (number%29==0) or (number%30==0) or (number%31==0) or (number%32==0) or (number%33==0) or (number%34==0) or (number%35==0) or (number%36==0) or (number%37==0) or (number%38==0) or (number%39==0) or (number%40==0) or (number%41==0) or (number%42==0) or (number%43==0) or (number%44==0) or (number%45==0) or (number%46==0) or (number%47==0) or (number%48==0) or (number%49==0) or (number%50==0) or (number%51==0) or (number%52==0) or (number%53==0) or (number%54==0) or (number%55==0) or (number%56==0) or (number%57==0) or (number%58==0) or (number%59==0) or (number%60==0) or (number%61==0) or (number%62==0) or (number%63==0) or (number%64==0) or (number%65==0) or (number%66==0) or (number%67==0) or (number%68==0) or (number%69==0) or (number%70==0) or (number%71==0) or (number%72==0) or (number%73==0) or (number%74==0) or (number%75==0) or (number%76==0) or (number%77==0) or (number%78==0) or (number%79==0) or (number%80==0) or (number%81==0) or (number%82==0) or (number%83==0) or (number%84==0) or (number%85==0) or (number%86==0) or (number%87==0) or (number%88==0) or (number%89==0) or (number%90==0) or (number%91==0) or (number%92==0) or (number%93==0) or (number%94==0) or (number%95==0) or (number%96==0) or (number%97==0) or (number%98==0) or (number%99==0) or (number%100==0) or (number%101==0) or (number%102==0) or (number%103==0) or (number%104==0) or (number%105==0) or (number%106==0) or (number%107==0) or (number%108==0) or (number%109==0) or (number%110==0) or (number%111==0) or (number%112==0) or (number%113==0) or (number%114==0) or (number%115==0) or (number%116==0) or (number%117==0) or (number%118==0) or (number%119==0) or (number%120==0) or (number%121==0) or (number%122==0) or (number%123==0) or (number%124==0) or (number%125==0) or (number%126==0) or (number%127==0) or (number%128==0) or (number%129==0) or (number%130==0) or (number%131==0) or (number%132==0) or (number%133==0) or (number%134==0) or (number%135==0) or (number%136==0) or (number%137==0) or (number%138==0) or (number%139==0) or (number%140==0) or (number%141==0) or (number%142==0) or (number%143==0) or (number%144==0) or (number%145==0) or (number%146==0) or (number%147==0) or (number%148==0) or (number%149==0) or (number%150==0) or (number%151==0) or (number%152==0) or (number%153==0) or (number%154==0) or (number%155==0) or (number%156==0) or (number%157==0) or (number%158==0) or (number%159==0) or (number%160==0) or (number%161==0) or (number%162==0) or (number%163==0) or (number%164==0) or (number%165==0) or (number%166==0) or (number%167==0) or (number%168==0) or (number%169==0) or (number%170==0) or (number%171==0) or (number%172==0) or (number%173==0) or (number%174==0) or (number%175==0) or (number%176==0) or (number%177==0) or (number%178==0) or (number%179==0) or (number%180==0) or (number%181==0) or (number%182==0) or (number%183==0) or (number%184==0) or (number%185==0) or (number%186==0) or (number%187==0) or (number%188==0) or (number%189==0) or (number%190==0) or (number%191==0) or (number%192==0) or (number%193==0) or (number%194==0) or (number%195==0) or (number%196==0) or (number%197==0) or (number%198==0) or (number%199==0) or (number%200==0) or (number%201==0) or (number%202==0) or (number%203==0) or (number%204==0) or (number%205==0) or (number%206==0) or (number%207==0) or (number%208==0) or (number%209==0) or (number%210==0) or (number%211==0) or (number%212==0) or (number%213==0) or (number%214==0) or (number%215==0) or (number%216==0) or (number%217==0) or (number%218==0) or (number%219==0) or (number%220==0) or (number%221==0) or (number%222==0) or (number%223==0) or (number%224==0) or (number%225==0) or (number%226==0) or (number%227==0) or (number%228==0) or (number%229==0) or (number%230==0) or (number%231==0) or (number%232==0) or (number%233==0) or (number%234==0) or (number%235==0) or (number"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def is_armstrong(n):\n        divider = 0\n        for i in range(n):\n            if n % i == 0:\n                divider += 1\n                if divider == 2:\n                    return True\n        return False\n    def armstrong(n):\n        sum = 0\n        for i in range(n):\n            sum += i\n        count = 0\n        while sum!= n:\n            if is_armstrong(sum):\n                count += 1\n                sum += i\n            else:\n                sum -= i\n        return count\n    count = armstrong(number)\n    return count > 0\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    for i in range(number):\n        digit = number - i\n        if digit < 10:\n            sum += digit\n        else:\n            sum += number % 10\n            number = int(number / 10)\n    if sum == number:\n        return 'Armstrong'\n    else:\n        return 'Not Armstrong'\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    is_armstrong = True\n    \n    for i in range(len(str(number))):\n        num = int(str(number)[i])\n        \n        if num < 10:\n            continue\n        if num % 10 == num:\n            continue\n        if num == int(str(number)[i] * 10):\n            continue\n        else:\n            is_armstrong = False\n    \n    return is_armstrong\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    c=0\n    for i in str(number):\n        c+=1\n        if c%2==0:\n            continue\n        sum=0\n        for j in range(10):\n            sum+=int(i)*j\n        if sum==number:\n            return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    d = {}\n    for i in range(10):\n        d[str(i)] = 0\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    str_number = str(number)\n    length = len(str_number)\n    sum = 0\n    for i in range(length):\n        digit = int(str_number[i])\n        sum = sum + digit ** length\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    summation = 0\n    num = number\n    while num > 0:\n        summation += pow(num,3)\n        num -= 1\n    return summation == number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(1, number + 1)) / number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        if i % 2 == 0:\n            sum += i\n            count += 1\n    sum_average = sum / count\n    return sum_average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for x in range(1, number + 1):\n        sum += x\n        average += x / number\n    return [sum, average]\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for n in range(1, number + 1):\n        s = s + n\n    s = s/number\n    return s\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total=0\n    count=0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n        if(i % 2 == 0):\n            average = total/count\n            print('Average of', i, 'is', average)\n    print('Sum of', number, 'is', total)\n    return total, count, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum+=i\n    average=sum/number\n    return sum,average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    number = [int(i) for i in range(1,number+1)]\n    return (sum(number)/len(number),sum(number)/len(number)*100)\n    \n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and average \n    sum = 0\n    average = 0 \n    # calculate the sum \n    for i in range(0, number+1):\n        sum += i \n    # calculate the average \n    average = sum/number \n    return sum, average \n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        num = int(input(\"Enter an integer: \"))\n        sum = sum + num\n    average = sum/number\n    return(sum,average)\n    \n    \ndef average_and_average_plus_2(number):\n    '''\n    Write a function that uses the sum_average() function to compute and return the average and the difference between 2 numbers.\n    '''\n    sum, average = sum_average(number)\n    plus_two_average = sum + 2\n    average_diff = average - plus_two_average\n    return(sum, average, average_diff)\n    \n    "
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    for i in range(1,number+1):\n        sum += i\n        avg += i\n    avg = sum/number\n    return sum,avg\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n        \n        \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2 == 1:\n        return True\n    else:\n        return False\n        \ndef is_Power(n) : \n    '''\n    Write a python function to check whether the given number is power of 2 or not.\n    '''\n    if n>2:\n        return is_Even(n) and is_Odd(n)\n    else:\n        return is_Even(n)\n        \ndef is_Divisors(n): \n    '''\n    Write a python function to check whether the given number is divisible by 2 or not.\n    '''\n    if n%2==0:\n        return False\n    else:\n        return is_Power(n)\n        \n    \ndef is_Primal(n): \n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if n>2:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n            else:\n                return True\n        else:\n            return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : return True\n    else : return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    print('Check whether the number is even or not')\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n    \nn = int(input('Enter a number : '))\nprint('The number is odd or even : ', is_Even(n)"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(str1):\n        if str1[index] == str1[index+1]:\n            count += 1\n        else:\n            break\n        index += 1\n    if count == 1:\n        return str1[index]\n    else:\n        return \"Error: First repeated character not found in the given string\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    # your code here\n    for i in range(len(str1)):\n        if str1[i]==str1[i-1]:\n            continue\n        return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        if str1[i] not in lst:\n            lst.append(str1[i])\n        else:\n            return str1[i]\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code goes here\n    # pass\n    for i in range(len(str1)):\n        if str1[i]==str1[i-1] and i>0:\n            return str1[i]\n    return \" \"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1.find(str1[0])\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1_len = len(str1)\n    repeat_char = \"\"\n    for i in range(str1_len):\n        if str1[i] == str1[i-1]:\n            repeat_char = repeat_char + str1[i]\n        else:\n            return repeat_char\n    return repeat_char\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #create the dictinary\n    d = dict()\n    #loop through the string\n    for c in str1:\n        if c in d:\n            d[c] = d[c] + 1\n        else:\n            d[c] = 1\n    #check if it is in the dict and if so return it.\n    for key in d:\n        if d[key] > 1:\n            return key\n        elif d[key] == 1:\n            return key\n    #return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # example:\n    # string = \"abcabcab\"\n    # return first_repeated_char(\"abcabcabcab\")\n    i = 0\n    repeated_char = 0\n    while i < len(str1):\n        if str1[i] == str1[i-1]:\n            repeated_char += 1\n        else:\n            return repeated_char\n        i += 1\n    return repeated_char\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Return first occurence of each character in string\n    return str1.count(str1[0])\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc = []\n    for i in range(1, n+1):\n        if (i % 3 == 0):\n            luc.append(i)\n    return luc\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [i for i in range(n+1) if i<=n]\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i < 10 or i > 99:\n            ludic.append(i)\n        else:\n            if i % 10 == 0:\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n + 1):\n        if i <= n:\n            ludic_list.append(i)\n        else:\n            break\n    return ludic_list\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if(n <= 0):\n        return []\n    if(n < 10):\n        return [n]\n    return get_ludic(n - 10) + get_ludic(n - 9) + get_ludic(n - 8) + get_ludic(n - 7) + get_ludic(n - 6) + get_ludic(n - 5) + get_ludic(n - 4) + get_ludic(n - 3) + get_ludic(n - 2) + get_ludic(n - 1)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    num = []\n    for i in range(1, n):\n        if(i < n/2):\n            num.append(i)\n        else:\n            num.append(n-i)\n    return num\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i < 50:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            ludic.append(i)\n    print(ludic)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 0:\n        raise ValueError('Must be positive!')\n    ludic = set()\n    \n    for i in range(n + 1):\n        if i >= n:\n            break\n        if i % 2 == 0:\n            ludic.add(i // 2)\n        if i % 3 == 0:\n            ludic.add(i // 3)\n        if i % 5 == 0:\n            ludic.add(i // 5)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(0, n+1):\n        if i >= 1 and i <= 9:\n            l.append(i)\n        else:\n            break\n    return l\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split()[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split(' ')\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    reverse_string = \"\"\n    for i in range(len(s) - 1, -1, -1):\n        reverse_string += s[i] + \" \"\n    return reverse_string\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reverse = []\n    word = []\n    str = s.split()\n    for i in range(len(str)):\n        word.append(str[i])\n        for j in range(len(word)):\n            reverse.append(word[j][::-1])\n    return \" \".join(reverse)\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # write your code here\n    sentence = s.split(' ')\n    sentence = sentence[::-1]\n    return''.join(sentence)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.replace(' ', '_')\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # using a for loop to reverse the string and print the string\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # The reversed string should not contain duplicate words\n    # but the first and the last letter should remain unchange\n    reverse_string = \"\"\n    current_string = \"\"\n    for word in s.split():\n        current_string += word + \" \"\n    return current_string\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if (num % i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2: return True\n    elif num % 2 == 0: return False\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0: return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if number is divisible by 2\n    if num % 2 == 0:\n        return False\n    \n    # check if number is divisible by 3\n    if num % 3 == 0:\n        return False\n    \n    # if number is divisible by 5, it is not prime\n    if num % 5 == 0:\n        return False\n    \n    # if number is divisible by 3 and 5, it is not prime\n    if num % 3 == 0 and num % 5 == 0:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if (num % i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, num//2):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1 or num == 0:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    elif num % 2 == 0:\n        return False\n    elif num % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(num)) + 1, 6):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree == 0:\n        return 0\n    else:\n        radian = degree * math.pi/180\n        return radian\ndef process(point_set, edges,point_dict):\n    '''\n    Given a set of points and the edges, return the vertices in the graph\n    '''\n    vertices = point_set\n    #Create vertices\n    vertices.sort()\n    vertices = vertices[::-1]\n    vertices.sort()\n    vertices_dict = dict()\n    for i in range(len(vertices)):\n        vertices_dict[vertices[i]] = i\n    point_dict.update(vertices_dict)\n    #Create edges\n    edges_list = []\n    for key in point_dict.keys():\n        edges_list.append((key, point_dict[key]))\n    edges_list.sort()\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    #Create edges\n    new_edges = []\n    for edge in edges_list:\n        if edge[0] in point_dict.keys():\n            new_edges.append(edge)\n    edges_list = new_edges\n    #Add edges\n    for edge in edges_list:\n        edge_vertices = point_dict[edge[0]]\n        edge_vertices = point_dict[edge_vertices]\n        edge_vertices = point_dict[edge_vertices]\n        point_dict[edge[0]] = edge_vertices\n        point_dict[edge[1]] = edge_vertices\n    #Add edge attributes\n    for edge in edges_list:\n        #edge_vertices = point_dict[edge[0]]\n        #edge_vertices = point_dict[edge_vertices]\n        #edge_vertices = point_dict[edge_vertices]\n        edge_vertices = point_dict[edge[1]]\n        edge_vertices = point_dict[edge_vertices]\n        edge_vertices = point_dict[edge_vertices]\n        #edge_vertices = edge[0]\n        #edge_vertices = edge[1]\n        point_dict[edge[1]] = edge_vertices\n        point_dict[edge[0]] = edge_vertices\n    #Find the correct number of vertices\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:3]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:4]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:5]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:6]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:7]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:8]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:9]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:10]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:11]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:12]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:13]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:14]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:15]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:16]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:17]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:18]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:19]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:20]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:21]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:22]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:23]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:24]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:25]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:26]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:27]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1], reverse=True)\n    edges_list = edges_list[:28]\n    edges_list.sort(key=lambda x: x[1])\n    edges_list.sort(key=lambda x: x[1]"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\ndef angle_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\ndef radian_to_angle(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = radian * (180 / math.pi)\n    return degree\ndef magnitude_of_vector(vector):\n    '''\n    Write a function to calculate the magnitude of a vector.\n    '''\n    mag = vector[0]**2 + vector[1]**2\n    return mag\ndef length_of_vector(vector):\n    '''\n    Write a function to calculate the length of a vector.\n    '''\n    magnitude = magnitude_of_vector(vector)\n    return math.sqrt(magnitude)\ndef add(vector1, vector2):\n    '''\n    Add two vectors.\n    '''\n    magnitude1 = magnitude_of_vector(vector1)\n    magnitude2 = magnitude_of_vector(vector2)\n    return magnitude1+magnitude2, vector1, vector2\ndef sub(vector1, vector2):\n    '''\n    Subtract two vectors.\n    '''\n    magnitude1 = magnitude_of_vector(vector1)\n    magnitude2 = magnitude_of_vector(vector2)\n    return magnitude1-magnitude2, vector1, vector2\ndef dot(vector1, vector2):\n    '''\n    Calculate the dot product of two vectors.\n    '''\n    return vector1[0]*vector2[0] + vector1[1]*vector2[1]\ndef cross(vector1, vector2):\n    '''\n    Calculate the cross product of two vectors.\n    '''\n    return vector1[1]*vector2[0] - vector1[0]*vector2[1]\ndef point_in_circle(center, radius):\n    '''\n    Check if a point is inside the circle defined by center and radius.\n    '''\n    return ((center[0] - radius)**2 + (center[1] - radius)**2)**0.5 < radius**2\ndef triangle_area(a, b, c):\n    '''\n    Calculate the area of a triangle defined by three sides.\n    '''\n    return math.sqrt(3*a[0]*a[1] + b[0]*b[1] + c[0]*c[1])\ndef vector_to_list(vector):\n    '''\n    Convert a vector to a list.\n    '''\n    return vector[0], vector[1]\ndef normal_of_vector(vector):\n    '''\n    Calculate the normal of a vector.\n    '''\n    magnitude = magnitude_of_vector(vector)\n    return (vector[1]/magnitude, vector[0]/magnitude)\ndef to_list(vector):\n    '''\n    Convert a vector to a list.\n    '''\n    return vector[0], vector[1]\ndef angle_between(vector1, vector2):\n    '''\n    Calculate the angle between two vectors.\n    '''\n    magnitude1 = magnitude_of_vector(vector1)\n    magnitude2 = magnitude_of_vector(vector2)\n    return math.acos(vector1[0]*vector2[0] / magnitude1/magnitude2)\ndef vector_angle_between(vector1, vector2):\n    '''\n    Calculate the angle between two vectors.\n    '''\n    magnitude1 = magnitude_of_vector(vector1)\n    magnitude2 = magnitude_of_vector(vector2)\n    return math.acos(vector1[0]*vector2[0] / magnitude1/magnitude2)\ndef vector_magnitude(vector):\n    '''\n    Calculate the magnitude of a vector.\n    '''\n    return magnitude_of_vector(vector)\ndef distance_between(vector1, vector2):\n    '''\n    Calculate the distance between two vectors.\n    '''\n    magnitude1 = magnitude_of_vector(vector1)\n    magnitude2 = magnitude_of_vector(vector2)\n    return math.sqrt(vector1[0]**2 + vector1[1]**2 + vector2[0]**2 + vector2[1]**2 - vector1[0]*vector2[1] - vector1[1]*vector2[0])\ndef normal_to_vector(normal):\n    '''\n    Convert a normal vector to a vector.\n    '''\n    magnitude = vector_magnitude(normal)\n    return (normal[0]/magnitude, normal[1]/magnitude)\ndef angle_between_vectors(vector1, vector2):\n    '''\n    Calculate the angle between two vectors.\n    '''\n    magnitude1 = vector_magnitude(vector1)\n    magnitude2 = vector_magnitude(vector2)\n    return math.acos((vector1[0]*vector2[0] - vector1[1]*vector2[1]) / (magnitude1*magnitude2))\ndef angle_between_vectors_normal(vector1, vector2, normal):\n    '''\n    Calculate the angle between two vectors.\n    '''\n    magnitude1 = vector_magnitude(vector1)\n    magnitude2 = vector_magnitude(vector2)\n    magnitude3 = vector_magnitude(normal)\n    return math.acos((vector1[0]*vector2[0] - vector1[1]*vector2[1] - normal[0]*normal[1]) / (magnitude1*magnitude2*magnitude3))\ndef rotation_vector(vector, angle):\n    '''\n    Calculate the rotation vector of a vector with a given angle.\n    '''\n    return normal_to_vector(cross(vector, normal_to_vector(angle_between_vectors(vector, normal_to_vector(angle), normal_to_vector(angle)))))\ndef rotation_vector_normal(vector, angle):\n    '''\n    Calculate the rotation vector of a vector with a given angle.\n    '''\n    return normal_to_vector(cross(vector, normal_to_vector(angle_between_vectors(vector, normal_to_vector(angle), normal_to_vector(angle)))))\ndef rotation_vector_angle(vector, angle):\n    '''\n    Calculate the rotation vector of a vector with a given angle.\n    '''\n    magnitude = vector_magnitude(vector)\n    return angle_between(normal_to_vector(cross(vector, normal_to_vector(angle_between_vectors(vector, normal_to_vector(angle), normal_to_vector(angle))))) * (magnitude/math.sqrt(magnitude**2 + 1)), angle)\ndef rotation_vector_angle_normal(vector, angle):\n    '''\n    Calculate the rotation vector of a vector with a given angle.\n    '''\n    magnitude = vector_magnitude(vector)\n    return angle_between_vectors_normal(normal_to_vector(cross(vector, normal_to_vector(angle_between_vectors_normal(vector, angle))))) * (magnitude/math.sqrt(magnitude**2 + 1))\ndef cross(vector1, vector2):\n    '''\n    Calculate the cross product of two vectors.\n    '''\n    return vector1[1]*vector2[0] - vector1[0]*vector2[1]\ndef dot(vector1, vector2):\n    '''\n    Calculate the dot product of two vectors.\n    '''\n    return vector1[1]*vector2[0] + vector1[0]*vector2[1]\ndef normal_to_vector(normal):\n    '''\n    Convert a normal vector to a vector.\n    '''\n    magnitude = vector_magnitude(normal)\n    return (normal[0]/magnitude, normal[1]/magnitude)\ndef angle_between_vectors(vector1, vecto"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (math.pi / 180)\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (3.14159 / 180)\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (3.14159 / 180)\n    return radian\ndef degree_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (3.14159 / 180)\n    return radian\ndef speed_to_kph(speed):\n    '''\n    Write a function to convert miles per hour to kilometers per hour.\n    '''\n    kilometers = speed * 1.60934\n    return kilometers\ndef speed_to_mph(speed):\n    '''\n    Write a function to convert miles per hour to mph.\n    '''\n    mph = speed * 1.6\n    return mph\ndef distance_to_km(distance):\n    '''\n    Write a function to convert miles to kilometers.\n    '''\n    km = distance * 1.60934\n    return km\ndef distance_to_mile(distance):\n    '''\n    Write a function to convert miles to miles.\n    '''\n    mile = distance * 1.6\n    return mile\ndef speed_to_kmph(speed):\n    '''\n    Write a function to convert miles per hour to kilometers per hour.\n    '''\n    kmph = speed * 1.6 * 1.60934\n    return kmph\ndef speed_to_mph(speed):\n    '''\n    Write a function to convert miles per hour to mph.\n    '''\n    mph = speed * 1.6 * 1.6\n    return mph\ndef h_to_c(h):\n    '''\n    Write a function to convert hours to degrees.\n    '''\n    c = h * (3.14159 / 360)\n    return c\ndef c_to_h(c):\n    '''\n    Write a function to convert degrees to hours.\n    '''\n    h = c * (3.14159 / 360)\n    return h\ndef h_to_mph(h):\n    '''\n    Write a function to convert hours to miles per hour.\n    '''\n    mph = h * 1.6 * 1.6\n    return mph\ndef mph_to_h(mph):\n    '''\n    Write a function to convert miles per hour to hours.\n    '''\n    h = mph * 1.6\n    return h\ndef m_to_km(m):\n    '''\n    Write a function to convert miles to kilometers.\n    '''\n    km = m * 1.60934\n    return km\ndef km_to_m(km):\n    '''\n    Write a function to convert kilometers to miles.\n    '''\n    m = km / 1.60934\n    return m\ndef m_to_kmph(m):\n    '''\n    Write a function to convert miles to kilometers per hour.\n    '''\n    kmph = m * 1.6 * 1.6\n    return kmph\ndef kmph_to_m(kmph):\n    '''\n    Write a function to convert kilometers per hour to miles.\n    '''\n    m = kmph * 1.6 * 1.6\n    return m\ndef kmph_to_mph(kmph):\n    '''\n    Write a function to convert kilometers per hour to miles per hour.\n    '''\n    mph = kmph * 1.6\n    return mph\ndef m_to_mph(m):\n    '''\n    Write a function to convert miles to miles per hour.\n    '''\n    mph = m * 1.6\n    return mph\ndef mph_to_m(mph):\n    '''\n    Write a function to convert miles per hour to miles.\n    '''\n    m = mph * 1.6\n    return m\ndef m_to_mph(m):\n    '''\n    Write a function to convert miles to miles per hour.\n    '''\n    mph = m * 1.6\n    return mph\ndef speed_to_kmph(speed):\n    '''\n    Write a function to convert miles per hour to kilometers per hour.\n    '''\n    kmph = speed * 1.60934\n    return kmph\ndef kmph_to_speed(kmph):\n    '''\n    Write a function to convert kilometers per hour to miles per hour.\n    '''\n    speed = kmph * 1.6\n    return speed\ndef mile_to_km(mile):\n    '''\n    Write a function to convert miles to kilometers.\n    '''\n    km = mile * 1.6\n    return km\ndef km_to_mile(km):\n    '''\n    Write a function to convert kilometers to miles.\n    '''\n    mile = km / 1.6\n    return mile\ndef mile_to_mph(mile):\n    '''\n    Write a function to convert miles to miles per hour.\n    '''\n    mph = mile * 1.6\n    return mph\ndef mph_to_mile(mph):\n    '''\n    Write a function to convert miles per hour to miles.\n    '''\n    mile = mph * 1.6\n    return mile\ndef mile_to_mph(mile):\n    '''\n    Write a function to convert miles to miles per hour.\n    '''\n    mph = mile * 1.6\n    return mph\ndef mile_to_m(mile):\n    '''\n    Write a function to convert miles to miles.\n    '''\n    m = mile * 1.6\n    return m\ndef m_to_mile(m):\n    '''\n    Write a function to convert miles to miles.\n    '''\n    mile = m * 1.6\n    return mile\ndef mile_to_m(mile):\n    '''\n    Write a function to convert miles to miles.\n    '''\n    m = mile * 1.6\n    return m\ndef speed_to_kmph(speed):\n    '''\n    Write a function to convert miles per hour to kilometers per hour.\n    '''\n    kmph = speed * 1.6 * 1.60934\n    return kmph\ndef kmph_to_speed(kmph):\n    '''\n    Write a function to convert kilometers per hour to miles per hour.\n    '''\n    speed = kmph * 1.6\n    return speed\ndef speed_to_mph(speed):\n    '''\n    Write a function to convert miles per hour to miles per hour.\n    '''\n    mph = speed * 1.6\n    return mph\ndef mph_to_speed(mph):\n    '''\n    Write a function to convert miles per hour to miles per hour.\n    '''\n    mph = mph * 1.6\n    return mph\ndef m_to_kmph(m):\n    '''\n    Write a function to convert miles to kilometers per hour.\n    '''\n    kmph = m * 1.6 * 1.60934\n    return kmph\ndef kmph_to_m(kmph):\n    '''\n    Write a function to convert kilometers per hour to miles per hour.\n    '''\n    m = kmph * 1.6 * 1.6\n    return m\ndef m_to_mph(m):\n    '''\n    Write a function to convert miles to miles per hour.\n    '''\n    mph = m * 1.6\n    return mph\ndef mph_to_m(mph):\n    '''\n    Write a function to convert miles per hour to miles per hour.\n    '''\n    mph = mph * 1.6\n    return mph\ndef miles_to_km(miles):\n    '''\n    Write a function to convert miles to kilometers.\n    '''\n    km = miles * 1.60934\n    return km\ndef km_to_miles(km):\n    '''\n    Write a function to convert kilometers to miles.\n    '''\n    miles = km / 1.60934\n    return miles\ndef miles_to_mph(miles):\n    '''\n    Write a function to convert kilometers to miles per hour.\n    '''\n    mph = miles * 1.6\n    return mph\ndef mph_to_km(mph):\n    '''\n    Write a function to convert miles per hour to kilometers per hour.\n    '''\n    km = mph * 1.6\n    return km\ndef mph_to_mph(mph):\n    '''\n    Write a function to convert miles per hour to miles per hour.\n    '''\n    mph = mph * 1.6\n    return mph\ndef kmph_to_mph(kmph):\n    '''\n    Write a function to convert kilometers per hour to miles per hour.\n    '''\n    mph = kmph * 1.6\n    return mph\ndef mph_t"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree=degree/180.0*math.pi\n    return(radian_degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (math.pi / 180)\n    return radian_degree\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Start and end indexes in the string.\n    i = 0\n    n = len(pattern)\n    # First pattern matches the first character.\n    if pattern[0] == '.':\n        i = 1\n    # If pattern does not start with the first character, get the end index.\n    while i < n:\n        if pattern[i]!= '.':\n            i += 1\n        else:\n            # We have a matching pattern.\n            # Calculate the end index of the matching substring.\n            end_index = i\n            # Calculate the start index of the matching substring.\n            start_index = i\n            # The end index must be greater than or equal to the start index.\n            if end_index >= len(pattern):\n                # Reached the end of the pattern.\n                return i, 0, 0\n            # Get the remainder of the pattern.\n            remainder = pattern[end_index:]\n            # Match the remainder.\n            j = 0\n            while remainder[j] == '.':\n                j += 1\n            # If remainder[j] is '.', end_index must be greater than or equal to j.\n            if remainder[j]!= '.':\n                # Reached the end of the pattern.\n                return i, end_index, end_index\n            # If remainder[j] is '.', start_index must be greater than or equal to j.\n            if remainder[j]!= '.':\n                # Reached the end of the pattern.\n                return end_index, i, end_index\n            # If remainder[j] is '.', end_index must be greater than j.\n            if remainder[j] == '.':\n                # Reached the end of the pattern.\n                return end_index, end_index, i\n            # If remainder[j] is '.', start_index must be greater than or equal to j.\n            if remainder[j]!= '.':\n                # Reached the end of the pattern.\n                return start_index, end_index, end_index\n            # Reached the end of the pattern.\n            return end_index, end_index, end_index\n    # No match found.\n    return -1, -1, -1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if type(pattern) == str:\n        # Converts the regex pattern to a regular expression\n        pattern = re.compile(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    l1 = []\n    l2 = []\n    l3 = []\n    l4 = []\n    l5 = []\n    l6 = []\n    l7 = []\n    l8 = []\n    l9 = []\n    l10 = []\n    l11 = []\n    l12 = []\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    if len(result) == 0:\n        return (None, -1, -1)\n    else:\n        return (result[0], result[1], result[2])\n    \n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = 0\n    end_index = len(text)\n    while end_index > start_index:\n        match = re.search(pattern, text[start_index:end_index])\n        if match:\n            start_index = match.start() + 1\n            end_index = match.end()\n        else:\n            break\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = pattern.replace(\" \", \"\")\n    index = 0\n    start = 0\n    end = 0\n    literal = \"\"\n    \n    while index < len(text):\n        if pattern in text[index:index+len(pattern)]:\n            literal = literal + text[index:index+len(pattern)]\n            index = index + len(pattern)\n        else:\n            index = index + 1\n    return literal\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    sub = re.findall(pattern, text)\n    start = sub[0][0]\n    end = sub[0][-1]\n    return start, end, end - start + 1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = 0\n    end_index = len(text) - 1\n    match = re.search(pattern, text, re.M | re.I)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n    return (start_index, end_index)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # TODO: Write your code here.\n    result = re.search(pattern, text)\n    start = 0\n    end = len(text)\n    match = result.group()\n    if result.start() < 0:\n        start = 0\n    else:\n        start = result.start()\n    if result.end() > len(text):\n        end = len(text)\n    else:\n        end = result.end()\n    return match, start, end\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    s = list(str(n))\n    print(s)\n    last = len(s)-2\n    count = 0\n    for i in range(len(s)):\n        if s[i]=='1':\n            count+=1\n        else:\n            count-=1\n        if count==0:\n            return n+1\n        \n    \n    "
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # print(n)\n    n = n + 1\n    i = 2\n    while i <= n:\n        print(i)\n        i = i + 2 * n\n    return -1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    arr = [0] * n \n    arr[0] = 1\n    arr[1] = 1\n    for i in range(2,n): \n        arr[i] = arr[i-1] + arr[i-2] \n    return arr[n-1] \n    "
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    k=1\n    while(k<=n):\n        k = k+1\n        print(k)\n    print(\"%d is the nth number in the list.\" %k)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # your code goes here\n    if n <= 1: \n        return 1\n    elif n % 2 == 0:\n        return bell_Number(n-1) + 2\n    else:\n        return bell_Number(n-1) + 3\n    # return bell_Number(n) \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    from math import sqrt\n    mod = int(sqrt(n+1))\n    arr = [0]*mod\n    arr[1] = 1\n    arr[2] = 1\n    for i in range(3,mod+1):\n        arr[i] = arr[i-1] + arr[i-2]\n    return arr[n]\n    \n    \n    \ndef factorial(n):\n    '''\n    returns factorial of n\n    '''\n    from math import factorial\n    if n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    lst = [0]*(n+1)\n    lst[0] = 1\n    for i in range(1, n+1):\n        if i % 5 == 0:\n            lst[i] = (lst[i//5]*3) + (lst[i//3]*2) + lst[i//2]\n        elif i % 3 == 0:\n            lst[i] = (lst[i//3]*3) + lst[i//2]\n        elif i % 2 == 0:\n            lst[i] = lst[i//2]\n    return lst[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 1\n    while i < n:\n        i = i + i\n        i = i + 1\n    return i - 1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    print(n)\n    for i in range(n, 0, -1):\n        print(i)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    def remove_kth_element(list1, L, k):\n        left_index = 0\n        right_index = len(list1) - 1\n        while left_index < right_index:\n            if k < 0:\n                return list1[:right_index] + list1[right_index + 1:]\n            elif k > L:\n                return list1[:left_index] + list1[left_index + 1:]\n            elif k == L:\n                return list1[:right_index] + list1[right_index + 1:]\n            else:\n                left_index += 1\n                k -= 1\n        return list1\n    return remove_kth_element(list1, L, k)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(dict.pop(list1, {}).values())\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list(list1)\n    list1.pop(L)\n    return list1\n    \ndef remove_kth_element_random(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = random.sample(list1, L)\n    list1.pop(L)\n    return list1\n    \ndef clear_all(list1):\n    '''\n    Write a python function which takes a list and returns a list with all the elements removed.\n    '''\n    list1 = list(list1)\n    list1.clear()\n    return list1\n    \ndef is_even(list1):\n    '''\n    Write a python function which takes a list and returns True if the list has even elements, otherwise it returns False.\n    '''\n    list1 = list(list1)\n    list1.sort()\n    if list1[0] % 2 == 0 and list1[1] % 2 == 0 and list1[2] % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_even_random(list1):\n    '''\n    Write a python function which takes a list and returns True if the list has even elements, otherwise it returns False.\n    '''\n    list1 = random.sample(list1, L)\n    list1.sort()\n    if list1[0] % 2 == 0 and list1[1] % 2 == 0 and list1[2] % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef reverse(list1):\n    '''\n    Write a python function which takes a list and returns a list with the elements in reverse order.\n    '''\n    list1 = list(list1)\n    list1.reverse()\n    return list1\n    \ndef reverse_random(list1):\n    '''\n    Write a python function which takes a list and returns a list with the elements in reverse order.\n    '''\n    list1 = random.sample(list1, L)\n    list1.reverse()\n    return list1\n    \ndef nth_root(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the elements nth root of L.\n    '''\n    list1 = list(list1)\n    list1.sort()\n    index = int(L / 2)\n    if index == 0:\n        return list1\n    elif index == 1:\n        return list1[index:]\n    elif index == L - 1:\n        return list1[:index]\n    else:\n        return list1[index:] + list1[:index]\n    \ndef middle_element(list1):\n    '''\n    Write a python function which takes a list and returns the middle element of the list.\n    '''\n    list1 = list(list1)\n    return list1[int(len(list1) / 2)]\n    \ndef max_element(list1):\n    '''\n    Write a python function which takes a list and returns the maximum element of the list.\n    '''\n    list1 = list(list1)\n    return max(list1)\n    \ndef min_element(list1):\n    '''\n    Write a python function which takes a list and returns the minimum element of the list.\n    '''\n    list1 = list(list1)\n    return min(list1)\n    \ndef average(list1):\n    '''\n    Write a python function which takes a list and returns the average of the list.\n    '''\n    list1 = list(list1)\n    return sum(list1) / len(list1)\n    \ndef sum_squared_list(list1):\n    '''\n    Write a python function which takes a list and returns the sum of squared elements of the list.\n    '''\n    list1 = list(list1)\n    return sum(map(lambda x: x ** 2, list1))\n    \ndef sum_square_random(list1):\n    '''\n    Write a python function which takes a list and returns the sum of squared elements of the list.\n    '''\n    list1 = random.sample(list1, L)\n    list1 = list(list1)\n    list1.sort()\n    return sum(map(lambda x: x ** 2, list1))\n    \ndef p_list(list1):\n    '''\n    Write a python function which takes a list and returns the percent of the list.\n    '''\n    list1 = list(list1)\n    list1.sort()\n    return len(list1) * 100 / len(list1)\n    \ndef sort_list(list1):\n    '''\n    Write a python function which takes a list and returns the list in the order of the numbers.\n    '''\n    list1 = list(list1)\n    list1.sort()\n    return list1\n    \ndef index_of_value(list1, val):\n    '''\n    Write a python function which takes a list and a value and returns the index of the value in the list.\n    '''\n    list1 = list(list1)\n    list1.sort()\n    i = 0\n    while i < len(list1) and list1[i]!= val:\n        i = i + 1\n    if i < len(list1):\n        return i\n    else:\n        return -1\n    \ndef replace_list(list1, list2):\n    '''\n    Write a python function which takes a list and a list and returns a new list with the elements from the list replaced with the values from the list2.\n    '''\n    list1 = list(list1)\n    list2 = list(list2)\n    list1.extend(list2)\n    list1.sort()\n    return list1\n    \ndef remove_all(list1, L):\n    '''\n    Write a python function which takes a list and a value and returns a new list with all the values in list1 except value L.\n    '''\n    list1 = list(list1)\n    list1.pop(L)\n    return list1\n    \ndef remove_all_random(list1, L):\n    '''\n    Write a python function which takes a list and a value and returns a new list with all the values in list1 except value L.\n    '''\n    list1 = random.sample(list1, L)\n    list1.pop(L)\n    return list1\n    \ndef remove_all_index(list1, L):\n    '''\n    Write a python function which takes a list and a value and returns a new list with all the values in list1 except value L.\n    '''\n    list1 = list(list1)\n    list1.pop(list1.index(L))\n    return list1\n    \ndef add_to_end(list1, value):\n    '''\n    Write a python function which takes a list and a value and returns a new list with all the values in list1 after adding value L.\n    '''\n    list1 = list(list1)\n    list1.append(value)\n    list1.sort()\n    return list1\n    \ndef add_to_end_random(list1, value):\n    '''\n    Write a python function which takes a list and a value and returns a new list with all the values in list1 after adding value L.\n    '''\n    list1 = random.sample(list1, L)\n    list1.append(value)\n    list1.sort()\n    return list1\n    \ndef add_to_end_index(list1, value):\n    '''\n    Write a python function which takes a list and a value and returns a new list with all the values in list1 after adding value L.\n    '''\n    list1 = list(list1)\n    list1.insert(list1.index(value), value)\n    list1.sort()\n    return list1\n    \ndef add_to_front(list1, value):\n    '''\n    Write a python function which takes a list and a value and returns a new list with all the values in list1 before adding value L.\n    '''\n    list1 = list(list1)\n    list1.append(value)\n    list1.sort()\n    return list1\n    \ndef add_to_front_random(list1, value):\n    '''\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if(len(list1)<L):\n        return list1\n    else:\n        return remove_kth_element(list1[L:], L)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    sorted_list = sorted(list1, reverse=True)\n    return sorted_list[:L]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i)\n        print(list2)\n    remove_kth_element(list1, L)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    temp = []\n    for i in range(len(list1)):\n        temp.append(list1[i])\n    return temp[:L]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == [] or L is None:\n        return []\n    return list1[0:len(list1)-L]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    if len(list1) == 1:\n        return [list1[0]]\n    else:\n        return remove_kth_element(list1[1:], L[1:])\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[L:]\n    \ndef search_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element found.\n    '''\n    return list1[:L]\n    \n    \ndef last_k_elements(list1, K):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the last k'th element removed.\n    '''\n    return list1[-K:]\n    \ndef merge_sorted(list1, list2):\n    '''\n    Write a python function which takes two sorted lists and return their merged lists.\n    '''\n    #this function will merge two lists\n    #a, b = list1, list2\n    #i = 0\n    #\n    ##this loop will run till the two lists have one item\n    ##of their first item\n    #while i < len(a):\n        #if a[i] < b[i]:\n            #a[i] = a[i] < b[i]\n        #i += 1\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[:,N])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Initializing variables\n    n = len(test_list)\n    if (n == 0):\n        return None\n    l = len(test_list[0])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # We need to sort the matrix in ascending order\n    test_list = sorted(test_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key=lambda x: x[N])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 0:\n        return 0\n    if len(test_list) == 0:\n        return 0\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return test_list[N-1][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    import math\n    import random\n    def min_of_nth(test_list, N):\n        '''\n        Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n        '''\n        from collections import Counter\n        def print_function(test_list):\n            '''\n            Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n            '''\n            import math\n            import random\n            def print_function(test_list):\n                '''\n                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                '''\n                import math\n                import random\n                def print_function(test_list):\n                    '''\n                    Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                    '''\n                    from collections import Counter\n                    def print_function(test_list):\n                        '''\n                        Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                        '''\n                        import math\n                        import random\n                        def print_function(test_list):\n                            '''\n                            Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                            '''\n                            import math\n                            import random\n                            def print_function(test_list):\n                                '''\n                                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                '''\n                                import math\n                                import random\n                                def print_function(test_list):\n                                    '''\n                                    Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                    '''\n                                    from collections import Counter\n                                    def print_function(test_list):\n                                        '''\n                                        Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                        '''\n                                        import math\n                                        import random\n                                        def print_function(test_list):\n                                            '''\n                                            Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                            '''\n                                            import math\n                                            import random\n                                            def print_function(test_list):\n                                                '''\n                                                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                '''\n                                                import math\n                                                import random\n                                                def print_function(test_list):\n                                                    '''\n                                                    Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                    '''\n                                                    import math\n                                                    import random\n                                                    def print_function(test_list):\n                                                        '''\n                                                    Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                    '''\n                                                        import math\n                                                        import random\n                                                        def print_function(test_list):\n                                                            '''\n                                                            Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                            '''\n                                                            import math\n                                                            import random\n                                                            def print_function(test_list):\n                                                                '''\n                                                                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                '''\n                                                                import math\n                                                                import random\n                                                                def print_function(test_list):\n                                                                    '''\n                                                                    Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                    '''\n                                                                    import math\n                                                                    import random\n                                                                    def print_function(test_list):\n                                                                            '''\n                                                                            Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                            '''\n                                                                            import math\n                                                                            import random\n                                                                            def print_function(test_list):\n                                                                                '''\n                                                                                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                                '''\n                                                                                import math\n                                                                                import random\n                                                                                def print_function(test_list):\n                                                                                '''\n                                                                                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                                '''\n                                                                                import math\n                                                                                import random\n                                                                                def print_function(test_list):\n                                                                                '''\n                                                                                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                                '''\n                                                                                import math\n                                                                                import random\n                                                                                def print_function(test_list):\n                                                                                    '''\n                                                                                    Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                                    '''\n                                                                                    import math\n                                                                                    import random\n                                                                                    def print_function(test_list):\n                                                                                        '''\n                                                                                        Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                                        '''\n                                                                                        import math\n                                                                                        import random\n                                                                                        def print_function(test_list):\n                                                                                            '''\n                                                                                            Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                                            '''\n                                                                                            import math\n                                                                                            import random\n                                                                                            def print_function(test_list):\n                                                                                                '''\n                                                                                                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                                            '''\n                                                                                                import math\n                                                                                            import random\n                                                                                            def print_function(test_list):\n                                                                                                '''\n                                                                                                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                                            '''\n                                                                                                import math\n                                                                                            import random\n                                                                                            def print_function(test_list):\n                                                                                                '''\n                                                                                                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                                            '''\n                                                                                                import math\n                                                                                            import random\n                                                                                            def print_function(test_list):\n                                                                                                '''\n                                                                                                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                                            '''\n                                                                                                import math\n                                                                                            import random\n                                                                                            def print_function(test_list):\n                                                                                                '''\n                                                                                                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                                            '''\n                                                                                                import math\n                                                                                            import random\n                                                                                            def print_function(test_list):\n                                                                                                '''\n                                                                                                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                                            '''\n                                                                                                import math\n                                                                                            import random\n                                                                                            def print_function(test_list):\n                                                                                                '''\n                                                                                                Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n                                                                                            '''\n                                                                                                import math\n                                                                                            import random\n                                                                                            def print_function(test_list):\n                                                                                                '''\n                                                                                                Write a function which given a matrix represente"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return []\n    if N == 1:\n        return [test_list[0][0]]\n    if N == len(test_list):\n        return test_list[0]\n    max = test_list[0][N-1]\n    for i in range(1,N):\n        if test_list[i][N-1] > max:\n            max = test_list[i][N-1]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    row = len(test_list)\n    return max(test_list[row - N:row])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    print(test_list)\n    if N < 0:\n        return\n    elif N == 0:\n        return max(test_list)\n    else:\n        return max(test_list[N])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    if len(lst) == 0:\n        return res\n    for i in range(len(lst)):\n        res.append(lst[i])\n        res.append(lst[:i] + lst[i+1:])\n    return res\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) < 2:\n        return lst\n    new_lst = []\n    for index in range(len(lst)):\n        new_lst.append([lst[index][0]] + lst[index])\n    new_lst = merge(new_lst)\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    output = []\n    for i in lst:\n        output.append(i[0][0])\n        output.append(i[0][1])\n    return outpu"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return merge_sorted([tuple(sorted(x)) for x in lst])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    output = []\n    output.append(lst[0][0])\n    output.append(lst[1][0])\n    output.append(lst[1][1])\n    output.append(lst[0][1])\n    return output\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    # variable to store the first element and the second element of each sublist\n    first_element = None\n    second_element = None\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #your code here\n    answer=[]\n    for i in lst:\n        answer.append(i[0])\n        answer.append(i[1])\n    return answer\nlst=[\n    [10,20,30],\n    [40,50,60],\n    [70,80,90]\n    ]\nprint(merge(lst)"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if(len(lst) <= 1):\n        return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst)==0:\n        return []\n    elif len(lst)==1:\n        return lst\n    else:\n        first, second = lst\n        result = merge(first)\n        result.append(second)\n        return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(i) for i in zip(*lst)]\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for x in range(len(test_list)):\n        cummulative_sum += test_list[x]\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum = cumulative_sum + test_list[i]\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for i in test_list:\n        result = result + i\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    total = 0\n    for value in test_list:\n        total += value\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Get the values from the tuple\n    sum = 0\n    for v in test_list:\n        sum += v\n    # Return the cumulative sum\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Step 1 - Initialize an empty list.\n    cummulative_sum_list = []\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i][1]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #TODO: Complete this method\n    average=[]\n    for i in range(len(nums)):\n        sum=0\n        for j in range(len(nums[i])):\n            sum=sum+nums[i][j]\n        average.append(sum/len(nums[i]))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums = [(a,b) for a,b in nums]\n    nums = [sum(a) for a in nums]\n    return nums\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = []\n    for i in nums:\n        for j in i:\n            tuple_list.append(j)\n    return tuple(tuple_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    first_tuple = nums[0]\n    value_list = [tuple[0] for tuple in first_tuple]\n    sum = 0\n    for value in value_list:\n        sum += value\n    return sum/len(nums)\n    \n    \ndef square_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the square of each value.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    value_list = [tuple[0]**2 for tuple in nums]\n    return value_list\n    \n    \ndef tuple_to_string(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns a string of all values separated by commas and all values separated by commas.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    tup = list(tuple(num) for num in nums)\n    list_of_strings = [\"{0}\".format(item) for item in tup]\n    return \",\".join(list_of_strings)\n    \n    \ndef tuple_to_string_for_stat(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns a string of all values separated by commas and all values separated by commas.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    tup = list(tuple(num) for num in nums)\n    list_of_strings = [\"{0}\".format(item) for item in tup]\n    return \",\".join(list_of_strings)\n    \n    \ndef average(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    value_list = [tuple[0] for tuple in nums]\n    return average_tuple(value_list)\n    \n    \ndef average_list(nums):\n    '''\n    Write a function which takes a list of tuples and returns the average value.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    value_list = [tuple[0] for tuple in nums]\n    return average_tuple(value_list)\n    \n    \ndef square(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the square of each value.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    value_list = [tuple[0]**2 for tuple in nums]\n    return value_list\n    \n    \ndef sqare_list(nums):\n    '''\n    Write a function which takes a list of tuples and returns the square of each value.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    value_list = [tuple[0]**2 for tuple in nums]\n    return value_list\n    \n    \ndef combine_dict(nums):\n    '''\n    Write a function which takes a dictionary and returns the sum of values for each key.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    value_list = [sum(nums[key]) for key in nums]\n    return value_list\n    \n    \ndef empty_dict(nums):\n    '''\n    Write a function which returns a dictionary of tuples of two keys with the respective values being the sum of values for each key.\n    '''\n    if len(nums) == 0:\n        return {}\n    \n    dict_of_tuples = {tuple[0]: tuple[1] for tuple in nums}\n    return dict_of_tuples\n    \n    \ndef empty_list(nums):\n    '''\n    Write a function which returns a list of tuples of two keys with the respective values being the sum of values for each key.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    dict_of_tuples = {tuple[0]: tuple[1] for tuple in nums}\n    return list(dict_of_tuples.values())\n    \n    \ndef my_list_comprehension(nums):\n    '''\n    Write a function which takes a list of tuples and returns a list of the values squared.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    return [tuple[0]**2 for tuple in nums]\n    \n    \ndef my_list_comprehension_for_stat(nums):\n    '''\n    Write a function which takes a list of tuples and returns a list of the values squared.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    return [tuple[0]**2 for tuple in nums]\n    \n    \ndef my_dict_comprehension(nums):\n    '''\n    Write a function which takes a list of tuples and returns a list of the values squared.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    return [tuple[0]**2 for tuple in nums]\n    \n    \ndef my_dict_comprehension_for_stat(nums):\n    '''\n    Write a function which takes a list of tuples and returns a list of the values squared.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    return [tuple[0]**2 for tuple in nums]\n    \n    \ndef my_list_comprehension_for_stat(nums):\n    '''\n    Write a function which takes a list of tuples and returns a list of the values squared.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    return [tuple[0]**2 for tuple in nums]\n    \n    \ndef my_list_comprehension_for_stat_for_stat(nums):\n    '''\n    Write a function which takes a list of tuples and returns a list of the values squared.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    return [tuple[0]**2 for tuple in nums]\n    \n    \ndef my_dict_comprehension_for_stat_for_stat(nums):\n    '''\n    Write a function which takes a list of tuples and returns a list of the values squared.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    return [tuple[0]**2 for tuple in nums]\n    \n    \ndef my_dict_comprehension_for_stat_for_stat_for_stat(nums):\n    '''\n    Write a function which takes a list of tuples and returns a list of the values squared.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    return [tuple[0]**2 for tuple in nums]\n    \n    \ndef my_list_comprehension_for_stat_for_stat_for_stat(nums):\n    '''\n    Write a function which takes a list of tuples and returns a list of the values squared.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    return [tuple[0]**2 for tuple in nums]\n    \n    \ndef my_dict_comprehension_for_stat_for_stat_for_stat(nums):\n    '''\n    Write a function which takes a list of tuples and returns a list of the values squared.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    return [tuple[0]**2 for tuple in nums]\n    \n    \ndef my_dict_comprehension_for_stat_for_stat_for_stat_for_stat(nums):\n    '''\n    Write a function which takes a list of tuples and returns a list of the values squared.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    return [tuple[0"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # First we need to count the number of elements\n    count = 0\n    total = 0\n    # We loop through the tuple\n    for x in nums:\n        # We sum the values\n        total = total + x[1]\n        # We increment the count\n        count += 1\n    # We return the sum divided by count\n    return total / count\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [x/len(nums) for x in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x)/len(x) for x in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum_list = []\n    for i in range(len(nums)):\n        sum_list.append(nums[i][1])\n    return (sum(sum_list)/len(sum_list))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for i in range(len(nums)):\n        average.append(sum(nums[i]) / len(nums[i]))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    def func(t):\n        return sum(t)/len(t)\n    return (func(t) for t in nums)\n    \n    \n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #Write your code here\n    mod = 1\n    for i in range(0,len(test_tup1)):\n        mod = mod*test_tup1[i]\n    mod = mod%test_tup2[len(test_tup2)-1]\n    \n    return mod\n    \ndef modulo_to_string(test_modulo):\n    '''\n    Write a function which takes a tuple of two integers and returns the same tuple of integers with the modulo of them.\n    '''\n    #Write your code here\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    \n    return (modulo)\n    \ndef string_to_modulo(test_string):\n    '''\n    Write a function which takes a string of two characters and returns the modulo of them.\n    '''\n    #Write your code here\n    a = test_string[0]\n    b = test_string[1]\n    modulo = tuple_modulo(a,b)\n    \n    return (modulo)\n    \ndef modulo_to_string(test_modulo):\n    '''\n    Write a function which takes a tuple of two integers and returns the same tuple of integers with the modulo of them.\n    '''\n    #Write your code here\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    \n    return (modulo)\n    \ndef modulo_to_string(test_modulo):\n    '''\n    Write a function which takes a tuple of two integers and returns the same tuple of integers with the modulo of them.\n    '''\n    #Write your code here\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    \n    return (modulo)\n    \ndef print_modulo(test_modulo):\n    '''\n    Write a function which takes a tuple of two integers and returns the modulo of them.\n    '''\n    #Write your code here\n    print(test_modulo[0])\n    print(test_modulo[1])\n    modulo = tuple_modulo(test_modulo[0],test_modulo[1])\n    print(modulo)\n    \n    return (modulo)\n    \ndef modulo_to_string(test_modulo):\n    '''\n    Write a function which takes a tuple of two integers and returns the same tuple of integers with the modulo of them.\n    '''\n    #Write your code here\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    \n    return (modulo)\n    \ndef modulo_to_string(test_modulo):\n    '''\n    Write a function which takes a tuple of two integers and returns the same tuple of integers with the modulo of them.\n    '''\n    #Write your code here\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    \n    return (modulo)\n    \ndef string_to_modulo(test_string):\n    '''\n    Write a function which takes a string of two characters and returns the modulo of them.\n    '''\n    #Write your code here\n    a = test_string[0]\n    b = test_string[1]\n    modulo = tuple_modulo(a,b)\n    a = test_string[0]\n    b = test_string[1]\n    modulo = tuple_modulo(a,b)\n    \n    return (modulo)\n    \ndef modulo_to_string(test_modulo):\n    '''\n    Write a function which takes a tuple of two integers and returns the same tuple of integers with the modulo of them.\n    '''\n    #Write your code here\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    \n    return (modulo)\n    \ndef modulo_to_string(test_modulo):\n    '''\n    Write a function which takes a tuple of two integers and returns the same tuple of integers with the modulo of them.\n    '''\n    #Write your code here\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    \n    return (modulo)\n    \ndef print_modulo(test_modulo):\n    '''\n    Write a function which takes a tuple of two integers and returns the modulo of them.\n    '''\n    #Write your code here\n    print(test_modulo[0])\n    print(test_modulo[1])\n    modulo = tuple_modulo(test_modulo[0],test_modulo[1])\n    print(modulo)\n    \n    return (modulo)\n    \ndef modulo_to_string(test_modulo):\n    '''\n    Write a function which takes a tuple of two integers and returns the same tuple of integers with the modulo of them.\n    '''\n    #Write your code here\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    \n    return (modulo)\n    \ndef modulo_to_string(test_modulo):\n    '''\n    Write a function which takes a tuple of two integers and returns the same tuple of integers with the modulo of them.\n    '''\n    #Write your code here\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    a = int(input(\"Enter first integer: \"))\n    b = int(input(\"Enter second integer: \"))\n    modulo = tuple_modulo(a,b)\n    \n    return (modulo)\n    \ndef string_to_modulo(test_string):\n    '''\n    Write a function which takes a string of two characters and returns the modulo of them.\n    '''\n    #Write your code here\n    a = test_string[0]\n    b = test_string[1]\n    modulo = tuple_modulo(a,b)\n    a = test_string[0]\n    b = test_string[1]\n    modulo = tuple_modulo(a,b)\n    \n    return (modulo)\n    \ndef modulo_to"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return (test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1])\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('The length of the two tuples must be the same')\n    else:\n        result = tuple([x%y for x,y in zip(test_tup1,test_tup2)])\n        return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result.append((test_tup1[i] % test_tup2[i]) % test_tup2[i])\n    else:\n        raise Exception(\"The length of the two tuples is not the same\")\n    return result\n    "
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup_mod = ()\n    for i in range(len(test_tup1)):\n        tup_mod = tup_mod + (test_tup1[i] % test_tup2[i])\n    return tuple(tup_mod)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print(\"\\nDividing the tuples of the same length by their modulo with:\")\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    for element in range(len(test_tup1)):\n        test_tup1[element] = tuple(map(lambda x,y: x%y, test_tup1[element], test_tup2[element]))\n    return test_tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # initialize return variable\n    returned = ()\n    # create a for loop to iterate over all elements in the tuples\n    for i in test_tup1:\n        returned = returned + i\n    for i in test_tup2:\n        returned = returned + i\n    # return tuple\n    return returned\n    # return tuple\n    \nprint(tuple_modulo((1,2), (3,4,5)))"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x: x[0] % x[1], zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Tuple sizes must match')\n    elif len(test_tup1) == 0:\n        raise Exception('No element in tuple')\n    elif len(test_tup1) == 1:\n        return test_tup1[0] % test_tup2[0]\n    elif len(test_tup1) == 2:\n        return tuple(tuple(x) % y for x, y in zip(test_tup1, test_tup2))\n    else:\n        return tuple(tuple(x) % y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1_modified = test_tup1[:]\n    test_tup2_modified = test_tup2[:]\n    for i in range(len(test_tup1)):\n        test_tup1_modified[i] = test_tup1[i] % test_tup2[i]\n    for i in range(len(test_tup2)):\n        test_tup2_modified[i] = test_tup2[i] % test_tup1[i]\n    return test_tup1_modified, test_tup2_modified\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def valid_path(path):\n        for i in range(len(path) - 1):\n            if path[i][0] == path[i + 1][0] or path[i][1] == path[i + 1][1]:\n                return False\n        return True\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    jumps = 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    l = len(steps)\n    # check if the starting position is valid\n    if (d < 0 or d >= (steps[0][0]+steps[1][0])):\n        return \"Wrong Position\"\n    # check for the end position \n    if d == 0:\n        if (l == 1):\n            return 0\n        else:\n            return l\n    # check for end position\n    if d == (steps[0][0]+steps[1][0]):\n        if (l == 1):\n            return l\n        else:\n            return l + 1\n    # check for free steps\n    if d < (steps[0][0]+steps[1][0]) or d > (steps[0][0]+steps[1][0]):\n        return \"Wrong Position\"\n    # if free steps\n    if l == 1:\n        return 0\n    else:\n        # find the position of the next free step\n        i = (steps[0][0]+steps[1][0])//2\n        # find the number of jumps\n        jumps = 0\n        for j in range(i-1, i+2):\n            if (j >= 0 and j < l):\n                if steps[j][0] == d:\n                    jumps += 1\n        # return the number of jumps\n        return jumps\n    "
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #If the number of jumps is equal to or greater than the number of jumps in the plane, return true\n    return steps == d\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # start by checking the starting point is in the form of a point of form (d,0)\n    start = d\n    \n    # when you find a point of form (d,0) or the point of form (0,0)\n    while (d + 1)!= -1: \n    \n        # check if the direction is not vertical\n        if (d + 1)!= -1: \n            # if it is not vertical, move on the right\n            if (steps[d + 1][0] == steps[d][0] + 1): \n                # if it is, move one by one\n                d += 1\n            else: \n                # if it is not, move one by one\n                d += 1\n        else: \n            # if it is vertical, move on the left\n            if (steps[0][1] == steps[d][1] + 1): \n                # if it is, move one by one\n                d += 1\n            else: \n                # if it is not, move one by one\n                d += 1\n    \n    # if the direction is vertical, then the point is at the origin\n    # and there is no more steps to take\n    if d == 0: \n        return -1\n    \n    # if the direction is horizontal, then the point is at the origin\n    # and there is no more steps to take\n    else: \n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # write your code here\n    steps = steps.split()\n    for i in range(len(steps) - 1):\n        if steps[i] == 'L':\n            steps[i] = 'U'\n        else:\n            steps[i] = 'R'\n    jumps = []\n    i, j = d, 0\n    while i >= 0:\n        jumps.append(i)\n        i -= 1\n        i = abs(i)\n    i = 0\n    while j < len(steps) - 1:\n        if steps[j] == 'U':\n            jumps.append(j)\n            j += 1\n            j = abs(j)\n        elif steps[j] == 'L':\n            jumps.append(j)\n            j += 1\n            j = abs(j)\n        else:\n            jumps.append(j)\n            j = abs(j)\n        j = 0\n    return ''.join(steps[0:j + 1])\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def gen_graph(d, d_graph):\n        # returns a list of lists in the given 2d graph\n        return [ [0] * (2 * d) for _ in range(d_graph[0]) ]\n    \n    def min_Jumps(steps, d, d_graph):\n        d_count = {0: 1}\n        for j in range(d):\n            j_count = 0\n            for i in range(d):\n                if steps[i][j] > 0:\n                    j_count += 1\n            d_count[j_count] = 1 + min_Jumps(steps, j_count, d_graph)\n        return d_count[0]\n    \n    # initialize graph with d = 2d\n    d_graph = gen_graph(d, d_graph)\n    \n    # use min jumps algorithm to find the minimum number of jumps\n    return min_Jumps(steps, d, d_graph)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    ### YOUR CODE HERE ###\n    #raise NotImplementedError\n    ### END YOUR CODE ###\n    \n    return steps\n    \nif __name__ == '__main__':\n    print('Example 1:')\n    print('Input : ')\n    print('steps = 2')\n    print('Output :')\n    print(str(min_Jumps(2, 1)))\n    \n    print('Example 2:')\n    print('Input : ')\n    print('steps = 5')\n    print('Output :')\n    print(str(min_Jumps(5, 1)))\n    \n    print('Example 3:')\n    print('Input : ')\n    print('steps = 7')\n    print('Output :')\n    print(str(min_Jumps(7, 1)))\n    \n    print('Example 4:')\n    print('Input :')\n    print('steps = 0')\n    print('Output :')\n    print(str(min_Jumps(0, 1)))\n    \n    print('Example 5:')\n    print('Input :')\n    print('steps = 3')\n    print('Output :')\n    print(str(min_Jumps(3, 1)))\n    \n    print('Example 6:')\n    print('Input :')\n    print('steps = 7')\n    print('Output :')\n    print(str(min_Jumps(7, 1)))\n    \n    print('Example 7:')\n    print('Input :')\n    print('steps = 0')\n    print('Output :')\n    print(str(min_Jumps(0, 1)))\n    \n    pas"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0\n    if steps == 1: \n        return 1\n    if d == 0: \n        return 0\n    if d == 1: \n        return 1\n    if d == 2: \n        return 0\n    if d == 3: \n        return 1\n    if d == 4: \n        return 1\n    if d == 5: \n        return 0\n    if d == 6: \n        return 0\n    if d == 7: \n        return 1\n    if d == 8: \n        return 1\n    if d == 9: \n        return 0\n    if d == 10: \n        return 1\n    if d == 11: \n        return 1\n    if d == 12: \n        return 0\n    if d == 13: \n        return 0\n    if d == 14: \n        return 1\n    if d == 15: \n        return 1\n    if d == 16: \n        return 0\n    if d == 17: \n        return 1\n    if d == 18: \n        return 1\n    if d == 19: \n        return 1\n    if d == 20: \n        return 0\n    if d == 21: \n        return 1\n    if d == 22: \n        return 1\n    if d == 23: \n        return 1\n    if d == 24: \n        return 0\n    if d == 25: \n        return 1\n    if d == 26: \n        return 1\n    if d == 27: \n        return 0\n    if d == 28: \n        return 1\n    if d == 29: \n        return 1\n    if d == 30: \n        return 1\n    if d == 31: \n        return 0\n    if d == 32: \n        return 1\n    if d == 33: \n        return 1\n    if d == 34: \n        return 0\n    if d == 35: \n        return 1\n    if d == 36: \n        return 1\n    if d == 37: \n        return 1\n    if d == 38: \n        return 0\n    if d == 39: \n        return 1\n    if d == 40: \n        return 1\n    if d == 41: \n        return 1\n    if d == 42: \n        return 0\n    if d == 43: \n        return 1\n    if d == 44: \n        return 1\n    if d == 45: \n        return 1\n    if d == 46: \n        return 1\n    if d == 47: \n        return 0\n    if d == 48: \n        return 1\n    if d == 49: \n        return 1\n    if d == 50: \n        return 1\n    if d == 51: \n        return 0\n    if d == 52: \n        return 1\n    if d == 53: \n        return 0\n    if d == 54: \n        return 1\n    if d == 55: \n        return 1\n    if d == 56: \n        return 0\n    if d == 57: \n        return 1\n    if d == 58: \n        return 0\n    if d == 59: \n        return 1\n    if d == 60: \n        return 0\n    if d == 61: \n        return 0\n    if d == 62: \n        return 0\n    if d == 63: \n        return 1\n    if d == 64: \n        return 1\n    if d == 65: \n        return 1\n    if d == 66: \n        return 1\n    if d == 67: \n        return 1\n    if d == 68: \n        return 1\n    if d == 69: \n        return 1\n    if d == 70: \n        return 1\n    if d == 71: \n        return 1\n    if d == 72: \n        return 1\n    if d == 73: \n        return 0\n    if d == 74: \n        return 1\n    if d == 75: \n        return 1\n    if d == 76: \n        return 1\n    if d == 77: \n        return 0\n    if d == 78: \n        return 1\n    if d == 79: \n        return 1\n    if d == 80: \n        return 1\n    if d == 81: \n        return 0\n    if d == 82: \n        return 1\n    if d == 83: \n        return 1\n    if d == 84: \n        return 1\n    if d == 85: \n        return 0\n    if d == 86: \n        return 1\n    if d == 87: \n        return 1\n    if d == 88: \n        return 1\n    if d == 89: \n        return 1\n    if d == 90: \n        return 1\n    if d == 91: \n        return 0\n    if d == 92: \n        return 0\n    if d == 93: \n        return 1\n    if d == 94: \n        return 0\n    if d == 95: \n        return 1\n    if d == 96: \n        return 1\n    if d == 97: \n        return 1\n    if d == 98: \n        return 1\n    if d == 99: \n        return 0\n    if d == 100: \n        return 1\n    if d == 101: \n        return 1\n    if d == 102: \n        return 0\n    if d == 103: \n        return 1\n    if d == 104: \n        return 1\n    if d == 105: \n        return 0\n    if d == 106: \n        return 1\n    if d == 107: \n        return 1\n    if d == 108: \n        return 1\n    if d == 109: \n        return 1\n    if d == 110: \n        return 1\n    if d == 111: \n        return 0\n    if d == 112: \n        return 1\n    if d == 113: \n        return 1\n    if d == 114: \n        return 0\n    if d == 115: \n        return 1\n    if d == 116: \n        return 1\n    if d == 117: \n        return 1\n    if d == 118: \n        return 1\n    if d == 119: \n        return 0\n    if d == 120: \n        return 1\n    if d == 121: \n        return 0\n    if d == 122: \n        return 1\n    if d == 123: \n        return 1\n    if d == 124: \n        return 1\n    if d == 125: \n        return 0\n    if d == 126: \n        return 1\n    if d == 127: \n        return 0\n    if d == 128: \n        return 1\n    if d == 129: \n        return 1\n    if d == 130: \n        return 0\n    if d == 131: \n        return 1\n    if d == 132: \n        return 1\n    if d == 133: \n        return 1\n    if d == 134: \n        return 1\n    if d == 135: \n        return 0\n    if d == 136: \n        return 0\n    if d == 137: \n        return 1\n    if d == 138: \n        return 1\n    if d == 139: \n        return 0\n    if d == 140: \n        return 1\n    if d == 141: \n        return 1\n    if d == 142: \n        return 0\n    if d == 143: \n        return 0\n    if d == 144: \n        return 0\n    if d == 145: \n        return 0\n    if d == 146: \n        return 1\n    if d == 147: \n        return 1\n    if d == 148: \n        return 1\n    if d == 149: \n        return 1\n    if d == 150: \n        return 1\n    if d == 151: \n        return 1\n    if d == 152: \n        return 0\n    if d == 153: \n        return 1\n    if d == 154: \n        return 1\n    if d == 155: \n        return 1\n    if d == 156: \n        return 0\n    if d == 157: \n        return 1\n    if d == 158: \n        return 0\n    if d == 159: \n        return 0\n    if d == 160: \n        return 1\n    if d == 161: \n        return 1\n    if d == 162: \n        return 1\n    if d == 163: \n        return 1\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return min(steps-2, (d-1)%(steps+2)//2)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    i=0\n    j=0\n    k=0\n    while(i<len(nums1)):\n        if(j<len(nums2) and nums1[i]==nums2[j]):\n            k=k+1\n        else:\n            j=j+1\n        i=i+1\n    return k\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)<len(nums2):\n        nums1,nums2 = nums2,nums1\n    d=0\n    for i in range(len(nums1)):\n        d=d+nums1[i]*nums2[i]\n    return d\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    count = 0\n    # iterating through both lists\n    for item in nums1:\n        # if items of nums1 are equal\n        if item in nums2:\n            # incrementing count\n            count += 1\n    # return the count if there are numbers in nums2\n    return count\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Your code here\n    # First, we'll make a copy of nums1\n    nums_1 = list(nums1)\n    # Now, we'll make a copy of nums2\n    nums_2 = list(nums2)\n    # Now, we'll make a copy of the values of nums_1\n    # And we'll make a copy of the values of nums_2\n    # These copies will later be needed for the function\n    i = 0\n    j = 0\n    # Let's make a copy of the nums_1, and nums_2\n    nums1_copy = []\n    nums2_copy = []\n    # Let's make a copy of the values of nums_1\n    while i < len(nums1):\n        nums1_copy.append(nums1[i])\n        i = i + 1\n    # Let's make a copy of the values of nums_2\n    while j < len(nums2):\n        nums2_copy.append(nums2[j])\n        j = j + 1\n    # Now we'll use a for loop to divide the list of numbers in two and print the result\n    for i in range(len(nums1_copy)):\n        for j in range(len(nums2_copy)):\n            if nums_1[i] == nums2_copy[j]:\n                nums1_copy[i] = nums_1[i]\n    # Let's now print the result\n    print(nums1_copy)\n    return nums1_copy\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if nums1[0]!= nums2[0]:\n        return nums1,nums2\n    elif nums1[0] == nums2[0]:\n        return nums1,nums2\n    elif nums1[0]!= nums2[0]:\n        return nums2,nums1\n    \n    # if both the nums are same\n    elif nums1[0] == nums2[0]:\n        return nums1,nums2\n    # if all the elements are same and no change\n    else:\n        return nums2,nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)>len(nums2):\n        maxnum=nums2[len(nums2)-1]\n    else:\n        maxnum=nums1[len(nums1)-1]\n    for i in range(len(nums1)-1):\n        if nums1[i]==maxnum:\n            nums1[i]*=2\n        else:\n            break\n    for j in range(len(nums2)-1):\n        if nums2[j]==maxnum:\n            nums2[j]*=2\n        else:\n            break\n    return nums1,nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in nums1:\n        if i in nums2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    num_list = []\n    for i in range(len(nums1)):\n        sum = 0\n        for j in range(len(nums2)):\n            sum += nums1[i] * nums2[j]\n        num_list.append(sum)\n    return num_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)==0 or len(nums2)==0:\n        return (None,None)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    tokens = test_str.split()\n    result = ''\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('(', '').replace(')', '').replace(' ', '').replace(',', '').replace('.', '')\n    test_str = test_str.replace(':', '').replace('(', '').replace(')', '').replace('(', '').replace(' ', '').replace('.', '')\n    test_str = test_str.replace('s', '').replace('m', '').replace('s', '').replace('x', '').replace('p', '')\n    if test_str[0] =='s':\n        test_str = test_str[1:]\n    else:\n        test_str = test_str[1:]\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            test_str = test_str[:i] + test_str[i + 1:]\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    new_list = []\n    for i in test_str:\n        if i.isdigit():\n            new_str += i\n            new_list.append(i)\n        else:\n            new_list.append(i)\n    new_str = new_str + \"\".join(new_list)\n    print(new_str)\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    output = []\n    for i in test_str:\n        if i.isdigit():\n            output.append(i)\n        else:\n            output.append(i.lower())\n    return ''.join(output)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split()\n    test_str = list(test_str)\n    for i in range(len(test_str)):\n        test_str[i] = str(test_str[i])\n    return ''.join(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # If the string is empty, then return the empty string\n    if test_str == '':\n        return ''\n    # If the string is not empty, return the empty string\n    elif test_str!= '':\n        return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str_list = list(test_str)\n    for i in range(len(test_str_list)):\n        test_str_list[i] = int(test_str_list[i])\n    return test_str_list\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # define variables\n    count = 0\n    # define string\n    new_string = ''\n    # loop through string\n    for char in test_str:\n        # if char is '0'\n        if char == '0':\n            # increment count\n            count += 1\n            # add char to new string\n            new_string += str(count)\n            # increment count\n            count = 0\n        # if char is '1'\n        elif char == '1':\n            # increment count\n            count += 1\n            # add char to new string\n            new_string += str(count)\n            # increment count\n            count = 0\n        # if char is '2'\n        elif char == '2':\n            # increment count\n            count += 1\n            # add char to new string\n            new_string += str(count)\n            # increment count\n            count = 0\n        # if char is '3'\n        elif char == '3':\n            # increment count\n            count += 1\n            # add char to new string\n            new_string += str(count)\n            # increment count\n            count = 0\n        # if char is '4'\n        elif char == '4':\n            # increment count\n            count += 1\n            # add char to new string\n            new_string += str(count)\n            # increment count\n            count = 0\n        # if char is '5'\n        elif char == '5':\n            # increment count\n            count += 1\n            # add char to new string\n            new_string += str(count)\n            # increment count\n            count = 0\n        # if char is '6'\n        elif char == '6':\n            # increment count\n            count += 1\n            # add char to new string\n            new_string += str(count)\n            # increment count\n            count = 0\n        # if char is '7'\n        elif char == '7':\n            # increment count\n            count += 1\n            # add char to new string\n            new_string += str(count)\n            # increment count\n            count = 0\n        # if char is '8'\n        elif char == '8':\n            # increment count\n            count += 1\n            # add char to new string\n            new_string += str(count)\n            # increment count\n            count = 0\n        # if char is '9'\n        elif char == '9':\n            # increment count\n            count += 1\n            # add char to new string\n            new_string += str(count)\n            # increment count\n            count = 0\n        # if char is '0'\n        elif char == '0':\n            # increment count\n            count += 1\n            # add char to new string\n            new_string += str(count)\n            # increment count\n            count = 0\n    # return string\n    return new_string\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str=='':\n        test_str='0'\n    elif type(test_str)!=str:\n        return 'Error. String must be a string'\n    elif test_str.isdigit():\n        test_str=test_str[1:]\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = list(test_str)\n    end_num = []\n    for x in num_list:\n        if x.isnumeric():\n            end_num.append(x)\n    num_list.extend(end_num)\n    return \"\".join(num_list)"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = 0\n    curr_size = 1\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if a[i] % a[j] == 0 and s < curr_size:\n                curr_size = s + 1\n        if s >= curr_size:\n            s = curr_size\n            curr_size = 1\n    return s\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # define the definition of the subset\n    subset = set()\n    for i in range(len(a)):\n        if i == 0:\n            subset.add(a[i])\n        else:\n            subset.add(a[i] + subset[i-1])\n            # if i == 2 or i == 1:\n            #     subset.add(a[i])\n            # elif i == len(a)-1:\n            #     subset.add(a[i])\n    # return a[-1]\n    return max(subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if a == []:\n        return 0\n    \n    for i in range(1, len(a) + 1):\n        j = len(a) - i\n        if j == i:\n            continue\n        \n        if i % j == 0:\n            return j\n    \n    return 0\n    \nprint(largest_subset([4, 3, 2, 7, 1]))\nprint(largest_subset([6, 6, 1, 2, 2, 2, 3, 3, 3, 3, 2, 2, 1, 1, 5, 5])"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n=len(a)\n    \n    dp=[[False for i in range(n+1)] for j in range(n+1)]\n    dp[1][1]=True\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not any(a):\n        return 0\n    if len(a) == 1:\n        return 1\n    for i in range(len(a)-1):\n        if a[i] % a[i+1]!= 0:\n            return largest_subset(a[i:])\n    return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def find_smallest_subset(a):\n        '''\n        find the smallest subset of a given list of numbers\n        '''\n        for i in range(len(a)):\n            subset_of_a = []\n            for j in range(i, len(a)):\n                if a[j] % a[i] == 0:\n                    subset_of_a.append(a[j])\n            if len(subset_of_a) == len(a):\n                return a[i], a[i], a[i]\n        return None\n    \n    def test(s):\n        '''\n        Test if the given list has a pair with i elements that divides the given list\n        '''\n        for i in s:\n            if s[i] % i!= 0:\n                return False\n        return True\n    \n    def test_2(s):\n        '''\n        Test if the given list has a pair with i elements that divide every element\n        '''\n        subset_of_a = []\n        for i in range(len(s)):\n            for j in range(i + 1, len(s)):\n                if s[i] % s[j] == 0:\n                    subset_of_a.append(s[i])\n        if len(subset_of_a) == len(s):\n            return True\n        return False\n        \n    if len(a) == 1:\n        return a\n    \n    if not test(a):\n        return None\n    \n    subsets = []\n    # find the smallest subset of each of the given numbers\n    i, j, smallest_number = find_smallest_subset(a)\n    while i!= j:\n        for k in range(i, j):\n            subsets.append(a[i] + a[j])\n            i, j = j, k\n        i, j = j, i\n        if test_2(subsets):\n            break\n        subsets.pop()\n    \n    if len(subsets) == 0:\n        return None\n    return subsets\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    for i in range(n):\n        for j in range(i,n):\n            if (a[i] % a[j] == 0):\n                return (a[i],a[j])\n    return False\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    max_subset = []\n    res = 1\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if all(a[k] % a[j] == 0 for k in range(0,n)):\n                res = max(res,len(max_subset) + j)\n    return res\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    num_list = []\n    d = {}\n    for i in a:\n        num_list.append(i)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return None\n    mid = len(arr1) // 2\n    if n > len(arr2):\n        mid = n // 2\n    else:\n        mid = n\n    if n == mid:\n        return arr1[mid]\n    if n == mid + 1:\n        return arr2[mid]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr1[0]\n    else:\n        mid = n//2\n        if arr1[mid] < arr2[mid]:\n            return get_median(arr1, arr2, mid)\n        else:\n            return get_median(arr1, arr2, n-mid)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Code here\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    if (n < 2):\n        return arr1[n]\n    else:\n        mid = n // 2\n        # Finding the median of left half\n        l = arr1[:mid]\n        # Finding the median of right half\n        r = arr1[mid:]\n        # Finding the median of left half\n        l.sort()\n        # Finding the median of right half\n        r.sort()\n        if (len(l) > len(r)):\n            return get_median(l, r, mid)\n        else:\n            return get_median(l, r, len(l))\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    #sorted_array = sorted(arr1)\n    #sorted_array = sorted(arr2)\n    sorted_array = sorted(arr1 + arr2)\n    if len(sorted_array)%2 == 1:\n        return sorted_array[(len(sorted_array)-1)/2]\n    else:\n        return (sorted_array[len(sorted_array)/2] + sorted_array[len(sorted_array)/2-1])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1_length = len(arr1)\n    arr2_length = len(arr2)\n    if arr1_length < arr2_length:\n        return get_median(arr1, arr2, n)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(n):\n        if arr1[i] <= arr2[i]:\n            l1.append(arr1[i])\n        else:\n            l2.append(arr2[i])\n    l1.sort()\n    l2.sort()\n    if len(l1) % 2 == 0:\n        median_l1 = (l1[int(len(l1)/2)-1] + l1[int(len(l1)/2)])/2\n    else:\n        median_l1 = l1[int(len(l1)/2)]\n    if len(l2) % 2 == 0:\n        median_l2 = (l2[int(len(l2)/2)-1] + l2[int(len(l2)/2)])/2\n    else:\n        median_l2 = l2[int(len(l2)/2)]\n    return (median_l1 + median_l2) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (n==1):\n        return arr1[0]\n    elif (n==2):\n        return arr2[n//2]\n    else:\n        x = arr1[0]\n        y = arr2[n//2]\n        if (arr1[n//2]>y):\n            x = arr2[n//2]\n            arr1[n//2], arr2[n//2] = arr1[n//2], arr2[n//2]\n            x2 = arr1[0]\n            y2 = arr1[n//2]\n        else:\n            x2 = arr1[n//2]\n            arr1[n//2], arr1[0] = arr1[0], arr1[n//2]\n            x2 = arr2[n//2]\n            arr2[n//2], arr2[0] = arr2[0], arr2[n//2]\n            y2 = arr2[0]\n        if (x<y):\n            if (x2<y2):\n                return get_median(arr1, arr2, n//2)\n            else:\n                return get_median(arr1, arr2, (n//2)+1)\n        else:\n            if (x2<y2):\n                return get_median(arr1, arr2, (n//2)+1)\n            else:\n                return get_median(arr1, arr2, n//2)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[(n - 1)//2] + arr2[(n - 1)//2]) / 2\n    else:\n        return (arr1[n//2] + arr2[n//2]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # iterate from 0 to length - 1\n    # if length = 1 then return it\n    # if len == 2 then return the average of the two elements\n    # if len == 3 then return the average of the two elements\n    # if len > 3 then sort both lists and find the median\n    # return the median\n    # i.e, median of the first list\n    # if length = 1 then return first list\n    # if len == 2 then return first and second lists\n    # if len > 2 then return first and second lists and sort them\n    # return median\n    # i.e, median of the first list and second list\n    # if length = 2 then return first and second lists\n    # if len > 2 then return first and second lists and sort them\n    # return median\n    # i.e, median of the first list and second list\n    # if length > 2 then return first and second lists and sort them\n    # return median\n    # i.e, median of the first list and second list\n    # if length > 2 then return first and second lists\n    # if len > 2 then return first and second lists and sort them\n    # return median\n    # i.e, median of the first list and second list\n    # if length > 2 then return first and second lists and sort them\n    # return median\n    if len(arr1) > len(arr2):\n        return get_median(arr1, arr2, len(arr1))\n    else:\n        return get_median(arr2, arr1, len(arr2))\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    mid = n//2\n    if n % 2 == 0:\n        return (arr1[mid] + arr2[mid])/2\n    else:\n        return (arr1[mid] + arr2[mid])/2\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==0:\n        return []\n    return [n*i for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def num_power(x):\n        # get the power of each number\n        return (x**n)\n    result = [num_power(x) for x in nums]\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert 0 <= n <= len(nums)\n    return [pow(num,n) for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums = list(map(lambda x: x**n, nums))\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = [1]\n    for i in range(len(nums)):\n        power.append(power[i]*nums[i])\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    # Your code here\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    for i in range(n):\n        power *= nums[i]\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 1:\n        return nums\n    return [n * nth_nums(nums[1:],n) for n in range(1,len(nums)+1)]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    arr = []\n    for num in nums:\n        arr.append(num**n)\n    return arr\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    num_pow = 1\n    for i in range(len(nums)):\n        num_pow = num_pow * nums[i]\n    return num_pow\n"
    }
]