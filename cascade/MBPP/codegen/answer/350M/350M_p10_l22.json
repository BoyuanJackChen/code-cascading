[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [el for el in test_tup1 if el in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #Remove duplicates from list and return all duplicate elements\n    output = list(set(test_tup1+test_tup2))\n    output.sort()\n    return output\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Get a reference to the first tuple, list and tuple\n    first_tup = test_tup1\n    first_list = test_tup1[0]\n    first_tup = first_list\n    # Get a reference to the second tuple, list and tuple\n    second_tup = test_tup2\n    second_list = test_tup2[0]\n    # Concatenate the two lists\n    shared_elements = []\n    shared_elements.extend(first_tup)\n    shared_elements.extend(second_tup)\n    # Iterate through the two lists and append the shared elements to the shared_elements list\n    for el in shared_elements:\n        shared_elements.append(el)\n    # Return the shared elements\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # YOUR CODE HERE\n    l1 = test_tup1\n    l2 = test_tup2\n    sh1 = set(l1)\n    sh2 = set(l2)\n    sh1 = list(sh1)\n    sh2 = list(sh2)\n    return list(set(sh1).intersection(sh2))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # start = time.time()\n    # print(f\"{test_tup1} - {test_tup2}\")\n    # print(f\"{type(test_tup1)} | {type(test_tup2)}\")\n    # print(f\"{test_tup1} | {test_tup2}\")\n    if len(test_tup1)!= len(test_tup2):\n        return None\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    dict1 = {}\n    dict2 = {}\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    #Create a list that will hold all the items of both lists\n    all_items = []\n    \n    #Create a list that will hold the items that are in the second list\n    second_list = []\n    \n    #Loop through each item in the given list\n    for item in test_tup1:\n        \n        #If the item is in the second list\n        if item in test_tup2:\n            \n            #Add the item to the list of items in the second list\n            second_list.append(item)\n            \n    #If the items in the second list are in the first list,\n    #the list will contain only those items\n    if second_list:\n        \n        #Return all the items in the first list, and the list of items\n        #that are contained in the second list.\n        return all_items, second_list\n    \n    #If the items in the second list are not in the first list,\n    #the list will contain all items\n    else:\n        \n        #Return all the items in the first list, and the list of items\n        #that are contained in the second list.\n        return all_items, test_tup1\n    \n    \n    \n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        i = 5\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 6\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return False\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 4\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # my code\n    # output = []\n    # if n == 1:\n    #     return True\n    # for i in range(2, n):\n    #     if n % i == 0:\n    #         return False\n    #     return True\n    # else:\n    #     return False\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    #Check if the number is divisible by 3\n    if(n%3==0):\n        return False\n    #Check if the number is divisible by 5\n    if(n%5==0):\n        return False\n    #Check if the number is divisible by 7\n    if(n%7==0):\n        return False\n    #Check if the number is divisible by 10\n    if(n%10==0):\n        return False\n    #Check if the number is divisible by any other factors\n    for i in range(2,int(math.sqrt(n))+1):\n        if(n%i==0):\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n in range(2,int(math.sqrt(n)) + 1):\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n in range(2,int(math.sqrt(n)) + 1):\n        return True\n    else:\n        return False\ndef factorization(n):\n    '''\n    a function to factorize a number.\n    '''\n    l = []\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            l.append(i)\n    if len(l) > 0:\n        return l\n    else:\n        return None\ndef prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if is_prime(n):\n        return True\n    else:\n        return False\ndef is_square(n):\n    '''\n    Write a python function to check if a number is square or not.\n    '''\n    if n > 0:\n        return True\n    else:\n        return False\ndef is_prime_square(n):\n    '''\n    Write a python function to check if a number is square or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        elif n == 6 or n == 7:\n            return True\n        elif n == 8 or n == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_inverse_prime(n):\n    '''\n    Write a python function to check if a number is inverse or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        elif n == 6 or n == 7:\n            return True\n        elif n == 8 or n == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_prime_inverse_prime(n):\n    '''\n    Write a python function to check if a number is inverse or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        elif n == 6 or n == 7:\n            return True\n        elif n == 8 or n == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_primes(n):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        elif n == 6 or n == 7:\n            return True\n        elif n == 8 or n == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_prime_primes(n):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        elif n == 6 or n == 7:\n            return True\n        elif n == 8 or n == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_prime_inverse_primes(n):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        elif n == 6 or n == 7:\n            return True\n        elif n == 8 or n == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_primes_inverse_primes(n):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        elif n == 6 or n == 7:\n            return True\n        elif n == 8 or n == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_prime_inverse_primes_inverse(n):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        elif n == 6 or n == 7:\n            return True\n        elif n == 8 or n == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_primes_inverse_primes_inverse_inverse(n):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        elif n == 6 or n == 7:\n            return True\n        elif n == 8 or n == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_prime_inverse_primes_inverse_inverse_inverse(n):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        elif n == 6 or n == 7:\n            return True\n        elif n == 8 or n == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_prime_inverse_primes_inverse_inverse_inverse_inverse(n):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        elif n == 6 or n == 7:\n            return True\n        elif n == 8 or n == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_prime_inverse_primes_inverse_inverse_inverse_inverse_inverse(n):\n    '''\n    Write a python function to check if a number is a prime or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        elif n == 6 or n == 7:\n            return True\n        elif n == 8 or n == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_inverse_primes(n):\n    '''\n    Write a python function to check if a number is inverse or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        elif n == 6 or n == 7:\n            return True\n        elif n == 8 or n == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_inverse_primes_inverse(n):\n    '''\n    Write a python function to check if a number is inverse or not.\n    '''\n    if n > 1:\n        if n == 2 or n == 3:\n            return True\n        elif n == 4 or n == 5:\n            return True\n        e"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    if (n <= 1):\n        return False\n    \n    elif n == 2:\n        return True\n    \n    elif n == 3:\n        return False\n    \n    elif n % 2 == 0:\n        return False\n    \n    elif n % 3 == 0:\n        return False\n    \n    else:\n        return True\n        \ndef fibonacci_sum_of_two(n):\n    '''\n    Return the sum of two Fibonacci numbers (1, 1+1) and (1, 1+2).\n    '''\n    \n    if n == 0 or n == 1:\n        return 1\n    \n    else:\n        return fibonacci_sum_of_two(n-1) + fibonacci_sum_of_two(n-2)\n    \ndef fibonacci_sum_of_three(n):\n    '''\n    Return the sum of three Fibonacci numbers (1, 2, 1) and (2, 1, 2).\n    '''\n    \n    if n == 0 or n == 1:\n        return 1\n    \n    elif n == 2:\n        return 2\n    \n    elif n == 3:\n        return 1\n    \n    else:\n        return fibonacci_sum_of_three(n-1) + fibonacci_sum_of_three(n-2) + fibonacci_sum_of_three(n-3)\n    \ndef fibonacci_sum_of_four(n):\n    '''\n    Return the sum of four Fibonacci numbers (1, 2, 3, 1) and (2, 3, 1, 2).\n    '''\n    \n    if n == 0 or n == 1:\n        return 1\n    \n    elif n == 2:\n        return 2\n    \n    elif n == 3:\n        return 3\n    \n    elif n == 4:\n        return 1\n    \n    else:\n        return fibonacci_sum_of_four(n-1) + fibonacci_sum_of_four(n-2) + fibonacci_sum_of_four(n-3) + fibonacci_sum_of_four(n-4)\n    \ndef fibonacci_sum_of_five(n):\n    '''\n    Return the sum of five Fibonacci numbers (1, 2, 3, 4, 1) and (2, 3, 4, 1, 2).\n    '''\n    \n    if n == 0 or n == 1:\n        return 1\n    \n    elif n == 2:\n        return 2\n    \n    elif n == 3:\n        return 3\n    \n    elif n == 4:\n        return 4\n    \n    elif n == 5:\n        return 1\n    \n    else:\n        return fibonacci_sum_of_five(n-1) + fibonacci_sum_of_five(n-2) + fibonacci_sum_of_five(n-3) + fibonacci_sum_of_five(n-4) + fibonacci_sum_of_five(n-5)\n    \ndef fibonacci_sum_of_six(n):\n    '''\n    Return the sum of six Fibonacci numbers (1, 2, 3, 4, 5, 1) and (2, 3, 4, 5, 1, 2).\n    '''\n    \n    if n == 0 or n == 1:\n        return 1\n    \n    elif n == 2:\n        return 2\n    \n    elif n == 3:\n        return 3\n    \n    elif n == 4:\n        return 4\n    \n    elif n == 5:\n        return 5\n    \n    elif n == 6:\n        return 1\n    \n    else:\n        return fibonacci_sum_of_six(n-1) + fibonacci_sum_of_six(n-2) + fibonacci_sum_of_six(n-3) + fibonacci_sum_of_six(n-4) + fibonacci_sum_of_six(n-5) + fibonacci_sum_of_six(n-6)\n        \ndef sum_of_digits(n):\n    '''\n    Return the sum of the digits of n.\n    '''\n    \n    digits = []\n    for i in range(1, n+1):\n        digits.append(i)\n        \n    sum = 0\n    \n    for i in range(0, len(digits)):\n        sum += digits[i]\n        \n    return sum\n    \ndef count_words(file):\n    '''\n    Read the text file and count the number of words.\n    '''\n    \n    wordcount = 0\n    for line in file:\n        line = line.rstrip()\n        wordcount += len(line)\n    \n    return wordcount\n    \ndef get_frequency_distribution(file):\n    '''\n    Read the text file and count the number of words.\n    '''\n    \n    wordcount = count_words(file)\n    \n    return wordcount\n    \ndef sentence_frequency(wordcount, n):\n    '''\n    Return the number of times a word occurs in n sentences.\n    '''\n    \n    sentences = []\n    \n    for i in range(1, n+1):\n        sentences.append(i)\n    \n    wordfreq = dict()\n    \n    for word in wordcount:\n        wordfreq[word] = wordcount[word] / n\n    \n    return wordfreq\n    \ndef sentence_frequency_with_counts(wordcount, sentence):\n    '''\n    Return the number of times a word occurs in n sentences.\n    '''\n    \n    sentencefreq = dict()\n    \n    for word in wordcount:\n        sentencefreq[word] = wordcount[word] / sentence\n    \n    return sentencefreq\n    \ndef frequency_sequence(wordfreq, sentencefreq):\n    '''\n    Return the frequency sequence.\n    '''\n    \n    sentencefreq = list(sentencefreq.items())\n    \n    frequency = []\n    \n    for i in range(len(sentencefreq)):\n        frequency.append(sentencefreq[i][1])\n    \n    return frequency\n    \ndef number_of_prime_factors(n):\n    '''\n    Return the number of prime factors for a number.\n    '''\n    \n    return math.ceil(math.sqrt(n))\n    \ndef product(x, y):\n    '''\n    Return the product of x and y.\n    '''\n    \n    return x * y\n    \ndef factorial(n):\n    '''\n    Return the factorial of a number.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    elif n == 1:\n        return 1\n    \n    else:\n        return n * factorial(n-1)\n    \ndef factorial_sequence(n):\n    '''\n    Return the factorial sequence.\n    '''\n    \n    factorial_sequence = []\n    \n    for i in range(1, n+1):\n        factorial_sequence.append(math.factorial(i))\n    \n    return factorial_sequence\n    \ndef is_prime(n):\n    '''\n    Return whether a number is prime.\n    '''\n    \n    if n == 2:\n        return True\n    \n    if n < 2:\n        return False\n    \n    if n == 2:\n        return True\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    \n    return True\n    \ndef main():\n    '''\n    Main program.\n    '''\n    \n    n = int(input('Number of words: '))\n    \n    print(f'Frequency of words: {get_frequency_distribution(open(\"words.txt\", \"r\").readlines())}\\n')\n    \n    print(f'Sentence frequency: {sentence_frequency(get_frequency_distribution(open(\"words.txt\", \"r\").readlines()), n)}\\n')\n    \n    print(f'Sentence frequency with counts: {sentence_frequency_with_counts(get_frequency_distribution(open(\"words.txt\", \"r\").readlines()), n)}\\n')\n    \n    print(f'Frequency sequence: {frequency_sequence(get_frequency"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, math.floor(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    #we need to pass the smallest element as the last element of the list\n    for num in nums:\n        heapq.heappush(heap,num)\n        if len(heap)>=n:\n            val = hq.heappop(heap)\n            if val<num:\n                heapq.heappush(heap,-val)\n    return -heapq.heappop(heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Fill this in.\n    hq = []\n    for i in nums:\n        if len(hq) < n:\n            hq.append(i)\n        else:\n            heapq.heappush(hq,(-hq[0],i))\n            heapq.heappop(hq)\n    return [i[1] for i in hq]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    l = []\n    for i in range(n):\n        l.append(nums[i])\n    heapq.heapify(l)\n    for i in range(n-1):\n        l[i+1] = l[i]\n    l[-1] = -1*l[-1]\n    return l\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    #create empty list\n    for i in range(n):\n        heapq.heappush(hq,-(i+1))\n    #iterate over the list and compare the value with the number\n    for i in range(n):\n        if nums[i]<-1*(hq[0]):\n            heapq.heappop(hq)\n            heapq.heappush(hq,-(i+1))\n    return -1*(hq)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,-num)\n    for i in range(n):\n        heapq.heappush(heap,-heapq.heappop(heap))\n    return [x for x in heap]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq = []\n    for i in range(n):\n        hq.append((-nums[i],i))\n    hq.sort()\n    for i in range(n-1,-1,-1):\n        if (hq[i][1]!= -n):\n            hq[i][1] = n\n            nums[hq[i][1]] = -nums[hq[i][1]]\n            nums[hq[i][0]] = nums[hq[i][0]] - nums[hq[i][1]]\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)==0:\n        return None\n    if len(nums)==1:\n        return nums[0]\n    else:\n        heap_queue(nums,0,n)\n        return nums[0]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort(reverse=True)\n    heap = [nums[0]]\n    for i in range(1,n):\n        heapq.heappush(heap,nums[i])\n        heapq.heappush(heap,heapq.heappop(heap) + nums[i])\n    heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    small = []\n    i = 0\n    while i < n:\n        heapq.heappush(small,(-nums[i],nums[i]))\n        i += 1\n    for j in range(i,n):\n        heapq.heappush(small,(-nums[j],nums[j]))\n    for k in range(n-1):\n        heapq.heappush(small,(-small[0][1],small[0][0]))\n    small = sorted(small,key=lambda x:x[1])\n    small_nums = []\n    for i in range(n):\n        if small[i][1]!= -1:\n            small_nums.append(small[i][0])\n    return small_nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums_heap = []\n    largest_count = 0\n    for num in nums:\n        heapq.heappush(nums_heap,num)\n        if len(nums_heap) > largest_count:\n            largest_count = len(nums_heap)\n    return largest_count\n    \n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x % 2 == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & 1) == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0: \n        return True\n    if x==1: \n        return False\n    if x==2:\n        return True\n    else:\n        x=int(x)\n        if x in [2,4,8,16,32,64,128]:\n            if x!=2:\n                return True\n            else:\n                return False\n        else:\n            return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #\"bitwise and\"\n    if (x & 1)!= 0: \n        return False\n    else: \n        return True\n    # \"bitwise or\"\n    #return not (x & 1) \n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 2**31-1 or x < -2**31:\n        return False\n    elif x == 2**31-1:\n        return True\n    else:\n        if x % 2 == 0:\n            return is_Power_Of_Two(x//2)\n        else:\n            return is_Power_Of_Two(x//2*2)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2:\n        return True\n    else:\n        return False\ndef is_Power_Of_Three (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 3:\n        return True\n    else:\n        return False\ndef is_Power_Of_Four (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 4:\n        return True\n    else:\n        return False\ndef is_Power_Of_Five (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 5:\n        return True\n    else:\n        return False\ndef is_Power_Of_Six (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 6:\n        return True\n    else:\n        return False\ndef is_Power_Of_Seven (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 7:\n        return True\n    else:\n        return False\ndef is_Power_Of_Eight (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 8:\n        return True\n    else:\n        return False\ndef is_Power_Of_Nine (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 9:\n        return True\n    else:\n        return False\ndef is_Power_Of_Ten (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 10:\n        return True\n    else:\n        return False\ndef is_Power_Of_Eleven (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 11:\n        return True\n    else:\n        return False\ndef is_Power_Of_Twelve (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 12:\n        return True\n    else:\n        return False\ndef is_Power_Of_Thirteen (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 13:\n        return True\n    else:\n        return False\ndef is_Power_Of_Fourteen (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 14:\n        return True\n    else:\n        return False\ndef is_Power_Of_Fifteen (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 15:\n        return True\n    else:\n        return False\ndef is_Power_Of_Sixteen (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 16:\n        return True\n    else:\n        return False\ndef is_Power_Of_Seventeen (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 17:\n        return True\n    else:\n        return False\ndef is_Power_Of_Eighteen (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 18:\n        return True\n    else:\n        return False\ndef is_Power_Of_Nineteen (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 19:\n        return True\n    else:\n        return False\ndef is_Power_Of_Twenty (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 20:\n        return True\n    else:\n        return False\ndef is_Power_Of_Thirty (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 30:\n        return True\n    else:\n        return False\ndef is_Power_Of_Forty (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 40:\n        return True\n    else:\n        return False\ndef is_Power_Of_Sixty (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 60:\n        return True\n    else:\n        return False\ndef is_Power_Of_Seventy (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 70:\n        return True\n    else:\n        return False\ndef is_Power_Of_Eighty (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 80:\n        return True\n    else:\n        return False\ndef is_Power_Of_Ninety (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 90:\n        return True\n    else:\n        return False\ndef is_Power_Of_One_Zero (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_One_One (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        return False\ndef is_Power_Of_One_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2:\n        return True\n    else:\n        return False\ndef is_Power_Of_One_Three (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 3:\n        return True\n    else:\n        return False\ndef is_Power_Of_One_Four (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 4:\n        return True\n    else:\n        return False\ndef is_Power_Of_One_Five (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 5:\n        return True\n    else:\n        return False\ndef is_Power_Of_One_Six (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 6:\n        return True\n    else:\n        return False\ndef is_Power_Of_One_Seven (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 7:\n        return True\n    else:\n        return False\ndef is_Power_Of_One_Eight (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position onl"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n = x\n    p = 0\n    while n >= 1: \n        p = p * 10 + n % 10\n        n = n // 10\n    if p == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    print('is_Power_Of_Two:')\n    if x%2 == 0:\n        print(x, 'is a power of 2')\n    else:\n        print(x, 'is not a power of 2')\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #raise NotImplementedError()\n    if x > 2:\n        return False\n    elif x < 2:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 2:\n        return False\n    while x:\n        if x%2!= 0:\n            return False\n        x//=2\n    return True\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    #make string for searching\n    text = text.lower()\n    \n    #make a regex for finding numbers\n    num_regex = r\"\\b[+-]?(?:[0-9]{1,}[0-9]*\\b|\\b[+-]?\\d+[0-9]{1,}[0-9]*\\b|\\b\\d+[0-9]{1,}\\b)\"\n    \n    #find all words which match the regex and return them\n    return list(filter(lambda word: len(word)>4, re.findall(num_regex, text)))\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_pattern = r'(^|\\s)([^\\W\\d_]{4,})(\\W|$)'\n    return re.findall(long_pattern, text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    characters = 0\n    characters_list = []\n    for i in text:\n        if len(i) <= 4:\n            characters += 1\n            characters_list.append(i)\n    return (characters, characters_list)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = str(text)\n    reg = r'[^a-zA-Z0-9\\n\\.']\n    tokens = re.findall(reg, text)\n    long = \"\"\n    for token in tokens:\n        if len(token) >= 4:\n            long = long + token\n    return long\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # first, split text into words and print\n    words = text.split()\n    for word in words:\n        if len(word) >= 4:\n            print(word, end = '')\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = text.lower()\n    chars_long = []\n    for char in text:\n        if len(char) >= 4:\n            chars_long.append(char)\n    return chars_long\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [word for word in text if len(word) >= 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = []\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            char_long.append(text[i])\n    return char_long\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for char in text:\n        if char in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890_':\n            yield char\ndef get_longest_word(text):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    return sorted(find_char_long(text), key=len, reverse=True)[0]\ndef is_palindrome(text):\n    '''\n    Write a function that will check if a string is palindrome or not.\n    '''\n    return text == text[::-1]\ndef clean_string(text):\n    '''\n    Write a function that will remove all special characters from a string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]', '', text)\ndef is_numeric(text):\n    '''\n    Write a function that will check if a string contains any numeric characters or not.\n    '''\n    return any(map(str.isdigit, text))\ndef are_digits(text):\n    '''\n    Write a function that will check if a string contains any digits or not.\n    '''\n    return any(map(str.isdigit, text))\ndef is_word(text):\n    '''\n    Write a function that will check if a string contains any valid words or not.\n    '''\n    return any(map(is_palindrome, text.split(' ')))\ndef remove_special_characters(text):\n    '''\n    Write a function that will remove all special characters from a string.\n    '''\n    text = clean_string(text)\n    text = text.replace('\\n', '')\n    text = text.replace('.', '')\n    text = text.replace(',', '')\n    text = text.replace('!', '')\n    text = text.replace('?', '')\n    text = text.replace('\"', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace(':', '')\n    text = text.replace(';', '')\n    text = text.replace('<', '')\n    text = text.replace('=', '')\n    text = text.replace('>', '')\n    text = text.replace('?', '')\n    text = text.replace('@', '')\n    text = text.replace('|', '')\n    text = text.replace('_', '')\n    text = text.replace('+', '')\n    text = text.replace('*', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('^', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('*', '')\n    text = text.replace('.', '')\n    text = text.replace(',', '')\n    text = text.replace('!', '')\n    text = text.replace('?', '')\n    text = text.replace('\"', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace(':', '')\n    text = text.replace(';', '')\n    text = text.replace('<', '')\n    text = text.replace('=', '')\n    text = text.replace('>', '')\n    text = text.replace('?', '')\n    text = text.replace('@', '')\n    text = text.replace('|', '')\n    text = text.replace('_', '')\n    text = text.replace('+', '')\n    text = text.replace('*', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('^', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('*', '')\n    text = text.replace('.', '')\n    text = text.replace(',', '')\n    text = text.replace('!', '')\n    text = text.replace('?', '')\n    text = text.replace('\"', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace(':', '')\n    text = text.replace(';', '')\n    text = text.replace('<', '')\n    text = text.replace('=', '')\n    text = text.replace('>', '')\n    text = text.replace('?', '')\n    text = text.replace('@', '')\n    text = text.replace('|', '')\n    text = text.replace('_', '')\n    text = text.replace('+', '')\n    text = text.replace('*', '')\n    text = text.replace('.', '')\n    text = text.replace(',', '')\n    text = text.replace('!', '')\n    text = text.replace('?', '')\n    text = text.replace('\"', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace(':', '')\n    text = text.replace(';', '')\n    text = text.replace('<', '')\n    text = text.replace('=', '')\n    text = text.replace('>', '')\n    text = text.replace('?', '')\n    text = text.replace('@', '')\n    text = text.replace('|', '')\n    text = text.replace('_', '')\n    text = text.replace('+', '')\n    text = text.replace('*', '')\n    text = text.replace('.', '')\n    text = text.replace(',', '')\n    text = text.replace('!', '')\n    text = text.replace('?', '')\n    text = text.replace('\"', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace(':', '')\n    text = text.replace(';', '')\n    text = text.replace('<', '')\n    text = text.replace('=', '')\n    text = text.replace('>', '')\n    text = text.replace('?', '')\n    text = text.replace('@', '')\n    text = text.replace('|', '')\n    text = text.replace('_', '')\n    text = text.replace('+', '')\n    text = text.replace('*', '')\n    text = text.replace('.', '')\n    text = text.replace(',', '')\n    text = text.replace('!', '')\n    text = text.replace('?', '')\n    text = text.replace('\"', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace(':', '')\n    text = text.replace(';', '')\n    text = text.replace('<', '')\n    text = text.replace('=', '')\n    text = text.replace('>', '')\n    text = text.replace('?', '')\n    text = text.replace('@', '')\n    text = text.replace('|', '')\n    text = text.replace('_', '')\n    text = text.replace('+', '')\n    text = text.replace('*', '')\n    text = text.replace('.', '')\n    text = text.replace(',', '')\n    text = text.replace('!', '')\n    text = text.replace('?', '')\n    text = text.replace('\"', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace(':', '')\n    text = text.replace(';', '')\n    text = text.replace('<', '')\n    text = text.replace('=', '')\n    text = text.replace('>', '')\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r\"(?<= )\\w+\"\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for num in nums:\n        square_list.append(num**2)\n    return square_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n    for num in nums:\n        squared_list.append(num**2)\n    return squared_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    # square_nums = []\n    # for num in nums:\n    #     square_nums.append(num ** 2)\n    \n    square_nums = [num ** 2 for num in nums]\n    \n    # return square_nums\n    return square_nums\n    \n    \n    \n    \ndef main():\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    # squares = square_nums(nums)\n    # print(squares)\n    \n    # sq_nums = square_nums(nums)\n    # print(sq_nums)\n    \n    # print(nums)\n    print(squares(nums))\n    print(squares(nums, True))\n    print(squares(nums, False))\n    \n    print('-'*35)\n    \n    print(list(map(lambda x: x ** 2, nums)))\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num*num)\n    return res\n    "
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    n = len(nums)\n    squares = []\n    for i in range(0,n):\n        squares.append(nums[i]*nums[i])\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)):\n        char = str[i]\n        if char == char.swapcase():\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations=0\n    max_length=0\n    patterns = []\n    patterns = pattern.split()\n    for i in range(len(patterns)):\n        if patterns[i]=='0':\n            patterns[i]='1'\n    for i in range(len(patterns)):\n        for j in range(i+1,len(patterns)):\n            if patterns[j]!=patterns[i] and int(patterns[i])>int(patterns[j]):\n                rotations+=1\n                patterns[j],patterns[i]=patterns[i],patterns[j]\n    for i in range(len(patterns)):\n        if i==0:\n            patterns[i]=patterns[i]+patterns[i+1]\n        else:\n            patterns[i]=patterns[i]+patterns[i-1]\n    for i in range(len(patterns)):\n        length=0\n        for j in range(len(patterns[i])):\n            if patterns[i][j]!=patterns[i][length]:\n                length+=1\n        if length<max_length:\n            max_length=length\n    return rotations\ndef find_Rotations_Thread(str):\n    '''\n    Using a threading library, the find_Rotations function can be executed at any given frequency.\n    '''\n    threads = []\n    threads.append(threading.Thread(target=find_Rotations, args=(str,)))\n    threads.append(threading.Thread(target=find_Rotations, args=(str,)))\n    for thread in threads:\n        thread.start()\n    for thread in threads:\n        thread.join()\n    return threads[0].get_stderr(),threads[1].get_stderr()\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    str_list = list(str)\n    str_list.sort()\n    for i in range(len(str_list)-1):\n        if str_list[i] == str_list[i+1]:\n            rotations += 1\n        else:\n            return rotations\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = list(str)\n    l.sort()\n    rotations = 0\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            rotations += (j - i) * (l[j] == l[i])\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    lst=[]\n    for x in range(1, len(str)+1):\n        lst.append(str)\n    if len(str) > len(lst):\n        return -1\n    for x in range(0, len(str) - 1):\n        if lst[x] == lst[x + 1]:\n            return str\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations=0\n    i=0\n    j=0\n    n=len(str)\n    if n==1:\n        return n\n    while i<n-2:\n        if str[i]==str[i+2]:\n            j=i+2\n        else:\n            rotations=rotations+1\n            i=i+1\n    if j==n-1:\n        rotations=rotations+1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotation = 0\n    for i in range(len(str)-1, -1, -1):\n        if str[i] == str[i+1]:\n            rotation += 1\n        else:\n            rotation = 0\n        if rotation > 0:\n            return rotation\n    return rotation\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    count = 0\n    for i in range(len(str)):\n        if str[i]==str[i-1]:\n            count += 1\n        else:\n            if count==0:\n                rotations = 0\n            else:\n                rotations += count\n                count = 0\n    if count==0:\n        rotations = 0\n    else:\n        rotations += count\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Your code here \n    rotations = 0 \n    for i in range(len(str)):\n        rotations = rotations + str.count(str[i])\n        if rotations > 0: \n            break\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < 2:\n        return 0\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Your code here\n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:ch]+s[s.index(ch)+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ_count = 0\n    occ_loc = 0\n    for i in range(len(s)):\n        if s[i] == ch:\n            occ_count += 1\n            occ_loc = i\n        elif s[i] =='':\n            occ_loc = 0\n        elif s[i] == '_':\n            occ_loc = len(s) - 1\n    if occ_count == 1:\n        return s.replace(s[occ_loc],\"_\",1)\n    else:\n        return s.replace(s[occ_loc],\"\",occ_count)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # get the length of the string\n    l = len(s)\n    # if the string is empty\n    if not l: \n        return s\n    # if the char is not found \n    if not ch: \n        return s\n    # if the first char is found \n    if ch in s: \n        # find the index of the first char \n        i = s.find(ch) \n        # delete the index \n        return s[:i] + s[i+1:] \n    else: \n        # if the first char is not found return the original string \n        return s "
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    # s = 'abc'\n    \n    # if s.startswith(ch):\n    #     index = s.index(ch)\n    #     return index\n    # elif s.endswith(ch):\n    #     index = s.rindex(ch)\n    #     return index\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove last and first occurence\n    s = s[0:len(s)-1] + s[len(s)-1:]\n    # remove\n    s = s.replace(ch, \"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Base case\n    if not s:\n        return ''\n    if s[0] == ch:\n        return s[1:]\n    else:\n        return s[0] + remove_Occ(s[1:],ch)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch = ch.lower()\n    if (s.find(ch)!= -1):\n        return s.replace(ch, \" \")\n    else:\n        return s\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    d={\"A\":\"0\",\"B\":\"1\",\"C\":\"2\",\"D\":\"3\",\"E\":\"4\",\"F\":\"5\",\"G\":\"6\",\"H\":\"7\",\"I\":\"8\",\"J\":\"9\",\"K\":\"10\",\"L\":\"11\",\"M\":\"12\",\"N\":\"13\",\"O\":\"14\",\"P\":\"15\",\"Q\":\"16\",\"R\":\"17\",\"S\":\"18\",\"T\":\"19\",\"U\":\"20\",\"V\":\"21\",\"W\":\"22\",\"X\":\"23\",\"Y\":\"24\",\"Z\":\"25\"}\n    s=list(s)\n    s.reverse()\n    for i in range(len(s)-ch):\n        if s[i:i+ch] in d:\n            s[i:i+ch]=d[s[i:i+ch]]\n    return \"\".join(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=list(s)\n    s.pop(0)\n    s.pop()\n    return ''.join(s)\nprint(remove_Occ(\"cab\",'b'))\nprint(remove_Occ(\"aba\",'a'))\nprint(remove_Occ(\"abab\",\"a\"))\nprint(remove_Occ(\"aaabbbabbbabab\",\"a\")"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s_rows = sorted(M, key=lambda x: x[0])\n    s_rows.sort(key=lambda x: x[1])\n    s_matrix = []\n    for r in range(len(s_rows)):\n        s_matrix.append(s_rows[r][0])\n    return s_matrix\n    \n    \ndef print_matrix(M):\n    '''\n    Write a function to print a given matrix.\n    '''\n    print(M)\n    print(len(M))\n    for i in range(len(M)):\n        print(M[i])\n    \n    \ndef main():\n    '''\n    Your task is to write a function that takes a matrix as a parameter and\n    print a new matrix after the function is applied on it.\n    '''\n    # start with an empty matrix\n    M = []\n    \n    # read data from the user\n    n = int(input(\"Enter matrix rows (integer): \"))\n    for i in range(n):\n        M.append([int(x) for x in input(\"Enter row {}: \".format(i+1)).split()])\n    \n    # sort the matrix according to the rows\n    M = sort_matrix(M)\n    \n    # print the matrix\n    print_matrix(M)\n    \n    # add the new rows of rows 0-7\n    for i in range(len(M)):\n        M[i].append(0)\n    M.append([0 for i in range(len(M[0]))])\n    \n    # apply the function\n    M = apply_function(M)\n    \n    # print the new matrix\n    print_matrix(M)\n    \n    "
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        max_num = 0\n        for j in range(n):\n            if max_num < M[j][i]:\n                max_num = M[j][i]\n        for k in range(n):\n            if M[k][i] > 0:\n                M[k][i] -= max_num\n        for j in range(n):\n            if M[i][j] > 0:\n                M[i][j] -= max_num\n    for i in range(n):\n        for j in range(n):\n            if M[i][j] > 0:\n                M[i][j] += max_num\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # START: Write your code below\n    return \n    # END: Write your code above"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    c_row_sum = []\n    for _ in range(len(M)):\n        c_row_sum.append(sum(M[_]))\n    c_row_sum.sort()\n    \n    for _ in range(len(M)):\n        for i in range(len(M[_])):\n            if c_row_sum[i] > 0:\n                M[_][i] -= c_row_sum[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #TODO\n    return\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for row in range(len(M)):\n        for col in range(row + 1, len(M[0])):\n            M[row][col] = M[row][col] + M[row][col - 1]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        sum = 0\n        for j in range(n):\n            sum += M[i][j]\n        for j in range(n):\n            M[i][j] = M[j][i]\n            M[j][i] = sum\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row=[]\n    sum_row=0\n    for i in range(0,len(M)):\n        sum_row+=M[i][i]\n        row.append(sum_row)\n    row.sort()\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sums = []\n    for row in M:\n        sum = 0\n        for cell in row:\n            sum += cell\n        sums.append(sum)\n    sums.sort()\n    return zip(*M)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(M):\n        for j in range(M-i-1):\n            if M[j] > M[j+1]:\n                temp = M[j]\n                M[j] = M[j+1]\n                M[j+1] = temp\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*(l+h)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = 0\n    t = (b*b)/6\n    r = (l*l)/6\n    if(h<0.5*r) :\n        v = t*h\n    else :\n        v = (2*t*h)/3\n    print(\"The volume of the triangle is\",v)\n    \nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20)\nfind_Volume(10,15,20"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume=0\n    for i in range(l,b):\n        for j in range(h,b):\n            if (i == l) or (j == h):\n                volume+=1\n    return volum"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (l * b * h)/3\n    print(\"The volume of a triangle with a base of \" + str(l) + \" and a height of \" + str(h) + \" is: \" + str(vol) + \"mm^3\")\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l * (l - b)) / (2 * h)\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)\n    print(\"The volume of this prism is : %.2f\" % volume)\n    \nfind_Volume(100,200,100)\nfind_Volume(100,200,200)\nfind_Volume(100,200,400)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # subtract base from height\n    h = l-h\n    #print (l-h)\n    # l = round(l,4)\n    # h = round(h,4)\n    #print (l,h)\n    #print (l,h,end=' ')\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l>b or b>h : return\n    \n    if l<0 : return\n    \n    if h>l or l<0 : return\n    \n    volume=0\n    for i in range(1,l+1) :\n        for j in range(1,b+1) :\n            for k in range(1,h+1) :\n                if ((i+j+k)%2 == 0) : \n                    volume+=3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    for i in range(l,h):\n        for j in range(i+1,h):\n            for k in range(j+1,h):\n                if i+j+k==h-1 :\n                    return i*j*k\n    return 0\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*h\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-zA-Z0-9_]', text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    underscore_word = \" _ \"\n    for i in text:\n        if (i in underscore_word):\n            return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = '^[a-zA-Z0-9][a-zA-Z0-9_]*$'\n    if(re.search(regex,text)):\n        print(\"String contains any sequences of lowercase letters.\")\n    else:\n        print(\"String does not contain any sequences of lowercase letters.\")\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    return re.search(\"[a-z0-9]\", text)!= None and re.search(\"[A-Z]\", text)!= None and re.search(\"[0-9]\", text)!= None and re.search(\"[!@#$%^&*_\\-+.]\", text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for i in text:\n        if i.lower() in '_!@#$%^&*()_-+={[}]|\\:;' and i!='':\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(\"[a-z0-9][a-z0-9_]*[a-z0-9][a-z0-9_]*\", text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Initialize a regular expression\n    reg = re.compile(\"[a-z]{2}[A-Z]\")\n    # Split the string by the whitespace character\n    text = text.split(\" \")\n    # Loop over the strings\n    for i in text:\n        # Check if the current string is contained in the regular expression\n        if reg.search(i):\n            # Return true if the current string is contained in the regular expression\n            return True\n        else:\n            # Return false otherwise\n            return False\n    # If the string is not contained in the regular expression then return false\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.sub(r'\\W+','',text)\n    text = re.sub(r'\\'s+',' ',text)\n    text = re.sub(r'(\\w)\\1+','\\1',text)\n    text = re.sub(r'([^\\w\\W])\\1+','\\1',text)\n    return re.sub(r'(\\W)\\1+','\\1',text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r\"^[a-z]+[A-Z]$\")\n    return pattern.match(text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lowercase = text.lower()\n    text_lowercase_underscore = re.sub(r'[^a-zA-Z0-9_]','',text_lowercase)\n    text_lowercase_underscore = text_lowercase_underscore.lower()\n    return text_lowercase_underscore==text\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    side_length = int(a)\n    for x in range(0, side_length):\n        perimeter += side_length\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a*(a + 1)) / 2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * len(str(a))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    if a > 0:\n        for x in range(0,a):\n            perimeter += 2 * (x + 1)\n        \n        return perimeter\n    else:\n        print(\"Perimeter of a square is -1\")\n        return -1\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    l = len(a)\n    return (l * (l+1)) / 2"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    s = (a**2)\n    print(s)\n    return s\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = 0\n    if len(a) == 0:\n        return 0\n    if len(a) % 2 == 0:\n        for i in range(len(a)):\n            p += (a[i] * a[i])\n        return p\n    else:\n        for i in range(len(a)):\n            p += (a[i] * a[len(a) - 1 - i])\n        return p\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a < 0:\n        return \"Please enter a positive integer\"\n    if a == 0:\n        return 0\n    return a**2 + square_perimeter(a - 1)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i in list:\n            list.remove(i)\n        else:\n            list.append(i)\n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_lst = list(string)\n    str_lst = list(filter(lambda c: c in string, str_lst))\n    return str_lst\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for char in string:\n        if char not in string:\n            string.replace(char, \"\")\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_ = list(string)\n    list_[0] = list_[0].replace(' ','')\n    return \"\".join(list_)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_list = []\n    for char in string:\n        if char in string:\n            new_list.append(char)\n        else:\n            new_list.append(\"?\")\n    return new_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(filter(lambda x: x in string, string))\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = []\n    for char in string: \n        if char not in li: \n            li.append(char)\n    return li \n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    index = 0\n    for char in string:\n        if char in secondString:\n            string = string[:index] + string[index + 1:]\n            index = 0\n        else:\n            index += 1\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\n    \ndef remove_extra_char(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i not in list:\n            list.append(i)\n    return list\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n    duplicates = []\n    for num in arraynums:\n        if num in duplicates:\n            return True\n        else:\n            duplicates.append(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(f'Array {arraynums} contains any duplicate element.')\n    return any(duplicate in arraynums for duplicate in arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    trues = []\n    for num in arraynums:\n        if num not in trues:\n            trues.append(num)\n    return trues\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Write your code here.\n    # Create a set\n    set = set(arraynums)\n    # Count the number of duplicate\n    dupCount = len(set)\n    # print(dupCount)\n    return dupCount!= 0\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    l = []\n    for num in arraynums:\n        if num not in l:\n            l.append(num)\n    return len(l) > 0\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        for num1 in arraynums:\n            if num!= num1 and num == num1 and (num1!= num or num1 == num1):\n                print(num, num1)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    def duplicate_removal(array):\n        return not any(array)\n    return duplicate_removal(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if arraynums is None:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if type(arraynums) is not list:\n        raise TypeError('list is not accepted')\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x in '1234567890'\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x >= 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if x==1 else False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return 0 <= x <= 3\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x > 0):\n        if(x % 5 == 0):\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0 or x==1:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 1:\n        return False\n    elif x >= 1:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x%10==0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%2 == 0\n    "
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    if rev == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    if num < 0:\n        return None\n    elif num == 0 or num == 1:\n        return True\n    elif num < 2 or num > 9:\n        return False\n    else:\n        return rev(num-2) and rev(num-1)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = int(num)\n    if rev < 0:\n        print(False)\n    else:\n        if rev == 1:\n            return True\n        else:\n            return rev == 2 or rev == 3\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    num = str(num)\n    for i in range(len(num)-1, -1, -1):\n        rev = rev * 10 + int(num[i])\n    return rev\n    # try:\n    #     num = int(input('Enter a number: '))\n    #     rev = rev(num)\n    # except ValueError:\n    #     print('Error: Invalid input. Try again.')\n    #     return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    rev_flag = False\n    i = 0\n    while i < len(num):\n        rev_num = rev_num * 10 + num[i]\n        if rev_num < 2:\n            rev_flag = True\n            break\n        i += 1\n    return rev_flag\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    rev_num_str = str(num)\n    rev_num_list = rev_num_str.split(\" \")\n    for i in range(0,len(rev_num_list)):\n        if rev_num_list[i] == '-':\n            rev_num += 2\n        else:\n            rev_num += 1\n    if rev_num < 2:\n        return \"Number is in reverse\"\n    else:\n        return \"Number is not in reverse\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=num[::-1]\n    if int(rev)==num:\n        return True\n    else:\n        return False\nnum=int(input(\"Enter a number: \"))\nif rev(num):\n    print(num,\"is one less than twice its reverse\")\nelse:\n    print(num,\"is not one less than twice its reverse\")\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    elif num == 0:\n        return False\n    else:\n        if num % 2!= 0:\n            return True\n        else:\n            return False\n        "
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        digit = num % 10\n        reverse = reverse*10 + digit\n        num = num//10\n    if reverse == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_list = []\n    while num > 0:\n        rev_list.append(num % 10)\n        num = num // 10\n    for i in range(len(rev_list)):\n        if rev_list[i]!= rev_list[-i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(1, len(arr)) : \n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n    \ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    min_num = arr[0]\n    for i in range(1, len(arr)) : \n        if arr[i] < min_num :\n            min_num = arr[i]\n    return min_num\n    \ndef find_Product(arr) : \n    '''\n    Write a python function to find the product of all the numbers that can be formed with the given list of digits.\n    '''\n    product = 1\n    for i in range(1, len(arr)) : \n        product *= arr[i]\n    return product\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_Num(arr) :\n        MAX = 0\n        s = \"\"\n        for i in range(len(arr)) :\n            s += str(arr[i])\n            if arr[i] > MAX :\n                MAX = arr[i]\n        if len(s) == 1 :\n            return MAX\n        else :\n            for j in range(len(s)-1) :\n                if s[j] < s[j+1] :\n                    return MAX\n            return s[-1]\n    return Max_Num(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # use recursion to find the largest number (so I can use the max value of the recursion\n    # to find the next larger number that I can see)\n    def Max_Num(arr, n) : \n        # base case if n is empty\n        if n == 0 : return 0\n        # If n is greater than len(arr)\n        # then the largest number can be formed with arr[n-1]\n        # and arr[n-1] can be added to the current largest number\n        if n > len(arr): \n            return arr[n-1]\n        # return the largest number by using recursion\n        return max(arr[n-1], Max_Num(arr, n-1))\n    \n    # find the largest number\n    return Max_Num(arr, len(arr))\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    i = 0\n    num = 9999999\n    for num in arr : \n        i = i + 1\n        if num > num:\n            break\n        else:\n            i = 0\n            num = 9999999\n            if i > 1 :\n                for i in range(i,len(arr)) : \n                    if arr[i] > arr[i-1] :\n                        arr[i], arr[i-1] = arr[i-1], arr[i]\n                        num = num - 1\n                        i = 0\n                        break\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_arr = []\n    for i in arr :\n        num_arr.append(int(i))\n    # print(num_arr)\n    num_arr.sort()\n    # print(num_arr)\n    max_num = num_arr[-1]\n    # print(max_num)\n    max_num_arr = []\n    for i in range(len(num_arr)) :\n        if(num_arr[i] == max_num):\n            max_num_arr.append(num_arr[i])\n        else :\n            pass\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_Num = 0\n    for i in range(len(arr)) :\n        temp = int(arr[i])\n        temp_num = 1\n        for j in range(i, len(arr)) :\n            if int(arr[j]) > int(arr[i]) :\n                temp_num = temp_num * 10 + int(arr[j])\n        if temp_num > Max_Num :\n            Max_Num = temp_num\n    return Max_Num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = int(1)\n    for i in range(1,len(arr)+1):\n        for j in range(0,len(arr)-i):\n            tmp = arr[j:j+i]\n            if sum(tmp) > max:\n                max = sum(tmp)\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    lst = []\n    dct = {}\n    for i in arr:\n        lst.append(i)\n        dct[i] = dct.get(i,0) + 1\n    ans = 0\n    for key in dct:\n        if dct[key] > ans:\n            ans = dct[key]\n    return ans\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0 \n    for i in arr : \n        temp = arr.count(i) \n        if temp > max : \n            max = temp \n            # print(max) \n    return max "
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Declare max_num and var_count \n    max_num = 0\n    var_count = 0\n    # For loop to search and update max_num and var_count \n    for i in arr : \n        # If i is a number, increment var_count and add it to the max_num \n        if i.isdigit() : \n            var_count += 1\n            # If var_count is equal to len(arr), then add 1 to max_num \n            if var_count == len(arr) : \n                max_num += 1\n    # Return the max_num and var_count \n    return max_num, var_count \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 or y<0:\n        return 'Negative'\n    if x>0 and y>0:\n        return 'Positive'\n    if x>0 and y<0:\n        return 'Negative'\n    if x<0 and y>0:\n        return 'Positive'\n    return 'Unknown'\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # x>y return false\n    if x>y:\n        return False\n    # x<y return true\n    if x<y:\n        return True\n    # x=y return true\n    return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return True\n    elif x < y: \n        return False\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == -y:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return \"x is negative and y is negative\"\n    if x < 0 and y > 0:\n        return \"x is negative and y is positive\"\n    if x > 0 and y < 0:\n        return \"x is positive and y is negative\"\n    if x > 0 and y > 0:\n        return \"x is positive and y is positive\"\n    if x == 0 and y == 0:\n        return \"x and y are equal\"\n    return \"x and y are not equal\"\n    \nprint(opposite_Signs(4, -5))\nprint(opposite_Signs(4, 5))\nprint(opposite_Signs(5, 4))\nprint(opposite_Signs(-4, 5))\nprint(opposite_Signs(-5, 4))\nprint(opposite_Signs(4,5))"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Write your code here\n    if x > y:\n        x,y = y,x\n    if x == y:\n        return True\n    return False\n    \n    \nprint(opposite_Signs(1,2))\nprint(opposite_Signs(2,2))\nprint(opposite_Signs(5,2))\nprint(opposite_Signs(6,2))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = abs(x)\n    y = abs(y)\n    \n    if (x>y):\n        return 1\n    else:\n        return -1\n        \n    \ndef find_the_sign_of_the_digit(x): \n    '''\n    Write a python function to find the sign of the given integer.\n    '''\n    x = abs(x)\n    if (x<=1):\n        return \"0\"\n    elif (x>1 and x<=3):\n        return \"1\"\n    elif (x>3 and x<=5):\n        return \"2\"\n    elif (x>5):\n        return \"3\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return x > y \n    elif x < y: \n        return x < y \n    else: \n        return x == y \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 or y < 0:\n        return True\n    if x > 0 and y > 0:\n        return False\n    if x > 0 and y < 0:\n        return False\n    if x < 0 and y > 0:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x<0 and y<0 or x>0 and y>0\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 2:\n        return n\n    elif n % 2 == 0:\n        return n//10 + is_octagonal(n//10)\n    else:\n        return (n*(n+1)//2) + is_octagonal(n//2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    result = 0\n    while (i <= n): \n        result += i\n        i += 1\n    return result\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    from math import sqrt, floor\n    a = floor(sqrt(n))\n    if (a % 2) == 0:\n        return a\n    else:\n        return a + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #n=1\n    #while n!=1:\n    #    if n==1:\n    #        print(n)\n    #        break\n    #    n=n/10\n    #return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 1 + (is_octagonal(n-1) + is_octagonal(n-2))\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n*n+n)//2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return 0\n    \n    while n > 0: \n        if n%2 == 1: \n            return n\n        \n        n = n//10\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def remove_even(n):\n        while n % 2 == 0:\n            n = n / 2\n        return n\n    \n    def is_pentagonal(n):\n        \"\"\"\n        Return True if the number n is a pentagonal number.\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    # Set the base case\n    if n == 1: \n        return 1\n    \n    # Base case\n    if n == 2: \n        return n\n    \n    # Check if n is odd\n    if n % 2 == 1: \n        return 0\n    \n    # Get the first two numbers\n    num1 = n // 3\n    num2 = n - num1\n    \n    # Check if num1 and num2 have a divisor\n    if num1 % 2 == 0 and num2 % 2 == 0: \n        # If they are then num1 and num2 can't be odd\n        return 0\n    \n    # If they are then divide by 3\n    elif num1 % 2 == 1 and num2 % 2 == 1: \n        return n // 3\n    \n    else: \n        return (is_octagonal(num1) + is_octagonal(num2)) \n        \n    \n    \n    "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    h = n * (n + 1) // 2\n    while True:\n        if n % h == 0:\n            return h\n        else:\n            n = n // h\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    total_length = 0\n    l = len(s)\n    # initializing the result\n    result = 0\n    # looping through the string\n    for i in range(l):\n        # if the string is\n        if s[i] in '0':\n            # then the sum of digits should be at least 1\n            if total_length < 1:\n                # if the sum of digits is at least 1\n                if s[i] in '01':\n                    # then the number of substrings with at least one digit is\n                    result += 1\n                    total_length += 1\n                # if the sum of digits is 1\n                else:\n                    # then the number of substrings with at least one digit is\n                    result += 1\n                    total_length += 1\n            # if the sum of digits is 0\n            else:\n                # then the number of substrings with the sum of digits equal to their length is\n                # defined as the number of substrings with at least one digit.\n                result += 1\n                total_length += 1\n        # if the string is not\n        else:\n            # then the number of substrings with at least one digit is defined as the number of substrings with at least one digit.\n            result += 1\n            total_length += 1\n    # if the sum of digits is 0\n    if total_length < 1:\n        # then the number of substrings with at least one digit is defined as the number of substrings with at least one digit.\n        result += 1\n        total_length += 1\n    # if the sum of digits is 1\n    else:\n        # then the number of substrings with the sum of digits equal to their length is defined as the number of substrings with at least one digit.\n        result += 1\n        total_length += 1\n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    lst=[]\n    for i in range(len(s)):\n        if(s[i]<='9'):\n            lst.append(s[i])\n        else:\n            lst.append(s[i]+s[i+1]+s[i+2])\n    return len(lst)-sum(lst)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings_count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i:j] == s[i:j][::-1]:\n                substrings_count += 1\n    return substrings_count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    c = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if (int(s[i:j]) == int(s[i:j][::-1])):\n                c += 1\n    return c\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #s = s.upper()\n    subs = defaultdict(int)\n    result = 0\n    for i in range(len(s)):\n        # if digits in the string\n        if s[i] in [str(x) for x in range(10)]:\n            subs[s[i]] += 1\n            if subs[s[i]] > 1:\n                result += 1\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def countSubstring(s):\n        count = 0\n        for i in range(len(s)):\n            if s[i] < str(i+1):\n                count += 1\n        return count\n    counts = defaultdict(int)\n    for i in range(len(s)):\n        counts[s[i]] += 1\n    return counts\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    pattern = r\"(\\d+)([1-9])?\"\n    count = 0\n    \n    # Convert string to list\n    string = list(s)\n    \n    # Remove whitespace\n    string = list(filter(None, string))\n    \n    # Make sure that all digits in the string are integers\n    pattern = re.compile(pattern)\n    \n    # Match each digit and store its count in a list\n    for x in string:\n        if pattern.match(x):\n            count += 1\n        else:\n            pass\n    return count\n    \ndef count_Substrings2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Remove whitespace\n    s = list(s.strip())\n    \n    # Make sure that all digits in the string are integers\n    pattern = r\"(\\d+)([1-9])?\"\n    count = 0\n    \n    # Convert string to list\n    string = list(s)\n    \n    # Remove whitespace\n    string = list(filter(None, string))\n    \n    # Make sure that all digits in the string are integers\n    pattern = re.compile(pattern)\n    \n    # Match each digit and store its count in a list\n    for i in string:\n        if pattern.match(i):\n            count += 1\n        else:\n            pass\n    return count\n    \n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    i = 0\n    j = 0\n    while i < len(s):\n        j = 0\n        while j < len(s):\n            if s[i] == s[j]:\n                j = j + 1\n            else:\n                count += 1\n                j = j + 1\n            i = i + 1\n        i = i + 1\n    return count\ndef common_chars(s1, s2):\n    '''\n    Write a python function to get the set of common characters in two strings.\n    '''\n    return set(s1).intersection(set(s2))\ndef remove_all_substr(s, substr):\n    '''\n    Write a python function to remove all substrings from string s with the substring substr.\n    '''\n    return \"\".join(s.split(substr))\ndef reverse_string(s):\n    '''\n    Write a python function to reverse a string\n    '''\n    return s[::-1]\ndef add_number_to_string(s, num):\n    '''\n    Write a python function to add a string s followed by an integer num\n    '''\n    if num == 0:\n        return s\n    else:\n        return s + str(num)\ndef print_prime_factors(n):\n    '''\n    Write a python function to print prime numbers upto n.\n    '''\n    prime_factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            prime_factors.append(i)\n    return prime_factors\ndef prime_factors(n):\n    '''\n    Write a python function to print prime numbers upto n.\n    '''\n    prime_factors = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n * 3 + 1\n        prime_factors.append(n)\n    return prime_factors\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    return len(remove_all_substr(s, \"0\")) + len(remove_all_substr(s, \"1\")) + len(remove_all_substr(s, \"2\")) + len(remove_all_substr(s, \"3\"))\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #Define the substring.\n    substrings = s\n    count = 0\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    return min(xs)\n    \ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    \n    return max(xs)\n    \ndef average(xs):\n    '''\n    Write a python function to find average of a list of numbers.\n    '''\n    \n    return sum(xs) / len(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = 100\n    for i in range(len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = sorted(xs)[0]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    x=xs[0]\n    for i in range(len(xs)-1):\n        if xs[i]<x:\n            x=xs[i]\n    return x\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = min(xs)\n    for num in xs:\n        if min_num == num:\n            return num\n    return 0\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for num in xs:\n        if num < min:\n            min = num\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num_list = []\n    for i in range(len(xs)):\n        num_list.append(xs[i])\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for item in test_list:\n        for num in item:\n            if num > max_difference:\n                max_difference = num\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # test_list = [(1,2),(2,4),(3,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,4),(4,"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for index in range(0, len(test_list) - 1):\n        if test_list[index][0] == test_list[index + 1][0] and test_list[index][1]!= test_list[index + 1][1]:\n            max_difference = test_list[index][0] - test_list[index][1]\n        elif test_list[index][1] == test_list[index + 1][1] and test_list[index][0]!= test_list[index + 1][0]:\n            max_difference = test_list[index][1] - test_list[index][0]\n    return max_difference\n    \n    \ndef main():\n    '''\n    Write a program to determine if the tuple is a valid set of elements.\n    '''\n    \n    print(\"The following is a valid tuple:\")\n    test_list = [[1,2],[1,3],[2,5],[2,4],[2,2],[3,5],[5,6],[5,4],[5,2],[6,7],[6,8],[6,9],[6,10],[6,11],[6,12],[7,8],[7,9],[7,10],[7,11],[7,12],[8,9],[8,10],[8,11],[8,12],[9,10],[9,11],[9,12],[10,11],[10,12],[11,12],[12,13],[13,14],[13,15],[14,15],[14,16],[15,17],[15,18],[16,17],[16,18],[17,18]]\n    print(test_list)\n    print(max_difference(test_list))\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = test_list[0]\n    for value in test_list:\n        if value > maximum:\n            maximum = value\n    return maximum\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    num_of_pairs = 0\n    max_difference = 0\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    left_max = max_value = test_list[0]\n    for test_num in test_list:\n        if test_num > max_value:\n            max_value = test_num\n        if test_num > left_max:\n            left_max = test_num\n    return max_value - left_max\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Case 1:\n    if len(test_list) == 1:\n        return test_list[0] - test_list[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    lst_of_pairs = []\n    for i in test_list:\n        for j in test_list:\n            if i + j < 7:\n                lst_of_pairs.append((i,j))\n    if len(lst_of_pairs) <= 1:\n        return 0\n    else:\n        return max([(abs(p[0] - p[1]), p[0]) for p in lst_of_pairs])\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for index in range(0,len(test_list)-1):\n        x = test_list[index][1] - test_list[index][0]\n        y = test_list[index+1][1] - test_list[index+1][0]\n        if x!= y:\n            if x == 0:\n                if test_list[index][0] > max_diff:\n                    max_diff = test_list[index][0]\n            elif y == 0:\n                if test_list[index+1][0] > max_diff:\n                    max_diff = test_list[index+1][0]\n            else:\n                if x < y:\n                    if test_list[index][0] > max_diff:\n                        max_diff = test_list[index][0]\n                elif test_list[index+1][0] > max_diff:\n                    max_diff = test_list[index+1][0]\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a sorted list of tuples\n    subjectmarks_sorted = sorted(subjectmarks)\n    # traverse the list\n    for i in range(len(subjectmarks_sorted)):\n        # get the second value of the tuple\n        subjectmarks_sorted[i] = subjectmarks_sorted[i][1]\n    # return the sorted list\n    return subjectmarks_sorted\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda t:t[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for tup in subjectmarks:\n        tup[1] = tup[1] + 2\n    subjectmarks.sort()\n    subjectmarks = sorted(subjectmarks, key = lambda x : x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    n = len(subjectmarks)\n    for i in range(0,n):\n        for j in range(n-i-1):\n            if subjectmarks[j][1]>subjectmarks[j+1][1]:\n                subjectmarks[j],subjectmarks[j+1]=subjectmarks[j+1],subjectmarks[j]\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x:x[1])"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = list(subjectmarks)\n    marks.sort(key = lambda marks: marks[1])\n    return marks\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: Write the function that will receive a list of numbers and return a new list of numbers that sum to zero.\n    # HINT: You can use the built in sum() function\n    \n    # Create a new list, using the sum() function\n    new_list = data_list + [0]\n    \n    # Return the new list\n    return new_list\n    \ndef test_recursive_list_sum():\n    '''\n    Write a function that will receive a list of numbers and return a list of numbers that sum to zero.\n    '''\n    # TODO: Write the function that will receive a list of numbers and return a new list of numbers that sum to zero.\n    \n    # Create a new list, using the sum() function\n    new_list = recursive_list_sum([1,2,3,4])\n    \n    # Return the new list\n    return new_list\n    \ndef test_iterative_sum():\n    '''\n    Write a function that will receive a list of numbers and return a list of numbers that sum to zero.\n    '''\n    # TODO: Write the function that will receive a list of numbers and return a new list of numbers that sum to zero.\n    \n    # Create a new list, using the sum() function\n    new_list = iterative_sum([1,2,3,4])\n    \n    # Return the new list\n    return new_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return []\n    \n    result = []\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) < 1:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    elif len(data_list) > 1:\n        return recursive_list_sum(data_list[:len(data_list)//2]) + recursive_list_sum(data_list[len(data_list)//2:])\n    \ndef test():\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert recursive_list_sum(list_of_numbers) == 21\n    print(\"All the test cases passed!\")\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data = data_list\n    if len(data) <= 1:\n        return data\n    elif len(data) == 2:\n        return data + data\n    else:\n        return data[0] + recursive_list_sum(data[1:])\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(l):\n        if not l: return []\n        if len(l) == 1: return l[0]\n        return [l[0]] + flatten(l[1:])\n    \n    if not data_list: return []\n    flattened = flatten(data_list)\n    return sum(flattened)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list)!= list:\n        raise TypeError('data_list must be a list')\n    \n    if len(data_list) == 0:\n        return 0\n    \n    flat_list = []\n    for num in data_list:\n        if type(num)!= int or num < 0:\n            raise TypeError('Each entry in data_list should be an integer')\n        \n        if type(num) == int and num < 0:\n            num = abs(num)\n        \n        flat_list.append(num)\n        \n    return sum(flat_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum([item for sublist in data_list for item in sublist])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Number of elements in the list\n    num_elements = len(data_list)\n    \n    # If list is not empty\n    if num_elements > 0:\n        \n        # Recursive call on each element\n        for i in range(0, num_elements):\n            # Add the element of the list\n            data_list[i] = recursive_list_sum(data_list[i])\n    \n    # If list is not empty\n    else:\n        # Return the element of the list\n        return data_list[0]\n    \n    # Return the sum of the elements\n    return recursive_list_sum(data_list)\n    "
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for i in list:\n        if i > 0:\n            positive += 1\n    print(positive)\n    return positive\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    print(f\"the number of positive numbers in the list is {count}\")\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    print(list)\n    print(\"There are {} positives in {} list\".format(len(list),list))\n    return len(list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len(list) - sum(list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    list_of_positives=[]\n    for item in list:\n        if item>0:\n            list_of_positives.append(item)\n    return len(list_of_positives)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    def pos_count_new(list):\n        l = []\n        for el in list:\n            if el > 0:\n                l.append(el)\n        return len(l)\n    return pos_count_new(list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(map(lambda x: x > 0, list))"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for x in list:\n        if x >= 0:\n            pos_count = pos_count + 1\n    return pos_count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    n = n+1\n    \n    def bell_partition(n, k, number, length):\n        if number == k:\n            if length == 1:\n                return 1\n            else:\n                return bell_partition(n, k, number*2, length-1) + bell_partition(n, k, number*2+1, length-1)\n        else:\n            return bell_partition(n, k, number, length)\n    \n    return bell_partition(n, n, 1, 0)\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 3:\n        return 1\n    return bell_number(n-3) + bell_number(n-2) + bell_number(n-1)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Get all the numbers\n    nums = list(map(int, input().split()))\n    # Get the max value\n    max = max(nums)\n    # Get all the indices\n    for i in range(len(nums)):\n        nums[i] -= 1\n        # Find all the indices that are empty\n        for j in range(i):\n            if (nums[j] > 0):\n                if (nums[j] > nums[i]):\n                    nums[j], nums[i] = nums[i], nums[j]\n    # Return the number of ways to partition all the numbers.\n    return len(nums)**(1/2)\n    "
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    if n == 1:\n        return 1\n    \n    def f(n, a):\n        if n == 2:\n            count += 1\n        else:\n            count = f(n-1, a) + f(n-1, a+b-a)\n        return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def func(n, i, j, nums):\n        if i == j:\n            return 1\n        if i > j:\n            return 0\n        \n        mid = (i + j) // 2\n        if nums[mid] == mid:\n            return func(n, mid+1, j, nums) + func(n, i, mid, nums)\n        else:\n            return func(n, mid, j, nums) + func(n, i, mid, nums)\n    \n    return func(n, 0, n-1, [])\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return bell_number(n - 1) + 1\n    else:\n        return bell_number(n - 1) + 2 * bell_number(n - 2)"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return bell_number(n//2)\n    else:\n        return bell_number(n//2)+bell_number(n//2+1)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    #If length of the array is zero, return True.\n    if len(A) <= 0: \n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # We want to find the length of the longest sub-array that has all elements in the same order\n    length_max = 0\n    length_min = 0\n    # First, check all elements in the array.\n    for i in range(len(A)):\n        # If the element is not in the current sub array then it's not in the array.\n        if A[i] > A[length_max] or A[i] < A[length_min]:\n            # If there is no element in the current sub array then it is not in the sub array.\n            if A[i] > 0:\n                # If the element is smaller than the previous element then its a monotonic.\n                if A[i] < A[length_max]:\n                    length_max += 1\n                # If the element is larger than the previous element then its not a monotonic.\n                else:\n                    length_min += 1\n            else:\n                # If the element is smaller than the previous element then its not a monotonic.\n                if A[i] < 0:\n                    length_max += 1\n                # If the element is larger than the previous element then its a monotonic.\n                else:\n                    length_min += 1\n    # The length of the first subarray is always 1.\n    if length_max!= length_min:\n        return False\n    # The length of the subarray is always the same.\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # this function returns False if the given array is empty\n    if len(A) == 0: \n        return False\n    # this function returns True if the given array is sorted in increasing order\n    elif len(A) == 1:\n        return True\n    # find the midpoint of the array\n    mid = len(A)//2\n    # compare the elements in the left half and the right half\n    # to check whether they are sorted\n    if A[mid] <= A[mid-1]:\n        return is_Monotonic(A[:mid])\n    else:\n        return is_Monotonic(A[mid+1:])\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check base case \n    if len(A) == 1: \n        return True \n    # If the first element is greater than the last, then it does not \n    # matter what the condition is to determine the \n    if A[0] > A[-1]: \n        return False \n    # If the last element is greater than the first, then it does not \n    # matter what the condition is to determine the \n    if A[-1] > A[0]: \n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    l = 0\n    r = n-1\n    while l < r: \n        if A[l] >= A[r]:\n            return False\n        l += 1\n        r -= 1\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    if A[0] <= A[1]: \n        return False\n    return is_Monotonic(A[1:])\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    A.sort()\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            is_monotonic = False\n    return is_monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i,j=0,1\n    is_monotonic=True\n    if A[0]>A[1]:\n        is_monotonic=False\n    else:\n        while i<len(A)-1:\n            if A[i]<A[j]:\n                is_monotonic=False\n            i+=1\n            j+=1\n    return is_monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (len(A) <= 1):\n        return True\n    flag = True\n    for i in range(len(A)-1):\n        if A[i]!= A[i+1]:\n            flag = False\n    return flag\ndef partition(A, p, r): \n    '''\n    Write a recursive function to partition the array. \n    '''\n    if r >= p: \n        # choose the pivot element \n        temp = A[r] \n        i = p-1\n        for j in range(p, r): \n            if A[j] <= temp: \n                i += 1\n                A[i], A[j] = A[j], A[i] \n        A[i + 1], A[r] = A[r], A[i + 1] \n        return i+1\n    else: \n        # choose the pivot element \n        return p\ndef quick_sort(A): \n    '''\n    Write a quick sort algorithm for an array of integers. \n    '''\n    if len(A) <= 1: \n        return A\n    pivot = A[0]\n    items = partition(A, 0, len(A)-1) \n    left = items[:items.index(pivot)+1]\n    right = items[items.index(pivot)+1:]\n    return quick_sort(left) + [pivot] + quick_sort(right) \ndef selectionsort(A): \n    '''\n    Write a selection sort algorithm for an array of integers. \n    '''\n    for i in range(len(A)):\n        min_idx = i\n        for j in range(i+1, len(A)): \n            if A[j] < A[min_idx]: \n                min_idx = j\n        A[i], A[min_idx] = A[min_idx], A[i] \n    return A\ndef binary_search(A, l, r, x): \n    '''\n    Write a binary search algorithm to find the index of a given element x in A.\n    '''\n    m = (l+r)//2\n    if A[m] < x: \n        return binary_search(A, m+1, r, x) \n    elif A[m] > x: \n        return binary_search(A, l, m-1, x) \n    else: \n        return m \ndef linear_search(A, l, x): \n    '''\n    Write a linear search algorithm to find the index of a given element x in A.\n    '''\n    for i in range(l, len(A)): \n        if A[i] == x: \n            return i \n    return -1\ndef count_sort(A, t): \n    '''\n    Write a count sort algorithm to sort a given array A such that all \n    pivot elements have a value greater than or equal to t.\n    '''\n    n = len(A) \n    count = [0]*(t+1) \n    for i in range(n): \n        count[A[i]] += 1\n    for i in range(1, t+1): \n        count[i] += count[i-1] \n    for i in range(n-1, -1, -1): \n        count[A[i]] -= 1 \n        A[count[A[i]]] = A[i] \n    return A \ndef bubble_sort(A): \n    '''\n    Write a bubble sort algorithm for an array of integers. \n    '''\n    n = len(A) \n    for i in range(n-1): \n        swap = False \n        for j in range(n-1-i): \n            if A[j] > A[j+1]: \n                A[j], A[j+1] = A[j+1], A[j] \n                swap = True\n        if not swap: \n            break \n    return A \ndef merge(A, p, r): \n    '''\n    Write a merge sort algorithm for an array of integers. \n    '''\n    if p == r: \n        return A[p] \n    m = (p+r)//2\n    L = merge(A, p, m) \n    R = merge(A, m, r) \n    i, j = p, r \n    k = p \n    while i < len(L) and j < len(R): \n        if L[i] < R[j]: \n            A[k] = L[i] \n            i += 1\n        else: \n            A[k] = R[j] \n            j += 1\n        k += 1\n    while i < len(L): \n        A[k] = L[i] \n        i += 1\n        k += 1\n    while j < len(R): \n        A[k] = R[j] \n        j += 1\n        k += 1\n    return A \ndef partition_sort(A, p): \n    '''\n    Write a partition sort algorithm for an array of integers. \n    '''\n    if p == len(A)-1: \n        return A\n    m = len(A)//2\n    L = A[:m] \n    R = A[m:] \n    j = partition(A, p, len(A)-1) \n    return partition_sort(R, p+j) + [L] + partition_sort(L, p) \ndef merge_sort(A): \n    '''\n    Write a merge sort algorithm for an array of integers. \n    '''\n    if len(A) <= 1: \n        return A\n    m = len(A)//2\n    left = merge_sort(A[:m]) \n    right = merge_sort(A[m:]) \n    return merge(left, 0, len(A)-1, m) + [right] + merge(right, len(A)-1, len(A), m) \ndef quick_sort_2(A): \n    '''\n    Write a quick sort algorithm for an array of integers. \n    '''\n    if len(A) <= 1: \n        return A\n    p = len(A)//2\n    left = quick_sort_2(A[:p]) \n    right = quick_sort_2(A[p:]) \n    return quick_sort_2(left) + [A[p]] + quick_sort_2(right) \ndef quick_sort_recursive(A, p, r): \n    '''\n    Write a recursive quick sort algorithm for an array of integers. \n    '''\n    if p >= r: \n        return A\n    q = quick_sort_recursive(A, 0, p) \n    quick_sort_recursive(q, 0, r) \n    return A \ndef sort_by_f(A, p, r): \n    '''\n    Write a sort-by-f algorithm for an array of integers. \n    '''\n    if p >= r: \n        return A \n    i = pivot(A, p, r) \n    sort_by_f(A, 0, i-1) \n    sort_by_f(A, i+1, r) \n    return A\ndef divide_sort(A, p): \n    '''\n    Write a divide-sort algorithm for an array of integers. \n    '''\n    if p >= len(A): \n        return A\n    d = len(A)//2\n    left = divide_sort(A[:d], p) \n    right = divide_sort(A[d:], p) \n    return divide_sort(left, 0) + [A[p]] + divide_sort(right, len(A)-1) \ndef rotate(A, k): \n    '''\n    Write a rotate algorithm for an array of integers. \n    '''\n    n = len(A) \n    for i in range(k): \n        # swap elements of the array \n        temp = A[i] \n        A[i] = A[n-1] \n        # swap the corresponding \n        # position in the array \n        A[n-1] = temp \n        n = n-1 \n    return A \ndef partition"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A = sorted(A)\n    A = A + A\n    for i in range(len(A)-1):\n        if A[i+1] - A[i] < 0:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(l) > 1 and all(l[i+1] == s[i] for i in range(len(s)-1))\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for item in l:\n        if s in item:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # \ud83d\udea8 Don't change the code below \ud83d\udc47\n    subset_l = []\n    for i in range(0, len(l)):\n        subset = []\n        for j in range(0, len(s)):\n            if l[i] == s[j]:\n                subset.append(l[i])\n        subset_l.append(subset)\n    return subset_l\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    flag = 0\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            flag = 1\n            break\n    return flag\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    start = 0\n    # Make a new array to store the result\n    res = []\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return True\n    if len(s) == 0:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s1 = set(l)\n    for i in s1:\n        if i in s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_l = l[:len(l)//2]\n    if len(l) % 2 == 1:\n        return sub_l[0]!= l[-1]\n    else:\n        return sub_l == s\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(0, len(Input)):\n        for j in range(i, len(Input)):\n            if (Input[i][0] == Input[j][0] and Input[i][1]!= Input[j][1]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not isinstance(Input, (tuple, list)):\n        raise TypeError('Input must be a tuple or a list')\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    new_list = []\n    for i in range(len(Input)):\n        if len(Input[i])!=len(set(Input[i])):\n            return False\n        for j in range(len(Input[i])):\n            if Input[i][j]!=Input[i][j]:\n                return False\n        new_list.append(Input[i])\n    return new_list\n    \ndef create_tuple(tup):\n    '''\n    Create a tuple using a list.\n    '''\n    return tuple(tup)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if type(Input[0])!= tuple and type(Input[0])!= list:\n        return False\n    elif len(Input) == 2 and len(set(Input)) == 2:\n        return True\n    elif len(Input[0])!= len(set(Input[0])):\n        return False\n    elif len(Input[1])!= len(set(Input[1])):\n        return False\n    elif type(Input[0][0])!= int and type(Input[0][0])!= float:\n        return False\n    elif type(Input[1][0])!= int and type(Input[1][0])!= float:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    if n == 0:\n        return False\n    else:\n        for i in range(n):\n            for j in range(i+1, n):\n                if not Input[i] == Input[j]:\n                    return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) <= 1:\n        return True\n    tuple = []\n    for i in range(len(Input) - 1):\n        for j in range(i + 1, len(Input)):\n            if Input[i][0] == Input[j][0] and Input[i][1] == Input[j][1]:\n                tuple.append(Input[i])\n    return len(tuple) == len(set(tuple))\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                if Input[i]!= Input[j]:\n                    return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # Base case\n    if len(Input) == 0:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) <= 0:\n        return True\n    else:\n        equal_length = True\n        for i in range(len(Input)):\n            if len(Input[i])!= len(Input[i + 1]):\n                equal_length = False\n                break\n        return equal_length\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Sort first item by value\n    # Swap first item with the last item\n    # Repeat until no swaps required\n    for i in range(len(nums)):\n        swap_item = nums[i]\n        # iterate through remaining items\n        for j in range(i+1, len(nums)):\n            # Swap first item with the item in the list\n            nums[i], nums[j] = nums[j], nums[i]\n            # Swap the values\n            nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # NOTE: https://stackoverflow.com/questions/43455309/sort-a-list-of-numbers-by-faster-way\n    \n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n            \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length):\n        for j in range(0, length - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_by_first(elements):\n        '''\n        Sort the elements of a list by their first element\n        '''\n        i = 0\n        while i < len(elements) - 1:\n            if elements[i] > elements[i + 1]:\n                elements[i], elements[i + 1] = elements[i + 1], elements[i]\n            i += 1\n        return elements\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # create an empty output array\n    output = []\n    # creating a range with range(1, len(nums) + 1)\n    # copying each element of the list into the output array\n    for i in range(len(nums)):\n        # looping through every element of the list\n        for j in range(len(nums) - i - 1):\n            # checking if the element is already present\n            # in the output array\n            if nums[j] < nums[j + 1]:\n                # swapping\n                temp = nums[j]\n                nums[j] = nums[j + 1]\n                nums[j + 1] = temp\n    # returning the sorted array\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for index in range(len(nums)):\n        for index2 in range(len(nums) - index - 1):\n            if nums[index2] > nums[index2 + 1]:\n                nums[index2], nums[index2 + 1] = nums[index2 + 1], nums[index2]\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0,n-1):\n        for j in range(0,n-1):\n            if ((i+j)%2 == 0):\n                if (i%2)==0 and (j%2)==0:\n                    print(\"DIF_square is \",i,j)\n                    break\n                else:\n                    print(\"DIF_square is \",i,j)\n                    break\n            else:\n                print(\"DIF_square is \",i,j)\n                break\n    else:\n        print(\"DIF_square is \",i,j)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        return n-diff_Square(n-1"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1 or n == 2:\n        return False\n    if n % 4 == 0:\n        return True\n    if n % 4!= 0:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<=0:\n        print(\"Input number should be greater than 0\")\n        return False\n    if n==0:\n        return True\n    elif n==1:\n        return False\n    else:\n        return dif_Square(n-1) and dif_Square(n-2)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # your code goes here\n    sq1 = int(n**0.5)\n    sq2 = int(n**0.5)\n    if n==sq1*sq2:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n, 1, -1):\n        for j in range(n, 1, -1):\n            if (i-j) == n:\n                return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        return (dif_Square(n - 1) + dif_Square(n - 2)) == 0\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==1:\n        return True\n    elif n==0:\n        return False\n    elif n%2==0:\n        return dif_Square(n//2)\n    else:\n        return dif_Square(n-1)\n        \ndef dif_Square_c(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==1:\n        return True\n    elif n==0:\n        return False\n    else:\n        return dif_Square_c(n//2) or dif_Square_c(n-1)\n    \ndef dif_Square_f(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==1:\n        return True\n    elif n==0:\n        return False\n    else:\n        return dif_Square_f(n//2) and dif_Square_f(n-1)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_n = int(n**0.5)\n    if n == square_n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0 or n == 1: \n        return False\n    else: \n        return (n % 2 == 0) and dif_Square(n-1) \n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    assert(len(colors) == len(patterns) and len(colors) == len(patterns[0])), \"length of pattern and colors does not match\"\n    for i, color in enumerate(colors):\n        if patterns[i][0]!= color or patterns[i][1]!= color:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if not is_samepatterns(colors, pattern):\n            return False\n    return True\n    \ndef check_point_distribution(patterns, new_matrix):\n    '''\n    Write a function to check whether it follows the pattern given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        for j in range(len(patterns[0])):\n            if new_matrix[i][j]!= patterns[i][j]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i=0\n    while(i<len(colors)):\n        j=0\n        while(j<len(patterns)):\n            if(colors[i]==patterns[j]):\n                print(\"Pattern found: \"+str(patterns[j]))\n                j+=1\n                break\n            j+=1\n        i+=1\n        \n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) == 0:\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # M = number of elements in the color array\n    # N = number of colors\n    # K = number of patterns\n    M = len(colors)\n    N = len(patterns)\n    K = len(colors[0])\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_index = 0\n    num_patterns = len(patterns)\n    while pattern_index < num_patterns:\n        pattern = patterns[pattern_index]\n        \n        color = colors[pattern_index]\n        pattern_index += 1\n        \n        for pattern_idx in range(0, pattern_index):\n            color_idx = color[pattern_idx]\n            if color_idx!= pattern[pattern_idx]:\n                return False\n        \n        color_idx = color[pattern_index]\n        \n        if color_idx == pattern[pattern_index]:\n            pattern_index += 1\n        else:\n            pattern_index = pattern_index - 1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if len(pattern)!= len(colors):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if is_samepatterns(colors, pattern):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for p in patterns:\n        if not p in colors:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list = sorted(test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] % K == 0:\n                if test_list[j][1] % K == 0:\n                    if test_list[j][0]!= test_list[i][0] and test_list[j][0]!= test_list[i][1]:\n                        print(test_list[i][0], test_list[j][0], test_list[j][1])\n                    if test_list[i][0] == test_list[j][0] or test_list[i][0] == test_list[j][1]:\n                        return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list = test_list + tuple(range(K))\n    test_list = sorted(test_list)\n    print(test_list)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return_list = []\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    \n    for element in test_list:\n        if element[1] % K == 0:\n            tuples.append(element)\n    \n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    # Write your code here\n    tuples = []\n    for t in test_list:\n        if all(elem%K == 0 for elem in t):\n            tuples.append(t)\n    return tuples"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    result = []\n    for element in test_list:\n        if all(e % K for e in element):\n            result.append(element)\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    f = {}\n    for a, b in test_list:\n        if b in f:\n            f[b].append(a)\n        else:\n            f[b] = [a]\n    return f\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    print(test_list)\n    l = list(enumerate(test_list))\n    for i in l:\n        print(i)\n        t = [i[1][0], i[1][1]]\n        print(t)\n        if t[1] % K!= 0:\n            continue\n        else:\n            tuples = []\n            for j in range(1, len(test_list)):\n                if test_list[j][1] % t[1] == 0:\n                    tuples.append(test_list[j])\n            print(tuples)\n            return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for item in test_list:\n        for x in item:\n            if x % K == 0:\n                result.append(item)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for x in test_list:\n        if x[1] % K == 0:\n            new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 10 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    divisible = True\n    if n % 11 == 0: \n        divisible = False\n    return divisible\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 2 == 0:\n        return False\n    if n % 10 == 1:\n        return True\n    return is_Diff(n//10)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # create a list of numbers that divide by 11 \n    div_list = [x for x in range(1, n + 1) if n % x == 0] \n    # return True if the numbers are divisible by 11 \n    return len(div_list) == 1\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 10 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if (n % i == 0):\n            count += 1\n    if count > 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if(len(s)%2!=0):\n        print(\"s is not a valid word\")\n    else:\n        print(\"s is a valid word\")\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        return False\n    else:\n        return True\n        \n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l % 2 == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.upper()\n    k = len(s)\n    if(k%2!=0):\n        print(\"The word does not contain an even number of spaces\")\n    else:\n        print(\"The word contains an even number of spaces\")\n    \n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return (len(s)%2 == 1)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # count = 0\n    # for i in s:\n    #     if i in ['a','e','i','o','u','A','E','I','O','U']:\n    #         count += 1\n    #     else:\n    #         pass\n    # return count%2 == 0\n    return len(s)%2==0\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Step #1:\n    # your code here\n    # Step #2:\n    # your code here\n    # Step #3:\n    # your code here\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    factors = [2, 6, 10, 20, 30, 40, 60, 120] \n    nums = [i for i in range(1, 101)] \n    return sum(factors[i:n] for i in range(n) if i*i not in nums)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    square_fac = 3**0.5\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n_digits = len(str(n))\n    n_sum = 0\n    for i in range(1, 10):\n        if n % i == 0:\n            n_sum += i\n    return int(n_sum)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 1 + (n ** 2) % 10\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n<=1:\n        return n\n    elif n==2:\n        return 1\n    elif n==3:\n        return 4\n    else:\n        return tetrahedral_number(n-1)+tetrahedral_number(n-2)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n + 1):\n        if (i % 3 == 0):\n            if (i % 5 == 0):\n                return i\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    # get the base number from the user\n    b = int(input(\"Please enter the base number: \"))\n    \n    # if the base number is equal to n then return the base number\n    if b == n: \n        return b \n    \n    # else, divide the base number by two\n    else: \n        b = b/2\n        \n        # if the base number is less than n then return the base number\n        if b < n:\n            return tetrahedral_number(b)\n            \n        # else, return the base number\n        else:\n            return b \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = n\n    b = n\n    c = n\n    d = n\n    e = n\n    f = n\n    g = n\n    h = n\n    i = n\n    j = n\n    k = n\n    l = n\n    m = n\n    n = n\n    o = n\n    p = n\n    q = n\n    r = n\n    s = n\n    t = n\n    u = n\n    v = n\n    w = n\n    x = n\n    y = n\n    z = n\n    n = n\n    tetrahedral_number = n\n    return tetrahedral_number\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2)\ndef main():\n    '''\n    To use this code, we first need to import the numpy array and \n    math module.\n    '''\n    n = int(input(\"Enter a number: \"))\n    arr = np.array([[1,0,0,0],[0,0,1,0],[0,1,0,0],[0,0,0,1]])\n    for j in range(0,n):\n        # the formula to find the nth tetrahedral number is\n        # to find the nth tetrahedral number, we can use\n        # the function of tetrahedral_number() and store it\n        # in arr[0].\n        print(tetrahedral_number(j))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*(math.pi*r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*(math.pi)*(r**3)\n    print(f'The volume of a sphere with radius {r} is {volume}.')\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = (4*math.pi*r**3)\n    return a\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r*r*math.e**(-4*r**2)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = int(r)\n    print('Volume of a sphere with radius of %d is: %d' % (r,math.sqrt(r**2 - (4/3)*r*math.pi)))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * r ** 3\n    print(\"The volume of the sphere is: \" + str(volume))\n    "
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (3.14*(r**2))\ndef volume_ellipse(r,a,b,c):\n    '''\n    Write a function to find the volume of an elliptical shape.\n    '''\n    return (2*a*(r**2))+(2*b*math.cos(math.radians(60)))+(2*c*math.cos(math.radians(90)))\ndef square(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    if r**2==(4*r):\n        return True\n    else:\n        return False\ndef triangle(r):\n    '''\n    Write a function that determines if a triangle is a triangle.\n    '''\n    if r**2==(4*r)+1:\n        return True\n    else:\n        return False\ndef area_triangle(r):\n    '''\n    Write a function that determines if a triangle is a triangle.\n    '''\n    if r**2==(4*r)+1 or r**2==1:\n        return True\n    else:\n        return False\ndef area_circle(r):\n    '''\n    Write a function that determines if a circle is a circle.\n    '''\n    return (math.pi*r**2)\ndef area_square(r):\n    '''\n    Write a function that determines if a square is a square.\n    '''\n    return (4*r)\ndef area_circle_square(r):\n    '''\n    Write a function that determines if a circle is a circle.\n    '''\n    return (4*r**2)\ndef area_square_triangle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (4*r*(math.cos(math.radians(60))))\ndef area_circle_square_triangle(r):\n    '''\n    Write a function that determines if a circle is a triangle.\n    '''\n    return (4*r*(math.cos(math.radians(90))))\ndef area_square_circle(r):\n    '''\n    Write a function that determines if a square is a circle.\n    '''\n    return (4*r*math.sin(math.radians(60)))\ndef area_square_circle_square(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (4*r*math.sin(math.radians(90)))\ndef area_square_square_triangle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (4*r*math.cos(math.radians(60)))\ndef perimeter_square(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    if r**2==(4*r):\n        return r\n    else:\n        return r+(4*r**2)\ndef perimeter_circle(r):\n    '''\n    Write a function that determines if a circle is a circle.\n    '''\n    return (3*math.pi*r)\ndef perimeter_square_triangle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(60))))\ndef perimeter_square_circle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(90))))\ndef perimeter_circle_square(r):\n    '''\n    Write a function that determines if a circle is a triangle.\n    '''\n    return (3*math.pi*r*math.cos(math.radians(60)))\ndef perimeter_circle_square_triangle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*math.cos(math.radians(90)))\ndef perimeter_circle_square_circle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*math.sin(math.radians(60)))\ndef perimeter_circle_square_circle_square(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*math.sin(math.radians(90)))\ndef perimeter_circle_square_circle_square(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*math.cos(math.radians(60)))\ndef perimeter_square_square_triangle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(60))))\ndef perimeter_square_square_circle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(90))))\ndef perimeter_square_square_circle_square(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(60))))\ndef perimeter_square_square_circle_square_triangle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(90))))\ndef perimeter_circle_square_circle_square_triangle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(60))))\ndef perimeter_circle_square_circle_square_circle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(90))))\ndef circumference_circle_square_circle_square_triangle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(60))))\ndef circumference_square_square_circle_square_triangle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(60))))\ndef circumference_square_square_circle_square_circle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(90))))\ndef circumference_circle_square_circle_square_circle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(60))))\ndef circumference_circle_square_circle_square_circle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(90))))\ndef circumference_square_circle_square_circle_square(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(60))))\ndef circumference_square_circle_square_circle_square(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.cos(math.radians(90))))\ndef circumference_square_circle_square_circle_square_triangle(r):\n    '''\n    Write a function that determines if a square is a triangle.\n    '''\n    return (3*math.pi*r*(math.co"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = r**3\n    b = 2*r\n    c = math.sqrt(a+b)\n    d = math.sqrt(a/3)\n    e = 3*math.sqrt(d)\n    f = math.sqrt(c/e)\n    return f\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return(strr[ord(strr[0]) - ord('a')])\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:\n        return \"Invalid Input\"\n    i = 0\n    while i < len(strr):\n        if strr[i] <= ord('a'):\n            return strr[i]\n        i += 1\n    return \"Invalid Input\""
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_dict = dict()\n    for char in strr:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    total = 0\n    for k,v in char_dict.items():\n        total += v\n    print(total % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = \"\"\n    for i in range(len(strr)):\n        s += chr((ord(strr[i]) + int(d)) % 26 + 97)\n    return s\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i = 0\n    j = 0\n    while (i < len(strr)):\n        j = 0\n        while (j < len(strr[i])):\n            if (strr[i][j] < 65):\n                strr[i] += str(strr[i][j])\n            else:\n                strr[i] += str(chr(ord(strr[i][j]) + 13))\n            j += 1\n        i += 1\n    return strr\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = []\n    for i in range(len(strr)):\n        char = chr(ord(strr[i])%26+64)\n        char_list.append(char)\n    return char_list\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    lst = []\n    for i in strr:\n        lst.append(ord(i))\n    # print(lst)\n    lst2 = []\n    for i in range(0, len(lst)):\n        lst2.append(chr(lst[i] % 26))\n    # print(lst2)\n    res = ''.join(lst2)\n    # print(res)\n    return res\n    \n    # def get_Char(strr):\n    #     return strr[ord(strr[0]) % 26]\n    # print(get_Char(\"a\"))\n    # print(get_Char(\"A\"))\n    # print(get_Char(\"A\"))\n    # print(get_Char(\"B\"))\n    # print(get_Char(\"B\"))\n    # print(get_Char(\"C\"))\n    # print(get_Char(\"C\"))\n    # print(get_Char(\"D\"))\n    # print(get_Char(\"D\"))\n    # print(get_Char(\"E\"))\n    # print(get_Char(\"E\"))\n    # print(get_Char(\"F\"))\n    # print(get_Char(\"F\"))\n    # print(get_Char(\"G\"))\n    # print(get_Char(\"G\"))\n    # print(get_Char(\"H\"))\n    # print(get_Char(\"H\"))\n    # print(get_Char(\"I\"))\n    # print(get_Char(\"I\"))\n    # print(get_Char(\"J\"))\n    # print(get_Char(\"J\"))\n    # print(get_Char(\"K\"))\n    # print(get_Char(\"K\"))\n    # print(get_Char(\"L\"))\n    # print(get_Char(\"L\"))\n    # print(get_Char(\"M\"))\n    # print(get_Char(\"M\"))\n    # print(get_Char(\"N\"))\n    # print(get_Char(\"N\"))\n    # print(get_Char(\"O\"))\n    # print(get_Char(\"O\"))\n    # print(get_Char(\"P\"))\n    # print(get_Char(\"P\"))\n    # print(get_Char(\"Q\"))\n    # print(get_Char(\"Q\"))\n    # print(get_Char(\"R\"))\n    # print(get_Char(\"R\"))\n    # print(get_Char(\"S\"))\n    # print(get_Char(\"S\"))\n    # print(get_Char(\"T\"))\n    # print(get_Char(\"T\"))\n    # print(get_Char(\"U\"))\n    # print(get_Char(\"U\"))\n    # print(get_Char(\"V\"))\n    # print(get_Char(\"V\"))\n    # print(get_Char(\"W\"))\n    # print(get_Char(\"W\"))\n    # print(get_Char(\"X\"))\n    # print(get_Char(\"X\"))\n    # print(get_Char(\"Y\"))\n    # print(get_Char(\"Y\"))\n    # print(get_Char(\"Z\"))\n    # print(get_Char(\"Z\"))\n    # print(get_Char(\" \"))\n    # print(get_Char(\" \"))\n    # print(get_Char(\"A\"))\n    # print(get_Char(\"B\"))\n    # print(get_Char(\"C\"))\n    # print(get_Char(\"D\"))\n    # print(get_Char(\"E\"))\n    # print(get_Char(\"F\"))\n    # print(get_Char(\"G\"))\n    # print(get_Char(\"H\"))\n    # print(get_Char(\"I\"))\n    # print(get_Char(\"J\"))\n    # print(get_Char(\"K\"))\n    # print(get_Char(\"L\"))\n    # print(get_Char(\"M\"))\n    # print(get_Char(\"N\"))\n    # print(get_Char(\"O\"))\n    # print(get_Char(\"P\"))\n    # print(get_Char(\"Q\"))\n    # print(get_Char(\"R\"))\n    # print(get_Char(\"S\"))\n    # print(get_Char(\"T\"))\n    # print(get_Char(\"U\"))\n    # print(get_Char(\"V\"))\n    # print(get_Char(\"W\"))\n    # print(get_Char(\"X\"))\n    # print(get_Char(\"Y\"))\n    # print(get_Char(\"Z\"))\n    # print(get_Char(\" \"))\n    # print(get_Char(\"A\"))\n    # print(get_Char(\"B\"))\n    # print(get_Char(\"C\"))\n    # print(get_Char(\"D\"))\n    # print(get_Char(\"E\"))\n    # print(get_Char(\"F\"))\n    # print(get_Char(\"G\"))\n    # print(get_Char(\"H\"))\n    # print(get_Char(\"I\"))\n    # print(get_Char(\"J\"))\n    # print(get_Char(\"K\"))\n    # print(get_Char(\"L\"))\n    # print(get_Char(\"M\"))\n    # print(get_Char(\"N\"))\n    # print(get_Char(\"O\"))\n    # print(get_Char(\"P\"))\n    # print(get_Char(\"Q\"))\n    # print(get_Char(\"R\"))\n    # print(get_Char(\"S\"))\n    # print(get_Char(\"T\"))\n    # print(get_Char(\"U\"))\n    # print(get_Char(\"V\"))\n    # print(get_Char(\"W\"))\n    # print(get_Char(\"X\"))\n    # print(get_Char(\"Y\"))\n    # print(get_Char(\"Z\"))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = \"\"\n    for i in strr:\n        ans += chr(ord(i) % 26 + ord('A'))\n    return ans\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii = dict()\n    # list = [ord(x) for x in strr]\n    for ch in strr:\n        ascii[ch] = chr(ord(ch) % 26 + 65)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    arr = [ord(i) for i in strr]\n    print(\"The character made by the modulo is\", sep=' ')\n    for i in arr:\n        if i % 25!= 0:\n            print(chr(i), sep=' ', end='')\n        else:\n            print(chr(i), sep='', end='')\n    print(sep='\\n', end='')\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return n\n    elif n == 1:\n        return 1\n    else:\n        return 1 + sequence(n-1)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    num = 0\n    num = num + 10\n    for i in range(0,n):\n        if num%10 == n%10:\n            return num\n        num = num + 10\n        \nn = int(input(\"n: \"))\nprint(sequence(n))\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def gen_sequence(): \n        num = 1\n        sequence = [] \n        while num < n: \n            sequence.append(num) \n            num += 1\n        return sequence\n    return gen_sequence()\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    for i in range(1,n+1):\n        print(i, end = \" \")\n    print()\n    return n\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # n is the length of the newman conway sequence\n    # O(n)\n    # O(n)\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 2 \n    elif n == 3: \n        return 3 \n    else: \n        return n - 1 + sequence(n - 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    arr = list(str(n))\n    n = int(n)\n    \n    # init start, end indexes\n    start = 0\n    end = len(arr) - 1\n    \n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == '1':\n            start = mid + 1\n        else:\n            end = mid\n    \n    # if sequence is found\n    if arr[start] == '1':\n        return start\n    else:\n        return end\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    import math\n    def generate(n): \n        num = 0\n        i = 1\n        while i <= n:\n            num += 1\n            i += 1\n        return num\n    \n    num = generate(n)\n    if n == 1:\n        return num\n    if n % 2 == 1:\n        return num - 1\n    else:\n        return num + 1\n    \ndef one_to_ten(n): \n    '''\n    Write a function that returns the nth number in the newman conway sequence.\n    '''\n    return sequence(n) * 10\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n<=1:\n        return n\n    return sequence(n-1) + sequence(n-2)\n    # E.g. n=2, the returned sequence is [1,3,2,4,5]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = []\n    for i in range(n):\n        a.append(n % 10)\n        n = int(n/10)\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    area = r * math.sqrt(4 * pi * r ** 3)\n    return area\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = r * h\n    return area\ndef surfacearea_cuboid(r, h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    area = r * h * math.sqrt(3)\n    return area\ndef surfacearea_rectangle(h, r):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = h * r * math.sqrt(4)\n    return area\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    area = (4 * pi) * (math.pow(r, 2))\n    return area\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (4 * pi * h) * r * math.sqrt(3)\n    return area\ndef surfacearea_cuboid(r, h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    area = (4 * pi * h) * r * math.pow(h, 3)\n    return area\ndef surfacearea_rectangle(h, r):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = (4 * pi * h) * (r ** 2)\n    return area\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4 * pi * r) * math.sqrt(3)\n    return area\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (4 * pi * r) * (h ** 2)\n    return area\ndef surfacearea_cuboid(r, h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    area = (4 * pi * r) * (h ** 3)\n    return area\ndef surfacearea_rectangle(h, r):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = (4 * pi * h) * (r ** 2)\n    return area\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4 * pi * r) * (3 ** 2)\n    return area\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (4 * pi * r) * (h ** 3)\n    return area\ndef surfacearea_cuboid(r, h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    area = (4 * pi * r) * (h ** 4)\n    return area\ndef surfacearea_ellipse(a, b):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    area = a * b\n    return area\ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = a * b\n    return area\ndef surfacearea_sphere(a):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4 * pi) * a\n    return area\ndef surfacearea_cylinder(a, b):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (4 * pi) * a * b\n    return area\ndef surfacearea_cuboid(a, b):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    area = (4 * pi) * a * b * math.sqrt(3)\n    return area\ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = (4 * pi) * a * b\n    return area\ndef surfacearea_sphere(a):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4 * pi) * a ** 2\n    return area\ndef surfacearea_ellipse(a, b):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    area = a * b\n    return area\ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = (4 * pi) * a * b\n    return area\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4 * pi) * r ** 2\n    return area\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (4 * pi) * r * h\n    return area\ndef surfacearea_cuboid(r, h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    area = (4 * pi) * r * h * math.sqrt(3)\n    return area\ndef surfacearea_rectangle(h, r):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = (4 * pi) * h * r\n    return area\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4 * pi) * r ** 2\n    return area\ndef surfacearea_ellipse(a, b):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    area = a * b\n    return area\ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = (a * b) ** 2\n    return area\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4 * pi) * r ** 2\n    return area\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (4 * pi) * r * h\n    return area\ndef surfacearea_cuboid(r, h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    area = (4 * pi) * r * h * math.sqrt(3)\n    return area\ndef surfacearea_rectangle(h, r):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = (4 * pi) * r * r\n    return area\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4 * pi) * r ** 2\n    return area\ndef surfacearea_ellipse(a, b):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    area = (4 * pi) * a * b\n    return area\ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = (4 * pi) * a * b\n    return area\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere."
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 0.0\n    for i in range(r):\n        area += math.pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s=4*math.pi*r**2\n    print(\"The surface area is: \"+str(s))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface = (4*math.pi*r**3)\n    return surface\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 1/4*(math.pi*r**3)\ndef surfacearea_cubes(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 1/3*3.14*r**2\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return (1/2)*math.sqrt(a**2+b**2)\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return math.pi*(r**2)\ndef surfacearea_parallelepiped(a,b,c):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    return (b**2 + c**2 - a**2)**0.5\ndef surfacearea_hexahedron(n):\n    '''\n    Write a function to find the surface area of a hexahedron.\n    '''\n    return (1/2)*math.sqrt(n**2)\ndef surfacearea_octahedron(n):\n    '''\n    Write a function to find the surface area of a octahedron.\n    '''\n    return (1/3)*math.sqrt(n**2)\ndef surfacearea_dodecahedron(n):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return (1/4)*math.sqrt(n**2)\ndef surfacearea_tetrahedron(n):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return (1/3)*math.sqrt(n**2)\ndef surfacearea_hexahedron_bases(n):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (1/2)*math.sqrt(n**2)\ndef surfacearea_hexahedron_apart_bases(n):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (1/4)*math.sqrt(n**2)\ndef surfacearea_hexahedron_tetrahedron(n):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return (1/3)*math.sqrt(n**2)\ndef surfacearea_hexahedron_dodecahedron(n):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return (1/8)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_bases(n):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return (1/3)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases(n):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return (1/2)*math.sqrt(n**2)\ndef surfacearea_dodecahedron_tetrahedron(n):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return (1/4)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases(n):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return (1/2)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases_tetrahedron(n):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return (1/4)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases_heptahedron(n):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return (1/8)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases_dodecahedron(n):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return (1/16)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases_heptahedron(n):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return (1/4)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases_heptahedron_bases(n):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return (1/3)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases_heptahedron_apart_bases(n):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return (1/8)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases_heptahedron_tetrahedron(n):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return (1/16)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases_heptahedron_dodecahedron(n):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return (1/4)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases_heptahedron_tetrahedron(n):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return (1/2)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases_heptahedron_apart_bases(n):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return (1/4)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases_heptahedron_apart_bases(n):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return (1/8)*math.sqrt(n**2)\ndef surfacearea_tetrahedron_apart_bases_heptahedron_apart_bases(n):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return (1/16)*math.sqrt(n**2)\ndef surfacearea_hexahedron_apart_bases_heptahedron(n):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    return (1/3)*math.sqrt(n**2)\ndef surfacearea_hexahedron_apart_bases_heptahedron_tetrahedron(n):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return (1/8)*math.sqrt(n**2)\ndef surfacearea_hexahedron_apart_bases_heptahedron_apart_bases(n):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return (1/16)*math.sqrt(n**2)\ndef surfacearea_hexahedron_apart_bases_heptahedron_apart_bases(n):\n    '''\n    Write a function to find the surface area of a dodecahedro"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**3\ndef surfacearea_cuboid(x,y,z):\n    '''\n    Write a function to calculate the surface area of a cuboid.\n    '''\n    return 6*x**2 + 3*y**2 + z**2\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return 4*math.pi*r**3\ndef volume_cuboid(x,y,z):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return 6*x**2 + 3*y**2 + z**2\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 3.14159*(r**2)*(1-math.cos(math.pi*(r+0.5)))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    else:\n        return '1' + centered_hexagonal_number(n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # 1. return the length of the given number\n    # 2. return the square root of the given number\n    \n    # 1.1. if n is less than 2, return 0\n    if n < 2:\n        return 0\n    \n    # 1.2. else, store the length of the square root of n as a variable\n    # and return the square root of the given number\n    # (n/4)\n    if n % 4 == 0:\n        return n/4\n    \n    # 1.3. else, store the square root of n as a variable\n    # and return the square root of the given number\n    # (n/3)\n    if n % 8 == 0:\n        return n/3\n    \n    # 1.4. else, store the square root of n as a variable\n    # and return the square root of the given number\n    # (n/2)\n    if n % 16 == 0:\n        return n/2\n    \n    # 1.5. else, return 0\n    return 0\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if (n % 3) == 0:\n        print(n)\n    else:\n        return n * (n + 1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    left_corner = \"********************************\"\n    right_corner = \"*************\"\n    if n <= 1:\n        return n\n    else:\n        return int(n / 6) + int(n % 6) + int(n / 6 - 2) + int(n % 6 - 1) + int(n / 6 - 1) + int(n % 6 - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        # base case 1\n        if n == 1:\n            # if n is odd, return the first digit\n            return 1\n        # base case 2\n        elif n == 3:\n            # return 1\n            return 1\n        else:\n            # base case 3\n            if n == 5:\n                # if n is odd, return the next digit\n                return 1\n            # else\n            else:\n                # base case 4\n                if n == 7:\n                    # return next digit\n                    return 1\n                else:\n                    # base case 5\n                    if n == 11:\n                        # return next digit\n                        return 1\n                    else:\n                        # base case 6\n                        if n == 13:\n                            # return next digit\n                            return 1\n                        else:\n                            # base case 7\n                            if n == 17:\n                                # return next digit\n                                return 1\n                            else:\n                                # base case 8\n                                if n == 19:\n                                    # return next digit\n                                    return 1\n                                else:\n                                    # base case 9\n                                    if n == 21:\n                                        # return next digit\n                                        return 1\n                                    else:\n                                        # base case 10\n                                        if n == 23:\n                                            # return next digit\n                                            return 1\n                                        else:\n                                            # base case 11\n                                            if n == 25:\n                                                # return next digit\n                                                return 1\n                                            else:\n                                                # base case 12\n                                                if n == 27:\n                                                    # return next digit\n                                                    return 1\n                                                else:\n                                                    # base case 13\n                                                    if n == 29:\n                                                        # return next digit\n                                                        return 1\n                                                    else:\n                                                        # base case 14\n                                                        if n == 31:\n                                                            # return next digit\n                                                            return 1\n                                                        else:\n                                                            # base case 15\n                                                            if n == 33:\n                                                                # return next digit\n                                                                return 1\n                                                        else:\n                                                                # base case 16\n                                                                if n == 35:\n                                                                    # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 17\n                                                                    if n == 37:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 18\n                                                                    if n == 39:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 19\n                                                                    if n == 41:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 20\n                                                                    if n == 43:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 21\n                                                                    if n == 45:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 22\n                                                                    if n == 47:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 23\n                                                                    if n == 49:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 24\n                                                                    if n == 51:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 25\n                                                                    if n == 53:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 26\n                                                                    if n == 55:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 27\n                                                                    if n == 57:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 28\n                                                                    if n == 59:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 29\n                                                                    if n == 61:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 30\n                                                                    if n == 63:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 31\n                                                                    if n == 65:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 32\n                                                                    if n == 67:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 33\n                                                                    if n == 69:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 34\n                                                                    if n == 71:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 35\n                                                                    if n == 73:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 36\n                                                                    if n == 75:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 37\n                                                                    if n == 77:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 38\n                                                                    if n == 79:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 39\n                                                                    if n == 81:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 40\n                                                                    if n == 83:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 41\n                                                                    if n == 85:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 42\n                                                                    if n == 87:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 43\n                                                                    if n == 89:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 44\n                                                                    if n == 91:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 45\n                                                                    if n == 93:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 46\n                                                                    if n == 95:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 47\n                                                                    if n == 97:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 48\n                                                                    if n == 99:\n                                                                        # return next digit\n                                                                    return 1\n                                                            else:\n                                                                    # base case 49\n                                                                    if n ="
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if (n == 1):\n        return 1\n    elif (n == 2):\n        return 4\n    elif (n == 3):\n        return 9\n    elif (n == 4):\n        return 16\n    elif (n == 5):\n        return 25\n    elif (n == 6):\n        return 36\n    elif (n == 7):\n        return 49\n    elif (n == 8):\n        return 64\n    elif (n == 9):\n        return 81\n    elif (n == 10):\n        return 128\n    else:\n        return 1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n >= 0:\n        return n\n    \n    if n % 2 == 0:\n        return 0\n    else:\n        return n-1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    \n    for key in dict1.keys():\n        dict_merged[key] = dict1[key]\n        \n    for key in dict2.keys():\n        dict_merged[key] = dict2[key]\n        \n    for key in dict3.keys():\n        dict_merged[key] = dict3[key]\n        \n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    myDict2 = {}\n    myDict3 = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict2[key2] = value2\n    for key3, value3 in dict3.items():\n        myDict3[key3] = value3\n    return myDict2, myDict3\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    return myDict\ndef merge_dictionaries_one(dict1,dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    for key3, value3 in dict3.items():\n        myDict[key3] = value3\n    return myDict\ndef merge_dictionaries_one(dict1,dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    for key3, value3 in dict3.items():\n        myDict[key3] = value3\n    return myDict\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    return myDict\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    for key3, value3 in dict3.items():\n        myDict[key3] = value3\n    return myDict\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    for key3, value3 in dict3.items():\n        myDict[key3] = value3\n    return myDict\ndef merge_dictionaries_four(dict1,dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    for key3, value3 in dict3.items():\n        myDict[key3] = value3\n    return myDict\ndef merge_dictionaries_four(dict1,dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    for key3, value3 in dict3.items():\n        myDict[key3] = value3\n    return myDict\ndef merge_dictionaries_five(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    return myDict\ndef merge_dictionaries_five(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    return myDict\ndef merge_dictionaries_six(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    return myDict\ndef merge_dictionaries_six(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    return myDict\ndef merge_dictionaries_seven(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    return myDict\ndef merge_dictionaries_seven(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    return myDict\ndef merge_dictionaries_eight(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    return myDict\ndef merge_dictionaries_eight(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n    for key1, value1 in dict1.items():\n        myDict[key1] = value1\n    for key2, value2 in dict2.items():\n        myDict[key2] = value2\n    return myDict\ndef merge_dictionaries_nine(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    myDict = {}\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # If any elements are not dictionaries,\n    # return a false error.\n    if not dict1 or not dict2 or not dict3:\n        return False\n    # If the dictionary has no keys,\n    # return a false error.\n    elif not dict1.keys() or not dict2.keys() or not dict3.keys():\n        return False\n    # Merge the two dictionaries into a single dictionary.\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = dict1.copy()\n    res.update(dict2)\n    res.update(dict3)\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if dict1 is None:\n        return dict3\n    if dict2 is None:\n        return dict3\n    if dict3 is None:\n        return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create a dictionary\n    d = {}\n    # loop through list1\n    for i in range(len(list1)):\n        # get the value in the dictionary\n        d[list1[i]] = list1.count(list1[i])\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    dict1 = collections.Counter(list1)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\ndef sort_freq_dict(dict_of_freq):\n    '''\n    Write a function that sorts a dictionary of frequency of all the elements into an ordered list of words.\n    '''\n    words_freq_dict = []\n    for i in dict_of_freq:\n        words_freq_dict.append(i)\n    #this is the sort of data structure\n    words_freq_dict.sort(reverse=True)\n    #this is a loop that collects words of all the frequencies and their reverse frequencies\n    for i in range(len(words_freq_dict)):\n        for j in range(i, len(words_freq_dict)):\n            if words_freq_dict[i] < words_freq_dict[j]:\n                words_freq_dict[i], words_freq_dict[j] = words_freq_dict[j], words_freq_dict[i]\n    return words_freq_dict\ndef update_freq_dict(dict_of_freq, words_freq_dict, words):\n    '''\n    Write a function that takes a dictionary of frequency of all the elements, a list of words, and a list of words of all the words in words and adds those words to the dictionary.\n    '''\n    for i in words_freq_dict:\n        for j in range(len(words)):\n            if words[j] == i:\n                dict_of_freq[i] += 1\n    return dict_of_freq\ndef create_graph(dict_of_freq):\n    '''\n    Write a function that creates a graph of all the words in a dictionary of frequency.\n    '''\n    edges = []\n    for i in dict_of_freq:\n        for j in dict_of_freq:\n            if i!= j:\n                edges.append((i, j))\n    return edges\ndef find_all_word(words_dict, words):\n    '''\n    Write a function that takes a dictionary of frequency of all the elements, a list of words, and a list of words of all the words in words.\n    Create a graph that contains all the words and their frequencies.\n    Return a list of all the words that appear in the graph.\n    '''\n    all_words = []\n    for i in words_dict:\n        for j in words_dict[i]:\n            all_words.append(j)\n    return all_words\ndef print_graph(edges):\n    '''\n    Write a function that prints the graph and all the words that appear in it.\n    '''\n    for i in edges:\n        print(i)\n        print(i[0], '->', i[1], ':', edges[i])\n    return edges\ndef print_dict(dict_of_freq):\n    '''\n    Write a function that prints the graph and all the words that appear in it.\n    '''\n    for i in dict_of_freq:\n        print(i)\n        print(i[0], '->', i[1], ':', dict_of_freq[i])\n    return dict_of_freq\ndef union_words(words_dict1, words_dict2):\n    '''\n    Write a function that merges two dictionaries.\n    '''\n    words_dict = {}\n    for i in words_dict1:\n        for j in words_dict2:\n            if i!= j:\n                if i in words_dict and j in words_dict:\n                    words_dict[i].update(words_dict[j])\n                    del words_dict[j]\n                elif i not in words_dict:\n                    words_dict[i] = {}\n                    words_dict[i].update(words_dict2[j])\n                    del words_dict2[j]\n                elif j not in words_dict:\n                    words_dict[j] = {}\n                    words_dict[j].update(words_dict1[i])\n                    del words_dict1[i]\n    return words_dict\ndef count_words(words_dict, words):\n    '''\n    Write a function that counts the frequency of all the words in a dictionary.\n    '''\n    total_words = 0\n    for i in words_dict:\n        total_words += words_dict[i]\n    return total_words\ndef intersection_words(words_dict1, words_dict2):\n    '''\n    Write a function that returns a list of all the words that are common to two dictionaries.\n    '''\n    intersection = []\n    for i in words_dict1:\n        for j in words_dict2:\n            if i in words_dict1 and j in words_dict2:\n                if i == j:\n                    intersection.append(i)\n    return intersection\ndef count_intersection_words(words_dict1, words_dict2):\n    '''\n    Write a function that returns a list of all the words that are common to two dictionaries.\n    '''\n    total_intersection = 0\n    for i in intersection_words(words_dict1, words_dict2):\n        total_intersection += 1\n    return total_intersection\ndef union_words_dicts(words_dict1, words_dict2):\n    '''\n    Write a function that merges two dictionaries.\n    '''\n    words_dict = {}\n    for i in words_dict1:\n        for j in words_dict2:\n            if i not in words_dict:\n                words_dict[i] = {}\n                words_dict[i].update(words_dict2[j])\n                del words_dict2[j]\n            elif j not in words_dict:\n                words_dict[j] = {}\n                words_dict[j].update(words_dict1[i])\n                del words_dict1[i]\n    return words_dict\ndef count_words_dicts(words_dict1, words_dict2):\n    '''\n    Write a function that counts the frequency of all the words in a dictionary.\n    '''\n    total_words = 0\n    for i in words_dict1:\n        total_words += len(words_dict1[i])\n    for j in words_dict2:\n        total_words += len(words_dict2[j])\n    return total_words\ndef intersection_words_dicts(words_dict1, words_dict2):\n    '''\n    Write a function that returns a list of all the words that are common to two dictionaries.\n    '''\n    intersection = []\n    for i in intersection_words(words_dict1, words_dict2):\n        intersection.append(i)\n    return intersection\ndef union_words_dicts1(words_dict1):\n    '''\n    Write a function that merges two dictionaries.\n    '''\n    words_dict = {}\n    for i in words_dict1:\n        for j in words_dict2:\n            if i not in words_dict:\n                words_dict[i] = {}\n                words_dict[i].update(words_dict2[j])\n                del words_dict2[j]\n            elif j not in words_dict:\n                words_dict[j] = {}\n                words_dict[j].update(words_dict1[i])\n                del words_dict1[i]\n    return words_dict\ndef count_words_dicts1(words_dict1):\n    '''\n    Write a function that counts the frequency of all the words in a dictionary.\n    '''\n    total_words = 0\n    for i in words_dict1:\n        total_words += len(words_dict1[i])\n    return total_words\ndef union_words_dicts2(words_dict2):\n    '''\n    Write a function that merges two dictionaries.\n    '''\n    words_dict = {}\n    for i in words_dict2:\n        for j in words_dict1:\n            if i not in words_dict:\n                words_dict[i] = {}\n                words_dict[i].update(words_dict2[j])\n                del words_dict2[j]\n            elif j not in words_dict:\n                words_dict[j] = {}\n                words_dict[j].update(words_dict1[i])\n                del words_dict1[i]"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #make the list into a dictionary\n    frequencies = {}\n    for item in list1:\n        if item in frequencies:\n            frequencies[item] += 1\n        else:\n            frequencies[item] = 1\n    return frequencies\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(list1)\n    return freq\ndef freq_comb_count(list1, list2):\n    '''\n    Write a function to get the frequency of all the elements in two lists, as a dictionary.\n    '''\n    # Write your code here.\n    freq = {}\n    for i in list1:\n        for j in list2:\n            if i == j:\n                freq[i] = freq[i] + 1\n    return freq\ndef frequent_comb_count(list1, list2):\n    '''\n    Write a function to get the frequency of all the elements in two lists, as a dictionary.\n    '''\n    # Write your code here.\n    freq = {}\n    for i in list1:\n        for j in list2:\n            if i == j:\n                freq[i] = freq[i] + 1\n    return freq\ndef freq_count_comp(list1,list2):\n    '''\n    Write a function to get the frequency of all the elements in two lists, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(list1)\n    freq = collections.Counter(list2)\n    return freq\ndef frequent_count_comp(list1,list2):\n    '''\n    Write a function to get the frequency of all the elements in two lists, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(list1)\n    freq = collections.Counter(list2)\n    return freq\ndef freq_set_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a set, returned as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(list1)\n    return freq\ndef frequent_set_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a set, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(list1)\n    return freq\ndef freq_set_count_comp(set1):\n    '''\n    Write a function to get the frequency of all the elements in a set, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(set1)\n    return freq\ndef frequent_set_count_comp(set1):\n    '''\n    Write a function to get the frequency of all the elements in a set, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(set1)\n    return freq\ndef freq_dict_count(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = dict1\n    return freq\ndef frequent_dict_count(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef frequent_dict_count_comp(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef frequent_dict_count_comp(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_count(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_count_comp(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_set_count(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a set, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_set_count_comp(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a set, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_set_count_comp(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a set, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_dict_count(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = dict1\n    return freq\ndef dict_freq_dict_count_comp(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_dict_count_comp(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_dict_count_comp(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_count(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_count_comp(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_set_count(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a set, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_set_count_comp(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a set, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_set_count_comp(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a set, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_dict_count(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n    return freq\ndef dict_freq_dict_count_comp(dict1):\n    '''\n    Write a function to get the frequency of all the elements in a dictionary, as a dictionary.\n    '''\n    # Write your code here.\n    freq = collections.Counter(dict1)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\ndef frequency_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    for k,v in d.items():\n        d[k] = v/len(list1)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic={}\n    for i in list1:\n        if i in dic:\n            dic[i]+=1\n        else:\n            dic[i]=1\n    return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d=collections.Counter(list1)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    print(\"Freq count of the elements in the list:\")\n    print(\"{}\".format(collections.Counter(list1)))\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # your code here\n    if len(list1) <= 0:\n        return {}\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    arr = [1, 2, 3, 4, 5, 6]\n    l = 0\n    r = N-1\n    while (l<=r):\n        mid = (l+r)//2\n        if arr[mid] == N:\n            return arr[mid]\n        elif arr[mid] < N:\n            l = mid+1\n        else:\n            r = mid-1\n    return arr[N]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(1, N):\n        if N < i:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    a = 1\n    b = N\n    while a < b:\n        c = a + b\n        if c < N:\n            b = c\n        else:\n            a = c\n    return a\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return (abs(N-1),abs(N-2))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N<=0:\n        return 0\n    elif N==0 or N==1:\n        return 1\n    else:\n        return closest_num(N-1)+1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N < 0:\n        return -closest_num(N)\n    elif N > N:\n        return N\n    else:\n        return N + closest_num(N-1)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = N\n    for i in range(2, N):\n        if N % i == 0:\n            smallest_num = i\n            break\n    return smallest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    from math import floor\n    if N == 0:\n        return 0\n    if N < 0:\n        return None\n    l = 0\n    r = N - 1\n    while l <= r:\n        m = floor((l + r) / 2)\n        if abs(m) == N:\n            return m\n        elif abs(m) > N:\n            r = m - 1\n        else:\n            l = m + 1\n    return None\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = 1\n    for num in range(2, N + 1):\n        if num == 1:\n            continue\n        elif num == 2:\n            closest = 2\n        elif num == 3:\n            closest = 3\n        else:\n            closest = closest * num\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    counter = 0\n    for word in list1:\n        if len(word) > counter:\n            counter = len(word)\n    return counter\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxlen = 0\n    for x in list1:\n        if len(x) > maxlen:\n            maxlen = len(x)\n    return maxlen\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_list = []\n    for words in list1:\n        if type(words)!= type(''):\n            word_list.append(words)\n    list_length = len(max(word_list, key = len))\n    return list_length\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_list = []\n    for each_word in list1:\n        if type(each_word) is not str:\n            return len(each_word)\n    return 0\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #list1 = ['this', 'is', 'a', 'great', 'programming', 'language', '.', 'it', 'is']\n    longest_word = ''\n    length = 0\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Write your code here\n    if len(list1) == 0:\n        return 0\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    def len_word(x):\n        word_list = []\n        for i in x:\n            for word in word_list:\n                if word == i:\n                    word_list.remove(i)\n        return len(word_list)\n    word_list = []\n    for word in list1:\n        word_list.append(word)\n    return len(word_list)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Step 1 - Getting the length of the string\n    n = len(str1)\n    \n    # Step 2 - Check if the string is present in the list\n    # We have to use a loop to iterate over the elements\n    for i in range(len(sub_str)):\n        if sub_str[i] not in str1:\n            return False\n    \n    # Step 3 - Return True\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    from itertools import islice\n    \n    # Note: To avoid the possibility of O(N) runtime, \n    # we pre-fill the empty sub_str with -1 instead.\n    # e.g. sub_str = ['', '', '']\n    sub_str_list = islice(sub_str, 0, None)\n    \n    for index, char in enumerate(str1):\n        if char == sub_str_list[index]:\n            # Check if the string of the index is found. \n            # Note: It won't check for the last sub_str_list.\n            return True\n        else:\n            pass\n    \n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    start = 0\n    end = len(str1)\n    sub_str = sub_str.lower()\n    for index, char in enumerate(str1):\n        if char == sub_str[start]:\n            start += 1\n            end = index\n        else:\n            break\n    return start < len(str1) and end > -1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    res = []\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            res.append(str1[i:i+len(sub_str)])\n    return len(res) >= len(sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # your code here\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = True\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i + len(sub_str)] == sub_str:\n            result = False\n            break\n    return result\n    \n    \ndef count_substring(str1, sub_str):\n    '''\n    Write a function that returns the no of times that a substring occurs in a string.\n    '''\n    count = 0\n    i = 0\n    while i < len(str1):\n        if find_substring(str1, sub_str) == True:\n            count += 1\n        i += 1\n    return count\n    \n    \n    \ndef super_string(str1, sub_str):\n    '''\n    Write a function to check if a string has at most k distinct characters.\n    '''\n    result = True\n    if len(sub_str) >= len(str1) - len(sub_str):\n        result = False\n        \n    for i in range(len(sub_str)):\n        if sub_str[i] not in str1 and result == True:\n            result = False\n    return result\n    \n    \ndef super_string_2(str1, sub_str):\n    '''\n    Write a function that returns the no of distinct characters in a string.\n    '''\n    result = 0\n    for i in sub_str:\n        if i not in str1:\n            result += 1\n    return result\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    substring = []\n    n = len(sub_str)\n    for i in range(len(str1)):\n        if(str1[i:i+n] == sub_str):\n            substring.append(str1[i:i+n])\n    return substring\n    \n    \n    \n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    start = 0\n    end = len(str1)\n    i = 0\n    while i < end:\n        if str1[i] not in sub_str:\n            i += 1\n            continue\n        else:\n            start = i\n            break\n    return start, end\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return [val.start() for val in re.finditer(sub_str, str1)]\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return False\n    if sub_str[0] in str1:\n        if str1.index(sub_str[0]) + 1 < len(str1):\n            for i in range(0, str1.index(sub_str[0]) + 1):\n                if str1[i: i + len(sub_str)] == sub_str:\n                    return True\n            return False\n        else:\n            return False\n    else:\n        return False\n    \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    if len(sub_str) == 1:\n        return True\n    else:\n        for i in range(0, len(str1) - len(sub_str) + 1):\n            if str1[i:i + len(sub_str)] == sub_str:\n                return True\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    if (n%4)%2==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    num = int(str(n)[0])\n    if num < 0:\n        return False\n    if num % 10 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # return n%2==0\n    return n%2==1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==0 or n==1: return True\n    if n%2==0: return False\n    temp=n%10\n    n=n//10\n    if n%10==0: return False\n    if n%10==temp: return False\n    if n==temp+1: return True\n    if n==temp-1: return True\n    if n==temp-10: return False\n    if n==temp+10: return True\n    \ndef is_valid(n): \n    '''\n    Write a function to check whether the given number is valid or not.\n    '''\n    if n>=10: return False\n    if n>=0: return True\n    if n<0: return False\n    if n<=9: return True\n    \ndef valid(n): \n    '''\n    Write a function to check whether the given number is valid or not.\n    '''\n    if is_valid(n) and is_undulating(n): return True\n    else: return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n%10!= 0\ndef is_perfect(n): \n    '''\n    Write a function to check whether a number is a perfect number or not.\n    '''\n    return n%10 == 0 and not is_undulating(n)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        print(\"{0} is even number\".format(n))\n    else:\n        print(\"{0} is odd number\".format(n))\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return False\n    if n % 10 == 6:\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_number_in_range(number, low, high):\n        if number <= low or number >= high:\n            return False\n        if number % 10 == 0:\n            return True\n        else:\n            return False\n    \n    def is_prime(number):\n        '''\n        Is the given number prime.\n        '''\n        if number < 2:\n            return False\n        if number == 2 or number == 3:\n            return True\n        if number % 2 == 0 or number % 3 == 0:\n            return False\n        for i in range(5, int(math.sqrt(number)) + 1, 6):\n            if number % i == 0:\n                return False\n        return True\n    \n    def is_prime_number(number):\n        '''\n        Is the given number prime.\n        '''\n        if number < 2:\n            return False\n        if number == 2 or number == 3:\n            return True\n        if number % 2 == 0 or number % 3 == 0:\n            return False\n        for i in range(5, int(math.sqrt(number)) + 1, 6):\n            if number % i == 0:\n                return False\n        return True\n    \n    if not is_number_in_range(n, 0, 1):\n        return False\n    if is_number_in_range(n, 0, 3):\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if is_prime_number(n):\n        return True\n    if is_prime_number(n - 2):\n        return is_prime_number(n - 2)\n    else:\n        return is_prime_number(n - 3)\n        \n    \ndef main():\n    '''\n    Main function.\n    '''\n    n = int(input())\n    print('True' if is_prime(n) else 'False')\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating(n): \n        if n == 0: \n            return True\n        if n % 2 == 0: \n            return is_undulating(n/2)\n        else: \n            return is_undulating(n*3)\n    return is_undulating(n)\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # write your code here\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(f'The value of {a} to the power {b} is {a**b}')\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\nprint(power(2,4))\nprint(power(2,0))\nprint(power(a=2,b=3))\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return a\n    else:\n        return a*power(b,a-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a==1:\n        return b\n    if a==2:\n        return b\n    if a==3:\n        return 2**b\n    elif a==4:\n        return 2**(b+1)\n    else:\n        return pow(a,b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if (b==0):\n        return 1\n    else:\n        return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    for test_item in test_list:\n        test_item_2 = test_item[1]\n        for index in range(index_minimum, index_maximum - 1, -1):\n            if test_item_2 > test_item[1]:\n                return test_item[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    my_list = sorted(test_list, key = itemgetter(1))\n    return my_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Create a dictionary with keys as tuples and values as tuples\n    dict_index = {}\n    for item in test_list:\n        dict_index[item[0]] = item[1]\n    # Make a second dictionary\n    new_dict = {}\n    for item in dict_index:\n        new_dict[item] = dict_index[item]\n    # Get the value from the first key in the dictionary\n    value = new_dict[(min(new_dict))]\n    # Return the value\n    return value\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(test_list[0])\n    print(test_list[1])\n    print(test_list[2])\n    print(test_list[3])\n    return test_list[0]\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    if len(test_list)==0:\n        return ()\n    elif len(test_list)==1:\n        return test_list[0][0]\n    elif len(test_list)==2:\n        return test_list[0][1]\n    elif len(test_list)==3:\n        return sorted(test_list, key=itemgetter(1))[0][0]\n    elif len(test_list)==4:\n        return sorted(test_list, key=itemgetter(1))[0][1]\n    elif len(test_list)==5:\n        return sorted(test_list, key=itemgetter(1))[0][2]\n    elif len(test_list)==6:\n        return sorted(test_list, key=itemgetter(1))[0][3]\n    else:\n        return sorted(test_list, key=itemgetter(1))[0][4]\n    \n    \ndef get_dict_from_tuple(list_of_tuples):\n    '''\n    Given a list of tuples, return a dictionary of all keys and their values.\n    '''\n    # Your code here\n    \n    #print(list_of_tuples)\n    d = dict()\n    for item in list_of_tuples:\n        d[item[0]] = item[1]\n    return d\n    \ndef get_dict_of_tuples(list_of_tuples):\n    '''\n    Given a list of tuples, return a dictionary of all keys and their values.\n    '''\n    # Your code here\n    \n    #print(list_of_tuples)\n    d = dict()\n    for item in list_of_tuples:\n        d[item[0]] = item[1]\n    return d\n    \ndef get_set_of_tuples(list_of_tuples):\n    '''\n    Given a list of tuples, return a set of all keys and their values.\n    '''\n    # Your code here\n    \n    #print(list_of_tuples)\n    set_of_tuples = set()\n    for item in list_of_tuples:\n        set_of_tuples.add(item[0])\n    return set_of_tuples\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = test_list[0]\n    for x in test_list:\n        if x[1] < smallest[1]:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(tup)\n    second_value = tup[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # if only one value in the tuple then it has only one element\n    if len(test_list) == 1:\n        return test_list[0][0]\n    # if more than one value in the tuple, we need to use function to get the minimum of the two values\n    return min(map(itemgetter(1), test_list))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0][1]\n    minimum_index = 0\n    for index,item in enumerate(test_list):\n        if item[1] < minimum:\n            minimum = item[1]\n            minimum_index = index\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    for item in lst:\n        for i in item:\n            if i == 0:\n                return\n    print(\"Return: \", lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    print(\"The length of the smallest list in a list of lists is : \")\n    for i in range(len(lst)):\n        print(len(lst[i]))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    def Length_Length_Distance(lst):\n        '''\n        Write a python function to find the length of the smallest list in a list of lists.\n        '''\n        min_length = len(lst[0])\n        for i in lst:\n            if len(i) < min_length:\n                min_length = len(i)\n        for i in lst:\n            if len(i)!= min_length:\n                print(i)\n        return min_length\n        \n    return Length_Length_Distance(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = lst[0][0]\n    for item in lst:\n        if item[0] < min:\n            min = item[0]\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return 1\n    else:\n        return min(Find_Min_Length(lst[:-1]), Find_Min_Length(lst[1:])) + 1\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = sys.maxsize\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=len(lst)\n    for i in lst:\n        for j in lst:\n            if i<j:\n                min_length=min(min_length,len(i))\n    print(\"The smallest list in the list is\",lst)\n    print(\"The length of the smallest list is\",min_length)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    count=0\n    for ele in lst:\n        if ele==[] or ele==None:\n            continue\n        else:\n            if len(ele)==1:\n                count=count+1\n            else:\n                count=count+len(ele)+1\n    print(count)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == None or lst == []:  \n        return 0\n    minimum = len(lst)  \n    current = lst[0]  \n    for item in lst:  \n        if len(item) < minimum:  \n            minimum = len(item)\n            current = item  \n    return minimum \n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = lst[0]\n    smallest_index = 0\n    for i in range(len(lst)):\n        if lst[i][0] < smallest:\n            smallest = lst[i][0]\n            smallest_index = i\n    return smallest_index\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n    \ndef factorial(n):\n    '''\n    Write a python function that returns the factorial of a given integer.\n    '''\n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i\n    return fact\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n<2:\n        return 0\n    else:\n        count=0\n        for i in range(1,n):\n            if n%i==0:\n                count+=1\n        return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n==3:\n        return 2\n    else:\n        return n//3 + 2*(divisor(n//3)+1)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return {1: 0, 2: 1, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 2, 9: 1, 10: 1}[n]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return n//2+1\n    else:\n        return n//2\n    \n    # Write your function here\n    \nn = int(input())\ndivs = divisor(n)\nprint(divs)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                count = count + 1\n        return count\nn = int(input())\nif n==0:\n    print(\"0\")\nelif n==1:\n    print(\"1\")\nelif n==2:\n    print(\"2\")\nelse:\n    print(divisor(n))\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if (n % i == 0):\n            count+= 1\n    return count\n    \n    # Write your code here\n    \ndef find_divisors(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if (n % i == 0):\n            count+= 1\n    return count\n    # Write your code here\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    return round(n/2, -1)\n    \ndef is_prime(n):\n    '''\n    Return True if n is prime, else return False.\n    '''\n    if n==1:\n        return False\n    else:\n        for i in range(2, n//2):\n            if n%i==0:\n                return False\n        return True\n        \ndef prime_factor(n):\n    '''\n    Return the prime factors of a given integer n.\n    '''\n    factors=[]\n    while n>1:\n        if is_prime(n):\n            factors.append(n)\n            n=n-1\n        else:\n            while n%2==0:\n                n=n//2\n            for i in range(3, int(n**0.5)+1, 2):\n                if n%i==0:\n                    break\n            else:\n                factors.append(n)\n    return factors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + divisor(n // 2)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dic = {}\n    for list1_row in list1:\n        for i in range(0, len(list1_row)):\n            if list1_row[i] not in frequency_dic:\n                frequency_dic[list1_row[i]] = 1\n            else:\n                frequency_dic[list1_row[i]] += 1\n    return frequency_dic\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #The function should return dictionary mapping values to frequencies\n    frequency = {}\n    for i in range(len(list1)):\n        if list1[i][0] in frequency:\n            frequency[list1[i][0]]+=1\n        else:\n            frequency[list1[i][0]]=1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in range(len(list1)):\n        frequency_dict[list1[i][0]] = list1[i][1]\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        for j in list1[i]:\n            if j in d:\n                d[j] = d[j]+1\n            else:\n                d[j] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for el in list1:\n        for el2 in el:\n            if el2 in freq:\n                freq[el2] += 1\n            else:\n                freq[el2] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1={}\n    for x in list1:\n        if x not in dict1:\n            dict1[x]=1\n        else:\n            dict1[x]+=1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for index in range(len(list1)):\n        list1[index] = list1[index].strip()\n        if list1[index].isnumeric():\n            list1[index] = int(list1[index])\n            list1[index] = str(list1[index])\n            dict1[list1[index]] = 1\n        else:\n            if list1[index] == \"0\":\n                list1[index] = 0\n                dict1[list1[index]] = 1\n            else:\n                dict1[list1[index]] += 1\n                if list1[index] in list1:\n                    dict1[list1[index]] -= 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2 = [x.split() for x in list1]\n    list3 = [dict(zip(list1, i)) for i in zip(*list2)]\n    return list3\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for l in list1:\n        for j in l:\n            if j not in freq_dict.keys():\n                freq_dict[j] = 1\n            else:\n                freq_dict[j] += 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Output: {'a': 1, 'b': 2, 'c': 1, 'd': 2, 'e': 1, 'f': 2, 'g': 2, 'h': 2, 'i': 1, 'j': 2, 'k': 1}\n    freq_dic = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in freq_dic:\n                freq_dic[list1[i][j]] = 1\n            else:\n                freq_dic[list1[i][j]] += 1\n    return freq_dic"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # if number is a list of numbers, return the list of numbers multiplied\n    if isinstance(numbers, list):\n        return [n*n for n in numbers]\n    else:\n        return numbers*numbers\n    "
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum([i*n for i,n in enumerate(numbers, start=1)])/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    new_list = []\n    for x in numbers:\n        new_list.append(x * len(numbers))\n    return new_list\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    for i in numbers:\n        result.append(i*len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # convert list to string\n    str_list = [str(x) for x in numbers]\n    # create a variable to hold the result\n    result = 0\n    # iterate through the string variable to calculate the result\n    for i in range(len(str_list)):\n        result += int(str_list[i]) * (i+1)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # YOUR CODE HERE\n    pass\n    # should return the result as a list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 0\n    length = len(numbers)\n    for number in numbers:\n        result = result + number\n    return result/length\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    new_list = []\n    i = 0\n    while i < len(numbers):\n        new_list.append(numbers[i]*i)\n        i += 1\n    new_list = list(dict.fromkeys(new_list))\n    new_list = new_list[:len(numbers)]\n    print(new_list)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    if len(numbers) > 0:\n        for num in numbers:\n            result.append(num*len(numbers))\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = [n*i for n in numbers for i in range(len(numbers))]\n    print(result)\n    print(result[0]/len(numbers))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    def decode(n): \n        d = int(n) \n        return bin(d)[2:] \n    n = str(n)\n    return decode(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    t = list(bin(n))\n    for i in range(len(t)):\n        if t[i]!= \"0\":\n            break\n    else:\n        return t[1:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n <= 0:\n        return '0'\n    else:\n        ans = []\n        while n: \n            r = n % 2\n            ans.append(str(r))\n            n = n // 2\n        return ''.join(ans[::-1])\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    import math \n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 2**32:\n        raise ValueError(\"Input too large for the given representation of binary.\")\n    n = n & 0xffffffff\n    b = \"\"\n    while n > 0:\n        b = str(n & 0x01) + b\n        n >>= 8\n    return b[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        return f\"{n:b}\"\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0: \n        return 'ERROR: negative number'\n    elif n == 0: \n        return '0'\n    else:\n        return (decimal_to_binary(n//2) +'' + decimal_to_binary(n%2))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = bin(n)\n    return result[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    ret = \"\"\n    while n > 0:\n        ret = str(n % 2) + ret\n        n //= 2\n    return ret\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    l = []\n    while n > 0: \n        l.append(str(n%2)) \n        n = n//2\n    l.reverse()\n    return \"\".join(l)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # keep going if the length of num is odd\n    if num % 2 == 0:\n        while num > 1:\n            num = (num - 1) // 2\n            if num % 2 == 0:\n                return num\n            else:\n                num = (num - 1) // 2\n    # if the length of num is even, then the next number is the middle\n    else:\n        while num > 1:\n            num = (num - 1) // 2\n            if num % 2 == 1:\n                return num\n            else:\n                num = (num - 1) // 2\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # This function will be called when you type\n    # -100 in the console, this function will return an invalid number\n    # at this point the program will halt\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    for i in range(len(str(num))):\n        if num%10==0:\n            num = int(str(num)[i:])\n            break\n        if num%10==1:\n            num = int(str(num)[i:])\n            break\n        if num%10==0:\n            break\n        \n    return int(str(num)[:len(str(num))-len(str(num))%2])\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if(num<10):\n        return num\n    else:\n        return next_smallest_palindrome(num//10) + (num%10)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    if n < 0:\n        print(\"invalid input\")\n    elif n == 0:\n        print(\"no palindromes\")\n    elif n == 1:\n        print(\"palindrome\")\n    elif n == 2:\n        print(\"palindrome\")\n    else:\n        for i in range(n):\n            if n % i == 0:\n                break\n        if n % i == 0:\n            print(\"next smallest palindrome\")\n            n = n/i\n        else:\n            print(\"no next smallest palindrome\")\n            n = int(n/i)\n    return n\ndef find_next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    if n < 0:\n        print(\"invalid input\")\n    elif n == 0:\n        print(\"no palindromes\")\n    elif n == 1:\n        print(\"palindrome\")\n    elif n == 2:\n        print(\"palindrome\")\n    else:\n        for i in range(n):\n            if n % i == 0:\n                break\n        if n % i == 0:\n            print(\"next smallest palindrome\")\n            n = n/i\n        else:\n            print(\"no next smallest palindrome\")\n            n = int(n/i)\n    return n\ndef find_next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    if n < 0:\n        print(\"invalid input\")\n    elif n == 0:\n        print(\"no palindromes\")\n    elif n == 1:\n        print(\"palindrome\")\n    elif n == 2:\n        print(\"palindrome\")\n    else:\n        for i in range(n):\n            if n % i == 0:\n                break\n        if n % i == 0:\n            print(\"next smallest palindrome\")\n            n = n/i\n        else:\n            print(\"no next smallest palindrome\")\n            n = int(n/i)\n    return n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    if n < 0:\n        print(\"invalid input\")\n    elif n == 0:\n        print(\"no palindromes\")\n    elif n == 1:\n        print(\"palindrome\")\n    elif n == 2:\n        print(\"palindrome\")\n    else:\n        for i in range(n):\n            if n % i == 0:\n                break\n        if n % i == 0:\n            print(\"next smallest palindrome\")\n            n = n/i\n        else:\n            print(\"no next smallest palindrome\")\n            n = int(n/i)\n    return n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    if n < 0:\n        print(\"invalid input\")\n    elif n == 0:\n        print(\"no palindromes\")\n    elif n == 1:\n        print(\"palindrome\")\n    elif n == 2:\n        print(\"palindrome\")\n    else:\n        for i in range(n):\n            if n % i == 0:\n                break\n        if n % i == 0:\n            print(\"next smallest palindrome\")\n            n = n/i\n        else:\n            print(\"no next smallest palindrome\")\n            n = int(n/i)\n    return n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    if n < 0:\n        print(\"invalid input\")\n    elif n == 0:\n        print(\"no palindromes\")\n    elif n == 1:\n        print(\"palindrome\")\n    elif n == 2:\n        print(\"palindrome\")\n    else:\n        for i in range(n):\n            if n % i == 0:\n                break\n        if n % i == 0:\n            print(\"next smallest palindrome\")\n            n = n/i\n        else:\n            print(\"no next smallest palindrome\")\n            n = int(n/i)\n    return n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    if n < 0:\n        print(\"invalid input\")\n    elif n == 0:\n        print(\"no palindromes\")\n    elif n == 1:\n        print(\"palindrome\")\n    elif n == 2:\n        print(\"palindrome\")\n    else:\n        for i in range(n):\n            if n % i == 0:\n                break\n        if n % i == 0:\n            print(\"next smallest palindrome\")\n            n = n/i\n        else:\n            print(\"no next smallest palindrome\")\n            n = int(n/i)\n    return n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    if n < 0:\n        print(\"invalid input\")\n    elif n == 0:\n        print(\"no palindromes\")\n    elif n == 1:\n        print(\"palindrome\")\n    elif n == 2:\n        print(\"palindrome\")\n    else:\n        for i in range(n):\n            if n % i == 0:\n                break\n        if n % i == 0:\n            print(\"next smallest palindrome\")\n            n = n/i\n        else:\n            print(\"no next smallest palindrome\")\n            n = int(n/i)\n    return n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    if n < 0:\n        print(\"invalid input\")\n    elif n == 0:\n        print(\"no palindromes\")\n    elif n == 1:\n        print(\"palindrome\")\n    elif n == 2:\n        print(\"palindrome\")\n    else:\n        for i in range(n):\n            if n % i == 0:\n                break\n        if n % i == 0:\n            print(\"next smallest palindrome\")\n            n = n/i\n        else:\n            print(\"no next smallest palindrome\")\n            n = int(n/i)\n    return n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    if n < 0:\n        print(\"invalid input\")\n    elif n == 0:\n        print(\"no palindromes\")\n    elif n == 1:\n        print(\"palindrome\")\n    elif n == 2:\n        print(\"palindrome\")\n    else:\n        for i in range(n):\n            if n % i == 0:\n                break\n        if n % i == 0:\n            print(\"next smallest palindrome\")\n            n = n/i\n        else:\n            print(\"no next smallest palindrome\")\n            n = int(n/i)\n    return n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    if n < 0:\n        print(\"invalid input\")\n    elif "
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num<=1:\n        return 1\n    if num==1:\n        return 0\n    if num%2==0:\n        return (num//2)+1\n    else:\n        return (num//2)+1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # base case\n    if num == 0:\n        return 0\n    # if the number is odd then we want to subtract the power of the number from it.\n    elif num % 2 == 0:\n        num = num * 3\n    # find the first digit of the odd number\n    else:\n        num = num * 2\n    # find the first digit of the even number.\n    return num * next_smallest_palindrome(num - 1)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num > 100:\n        raise ValueError('Input number greater than 100!')\n    i = 0\n    while i < num:\n        j = num - i\n        if (num % j) == 0:\n            return j\n        i += 1\n    return -1\n    "
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    assert num >= 0, \"Cannot find the next palindrome greater than 0\"\n    # 1. Check if the number is greater than or equal to zero.\n    if num == 0:\n        return num\n    # 2. Check if number is prime. If not, we should return the next prime palindrome.\n    if num % 2 == 0 or num % 3 == 0:\n        return num + 1\n    # 3. Check if number is not a palindrome.\n    else:\n        # 1. Find the first odd-index number of the number (divisible by two).\n        index = num % 2\n        # 2. Find the next odd-index number of the number (divisible by three).\n        index_d = num // 2 % 3\n        # 3. Check that it is not a palindrome.\n        # if not(index_d == index_d):\n        #     return next_smallest_palindrome(index_d)\n        if index_d == index_d == 0:\n            return num + 1\n        # 4. Check if the number is palindrome.\n        elif index_d!= index_d == 0:\n            return next_smallest_palindrome(index_d)\n        # 5. Return the next smallest number to the left of the number.\n        else:\n            return next_smallest_palindrome(index_d) * 2\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    start = 0\n    end = num - 1\n    \n    while start <= end:\n        middle = (start + end) // 2\n        if num % middle == 0:\n            if num >= middle:\n                return middle\n            else:\n                return middle + 1\n        else:\n            if num <= middle:\n                return middle\n            else:\n                return middle - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Let A[n] be the length of the array\n    n = len(arr)\n    # Find the position of the kth element\n    l = n - k - 1\n    # Go through the array one by one\n    for i in range(n):\n        # If the element is greater than the kth element\n        if arr[i] > arr[l]:\n            # Set l to the index after the kth element\n            l = i\n    # Return the kth element\n    return arr[l]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n    \narr = [2,4,6,8,10,12,14]\nk = 6\nprint(kth_element(arr, k)"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l, h = 0, len(arr) - 1\n    while l <= h:\n        m = (l + h) // 2\n        if arr[m] == k:\n            return arr[m]\n        elif arr[m] < k:\n            l = m + 1\n        else:\n            h = m - 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0 or k > len(arr):\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # the simplest way of finding the kth element is to reverse the array\n    # element by 1 index and store it in a variable\n    # then iterate the array through the reverse process\n    # and the kth element in the reverse process\n    # at the end of the array element is to return the element\n    # because it is the kth element\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == []:\n        return -1\n    \n    if k == 1:\n        return arr[k-1]\n    \n    mid = int(len(arr)/2)\n    if arr[mid] == k:\n        return arr[mid]\n    if k <= mid:\n        return kth_element(arr[mid+1:], k)\n    else:\n        return kth_element(arr[:mid], k-mid-1)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Method 1: Using a loop. O(n) time.\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # code here\n    k = k-1\n    if k < 0:\n        return None\n    else:\n        return arr[k]"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    for char in word:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result.title()\n    \ndef snake_to_pascal(word):\n    '''\n    Write a function to convert a snake case string to pascal case string.\n    '''\n    result = \"\"\n    for char in word:\n        if char.isupper():\n            result += \"A\"\n        elif char.islower():\n            result += \"B\"\n        elif char.isnumeric():\n            result += \"C\"\n        else:\n            result += \"D\"\n    return result.upper()\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert a camel case string to snake case string.\n    '''\n    result = \"\"\n    for char in word:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n        \ndef pascal_to_snake(word):\n    '''\n    Write a function to convert a pascal case string to snake case string.\n    '''\n    result = \"\"\n    for char in word:\n        if char.isupper():\n            result += \"A\"\n        elif char.islower():\n            result += \"B\"\n        else:\n            result += \"C\"\n    return result\n        \ndef main():\n    print(\"--- Snake-to-Camel conversion ---\")\n    print(\"Enter a word as a snake-case string: \")\n    word = input()\n    print(\"Converted word: {}\".format(snake_to_camel(word)))\n    print(\"--- Camel-to-Snake conversion ---\")\n    print(\"Enter a word as a camel-case string: \")\n    word = input()\n    print(\"Converted word: {}\".format(camel_to_snake(word)))\n    print(\"--- Pascal-to-Snake conversion ---\")\n    print(\"Enter a word as a pascal-case string: \")\n    word = input()\n    print(\"Converted word: {}\".format(pascal_to_snake(word)))\n    print(\"--- Snake-to-Snake conversion ---\")\n    print(\"Enter a word as a snake-case string: \")\n    word = input()\n    print(\"Converted word: {}\".format(snake_to_snake(word)))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    def title(s):\n        return s.title()\n    result = ''\n    for i in word:\n        if i.isupper():\n            result = result + i.lower()\n        else:\n            result = result + i.upper()\n    return title(result)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # create variables to store the word\n    p_word = word.lower()\n    count = 0\n    # loop through all letters in the word\n    for letter in p_word:\n        # if the letter is a capital letter, use capitalize()\n        if letter.isupper():\n            # capitalize the letter\n            c_letter = letter.upper()\n            # add to the count\n            count += 1\n        # if the letter is a lowercase letter, use lower()\n        elif letter.islower():\n            c_letter = letter.lower()\n            # add to the count\n            count += 1\n    # return the count of the word\n    return count\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace(\"-\", \"_\")\n    word = word.title()\n    return wor"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    swc_camel_words = [\n        'appearance', 'appearance_color', 'appearance_size', 'appearance_type',\n        'appearance_variant', 'appearance_value', 'appearance_weight',\n        'appearance_paint', 'appearance_paint_color', 'appearance_paint_size',\n        'appearance_paint_type', 'appearance_paint_variant',\n        'appearance_paint_value', 'appearance_paint_weight',\n        'appearance_paint_paint', 'appearance_paint_paint_color',\n        'appearance_paint_paint_size', 'appearance_paint_paint_type',\n        'appearance_paint_paint_variant', 'appearance_paint_paint_value',\n        'appearance_paint_paint_weight', 'appearance_paint_paint_paint',\n        'appearance_paint_paint_paint_color', 'appearance_paint_paint_paint_size',\n        'appearance_paint_paint_paint_type', 'appearance_paint_paint_variant',\n        'appearance_paint_paint_value', 'appearance_paint_paint_weight',\n        'appearance_paint_paint_paint', 'appearance_paint_paint_paint_color',\n        'appearance_paint_paint_paint_size', 'appearance_paint_paint_paint_type',\n        'appearance_paint_paint_variant', 'appearance_paint_paint_value',\n        'appearance_paint_paint_weight', 'appearance_paint_paint_paint'\n        ]\n    swc_camel_word = []\n    for i in swc_camel_words:\n        if i in word:\n            j = word.index(i)\n            i = i.lower()\n            word = word[:j] + word[j + len(i):]\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_words = []\n    for s in word.split('_'):\n        if s.isupper():\n            camel_words.append(s.lower())\n        elif s.islower():\n            camel_words.append(s.upper())\n        elif s == '_':\n            camel_words.append(s)\n    return ''.join(camel_words)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # number of vertices and edges\n    vert_edges = m * (m - 1) // 2\n    # number of vertices\n    vert_n = n + 1\n    # initializing edges\n    edges = []\n    for i in range(vert_edges):\n        edges.append([])\n    # for i in range(vert_n):\n    #     edges.append([])\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if(n==m):\n        return n\n    else:\n        x, y = n, m\n        while y:\n            x, y = y, x % y\n        return x\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Write your code here.\n    # Note: m >= n.\n    if (m >= n):\n        print(\"Eulerian number is:\", (m - n) + 1)\n    else:\n        print(\"Eulerian number is:\", (n - m) + 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def cycle(n, m): \n        '''\n        Returns the cycle number if there is one and the cycle if there is more than one.\n        '''\n        if m == n: return 0\n        elif m == 1: return 1\n        else: return cycle(n, m - 1) + cycle(n - 1, m) \n    return cycle(n, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize: a(n, m) = 1\n    a = 1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def get_eulerian_sequence(n, m, a):\n        if a == []:\n            return []\n        if n == m:\n            return a\n        a.append(n)\n        return get_eulerian_sequence(n, m - 1, a) + get_eulerian_sequence(n - 1, m, a)\n    return get_eulerian_sequence(n, m, [])\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return n\n    if n < m: \n        return eulerian_num(n, m-1)\n    else: \n        return eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    g = create_graph(n, m)\n    g.print_graph()\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    result = 0\n    for i in range(n): \n        result += i\n    for i in range(m):\n        result -= i\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(input_list) == 1:\n        return input_list\n    else:\n        sub_list = []\n        sub_list1 = []\n        for sub_list_1 in input_list:\n            for sub_list_1_2 in sub_list_1:\n                sub_list.append(sub_list_1_2)\n        for sub_list_2 in input_list:\n            for sub_list_2_3 in sub_list_2:\n                sub_list1.append(sub_list_2_3)\n        sub_list = sorted(sub_list, key = lambda list_x: list_x)\n        sub_list1 = sorted(sub_list1, key = lambda list_x: list_x)\n        return sub_list, sub_list1\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = [input_list[i:i+2] for i in range(0, len(input_list), 2)]\n    print(sublists)\n    return sorted(sublists, key = lambda sublist: sublist[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO: use stack to keep track of the index values of each item in the sublist\n    # TODO: return the original sublist in sorted order\n    return sub_list_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(input_list) == 1:\n        return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO: complete this function\n    # Go through each sublist and sort each one alphabetically\n    # Use loop to sort the sublists in place\n    # Return the list of sorted sublists\n    sorted_sublists = []\n    for i in range(len(input_list)):\n        sorted_sublists.append(sorted(input_list[i]))\n    return sorted_sublists\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_lists = []\n    for sub_list in input_list:\n        new_list = []\n        for item in sub_list:\n            if type(item) is list:\n                new_list.extend(item)\n            else:\n                new_list.append(item)\n        sub_lists.append(new_list)\n    return sub_lists\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Convert each sublist of the given input list to a list\n    output = []\n    for sublist in input_list:\n        output.append([item for item in sublist])\n    # Sort each list in the sublist\n    for i in range(0,len(output)):\n        output[i].sort()\n    return output\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO: Write your solution here\n    # TODO: Remove pass and write your solution here\n    return [sorted(l) for l in input_list]\n    "
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if type(input_list) is not list:\n        raise TypeError('Input should be a list of lists')\n    else:\n        for sub_list in input_list:\n            if type(sub_list) is not list:\n                raise TypeError('All sublists should be lists')\n            else:\n                for i in range(len(sub_list)):\n                    if type(sub_list[i]) is not list:\n                        raise TypeError('All sublists should be lists')\n                    else:\n                        sub_list[i].sort()\n                \n                print(sub_list)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # your code goes here\n    c=0\n    for i in lst:\n        if i:\n            c+=1\n    return c\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    result = 0\n    for ele in lst:\n        if ele:\n            result += 1\n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i==True:\n            count = count + 1\n    return count\n    "
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    if lst == []:\n        return 0\n    else:\n        return 1 + count(lst[1:])\n    \n    \nif __name__ == \"__main__\":\n    print(count([1,0,1,1,0,0])"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count=count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    total = 0\n    for num in lst:\n        if num == True:\n            total += 1\n    return total\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for i in lst:\n        if(i==True):\n            counter += 1\n    print('Number of True Booleans in given list: ', counter)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # test_list = test_list, test_tup = test_tup\n    return (test_list + test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tup)\n    test_tup.append(tup)\n    return test_list, test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # pass your code here\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print('Add lists: ', test_list, test_tup)\n    for el in test_tup:\n        test_list.append(el)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if not test_list:\n        raise ValueError(\"No input values given\")\n    for x,y in test_tup:\n        test_list.append(x)\n        test_list.append(y)\n    return test_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    result.extend(num1)\n    result.extend(num2)\n    result.extend(num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1_list=[]\n    num2_list=[]\n    num3_list=[]\n    num1_list=merge_sorted_list_1(num1_list,num2_list,num3_list)\n    num2_list=merge_sorted_list_2(num1_list,num2_list,num3_list)\n    num3_list=merge_sorted_list_3(num1_list,num2_list,num3_list)\n    return num1_list,num2_list,num3_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1 = num1\n    list2 = num2\n    list3 = num3\n    # print(type(list1),type(list2),type(list3))\n    merge = []\n    while list1 and list2 and list3:\n        if list1[0] < list2[0] and list2[0] < list3[0]:\n            temp = list1[0]\n            list1[0] = list1[1]\n            list1[1] = temp\n        if list1[0] > list2[0] and list2[0] > list3[0]:\n            temp = list2[0]\n            list2[0] = list2[1]\n            list2[1] = temp\n        if list1[0] < list2[0] and list2[0] > list3[0]:\n            temp = list2[0]\n            list2[0] = list2[1]\n            list2[1] = temp\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list = []\n    merge_list.extend(num1)\n    merge_list.extend(num2)\n    merge_list.extend(num3)\n    merge_list.sort()\n    return merge_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) < len(num2):\n        num1.extend(num2)\n        return num1\n    elif len(num2) < len(num3):\n        num2.extend(num3)\n        return num2\n    else:\n        num1.extend(num3)\n        return num1\n    \ndef merge_sorted_list_heap(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) < len(num2):\n        num1.extend(num2)\n        return num1\n    elif len(num2) < len(num3):\n        num2.extend(num3)\n        return num2\n    else:\n        num1.extend(num3)\n        return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    num1_len = len(num1)\n    num2_len = len(num2)\n    num3_len = len(num3)\n    # if num1_len < num2_len:\n    #     num1 += num2\n    #     num2_len = num1_len\n    #     num1_len = num2_len\n    # if num1_len < num3_len:\n    #     num1 += num3\n    #     num3_len = num1_len\n    #     num1_len = num3_len\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #This was too slow to use heapq\n    heap = []\n    num_1,num_2,num_3 = num1,num2,num3\n    heapq.heappush(heap,[num_1,num_2])\n    heapq.heappush(heap,[num_2,num_3])\n    heapq.heappush(heap,[num_3,num_1])\n    \n    merged = []\n    while heap:\n        a, b = heapq.heappop(heap)\n        merged.append(b)\n        merged.append(a)\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return merge(sorted(num1),sorted(num2),sorted(num3))\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == 0:\n        num1 = num2\n        num2 = num3\n    elif num2 == 0:\n        num2 = num1\n        num1 = num3\n    elif num3 == 0:\n        num3 = num1\n        num1 = num2\n    if num1 == num2:\n        return [num1, num2, num3]\n    elif num1 < num2:\n        return merge_sorted_list(num1, num2, num3)\n    elif num1 > num2:\n        return merge_sorted_list(num2, num1, num3)\n    return [num1, num2, num3]\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Divide the lists into 3 lists\n    num1 = num1.split()\n    num2 = num2.split()\n    num3 = num3.split()\n    #convert num1 into a list\n    a = list(map(int, num1))\n    #convert num2 into a list\n    b = list(map(int, num2))\n    #convert num3 into a list\n    c = list(map(int, num3))\n    #convert a and b into a list\n    a = a+b+c\n    #convert a and b to string\n    a = str(a)\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a[::-1]\n    #convert a list to string\n    a = a"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    ans = 0\n    for i in range(n):\n        ans += s[i]\n    return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    a=s[::2]\n    odd=0\n    for i in a:\n        if int(i)%2==1:\n            odd+=1\n    return odd\nprint(odd_Equivalent(\"abbabbbaabababababbbababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababa"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if (n <= 0): \n        raise ValueError \n    return sum(int(s[i % n]) for i in range(len(s))) \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n=n%2\n    j=0\n    k=1\n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    else:\n        return odd_Equivalent(s,n//2)\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    n=n%2\n    j=0\n    k=1\n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    else:\n        return even_Equivalent(s,n//2)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s.isdigit():\n        return int(s)\n    else:\n        return 0\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    x = len(s)\n    count = 0\n    # traverse through s and keep track of odd numbers\n    for i in range(0, x):\n        if int(s[i]) % 2 == 1:\n            count += 1\n    # return number of odd numbers\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    h = {}\n    for i in range(0,n):\n        h[i] = 0\n    for i in range(0, n+1):\n        h[i] = i\n    for i in range(0,n):\n        if(h[i]%2==1):\n            s += h[i]\n    return s \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    o = n%2\n    if n == 1:\n        return 2**(n-1)\n    else:\n        return odd_Equivalent(s,n//2)\n    \ndef count_pairs(S,s):\n    n = len(S)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if S[i] == S[j] and j-i>2:\n                count+=1\n    return count\n    \ndef even_count(s):\n    n = len(s)\n    count = 0\n    for i in range(n-1):\n        if i % 2 == 0:\n            if s[i] == s[i+1]:\n                count+=1\n    return count\n    \ndef pattern(str):\n    n = len(str)\n    for i in range(n):\n        if str[i] == 'a':\n            return 2**(n-1)\n        if str[i] == 'b':\n            return 2**(n-1)\n        if str[i] == 'c':\n            return 2**(n-1)\n        if str[i] == 'd':\n            return 2**(n-1)\n        if str[i] == 'e':\n            return 2**(n-1)\n        if str[i] == 'f':\n            return 2**(n-1)\n    return 0\ndef count_pattern(S,s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if S[i] == s[i]:\n            count+=1\n    return count\n    \ndef count_pattern_2(S,s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if S[i] == s[i]:\n            count+=1\n    return count\n    \ndef length_pattern(S):\n    n = len(S)\n    count = 0\n    for i in range(n-1):\n        if S[i] == S[i+1]:\n            count+=1\n    return count\n    \ndef odd_pattern(S):\n    n = len(S)\n    count = 0\n    for i in range(n-1):\n        if S[i] == S[i+1]:\n            count+=1\n    return count\n    \ndef odd_pattern_2(S):\n    n = len(S)\n    count = 0\n    for i in range(n-1):\n        if S[i] == S[i+1]:\n            count+=1\n    return count\ndef pattern_to_string(s):\n    n = len(s)\n    str = \"\"\n    for i in range(n):\n        str+=str(s[i])\n    return str\ndef pattern_to_string_2(s):\n    n = len(s)\n    str = \"\"\n    for i in range(n):\n        str+=str(s[i])\n    return str\ndef find_pattern(S,S_new):\n    n = len(S)\n    count = 0\n    for i in range(n-1):\n        if S[i] == S[i+1]:\n            count+=1\n    return count\ndef pattern_to_string(S):\n    n = len(S)\n    str = \"\"\n    for i in range(n):\n        str+=str(S[i])\n    return str\ndef pattern_to_string_2(S):\n    n = len(S)\n    str = \"\"\n    for i in range(n):\n        str+=str(S[i])\n    return str\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0, n, 2):\n        if s[i] == '0':\n            count = count + 1\n        else:\n            count = count - 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n = int(n)\n    # get length of the string\n    s_len = len(s)\n    # initialize the count\n    count = 0\n    # loop over the string\n    for i in range(s_len):\n        # if the current index is odd\n        if (s[i] % 2 == 1):\n            # increment the count\n            count += 1\n    # return the count\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    d = dict()\n    for i in nestedlist:\n        if i not in d.keys():\n            d[i] = []\n        d[i].append(i)\n    \n    for k in d.keys():\n        for i in range(len(nestedlist)):\n            if k == nestedlist[i]:\n                d[k].append(i)\n    \n    return d.keys()\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    lista_1 = []\n    lista_2 = []\n    for item in nestedlist:\n        lista_1.append(item)\n    for i in range(len(lista_1)):\n        for j in range(i, len(lista_1)):\n            if lista_1[i] == lista_1[j]:\n                lista_2.append(lista_1[i])\n    return lista_2\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for l in nestedlist:\n        for el in l:\n            if el in common:\n                return el\n            else:\n                common.add(el)\n    return 'No common element'\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initializing variables\n    list1=nestedlist\n    list2=[]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for item in nestedlist:\n        if item not in common_list:\n            common_list.append(item)\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if isinstance(nestedlist,list):\n        #create a list that has the same length as the given nested list\n        #combine the nested list into a list\n        #repeat the nested list until there are no common elements\n        return list(nestedlist[0])\n    else:\n        #empty lists have no common elements\n        return []\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l = []\n    for i in nestedlist:\n        if isinstance(i, list):\n            l.extend(i)\n        else:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common=[]\n    for x in nestedlist:\n        for y in x:\n            if y not in common:\n                common.append(y)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist[0])):\n        if len(set(nestedlist)) == len(nestedlist[0]):\n            common.append(nestedlist[0][i])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    output = []\n    for index, nested in enumerate(nestedlist):\n        if isinstance(nested, list):\n            output += common_in_nested_lists(nested[index])\n        else:\n            output.append(nested)\n    return output\n    \ndef num_occurrences(nestedlist):\n    '''\n    Write a function to find the number of occurrences of an element in a nested list.\n    '''\n    output = 0\n    for nested in nestedlist:\n        output += nested.count(nested)\n    return output\n    \ndef check_nested_list_elements(nestedlist):\n    '''\n    Write a function to check if there are any duplicate elements in a nested list.\n    '''\n    output = []\n    for element in nestedlist:\n        if element not in output:\n            output.append(element)\n    return output\n    \ndef check_list_elements(nestedlist):\n    '''\n    Write a function to check if a list contains any duplicate elements.\n    '''\n    output = []\n    for element in nestedlist:\n        if element not in output:\n            output.append(element)\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return type(text) == int or type(text) == float\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    \n    \ndef read_from_file(filename):\n    '''\n    Read a file and return its contents as a list of strings.\n    '''\n    with open(filename) as f:\n        return f.read().split()\n    \n    \ndef convert_to_binary(s):\n    '''\n    Convert a string to binary and return a list of strings.\n    '''\n    result = []\n    for i in s:\n        result.append(format(ord(i), '08b'))\n    \n    return result\n    \ndef convert_to_binary_string(s):\n    '''\n    Convert a list of binary strings to a string.\n    '''\n    return ''.join(format(ord(i), '08b' if i[0]!= '0' else '0') for i in s)\n    \n    \ndef binary_to_decimal(binary):\n    '''\n    Convert a binary string to a decimal number.\n    '''\n    result = 0\n    for i in range(len(binary)):\n        result += (16 ** i) * int(binary[i])\n    \n    return result\n    \ndef decimal_to_binary(decimal):\n    '''\n    Convert a decimal number to binary.\n    '''\n    result = ''\n    while decimal:\n        result += str(decimal % 2)\n        decimal //= 2\n    \n    return result\n    \ndef check_binary(binary):\n    '''\n    Check the binary representation of the number.\n    '''\n    result = binary_to_decimal(binary)\n    if result in range(0, 2 ** 16):\n        return True\n    \n    return False\n    \ndef check_integer(integer):\n    '''\n    Check if a number is an integer or not.\n    '''\n    result = int(integer)\n    if not check_binary(str(result)):\n        return False\n    \n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    # empty_list = [{} for _ in range(len(list1))]\n    empty_list = []\n    for i in list1:\n        empty_list.append(i)\n    \n    return len(empty_list) == 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    #print(type(list1))\n    #print(type(list1[0]))\n    for i in range(len(list1)):\n        for key, value in list1[i].items():\n            if value == None:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if(len(list1) == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if type(i)!= dict:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        for key in list1[i]:\n            if key == '':\n                return False\n            return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary) > 1:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(0,len(list1)):\n        if(len(list1[i].keys())==0):\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if len(dict1) > 0:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    is_empty = True\n    for x in list1:\n        for key, value in x.items():\n            if value == None:\n                is_empty = False\n    return is_empty\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) > 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0 if nums == [] else tuple([int(x) for x in nums])\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(str(nums).replace(\"(\",\"\").replace(\")\",\"\").replace(\"[\",\"\").replace(\"]\",\"\").replace(\"'\",\"\").replace(\",\",\"\")))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Your code here\n    # for num in nums:\n    #     num = int(num)\n    #     print num\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0 if not nums else tuple(map(lambda num: int(num), nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Output of nums\n    # [1,2,3] ->  1\n    # [1,2,4] ->  4\n    # [1,2,4,5] -> 5\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(int(i) for i in nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(x) for x in nums]))\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_to_float = []\n    for sublist in test_list:\n        for element in sublist:\n            test_list_to_float.append(element)\n    return test_list_to_float\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_of_lists = test_list.split(\",\")\n    test_list_of_lists = [list(map(float, i)) for i in test_list_of_lists]\n    test_list_of_lists = [list(map(lambda x: x if x!= None else 0, i)) for i in test_list_of_lists]\n    return test_list_of_lists\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [elem for elem in test_list if elem is not None]\n    test_list = [list(map(float, elem)) for elem in test_list]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for element in test_list:\n        for item in element:\n            if item == element:\n                continue\n            elif type(item) == list:\n                for sub_item in item:\n                    new_list.append(float(sub_item))\n            else:\n                new_list.append(float(item))\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    float_list = []\n    \n    for row in test_list:\n        row_float = []\n        for column in row:\n            column_float = []\n            for element in column:\n                if element == '-':\n                    column_float.append(-1)\n                else:\n                    column_float.append(float(element))\n            row_float.append(column_float)\n        float_list.append(row_float)\n        \n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Input: test_list = [['r','s','t'],['p','s','p'],['l','l','l']]\n    # Output: [0.3333333333333333,0.3333333333333333,0.3333333333333333]\n    '''\n    def list_to_float(test_list):\n        # Your code here\n    '''\n    def list_to_float(test_list):\n        # Your code here\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = list(test_list)\n    new_test_list = []\n    for elem in test_list:\n        if elem is not None:\n            new_test_list.append(float(elem))\n    return new_test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_list = []\n    for x in test_list:\n        test_list_list.append(list(map(float, x)))\n    return test_list_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            if test_list[i][j] == ',':\n                test_list[i][j] = '0.0'\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # TODO: replace 'pass' with 'Pass'\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    lst = string.split(' ')\n    return lst\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    #create an empty list\n    output=[]\n    #split the string\n    s_list=string.split(' ')\n    #add the words to the list\n    for word in s_list:\n        output.append(word)\n    #return the list\n    return output\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string == '':\n        return []\n    return list(string.split())\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [char.strip() for char in string.split()]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split()\n    return list_of_strings\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split())\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(map(lambda x: list(x), string.split(' ')))\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result = []\n    for i in range(0,len(string)):\n        result.append(string[i])\n    return result\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # write your logic here\n    sorted_arr = sorted(arr)\n    lst = []\n    # print(sorted_arr)\n    for i in range(len(sorted_arr)):\n        if sorted_arr.count(sorted_arr[i]) == 1:\n            lst.append(sorted_arr[i])\n    return lst\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # If the array is empty\n    if len(arr) == 0:\n        return 'NO element'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Make the array sorted\n    arr = sorted(arr)\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Compare the value of current element with the next element\n        if arr[i] == arr[i - 1]:\n            # If the value is the same, return the element\n            return arr[i]\n    # If all the elements are the same, return the element\n    return arr[0]"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # if it is a sorted array, then iterate\n    if arr[0] == arr[-1]:\n        # if there are only one element in arr, then it is the value of the element\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # YOUR CODE HERE\n    n = len(arr)\n    if n == 0:\n        return -1\n    \n    # Sort array into ascending order\n    arr.sort()\n    \n    # Create a hash table to find the frequency of each element\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    # Find the index of first element with frequency greater than 1\n    freq_key = dict(freq).keys()\n    freq_key.sort()\n    \n    # Find the value\n    idx = freq_key.index(arr[0])\n    \n    # Check if the given element is unique\n    while True:\n        if arr[idx] in freq:\n            idx = freq[arr[idx]]\n        else:\n            return arr[idx]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]!= arr[j] and arr[i]!= arr[j] and arr[j]!= arr[i]:\n                if j > i:\n                    print(arr[i], arr[j])\n                    return arr[i], arr[j]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    mid = low + (high - low) / 2\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    m = len(arr)\n    \n    # for loop to check all indices of arr.\n    for i in range(0,m):\n        # print(arr[i])\n        \n        # if arr[i] == arr[i-1]:\n            # print(\"found\")\n            # return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    newArr = []\n    \n    for i in range(len(arr)):\n        \n        if i == 0:\n            newArr.append(arr[i])\n        else:\n            if arr[i-1]!= arr[i]:\n                newArr.append(arr[i])\n    \n    for i in range(len(newArr)):\n        if newArr.count(newArr[i]) > 1:\n            return i\n    \n    return len(newArr)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # Loop through the array\n    for element in arr:\n        if element in arr:\n            # If element has one occurrence,\n            # remove it from arr and return the found element\n            arr.remove(element)\n            if len(arr) == 0:\n                return element\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # remove duplicate elements from the list\n    list1 = list(set(list1))\n    \n    # make a new list to store the max product\n    max_product = list1[0]\n    \n    # initialize the first index\n    i = 0\n    \n    # loop over the list\n    for j in range(1,len(list1)):\n        \n        # make a temp var to store the product\n        temp_product = list1[i]*list1[j]\n        \n        # if the temp product is greater than the max product\n        # then update the max product\n        if temp_product > max_product:\n            max_product = temp_product\n        \n        # increase the index by 1\n        i+=1\n    \n    # return the max product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # insert your code here\n    if len(list1) <= 1:\n        return list1[0][0]\n    max_product = list1[0][0]\n    for i in range(1, len(list1)):\n        current_product = list1[i][0] * list1[i][1]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Your code here\n    if len(list1) == 0:\n        return\n    else:\n        for i in range(0, len(list1)-1):\n            for j in range(i+1, len(list1)):\n                if list1[i] > list1[j]:\n                    if list1[i] > list1[j] * (list1[i] + list1[j]):\n                        list1[i], list1[j] = list1[j], list1[i]\n    return max(list1)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #your code here\n    if len(list1)<2:\n        return list1[0]*list1[1]\n    max_num=max(list1[0],list1[1])\n    for i in range(2,len(list1)):\n        max_num=max(max_num*list1[i],list1[i])\n    return max_num\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1)<2:\n        return list1[0][0]*list1[1][1]\n    max_x=list1[0][0]*list1[1][1]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if max_x<list1[i][0]*list1[j][1]:\n                max_x=list1[i][0]*list1[j][1]\n    return max_x\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    l = []\n    for i in list1:\n        l.append(i[0])\n        l.append(i[1])\n    l.sort()\n    \n    return l[0]*l[1]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product_tuple = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        if list1[i][0] * list1[i][1] > max_product_tuple:\n            max_product_tuple = list1[i][0] * list1[i][1]\n    return max_product_tuple\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] > list1[j][0] and list1[i][1] > list1[j][1]:\n                result = max(result, list1[i][0] * list1[j][1])\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    list_of_tuples = []\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product = list1[i][0]*list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    total = 0\n    for i in range(1,limit):\n        if is_prime(i) and is_prime(i-1):\n            total += i\n    print(total)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = []\n    sum = 0\n    for i in range(1, limit + 1):\n        if i % 2 == 0:\n            sum += i\n        else:\n            if sum % 2 == 0 and sum > 1:\n                if i not in numbers:\n                    numbers.append(i)\n            sum += i\n    return sum\n    \ndef get_numbers_divisible_by_2(limit):\n    '''\n    Return a list of natural numbers greater than 1 that are divisible by 2.\n    '''\n    numbers = []\n    sum = 0\n    for i in range(1, limit + 1):\n        if i % 2 == 0:\n            sum += i\n        else:\n            if sum % 2 == 0:\n                if i not in numbers:\n                    numbers.append(i)\n            sum += i\n    return numbers\n    \ndef main():\n    print(amicable_numbers_sum(10))\n    print(get_numbers_divisible_by_2(10))\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    # Loop over all numbers from 1 to limit\n    for n in range(1,limit+1):\n        # Check if n is an amicable number\n        if amicable_numbers_sum(n) == n:\n            # Add n to sum\n            sum += n\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    list = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_list = [n for n in range(1, limit+1) if not any(n%i==0 for i in range(2, int(n**0.5)+1))]\n    print('Sum of all amicable numbers up to', limit, 'is', sum(amicable_numbers_list))\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    sum = 0\n    num = 1\n    while num <= limit:\n        if sum == limit and num > 1:\n            return True\n        if num % 2 == 0 and sum == limit and num > 1:\n            return True\n        if num % 2 == 0 and num > 1 and num < limit:\n            if sum == limit:\n                return True\n            num = num // 2\n            sum += num\n        if num % 2 == 1 and sum == limit and num > 1:\n            return True\n        if num % 2 == 1 and num > 1 and num < limit:\n            if sum == limit:\n                return True\n            num = num // 2\n            sum += num\n        if num % 2 == 1 and num > 1 and num < limit:\n            if sum == limit:\n                return True\n            num = num // 2\n            sum += num\n            \n    return False\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_numbers = []\n    for number in range(1, limit):\n        amicable_numbers.append(number)\n        for index in range(1, len(amicable_numbers)):\n            if amicable_numbers[index] == amicable_numbers[index - 1]:\n                continue\n            else:\n                if amicable_numbers[index] % 2 == 0 and amicable_numbers[index] > 10:\n                    amicable_numbers[index] = amicable_numbers[index] ** 2\n                    sum += amicable_numbers[index]\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for n in range(2,limit):\n        if not n in amicable_numbers:\n            if all(n%i for i in range(2,int(math.sqrt(n))) if n%i==0):\n                amicable_numbers.add(n)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1,limit):\n        if sum([num for num in range(1,i) if not (num%(i+1))]) == i:\n            amicable_numbers.append(i)\n    print(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = [i for i in range(1,limit) if i > 1]\n    amicable_numbers = [i for i in amicable_numbers if i%2 == 0]\n    amicable_numbers = [i for i in amicable_numbers if i%3 == 0]\n    return sum(amicable_numbers)\n    \ndef run():\n    limit = int(input(\"Please input an integer: \"))\n    result = amicable_numbers_sum(limit)\n    print(\"Sum of all amicable numbers from 1 to {0} is: {1}\".format(limit,result))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        a = float(a)\n    except:\n        a = complex(a)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Get the real and imaginary parts\n    r = a.real\n    i = a.imag\n    # Find the real part\n    r_real = cmath.re(r)\n    # Find the imaginary part\n    i_real = cmath.im(i)\n    # Find the angle\n    angle = cmath.phase(r_real*i_real)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if (b==0):\n        angle=cmath.phase(a)\n        return angle\n    else:\n        angle=cmath.phase(cmath.complex(a,b))\n        return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (a.real + b.real) * 0.5\ndef angle_real(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    return (a.imag + b.imag) * 0.5\ndef sign_complex(a):\n    '''\n    Write a function to get the sign of a complex number.\n    '''\n    return complex(0,1) * a.real\ndef sign_real(a):\n    '''\n    Write a function to get the sign of a real number.\n    '''\n    return complex(0,1) * a.imag\ndef complex_mult(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    return complex(a.real * b.real - a.imag * b.imag, a.imag * b.real + a.real * b.imag)\ndef complex_add(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    return complex(a.real + b.real, a.imag + b.imag)\ndef complex_sub(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    return complex(a.real - b.real, a.imag - b.imag)\ndef complex_div(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    return complex(a.real / b.real, a.imag / b.imag)\ndef complex_log(a):\n    '''\n    Write a function to get the logarithm of a complex number.\n    '''\n    return a.real * 0.5 + (a.imag * 0.5)\ndef real_div(a,b):\n    '''\n    Write a function to divide two real numbers.\n    '''\n    return complex(a.real / b.real, a.imag / b.imag)\ndef complex_conjugate(a):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    return complex(a.imag, -a.real)\ndef complex_conjugate_add(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    return complex(a.imag + b.imag, -a.real + b.real)\ndef complex_conjugate_sub(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    return complex(a.imag - b.imag, -a.real - b.real)\ndef complex_conjugate_mul(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    return complex(a.real * b.real - a.imag * b.imag, a.imag * b.real + a.real * b.imag)\ndef complex_conjugate_div(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    return complex(a.imag * 0.5, a.real * 0.5)\ndef complex_conjugate_log(a):\n    '''\n    Write a function to get the logarithm of a complex number.\n    '''\n    return complex(a.imag * 0.5, -a.real * 0.5)\ndef concatenate(a,b):\n    '''\n    Write a function to concatenate two complex numbers.\n    '''\n    return complex(a.real + b.real, a.imag + b.imag)\ndef complex_conjugate_matrix(a):\n    '''\n    Write a function to get the conjugate matrix of a complex number.\n    '''\n    return complex(a.imag * 0.5, -a.real * 0.5)\ndef conjugate_matrix(a):\n    '''\n    Write a function to get the conjugate matrix of a complex number.\n    '''\n    return complex(a.imag * 0.5, -a.real * 0.5)\ndef inv_conjugate_matrix(a):\n    '''\n    Write a function to get the inverse conjugate matrix of a complex number.\n    '''\n    return complex(a.imag * 0.5, -a.real * 0.5)\ndef conjugate_matrix_inv(a):\n    '''\n    Write a function to get the conjugate inverse matrix of a complex number.\n    '''\n    return complex(a.imag * 0.5, -a.real * 0.5)\ndef vector_conjugate(a):\n    '''\n    Write a function to get the conjugate of a vector.\n    '''\n    return complex(a[0].imag + a[1].imag, -a[0].imag - a[1].imag)\ndef vector_conjugate_add(a,b):\n    '''\n    Write a function to add two vectors.\n    '''\n    return complex(a[0].imag + b[0].imag, -a[0].imag - b[0].imag)\ndef vector_conjugate_sub(a,b):\n    '''\n    Write a function to subtract two vectors.\n    '''\n    return complex(a[0].imag - b[0].imag, -a[0].imag + b[0].imag)\ndef vector_conjugate_mul(a,b):\n    '''\n    Write a function to multiply two vectors.\n    '''\n    return complex(a[0].imag * b[0].imag - a[0].imag * b[1].imag, a[0].imag * b[1].imag + a[0].imag * b[0].imag)\ndef vector_conjugate_div(a,b):\n    '''\n    Write a function to divide two vectors.\n    '''\n    return complex(a[0].imag * 0.5, -a[0].imag * 0.5)\ndef vector_conjugate_log(a):\n    '''\n    Write a function to get the logarithm of a vector.\n    '''\n    return complex(a[0].imag * 0.5, -a[0].imag * 0.5)\ndef get_vector(a,b):\n    '''\n    Write a function to get the vector of a complex number.\n    '''\n    return complex(a[0].imag + b[0].imag, -a[0].imag - b[0].imag)\ndef get_vector_inv(a):\n    '''\n    Write a function to get the inverse of a vector.\n    '''\n    return complex(a[0].imag * 0.5, -a[0].imag * 0.5)\ndef get_angle(a,b):\n    '''\n    Write a function to get the angle of a vector.\n    '''\n    return angle_complex(complex_mult(a,b), complex_add(a,b))\ndef get_angle_real(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    return angle_complex(complex_mult(a,b), complex_add(a,b))\ndef get_angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return angle_real(complex_mult(a,b), complex_add(a,b))\ndef get_sign(a):\n    '''\n    Write a function to get the sign of a real number.\n    '''\n    return sign_real(complex_mult(a,b))\ndef get_sign_complex(a):\n    '''\n    Write a function to get the sign of a complex number.\n    '''\n    return sign_complex(complex_mult(a,b))\ndef get_sign_real(a):\n    '''\n    Write a function to get the sign of a real number.\n    '''\n    return sign_real(complex_mult(a,b))\ndef get_sign_complex_add(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    return complex(sign_complex(complex_mult(a,b)), sign_complex(complex_add(a,b)))\ndef get_sign_complex_sub(a,b):\n    '''\n    Write a function to subtract two complex numbers"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = complex(a)\n    b = complex(b)\n    c = a - b\n    return c.imag\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.imag > 0 or b.imag > 0:\n        theta = acos((b.imag**2 + a.imag**2 - 1) / (2*a.real*b.imag))\n    else:\n        theta = acos( (b.real**2 + a.imag**2 - 1) / (2*a.real*b.imag))\n    if theta < pi / 2:\n        return 0\n    elif theta > pi / 2:\n        return 2 * pi - theta\n    else:\n        return theta\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = a.real*b.imag-a.imag*b.real\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.imag or b.imag:\n        raise Exception('cannot evaluate complex number')\n    x = a.real+1j*b.real\n    y = a.imag+1j*b.imag\n    return cmath.acos(x/complex(y,0)).real\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b==0:\n        return cmath.phase(a)\n    else:\n        return angle_complex(b,a%b)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    rad = b**0.5\n    deg = cmath.phase(a)\n    return (deg + (rad + 0.00001)*((deg - 0.00001) % (2*cmath.pi) / 2.0))\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == \"\":\n        return 0\n    count_zero = 0\n    count_one = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_zero += 1\n        elif string[i] == \"1\":\n            count_one += 1\n    if count_zero == count_one:\n        return 0\n    return count_zero - count_one\n    \nstring = \"111011\"\nprint(find_length(string)"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return count_0_1(string)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    current = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        else:\n            count = 0\n        if count == 0:\n            current = i\n            break\n    return count - current\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if(string == ''):\n        return 0\n    elif(string == '1'):\n        return 1\n    else:\n        return max(find_length(string[1:]), find_length(string[:-1]))\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length=0\n    for i in range(len(string)):\n        if string[i] == '0':\n            length+=1\n        else:\n            length-=1\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    # string = \"011110\"\n    substring_list = []\n    for i in range(len(string)-1):\n        count += (string[i] == string[i+1])\n        if count == 0:\n            substring_list.append(i)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Your code here\n    ans=0\n    i=0\n    j=0\n    while i<len(string):\n        if string[i]==0:\n            ans+=1\n            i+=1\n        else:\n            j+=1\n            i+=1\n    return ans-j\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # '''\n    # 1. Create an empty array for the result\n    result = []\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    length = 0\n    for i in range(0, len(string)): \n        if string[i] == '0': \n            length += 1\n        else: \n            length -= 1\n        if length == 0: \n            return length\n        "
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    index = 0\n    temp = string\n    for i in range(len(temp)):\n        if temp[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            index = i\n            break\n    print(count)\n    print(index)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==b: return a\n    elif a==0: return b\n    else:\n        if b%a==0: return b\n        else:\n            return sum(a,b%a)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # use while loop to find the common divisors\n    result = 1\n    i = 1\n    while i < (a/b):\n        if a % i == 0:\n            if b % i == 0:\n                result = result + i\n        i = i + 1\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = 0\n    for i in range(1,min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a*b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b == 0:\n        return a\n    return a + sum(b, a % b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 1\n    for i in range(1,int(b/2)+1):\n        if a % i == 0 and b % i == 0:\n            c += 1\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        a,b=b,a\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a + b\n    \n    pass\n    #sum1=0\n    #i=1\n    #while i<=a and i<=b:\n        #if a%i==0 and b%i==0:\n            #i+=1\n        #else:\n            #i+=1\n            #a,b=b,a\n    #if a%i==0 and b%i==0:\n        #sum1+=a\n        #sum1+=b\n        #return sum1\n    #else:\n        #return sum1\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b == 0: \n        return a \n    else: \n        return sum(a, b//2"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    while b:\n        if b & 1:\n            return (a*a) + b\n        a = a * a \n        b >>= 1 \n    return None \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    assert isinstance(x, int) and isinstance(y, int)\n    assert isinstance(x, int) and isinstance(y, int)\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # TODO: Your code here\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return x\n    elif y < 0:\n        return x*multiply_int(y, -1)\n    else:\n        return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    if x == 0 and y == 0:\n        result = 1\n    elif x!= 0 and y!= 0:\n        result = x * y\n    elif x!= 0:\n        result = x\n    elif y!= 0:\n        result = y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(str(x) + \" x \" + str(y) + \" = \" + str(x * y))\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(f'{x} * {y} = {x*y}')\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    word_list = str.split()\n    word_lengths = {}\n    for word in word_list:\n        if word.isalpha():\n            if len(word) <= n:\n                word_lengths[word] = word_lengths.get(word, 0) + 1\n    return word_lengths\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l_count = [0] * 26\n    for word in str.split():\n        for i in range(len(word)):\n            l_count[ord(word[i]) - ord('a')] += 1\n    count = 0\n    for i in l_count:\n        if i > n:\n            count += 1\n    return count\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = [word for word in str.split() if len(word) >= n]\n    return long_words\n    # Here I will make a list of words and print them, with a print statement\n    # and also the longest and the words that are longer than the given n,\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str = str.lower()\n    word_list = []\n    for word in str.split():\n        if len(word) >= n:\n            word_list.append(word)\n    return word_list\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str:\n        if len(word) >= n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_list = []\n    # create a list of the words\n    for i in range(n):\n        word_list.append(str.split())\n    # loop through the list\n    for i in range(len(word_list)):\n        # loop through the list\n        for j in range(len(word_list[i])):\n            # if the word is longer than n\n            if len(word_list[i][j]) > n:\n                # if the word is not the word\n                if word_list[i][j]!= str.split():\n                    # add the word to the list\n                    word_list[i][j] = str.split()\n                # if the word is the word\n                elif word_list[i][j] == str.split():\n                    # if the word is not the word\n                    if j < n-1:\n                        # if it is, add the word to the list\n                        word_list[i][j+1] = str.split()\n                    # if it is, add the word to the list\n                    else:\n                        # if it is, add the word to the list\n                        word_list[i][-1] = str.split()\n    # return the list\n    return word_list\n    \n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Set the upper left hand corner to zero\n    my_matrix[0][0] = 0\n    # Set the lower left hand corner to zero\n    my_matrix[-1][-1] = 0\n    # Set the upper right hand corner to zero\n    my_matrix[0][-1] = 0\n    # Set the lower right hand corner to zero\n    my_matrix[-1][0] = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix[0])):\n            if my_matrix[row][col] == 0:\n                print(row,col)\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #Write your code here\n    '''\n    my_matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    '''\n    if my_matrix == []:\n        return False\n    if my_matrix[0]!= [1, 2, 3]:\n        return False\n    if my_matrix[1]!= [4, 5, 6]:\n        return False\n    if my_matrix[2]!= [7, 8, 9]:\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    if len(my_matrix[0]) == 1:\n        return True\n    \n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= 0:\n                return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # how many rows and columns?\n    rows = len(my_matrix)\n    columns = len(my_matrix[0])\n    # if matrix is square\n    if rows == columns:\n        return True\n    # if matrix is not square\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= 0:\n                row_max = -1\n                column_max = -1\n                for row in range(len(my_matrix)):\n                    if my_matrix[row][j] > row_max:\n                        row_max = my_matrix[row][j]\n                for column in range(len(my_matrix[0])):\n                    if my_matrix[j][column] > column_max:\n                        column_max = my_matrix[j][column]\n                if row_max!= 0 and column_max!= 0 and row_max > 1 and column_max > 1:\n                    return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_count = len(my_matrix)\n    col_count = len(my_matrix[0])\n    for row in range(row_count):\n        for col in range(col_count):\n            if row == col:\n                continue\n            if (row+col) % 2 == 0 and my_matrix[row][col] == my_matrix[row+col][col]:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Code goes here\n    count = 0\n    if my_matrix[0][0] == 0:\n        count = 1\n    if my_matrix[1][1] == 0:\n        count = 2\n    if my_matrix[2][2] == 0:\n        count = 3\n    if my_matrix[3][3] == 0:\n        count = 4\n    if count == 1:\n        return 'Yes'\n    if count == 2:\n        return 'No'\n    if count == 3:\n        return 'Yes'\n    if count == 4:\n        return 'No'\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    # check the matrix is a magic square\n    if size == 4 and my_matrix[0][0] == size-1 and my_matrix[0][size-1] == size-1 and my_matrix[1][0] == size-1 and my_matrix[1][size-1] == size-1 and my_matrix[2][0] == size-1 and my_matrix[2][size-1] == size-1 and my_matrix[3][0] == size-1 and my_matrix[3][size-1] == size-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Python program to check if matrix is a magic square\n    m = len(my_matrix)\n    n = len(my_matrix[0])\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counter = defaultdict(int)\n    for i in nums:\n        counter[i]+=1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    \n    for item in nums:\n        frequency[item] += 1\n        \n    for item in frequency:\n        if frequency[item] == max(frequency.values()):\n            return item\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dic = dict()\n    for num in nums:\n        if num in freq_dic:\n            freq_dic[num] += 1\n        else:\n            freq_dic[num] = 1\n    \n    max_occur = 0\n    for key, value in freq_dic.items():\n        if value == max(freq_dic.values()):\n            max_occur = key\n    \n    return max_occur\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counter = defaultdict(int)\n    for num in nums:\n        counter[num] += 1\n    \n    max_occurred = max(counter.values())\n    max_occurred_counts = counter[max_occurred]\n    \n    return max_occurred_counts\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d=defaultdict(int)\n    for i in nums:\n        d[i]+=1\n    return max(d,key=d.get)\nnums=[2,2,1,2,1,2,2,1,2,2,2,2,1,2,2]\nprint(max_occurrences(nums))"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for n in nums:\n        count[n] += 1\n    \n    max_frequency = max(count.values())\n    max_key = max(count, key=count.get)\n    \n    return max_key, max_frequency\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrence = 0\n    lookup = {}\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = {}\n    max_val = -1\n    for i in nums:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n        if freq[i] > max_val:\n            max_val = freq[i]\n            index = i\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for item in nums:\n        freq[item] += 1\n    return max(freq, key=freq.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    item_freq = defaultdict(int)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2=''\n    for i in str1:\n        if i not in ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'):\n            str2+=i\n        else:\n            str2+='A'\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    reversed_str = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in str1:\n        if char in vowels:\n            reversed_str += char\n        else:\n            reversed_str +=''\n    return reversed_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # example\n    # reverse_vowels('apple') returns 'dear'\n    # reverse_vowels('aab') returns 'ab'\n    # reverse_vowels('bear') returns 'ell'\n    # reverse_vowels('car') returns 'civic'\n    # reverse_vowels('chicken') returns 'chick'\n    # reverse_vowels('dog') returns 'god'\n    # reverse_vowels('mice') returns'mice'\n    # reverse_vowels('person') returns 'pess'\n    # reverse_vowels('python') returns 'py'\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowels_str = []\n    if not isinstance(str1, str):\n        return 'Please enter a string'\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_str.append(str1[i])\n    return vowels_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1=str1.lower()\n    vowels=['a','e','i','o','u']\n    new_str=''\n    for i in str1:\n        if i not in vowels:\n            new_str+=i\n    return new_str[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u']\n    return ''.join(sorted(list(str1), key=lambda x: x in vowels))\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    temp = \"\"\n    i = 0\n    for x in str1:\n        if x not in vowels:\n            temp += x\n        else:\n            temp += temp[::-1]\n            i += 1\n            if i >= len(str1):\n                i = 0\n    return temp\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for char in str1:\n        if char not in vowels:\n            str2 += char\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    result = \"\"\n    # For each vowel in str1\n    for i in range(len(str1)):\n        if str1[i].lower() in 'aeiou':\n            result = result + str1[i].lower()\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for tup2 in tup1:\n        str1 += str(tup2)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if isinstance(tup1, tuple):\n        return '(' + str(tup1) + ')'\n    else:\n        return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + \", \".join(map(str, tup1)) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' +  ''.join(tup1).replace('(','{(').replace(')','}') + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = \"\"\n    for x in tup1:\n        s = s + str(x) + \" \"\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for x in tup1:\n        string = string + str(x) + ','\n    return string[:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # TODO: Write your code here.\n    \n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = ''\n    for i in range(len(tup1)):\n        result = result + str(tup1[i])\n        if (i + 1) % 5 == 0:\n            result = result + '\\n'\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ', '.join(map(str, tup1)) + ')'\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum=0\n    for num in nums:\n        if num<0:\n            sum-=num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(range(0,len(nums)-len(nums[0]))"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for number in nums:\n        if number < 0:\n            total -= number\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #OR\n    #return sum([-n for n in nums if n < 0])\n    \n    return sum([n for n in nums if n < 0]"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([ num for num in nums if num < 0 ])\n    \n    \ndef product_of_evens(nums):\n    '''\n    Write a function that takes a list and returns the product of all the even numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            sum += num\n    return sum\n    \n    \ndef sum_all_divisible_by_k(nums, k):\n    '''\n    Write a function that takes a list of numbers and a number k, and returns the sum of all numbers that sum to k.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num if num % k == 0 else 0\n    return sum\n    \n    \ndef sum_even_divisible_by_k(nums, k):\n    '''\n    Write a function that takes a list of numbers and a number k, and returns the sum of all even numbers that sum to k.\n    '''\n    sum = 0\n    for num in nums:\n        if num % k == 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    s = 0\n    for i in nums:\n        s += -i\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return n \n    else: \n        return hexagonal_num(n-1) + hexagonal_num(n-2)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    sum_num = n*(n+1)/6\n    i = 0\n    j = n-1\n    while(i < j):\n        i += 1\n        j -= 1\n    return sum_num\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1: \n        return 1\n    elif n % 2 == 0: \n        return n//6 + 1\n    elif n % 2 == 1: \n        return 3*n//6 + 2\n        \n    "
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return n\n    return (hexagonal_num(n - 1) + hexagonal_num(n - 3) + hexagonal_num(n - 6))\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    elif n==1:\n        return 2\n    elif n==2:\n        return 3\n    else:\n        return (n*hexagonal_num(n-1))\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 0\n    while num <= n:\n        num = num + 3*(n/6) + 1\n        if num == n:\n            return num\n    return 0"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        return hexagonal_num(n-1) + hexagonal_num(n-2)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n**2 + n**2 + n**2 + n + 1)**2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # your code goes here\n    if n<=1:\n        print(n)\n        return n\n    else:\n        return (n*(n+1))//6\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return 0\n    else:\n        if n%2 == 0:\n            return (n*(n-1))//6 + 1\n        else:\n            return (n*(n-1))//6 - 1\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = nums.count(0)\n    nonzero_count = nums.count(1)\n    if zero_count == nonzero_count:\n        return [zero_count, nonzero_count]\n    else:\n        return [nonzero_count, zero_count]\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = {}\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count[i] = zero_count.get(i, 0) + 1\n    for i in range(len(nums)):\n        if nums[i] in zero_count:\n            zero_count[i] = zero_count.get(i, 0)\n    return zero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return float(sum(set(nums))) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zs = nums.count(0)\n    nt = nums.count(1)\n    count = zs*nt\n    #print(count)\n    return float(count)/(len(nums)-len(nums[:len(nums)])*len(nums[:len(nums)])*len(nums[:len(nums)])*len(nums[:len(nums)])*len(nums[:len(nums)]))\n    \ndef lcm(a, b):\n    '''\n    Finds the greatest common divisor of a and b.\n    '''\n    while(b!= 0):\n        a = b\n        b = a%b\n    return a\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n            count += 1\n    return zero_count / count\ndef find_partition(nums, left_most, right_most):\n    '''\n    Write a function to find the partition of an array into two pieces of the array.\n    '''\n    partition_left = nums[left_most:right_most]\n    partition_right = nums[right_most:]\n    return partition_left, partition_right\ndef partition_list(nums, part_left, part_right):\n    '''\n    Write a function to divide the array into two pieces.\n    '''\n    middle_index = int((part_left + part_right) / 2)\n    if middle_index >= len(nums):\n        return None\n    else:\n        # print(part_left, part_right)\n        # print(middle_index)\n        index_left = 0\n        index_right = 0\n        for i in range(middle_index):\n            # print(nums[i])\n            if nums[i]!= 0:\n                index_left += 1\n                index_right += 1\n                nums[index_left], nums[index_right] = nums[index_right], nums[index_left]\n        nums[index_right], nums[part_left] = nums[part_left], nums[index_right]\n        return nums\ndef sort_list(nums):\n    '''\n    Sort the array in place.\n    '''\n    for i in range(len(nums)):\n        min_element = min(nums[i:])\n        nums[i] = nums[i]\n        nums[i:num_index] = nums[i:num_index] + [min_element]\n        nums[num_index] = min_element\ndef merge_sort(nums, left_most, right_most):\n    '''\n    Sort the array in place.\n    '''\n    if left_most >= right_most:\n        return None\n    mid_index = left_most + (right_most - left_most) // 2\n    left_part, right_part = nums[left_most:mid_index], nums[mid_index:right_most]\n    if nums[left_most] > nums[mid_index]:\n        sort_list(left_part)\n    else:\n        sort_list(right_part)\n        sort_list(left_part)\n        sort_list(right_part)\n    nums[left_most:right_most] = []\n    return nums\ndef merge_sort_recursive(nums, left_most, right_most):\n    '''\n    Sort the array in place.\n    '''\n    if left_most >= right_most:\n        return None\n    mid_index = left_most + (right_most - left_most) // 2\n    left_part, right_part = nums[left_most:mid_index], nums[mid_index:right_most]\n    if nums[left_most] > nums[mid_index]:\n        merge_sort_recursive(left_part, left_most, mid_index)\n    else:\n        merge_sort_recursive(right_part, mid_index, right_most)\n        merge_sort_recursive(left_part, left_index, mid_index-1)\n        merge_sort_recursive(right_part, right_index+1, right_most)\n        merge_sort_recursive(left_part, left_index, right_index)\n    nums[left_most:right_most] = []\n    return nums\ndef count_sort(nums, low, high):\n    '''\n    Sort the array in place.\n    '''\n    if len(nums) == 0:\n        return 0\n    if low == high:\n        return nums[low]\n    mid = (low + high) // 2\n    middle_index = nums[mid]\n    count_sort(nums, low, mid)\n    count_sort(nums, mid + 1, high)\n    count = 0\n    for i in range(low, high+1):\n        if middle_index > nums[i]:\n            count += 1\n            nums[i] = middle_index\n    return count\ndef merge_sort_recursive(nums, low, high):\n    '''\n    Sort the array in place.\n    '''\n    if low >= high:\n        return None\n    mid = (low + high) // 2\n    left_part, right_part = nums[low:mid], nums[mid+1:high]\n    if nums[low] < nums[mid]:\n        merge_sort_recursive(left_part, low, mid)\n    else:\n        merge_sort_recursive(right_part, mid+1, high)\n        merge_sort_recursive(left_part, low, mid)\n        merge_sort_recursive(right_part, mid+1, high)\n    nums[low:high+1] = []\n    return nums\ndef quick_sort(nums, low, high):\n    '''\n    Sort the array in place.\n    '''\n    if len(nums) == 0:\n        return None\n    if low < high:\n        mid = partition_list(nums, low, high)\n        quick_sort(nums, low, mid-1)\n        quick_sort(nums, mid+1, high)\n    return nums\ndef quick_sort_recursive(nums, low, high):\n    '''\n    Sort the array in place.\n    '''\n    if low >= high:\n        return None\n    mid = partition_list(nums, low, high)\n    quick_sort_recursive(nums, low, mid-1)\n    quick_sort_recursive(nums, mid+1, high)\ndef partition_list(nums, part_left, part_right):\n    '''\n    Sort the array in place.\n    '''\n    partition_left_index = part_left\n    partition_right_index = part_right\n    for i in range(part_left, len(nums)):\n        if nums[i]!= 0:\n            if nums[partition_left_index] > nums[i] and partition_left_index!= i:\n                partition_left_index += 1\n            nums[i] = nums[partition_left_index]\n            partition_left_index += 1\n            nums[partition_right_index] = nums[i]\n            partition_right_index += 1\n    nums[partition_right_index] = nums[part_right]\n    nums[part_left] = 0\n    return partition_left_index\ndef partition_list_recursive(nums, part_left, part_right):\n    '''\n    Sort the array in place.\n    '''\n    if len(nums) == 0:\n        return None\n    if part_left >= part_right:\n        return part_left\n    mid = partition_list_recursive(nums, part_left, part_right)\n    partition_left_index = partition_left_index_recursive(nums, part_left, mid)\n    partition_right_index = partition_right_index_recursive(nums, mid+1, part_right)\n    return partition_left_index, partition_right_index\ndef partition_left_index_recursive(nums, left_index, high):\n    '''\n    Sort the array in place.\n    '''\n    if left_index == high:\n        return left_index\n    mid = (left_index + high) // 2\n    index = partition_list_recursive(nums, left_index, mid)\n    return index\ndef partition_right_index_recursive(nums, right_index, high):\n    '''\n    Sort the array in place.\n    '''\n    if right_index == high:\n        return right_index\n    mid = (right_index + high) // 2\n    index = partition_list_recursiv"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 1\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    elif n == 1: \n        return True\n    elif n == 2: \n        return True\n    else: \n        if is_Sum_Of_Powers_Of_Two(n//2): \n            return True\n        else: \n            return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pow_of_2 = [2,3,5,7,11,13,17,19]\n    if sum(pow_of_2) == n:\n        print(\"Number is Sum of 2 power\")\n    else:\n        print(\"Number is not Sum of 2 power\")\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    # given number has a power of 2\n    for i in range(3,n,2):\n        if n % i == 0:\n            return False\n    return True\n    \n    \n    #given number has no power of 2 \n    \ndef is_Power_Of_Two(n): \n    '''\n    Return True if the given number is a power of 2. Otherwise return False.\n    '''\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef is_Possible_Not_A_Sum_Of_Powers_Of_Three(n): \n    '''\n    Returns True if given number is possible and a sum of all numbers which has exactly three powers of 2. Otherwise returns False.\n    '''\n    if n == 1:\n        return False\n    if n % 3 == 0:\n        return True\n    for i in range(2,n,3):\n        if is_Power_Of_Two(i) and is_Power_Of_Two(n-i) and is_Power_Of_Two(n-i-i):\n            return True\n    return False\n    \n    \n    # Given a positive integer n, count the total number of triplets in the range 1..n such that:\n    # 0 <= 3 * a * b < n\n    # a + b + c = n\n    # a,b,c have consecutive triplets\n    \ndef count_Subsets(a, b, c):\n    '''\n    Given a positive integer n, count the number of triplets\n    in the range 1..n such that:\n    0 <= 3 * a * b < n\n    a + b + c = n\n    a,b,c have consecutive triplets\n    '''\n    res = 0\n    for a_b_c in range(a, n+1):\n        res += (3*a_b_c)*(b+c)\n    return res\n    \n    \n    # Given an integer n, count the number of triplets \n    # in the range 1..n such that:\n    # 0 <= 3 * a * b < n\n    # a + b + c = n\n    # a,b,c have consecutive triplets\n    \ndef count_Triplets(a, b, c):\n    '''\n    Given three integers n, m, and k, return the number of triplets (n,m,k) such that:\n    0 <= 3 * a * b < n < k\n    a + b + c = n\n    a,b,c have consecutive triplets\n    '''\n    n = 0\n    m = 0\n    k = 0\n    for i in range(1,n+1):\n        n = 3 * i * a + b + c\n        m = 3 * i * b + c\n        k = 3 * i * a + c\n        if n > k:\n            break\n    return n-k\n    \n    \n    # Given three integers n, m, and k, return the number of triplets (n,m,k) such that:\n    # 0 <= 3 * a * b < n < k\n    # a + b + c = n\n    # a,b,c have consecutive triplets\n    \ndef count_Triplets2(a, b, c):\n    '''\n    Given three integers n, m, and k, return the number of triplets (n,m,k) such that:\n    0 <= 3 * a * b < n < k\n    a + b + c = n\n    a,b,c have consecutive triplets\n    '''\n    res = 0\n    for i in range(3,a,3):\n        res += (3*i*a + b + c)/(3*i*b + c)\n    return res\n    \n    \n    # Given three integers n, m, and k, return the number of triplets (n,m,k) such that:\n    # 0 <= 3 * a * b < n < k\n    # a + b + c = n\n    # a,b,c have consecutive triplets\n    \ndef count_Triplets3(a, b, c):\n    '''\n    Given three integers n, m, and k, return the number of triplets (n,m,k) such that:\n    0 <= 3 * a * b < n < k\n    a + b + c = n\n    a,b,c have consecutive triplets\n    '''\n    res = 0\n    for i in range(3,a,3):\n        for j in range(3,b,3):\n            for k in range(3,c,3):\n                res += (3*i*a + b + c)/(3*j*a + c)\n    return res\n    \n    \n    # Given three integers n, m, and k, return the number of triplets (n,m,k) such that:\n    # 0 <= 3 * a * b < n < k\n    # a + b + c = n\n    # a,b,c have consecutive triplets\n    \ndef count_Triplets4(a, b, c):\n    '''\n    Given three integers n, m, and k, return the number of triplets (n,m,k) such that:\n    0 <= 3 * a * b < n < k\n    a + b + c = n\n    a,b,c have consecutive triplets\n    '''\n    res = 0\n    for i in range(3,a,3):\n        for j in range(3,b,3):\n            for k in range(3,c,3):\n                res += (3*i*a + b + c)/(3*j*a + c)\n    return res\n    \n    \n    # Given three integers n, m, and k, return the number of triplets (n,m,k) such that:\n    # 0 <= 3 * a * b < n < k\n    # a + b + c = n\n    # a,b,c have consecutive triplets\n    \ndef count_Triplets5(a, b, c):\n    '''\n    Given three integers n, m, and k, return the number of triplets (n,m,k) such that:\n    0 <= 3 * a * b < n < k\n    a + b + c = n\n    a,b,c have consecutive triplets\n    '''\n    res = 0\n    for i in range(3,a,3):\n        for j in range(3,b,3):\n            for k in range(3,c,3):\n                res += (3*i*a + b + c)/(3*j*a + c)\n    return res\n    \n    \n    # Given three integers n, m, and k, return the number of triplets (n,m,k) such that:\n    # 0 <= 3 * a * b < n < k\n    # a + b + c = n\n    # a,b,c have consecutive triplets\n    \ndef count_Triplets6(a, b, c):\n    '''\n    Given three integers n, m, and k, return the number of triplets (n,m,k) such that:\n    0 <= 3 * a * b < n < k\n    a + b + c = n\n    a,b,c have consecutive triplets\n    '''\n    res = 0\n    for i in range(3,a,3):\n        for j in range(3,b,3):\n            for k in range(3,c,3):\n                res += (3*i*a + b + c)/(3*j*a + c)\n    return res\n    \n    \n    # Given three integers n, m, and k, return the number of triplets (n,m,k) such that:\n    # 0 <= 3 * a * b < n < k\n    # a + b + c = n\n    # a,b,c have consecutive triplets\n    \ndef count_Triplets7(a, b, c):\n    '''\n    Given three integers n, m, and k, return the number of triplets (n,m,k) such that:\n    0 <= 3 * a * b < n < k\n    a + b + c = n\n    a,b,c have consecutive triplets\n    '''\n    res = 0\n    for i in range(3,"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Your code here\n    if n == 0: \n        return True\n    if n == 1: \n        return False\n    for i in range(2, n+1):\n        if n%i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    lst = []\n    while (n): \n        while (n % 2 == 0): \n            lst.append(2) \n            n = n // 2\n        while (n % 2!= 0): \n            lst.append(1) \n            n = n // 2\n        n = n // 2\n    if (len(lst) == 0): \n        return 'YES' \n    else: \n        return 'NO' \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<=0: \n        return False\n    if n==1: \n        return True\n    if n%2==0: \n        return False\n    elif n%2==1: \n        return True\n    x = n//2\n    return is_Sum_Of_Powers_Of_Two(x)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i=1\n    sum=0\n    while i<=n:\n        if n%i==0:\n            sum+=i\n            i+=1\n        else:\n            i+=1\n    if sum==n:\n        print(\"true\")\n    else:\n        print(\"false\")\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    elif n==1 or n==2:\n        return False\n    else:\n        for i in range(1,n):\n            if n%i==0:\n                return False\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if the number can be represented as a sum of non-zero powers of 2\n    if n == 0:\n        return False\n    # check if the number can be represented as a sum of non-zero powers of 2\n    elif n == 1:\n        return True\n    # calculate the powers of 2\n    else:\n        # calculate the sum of powers of two\n        sum = 0\n        for i in range(2,n):\n            sum += pow(i,2)\n        # check whether the number can be represented as a sum of non-zero powers of two\n        return sum == n\n        \n    \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0: \n        return False\n    \n    if n<0: \n        return False\n    \n    if n==1: \n        return True\n    \n    if n%2==0: \n        return False\n    \n    while n>0: \n        if n%2==0: \n            return False\n        n=n//2\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * (r**2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r*r\n    #write your code here\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * 2 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * (r ** 2)\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * (r**2) * PI\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    area = math.pi * (r ** 2)\n    print(round(area, 2))\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = []\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def convert_list_to_set(my_list):\n        '''\n        Convert the list to a set.\n        '''\n        temp_set = set()\n        for item in my_list:\n            temp_set = temp_set.union(set(item))\n        return temp_set\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    my_list = []\n    for i in test_list:\n        for j in i:\n            my_list.append(j)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            if isinstance(test_list[i][j], list):\n                for k in range(0, len(test_list[i][j])):\n                    count += test_list[i][j][k]\n            else:\n                count += test_list[i][j]\n    return count\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = []\n    for i in test_list:\n        if type(i) == list:\n            for j in i:\n                res.append(j)\n        else:\n            res.append(i)\n    return res"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flattened_list.append(num)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # TODO: You will need to complete this function\n    \n    # For this challenge, we want to flatten the list into a single set of numbers,\n    # so we should have the following output:\n    # 1. [1, 2, 3, 4]\n    # 2. [1, 2, 3, 4, 5]\n    # 3. [1, 2, 3, 4, 5, 6]\n    # 4. [1, 2, 3, 4, 5, 6, 7]\n    \n    # I am going to assume you have already done the previous steps\n    # so I will just have to do it for us, and then pass the list of numbers\n    # from main.\n    \n    flatten = []\n    for x in test_list:\n        flatten.append(x)\n    \n    return flatten\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #example 1:\n    #given = [1, [2, [3, 4]]]\n    #expect = [1, 2, 3, 4]\n    def flatten(list):\n        output_list = []\n        for elem in list:\n            if type(elem) is list:\n                flatten(elem)\n            else:\n                output_list.append(elem)\n        return output_list\n    return flatten(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        if i < len(nums) - 1:\n            j = len(nums) - 1 - i\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    return [nums.pop(n) for n in range(len(nums)) if len(nums)>1] + nums + [nums.pop()]\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    count = 0\n    for i in range(n - 1, -1, -1):\n        if nums[i]!= i + 1:\n            nums[count], nums[i] = nums[i], nums[count]\n            count += 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return []\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums == []:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    pivot = nums.pop()\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i = len(nums) - 1\n    while i >= 1:\n        cur_min = i\n        for j in range(i):\n            if nums[j] > nums[cur_min]:\n                cur_min = j\n        nums[cur_min], nums[i] = nums[i], nums[cur_min]\n        i -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n - 1, 0, -1):\n        # if the current element is not in the list\n        # then swap it with the last element\n        while i > 0 and nums[i] > nums[i - 1]:\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]\n            i -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        #Swap with the smallest position\n        j = i\n        for k in range(i,n):\n            if nums[k] < nums[j]:\n                j = k\n        \n        #Swap with the largest position\n        for k in range(n-1-i,i,-1):\n            if nums[k] > nums[j]:\n                j = k\n        \n        if j!= i:\n            #Swap\n            nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_same=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list3[i]==list2[i]:\n            count_same+=1\n    return count_same\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c = 0\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Wrong length for list 1 and list 2.\"\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i]!= list3[i]:\n            c = c + 1\n    return c\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #returns 0 if the two lists are of different sizes\n    if len(list1)!= len(list2):\n        return 0\n    count = 0\n    for i in list1:\n        if i in list2:\n            count+=1\n    if count == len(list1):\n        return 1\n    else:\n        return 0\n    \n    \n    \n    \ndef main():\n    '''\n    Write a function to solve the puzzle.\n    '''\n    #solution function returns one of three possible answers\n    #finds the solution and returns 0 if no solution was found\n    print(count_samepair(\n        ['a','c','b','c','d'],\n        ['a','c','b','b','c'],\n        ['a','c','b','c','d']\n    ))\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    total = 0\n    if len(list1)==len(list2)==len(list3):\n        for i in list1:\n            if i in list2:\n                total += 1\n    else:\n        for i in list1:\n            if i in list2:\n                total += 1\n    for i in list3:\n        if i in list3:\n            total += 1\n    return total\n        \ndef main():\n    '''\n    Write a program to display the count of the elements in three given lists.\n    '''\n    list1= [1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n    list2= [1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n    list3= [1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]\n    print(\"The count of elements that are identical in the same position of three given lists is : \",count_samepair(list1,list2,list3))\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    if len(list1)==len(list2):\n        for i in range(len(list1)):\n            if list1[i]==list2[i] and list1[i] in list3:\n                count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same = []\n    for x in list1:\n        for y in list2:\n            if(x == y):\n                same.append(x)\n    for z in list3:\n        for w in list2:\n            if(z == w):\n                same.append(z)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and i>j:\n                count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    \n    for i in list1:\n        if i in list2:\n            count+=1\n            \n    for i in list2:\n        if i in list3:\n            count+=1\n            \n    return count\n    \n    \ndef count_duplicates(list1):\n    '''\n    Write a function to count the number of different items in a list.\n    '''\n    count=0\n    \n    for i in list1:\n        count+=1\n        \n    return count\n    \n    \ndef count_samepair_all(list1,list2):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    \n    for i in list1:\n        for j in list2:\n            if i==j:\n                count+=1\n                \n    return count\n    \n    \ndef count_duplicates_all(list1):\n    '''\n    Write a function to count the number of different items in a list.\n    '''\n    count=0\n    \n    for i in list1:\n        for j in list1:\n            if i==j:\n                count+=1\n    return count\n    \n    \ndef count_sameposition(list1,list2):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    \n    for i in list1:\n        if i in list2:\n            count+=1\n            \n    return count\n    \n    \ndef count_duplicates_all_position(list1):\n    '''\n    Write a function to count the number of different items in a list.\n    '''\n    count=0\n    \n    for i in list1:\n        if i in list1:\n            count+=1\n    return count\n    \n    \ndef remove_duplicates_from_list(list1):\n    '''\n    Write a function to remove duplicate items from a list.\n    '''\n    \n    list2=[i for i in list1 if i not in list1]\n    \n    return list2\n    \n    \ndef remove_duplicates_from_list_without_duplicates(list1):\n    '''\n    Write a function to remove duplicate items from a list.\n    '''\n    \n    list2=[i for i in list1 if i not in list1]\n    \n    return list2\n    \n    \ndef remove_duplicates_from_list_with_one_item(list1):\n    '''\n    Write a function to remove duplicate items from a list.\n    '''\n    \n    list2=[i for i in list1 if i not in list1[0:1]]\n    \n    return list2\n    \n    \ndef remove_duplicates_from_list_with_two_items(list1):\n    '''\n    Write a function to remove duplicate items from a list.\n    '''\n    \n    list2=[i for i in list1 if i not in list1[0:2]]\n    \n    return list2\n    \n    \ndef remove_duplicates_from_list_with_three_items(list1):\n    '''\n    Write a function to remove duplicate items from a list.\n    '''\n    \n    list2=[i for i in list1 if i not in list1[0:3]]\n    \n    return list2\n    \n    \ndef count_duplicates_with_one_item(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i in list1:\n            count+=1\n            \n    return count\n    \n    \ndef count_duplicates_with_two_items(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i in list1:\n            count+=1\n    return count\n    \n    \ndef count_duplicates_with_three_items(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i in list1:\n            count+=1\n    return count\n    \n    \ndef count_duplicates_with_all_items(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i in list1:\n            count+=1\n    return count\n    \n    \ndef count_duplicates_without_one_item(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i not in list1:\n            count+=1\n            \n    return count\n    \n    \ndef count_duplicates_without_two_items(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i not in list1[0:2]:\n            count+=1\n            \n    return count\n    \n    \ndef count_duplicates_without_three_items(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i not in list1[0:3]:\n            count+=1\n            \n    return count\n    \n    \ndef count_duplicates_without_all_items(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i not in list1[0:4]:\n            count+=1\n            \n    return count\n    \n    \ndef count_duplicates_without_one_item_with_two_items(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i not in list1[0:2]:\n            count+=1\n            \n    return count\n    \n    \ndef count_duplicates_without_two_items_with_three_items(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i not in list1[0:3]:\n            count+=1\n            \n    return count\n    \n    \ndef count_duplicates_without_three_items_with_four_items(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i not in list1[0:4]:\n            count+=1\n            \n    return count\n    \n    \ndef count_duplicates_without_all_items_with_four_items(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i not in list1[0:5]:\n            count+=1\n            \n    return count\n    \n    \ndef count_duplicates_with_one_item_without_two_items(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i not in list1[0:2]:\n            count+=1\n            \n    return count\n    \n    \ndef count_duplicates_with_two_items_without_three_items(list1):\n    '''\n    Write a function to count number of duplicate items in a list.\n    '''\n    \n    count=0\n    \n    for i in list1:\n        if i not in list1[0:3]:\n        "
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # do this with two loops\n    # one for first list\n    # one for second list\n    for x in range(len(list1)):\n        for y in range(len(list2)):\n            if (list1[x] == list2[y]):\n                if (list1[x] in list3):\n                    list3.remove(list1[x])\n                    \n    return len(list3)\n    \n    "
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #For this problem, there are three lists\n    '''\n    1. List1 is a given list\n    2. List2 is a given list\n    3. List3 is a given list\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = 0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j] == \"#\":\n                n+=1\n    return n\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List_count = 0\n    for item in Input:\n        if isinstance(item, list):\n            List_count += 1\n    return List_count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    tuple_list = list(tuple(Input))\n    return len(tuple_list)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    number_of_lists = 0\n    \n    for el in Input:\n        if type(el) == list:\n            number_of_lists += 1\n    return number_of_lists\n    \ndef find_even_list(Input):\n    '''\n    Write a function to find number of even elements in the given tuple.\n    '''\n    number_of_even_list = 0\n    for el in Input:\n        if el % 2 == 0:\n            number_of_even_list += 1\n    return number_of_even_list\n    \ndef find_odd_list(Input):\n    '''\n    Write a function to find number of odd elements in the given tuple.\n    '''\n    number_of_odd_list = 0\n    for el in Input:\n        if el % 2!= 0:\n            number_of_odd_list += 1\n    return number_of_odd_list\n    \ndef find_sum_of_lists(Input):\n    '''\n    Write a function to find sum of all the elements in the given tuple.\n    '''\n    sum_of_all_elements = 0\n    for el in Input:\n        sum_of_all_elements += el\n    return sum_of_all_elements\n    \ndef remove_duplicates(Input):\n    '''\n    Write a function to remove duplicate elements from the given list.\n    '''\n    for i in range(0, len(Input) - 1):\n        if Input[i]!= Input[i + 1]:\n            Input[i] = 0\n    return Input\n    \ndef print_tuple(Input):\n    '''\n    Write a function to print a given tuple.\n    '''\n    for i in range(0, len(Input) - 1):\n        print(Input[i], end=\" \")\n    print(Input[i + 1])\n    \ndef reverse_tuple(Input):\n    '''\n    Write a function to reverse the given tuple.\n    '''\n    Input.reverse()\n    return Input\n    \ndef rotate_tuple(Input):\n    '''\n    Write a function to rotate the given tuple in the given direction.\n    '''\n    Input.reverse()\n    Input.reverse()\n    Input.reverse()\n    return Input\n    \ndef remove_duplicates_list(Input):\n    '''\n    Write a function to remove duplicate elements from the given list.\n    '''\n    for i in range(0, len(Input) - 1):\n        if Input[i]!= Input[i + 1]:\n            Input[i] = 0\n    return Input\n    \ndef find_tuple_in_list(Input, Input_list):\n    '''\n    Write a function to find the index of the given tuple in the given list.\n    '''\n    for i in range(0, len(Input) - 1):\n        if Input[i] == Input_list[i]:\n            return i + 1\n    return -1\n    \ndef merge(Input1, Input2):\n    '''\n    Write a function to merge the two given sorted tuples.\n    '''\n    new_list = []\n    for i in range(len(Input1)):\n        new_list.append(Input1[i])\n    for i in range(len(Input2)):\n        new_list.append(Input2[i])\n    return new_list\n    \ndef count_duplicates(Input):\n    '''\n    Write a function to count duplicate elements in the given list.\n    '''\n    duplicate_index = 0\n    for i in range(0, len(Input) - 1):\n        if Input[i] == Input[i + 1]:\n            duplicate_index += 1\n    return duplicate_index\n    \ndef remove_duplicates_set(Input):\n    '''\n    Write a function to remove duplicate elements from the given set.\n    '''\n    Input_set = set(Input)\n    duplicate_index = 0\n    for i in range(0, len(Input) - 1):\n        if Input[i] in Input_set:\n            duplicate_index += 1\n            Input_set.remove(Input[i])\n    return duplicate_index\n    \ndef reverse_set(Input):\n    '''\n    Write a function to reverse the given set.\n    '''\n    new_set = set(Input)\n    for i in range(len(new_set) - 1, -1, -1):\n        new_set.remove(new_set[i])\n    return new_set\n    \ndef merge_2_lists(Input1, Input2):\n    '''\n    Write a function to merge the given two lists.\n    '''\n    new_list = []\n    for el in Input1:\n        new_list.append(el)\n    for el in Input2:\n        new_list.append(el)\n    return new_list\n    \ndef sort_tuple(Input):\n    '''\n    Write a function to sort the given tuple.\n    '''\n    for i in range(len(Input) - 1):\n        if Input[i] > Input[i + 1]:\n            Input[i], Input[i + 1] = Input[i + 1], Input[i]\n    return Input\n    \ndef find_duplicates_set(Input):\n    '''\n    Write a function to find duplicate elements in the given set.\n    '''\n    duplicate_index = 0\n    for i in range(len(Input) - 1):\n        if Input[i] in set(Input):\n            duplicate_index += 1\n    return duplicate_index\n    \ndef get_sorted_tuple(Input):\n    '''\n    Write a function to sort the given tuple.\n    '''\n    sorted_tuple = []\n    for el in Input:\n        sorted_tuple.append(el)\n    sorted_tuple.sort()\n    return sorted_tuple\n    \ndef swap_tuple(Input):\n    '''\n    Write a function to swap the first and last element of the given tuple.\n    '''\n    Input[0] = Input[-1]\n    Input[-1] = Input[0]\n    return Input\n    \ndef get_sorted_list(Input):\n    '''\n    Write a function to sort the given tuple.\n    '''\n    sorted_list = []\n    for el in Input:\n        sorted_list.append(el)\n    sorted_list.sort()\n    return sorted_list\n    \ndef get_sorted_tuple_in_list(Input):\n    '''\n    Write a function to sort the given tuple in the given list.\n    '''\n    input_list = []\n    for el in Input:\n        input_list.append(el)\n    input_list.sort()\n    return input_list\n    \ndef get_sorted_list_in_list(Input):\n    '''\n    Write a function to sort the given list.\n    '''\n    input_list = []\n    for el in Input:\n        input_list.append(el)\n    input_list.sort()\n    return input_list\n    \ndef sort_list(Input):\n    '''\n    Write a function to sort the given list.\n    '''\n    Input.sort()\n    return Input\n    \ndef append_in_list(Input, Input_list):\n    '''\n    Write a function to append the given element to the end of the given list.\n    '''\n    for el in Input:\n        Input_list.append(el)\n    return Input_list\n    \ndef remove_duplicates_list(Input):\n    '''\n    Write a function to remove duplicate elements from the given list.\n    '''\n    Input_list = []\n    for el in Input:\n        Input_list.append(el)\n    return remove_duplicates_list(Input_list)\n    \ndef remove_duplicates(Input):\n    '''\n    Write a function to remove duplicate elements from the given list.\n    '''\n    input_list = []\n    for el in Input:\n        input_list.append(el)\n    return remove_duplicates(input_list)\n    \ndef list_of_strings_to_integers(Input):\n    '''\n    Write a function to convert all the strings of a given list to integers.\n    '''\n    for el in Input:\n        Input.remove(el)\n        Input.append(int(e"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for item in Input:\n        if type(item)==list:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    a = []\n    i = 0\n    while i < len(Input):\n        a.append(Input[i])\n        i += 1\n    return len(a)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list1 = []\n    list2 = []\n    count = 0\n    for i in range(len(Input)):\n        if Input[i][0] == '{':\n            list1.append(Input[i])\n        elif Input[i][0] == '[':\n            list2.append(Input[i])\n    if len(list1) > 0 and len(list2) > 0:\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                if list1[i] == list2[j]:\n                    count = count + 1\n        return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Count = 0\n    for i in range(len(Input)):\n        if(Input[i][2] == 'L'):\n            Count += 1\n        else:\n            pass\n    return Count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if(Input[i][j] == 'L'):\n                count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Code goes here\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #Initialize the output array\n    out = []\n    #Assign the maximum of the array elements to the output array\n    maximum = arr[0]\n    for i in arr:\n        #If the difference is greater than the maximum,\n        #the maximum is subtracted\n        if i - maximum > maximum:\n            maximum = i-maximum\n            out.append(maximum)\n        #If the difference is less than the maximum,\n        #the maximum is added to the output array\n        elif i - maximum < maximum:\n            out.append(maximum)\n            maximum = i - maximum\n    return maximum\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = abs(arr[0] - arr[1])\n    for i in range(0, len(arr)):\n        if (arr[i]!= arr[i - 1]):\n            max_abs_diff = max(max_abs_diff, abs(arr[i] - arr[i - 1]))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Create an empty list to store the numbers that are larger than the max\n    max_lst = [] \n    \n    for i in range(0, len(arr)):\n        if arr[i] > max_lst[i-1]:\n            max_lst.append(arr[i])\n        else:\n            max_lst.append(0)\n    \n    # Create an empty list to store the numbers that are smaller than the max\n    min_lst = []\n    for i in range(0, len(arr)):\n        if arr[i] < min_lst[i-1]:\n            min_lst.append(arr[i])\n        else:\n            min_lst.append(0)\n    \n    # Compute the absolute difference\n    abs_diff = 0\n    for i in range(0, len(arr)):\n        abs_diff = abs(max_lst[i] - min_lst[i])\n        \n    # Return the absolute difference\n    return abs_diff\n        \n    "
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff = 0\n    for i in range(0, len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            diff += 1\n    return diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maximum = -float(\"inf\")\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            temp = abs(arr[i] - arr[j])\n            if temp > maximum:\n                maximum = temp\n    return maximum\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            diff=abs(arr[i]-arr[j])\n            if diff>max_diff:\n                max_diff=diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Abs_diff = arr[0] - arr[1]\n    for i in range(1, len(arr)):\n        max_Abs_diff = max(max_Abs_diff, arr[i] - arr[i - 1])\n    return max_Abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_len = len(arr)\n    max_abs_diff = -arr[0]\n    for i in range(1,arr_len):\n        max_abs_diff = max(arr[i] - max_abs_diff, max_abs_diff)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0]\n    max_index = 0\n    min_diff = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_diff:\n            max_diff = arr[i]\n            max_index = i\n        if arr[i] < min_diff:\n            min_diff = arr[i]\n    return max_index - min_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)==1:\n        return arr[0]\n    else:\n        arr = sorted(arr)\n        return arr[0] - arr[1]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # create a list to store the solution\n    sol = []\n    # iterate through the given b numbers\n    for i in range(0, n):\n        # iterate through the given a numbers\n        for j in range(0, n):\n            # if the b numbers are equal then exit\n            if (a[i] == b[j]):\n                return (i, j)\n            # if the b numbers are greater than a[i] then exit\n            elif (a[i] > b[j]):\n                return None\n    # if no solution exists return None\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    answer = None\n    for i in range(0, n):\n        # \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b\n        if a[i] + b[i] == n:\n            return (a[i], b[i])\n        else:\n            # \u0435\u0441\u043b\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430 \u043d\u0435\u0442, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c None, \u0435\u0441\u043b\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430 \u0435\u0441\u0442\u044c, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u0443\u044e \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443.\n            # \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430 \u043d\u0435\u0442, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c None\n            if i == 0:\n                answer = (a[i], b[i])\n            else:\n                # \u0435\u0441\u043b\u0438 \u043d\u0430\u0448\u043b\u0438 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0443\u043c\u043c\u0443, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c None\n                if a[i] + b[i] > n:\n                    answer = None\n                # \u0435\u0441\u043b\u0438 \u043d\u0430\u0448\u043b\u0438 \u0434\u0440\u0443\u0433\u0443\u044e \u0438\u043d\u0434\u0435\u043a\u0441, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u0432 \u0432\u044b\u0432\u043e\u0434\n                elif a[i] + b[i] == n and i == 0:\n                    answer = i\n                # \u0435\u0441\u043b\u0438 \u043d\u0430\u0448\u043b\u0438 \u0434\u0440\u0443\u0433\u0443\u044e \u0438\u043d\u0434\u0435\u043a\u0441, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0435\u0451 \u0438\u043d\u0434\u0435\u043a\u0441\n                elif a[i] + b[i] == n and i == 0:\n                    answer = a[i]\n                # \u0435\u0441\u043b\u0438 \u043d\u0430\u0448\u043b\u0438 \u0434\u0440\u0443\u0433\u0443\u044e \u0438\u043d\u0434\u0435\u043a\u0441, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0435\u0433\u043e \u0441\u0443\u043c\u043c\u0443\n                elif a[i] + b[i] == n and i == 0:\n                    answer = a[i] + b[i]\n                # \u0435\u0441\u043b\u0438 \u043d\u0430\u0448\u043b\u0438 \u0434\u0440\u0443\u0433\u0443\u044e \u0438\u043d\u0434\u0435\u043a\u0441, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043d\u0430\u0448\u043b\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443\n                else:\n                    answer = a[i] + b[i]\n    return answer\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if(a <= 0 or b <= 0 or a > n or b > n or a % 2!= 0 or b % 2!= 0):\n        return None\n    \n    x = []\n    y = []\n    for i in range(a, n + 1):\n        for j in range(b, n + 1):\n            if i % 2 == 0 and j % 2 == 0:\n                x.append(i)\n                y.append(j)\n            elif i % 2 == 0:\n                x.append(i)\n            elif j % 2 == 0:\n                y.append(j)\n    \n    if x == [] or y == []:\n        return None\n    \n    return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    try:\n        a = int(a)\n        b = int(b)\n        n = int(n)\n    except ValueError:\n        return None\n    if a <= 0 or b <= 0 or n <= 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = 0, 1\n    if (a * b == n):\n        return (x, y)\n    elif (a * b < n):\n        return None\n    else:\n        while x < n:\n            x, y = (x + b) % n, y % n\n        if (x == n-1 and y == n-1):\n            return (x, y)\n        else:\n            return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    print('a: ',a)\n    print('b: ',b)\n    print('n: ',n)\n    \n    if n < 3:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    global primes\n    primes = primes + list(range(2, n))\n    solution = None\n    if len(primes) == 2:\n        return solution\n    if len(primes) % 2 == 0:\n        p = primes[len(primes)//2]\n        p1 = primes[(len(primes)//2)+1]\n        if a == 0 or b == 0:\n            return None\n        if a <= 0 or b <= 0:\n            return None\n        if a%p == 0 and b%p == 0:\n            solution = (a//p,b//p)\n            return solution\n        if a%p == 0 and b%p!= 0:\n            solution = (a//p,b//p)\n            return solution\n        if a%p!= 0 and b%p == 0:\n            solution = (a//p,b//p)\n            return solution\n        if a%p!= 0 and b%p!= 0:\n            solution = (a//p,b//p)\n            return solution\n        solution = None\n    if len(primes) % 2 == 1:\n        p = primes[len(primes)//2]\n        p1 = primes[len(primes)//2-1]\n        if a == 0 or b == 0:\n            return None\n        if a <= 0 or b <= 0:\n            return None\n        if a%p == 0 and b%p == 0:\n            solution = (a//p,b//p)\n            return solution\n        if a%p == 0 and b%p!= 0:\n            solution = (a//p,b//p)\n            return solution\n        if a%p!= 0 and b%p == 0:\n            solution = (a//p,b//p)\n            return solution\n        if a%p!= 0 and b%p!= 0:\n            solution = (a//p,b//p)\n            return solution\n        solution = None\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return (a[0], b[0])\n    if n == 2:\n        return (a[0], b[0])\n    if a[0] > a[1] and b[0] > b[1]:\n        return (a[0], b[0])\n    if a[0] > a[1] and b[0] < b[1]:\n        return (b[0], a[1])\n    if a[0] < a[1] and b[0] > b[1]:\n        return (a[0], b[1])\n    if a[0] < a[1] and b[0] < b[1]:\n        return (b[0], a[1])\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    \n    if a * n == b:\n        x = n\n        y = b\n        return x, y\n    \n    elif (a == b):\n        return a, b\n    \n    elif (a * b == n):\n        return None\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                del list1[i]\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] == list1[j]:\n                pass\n            else:\n                result.append(list1[i])\n                list1.remove(list1[i])\n        list1.remove(list1[i])\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list1 + list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # list1.pop(0)\n    # list2.pop(0)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) == 0:\n        return None\n    \n    if len(list2) == 0:\n        return None\n        \n    for element in list1:\n        list2.remove(element)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list2.remove(j)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    a=0\n    while a<len(list1):\n        list1.pop(a)\n        a+=1\n    b=0\n    while b<len(list2):\n        list2.pop(b)\n        b+=1\n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for el in list1:\n        if el not in list2:\n            result.append(el)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # append list1 elements to end of list2\n    list1.extend(list2)\n    # remove elements from list2\n    for i in range(len(list2)):\n        list2.pop(0)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n*n\n    else:\n        return n + (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    return n + (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i<n//2:\n        total+=i\n        i+=1\n    return total\ndef sum_series_2(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i<n//2:\n        total+=i\n        i+=1\n    return total\ndef sum_series_3(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i<n//2:\n        total+=i\n        i+=1\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(n)\n    if n % 2 == 1:\n        return n\n    else:\n        return n - (n - 2) + (n - 4)\n        \ndef sum_series2(n):\n    '''\n    n = int(input())\n    return n - 2 * sum_series(n) + sum_series(n-2) + sum_series(n-3) +... + sum_series(n-n)\n    '''\n    n = int(n)\n    if n % 2 == 1:\n        return n\n    else:\n        return n - (n - 2) + (n - 4)\n        \ndef sum_series3(n):\n    '''\n    n = int(input())\n    return sum_series(n - 2 * i + j) + sum_series(n - 2 * i + j - 2) +... + sum_series(n - i)\n    '''\n    n = int(n)\n    if n % 2 == 1:\n        return n\n    else:\n        return sum_series(n - 2 * (n // 2)) + sum_series(n - 2 * (n // 2) - 2) + sum_series(n - 2 * (n // 2) - 4) +... + sum_series(n - n)\n        "
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n*(n+1)/2 + (n-2)*(n-4) + (n-3)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return n\n    return sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(0, n // 2 + 1):\n        s += i\n    return s\n    \ndef reverse_string(n):\n    '''\n    Write a function to reverse string. (Reverse the string and write it to the string in reverse order).\n    '''\n    str = \"\"\n    for i in range(0, n, 1):\n        str += str(i)\n    return str\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n//2):\n        s += i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n*sum_series(n-1)+sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    x = 0\n    for i in range(0, n // 2):\n        x += i\n    return x\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area_poly = 0\n    for i in range(s):\n        area_poly += l*(2*pi)**i/s\n    return area_poly\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0\n    for i in range(0,l):\n        a = a + s\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    if s < 2:\n        return 0\n    return (l**2)*tan(pi/l)\n    \ndef area_square(s, l):\n    '''\n    Write a function to calculate the area of a regular square given the length and number of its sides.\n    '''\n    if s < 2:\n        return 0\n    return (l**2)*pi\ndef area_circle(s, l):\n    '''\n    Write a function to calculate the area of a circle given the radius and number of its sides.\n    '''\n    if s < 2:\n        return 0\n    return pi*s*s\ndef area_trapezoid(s, l):\n    '''\n    Write a function to calculate the area of a trapezoid given the side and base lengths of its sides.\n    '''\n    if s < 2:\n        return 0\n    return (l/2) * (l/4) * (l/2)\ndef area_square_trapezoid(s, l):\n    '''\n    Write a function to calculate the area of a square of given side and base lengths.\n    '''\n    if s < 2:\n        return 0\n    return s*(s/2) * (s/4) * (s/2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if (len(l)!= 4):\n        raise ValueError(\"The length of sides must be 4\")\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = s/2\n    l = l/2\n    a = l*((s*(s-1))/2)\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * (l ** 2)\ndef area_circle(r, f):\n    '''\n    Write a function to calculate the area of a circle given its radius and a given half angle.\n    '''\n    return pi * f * r**2\ndef area_sphere(r, f):\n    '''\n    Write a function to calculate the area of a sphere given its radius and half angle.\n    '''\n    return r**2 * tan(f/2)\ndef area_cube(r):\n    '''\n    Write a function to calculate the area of a cube given its diameter.\n    '''\n    return (r**3)*4/3\ndef area_cylinder(r, f):\n    '''\n    Write a function to calculate the area of a cylinder given its diameter and half angle.\n    '''\n    return pi*f**2 *(r**2)*tan(f/2)\ndef area_axial(r, f):\n    '''\n    Write a function to calculate the area of an axial surface given its diameter.\n    '''\n    return r**2*f*tan(f/2)\ndef area_hexagon(r, f):\n    '''\n    Write a function to calculate the area of a hexagonal surface given its diameter.\n    '''\n    return (r**2 * f*tan(f/2))**2\ndef area_elipsus(r, f):\n    '''\n    Write a function to calculate the area of an elipsoid given its diameter.\n    '''\n    return (r**2 * f*tan(f/2))**2\ndef area_torus(r, f):\n    '''\n    Write a function to calculate the area of a torus given its diameter.\n    '''\n    return (r**2 * f*tan(f/2))**2\ndef area_sphere_2(r, f):\n    '''\n    Write a function to calculate the area of a spherical surface given its diameter.\n    '''\n    return r**2 * tan(f/2)**2\ndef area_rectangle(r1, r2):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1**2 + r2**2)**0.5\ndef area_circle_2(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return (r**2)**0.5\ndef area_rectangle_2(r1, r2):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1*r2)**0.5\ndef area_rectangle_3(r1, r2, r3):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1*r2*r3)**0.5\ndef area_rectangle_4(r1, r2, r3, r4):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1*r2*r3*r4)**0.5\ndef area_rectangle_5(r1, r2, r3, r4, r5):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1*r2*r3*r4*r5)**0.5\ndef area_rectangle_6(r1, r2, r3, r4, r5, r6):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1*r2*r3*r4*r5*r6)**0.5\ndef area_rectangle_7(r1, r2, r3, r4, r5, r6, r7):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1*r2*r3*r4*r5*r6*r7)**0.5\ndef area_square(r):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return (r**2)**0.5\ndef area_rectangle_8(r1, r2, r3, r4):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1**2 + r2**2 + r3**2 + r4**2)**0.5\ndef area_rectangle_9(r1, r2, r3, r4, r5):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1**2 + r2**2 + r3**2 + r4**2*r5)**0.5\ndef area_rectangle_10(r1, r2, r3, r4, r5, r6, r7, r8):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1**2 + r2**2 + r3**2 + r4**2*r5*r6*r7*r8)**0.5\ndef area_rectangle_11(r1, r2, r3, r4, r5, r6, r7, r8, r9):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1**2 + r2**2 + r3**2 + r4**2*r5*r6*r7*r8*r9)**0.5\ndef area_rectangle_12(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1**2 + r2**2 + r3**2 + r4**2*r5*r6*r7*r8*r9*r10)**0.5\ndef area_rectangle_13(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1**2 + r2**2 + r3**2 + r4**2*r5*r6*r7*r8*r9*r10*r11*r12)**0.5\ndef area_rectangle_14(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1**2 + r2**2 + r3**2 + r4**2*r5*r6*r7*r8*r9*r10*r11*r12*r13*r14)**0.5\ndef area_rectangle_15(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return (r1**2 + r2**2 + r3**2 + r4**2*r5*r6*r7*r8*r9*r10*r11*r12*r13*r14*r15)**0.5\ndef area_rectangle_16(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * pi * s * l\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def calc_area(l, s):\n        try:\n            area = (2 * (l * tan(s/2)))\n            return area\n        except ValueError:\n            print(\"A valid side of the polygon must be a number\")\n            calc_area(l, s)\n    return calc_area(l, s)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    for i in range(len(s)):\n        s[i] = int(s[i])\n    # return round(abs(s[0] * s[-1]) ** 0.5)\n    return round((abs(s[0] * s[-1]) ** 0.5) * s[1] * s[0])\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    for i in range(len(s)):\n        s[i] = s[i] * l\n    return sum(s)\ndef area_rectangle(l):\n    '''\n    Write a function to calculate the area of a rectangular polygon given the length and width.\n    '''\n    return l * l * 2\ndef area_triangle(l, l_ = l):\n    '''\n    Write a function to calculate the area of a triangle given the length and sides.\n    '''\n    return l * l_ * 2\ndef area_parallelogram(l):\n    '''\n    Write a function to calculate the area of a parallelogram given the length and number of sides.\n    '''\n    return l * l\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 2\n    while(i <= math.sqrt(n)):\n        if (n%i == 0):\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n<0:\n        n = -n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def calc_sum(x):\n        ans = 0\n        for i in range(x):\n            ans += math.pow(i,2)\n        return math.sqrt(ans)\n    #return\n    #calc_sum(n)\n    s = calc_sum(n)\n    if n % s == 0:\n        return True\n    return False\ndef euler_recursive(num):\n    if num < 2:\n        return num\n    return euler_recursive(num - 1) + num\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #Convert input to an integer\n    a, b = n\n    \n    #Find the first divisor \n    divisor = a\n    \n    while divisor <= b:\n        if a % divisor == 0 and b % divisor == 0:\n            return True\n        else:\n            divisor += 1\n    return False\n    \ndef count_divisors(n):\n    '''\n    Given an integer, return the number of divisors of the input number.\n    '''\n    #Convert input to an integer\n    a, b = n\n    \n    #Find the first divisor \n    divisor = a\n    \n    #Loop through the number of divisors\n    count = 1\n    for i in range(2, b):\n        #Check if divisor is divisible by the next divisor\n        if a % i == 0 and b % i == 0:\n            count += 1\n            #If divisor is not divisible by the next divisor, increment the count\n            if divisor!= i:\n                count += 1\n                divisor = i\n    return count\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n        if n % i == 0:\n            sum += n//i\n            \n    return sum==n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # TODO: Write your code here.\n    def divisors(n):\n        divisors = []\n        for i in range(1, n):\n            if (n % i == 0):\n                divisors.append(i)\n        if len(divisors) == 2:\n            return True\n        return False\n    while n % 2 == 0:\n        n //= 2\n    else:\n        n = n*2\n    if (n == 0):\n        return True\n    if divisors(n) == False:\n        return False\n    else:\n        return True\ndef quadratic(a,b,c):\n    '''\n    Write a function to determine if a quadratic equation is solved by the following equation.\n    E.g. ax^2+bx+c=0\n    '''\n    # TODO: Write your code here.\n    return (b*b-4*a*c) < 0\ndef quadratic_coefs(a,b,c):\n    return (-b-math.sqrt((b**2)-4*a*c))/2\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if n%i==0:\n            s+=i\n    return s==n\ndef find_divisors(n):\n    '''\n    Write a function that returns the nth divisors of an integer.\n    '''\n    n=int(n)\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if div_sum(n)==True:\n        return n\n    return find_divisors(n-1)\ndef count_divisors(n):\n    '''\n    Write a function that returns the number of divisors of an integer.\n    '''\n    div=find_divisors(n)\n    count=0\n    for i in range(1,div+1):\n        if div%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    try:\n        if n > 1:\n            if n % 10 == 0:\n                return True\n            else:\n                for i in range(1, int(math.sqrt(n)) + 1):\n                    if n % i == 0:\n                        return False\n            return True\n        else:\n            return True\n    except:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0 or n == 1:\n        return n == 0\n    elif n % 2 == 0:\n        return div_sum(n//2)\n    elif n % 2!= 0:\n        return div_sum(n//2 + 1)\n    return False\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letters_count = 0\n    for i in range(len(str1)):\n        if str1[i] not in alphabet:\n            letters_count += 1\n    return letters_count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    string1 = str(str1)\n    count = 0\n    for i in range(len(string1)):\n        if string1[i].isalpha() == True:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    x = 0\n    for i in str1:\n        x = x + str.count(i,str1)\n    return x\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    charCounts = {}\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = dict()\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for i in range(len(str1)): \n        if str1[i].isalpha() and str1[i].upper()==str1[i].lower():\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create an empty dictionary\n    dic = {}\n    for ch in str1: \n        if ch in dic.keys(): \n            dic[ch] += 1 \n        else: \n            dic[ch] = 1\n    \n    # create an empty dictionary\n    dic_2 = {}\n    for ch in str1: \n        if ch in dic_2.keys(): \n            dic_2[ch] += 1 \n        else: \n            dic_2[ch] = 1\n    \n    # create an empty dictionary\n    dic_3 = {}\n    for ch in str1: \n        if ch in dic_3.keys(): \n            dic_3[ch] += 1 \n        else: \n            dic_3[ch] = 1\n    \n    # create an empty dictionary\n    dic_4 = {}\n    for ch in str1: \n        if ch in dic_4.keys(): \n            dic_4[ch] += 1 \n        else: \n            dic_4[ch] = 1\n    \n    # create an empty dictionary\n    dic_5 = {}\n    for ch in str1: \n        if ch in dic_5.keys(): \n            dic_5[ch] += 1 \n        else: \n            dic_5[ch] = 1\n    \n    # create an empty dictionary\n    dic_6 = {}\n    for ch in str1: \n        if ch in dic_6.keys(): \n            dic_6[ch] += 1 \n        else: \n            dic_6[ch] = 1\n    \n    # create an empty dictionary\n    dic_7 = {}\n    for ch in str1: \n        if ch in dic_7.keys(): \n            dic_7[ch] += 1 \n        else: \n            dic_7[ch] = 1\n    \n    # create an empty dictionary\n    dic_8 = {}\n    for ch in str1: \n        if ch in dic_8.keys(): \n            dic_8[ch] += 1 \n        else: \n            dic_8[ch] = 1\n    \n    # create an empty dictionary\n    dic_9 = {}\n    for ch in str1: \n        if ch in dic_9.keys(): \n            dic_9[ch] += 1 \n        else: \n            dic_9[ch] = 1\n    \n    # create an empty dictionary\n    dic_10 = {}\n    for ch in str1: \n        if ch in dic_10.keys(): \n            dic_10[ch] += 1 \n        else: \n            dic_10[ch] = 1\n    \n    # create an empty dictionary\n    dic_11 = {}\n    for ch in str1: \n        if ch in dic_11.keys(): \n            dic_11[ch] += 1 \n        else: \n            dic_11[ch] = 1\n    \n    # create an empty dictionary\n    dic_12 = {}\n    for ch in str1: \n        if ch in dic_12.keys(): \n            dic_12[ch] += 1 \n        else: \n            dic_12[ch] = 1\n    \n    # create an empty dictionary\n    dic_13 = {}\n    for ch in str1: \n        if ch in dic_13.keys(): \n            dic_13[ch] += 1 \n        else: \n            dic_13[ch] = 1\n    \n    # create an empty dictionary\n    dic_14 = {}\n    for ch in str1: \n        if ch in dic_14.keys(): \n            dic_14[ch] += 1 \n        else: \n            dic_14[ch] = 1\n    \n    # create an empty dictionary\n    dic_15 = {}\n    for ch in str1: \n        if ch in dic_15.keys(): \n            dic_15[ch] += 1 \n        else: \n            dic_15[ch] = 1\n    \n    # create an empty dictionary\n    dic_16 = {}\n    for ch in str1: \n        if ch in dic_16.keys(): \n            dic_16[ch] += 1 \n        else: \n            dic_16[ch] = 1\n    \n    # create an empty dictionary\n    dic_17 = {}\n    for ch in str1: \n        if ch in dic_17.keys(): \n            dic_17[ch] += 1 \n        else: \n            dic_17[ch] = 1\n    \n    # create an empty dictionary\n    dic_18 = {}\n    for ch in str1: \n        if ch in dic_18.keys(): \n            dic_18[ch] += 1 \n        else: \n            dic_18[ch] = 1\n    \n    # create an empty dictionary\n    dic_19 = {}\n    for ch in str1: \n        if ch in dic_19.keys(): \n            dic_19[ch] += 1 \n        else: \n            dic_19[ch] = 1\n    \n    # create an empty dictionary\n    dic_20 = {}\n    for ch in str1: \n        if ch in dic_20.keys(): \n            dic_20[ch] += 1 \n        else: \n            dic_20[ch] = 1\n    \n    # create an empty dictionary\n    dic_21 = {}\n    for ch in str1: \n        if ch in dic_21.keys(): \n            dic_21[ch] += 1 \n        else: \n            dic_21[ch] = 1\n    \n    # create an empty dictionary\n    dic_22 = {}\n    for ch in str1: \n        if ch in dic_22.keys(): \n            dic_22[ch] += 1 \n        else: \n            dic_22[ch] = 1\n    \n    # create an empty dictionary\n    dic_23 = {}\n    for ch in str1: \n        if ch in dic_23.keys(): \n            dic_23[ch] += 1 \n        else: \n            dic_23[ch] = 1\n    \n    # create an empty dictionary\n    dic_24 = {}\n    for ch in str1: \n        if ch in dic_24.keys(): \n            dic_24[ch] += 1 \n        else: \n            dic_24[ch] = 1\n    \n    # create an empty dictionary\n    dic_25 = {}\n    for ch in str1: \n        if ch in dic_25.keys(): \n            dic_25[ch] += 1 \n        else: \n            dic_25[ch] = 1\n    \n    # create an empty dictionary\n    dic_26 = {}\n    for ch in str1: \n        if ch in dic_26.keys(): \n            dic_26[ch] += 1 \n        else: \n            dic_26[ch] = 1\n    \n    # create an empty dictionary\n    dic_27 = {}\n    for ch in str1: \n        if ch in dic_27.keys(): \n            dic_27[ch] += 1 \n        else: \n            dic_27[ch] = 1\n    \n    # create an empty dictionary\n    dic_28 = {}\n    for ch in str1: \n        if ch in dic_28.keys(): \n            dic_28[ch] += 1 \n        else: \n            dic_28[ch] = 1\n    \n    # create an empty dictionary\n    dic_29 = {}\n    for ch in str1: \n        if ch in dic_29.keys(): \n            dic_29[ch] += 1 \n        else: \n            dic_29[ch] = 1\n    \n    # create an empty dictionary\n    dic_30 = {}\n    for ch in str1: \n        if ch in dic_30.keys(): \n            dic_30[ch] += 1 \n        else: \n            dic_30[c"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].upper():\n            count+=1\n    return count\n        \n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_dict = {}\n    for char in alphabet:\n        count_dict[char] = 0\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n    \n    return count_dict\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0 \n    for char in str1: \n        if char.isalpha(): \n            pos = ord(char) - ord('a') \n            if pos == str1.index(char): \n                count += 1 \n    return count \n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    odd_count = 0\n    even_count = 0\n    for i in range(n): \n        for j in range(i,n):\n            if(A[i] & A[j] == 0):\n                odd_count += 1\n            else:\n                even_count += 1\n    return odd_count,even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] & A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even += 1\n    return even\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # brute force solution\n    count = 0\n    for x in A:\n        for y in A:\n            if x & y == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    num_even_pairs = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j:\n                if A[i] ^ A[j] == 0:\n                    num_even_pairs += 1\n    return num_even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    c = 0\n    for i in A:\n        if i & 1:\n            c+=1\n    return c\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    result=0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            result+=1\n            if A[i]&A[j]==0:\n                result+=1\n    return result\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_list = []\n    for x in A: \n        if x % 2 == 0: \n            even_list.append(x)\n    return even_list\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0, len(A) - 1):\n        if A[i] ^ A[i+1] == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    odd_pair = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                if A[i] % 2 == 0:\n                    even_pair += 1\n                else:\n                    odd_pair += 1\n    return even_pair, odd_pair\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while (i <= n):\n        if (n % i == 0):\n            return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        raise Exception(\"n must be greater than or equal to 1\")\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        return n//2 + next_power_of_2(n//2)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1:\n        return 1\n    while n % 2 == 0:\n        n //= 2\n    while n % 8 == 7:\n        n //= 8\n    if n % 8 == 7:\n        return 1\n    else:\n        return n**2\n    \n    \ndef next_power_of_2_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1:\n        return 1\n    while n % 2 == 0:\n        n //= 2\n    while n % 8 == 7:\n        n //= 8\n    if n % 8 == 7:\n        return 1\n    else:\n        return n**2\n        \n    \ndef smallest_power(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1:\n        return 1\n    \n    while n % 2 == 0:\n        n //= 2\n        \n    if n % 8 == 7:\n        return 1\n    else:\n        return n**2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 2\n    while (p < n):\n        p = p * 2\n    return p\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize power of 2\n    power = 1\n    # loop until power of 2 is found\n    while (power <= n):\n        # check if power of 2 is greater than or equal to n\n        if (power == n):\n            return power\n        # increment power of 2\n        power = power * 2\n    # if no power of 2 is found\n    return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 4\n    elif n>2:\n        return n**2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n <= 0): \n        return 0 \n    while (n >= 1): \n        if (n % 2!= 0): \n            return n \n        n = n // 2\n    return n \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    from math import sqrt\n    for i in range(2, int(sqrt(n) + 1)):\n        if (n % i) == 0:\n            return i\n    return "
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 1\n    elif n % 2 == 0:\n        return n // 2\n    else: \n        return n * next_power_of_2(n - 1)"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    curr = n\n    while curr < 2: \n        if curr == 1:\n            return 1\n        else:\n            curr *= 2\n    return 0\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    d={}\n    for i in a:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return len(d)\n    \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    result = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            result += 1\n    return result\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for i in range(len(a)):\n        if a[i]==x:\n            counter +=1\n    return counter\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counts = {}\n    for i in range(len(a)):\n        if a[i] in counts:\n            counts[a[i]] += 1\n        else:\n            counts[a[i]] = 1\n    return len(counts)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in a: \n        if a.count(i)==1: \n            c+=1\n    return c\na=[1,1,2,3,3,3,3,3,3,3,3,3,3,3]\nx=3\nprint(frequency(a,x))"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if x == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #Write your code here\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    lst = []\n    for item in a: \n        if item == a[x]: \n            lst.append(1)\n        else: \n            lst.append(0)\n    return lst\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    res = 0\n    if n < len(list1):\n        return sum_range_list(list1[n:], m, len(list1))\n    else:\n        if m == -1:\n            return sum_range_list(list1, 0, n)\n        else:\n            return sum_range_list(list1[:m], 0, len(list1)) + sum_range_list(list1[m+1:], m, len(list1))\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum([list1[i] for i in range(m, n)])\n    \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    if n <= len(list1):\n        return sum(list1[:n])\n    else:\n        return 0\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if m < n:\n        for i in range(m, n):\n            sum += list1[i]\n        return sum\n    else:\n        for i in range(m, n + 1):\n            sum += list1[i]\n        return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    def sum(list1, m, n):\n        sum = 0\n        for i in range(m, n):\n            sum += list1[i]\n        return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    # YOUR CODE HERE\n    # TODO: use a for-loop to iterate over the range of (m,n) and sum up all the numbers from 0 to m\n    #       and all the numbers from n to n+1 and return the total\n    \n    i = m\n    j = n\n    \n    # TODO: find the sum of all the numbers from 0 to m\n    #       and all the numbers from n+1 to n+1+m and return the total\n    \n    # Hint: You may not use while/for loops\n    #       the number of range loops for a given range is dependent on the range of values in the list\n    #       Try to write a function that is a bit more complicated, so you can do the same\n    #       question: What is the maximum of all the numbers from 0 to m?\n    \n    list = [0,0]\n    \n    while i <= m:\n        while j >= n:\n            list.append(list[j] + list[j-m])\n            j -= 1\n        i += 1\n    \n    return sum(list)"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for x in list1:\n        s = s + x\n    if n == 0:\n        return s\n    else:\n        return sum_range_list(list1, m, n-1) + sum_range_list(list1, m, n-1)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    res = 0\n    for i in range(m, n):\n        res += list1[i]\n    return res\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:i+m]) + sum(list1[i+m:i+m+n])\n    \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) > 0:\n        num1 = list1[0]\n        num2 = list1[1]\n        if m < n:\n            return sum_range_list(list1, m, n-1)\n        elif m == n:\n            return num1 + num2\n        else:\n            if num2 < m:\n                return sum_range_list(list1, m, n-1) + num2\n            else:\n                return sum_range_list(list1, m, n)\n    else:\n        return 0"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_quadrilateral(a):\n    '''\n    Write a function to find the perimeter of a regular quadrilateral from the length of its sides.\n    '''\n    return 2 * a\ndef area_quadrilateral(a):\n    '''\n    Write a function to find the area of a regular quadrilateral from the length of its sides.\n    '''\n    return 2 * math.pow(a,2)\ndef perimeter_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_tetrahedron(a):\n    '''\n    Write a function to find the area of a regular tetrahedron from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_hexahedron(a):\n    '''\n    Write a function to find the perimeter of a regular heptahedron from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_hexahedron(a):\n    '''\n    Write a function to find the area of a regular heptahedron from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_octahedron(a):\n    '''\n    Write a function to find the perimeter of a regular octahedron from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_octahedron(a):\n    '''\n    Write a function to find the area of a regular octahedron from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_dodecahedron(a):\n    '''\n    Write a function to find the perimeter of a regular dodecahedron from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_dodecahedron(a):\n    '''\n    Write a function to find the area of a regular dodecahedron from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_screw(a):\n    '''\n    Write a function to find the perimeter of a regular screw from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_screw(a):\n    '''\n    Write a function to find the area of a regular screw from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_tetrahedron_v1(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_tetrahedron_v1(a):\n    '''\n    Write a function to find the area of a regular tetrahedron from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_triangle(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a regular circle from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_circle(a):\n    '''\n    Write a function to find the area of a regular circle from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_quad(a):\n    '''\n    Write a function to find the perimeter of a regular quad from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(5)\ndef area_quad(a):\n    '''\n    Write a function to find the area of a regular quad from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_hexahedron_v1(a):\n    '''\n    Write a function to find the perimeter of a regular heptahedron from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_hexahedron_v1(a):\n    '''\n    Write a function to find the area of a regular heptahedron from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_octahedron_v1(a):\n    '''\n    Write a function to find the perimeter of a regular octahedron from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_octahedron_v1(a):\n    '''\n    Write a function to find the area of a regular octahedron from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_dodecahedron_v1(a):\n    '''\n    Write a function to find the perimeter of a regular dodecahedron from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_dodecahedron_v1(a):\n    '''\n    Write a function to find the area of a regular dodecahedron from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef area_tetrahedron_v1(a):\n    '''\n    Write a function to find the area of a regular tetrahedron from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef perimeter_triangle_v2(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_triangle_v2(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    return math.pow(2 * math.pi * a, 2)\ndef perimeter_square_v2(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3)\ndef area_square_v2(a):\n    '''\n    Write a function t"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return round(math.sqrt(4 * a * math.pi),2)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Base case. If the input is an even number.\n    if a % 2 == 0:\n        return (a / 2) * 5 * (3 * 3 + 2)\n    else:\n        # If the input is an odd number.\n        return (a / 2) * 5 * (3 * 3 + 2) + 5 * (3 * 3 + 1)\n        "
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a <= 0:\n        print(\"perimeter of a pentagon must be positive\")\n        exit()\n    if type(a) is float:\n        print(\"perimeter of a pentagon must be a float\")\n        exit()\n    return round(2 * math.sqrt(a ** 2 - a ** 4))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    L = len(a)\n    s = 0\n    if (L == 0):\n        return 0\n    for i in range(L-1):\n        s += math.sqrt(2*a[i]*a[i+1])\n    return s\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #return a*5 + 4*(a+1)**2 + 4*a**2\n    p = a*5 + 4*(a+1)**2 + 4*a**2\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    m = (a[0] + a[1] + a[2]) / 2\n    return m\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # TODO: Write your code here\n    side1 = (a*4) - 2*a\n    side2 = a*3\n    side3 = a*4\n    side4 = a*5\n    side5 = a*6\n    side6 = a*7\n    side7 = a*8\n    side8 = a*9\n    side9 = a*10\n    side10 = a*11\n    side11 = a*12\n    side12 = a*13\n    perimeter = (side1 + side2 + side3 + side4 + side5 + side6 + side7 + side8 + side9 + side10 + side11 + side12)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the perimeter of the regular pentagon\n    perimeter = math.sqrt(a**2 + a**4 + a**6 + a**8)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sum = 0\n    for i in range(3):\n        sum += (a * i + (a * i + 1) / 2) / 2\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s_list = s.split()\n    occurance_list = {}\n    for i in s_list:\n        if i in occurance_list:\n            occurance_list[i] += 1\n        else:\n            occurance_list[i] = 1\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    my_dict = {}\n    for char in s:\n        if char in my_dict:\n            my_dict[char]+=1\n        else:\n            my_dict[char]=1\n    print(my_dict)\n    return my_dict\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    d = dict()\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    \n    return len(d)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    n=0\n    for i in range(len(s)):\n        if s[i]=='d':\n            n+=1\n    return n\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if not s:\n        return 0\n    \n    count = 0\n    s = s.lower()\n    for c in s:\n        if c=='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    import re\n    count = 0\n    n = s\n    print('n',n)\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if re.search(s[i],s[j]):\n                count+=1\n    print(count)\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #count the occurance of string'std' in a given string\n    dic = {}\n    dic['std'] = s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return len(s.replace(s,s).count(s))\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_type = test_tuple[0]\n    test_items = test_tuple[1]\n    test_item_types = []\n    for item in test_items:\n        test_item_types.append(item.__class__)\n    test_type_no_type = len(test_item_types) == 1 and test_item_types[0] == test_type\n    if test_type_no_type:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    if (len(test_tuple) == 3):\n        return True\n    else:\n        return False\n    \n    # DO NOT TOUCH\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type_list = []\n    for element in test_tuple:\n        data_type_list.append(type(element))\n    data_type_list = list(set(data_type_list))\n    return data_type_list\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check_type = True\n    for i in range(len(test_tuple)):\n        if not isinstance(test_tuple[i], str):\n            check_type = False\n            break\n        if not isinstance(test_tuple[i], float):\n            check_type = False\n            break\n        if not isinstance(test_tuple[i], int):\n            check_type = False\n            break\n    return check_type\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = []\n    for element in test_tuple:\n        data_type.append(type(element))\n    if len(data_type)!= 1:\n        raise Exception('\\n\\nData type mismatch!\\n\\n')\n    return data_type[0]\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = test_tuple[2]\n    for x in test_tuple:\n        if type(x)!= data_type:\n            raise ValueError(\"Type is not correct.\")\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if not isinstance(i, str) and not isinstance(i, float) and not isinstance(i, int):\n            raise TypeError(\"Not a valid data type\")\n    for i in test_tuple:\n        if not isinstance(i, str):\n            raise TypeError(\"Not a valid data type\")\n    # check type of all elements in tuple\n    for i in test_tuple:\n        if not isinstance(i, str):\n            raise TypeError(\"Not a valid data type\")\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_type = test_tuple[0]\n    test_element = test_tuple[1]\n    \n    if test_type == int and test_element == int:\n        return True\n    elif test_type == int and test_element == float:\n        return True\n    elif test_type == float and test_element == int:\n        return True\n    elif test_type == float and test_element == float:\n        return True\n    elif test_type == str and test_element == str:\n        return True\n    elif test_type == str and test_element == bytes:\n        return True\n    else:\n        return False\n    \ndef get_list_from_string(string_tuple):\n    '''\n    Write a function to get a list from a string of numbers or characters.\n    '''\n    try:\n        if type(string_tuple[0]) is int:\n            return int(string_tuple[0])\n        elif type(string_tuple[0]) is float:\n            return float(string_tuple[0])\n        elif type(string_tuple[0]) is str:\n            return string_tuple[0]\n        elif type(string_tuple[0]) is bytes:\n            return string_tuple[0].decode()\n    except Exception as e:\n        print(e)\n        return None\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the tuple\n    tuple_to_check = test_tuple[0]\n    # Iterate through each element in tuple\n    for element in tuple_to_check:\n        # Check the type\n        if not isinstance(element, str):\n            print('Your tuple is not string.')\n            return False\n    # Return True if all elements of the tuple have same type or not\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(x) == test_tuple[1] for x in test_tuple)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # If the array has a length of n, the majority element is the element at index 0.\n    if n <= 1:\n        return True\n    # The number of occurrences of the majority element in the array.\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    # The number of occurrences of the majority element is divisible by n/2.\n    if count % 2 == 1:\n        return True\n    # The majority element is the first occurrence of the majority element.\n    return is_majority(arr, n//2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        arr.sort()\n        print(arr)\n        res = 0\n        i = 0\n        while i < n:\n            if res < arr[i]:\n                res = arr[i]\n            i += 1\n        if res == x:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if the array is empty\n    if n == 0:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize result array\n    result = []\n    \n    # Loop through the array\n    for i in range(n):\n        \n        # Set the count variable to be 1\n        count = 1\n        \n        # Loop through the elements of the array\n        for j in range(n):\n            \n            # If the current count is greater than the number of elements in the array\n            # Set count = count + 1\n            if count > x:\n                count = 0\n                \n            # If the count is greater than the number of elements in the array\n            # Set count = count + 1\n            if count > 0:\n                count += 1\n        \n        # If the count is less than the number of elements in the array\n        # Set count = 0\n        if count < x:\n            count = 0\n        \n        # Add the count to the result array\n        result.append(count)\n    \n    # Return the result array\n    return result\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    \n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    for i in range(n):\n        if arr[i] == x:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    \n    if arr[n] == x:\n        return True\n    \n    return (arr[n] == arr[n//2] and is_majority(arr[:n//2], n//2, x)) or (arr[n] == arr[n//2] and is_majority(arr[:n//2], n//2, x))\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # find the leftmost value\n    l = 0\n    l_x = arr[0]\n    for i in range(1, n):\n        if arr[i] == l_x:\n            l += 1\n        elif arr[i] < l_x:\n            l = 0\n            l_x = arr[i]\n        else:\n            l = 0\n            l_x = arr[i]\n    # find the rightmost value\n    r = n - 1\n    r_x = arr[-1]\n    for i in range(n - 1, -1, -1):\n        if arr[i] == r_x:\n            r -= 1\n        elif arr[i] > r_x:\n            r = 0\n            r_x = arr[i]\n        else:\n            r = 0\n            r_x = arr[i]\n    return (l, r) < (x, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # If the length is 0 or 1, return False\n    if n == 0 or n == 1:\n        return False\n    # Find the largest element\n    index = 0\n    largest = 0\n    for index in range(n):\n        if arr[index] > largest:\n            largest = arr[index]\n    # If the largest element is not majority element, return False\n    if largest == x:\n        return False\n    # If the largest element is majority element, return True\n    else:\n        return True\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code here\n    count = 0\n    if n <= 0: \n        print(\"Error : n must be non-negative\")\n    else: \n        for i in range(2, n): \n            if (n % 2) == 0: \n                count += 1\n            else: \n                count += 2 \n    print(count)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    cnt = 0\n    for i in range(n): \n        if (n & (1 << i))!= 0: \n            cnt += 1\n    return cnt\n    \ndef count_Set_Bits2(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    cnt = 0\n    for i in range(n): \n        if (n & (1 << i))!= 0: \n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = bin(n)[2:]\n    s = '0'*(len(s)-len(s[::-1]))+s\n    return s\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    if n <= 0:\n        print(\"The input must be a positive integer.\")\n    else:\n        while n!= 0:\n            if n % 2 == 1:\n                count = count + 1\n            n = n // 2\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    lst = []\n    count = 0\n    for i in range(n):\n        lst.append(bin(i)[2:])\n        count+=1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bits = 0\n    while n>0: \n        n, r = divmod(n, 2)\n        bits+=r\n    return bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    num = n\n    while (num > 0):\n        rem = num % 2\n        count = count + rem\n        num = num // 2\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(n):\n        if(n&1==0):\n            count+=1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bits_count = 0\n    for i in range(0,len(n)-1): \n        # if n[i] is 1 than break the loop\n        if n[i] == 1:\n            # as we saw the last bit is 1,\n            # we will increment the total bits in set bit by 1\n            # (i.e., the number of bits that are set)\n            bits_count += 1\n        # if n[i] is 0 than break the loop\n        if n[i] == 0:\n            break\n    return bits_count \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Your code here\n    return count_set_bits(n)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string = str\n    odd = []\n    odd_index = 0\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(len(str)-1):\n        if str[i]%2==1:\n            str[i] = str[i]\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_indexes = []\n    for i, char in enumerate(str):\n        if i % 2 == 1:\n            odd_indexes.append(char)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for index in range(len(str)):\n        if index % 2 == 0:\n            new_str += str[index]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    # create a string with the character which has odd index values\n    odd_values_str = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_values_str.append(str[i])\n    \n    # create a string with the characters which have odd index values\n    odd_values_str = ''.join(odd_values_str)\n    \n    # return the string\n    return odd_values_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # your code here\n    return str.replace('x', '').replace('X', '').replace('+', '').replace('=', '')\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list_of_strings = []\n    for char in str:\n        if char == \" \":\n            pass\n        else:\n            list_of_strings.append(char)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.replace('.','')\n    str = str.replace('-','')\n    str = str.replace(' ','')\n    str = str.replace(',',' ')\n    str = str.replace('(','')\n    str = str.replace(')','')\n    str = str.replace('\"','')\n    str = str.replace(\"'\",'')\n    str = str.replace(\" \", \"\")\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            str[i] = str[i]\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    new_string = \"\"\n    \n    #Iterate through string\n    for x in range(len(str)):\n        #If odd index character then add it to new string\n        if x%2 == 0:\n            new_string += str[x]\n    return new_string\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and b>c:\n        return b\n    elif a>b and c>b:\n        return c\n    elif a>c and b>c:\n        return b\n    elif a>c and c>c:\n        return c\n    \n    return a\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and b<c:\n        return a\n    elif a<c and c<b:\n        return b\n    else:\n        return c\n    \ndef mean(a,b,c):\n    '''\n    Write a function to find mean of three numbers.\n    '''\n    return (a+b+c)/3\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b:\n        return c\n    elif a == b:\n        return c\n    elif a == c:\n        return b\n    elif b == c:\n        return a\n    else:\n        return a \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return (a if a < b else b if a < c else c)\n    "
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        print(a)\n    elif b > a and b > c:\n        print(b)\n    elif c > a and c > b:\n        print(c)\n    else:\n        print(\"At least one of the numbers is greater than one of the other\")\n        \nnumbers = [5,4,3,2,1]\nmin_of_three(numbers[0],numbers[1],numbers[2])\nmin_of_three(numbers[3],numbers[2],numbers[1]"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<c<a:\n        return b\n    else:\n        return c\n        \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and b<c:\n        return b\n    elif b<a and a<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    if b < a and b < c:\n        return b\n    if c < a and c < b:\n        return c\n    \n    return min(min_of_three(a,b,c-1), min_of_three(a-1,b,c))\n    \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b == c:\n        return a\n    if a<b:\n        return b\n    if b<c:\n        return c\n    return a\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # write your code here\n    if a > b > c:\n        return a\n    if a > b < c:\n        return b\n    if b > a < c:\n        return c\n    return a\n    "
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<n:\n        return False\n    if r>n:\n        return False\n    for i in range(l,r):\n        if n&i==0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    def get_Bits(i):\n        '''\n        Get the bits in the given range i and return the result in a string.\n        '''\n        return ''.join(format(ord(x), 'b') for x in str(bin(i)[2:]))\n    \n    def set_Bits(i):\n        '''\n        Set the bits in the given range i and return the result in a string.\n        '''\n        return ''.join(format(ord(x), 'b') for x in str(bin(i)[2:].zfill(8)))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r):\n        if(i & 1 == 1):\n            print(i)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (sum(i & 1 for i in range(n,l-1,-1)) == 0) and (sum(i & 1 for i in range(l,r+1)) == 0)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return False\n    if n <= 0:\n        return False\n    elif n > r:\n        return False\n    i = n - l\n    while (i >= 0):\n        j = i - l\n        if (j >= 0):\n            if (Bits_Set(j,n) == False):\n                return False\n        i -= 1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #print(\"here's your range for %s: %s and %s\" %(n,l,r))\n    #print(bin(l))\n    #print(bin(r))\n    #print(l)\n    #print(r)\n    #print(n)\n    #print(bin(n))\n    if (l&n)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n & (1 << i):\n            print(\"All Bits Set\")\n        else:\n            print(\"All Bits Unset\")\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == n and r == n:\n        print(\"all bits are unset\")\n        return True\n    if n > l and n < r:\n        if n & (n-1) == 0:\n            print(\"all bits are unset\")\n            return True\n        if n & (n-1) == 0:\n            print(\"unset bits are not present in the range\")\n            return False\n        if n & (n-1) == 0:\n            print(\"unset bits are present in the range\")\n            return False\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    return all_bits_in_the_given_range(n,l,r,1) and all_bits_in_the_given_range(n,l,r,0)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = sorted(arr)\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) <= n:\n        return arr\n    \n    temp_arr = []\n    for x in arr:\n        if x < 0:\n            temp_arr.append(x)\n        else:\n            temp_arr.append(x*-1)\n    \n    temp_arr.sort(reverse=True)\n    \n    for x in temp_arr:\n        arr.append(x)\n    \n    arr = arr[n:] + arr[:n]\n    \n    return arr\n    \ndef re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) <= n:\n        return arr\n    \n    temp_arr = []\n    for x in arr:\n        if x < 0:\n            temp_arr.append(x)\n        else:\n            temp_arr.append(x*-1)\n    \n    temp_arr.sort(reverse=True)\n    \n    for x in temp_arr:\n        arr.append(x)\n    \n    arr = arr[n:] + arr[:n]\n    \n    return arr\n    \ndef re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) <= n:\n        return arr\n    \n    temp_arr = []\n    for x in arr:\n        if x < 0:\n            temp_arr.append(x)\n        else:\n            temp_arr.append(x*-1)\n    \n    temp_arr.sort(reverse=True)\n    \n    for x in temp_arr:\n        arr.append(x)\n    \n    arr = arr[n:] + arr[:n]\n    \n    return arr\n    \ndef re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) <= n:\n        return arr\n    \n    temp_arr = []\n    for x in arr:\n        if x < 0:\n            temp_arr.append(x)\n        else:\n            temp_arr.append(x*-1)\n    \n    temp_arr.sort(reverse=True)\n    \n    for x in temp_arr:\n        arr.append(x)\n    \n    arr = arr[n:] + arr[:n]\n    \n    return arr\n    \ndef re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) <= n:\n        return arr\n    \n    temp_arr = []\n    for x in arr:\n        if x < 0:\n            temp_arr.append(x)\n        else:\n            temp_arr.append(x*-1)\n    \n    temp_arr.sort(reverse=True)\n    \n    for x in temp_arr:\n        arr.append(x)\n    \n    arr = arr[n:] + arr[:n]\n    \n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    l = len(arr)\n    if l <= n:\n        return arr\n    result = []\n    for i in range(n, l):\n        if arr[i] < 0:\n            result.append(arr[i])\n            result.append(-arr[i])\n        else:\n            result.append(arr[i])\n    result.append(-arr[n])\n    result.append(arr[n])\n    return result\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # note that this is not the same as a quick sort algorithm:\n    # you have to sort the array, re-arrange it, then sort the result, and then sort the same result\n    # and return the sorted array\n    # time complexity: O(n^2)\n    # space complexity: O(1)\n    # input: an array, an integer n\n    # output: a sorted array\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    def re_arrange_array_2(arr, n):\n        arr[:n] = arr[::-1]\n        for i in range(n):\n            arr[i] = -arr[i]\n        return arr\n    arr = arr[::-1]\n    return re_arrange_array_2(arr, n)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    new_arr = []\n    \n    for i in range(n):\n        new_arr.append(min(arr))\n        arr.remove(min(arr))\n    \n    for i in range(n):\n        new_arr.append(max(arr))\n        arr.remove(max(arr))\n    \n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Write your code here.\n    arr.sort()\n    arr.reverse()\n    arr = arr[n:] + arr[:n]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for x in range(n):\n        if arr[x] < 0:\n            arr[x] = arr[x] * -1\n            arr[x - 1] += 1\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    arr = arr[:]\n    while i < n:\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n        elif arr[i] > 0:\n            arr[i] = arr[i] * -1\n        i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        arr[i] *= -1\n        \n    for i in range(n):\n        if arr[i] >= 0:\n            arr[i] = 1\n        else:\n            arr[i] = 0\n    return arr\n    \ndef arr_partition(arr, n):\n    '''\n    Write a function that takes an array and an integer n and returns the indices of the first n elements where the absolute value of all elements in the given array is greater than the absolute value of the next element.\n    '''\n    for i in range(1, n):\n        if arr[i] > arr[i + 1]:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return arr\n    \ndef max_of_array(arr):\n    '''\n    Given an array of numbers, return the maximum value across all the elements.\n    '''\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n    \ndef min_of_array(arr):\n    '''\n    Given an array of numbers, return the minimum value across all the elements.\n    '''\n    min = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min:\n            min = arr[i]\n    return min\n    \ndef count_bits(n):\n    '''\n    Given an integer, return the number of bits needed to represent the given number in binary.\n    '''\n    b = bin(n).replace('0b', '')\n    return len(b) - 1\n    \ndef shift_array(arr, n):\n    '''\n    Given an array of integers and an integer n, return the integer shifted by n places.\n    '''\n    new_arr = []\n    for i in range(n):\n        new_arr.append(arr[i])\n    return new_arr\n    \ndef reverse_array(arr, n):\n    '''\n    Given an array of integers, return the array in its original order.\n    '''\n    new_arr = []\n    for i in range(n):\n        new_arr.append(arr[n - i - 1])\n    return new_arr\n    \ndef even_odd_list(arr):\n    '''\n    Given a list of integers, return the first half of it, and the second half of it.\n    '''\n    new_arr = []\n    even = 0\n    odd = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            new_arr.append(arr[i])\n            even += 1\n        else:\n            new_arr.append(arr[i])\n            odd += 1\n    return new_arr, even, odd\n    \ndef four_sum(arr, n):\n    '''\n    Given an array of integers and an integer n, return a list of the four-numbers that sum up to n.\n    '''\n    output = []\n    result = []\n    arr.sort()\n    # arr = re_arrange_array(arr, n)\n    arr = arr_partition(arr, n)\n    output = [sum(arr[i]) for i in range(len(arr))]\n    output.sort()\n    result = [arr[i] for i in range(len(arr)) if sum(arr[i:i+n]) == n]\n    return result, output\n    \ndef diff_of_numbers(arr, n):\n    '''\n    Given an array of integers and an integer n, return the difference between the sum of any number in the array and the sum of any number in the array that are greater than n.\n    '''\n    return [sum(i) - sum(j) for i, j in zip(arr[:-n], arr[n:])]\n    \ndef even_odd_list(arr):\n    '''\n    Given an array of integers, return the first half of it, and the second half of it.\n    '''\n    new_arr = []\n    even = 0\n    odd = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            new_arr.append(arr[i])\n            even += 1\n        else:\n            new_arr.append(arr[i])\n            odd += 1\n    return new_arr, even, odd\n    \ndef four_sum(arr, n):\n    '''\n    Given an array of integers and an integer n, return a list of the four-numbers that sum up to n.\n    '''\n    output = []\n    result = []\n    arr.sort()\n    # arr = re_arrange_array(arr, n)\n    arr = arr_partition(arr, n)\n    output = [sum(arr[i]) for i in range(len(arr))]\n    output.sort()\n    result = [arr[i] for i in range(len(arr)) if sum(arr[i:i+n]) == n]\n    return result, output\n    \ndef fast_sum_array(arr, n):\n    '''\n    Given an array of integers, return the sum of the integers in the array.\n    '''\n    output = 0\n    for i in range(len(arr)):\n        output += arr[i]\n    return output\n    \ndef fast_diff_of_numbers(arr, n):\n    '''\n    Given an array of integers and an integer n, return the difference between the sum of any number in the array and the sum of any number in the array that are greater than n.\n    '''\n    output = 0\n    for i in range(len(arr)):\n        output += arr[i] - n\n    return output\n    \ndef fast_even_odd_list(arr):\n    '''\n    Given an array of integers, return the first half of it, and the second half of it.\n    '''\n    new_arr = []\n    even = 0\n    odd = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            new_arr.append(arr[i])\n            even += 1\n        else:\n            new_arr.append(arr[i])\n            odd += 1\n    return new_arr, even, odd\n    \ndef fast_four_sum(arr, n):\n    '''\n    Given an array of integers, return the first half of it, and the second half of it.\n    '''\n    new_arr = []\n    even = 0\n    odd = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            new_arr.append(arr[i])\n            even += 1\n        else:\n            new_arr.append(arr[i])\n            odd += 1\n    return new_arr, even, odd\n    \ndef fast_diff_of_numbers(arr, n):\n    '''\n    Given an array of integers and an integer n, return the difference between the sum of any number in the array and the sum of any number in the array that are greater than n.\n    '''\n    output = 0\n    for i in range(len(arr)):\n        output += arr[i] - n\n    return output\n    \ndef fast_even_odd_list(arr):\n    '''\n    Given an array of integers, return the first half of it, and the second half of it.\n    '''\n    new_arr = []\n    even = 0\n    odd = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            new_arr.append(arr[i])\n            even += 1\n        else:\n            new_arr.append(arr[i])\n            odd += 1\n    return new_arr, even, odd\n    \ndef fast_four_sum(arr, n):\n    '''\n    Given an array of integers, return the first half of it, and the second half of it.\n    '''\n    new_arr = []\n    even = 0\n    odd = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            new_arr.append(arr[i]"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\").replace(char,\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,' ')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i =='':\n            str2 += char\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,' ').replace('  ',char).replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"\\n\",\" \")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\r\",\"\")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.replace(\"  \",\" \")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\").replace(char,\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # map each char to its position in the string\n    # see https://docs.python.org/3/howto/repr.html#repr-objects\n    return str1.replace(char,'')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1.count(char)>0:\n        return str1.replace(char,\" \").strip()\n    else:\n        return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,' ')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2=str1.replace(char,' ')\n    return str2\n    \ndef char_to_num(char):\n    '''\n    Write a function that takes in a character, and returns the corresponding number.\n    '''\n    num=ord(char)\n    return num\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    \n    heapq.heapify(list1)\n    temp_list = []\n    for i in range(n):\n        temp_list.append(heapq.heappop(list1))\n    return temp_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    size = len(list1)\n    newlist = []\n    for i in range(size):\n        newlist.append(list1[i])\n    heapq.heapify(newlist)\n    for i in range(n):\n        if len(newlist)>0:\n            if newlist[0]==list1[i]:\n                newlist.remove(newlist[0])\n                newlist.append(list1[i])\n        else:\n            newlist.append(list1[i])\n    return newlist\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n    heapq.heappush(heap, 0)\n    if len(heap) > n:\n        for i in range(len(heap)-n):\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    lst = []\n    if len(list1)<=n:\n        return list1\n    else:\n        for i in range(len(list1)):\n            if len(list1)>i+1 and list1[i]<list1[i+1]:\n                heapq.heappush(heap,list1[i])\n                lst.append(list1[i])\n            else:\n                heapq.heappush(heap,list1[i])\n                lst.append(list1[i])\n        return heapq.nlargest(n,lst)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # remove duplicates \n    list_new = list(set(list1))\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list_new.pop(0))\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # TODO: complete this function\n    def print_n_largest(lst):\n        heapq.heapify(lst)\n        for i in range(n):\n            heapq.heappush(lst, heapq.heappop(lst))\n        return lst\n    return print_n_largest(list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l=[]\n    for i in range(n):\n        l.append(list1[i])\n    return l\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(list1[i],i))\n    nums = []\n    for i in range(n):\n        num = heapq.heappop(heap)[1]\n        nums.append(list1[num])\n    return nums\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    L = []\n    for i in range(n):\n        L.append(list1[i])\n    heapq.heapify(L)\n    return L\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l=[]\n    for i in range(0,n):\n        heapq.heappush(l,list1[i])\n    return heapq.nlargest(n,l)\ndef display(list):\n    '''\n    Write a function that takes a list of integers and prints the list in a sorted form.\n    '''\n    for i in range(0,len(list)):\n        print(list[i])\ndef Floyd_Warshall(graph):\n    '''\n    Write a function that takes a list of lists as input, and returns a list of lists in a sorted form.\n    '''\n    n=len(graph)\n    for i in range(0,n):\n        for j in range(0,n):\n            if graph[i][j]!=0:\n                graph[i][j]=graph[j][i]\n    for k in range(0,n):\n        for i in range(0,n):\n            for j in range(0,n):\n                graph[i][j]=min(graph[i][j],graph[i][k]+graph[k][j])\n    for i in range(0,n):\n        for j in range(0,n):\n            if graph[i][j]==0:\n                print('Not connected to any node')\n            else:\n                print(graph[i][j])\ndef Dijkstra(graph,start):\n    '''\n    Write a function that takes a graph and a node as input, and returns the distance from that node to every other node in the graph in a sorted form.\n    '''\n    n=len(graph)\n    dist=[]\n    prev=[]\n    for i in range(0,n):\n        dist.append(float('inf'))\n        prev.append(None)\n    dist[start]=0\n    prev[start]=None\n    heapq.heapify(dist)\n    while(len(dist)>0):\n        u=heapq.heappop(dist)\n        for i in range(0,n):\n            if u==graph[i][u]:\n                s=i\n                break\n        for j in range(0,n):\n            if u==j:\n                continue\n            if dist[j]>graph[u][j]+graph[j][u]:\n                dist[j]=graph[u][j]+graph[j][u]\n                prev[j]=u\n    for i in range(0,n):\n        for j in range(0,n):\n            print(dist[i],prev[i],prev[j])\n    return dist\ndef readgraph(filename):\n    '''\n    Read the graph file and return the adjacency matrix.\n    '''\n    f=open(filename,\"r\")\n    G=[]\n    lines=f.readlines()\n    for l in lines:\n        i=0\n        ll=l.split()\n        for j in ll:\n            i+=1\n            if i==4:\n                G.append(int(j))\n    return G\ndef readV(filename):\n    '''\n    Read the vertex file and return the adjacency matrix.\n    '''\n    f=open(filename,\"r\")\n    v=[]\n    lines=f.readlines()\n    for l in lines:\n        i=0\n        ll=l.split()\n        for j in ll:\n            i+=1\n            if i==4:\n                v.append(int(j))\n    return v\ndef readE(filename):\n    '''\n    Read the edge file and return the adjacency matrix.\n    '''\n    f=open(filename,\"r\")\n    e=[]\n    lines=f.readlines()\n    for l in lines:\n        i=0\n        ll=l.split()\n        for j in ll:\n            i+=1\n            if i==4:\n                e.append(int(j))\n    return e\ndef listoflist(list1):\n    '''\n    This function takes a list and returns a new list of lists where the list of lists have been joined with each other.\n    '''\n    l=[]\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1)):\n            l.append(list1[i]+list1[j])\n    return l\ndef readS(filename):\n    '''\n    Read the shortest path file and return the adjacency matrix.\n    '''\n    f=open(filename,\"r\")\n    S=[]\n    lines=f.readlines()\n    for l in lines:\n        i=0\n        ll=l.split()\n        for j in ll:\n            i+=1\n            if i==4:\n                S.append(int(j))\n    return S\ndef readS2(filename):\n    '''\n    Read the shortest path file and return the adjacency matrix.\n    '''\n    f=open(filename,\"r\")\n    S=[]\n    lines=f.readlines()\n    for l in lines:\n        i=0\n        ll=l.split()\n        for j in ll:\n            i+=1\n            if i==4:\n                S.append(int(j))\n    return S\ndef readP(filename):\n    '''\n    Read the path file and return the adjacency matrix.\n    '''\n    f=open(filename,\"r\")\n    P=[]\n    lines=f.readlines()\n    for l in lines:\n        i=0\n        ll=l.split()\n        for j in ll:\n            i+=1\n            if i==4:\n                P.append(int(j))\n    return P\ndef readI(filename):\n    '''\n    Read the intersection file and return the adjacency matrix.\n    '''\n    f=open(filename,\"r\")\n    I=[]\n    lines=f.readlines()\n    for l in lines:\n        i=0\n        ll=l.split()\n        for j in ll:\n            i+=1\n            if i==4:\n                I.append(int(j))\n    return I\ndef readA(filename):\n    '''\n    Read the adjacency matrix and return the adjacency matrix.\n    '''\n    f=open(filename,\"r\")\n    A=[]\n    lines=f.readlines()\n    for l in lines:\n        i=0\n        ll=l.split()\n        for j in ll:\n            i+=1\n            if i==4:\n                A.append(int(j))\n    return A\ndef readG(filename):\n    '''\n    Read the graph file and return the adjacency matrix.\n    '''\n    f=open(filename,\"r\")\n    G=[]\n    lines=f.readlines()\n    for l in lines:\n        i=0\n        ll=l.split()\n        for j in ll:\n            i+=1\n            if i==4:\n                G.append(int(j))\n    return G\ndef readR(filename):\n    '''\n    Read the reverse file and return the adjacency matrix.\n    '''\n    f=open(filename,\"r\")\n    R=[]\n    lines=f.readlines()\n    for l in lines:\n        i=0\n        ll=l.split()\n        for j in ll:\n            i+=1\n            if i==4:\n                R.append(int(j))\n    return R\ndef readT(filename):\n    '''\n    Read the traffic file and return the adjacency matrix.\n    '''\n    f=open(filename,\"r\")\n    T=[]\n    lines=f.readlines()\n    for l in lines:\n        i=0\n        ll=l.split()\n        for j in ll:\n            i+=1\n            if i==4:\n                T.append(int(j))\n    return T\ndef readN(filename):\n    '''\n    Read the node file and return the adjacency matrix.\n    '''\n    f=open(filename,\"r\")\n    N=[]\n    lines=f.readlines()\n    for l in lines:\n        i=0\n        ll=l.split()\n        for j in ll:\n            i+=1\n            if i==4:\n                N.append(int(j))\n    return N\ndef readE(filename):\n    '''\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    l = r*h\n    return l\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    def lerp(t,a,b):\n        return a+(b-a)*(t-t/2)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #pass\n    return r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (4*(r**2)*h)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    w = 0.5 * r * math.sqrt(3)/h\n    return w * h * r**3 / math.pi\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r0 = r**2\n    h0 = h**2\n    I = (r0*h0) + (r0*h0*(r0-1)) + (r0*h0*(r0-1)*(r0-1))\n    return I\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Square function\n    import math\n    import cmath\n    #Finds the radius of the cylinder using the formula:\n    #Radius of the cylinder = (Volume of the cylinder) / 2.\n    r = r\n    #Convert to meters\n    h = h*(math.pi)/180\n    #Radius of the cylinder\n    r = h*(2*cmath.pi)\n    #Find the volume of the cylinder\n    vol = 4*math.pi*r*r\n    #Return the surface area of the cylinder\n    return vol\ndef elipsalsemi_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Square function\n    import math\n    import cmath\n    #Finds the radius of the cylinder using the formula:\n    #Radius of the cylinder = (Volume of the cylinder) / 2.\n    r = r\n    #Convert to meters\n    h = h*(math.pi)/180\n    #Find the volume of the cylinder\n    r = h*(2*cmath.pi)\n    #Find the semi-perpendicular distance from the origin.\n    phi = (r**2)*(math.pi)\n    #Find the value of the function in that definition of the distance from origin.\n    phi = (math.asin(math.sqrt(r)))\n    #Find the 2*phi value in radians\n    phi = phi*180/math.pi\n    #Find the surface area of the cylinder\n    return (4*math.pi)*r*phi\ndef latthemia_cylinder(r,h):\n    '''\n    Write a function to find the longitudinal surface area of a cylinder.\n    '''\n    #Square function\n    import math\n    import cmath\n    #Finds the radius of the cylinder using the formula:\n    #Radius of the cylinder = (Volume of the cylinder) / 2.\n    r = r\n    #Convert to meters\n    h = h*(math.pi)/180\n    #Find the volume of the cylinder\n    r = h*(2*cmath.pi)\n    #Find the semi-perpendicular distance from the origin.\n    phi = (r**2)*(math.pi)\n    #Find the value of the function in that definition of the distance from origin.\n    phi = (math.asin(math.sqrt(r)))\n    #Find the 2*phi value in radians\n    phi = phi*180/math.pi\n    #Find the surface area of the cylinder\n    return (4*math.pi)*phi\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    R = h/2\n    S = 2*r*np.sin(np.radians(60))\n    Z = np.arctan((S*r)/(S*R))\n    return Z\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r1 = (r[0] + r[1])/2\n    h1 = (h[0] + h[1])/2\n    A = (3*(r1**2)) - (h1**2)\n    return A\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(\"Calculating volume of cube...\")\n    l = int(l)\n    if l < 0:\n        raise ValueError(\"Side must be positive.\")\n    if l % 3!= 0:\n        raise ValueError(\"Side must be a multiple of 3.\")\n    print(f\"Calculated volume of cube is {l**3}\")\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0.0\n    for i in range(0, len(l)):\n        volume += l[i] * l[i]\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = 1\n    for i in range(1, l, 1):\n        v *= i\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l,3)/3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 3.14 * (l**3)\n    print(\"Volume of the cube is: \", volume)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    side_length = l\n    number_cubes = 0\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 3.14 * (l**3)\n    print(f'Cube volume is {volume}')\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    odd_bit_set = 0\n    while n > 0: \n        if n % 2 == 0: \n            odd_bit_set |= 2 ** (n % 2) \n        n >>= 1\n    return odd_bit_set\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0:\n        n = ~n\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    b = bin(n).replace(\"0b\", \"\")\n    b = b[2:]\n    b = b.replace(\"1\", \"\")\n    while len(b) < 4:\n        b = \"0\" + b\n    return int(b, 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # code here\n    def get_n_even(n):\n        '''\n        Return a new list of even numbers in a given range.\n        '''\n        # code here\n        return [i for i in range(n) if i%2 == 0]\n    return get_n_even(n)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    num=bin(n)[2:]\n    new_num=''\n    for i in range(len(num)):\n        if num[i] == '0':\n            new_num = new_num + '0'\n        elif num[i] == '1':\n            new_num = new_num + '1'\n    return int(new_num, 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    b = bin(n)[2:]\n    new_b = \"\"\n    for i in range(len(b)):\n        if b[i] == '0':\n            new_b += '1'\n        else:\n            new_b += '0'\n    return int(new_b, 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = bin(n).replace('0b', '')\n    for i in range(len(n)):\n        if n[i] == '1':\n            n[i] = '0'\n        else:\n            n[i] = '1'\n    return int(''.join(n), 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #return the number with even bits \n    return n & 0xFFFF\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0:\n        print('Invalid Input.')\n    else:\n        bit_list = []\n        for i in range(0, n, 2):\n            bit_list.append(1 if i % 2 == 0 else 0)\n        return bit_list\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    for i in range(n): \n        if(i % 2 == 0): \n            result = result ^ (i)\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuple = set(test_list)\n    test_dict = {}\n    for tup in unique_tuple:\n        if tup not in test_dict:\n            test_dict[tup] = 0\n        test_dict[tup] += 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for item in test_list:\n        if item[0] not in result:\n            result[item[0]] = 1\n        else:\n            result[item[0]] += 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i[0] in d:\n            d[i[0]].append(i[1])\n        else:\n            d[i[0]] = [i[1]]\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for test in test_list:\n        occurences[test[0]] = occurences.get(test[0], 0) + 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dictionary = Counter(test_list)\n    return occurence_dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for i in test_list:\n        if i[0] in dictionary:\n            dictionary[i[0]] += 1\n        else:\n            dictionary[i[0]] = 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence = Counter()\n    for tuple in test_list:\n        occurence[tuple] += 1\n    return occurence\ndef create_tuple_to_occurence(tuple):\n    return tuple[0], tuple[1]\ndef check_tuples(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence = {}\n    for tuple in test_list:\n        occurence[create_tuple_to_occurence(tuple)] += 1\n    return occurence\ndef create_tuple_to_occurence_and_key(tuple):\n    return create_tuple_to_occurence(tuple), tuple[0], tuple[1]\ndef check_tuples_and_key(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence = {}\n    for tuple in test_list:\n        occurence[create_tuple_to_occurence_and_key(tuple)] += 1\n    return occurence\ndef create_tuple_to_occurence_and_key_and_another(tuple):\n    return create_tuple_to_occurence(tuple), tuple[0], tuple[1], tuple[2]\ndef check_tuples_and_key_and_another(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence = {}\n    for tuple in test_list:\n        occurence[create_tuple_to_occurence_and_key_and_another(tuple)] += 1\n    return occurence\ndef merge_tuples(tuples):\n    '''\n    Write a function that takes in a list of tuples and returns a list of tuples with the list of tuples having each unique tuple in the list.\n    '''\n    tuples.sort(key=lambda x: (x[0], x[1]))\n    return tuples\ndef sort_tuples_and_return_tuples(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list of tuples sorted in ascending order.\n    '''\n    tuples = []\n    for tuples_ in test_list:\n        tuples.append(tuples_)\n    tuples.sort(key=lambda x: (x[0], x[1]))\n    return tuples\ndef intersection_and_union(tuples):\n    '''\n    Write a function that takes in a list of tuples and returns a list of tuples sorted by how often they occur in the first list and the how often they occur in the second list.\n    '''\n    tuples_1 = []\n    tuples_2 = []\n    for tuples_ in tuples:\n        if tuples_[0] in tuples_1:\n            tuples_1.append(tuples_)\n        else:\n            tuples_1.append(tuples_)\n    for tuples_ in tuples:\n        if tuples_[1] in tuples_2:\n            tuples_2.append(tuples_)\n        else:\n            tuples_2.append(tuples_)\n    return tuples_1, tuples_2\ndef count_tuples(tuples):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the first list.\n    '''\n    occurence = {}\n    for tuples_ in tuples:\n        occurence[tuples_] = occurence.get(tuples_, 0) + 1\n    return occurence\ndef check_tuples_and_key(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the first list.\n    '''\n    occurence = {}\n    for tuple in test_list:\n        occurence[create_tuple_to_occurence_and_key(tuple)] += 1\n    return occurence\ndef count_tuples_and_key(tuples):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the first list.\n    '''\n    occurence = {}\n    for tuple in tuples:\n        occurence[create_tuple_to_occurence_and_key(tuple)] += 1\n    return occurence\ndef sum_tuples(tuples):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the first list.\n    '''\n    occurence = {}\n    for tuple in tuples:\n        occurence[create_tuple_to_occurence_and_key(tuple)] += 1\n    return occurence\ndef sum_tuples_and_return_tuples(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list of tuples sorted by how often they occur in the first list and the how often they occur in the second list.\n    '''\n    occurence = {}\n    tuples = []\n    for tuples_ in test_list:\n        if tuples_[0] in tuples:\n            tuples.append(tuples_)\n        else:\n            tuples.append(tuples_)\n    tuples.sort(key=lambda x: (x[0], x[1]))\n    return tuples\ndef set_of_tuples(tuples):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the first list.\n    '''\n    occurence = {}\n    for tuples_ in tuples:\n        occurence[tuples_] = occurence.get(tuples_, 0) + 1\n    return occurence\ndef create_set_of_tuples(tuples):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the first list.\n    '''\n    occurence = {}\n    for tuple in tuples:\n        occurence[tuple] = occurence.get(tuple, 0) + 1\n    return occurence\ndef create_set_of_tuples_and_return_tuples(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list of tuples sorted by how often they occur in the first list and the how often they occur in the second list.\n    '''\n    occurence = {}\n    tuples = []\n    for tuples_ in test_list:\n        if tuples_[0] in tuples:\n            tuples.append(tuples_)\n        else:\n            tuples.append(tuples_)\n    tuples.sort(key=lambda x: (x[0], x[1]))\n    return tuples\ndef not_in_set(tuple, tuples):\n    '''\n    Write a function that takes in a tuple and returns True if it is in the set and False if not.\n    '''\n    return tuple in tuples\ndef is_in(tuple, tuples):\n    '''\n    Write a function that takes in a tuple and returns True if it is in the set and False if not.\n    '''\n    return tuple in tuples\ndef check_not_in(tuples):\n    '''\n    Write a function that takes in a list of tuples and returns True if it is not in the set and False if it is.\n    '''\n    return not not in tuples\ndef check_is_in(tuples):\n    '''\n    Write a function that takes in a list of tuples and returns True if it is in the set and False if not.\n    '''\n    return not not in tuples\ndef find_se"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occur = {}\n    for i in range(len(test_list)):\n        if test_list[i][1] in occur:\n            occur[test_list[i][1]]+=1\n        else:\n            occur[test_list[i][1]]=1\n    return occur\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j] == str[i:j][::-1]:\n                n += 1\n    return n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n    for i in range(len(str)-1): \n        if str[i] == str[i+1]: \n            counter += 1\n    return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n_substr = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)):\n            if str[i:j+1] == str[i:j+1][::-1]:\n                n_substr += 1\n    return n_substr\n        \n    "
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i:j]!= str[i:j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    # your code here\n    if len(str) <= 1:\n        return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if str[i:j+1]!= str[i:j+1].replace(' ', ''): \n                n += 1\n    return n\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    size_of_str = len(str)\n    n = 0\n    for i in range(1, size_of_str):\n        if str[i] == str[i-1]:\n            n += 1\n    return n\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str.split(' ')) - 1\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    temp = str.lower().split()\n    count = 0\n    for i in range(len(temp)):\n        if temp[i]!= \"\":\n            count += 1\n        else:\n            pass\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize the count to zero\n    count = 0\n    \n    # loop over the given string\n    for i in range(len(str)):\n        \n        # if the current index is a duplicate letter, reset the count\n        if str[i] == str[i-1]:\n            count += 1\n        \n        # otherwise, add one to the count\n        else:\n            count += 1\n            \n    # return the count\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    c=1\n    for i in range(m,n+1):\n        if i%2!=0:\n            c+=1\n    return c\ndef get_number_of_possible_sequences(n, m):\n    '''\n    Given a positive integer n and a positive integer m, return the number of the possible sequences of length n that have elements with even numbers between m and n.\n    '''\n    nums=[]\n    for i in range(m,n+1):\n        if i%2==0:\n            nums.append(i)\n    return len(nums)"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Write your code here\n    count=0\n    for i in range(m,n+1):\n        for j in range(1,i):\n            if i%j==0:\n                count+=1\n    return count\n    \n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m>n:\n        m,n=n,m\n    seq_count = 0\n    for i in range(1,n+1):\n        if m<=i:\n            seq_count += 1\n        elif m*i<n:\n            seq_count += 1\n    return seq_count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Write your code here\n    a=[]\n    for i in range(m,n+1):\n        if i%2==0:\n            a.append(2*i)\n        else:\n            a.append(i)\n    print(a)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_pos_neg_sum(n):\n        sum = 0\n        for i in range(2,n+1):\n            if n % i == 0:\n                sum += i\n        if sum == n:\n            return sum\n        else:\n            return 0\n    def find_pos_neg_sum(m,n):\n        sum = 0\n        for i in range(2,n+1):\n            if m % i == 0:\n                sum += i\n        if sum == m:\n            return sum\n        else:\n            return 0\n    total_neg_sum = get_pos_neg_sum(n)\n    total_pos_sum = get_pos_neg_sum(m)\n    #print(total_neg_sum)\n    #print(total_pos_sum)\n    if total_pos_sum > total_neg_sum:\n        return total_pos_sum\n    else:\n        return total_neg_sum\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for x in range(2,m+1):\n        if m<2 or n<2:\n            break\n        if x == m or x == n:\n            break\n        if m%x == 0 or n%x == 0:\n            break\n        total+=1\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    from math import factorial\n    return factorial(n)/(factorial(m)*factorial(n-m))\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    number_of_sequences = 0\n    i = m\n    while i < n:\n        if m % i == 0:\n            i += 2\n        else:\n            i += 1\n        number_of_sequences += 1\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if(m>=n):\n        return 0\n    \n    possible_sequence_of_length_n = 0\n    i = 1\n    while(i < n+1):\n        \n        if((m%i == 0) and ((i*2)%n==0) and (i*2<n)):\n            possible_sequence_of_length_n += i*2\n            i += 1\n        elif(m%i == 0):\n            possible_sequence_of_length_n += (i+1)\n            i += 1\n        else:\n            return 0\n        \n    return possible_sequence_of_length_n\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # TODO: Write a function that can find the total number of sequences of length n.\n    # HINT: Use the if-else statement for a conditional statement\n    # INPUT:\n    # m: int\n    # n: int\n    # OUTPUT:\n    # int: the total number of sequences of length n\n    # HINT: Use a while loop that repeats this process until there are no sequences with length > 2 or until all the numbers in the list have been iterated in a single loop.\n    # HINT: You can use the + operator to create an iterator that returns the sum of all the numbers in the list.\n    # HINT: Don't forget to close the file after completing the function\n    # EXAMPLE:\n    # function call 1\n    # m = 2\n    # n = 4\n    # total = 2\n    #\n    # function call 2\n    # m = 5\n    # n = 7\n    # total = 1\n    #\n    # function call 3\n    # m = 5\n    # n = 7\n    # total = 1\n    #\n    # function call 4\n    # m = 1\n    # n = 2\n    # total = 0\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list2)-1,-1,-1):\n        if list1[i]!= list2[i]:\n            list1[i] = list2[i]\n            break\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return [x for x in list1 for y in list2 if x!= y]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1)\n    print(list2)\n    for i in range(len(list1)):\n        if i==len(list1)-1:\n            list1[i] = list2[i]\n        else:\n            list1[i]=list2[i]\n    print(list1)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1)\n    print(list2)\n    list1[-1]=list2[-1]\n    print(list1)\n    return(list1)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[len(list2)-1])\n    list1.pop(len(list1)-1)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Set up the list of numbers in order from first to last.\n    list1 = sorted(list1,reverse=True)\n    list2.reverse()\n    # Loop through each element in the first list.\n    for i in list1:\n        list2.append(i)\n    # Loop through each element in the second list.\n    for i in list2:\n        list1.append(i)\n    # Make the list of all numbers appear in order.\n    list1.reverse()\n    # Remove duplicates from list2.\n    list2 = list(dict.fromkeys(list2))\n    # Sort the list of numbers in order.\n    list2.sort()\n    # Return the list.\n    return list1 + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print('Replacing first element of list 1 with elements of list 2...')\n    print(list1)\n    print(list2)\n    print('Replaced element of first list:')\n    print(list1[-1])\n    print('Replaced element of second list:')\n    print(list2[-1])\n    \n    list1[-1] = list2[-1]\n    list2[-1] = list1[-1]\n    print('List 1:')\n    print(list1)\n    print('List 2:')\n    print(list2)\n    \n    return list1,list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    i=len(list1)-1\n    while i>=0:\n        if i==0:\n            list1[i]=list2[i]\n            i-=1\n        else:\n            i-=1\n            list1[i]=list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list(list2) + list(list1)[:-1]\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    count = 0\n    \n    for i in str1:\n        if i == \" \" or i == \"\\t\" or i == \"\\n\" or i == \"\\r\":\n            count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c = 0\n    for i in str1:\n        if i == 'a' or i == 'b' or i == 'c' or i == 'd' or i == 'e' or i == 'f' or i == 'g' or i == 'h' or i == 'i' or i == 'j' or i == 'k' or i == 'l' or i =='m' or i == 'n' or i == 'o' or i == 'p' or i == 'q' or i == 'r' or i =='s' or i == 't' or i == 'u' or i == 'v' or i == 'w' or i == 'x' or i == 'y' or i == 'z':\n            c += 1\n    return c\n    \ndef count_vowels(str1):\n    '''\n    Write a function to count the total number of vowels in a string.\n    '''\n    c = 0\n    for i in str1:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y' or i == 'A' or i == 'E' or i == 'I' or i == 'O' or i == 'U' or i == 'Y':\n            c += 1\n    return c\n    \ndef count_consonants(str1):\n    '''\n    Write a function to count the total number of consonants in a string.\n    '''\n    c = 0\n    for i in str1:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y' or i == 'A' or i == 'E' or i == 'I' or i == 'O' or i == 'U' or i == 'Y':\n            c += 1\n    return c\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count_charac = 0\n    for char in str1:\n        count_charac += 1\n    print(count_charac)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for c in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i =='' or i == '\\t' or i == '\\r' or i == '\\n':\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n    \n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    count = 0\n    for i in str1:\n        if i==' ':\n            count = count + 1\n    return count\n    \ndef display(str1):\n    '''\n    Write a function that prints the characters of a string to stdout.\n    '''\n    for i in str1:\n        print(i,end=' ')\n    print()\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # Use the built-in len function to calculate the length\n    # of the given string.\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N == 0):\n        return N\n    if(N < 0):\n        return N\n    if(N < (N + N//2)):\n        return N\n    if(N % 2 == 0):\n        return N//2\n    else:\n        return N//2 + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    assert N > 1,'must be greater than 1'\n    assert (N % 2 == 0),'must be divisible by 2'\n    assert (N >= 4),'must be > 4'\n    m = math.sqrt(N) \n    # check if the square of N is perfect or not\n    if (N > m): \n        if (N % 2 == 0): \n            return m \n        else: \n            return math.sqrt(N) + 1\n    else: \n        return m \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    f_n = math.sqrt(N)\n    if (f_n == int(f_n)) or (f_n < int(f_n)):\n        return f_n\n    i_n = f_n\n    while (i_n*i_n)<N:\n        i_n+=1\n    return i_n\n    "
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #Define a base case\n    if N <= 1: \n        return 1\n    #define the first half of the perfect square \n    elif N % 2 == 0: \n        #calculate the mid value \n        mid = N//2\n        #check if the mid value is one \n        #of the entire squares \n        if mid == 1 or N == 1: \n            return 1\n        #return the sum of the first half \n        else: \n            return next_Perfect_Square(mid) + next_Perfect_Square(mid) \n    #check if the mid value is odd \n    else: \n        #calculate the mid value \n        mid = N//2\n        #check if the mid value is one \n        #of the entire squares \n        if mid == 1 or N == 1: \n            return 1\n        #return the sum of the first half \n        else: \n            return next_Perfect_Square(mid) + next_Perfect_Square(mid) \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 1\n    n = 2\n    sq = int(N**0.5) + 1\n    sum = 0\n    for i in range(2, sq+1):\n        if i**2 % N == 0:\n            sum = i**2\n            break\n    print(sum)\n    while sum > N:\n        sum = i + i + i\n        i += 1\n    return sum\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N==0:\n        return 0\n    elif N==1:\n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # time-complexity: O(n^2)\n    # space-complexity: O(1)\n    return math.ceil(math.sqrt(N))\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 1\n    while i <= N:\n        if N%i == 0:\n            return i\n        i = i+1\n    return None\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N < 1): \n        return -1\n    if (N == 1): \n        return 1\n    if (N == 2): \n        return 3\n    \n    h = math.sqrt(N) \n    if (h == 1): \n        return h\n    if (h == 2): \n        return 5\n    if (h == 3): \n        return 7\n    if (h == 4): \n        return 9\n    if (h == 5): \n        return 11\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    '''\n    Input:\n        N: a positive integer\n    Output:\n        Returns the next perfect square greater than the given number.\n    '''\n    # check if the number is a perfect square\n    if (N == 0): \n        return 1\n    if (N == 1): \n        return 2\n    if (N > 1): \n        if (N % 2 == 0): \n            return (N//2) + next_Perfect_Square(N//2)\n        else:\n            return (N//2) + next_Perfect_Square(N//2) + 1\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: \n        return None\n    arr = [i for i in arr if i > 0]\n    s = 0\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        if arr[i]:\n            s = 0\n        if i == 0 or arr[i] >= arr[i - 1]:\n            s += arr[i]\n        else:\n            s += arr[i] - arr[i - 1]\n        ans = max(s, ans)\n    return ans\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    output = 0\n    arr.sort()\n    for i in range(1, len(arr) - 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            output = max(output, arr[i] + arr[i + 1])\n    return output\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    l, r = 0, len(arr) - 1\n    result = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[l] and arr[i] > arr[r]:\n            l += 1\n        elif arr[i] > arr[l] and arr[i] < arr[r]:\n            r -= 1\n        elif arr[i] > arr[l] and arr[i] < arr[r]:\n            r -= 1\n        elif arr[i] > arr[l] and arr[i] == arr[r]:\n            result += arr[i]\n    if r < l:\n        result += arr[l]\n    elif l < r:\n        result += arr[r]\n    return result\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    max_sum = 0\n    \n    for i in range(1,n):\n        \n        if arr[i] > arr[i-1]:\n            \n            max_sum = max_sum + arr[i]\n            \n        else:\n            \n            max_sum = max_sum - arr[i]\n            \n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    output = []\n    \n    if len(arr) == 0:\n        return 0\n    \n    max_sum = arr[0]\n    for i in range(len(arr)):\n        output.append(arr[i])\n        output.append(max_sum)\n        if arr[i] > max_sum:\n            max_sum = arr[i]\n        if arr[i] < max_sum:\n            max_sum = arr[i]\n    \n    output.append(arr[len(arr) - 1])\n    output.append(max_sum)\n    return max(output)\n    \n    \ndef test_max_sum():\n    assert max_sum([2, 1, 3, 4]) == 7\n    assert max_sum([-1, -2, -3, -4]) == 6\n    assert max_sum([4, 3, 2, 1]) == 4\n    assert max_sum([1, 2, 3, 4]) == 3\n    assert max_sum([3, 5, 2, 1]) == 5\n    assert max_sum([2, 4, 1, 3, 5]) == 5\n    assert max_sum([2, 2, 1, 3, 3, 3, 1, 4, 5, 4]) == 10\n    assert max_sum([1, 2, 3, 4, 5, 6, 1]) == 10\n    assert max_sum([1, 3, 1, 2, 1, 4, 5, 1, 2, 2]) == 9\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # We create a new array of 0s and 1s and try to find the max sum of the bitonic subsequences, but we don't know what this is so far\n    res = [0] * len(arr)\n    res[0] = arr[0]\n    # This is the index of the first position where we can find the first bitonic subsequence\n    first_pos = 0\n    \n    # The current maximum sum is the result we've already found\n    max_sum = res[0]\n    \n    # If the length of the array is one, we found the first bitonic subsequence.\n    if len(arr) == 1:\n        return res[0]\n    \n    # Now we iterate through the array and do the bitonic subsequence\n    for i in range(1, len(arr)):\n        # The current position of the current bitonic subsequence is at the start of the current bitonic subsequence\n        start = i - first_pos\n        \n        # If we have already found a result that's greater than the current result, we keep checking\n        if res[start] + arr[i] > max_sum:\n            # Increment the first_pos\n            first_pos = i\n            \n            # We find the maximum sum by incrementing the current result\n            max_sum = res[start] + arr[i]\n        \n    # Check if we have found a result that's greater than the maximum sum\n    if max_sum > res[-1]:\n        res[-1] = max_sum\n    \n    # Check if the length of the array is one, we found the first bitonic subsequence\n    if len(arr) == 1:\n        return res[-1]\n    \n    # We iterate through the array and do the bitonic subsequence\n    for i in range(first_pos + 1, len(arr)):\n        # The current position of the current bitonic subsequence is at the start of the current bitonic subsequence\n        start = i - first_pos\n        \n        # If we have already found a result that's greater than the current result, we keep checking\n        if res[start] + arr[i] > max_sum:\n            # Increment the first_pos\n            first_pos = i\n            \n            # We find the maximum sum by incrementing the current result\n            max_sum = res[start] + arr[i]\n    \n    # Check if we have found a result that's greater than the maximum sum\n    if max_sum > res[-1]:\n        res[-1] = max_sum\n    \n    return max_sum\n    \nprint(max_sum(arr=[5, 3, 2, 3, 1, 4, 2, 7, 8, 9]))"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #if array is empty return None\n    if len(arr) == 0:\n        return None\n    \n    #determines if bitonic subsequence is first increasing\n    first_increasing = True\n    #determines if bitonic subsequence is first decreasing\n    first_decreasing = False\n    #determines if bitonic subsequence is already sorted\n    sorted = False\n    #calculate the sum of the array\n    sum = 0\n    for i in range(len(arr)):\n        #checks for consecutive elements\n        if first_increasing == True and first_decreasing == False:\n            #checks for consecutive elements\n            if arr[i] < arr[i + 1]:\n                #checks for consecutive elements\n                if arr[i] < arr[i + 1]:\n                    #check if it is a bitonic subsequence\n                    sum = sum + arr[i]\n                    #checks if array is already sorted\n                    sorted = True\n            #checks for consecutive elements\n            elif arr[i] > arr[i + 1]:\n                #checks if it is a bitonic subsequence\n                sum = sum + arr[i]\n                #checks if array is already sorted\n                sorted = True\n        #checks for consecutive elements\n        elif first_increasing == False and first_decreasing == True:\n            #checks for consecutive elements\n            if arr[i] < arr[i + 1]:\n                #checks for consecutive elements\n                if arr[i] < arr[i + 1]:\n                    #check if it is a bitonic subsequence\n                    sum = sum + arr[i]\n                    #checks if array is already sorted\n                    sorted = True\n            #checks for consecutive elements\n            elif arr[i] > arr[i + 1]:\n                #checks if it is a bitonic subsequence\n                sum = sum + arr[i]\n                #checks if array is already sorted\n                sorted = True\n        #checks for consecutive elements\n        elif first_increasing == True and first_decreasing == True:\n            #checks for consecutive elements\n            if arr[i] < arr[i + 1]:\n                #checks for consecutive elements\n                if arr[i] < arr[i + 1]:\n                    #check if it is a bitonic subsequence\n                    sum = sum + arr[i]\n                    #checks if array is already sorted\n                    sorted = True\n            #checks for consecutive elements\n            elif arr[i] > arr[i + 1]:\n                #checks if it is a bitonic subsequence\n                sum = sum + arr[i]\n                #checks if array is already sorted\n                sorted = True\n    #if array is already sorted, return the sum of the array\n    if sorted == True:\n        return sum\n    #if array is not sorted, return None\n    else:\n        return None\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ans += arr[i]\n        else:\n            arr[i] = -1 * arr[i]\n            \n            ans += arr[i]\n    \n    return ans\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if arr == None or len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if len(arr) == 3:\n        return max(arr[0] + arr[1], arr[1] + arr[2])\n    return max(max_sum(arr[:2]), max_sum(arr[1:3]))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if type(number)!= int:\n        raise TypeError(\"please input a number\")\n    if number == 0:\n        return 0\n    if number < 0:\n        raise ValueError(\"input a positive number\")\n    if number == 1:\n        return 1\n    if number < 10:\n        return number\n    new = babylonian(number, 1)\n    return babylonian(new, number)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    factors = []\n    while True:\n        if number % 2 == 0:\n            factors.append(2)\n            number = number / 2\n        else:\n            factors.append(4)\n            number = number * 3 + 1\n        if len(factors) == 10:\n            return factors[-1]\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    assert number >= 0, 'The number must be greater than 0'\n    assert number % 2 == 0, 'The number must be even'\n    squared_root = 1\n    \n    while number >= squared_root:\n        squared_root = (squared_root + (number % 2)) / 2\n        \n    return squared_root"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # input: int number\n    # output: int\n    # description: return a valid integer for the babylonian method.\n    # your code should be 100% correct and pass the tests.\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqrt = 0.0\n    last = number\n    while sqrt <= last:\n        mid = int(last + (last - number) / 2)\n        if mid * mid == number:\n            return mid\n        elif mid * mid > number:\n            last = mid\n        else:\n            sqrt = mid\n    return last\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    result = []\n    if number == 0:\n        return number\n    if number > 0:\n        for i in range(2, int(math.sqrt(number)) + 1):\n            if number % i == 0:\n                result.append(i)\n                if i!= number:\n                    result.append(number//i)\n    else:\n        for i in range(2, int(math.sqrt(number)) + 1):\n            if number % i == 0:\n                result.append(i)\n                if i!= number:\n                    result.append(number//i)\n    return result\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    try:\n        return number**(1/2)\n    except:\n        return \"Error: Invalid Expression\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number % 2 == 0:\n        return 1\n    else:\n        return babylonian_squareroot(number/2)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Base case:\n    if not str:\n        return 0\n    \n    # Dictionary:\n    char_dic = {}\n    i = 0\n    j = 0\n    length = 0\n    \n    # Walk through the string.\n    for i in range(len(str)):\n        if str[i] not in char_dic:\n            char_dic[str[i]] = [i]\n        else:\n            char_dic[str[i]].append(i)\n    \n    # Look at each letter:\n    for i in char_dic:\n        if len(char_dic[i]) > len(char_dic[i[::-1]]):\n            length = i\n    \n    # Use a set to avoid duplicates:\n    return len(char_dic[length])\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # length of the longest subsequence is 1\n    max_length = 1\n    \n    # initialize an empty list\n    palindrome_list = []\n    \n    # loop through the string\n    for i in range(len(str)-1):\n        palindrome_list.append(str[i])\n        \n        # find the longest palindromic subsequence\n        if palindrome_list[i:i+2] == palindrome_list[i:i+2][::-1]:\n            max_length += 1\n        \n    return max_length\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return len(str)\n    if len(str) == 2:\n        return 1 if str[0] == str[1] else 0\n    \n    dp = [[0 for j in range(len(str) - 1)] for i in range(len(str) - 1)]\n    for i in range(1, len(str)):\n        dp[i][0] = 1\n        dp[i][1] = 1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps(s):\n        '''\n        Return the length of the longest palindromic subsequence of s.\n        '''\n        # if the string is empty, the result is 1\n        if not s:\n            return 1\n        # if s[0] == s[-1]:\n        #     return 2\n        # elif s[0]!= s[-1]:\n        #     return 1 + lps(s[1:-1])\n        else:\n            count = 1\n            for i in range(1, len(s)):\n                if s[i-1]!= s[i]:\n                    count += 1\n                elif s[i] == s[i-1]:\n                    count += 2\n            return count\n    return lps(s)\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps = []\n    for i in range(len(str)-1):\n        for j in range(i+1,len(str)):\n            if str[i] == str[j] and str[i] in 'abcdefghijklmnopqrstuvwxyz':\n                lps.append(j-i)\n                lps.append(j)\n            if len(lps) > 1:\n                break\n    return max(lps)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    maxlen = 1\n    pal = set()\n    for i in range(len(str)):\n        for j in range(len(str)):\n            substr = str[i:j+1]\n            if substr in pal:\n                if len(str[i:j+1]) > maxlen:\n                    maxlen = len(str[i:j+1])\n                    pal = substr\n    return maxlen\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def isPalindrome(s):\n        rev = s[::-1]\n        if(s==rev):\n            return True\n        else:\n            return False\n    if(isPalindrome(str)):\n        print(\"{} is a palindrome\".format(str))\n    else:\n        print(\"{} is not a palindrome\".format(str))\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 0:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Base case\n    if len(str) == 0 or str == 'a' or str == 'c' or str == 'g' or str == 'e':\n        return 0\n    \n    # Recursive case\n    if str[0] == str[-1]:\n        return 1 + lps(str[1:-1])\n    \n    # Base case\n    if len(str) == 1:\n        return 1\n    \n    # Recursive case\n    if str[0] == str[-2]:\n        return lps(str[1:-1]) + 1\n    \n    return lps(str[1:]) + 1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if (len(str) < 2): \n        return 0\n    \n    substr = {}\n    max_sub_pal = 1\n    for i in range(len(str)): \n        if (str[i] in substr): \n            if (max_sub_pal < substr[str[i]]: \n                max_sub_pal = substr[str[i]] \n        substr[str[i]] = i \n    return max_sub_pal \n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + (n - 1) * 0.5) / (1.0 + (n - 1) * 0.5)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Use a for loop to iterate over n\n    harmonic_sum = 0\n    for i in range(1,n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(1, n):\n        harmonic_sum = harmonic_sum * (i+1)\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return (1 + harmonic_sum(n-1))/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # We can't just use:\n    # return n*(1+n)/2\n    # but, for this implementation, we can't return that\n    # because we have to use the fact that\n    # return n*(1+n)/2 is the harmonic sum\n    # so, we have to instead just return n\n    return n*(1+n)/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                result.append(num1)\n                break\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_count = 0\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection_count += 1\n    return intersection_count\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return array_nums1[intersection_index_of_two_array(array_nums1,array_nums2)]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    count1=0\n    count2=0\n    for i in range(len(array_nums1)):\n        if(array_nums1[i]==array_nums2[i]):\n            count1+=1\n        else:\n            count2+=1\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    return list(set_nums1.intersection(set_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Write your code here.\n    array1 = np.array(array_nums1)\n    array2 = np.array(array_nums2)\n    intersection = array1 & array2\n    intersection = np.array(intersection)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect_set = set(array_nums1).intersection(set(array_nums2))\n    return list(intersect_set)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # pass\n    x = set(x)\n    tup = list(tup)\n    for i in tup:\n        if i in x:\n            x.remove(i)\n    tup = tuple(x)\n    return(tup)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # x = str(x)\n    occurrences = 0\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if(i == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len(list(filter(lambda x: x == x, tup)))\n    \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len(list(filter(lambda x: x == x, tup)))\n    "
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if type(x) is int and len(tup) == 1: \n        return tup.count(x)\n    else: \n        return None\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x_count = 0\n    for x in tup:\n        if x == x:\n            x_count += 1\n    return x_count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if element in list:\n        raise ValueError(\"Element is already in list.\")\n    else:\n        list.append(element)\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for index, item in enumerate(list):\n        if item == element:\n            new_list.insert(index,element)\n            return new_list\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    j = len(list) - 1\n    while i < j:\n        if list[i] < element:\n            list.insert(i,element)\n            i+=1\n        else:\n            j-=1\n            element = list[j]\n    list[i-1]=element\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result=[]\n    for i in range(0,len(list)):\n        result.append(list[i])\n        result.append(element)\n    return(result)\n    \ndef remove_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a list with the element removed from the end of the list.\n    '''\n    for i in range(len(list)-1,-1,-1):\n        if(list[i]==element):\n            del(list[i])\n    return(list)\n    \ndef replace_element(list,element,new_element):\n    '''\n    Write a function that takes in a list and an element and replaces the element with the new_element and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        if(list[i]==element):\n            list[i]=new_element\n    return(list)\n    \ndef sort_list(list):\n    '''\n    Write a function that takes in a list and sorts it in ascending order.\n    '''\n    for i in range(0,len(list)):\n        for j in range(0,len(list)-1):\n            if(list[j]>list[j+1]):\n                temp=list[j]\n                list[j]=list[j+1]\n                list[j+1]=temp\n    return(list)\n    \ndef merge_sort(list):\n    '''\n    Write a function that takes in a list and returns a list with the list sorted.\n    '''\n    if(len(list)>1):\n        list1=[]\n        list2=[]\n        \n        for i in range(0,len(list)):\n            if(i%2==0):\n                list1.append(list[i])\n            else:\n                list2.append(list[i])\n                \n        list=list1+list2\n    return(list)\n    \ndef bubble_sort(list):\n    '''\n    Write a function that takes in a list and sorts it in ascending order.\n    '''\n    for i in range(0,len(list)-1):\n        for j in range(0,len(list)-1-i):\n            if(list[j]>list[j+1]):\n                temp=list[j]\n                list[j]=list[j+1]\n                list[j+1]=temp\n    return(list)\n    \ndef merge(list):\n    '''\n    Write a function that takes in a list and returns a list with the list sorted.\n    '''\n    if(len(list)>1):\n        list1=[]\n        list2=[]\n        \n        for i in range(0,len(list)):\n            if(i%2==0):\n                list1.append(list[i])\n            else:\n                list2.append(list[i])\n                \n        list=list1+list2\n    return(list)\n    \ndef k_sort(list,k):\n    '''\n    Write a function that takes in a list and an integer and sorts it in ascending order by k.\n    '''\n    if(len(list)>1):\n        list1=[]\n        list2=[]\n        \n        for i in range(0,len(list)):\n            if(i%k==0):\n                list1.append(list[i])\n            else:\n                list2.append(list[i])\n                \n        list=list1+list2\n    return(list)\n    \ndef quick_sort(list):\n    '''\n    Write a function that takes in a list and returns a list with the list sorted in ascending order.\n    '''\n    if(len(list)>1):\n        pivot=list[0]\n        list1=[]\n        list2=[]\n        \n        for i in range(1,len(list)):\n            if(list[i]<=pivot):\n                list1.append(list[i])\n            else:\n                list2.append(list[i])\n                \n        list=list1+list2\n    return(list)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if type(list)!= list:\n        raise Exception('Wrong argument type')\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = list\n    list_length = len(list)\n    for i in range(0,list_length):\n        new_list.insert(i+1,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return_list = []\n    for i in list:\n        return_list.append(i)\n        return_list.insert(0,element)\n        return return_list\n    return return_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.insert(0,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if element < list[i]:\n            list.insert(i,element)\n            return list\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_copy = list[:]\n    for i in range(len(list_copy)):\n        if list_copy[i] > element:\n            list_copy[i] = element\n            return list_copy\n    return list_copy\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return numpy.array(list(map(convert_complex, numbers)))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return [complex(a, b) for a,b in zip(numbers[::2], numbers[1::2])]\ndef make_coord(coords):\n    '''\n    return a list of coordinate pairs.\n    '''\n    return list(map(tuple, coords))\ndef proj_points(points):\n    '''\n    project a list of points on the plane.\n    '''\n    new_points = []\n    for point in points:\n        new_point = map(lambda x,y: (x+y)/2, point[0], point[1])\n        new_points.append(tuple(new_point))\n    return new_points\ndef limit_points(points, limits):\n    '''\n    takes a list of coordinates and returns a list of coordinates\n    '''\n    new_points = [points[0]]\n    for i in range(len(points)-1):\n        new_points.append(map(lambda x,y: x if x > limits[i] or y < limits[i] else 0, points[i+1], points[i]))\n    return new_points\ndef get_angles(numbers):\n    '''\n    Return the list of angles between the list of complex numbers.\n    '''\n    return list(map(lambda x: abs(x), numbers))\ndef limit_angles(angles, limits):\n    '''\n    takes a list of angles and returns a list of angles\n    '''\n    new_angles = list(filter(lambda x: x > limits[1] or x < limits[0], angles))\n    return new_angles\ndef cross_product(point1, point2):\n    '''\n    returns the cross product of two points\n    '''\n    return map(lambda x: complex(x), (point1[1], point2[0], point2[1]))\ndef distance(point1, point2):\n    '''\n    returns the distance between two points.\n    '''\n    return sqrt(pow(point1[1]-point2[1],2)+pow(point1[0]-point2[0],2))\ndef polar_to_cartesian(polar_coordinates):\n    '''\n    returns a list of cartesian coordinates\n    '''\n    return map(lambda x: complex(x[0], -x[1]), polar_coordinates)\ndef cartesian_to_polar(coordinates):\n    '''\n    returns a list of polar coordinates\n    '''\n    return list(map(lambda x: complex(x[0],x[1]), coordinates))\ndef angle_between(points, vector):\n    '''\n    Returns the angle between two lists of complex numbers.\n    '''\n    a = 0\n    for i in range(len(points)):\n        a += abs(complex(points[i][0],points[i][1]))*complex(vector[0],vector[1])\n    return atan2(a,sqrt(a)*(1/cos(a/2)))\ndef get_cartesian_to_polar(coords):\n    '''\n    returns a list of cartesian coordinates\n    '''\n    return [polar_to_cartesian(convert(coords))]\ndef get_cartesian_to_angle(coords):\n    '''\n    returns a list of cartesian coordinates\n    '''\n    return [angle_between(make_coord(coords),convert(c)) for c in coords]\ndef get_cartesian_to_polar_for_angle(coords):\n    '''\n    returns a list of polar coordinates for the given angle\n    '''\n    return [convert(polar_to_cartesian(convert(c))) for c in coords]\ndef get_cartesian_to_angle_for_polar(coords):\n    '''\n    returns a list of polar coordinates for the given angle\n    '''\n    return [angle_between(make_coord(coords),convert(p)) for p in coords]\ndef distance_between(point1, point2):\n    '''\n    returns the distance between two points.\n    '''\n    return sqrt(pow(point1[0]-point2[0],2)+pow(point1[1]-point2[1],2))\ndef polar_to_cartesian_for_angle(polar_coordinates):\n    '''\n    returns a list of cartesian coordinates\n    '''\n    return [convert(polar_to_cartesian(c)) for c in polar_coordinates]\ndef cartesian_to_polar_for_angle(coordinates):\n    '''\n    returns a list of polar coordinates for the given angle\n    '''\n    return [convert(cartesian_to_polar(c)) for c in coordinates]\ndef polar_to_cartesian_for_distance(points):\n    '''\n    returns a list of cartesian coordinates\n    '''\n    return [convert(polar_to_cartesian(convert(c))) for c in points]\ndef cartesian_to_polar_for_distance(coords):\n    '''\n    returns a list of polar coordinates for the given angle\n    '''\n    return [convert(cartesian_to_polar(c)) for c in coords]\ndef cartesian_to_angle_for_distance(coords):\n    '''\n    returns a list of polar coordinates for the given angle\n    '''\n    return [angle_between(make_coord(coords),convert(c)) for c in coords]\ndef get_cartesian_to_polar_for_distance(coords):\n    '''\n    returns a list of polar coordinates for the given angle\n    '''\n    return [convert(polar_to_cartesian(convert(c))) for c in coords]\ndef get_cartesian_to_angle_for_distance(coords):\n    '''\n    returns a list of polar coordinates for the given angle\n    '''\n    return [angle_between(make_coord(coords),convert(p)) for p in coords]\ndef get_cartesian_to_angle_for_polar(coords):\n    '''\n    returns a list of polar coordinates for the given angle\n    '''\n    return [angle_between(make_coord(coords),convert(p)) for p in coords]\ndef get_cartesian_to_polar_for_angle(coords):\n    '''\n    returns a list of polar coordinates for the given angle\n    '''\n    return [convert(cartesian_to_polar(c)) for c in coords]\ndef get_cartesian_to_angle_for_polar(coords):\n    '''\n    returns a list of polar coordinates for the given angle\n    '''\n    return [angle_between(make_coord(coords),convert(p)) for p in coords]\ndef angle_between_angles(angles):\n    '''\n    returns the angle between two angles.\n    '''\n    return max(angles) - min(angles)\ndef angle_between_angles_for_polar(angles):\n    '''\n    returns the angle between two angles for polar coordinates.\n    '''\n    return angle_between(angles,convert(polar_to_cartesian(angles)))\ndef distance_between_angles(angles):\n    '''\n    returns the distance between two angles.\n    '''\n    return max(angles) - min(angles)\ndef distance_between_angles_for_polar(angles):\n    '''\n    returns the distance between two angles for polar coordinates.\n    '''\n    return distance_between(angles,convert(polar_to_cartesian(angles)))\ndef angle_between_angles_for_polar_for_distance(angles):\n    '''\n    returns the angle between two angles for polar coordinates for\n    a given distance.\n    '''\n    return angle_between(angles,convert(polar_to_cartesian(angles)))\ndef distance_between_angles_for_polar_for_distance(coords):\n    '''\n    returns the distance between two angles for polar coordinates.\n    '''\n    return distance_between(angles,convert(cartesian_to_polar(coords)))\ndef angle_between_angles_for_polar_for_distance(coords):\n    '''\n    returns the angle between two angles for pola"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if numbers.imag >= 0:\n        numbers = numbers.real*cmath.pi*2\n        numbers = numbers.conjugate()\n    else:\n        numbers = -numbers.imag*cmath.pi*2\n    return numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #checking if any of the arguments are complex number and not only the numbers\n    if isinstance(numbers, (int, float)):\n        print(\"Invalid input. Please enter a number.\")\n        return\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        #if the number is a complex number\n        if(type(num) == complex):\n            #convert the number to polar coordinates\n            y = cmath.polar(num)\n            #convert to the desired format\n            x = float('{:.15f}'.format(y[0]))\n            #change the value to the desired format\n            y = float('{:.15f}'.format(y[1]))\n            #return the result\n            return x,y\n        #if it isn't a complex number\n        else:\n            #return the number in scientific form\n            print(num,'is not a complex number')\n            return num\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # M = M_1 + M_2\n    M = numbers[0] + numbers[1]\n    # Theta = M_1 * e^(-2j M_2)\n    theta = cmath.exp(2j * cmath.pi * M)\n    return theta\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers)==1:\n        return [complex(numbers[0]),0]\n    if len(numbers)==2:\n        return [complex(numbers[0]),complex(numbers[1])]\n    for i in range(2,len(numbers)):\n        new_number=numbers[i]\n        if new_number==0:\n            continue\n        conversion_function=convert(numbers[:i]+[new_number])\n        new_number=conversion_function[0]+new_number\n        numbers=conversion_function[1]+[new_number]\n    return numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #convert to list of numbers\n    nums = []\n    for i in range(len(numbers)):\n        nums.append(complex(numbers[i][0], numbers[i][1]))\n    #convert list to set\n    set_of_nums = set(nums)\n    #loop through numbers list\n    for i in nums:\n        #check if i is an exact power of 2\n        if i.bit_length() == 2:\n            #print number is an exact power of 2\n            print(i, 'is an exact power of 2')\n            #convert to list of numbers\n            nums_lst = []\n            for j in range(len(set_of_nums)):\n                nums_lst.append(complex(set_of_nums.pop(), i.imag))\n            #convert list to set\n            set_of_nums_lst = set(nums_lst)\n            #loop through set\n            for k in set_of_nums_lst:\n                #print k\n                print(k, 'is a number that is a power of 2')\n            #print nums\n            print(nums, 'converted to polar coordinates')\n        else:\n            #print number is not an exact power of 2\n            print(i, 'is not an exact power of 2')\n            #convert to list of numbers\n            nums_lst = []\n            for j in range(len(set_of_nums)):\n                nums_lst.append(complex(set_of_nums.pop(), i.imag))\n            #convert list to set\n            set_of_nums_lst = set(nums_lst)\n            #loop through set\n            for k in set_of_nums_lst:\n                #print k\n                print(k, 'is a number that is a power of 2')\n            #print nums\n            print(nums, 'converted to polar coordinates')\n    #return list of numbers\n    return nums\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_list = [numbers[i] for i in range(len(numbers))]\n    polar = [cmath.polar(c, 2*cmath.pi) for c in complex_list]\n    print(polar)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r=numbers[0]\n    i=1\n    while i<len(numbers):\n        r,i=r*numbers[i],i+1\n    return r,i\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # create empty list to append integer elements\n    integer_list = []\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if type(list1[i]) == int:\n            count = count + 1\n    return count\n    \ndef remove_all(list1, element):\n    '''\n    Write a python function that returns a new list with all occurrences of element in it.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        if list1[i] == element:\n            result.append(list1[i])\n            result.append(list1[i])\n    return result\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) is int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    x = 0\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            x += 1\n    return x\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    lst = []\n    for i in list1:\n        if type(i)!= int:\n            print(\"Invalid type\")\n            break\n        else:\n            lst.append(i)\n    return len(lst)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list_index = []\n    for i in range(len(list1)):\n        if type(list1[i]) is int:\n            list_index.append(list1[i])\n    return len(list_index)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return combinations_with_replacement(l,n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            comb.append((l[i][j], i, j))\n    return list(combinations_with_replacement(comb, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    for i in range(n):\n        colors.append(l[i])\n    combinations = list(combinations_with_replacement(colors, n))\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(itertools.combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    c = []\n    for i in range(1, n + 1):\n        c.append(combinations(l, i))\n    return c\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    lst = [e for e in l]\n    return combinations_with_replacement(lst, n)\n    \n    \n    "
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # TODO: write your code here\n    combos = []\n    for i in range(1, n+1):\n        for combination in combinations_with_replacement(l, i):\n            combos.append(combination)\n    return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(l):\n        combos.extend(combinations(l, i + 1))\n    return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Declare an empty list\n    colors = []\n    # Loop through all possible combinations of n elements \n    for combination in combinations_with_replacement(l, n):\n        # Check if all the values in the list are equal to the first index in combination \n        if len(combination) == n:\n            # If it is, then the color is the last element in the list \n            colors.append(list(combination)[-1])\n    # Return the list\n    return colors\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if not isinstance(l, list):\n        l = [l]\n    combs = list(combinations_with_replacement(l, n))\n    return combs\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if isprime(i):\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 2:\n        return 0\n    # all numbers in the range of 2 to n are prime numbers\n    # eg: 2,3,5,7,11,13,19\n    # this is quicker than using any nested loops\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 0: return 0\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n        if count == 2:\n            return n\n    return 0"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if (n<=1):\n        return 0\n    for i in range(2,int(n**0.5)+1):\n        if (n%i==0):\n            return 0\n    return 1\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 0\n    else:\n        res = count_Primes_nums(n//2)\n        res += count_Primes_nums(n//3)\n        return res\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_numbers = []\n    for i in range(1, n + 1):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return len(prime_numbers)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n+1):\n        for j in range(i+1, n+1):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<0:\n        return 0\n    else:\n        prime_list=[]\n        for i in range(2,n+1):\n            is_prime=True\n            for j in range(2,i):\n                if i%j==0:\n                    is_prime=False\n            if is_prime:\n                prime_list.append(i)\n        return len(prime_list)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # This function can take in a non-negative number and returns the number of prime numbers less than the given non-negative number\n    # You will need to return a boolean value.\n    # Returns True if the function was successful, or False if it was not possible to successfully calculate the result\n    def count_primes(n):\n        if n == 0 or n == 1:\n            return 0\n        elif n == 2 or n == 3:\n            return 1\n        else:\n            for i in range(n):\n                if is_prime(i):\n                    return count_primes(i + 1)\n            return count_primes(n - 1)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        # Declare a loop to handle each number\n        for j in range(2, n):\n            if i % j == 0:\n                break\n        else:\n            # The number is prime\n            # Counting the number of prime numbers less than or equal to n\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a=int(a)\n    b=int(b)\n    if a>b:\n        return b,a\n    elif b>a:\n        return a,b\n    else:\n        return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a == b:\n        return (a,b)\n    else:\n        if a > b:\n            a,b = b,a\n        else:\n            a,b = a,b\n        return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a > b:\n        tup = (b,a)\n    else:\n        tup = (a,b)\n    return tup\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # TODO: Write your code here\n    # return (b,a)\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Start your code here\n    temp = a\n    a = b\n    b = temp\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first = a\n    second = b\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = test_tup1 + test_tup2\n        return result\n    else:\n        return \"The two tuples don't have the same number of elements.\"\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #TODO: write function to maximize two tuples\n    #TODO: test this function\n    '''\n    OUTPUT: if the first tuple is greater then the second, then it will return True\n    '''\n    #CHECK_1: each tuple has to be tuple\n    #return True if it has the same length\n    #if it has the same length, return True\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    #CHECK_2: each tuple must have the same elements\n    #if they are same, it's True\n    #if they are not, it's False\n    #return True\n    #TODO: write a function that does the right thing\n    #note: if the first tuple is the same as the second, it will return True\n    #TODO: write a function to maximize the length of each tuple\n    #TODO: write a function to find which one is maximum\n    #TODO: write a function to compare the tuple with the tuple with which it is largest\n    #TODO: write a function to return the largest tuple\n    #TODO: write a function to compare the tuple with the tuple with which it is largest\n    #TODO: write a function to compare the tuple with the tuple with which it is largest\n    #TODO: write a function to compare the tuple with the tuple with which it is largest\n    #TODO: write a function to compare the tuple with the tuple with which it is largest\n    #TODO: write a function to compare the tuple with the tuple with which it is largest\n    #TODO: write a function to find the smallest element in the tuple with the smallest\n    #TODO: write a function to find the largest element in the tuple with the greatest\n    #TODO: write a function to find the smallest element in the tuple with the greatest\n    #TODO: write a function to find the second smallest element in the tuple with the second greatest\n    #TODO: write a function to find the second largest element in the tuple with the second greatest\n    #TODO: write a function to find the second smallest element in the tuple with the second greatest\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to find the second largest element in the tuple with the second greatest\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to find the second smallest element in the tuple with the second greatest\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO: write a function to compare the tuples\n    #TODO"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def maximize_elements(list1, list2):\n        return max(list1, list2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(test_tup1[0], test_tup2[0])\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max_val:\n            max_val = test_tup1[i]\n    for i in range(1, len(test_tup2)):\n        if test_tup2[i] > max_val:\n            max_val = test_tup2[i]\n    return max_val\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max = ()\n    test_tup3 = test_tup1 + test_tup2\n    for t in test_tup3:\n        if t[0] > max[0]:\n            max = t\n    return max\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #write your code here\n    #pass \n    return test_tup1\n    #raise NotImplementedError\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup_max_val = (0, 0)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            test_tup_max_val = (test_tup1[i], i)\n    return test_tup_max_val\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print(f'The max value of the two tuples is {max(test_tup1, test_tup2)}')\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == 0:\n        return test_tup2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    elif test_tup1[0] > test_tup2[0]:\n        return maximize_elements(test_tup1[1:], test_tup2)\n    else:\n        return maximize_elements(test_tup2[1:], test_tup1)\n    \n    \n    "
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = [True] * n\n    m = int(n ** 0.5)\n    for i in range(3, m + 1):\n        if sieve[i]:\n            for j in range(i + i, n, i):\n                sieve[j] = False\n    return [i for i in range(n) if sieve[i] == True]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = []\n    for i in range(2,n+1):\n        if n%i==0:\n            prime.append(i)\n    return prime[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt\n    for i in range(2,int(sqrt(n)+1)): \n        if n%i==0: \n            return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime =[]\n    for i in range(2, n + 1):\n        if is_prime(i):\n            prime.append(i)\n    return prime[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    m = 2\n    while True:\n        m = m + 2\n        if m > n:\n            break\n        if n % m == 0:\n            return m\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # count is used to solve the problem again\n    count = 0\n    \n    # if the number is divisible by n then it is not prime\n    # i.e. it is not prime or already prime\n    while n % 2 == 0:\n        n = n / 2\n    # if the number is divisible by n and the number is not divisible by 2 then it is not prime\n    # and is therefore not prime\n    # i.e. it is not prime or already prime\n    if n % 2 == 0:\n        count = count + 1\n    else:\n        count = count + 2\n    # if the number is divisible by 2 or not divisible by 2 then it is not prime\n    # i.e. it is not prime or already prime\n    if count > 2:\n        count = count + 3\n    # i.e. it is prime\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    import math \n    if n == 1:\n        return 2\n    else:\n        y=3\n        while y < n:\n            if n%y == 0:\n                return 0\n            y += 2\n    return n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    while i*i <= n:\n        if n % i == 0: \n            j = n//i\n            n = n - (j*i)\n            break\n        else: \n            i = i + 1\n    if n > 1: \n        if n % i == 0:\n            j = n//i\n            n = n - (j*i)\n            break\n        else: \n            return newman_prime(n-1)\n    else:\n        return 0\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    k = 1\n    while (n % 2 == 0):\n        n = n // 2\n        k += 1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 5\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n//2) + newman_prime(n//2)\ndef print_list(n):\n    '''\n    Print all the nth newman\u2013shanks\u2013williams prime numbers.\n    '''\n    if n == 2:\n        print(\"1\")\n    elif n == 3:\n        print(\"2\")\n    elif n == 4:\n        print(\"3\")\n    else:\n        for i in range(0,n):\n            print(newman_prime(i))\nn = int(input(\"Enter the number: \"))\nprint_list(n)"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def check(result):\n        try:\n            assert result[0] == test_tup1[0]\n            assert result[1] == test_tup2[1]\n        except AssertionError as error:\n            print(error)\n        \n    result = test_tup1/test_tup2\n    check(result)\n    return result\n    \n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def division_element(tup1, tup2):\n        return (tup1[0] * tup2[0], tup1[1] * tup2[1])\n    test_tup1, test_tup2 = (test_tup1, test_tup2)\n    result = division_element(test_tup1, test_tup2)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # YOUR CODE HERE\n    print('Division of', test_tup1, 'and', test_tup2, 'is', test_tup1[0]/test_tup2[0])\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    test_list1.append(0)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [tuple(div) for tuple in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == 1:\n        if test_tup1[0] == test_tup2:\n            return test_tup1[0]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup3 = tuple(x / test_tup2[1] for x in test_tup1[0])\n    return test_tup3\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    div_tup = ()\n    for i in range(len(test_tup1)):\n        div_tup = div_tup + (test_tup1[i] / test_tup2[i])\n    return div_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Split test tuple into two sub-tuples (test1, test2)\n    test1, test2 = test_tup1\n    # Split test tuple into two sub-tuples (test1, test2)\n    test2, test3 = test_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # YOUR CODE HERE\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create empty lists for the parts\n    part_one = []\n    part_two = []\n    # Loop through each element of the list\n    for element in list1:\n        # If L is equal to the length of the first part\n        if L == len(part_one):\n            # If the current element is smaller than the smallest number, create a new part\n            if len(part_one) < L:\n                part_one.append(element)\n        # If L is equal to the length of the second part\n        elif L == len(part_two):\n            # If the current element is smaller than the smallest number, create a new part\n            if len(part_two) < L:\n                part_two.append(element)\n        # If L is not equal to the length of the first part and L is not equal to the length of the second part, create a new part\n        else:\n            if len(part_one) < L:\n                part_one.append(element)\n            if len(part_two) < L:\n                part_two.append(element)\n    # Return part one and part two\n    return part_one, part_two\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return (list1, list1)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        print('Error: The list has less than'+ str(L) +'elements')\n        return None\n    else:\n        return list1[0:L], list1[L:]\n    \ndef test_split_two_parts():\n    '''\n    Use the split_two_parts function.\n    '''\n    list1 = [1, 2, 3, 4]\n    assert split_two_parts(list1, 2) == [1, 2], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 5) == [1, 2, 3, 4, 5], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 7) == [1, 2, 3, 4, 5, 6, 7], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 12) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 13) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 16) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'Error: The split should return a tuple'\n    \ndef test_split_two_parts():\n    '''\n    Use the split_two_parts function.\n    '''\n    list1 = [1, 2, 3, 4]\n    assert split_two_parts(list1, 2) == [1, 2], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 5) == [1, 2, 3, 4], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 7) == [1, 2, 3, 4, 5, 6, 7], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 12) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 13) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 16) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 21) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 23) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 24) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 26) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], 'Error: The split should return a tuple'\n    assert split_two_parts(list1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], 'Error: The split should return a tuple'\n    assert split_two_parts"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > 2:\n        result = []\n        for i in range(len(list1)):\n            result.append(list1[:L])\n            list1 = list1[L:]\n        result.append(list1)\n        return result\n    else:\n        return list1, []\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if not list1:\n        return list1, list1, list1\n    if len(list1) == 1:\n        return list1, list1\n    elif L <= 1:\n        return list1, list1, list1\n    else:\n        s1 = split_two_parts(list1[:L//2], L//2)\n        s2 = split_two_parts(list1[L//2:], L//2)\n        return s1, s2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #Part 1\n    print(f\"1.Part 1 - Splitting the given list into two parts.\")\n    #print(list1)\n    list1_len = len(list1)\n    #part 1 output\n    list1_part_one = list1[:L]\n    list1_part_two = list1[L:]\n    return list1_part_one, list1_part_two\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # use a for loop with the length of the first list\n    length = 0\n    for elem in list1:\n        length += 1\n    split_len = L // length\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    res = []\n    for i in range(L):\n        res.append(list1[i:i+L])\n    return tuple(res)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <=2 :\n        return h_age\n    elif h_age >=3 and h_age <= 4:\n        return h_age-1\n    elif h_age >=5 and h_age <=6:\n        return h_age-2\n    elif h_age >=7 and h_age <= 8:\n        return h_age-3\n    elif h_age >= 9 and h_age <= 10:\n        return h_age-4\n    elif h_age >=11 and h_age <= 12:\n        return h_age-5\n    else:\n        return h_age-6\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        raise ValueError('h_age should be greater than 0.')\n    if h_age <= 2:\n        return 0\n    elif h_age <= 4:\n        return (h_age - 1) * 4\n    elif h_age <= 6:\n        return (h_age - 1) * 2 + 1\n    elif h_age <= 8:\n        return (h_age - 1) * 1.5 + 1\n    else:\n        return (h_age - 1) * 3 + 2\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    import math\n    import time\n    start_time = time.time()\n    start = start_time\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 365\n    return f'{years} dog years'\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs = h_age\n    years = dogs * 365\n    print(f\"{dogs} dog years are {years} years old.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 0 and h_age <= 2:\n        return 'No, bingo!'\n    elif h_age > 2:\n        return 'No, bingo!'\n    else:\n        return 'Yes, dog age is'+ str(h_age)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = int(h_age)\n    years = 1\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Your code here\n    import math\n    if h_age<0:\n        print(\"invalid\")\n    elif h_age>18:\n        print(\"invalid\")\n    else:\n        return math.floor(h_age*14)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age<=1:\n        print(\"you are \" + str(h_age) + \" years old\")\n    elif h_age<=3:\n        print(\"you are \" + str(h_age) + \" years old\")\n    elif h_age<=6:\n        print(\"you are \" + str(h_age) + \" years old\")\n    else:\n        print(\"you are \" + str(h_age) + \" years old\")\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = 0\n    if h_age < 3:\n        age += 1\n    elif h_age < 6:\n        age += 2\n    elif h_age < 9:\n        age += 3\n    else:\n        age += 4\n    return age\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError('step must be positive')\n    if step > len(S):\n        raise ValueError('step exceeds the length of the list')\n    else:\n        return [S[i:i + step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # TO-DO: Write the function\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    T = []\n    for i in range(0, len(S), step):\n        T.append(S[i:i+step])\n    return T\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    l = len(S)\n    if (l % step)!= 0:\n        result = result + [S[l//step]] * (step-l % step)\n    else:\n        result = result + [S[l//step]]\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0:\n        return S\n    return [list_split(S, step-1) for i in range(len(S))]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # your code goes here\n    return []\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_l = []\n    l = []\n    for i in range(0, len(S), step):\n        new_l.append(S[i:i+step])\n    return new_l\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i*step:(i+1)*step] for i in range(math.ceil(len(S)/step))]\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # your code goes here\n    a = (l**2) + (l**2)**2\n    # print(a)\n    print('The area of a cube in the bottom surface is', a)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    # Create a list of sides\n    sides = [3,6,9,12,15,18,21]\n    \n    # Create a new list to store the result\n    new = []\n    \n    # Find the side length\n    for i in sides:\n        if l == i:\n            a = (sides.index(i))\n            break\n    \n    # Store the side length in a variable\n    side = i\n    \n    # Loop through each side of the cube\n    for i in range(a,a+4):\n        # Create a list of numbers separated by 1\n        sublist = [n for n in range(side+1)]\n        # Create a new list to store the result\n        newlist = []\n        # Loop through each value in sublist\n        for j in sublist:\n            # Append the value to newlist\n            newlist.append(j)\n        # Store the result of a new list in the new variable\n        new.append(newlist)\n    # Return the result\n    return new\n    "
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n    import numpy.linalg as la\n    #import numpy.linalg.solve as solve\n    #import numpy.linalg.solve as solve\n    import numpy.linalg as la\n    import numpy.random as nr\n    import numpy.linalg as linalg\n    import numpy as np\n    import numpy as np\n    \n    def lerp(f, a, b):\n        \"\"\"\n        f: value to interpolate to (float)\n        a: lower bound (float)\n        b: upper bound (float)\n        \"\"\"\n        return (a + b) * f + (b - a) * (1.0 - f)\n    \n    def gamma(l):\n        \"\"\"\n        l: length of the side of the cube\n        \"\"\"\n        return l**2\n    \n    def parabola(l):\n        \"\"\"\n        l: length of the side of the cube\n        \"\"\"\n        return la.norm(l, ord=np.inf)**2\n    \n    def get_space(l, type):\n        '''\n        l: length of the side of the cube\n        type: type of the surface area (ie. parabola, gamma)\n        '''\n        if type == 'parabola':\n            return la.norm(l**2, ord=np.inf)\n        elif type == 'gamma':\n            return l**2\n        else:\n            raise Exception('Type of surface area is not supported.')\n    \n    def get_param(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2\n    \n    def get_f(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return gamma(l)\n    \n    def normalize_side_length(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return la.norm(l, ord=np.inf)\n    \n    def get_side_length(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return la.norm(l, ord=np.inf)\n    \n    def get_lateral_surface_area(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2\n    \n    def get_lateral_surface_area_cube(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_square(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2\n    \n    def get_lateral_surface_area_trapezoid(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2\n    \n    def get_lateral_surface_area_tetrahedron(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_cube(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_tetrahedron(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_tetrahedron_cube(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_tetrahedron_square(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_triangle_square(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_quadruple_square(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_quadruple_cube(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_tetrahedron_cube(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_tetrahedron_square_cube(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_tetrahedron_square_cube_cube(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_triangle_square_cube(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_quadruple_square_cube(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_quadruple_cube_cube(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_tetrahedron_cube(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_tetrahedron_square_cube(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_tetrahedron_square_cube_cube(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return l**2 + la.norm(l, ord=np.inf)**2 + gamma(l)\n    \n    def get_lateral_surface_area_tetrahedron(l):\n        '''\n        l: length of the side of the cube\n        '''\n        return get_lateral_surface_area_cube(l)\n    \n    def get_lateral_surface_area_cube(l):\n        '''"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    assert l >= 0, \"Lateral surface area must be positive!\"\n    assert l <= 20, \"Lateral surface area can be between 0.5 and 12.5!\"\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*np.pi*l*2\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    print 'l =', l\n    return 1.9*l**2*9*1.85/(8*3.14159*(l**2))\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    s = (math.pi*l**2)*6\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    squares = []\n    for i in range(1,n+1):\n        if(i%2 == 1):\n            squares.append(i**2)\n    print(squares)\n    return sum(squares)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    # Your code here\n    return sum(i**2 for i in range(1, n+1))\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    num=0\n    for i in range(1,n+1):\n        if i%2==0:\n            num=num+i**2\n    return num\n    \ndef fibonacci(n):\n    '''\n    Write a python function that takes in an integer n and returns the nth fibonacci number.\n    '''\n    num=0\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        num=fibonacci(n-1)+fibonacci(n-2)\n    return num\n    \ndef factorial(n):\n    '''\n    Write a python function that takes in an integer n and returns the factorial of n.\n    '''\n    num=1\n    for i in range(1,n+1):\n        num*=i\n    return num\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            s = s + i**2\n    return s \n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        if i%2==0:\n            sum+=i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # This problem is solved using recursion\n    # n = int(input(\"Enter a number: \"))\n    # def recursive_square_sum(n):\n    #     if n == 0:\n    #         return 0\n    #     else:\n    #         return n*recursive_square_sum(n-1)\n    # return recursive_square_sum(n)\n    # This is a recursive method\n    def square_sum(n):\n        if n==0:\n            return 0\n        else:\n            return n*n\n    return square_sum(n)\nprint(square_Sum(3)"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    count = 0\n    while n>0:\n        count += (n%2)**2\n        n = n//10\n    return count\n    \nprint(square_Sum(4))\nprint(square_Sum(6))\nprint(square_Sum(7))\nprint(square_Sum(8))\nprint(square_Sum(9))\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    even_count = 0\n    odd_count = 0\n    total = 0\n    for i in range(1, n+1):\n        total = total + (i*i)\n        if i % 2 == 0:\n            even_count = even_count + 1\n        else:\n            odd_count = odd_count + 1\n    return total, even_count, odd_count\n    "
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    numbers = list(range(1, n+1))\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if j!= i and numbers[i] == numbers[j] and numbers[i] * numbers[j] > n:\n                count += 1\n    return count\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    numbers = list(range(1,n+1))\n    for i in range(2,len(numbers)):\n        if(numbers[i-1]*numbers[i]==n):\n            return i\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if i*i == n:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 1\n    while i <= n:\n        if i%3==0:\n            if i%2==0:\n                print (i,end=' ')\n            else:\n                print (i, end=' ')\n            i=i+1\n        else:\n            print (i, end=' ')\n            i=i+1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(n): \n        if num[i] == n: \n            return i + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if (n == 1):\n        return 1\n    elif (n % 2 == 0):\n        return find_star_num(n/2)\n    elif (n % 2 == 1):\n        return (n**2+find_star_num(n/2))**0.5\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    counter = 0\n    for i in range(n): \n        if i + 3*counter <= n: \n            return i + 3*counter \n        counter += 1\n    return -1 \n \n "
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # your code goes here\n    result = 1\n    for i in range(2,n+1):\n        if i % 2!= 0:\n            result = result * i\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = int(n)\n    if n < 0 or n > 1000:\n        return None\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n<=0:\n        return 0\n    for i in range(n,0,-1):\n        if n%i==0:\n            return i\n        \n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    char = k\n    for char in k:\n        try:\n            char = ord(char)\n            return char\n        except:\n            return None\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return (ord(k)-32)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k) - 65\n    else:\n        raise ValueError(\"Illegal character\")\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k.lower())\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ''.join(chr(i) for i in k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # your code here\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if not isinstance(k, str):\n        raise TypeError('Argument must be of type str')\n    return chr(ord(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_values = {'a': 65, 'b': 67, 'c': 68, 'd': 69, 'e': 70, 'f': 71, 'g': 72, 'h': 73, 'i': 74, 'j': 75, 'k': 76, 'l': 77,'m': 78, 'n': 79, 'o': 80, 'p': 81, 'q': 82, 'r': 83,'s': 84, 't': 85, 'u': 86, 'v': 87, 'w': 88, 'x': 89, 'y': 90, 'z': 91,'': 96, '!': 96, '#': 96, '$': 96, '%': 96, '&': 96, '*': 96, '(': 96, ')': 96, '-': 96, '_': 96, '+': 96, '=': 96}\n    return ascii_values[k]\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return chr(ord(k) - ord('a'))\n    else:\n        return k\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for index in range(len(arr)):\n        if index % 2 == 0:\n            even_sum += arr[index]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    even_sum = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    \n    return even_su"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # initializing the accumulator\n    sum = 0\n    # iterating through the list\n    for i in range(0, len(arr)):\n        # if the element is even\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n        # if the element is even and the element is even\n        elif arr[i] % 2 == 1:\n            if i % 2 == 0:\n                sum += arr[i]\n            else:\n                sum += arr[i]\n                # if the sum is even, decrement the accumulator \n        # if the element is even and the element is not even\n        else:\n            sum -= arr[i]\n    # return the sum of even numbers\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0 \n    for n in range(len(arr)): \n        if (arr[n] % 2 == 0):  \n            sum += arr[n]  \n    return sum \n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (arr[i] % 2) == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Find the sum of even elements in the array\n    # Use a for loop to iterate over the array, and increment the count for the even elements\n    # Store the result in a variable\n    sum_even = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum_even = sum_even + arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n<=0:\n        return \"Invalid Input\"\n    else:\n        return sum([pow(i,5) for i in range(1,n+1)])\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for num in range(1, n+1):\n        sum += num\n        # if num > 5:\n        #     break\n        # else:\n        #     continue\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    res = []\n    for i in range(n):\n        res.append(1)\n    for j in range(2, n+1):\n        if j % 2 == 0:\n            res.append(res[j-1] * j)\n        else:\n            res.append(res[j-1] * j)\n    return sum(res)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power = 0\n    for i in range(1, n+1):\n        power = power*i\n    return power\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #make sure the input is a positive integer\n    if n < 0:\n        return 0\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(n):\n        result = result + pow(i,5)\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    l = []\n    for i in range(1,n+1):\n        l.append(i**3)\n    print(l)\n    s = 0\n    for i in range(1, len(l)):\n        if l[i] % 2 == 0:\n            s += l[i]\n        else:\n            continue\n    print(s)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    n = int(n)\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (even_Power_Sum(n - 1)) * n\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_n = 0\n    for num in range(1, n+1):\n        sum_n += num ** 5\n    return sum_n\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power = 5\n    if n <= 0: \n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(n,0,-1):\n            a = pow(i, power)\n            if a == 1:\n                return i\n            else:\n                power = power -1\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted = []\n    for i in range(len(test_list)):\n        rear_extracted.append(test_list[i][1])\n    return rear_extracted\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted = []\n    for tup in test_list:\n        rear_extracted.append(tup[1])\n    return rear_extracted\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for value in test_list:\n        new_list.append(value[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    extracted_list = []\n    for row in test_list:\n        extracted_list.append(row[1])\n    return extracted_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [elem[1] for elem in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # YOUR CODE HERE\n    # FILL IN THE BLANK\n    #print(test_list)\n    return test_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Write your code here\n    return(test_tup1[0] - test_tup2[0])\n    #raise NotImplementedError\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # replace 0 with your code\n    # pass the test_tup1, test_tup2 into the function\n    # return the result of the function\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # write your code here\n    \n    x = test_tup1\n    y = test_tup2\n    count = 0\n    for i in range(len(y)):\n        if x[i] == y[i]:\n            count += 1\n        else:\n            if count == 0:\n                test_tup1 = x\n                count = 1\n                continue\n            if count > 1:\n                x = x[:i]+y[i]+x[i+1:]\n                count = 0\n    return x\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    first_tuple = tuple(test_tup1)\n    second_tuple = tuple(test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return(test_tup1[0] - test_tup2[0])\n    # raise NotImplementedError\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    substract_element = 0\n    test_tup1[0] = test_tup1[0] - test_tup2[0]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Start with the empty string\n    str1 = \"\"\n    # Iterate through the elements of the first tuple\n    for i in range(0, len(test_tup1[0])):\n        # Check if this element is in the second tuple\n        if (i in test_tup2[0]):\n            # If it is, add the element and move to the next element\n            str1 += test_tup1[0][i]\n    # return the string of the first element\n    return str1\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    index1 = 0\n    index2 = 0\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # Check to see if the first tuple and the second tuple have the same index\n    if test_tup1[1] == test_tup2[1]:\n        return (test_tup1[0], test_tup2[0])\n    \n    else:\n        # Check to see if the first tuple is larger than the second tuple\n        if test_tup1[0] > test_tup2[0]:\n            # Assign the index of the first element of the second tuple to the index of the first element of the second tuple\n            index1 = test_tup2[1]\n            index2 = test_tup1[1]\n            \n            # Create a new tuple with the elements of the second tuple\n            test_tup2_new = (test_tup2[0], index2)\n            \n            # Subtract the elements of the first tuple from the elements of the second tuple with the same index\n            test_tup1_new = (test_tup1[0], index1)\n            \n            # Return the new tuples\n            return (test_tup2_new, test_tup1_new)\n        \n        else:\n            # Assign the index of the first element of the first tuple to the index of the second element\n            index1 = test_tup1[1]\n            index2 = test_tup2[1]\n            \n            # Create a new tuple with the elements of the first element\n            test_tup1_new = (index2, test_tup1[0])\n            \n            # Subtract the elements of the second tuple from the elements of the first tuple\n            test_tup2_new = (index1, test_tup2[0])\n            \n            # Return the new tuples\n            return (test_tup1_new, test_tup2_new)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[1:] - test_tup2[1:]\n    \ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (5, 6, 7, 8)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # print(n)\n    n+=1\n    # print(n)\n    return math.comb(n,2)*math.comb(n-1,2)*(n-2)**2\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in range(n):\n        total = total + math.factorial(n - i) / math.factorial(i)\n    return total\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # YOUR CODE HERE\n    if n<=0 or n%2==0:\n        return 0\n    # if n==2 or n==4 or n==6:\n    #     return 1\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += binomialCoeff(i) * even_binomial_Coeff_Sum(i)\n    return sum\ndef even_binomial_Coeff_Sum_N(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += binomialCoeff_N(i) * even_binomial_Coeff_Sum_N(i)\n    return sum\ndef binomialCoeff(n):\n    '''\n    Write a python function that takes in an integer n and calculates the value of binomial Coeffs in the form of a list of three values.\n    '''\n    if n == 0:\n        return [1, 1, 1]\n    elif n == 1:\n        return [1]\n    else:\n        a = binomialCoeff(n-1)\n        b = binomialCoeff_N(n)\n        c = binomialCoeff_N(n-1)\n        return [a[0]+b[0], a[1]+b[1], a[2]+b[2]]\ndef binomialCoeff_N(n):\n    '''\n    Write a python function that takes in an integer n and calculates the value of binomial Coeffs in the form of a list of three values.\n    '''\n    if n == 0:\n        return [1, 1]\n    elif n == 1:\n        return [1]\n    else:\n        a = binomialCoeff_N(n-1)\n        b = binomialCoeff(n-1)\n        c = binomialCoeff(n)\n        return [a[0]+b[0], a[1]+b[1], a[2]+b[2]]\ndef binomialCoeff_I(n):\n    '''\n    Write a python function that takes in an integer n and calculates the value of binomial Coeffs in the form of a list of three values.\n    '''\n    if n == 0:\n        return [1, 1]\n    elif n == 1:\n        return [1, 1]\n    else:\n        a = binomialCoeff_I(n-1)\n        b = binomialCoeff(n-1)\n        c = binomialCoeff(n)\n        return [a[0]+b[0], a[1]+b[1], a[2]+b[2]]\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += binomialCoeff(i) * even_binomial_Coeff_Sum(i)\n    return sum\ndef even_binomial_Coeff_Sum_N(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += binomialCoeff_N(i) * even_binomial_Coeff_Sum_N(i)\n    return sum\ndef binomialCoeff_N(n):\n    '''\n    Write a python function that takes in an integer n and calculates the value of binomial Coeffs in the form of a list of three values.\n    '''\n    if n == 0:\n        return [1, 1]\n    elif n == 1:\n        return [1]\n    else:\n        a = binomialCoeff_N(n-1)\n        b = binomialCoeff(n-1)\n        c = binomialCoeff(n)\n        return [a[0]+b[0], a[1]+b[1], a[2]+b[2]]\ndef binomialCoeff_I(n):\n    '''\n    Write a python function that takes in an integer n and calculates the value of binomial Coeffs in the form of a list of three values.\n    '''\n    if n == 0:\n        return [1, 1]\n    elif n == 1:\n        return [1, 1]\n    else:\n        a = binomialCoeff_I(n-1)\n        b = binomialCoeff(n-1)\n        c = binomialCoeff(n)\n        return [a[0]+b[0], a[1]+b[1], a[2]+b[2]]\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += binomialCoeff(i) * even_binomial_Coeff_Sum(i)\n    return sum\ndef even_binomial_Coeff_Sum_N(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += binomialCoeff_N(i) * even_binomial_Coeff_Sum_N(i)\n    return sum\ndef binomialCoeff_I(n):\n    '''\n    Write a python function that takes in an integer n and calculates the value of binomial Coeffs in the form of a list of three values.\n    '''\n    if n == 0:\n        return [1, 1]\n    elif n == 1:\n        return [1]\n    else:\n        a = binomialCoeff_I(n-1)\n        b = binomialCoeff(n-1)\n        c = binomialCoeff(n)\n        return [a[0]+b[0], a[1]+b[1], a[2]+b[2]]\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and calculates the value of binomial Coeffs in the form of a list of three values.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += binomialCoeff(i) * even_binomial_Coeff_Sum(i)\n    return sum\ndef even_binomial_Coeff_Sum_N(n):\n    '''\n    Write a python function that takes in a positive integer n and calculates the value of binomial Coeffs in the form of a list of three values.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += binomialCoeff_N(i) * even_binomial_Coeff_Sum_N(i)\n    return sum\ndef binomialCoeff_I(n):\n    '''\n    Write a python function that takes in an integer n and calculates the value of binomial Coeffs in the form of a list of three values.\n    '''\n    if n == 0:\n        return [1, 1]\n    elif n == 1:\n        return [1]\n    else:\n        a = binomialCoeff_I(n-1)\n        b = binomialCoeff(n-1)\n        c = binomialCoeff(n)\n        return [a[0]+b[0], a[1]+b[1], a[2]+b[2]]\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and calculates the value of binomial Coeffs in the form of a list of three values.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += binomialCoeff(i) * even_binomial_Coeff_Sum(i)\n    return sum\ndef even_binomial_Coeff_Sum_N(n):\n    '''\n    Write a python function that takes in a positive integer n and calculates the value of binomial Coeffs in the for"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        print('Enter a positive integer greater than 0')\n        return False\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        even_binomial_Coeff_Sum(n-2)\n        even_binomial_Coeff_Sum(n-1)\n        even_binomial_Coeff_Sum(n)\n        return n * math.pow(2, n)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Use a formula to find the binomial coefficient of a positive integer.\n    n = int(n)\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 6\n    if n == 4:\n        return 9\n    if n == 5:\n        return 12\n    if n == 6:\n        return 21\n    if n == 7:\n        return 60\n    if n == 8:\n        return 120\n    if n == 9:\n        return 180\n    if n == 10:\n        return 330\n    if n == 11:\n        return 360\n    if n == 12:\n        return 420\n    if n == 13:\n        return 540\n    if n == 14:\n        return 600\n    if n == 15:\n        return 700\n    if n == 16:\n        return 840\n    if n == 17:\n        return 710\n    if n == 18:\n        return 880\n    if n == 19:\n        return 910\n    if n == 20:\n        return 1000\n    if n == 21:\n        return 1180\n    if n == 22:\n        return 1320\n    if n == 23:\n        return 1460\n    if n == 24:\n        return 1520\n    if n == 25:\n        return 1610\n    if n == 26:\n        return 1780\n    if n == 27:\n        return 1820\n    if n == 28:\n        return 1900\n    if n == 29:\n        return 2100\n    if n == 30:\n        return 2200\n    if n == 31:\n        return 2300\n    if n == 32:\n        return 2400\n    if n == 33:\n        return 2500\n    if n == 34:\n        return 2600\n    if n == 35:\n        return 2700\n    if n == 36:\n        return 2800\n    if n == 37:\n        return 2900\n    if n == 38:\n        return 3000\n    if n == 39:\n        return 3100\n    if n == 40:\n        return 3150\n    if n == 41:\n        return 3210\n    if n == 42:\n        return 3300\n    if n == 43:\n        return 3400\n    if n == 44:\n        return 3500\n    if n == 45:\n        return 3600\n    if n == 46:\n        return 3700\n    if n == 47:\n        return 3800\n    if n == 48:\n        return 3900\n    if n == 49:\n        return 4000\n    if n == 50:\n        return 4100\n    if n == 51:\n        return 4150\n    if n == 52:\n        return 4200\n    if n == 53:\n        return 4300\n    if n == 54:\n        return 4400\n    if n == 55:\n        return 4500\n    if n == 56:\n        return 4600\n    if n == 57:\n        return 4700\n    if n == 58:\n        return 4800\n    if n == 59:\n        return 4900\n    if n == 60:\n        return 5001\n    if n == 61:\n        return 5050\n    if n == 62:\n        return 5150\n    if n == 63:\n        return 5250\n    if n == 64:\n        return 5350\n    if n == 65:\n        return 5450\n    if n == 66:\n        return 5550\n    if n == 67:\n        return 5650\n    if n == 68:\n        return 5750\n    if n == 69:\n        return 5850\n    if n == 70:\n        return 5950\n    if n == 71:\n        return 6000\n    if n == 72:\n        return 6100\n    if n == 73:\n        return 6150\n    if n == 74:\n        return 6250\n    if n == 75:\n        return 6350\n    if n == 76:\n        return 6450\n    if n == 77:\n        return 6550\n    if n == 78:\n        return 6650\n    if n == 79:\n        return 6750\n    if n == 80:\n        return 6850\n    if n == 81:\n        return 6950\n    if n == 82:\n        return 7050\n    if n == 83:\n        return 7150\n    if n == 84:\n        return 7250\n    if n == 85:\n        return 7350\n    if n == 86:\n        return 7450\n    if n == 87:\n        return 7550\n    if n == 88:\n        return 7650\n    if n == 89:\n        return 7750\n    if n == 90:\n        return 7850\n    if n == 91:\n        return 7950\n    if n == 92:\n        return 8050\n    if n == 93:\n        return 8150\n    if n == 94:\n        return 8250\n    if n == 95:\n        return 8350\n    if n == 96:\n        return 8450\n    if n == 97:\n        return 8550\n    if n == 98:\n        return 8650\n    if n == 99:\n        return 8750\n    if n == 100:\n        return 8850\n    if n == 101:\n        return 8950\n    if n == 102:\n        return 9050\n    if n == 103:\n        return 9100\n    if n == 104:\n        return 9500\n    if n == 105:\n        return 10050\n    if n == 106:\n        return 10100\n    if n == 107:\n        return 10150\n    if n == 108:\n        return 10250\n    if n == 109:\n        return 10350\n    if n == 110:\n        return 10450\n    if n == 111:\n        return 10550\n    if n == 112:\n        return 10650\n    if n == 113:\n        return 10750\n    if n == 114:\n        return 10850\n    if n == 115:\n        return 10950\n    if n == 116:\n        return 11100\n    if n == 117:\n        return 11500\n    if n == 118:\n        return 12100\n    if n == 119:\n        return 12500\n    if n == 120:\n        return 13100\n    if n == 121:\n        return 13500\n    if n == 122:\n        return 14100\n    if n == 123:\n        return 14500\n    if n == 124:\n        return 15100\n    if n == 125:\n        return 15500\n    if n == 126:\n        return 16100\n    if n == 127:\n        return 16500\n    if n == 128:\n        return 17100\n    if n == 129:\n        return 17500\n    if n == 130:\n        return 18100\n    if n == 131:\n        return 18500\n    if n == 132:\n        return 19100\n    if n == 133:\n        return 19500\n    if n == 134:\n        return 20000\n    if n == 135:\n        return 20500\n    if n == 136:\n        return 21000\n    if n == 137:\n        return 21500\n    if n == 138:\n        return 22500\n    if n == 139:\n        return 23000\n    if n == 140:\n        return 24500\n    if n == 141:\n        return 25000\n    if n == 142:\n        return 26000\n    if n == 143:\n        return 27000\n    if n == 144:\n        return 28000\n    if n == 145:\n        return 29000\n    if n == 146:\n        return 3000\n    if n == 147:\n        return 3100\n    if n == 148:\n        return 3200\n    if n == 149:\n        return 3300\n    if n == 150:\n        return 3400\n    if n == 151:\n        return 3500\n    if n == 152:\n        return 3600\n    if n == 153:\n        return 3700\n    if n == 154:\n        return 3800\n    if n == 155:\n        return 3900\n    if n == 156:\n        return 4000\n    if n == 157:\n        return 4100\n    if n == 158:\n        return 4150\n    if n == 159:\n        return 4200\n    if n == 160:\n        return 4300\n    if n == 161:\n        return 4400\n    if n == 162:\n        return 4500\n    if n == 163:\n        return 4600\n    if n == 164:\n        return 4700\n    if n == 165:\n        return 4800\n    if n == 166:\n        return 4900\n    if n ="
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_of_even_binomial_coefficients = 0\n    \n    for i in range(1, n+1):\n        sum_of_even_binomial_coefficients += math.factorial(i)/(math.factorial(i-2)*math.factorial(i-1))\n        \n    return sum_of_even_binomial_coefficients\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #return sum( [i for i in range(2, n+1) if (n-i)%2 == 0])\n    return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\ndef even_binomial_Coeff_Sum_2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\n    return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\ndef even_binomial_Coeff_Sum_3( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\n    return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    #return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\n    return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\ndef odd_binomial_Coeff_Sum_2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    #return sum([i for i in range(2, n+1) if (n-i)%2 == 1])\n    return sum([i for i in range(2, n+1) if (n-i)%2 == 1])\ndef odd_binomial_Coeff_Sum_3( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    #return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\n    return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\ndef sum_of_even_index_Binomial_Coeff( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\n    return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\ndef sum_of_even_index_Binomial_Coeff_2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\n    return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\ndef sum_of_even_index_Binomial_Coeff_3( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\n    return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\ndef summ_of_odd_index_Binomial_Coeff( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    #return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\n    return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\ndef summ_of_odd_index_Binomial_Coeff_2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    #return sum([i for i in range(2, n+1) if (n-i)%2 == 1])\n    return sum([i for i in range(2, n+1) if (n-i)%2 == 1])\ndef summ_of_odd_index_Binomial_Coeff_3( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    #return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\n    return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\ndef summ_of_even_index_Binomial_Coeff( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\n    return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\ndef summ_of_even_index_Binomial_Coeff_2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\n    return sum([i for i in range(2, n+1) if (n-i)%2 == 0])\ndef summ_of_even_index_Binomial_Coeff_3( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\n    return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\ndef summ_of_odd_index_Binomial_Coeff( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    #return sum([i for i in range(2, n+1) if (n-i)%2 == 1])\n    return sum([i for i in range(2, n+1) if (n-i)%2 == 1])\ndef summ_of_odd_index_Binomial_Coeff_2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    #return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\n    return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\ndef summ_of_odd_index_Binomial_Coeff_3( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    #return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\n    return sum([i for i in range(1, n+1) if (n-i)%2 == 1])\ndef sum_of_odd_even_index_Binomial_Coeff( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd even index binomial coefficients.\n    '''\n    #return sum([i for i in range(2"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += (math.factorial(n) // math.factorial(i)) * (i ** 2) * math.factorial(i - 2)\n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (1 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (2 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_3(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (3 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_4(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (4 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_5(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (5 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_6(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (6 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_7(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (7 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_8(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (8 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_9(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (9 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_10(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (10 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_11(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (11 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_12(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (12 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_13(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (13 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_14(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (14 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_15(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (15 + math.sqrt(n)) * (2 * (n/2))\n    else:\n        c = 2 * (n/2)\n    return c\n    \ndef even_binomial_Coeff_Sum_16(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        c = (16 + math.sqr"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v=3.14*(r**2)\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=4*pi*r*h*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = r*h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r*r*h\ndef volume_ellipse(r1,r2,r3,h1,h2):\n    '''\n    Write a function that takes in the radius of a circle, radius of line, radius of parabola, and height of a parallelogram and returns the volume.\n    '''\n    return (r1*(r2**2)+r3*(r2*r3))*h1"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.1416*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Define volume\n    volume = (4/3)*np.pi*(r**3)\n    print(volume)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 4/3 * math.pi * r * h\n    print(\"The volume of the cylinder is \" + str(vol))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v=r*h**3\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*np.pi*(r**3)*h\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for k,v in dict.items():\n        if v >= n:\n            filtered[k] = v\n    return filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    out = dict.copy()\n    for key, value in dict.items():\n        if value >= n:\n            out[key] = value\n    return out\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key in dict:\n        if dict[key]>=n:\n            dict[key] = '*'\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict=dict.copy()\n    for k,v in dict.items():\n        if v > n:\n            filtered_dict[k] = v\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key, value in dict.items():\n        if type(value) == dict:\n            value = dict_filter(value,n)\n        if type(value) == int and value >= n:\n            dict[key] = value\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = []\n    for entry in dict.values():\n        if entry >= n:\n            result.append(entry)\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newDict = {}\n    for k in dict:\n        if dict[k] >= n:\n            newDict[k] = dict[k]\n    return newDict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for key in dict:\n        if dict[key] >= n:\n            filtered[key] = dict[key]\n    return filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    s=[]\n    for key,value in dict.items():\n        if value>=n:\n            s.append(key)\n    print(s)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    def number_elements(test_tuple):\n        '''\n        Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n        '''\n        \n        for i in range(len(test_tuple)):\n            for j in range(i+1,len(test_tuple)):\n                if test_tuple[i] == test_tuple[j]:\n                    pass\n                else:\n                    print(f\"{test_tuple[i]}, {test_tuple[j]}\")\n        \n    print('First Element')\n    print(test_tup[0])\n    number_elements(test_tup)\n    \n    print('Second Element')\n    print(test_tup[1])\n    number_elements(test_tup)\n    \n    print('Third Element')\n    print(test_tup[2])\n    number_elements(test_tup)\n    \n    return 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    i = 0\n    j = 1\n    element = test_tup[i]\n    while(j<len(test_tup)):\n        if test_tup[j] == element:\n            j+=1\n        else:\n            break\n    return j-i-1\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if test_tup:\n        first = test_tup[0]\n        if first == test_tup[-1]:\n            return len(test_tup)\n        else:\n            return 1 + count_first_elements(test_tup[1:])\n    else:\n        return 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    # # Solution #1 - Basic idea:\n    # # Count the number of elements from the first position of the tuple element.\n    # # Solution will be the same as the previous solution, but in a new loop.\n    \n    # print(\"--- Solution 1 ---\")\n    # # print(test_tup, type(test_tup))\n    \n    # count = 0\n    # for i in range(len(test_tup)):\n    #     # print(i)\n    #     if test_tup[i] < test_tup[0]:\n    #         count += 1\n    # print(count)\n    \n    # # Solution 2:\n    # count_lower = 0\n    # count_upper = 0\n    # for i in range(len(test_tup)):\n    #     if test_tup[i] < test_tup[0]:\n    #         count_lower += 1\n    #     elif test_tup[i] > test_tup[0]:\n    #         count_upper += 1\n    # print(count_lower, count_upper)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if test_tup == None:\n        return 0\n    else:\n        return count_first_elements(test_tup[1:])\n        \n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    dict = {}\n    for i in range(len(test_tup)):\n        dict[test_tup[i]] = dict.get(test_tup[i],0) + 1\n        \n    return(dict.get(test_tup[i],0))\n    \nprint(count_first_elements((1,2,3,4,5,6)))\nprint(count_first_elements((1,2,3,4,5,6,7,8,9)))\nprint(count_first_elements((1,2,3,4,5,6,7,8,9,10)))\n    \n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter=0\n    for i in range(len(test_tup)):\n        if test_tup[i]==test_tup[0]:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(0, len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    print(f\"The first element in the tuple is {test_tup[0]} and its index is {count}\")\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0: \n        return None\n    #Base case\n    if n == 0:\n        return 0\n    #n in base cases\n    if n == 1: \n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 176:\n        return 176\n    if n == 177:\n        return 177\n    if n == 178:\n        return 178\n    if n == 179:\n        return 179\n    if n == 180:\n        retur"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: return 0\n    elif n == 1: return 1\n    elif n == 2: return 3\n    elif n == 3: return 5\n    elif n == 4: return 8\n    elif n == 5: return 15\n    elif n == 6: return 21\n    elif n == 7: return 28\n    elif n == 8: return 39\n    elif n == 9: return 48\n    elif n == 10: return 59\n    elif n == 11: return 72\n    elif n == 12: return 87\n    elif n == 13: return 120\n    elif n == 14: return 131\n    elif n == 15: return 144\n    elif n == 16: return 167\n    elif n == 17: return 200\n    elif n == 18: return 231\n    elif n == 19: return 256\n    elif n == 20: return 289\n    elif n == 21: return 320\n    elif n == 22: return 329\n    elif n == 23: return 348\n    elif n == 24: return 391\n    elif n == 25: return 456\n    elif n == 26: return 491\n    elif n == 27: return 528\n    elif n == 28: return 539\n    elif n == 29: return 568\n    elif n == 30: return 628\n    elif n == 31: return 639\n    elif n == 32: return 656\n    elif n == 33: return 673\n    elif n == 34: return 728\n    elif n == 35: return 739\n    elif n == 36: return 768\n    elif n == 37: return 828\n    elif n == 38: return 839\n    elif n == 39: return 866\n    elif n == 40: return 928\n    elif n == 41: return 939\n    elif n == 42: return 966\n    elif n == 43: return 1001\n    elif n == 44: return 1024\n    elif n == 45: return 1033\n    elif n == 46: return 1054\n    elif n == 47: return 1073\n    elif n == 48: return 1110\n    elif n == 49: return 1149\n    elif n == 50: return 1158\n    elif n == 51: return 1209\n    elif n == 52: return 1258\n    elif n == 53: return 1273\n    elif n == 54: return 1291\n    elif n == 55: return 1326\n    elif n == 56: return 1349\n    elif n == 57: return 1376\n    elif n == 58: return 1421\n    elif n == 59: return 1450\n    elif n == 60: return 1479\n    elif n == 61: return 1518\n    elif n == 62: return 1559\n    elif n == 63: return 1578\n    elif n == 64: return 1629\n    elif n == 65: return 1658\n    elif n == 66: return 1679\n    elif n == 67: return 1718\n    elif n == 68: return 1759\n    elif n == 69: return 1778\n    elif n == 70: return 1829\n    elif n == 71: return 1858\n    elif n == 72: return 1840\n    elif n == 73: return 1859\n    elif n == 74: return 1886\n    elif n == 75: return 1927\n    elif n == 76: return 1950\n    elif n == 77: return 1960\n    elif n == 78: return 1970\n    elif n == 79: return 2029\n    elif n == 80: return 2058\n    elif n == 81: return 2079\n    elif n == 82: return 2108\n    elif n == 83: return 2139\n    elif n == 84: return 2158\n    elif n == 85: return 2189\n    elif n == 86: return 2248\n    elif n == 87: return 2249\n    elif n == 88: return 2280\n    elif n == 89: return 2319\n    elif n == 90: return 2358\n    elif n == 91: return 2379\n    elif n == 92: return 2418\n    elif n == 93: return 2459\n    elif n == 94: return 2478\n    elif n == 95: return 2507\n    elif n == 96: return 2544\n    elif n == 97: return 2553\n    elif n == 98: return 2574\n    elif n == 99: return 2591\n    elif n == 100: return 2624\n    elif n == 101: return 2661\n    elif n == 102: return 2676\n    elif n == 103: return 2723\n    elif n == 104: return 2750\n    elif n == 105: return 2779\n    elif n == 106: return 2810\n    elif n == 107: return 2819\n    elif n == 108: return 2858\n    elif n == 109: return 2881\n    elif n == 110: return 2918\n    elif n == 111: return 2959\n    elif n == 112: return 2998\n    elif n == 113: return 3024\n    elif n == 114: return 3061\n    elif n == 115: return 3076\n    elif n == 116: return 3111\n    elif n == 117: return 3138\n    elif n == 118: return 3169\n    elif n == 119: return 3178\n    elif n == 120: return 3199\n    elif n == 121: return 3258\n    elif n == 122: return 3279\n    elif n == 123: return 3318\n    elif n == 124: return 3360\n    elif n == 125: return 3381\n    elif n == 126: return 3406\n    elif n == 127: return 3421\n    elif n == 128: return 3460\n    elif n == 129: return 3480\n    elif n == 130: return 3509\n    elif n == 131: return 3528\n    elif n == 132: return 3549\n    elif n == 133: return 3578\n    elif n == 134: return 3610\n    elif n == 135: return 3619\n    elif n == 136: return 3658\n    elif n == 137: return 3679\n    elif n == 138: return 3718\n    elif n == 139: return 3760\n    elif n == 140: return 3780\n    elif n == 141: return 3819\n    elif n == 142: return 3858\n    elif n == 143: return 3879\n    elif n == 144: return 3908\n    elif n == 145: return 3939\n    elif n == 146: return 3968\n    elif n == 147: return 3989\n    elif n == 148: return 4008\n    elif n == 149: return 4019\n    elif n == 150: return 4037\n    elif n == 151: return 4064\n    elif n == 152: return 4081\n    elif n == 153: return 4127\n    elif n == 154: return 4136\n    elif n == 155: return 4183\n    elif n == 156: return 4253\n    elif n == 157: return 4274\n    elif n == 158: return 4291\n    elif n == 159: return 4317\n    elif n == 160: return 4358\n    elif n == 161: return 4379\n    elif n == 162: return 4399\n    elif n == 163: return 4433\n    elif n == 164: return 4464\n    elif n == 165: return 4481\n    elif n == 166: return 4523\n    elif n == 167: return 4567\n    elif n == 168: return 4613\n    elif n == 169: return 4662\n    elif n == 170: return 4783\n    elif n == 171: return 4802\n    elif n == 172: return 4815\n    elif n == 173: return 4854\n    elif n == 174: return 4881\n    elif n == 175: return 4917\n    elif n == 176: return 4965\n    elif n == 177: return 4981\n    elif n == 178: return 5018\n    elif n == 179: return 5039\n    elif n == 180: return 5078\n    elif n == 181: return 5119\n    elif n == 182: return 5158\n    elif n == 183: return 5209\n    elif n == 184: return 5266\n    elif n == 185: return 530"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n > nth:\n        return False\n    if n == nth:\n        return True\n    return is_num_decagonal(n-1)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #Your code goes here\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    else:\n        return n * is_num_decagonal(n-1)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # your code goes here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 176:\n        return 176\n    if n == 177:\n        return 177\n    if n == 178:\n        return 178\n    if n == 179:\n        return 179\n    if n == 180:\n        return 180\n    if n == 181:\n        return 181\n    if n == 182:\n        return 182\n    if n == 18"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # 1) Use floor division to get the floor number. \n    # 2) Use binary search to find the first nth decagonals. \n    # 3) Find the exponent with the highest digit\n    # 4) If the number is divisible by 2, it should also be divisible by 3\n    # 5) If the number is divisible by 5, it should also be divisible by 6\n    # 6) If the number is divisible by both 5 and 3, it should also be divisible by both 6 \n    # 7) If the number is divisible by both 6 and 5, it should also be divisible by both 6 and 5\n    # 8) If the number is divisible by both 6 and 4, it should also be divisible by both 6 and 4\n    # 9) If the number is divisible by both 6 and 3, it should also be divisible by both 6 and 3\n    # 10) If the number is divisible by both 6 and 2, it should also be divisible by both 6 and 2\n    # 11) If the number is divisible by both 6 and 1, it should also be divisible by both 6 and 1\n    \n    def find_number(number): \n        if (number % 2 == 0): \n            if (number % 10 == 0): \n                if (number % 50 == 0): \n                    if (number % 300 == 0): \n                        if (number % 450 == 0): \n                            if (number % 450 == 0): \n                                return False\n                            else: \n                                return True\n                        else: \n                            if (number % 300 == 0): \n                                if (number % 450 == 0): \n                                    if (number % 250 == 0): \n                                        return True\n                                    else: \n                                        return False\n                                else: \n                                    if (number % 250 == 0): \n                                        return True\n                                    else: \n                                        return False\n                            else: \n                                if (number % 250 == 0): \n                                    return True\n                                else: \n                                    return False\n                            \n                            \n                    else: \n                        if (number % 250 == 0): \n                            return True\n                        else: \n                            return False\n                else: \n                    if (number % 300 == 0): \n                        if (number % 250 == 0): \n                            return True\n                        else: \n                            return False\n                    else: \n                        if (number % 250 == 0): \n                            return True\n                        else: \n                            return False\n                    \n                \n            else: \n                if (number % 50 == 0): \n                    if (number % 300 == 0): \n                        if (number % 250 == 0): \n                            return True\n                        else: \n                            return False\n                    else: \n                        if (number % 250 == 0): \n                            return True\n                        else: \n                            return False\n                else: \n                    if (number % 250 == 0): \n                        return True\n                    else: \n                        return False\n        else: \n            if (number % 10 == 0): \n                if (number % 50 == 0): \n                    if (number % 300 == 0): \n                        if (number % 250 == 0): \n                            return True\n                        else: \n                            return False\n                    else: \n                        if (number % 250 == 0): \n                            return True\n                        else: \n                            return False\n                else: \n                    if (number % 250 == 0): \n                        return True\n                    else: \n                        return False\n            else: \n                if (number % 50 == 0): \n                    if (number % 300 == 0): \n                        return True\n                    else: \n                        return False\n                else: \n                    if (number % 250 == 0): \n                        return True\n                    else: \n                        return False\n    \n    if n == 1: \n        return True\n    elif n == 2: \n        return find_number(n)\n    elif n == 3: \n        return find_number(n)\n    elif n == 4: \n        return find_number(n)\n    elif n == 5: \n        return find_number(n)\n    elif n == 6: \n        return find_number(n)\n    elif n == 7: \n        return find_number(n)\n    elif n == 8: \n        return find_number(n)\n    elif n == 9: \n        return find_number(n)\n    elif n == 10: \n        return find_number(n)\n    else: \n        return False\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n=n-1\n    if n==0:\n        return 1\n    elif n%2==0:\n        return is_num_decagonal(n//2)\n    else:\n        return is_num_decagonal(n-1)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if (n == 0 or n == 1):\n        return n\n    else:\n        print(n, \"is not a decagonal number\")\n        return is_num_decagonal(n - 1)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0 or n == 1 or n == 2:\n        return n\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 9\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2) + is_num_decagonal(n-3)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    while n > 1:\n        if n % 2 == 1:\n            n = n/2\n        else:\n            n = 3*n+1\n    return n\ndef find_deciles(n):\n    '''\n    Write a function to find the deciles of n.\n    '''\n    n_deciles = 0\n    while n > 1:\n        if n % 2 == 1:\n            n = n/2\n            n_deciles += 1\n        else:\n            n = 3*n+1\n            n_deciles += 1\n    return n_deciles\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"The nth decile of {} is {}.\".format(n, find_deciles(n)))\nmain()"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # assert(type(item) == type(dlist))\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True,i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n    return (False, -1"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return (True, index)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = -1\n    for idx, element in enumerate(dlist):\n        if element == item:\n            position = idx\n    return (position, element)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, v in enumerate(dlist):\n        if v == item:\n            return (i,v)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    return tuple(dlist.index(item)!= -1 for item in dlist)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n        else:\n            continue\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Define a function\n    def sequential_search_recursive(dlist, item):\n        # If the item is not there, return\n        if dlist[0]!= item:\n            return 0\n        # Call the recursive function\n        return 1 + sequential_search_recursive(dlist[1:], item)\n        \n    return sequential_search_recursive(dlist, item)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return (False, -1)\n    else:\n        index = -1\n        for i in range(len(dlist)):\n            if dlist[i] == item:\n                index = i\n                break\n        return (True, index)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    return len(test_list) == len(seen)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(0, len(test_list)):\n        if test_list[i] in test_list[i+1:]:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # YOUR CODE HERE\n    print('I am here')\n    if len(test_list) < 3:\n        return True\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if i in test_list:\n            return False\n        else:\n            return True\n        \nprint(all_unique([1, 2, 2, 2, 1, 2, 2, 1, 1]))\nprint(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp = []\n    for i in test_list:\n        if i not in temp:\n            temp.append(i)\n    return len(temp) == len(set(temp))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #create a list of unique elements\n    u_list = list(dict.fromkeys(test_list))\n    #check if all elements are unique\n    if all(x in u_list for x in test_list):\n        return True\n    else:\n        return False\n    return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # remove duplicates\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)==0:\n        return True\n    if len(test_list)==1:\n        return False\n    \n    set1 = set(test_list)\n    if len(set1)==len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    \n    for element in test_list:\n        if element not in test_list:\n            unique = False\n            break\n            \n    return unique\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(len(nums1)):\n        l1.append(nums1[i])\n        l2.append(nums2[i])\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list=[]\n    for i in range(len(nums1)):\n        if nums1[i] not in sub_list:\n            sub_list.append(nums1[i])\n    for i in range(len(nums2)):\n        if nums2[i] not in sub_list:\n            sub_list.append(nums2[i])\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #Initialize list\n    result = []\n    #Append elements\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    #Return list\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #n = len(nums1)\n    #m = len(nums2)\n    #print(n)\n    #print(m)\n    #a = 0\n    #print(a)\n    #b = 0\n    #print(b)\n    #for i in range(n):\n        #for j in range(m):\n            #print(nums1[i]+nums2[j])\n            #a += (nums1[i]+nums2[j])\n            #b += (nums2[j])\n    #return a, b\n    return nums1 + nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Your code here\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    len_nums1 = len(nums1)\n    len_nums2 = len(nums2)\n    \n    # base case\n    if len_nums1 == 0 or len_nums2 == 0:\n        return 0\n    \n    # if nums1[0] < nums2[0]\n    # set a temp variable to number 1 in each\n    temp = nums1[0]\n    for i in range(len_nums1 - 1):\n        # if nums1[i] < nums2[i]\n        # set a temp variable to number 1 in each\n        if nums1[i] < temp:\n            temp = nums1[i]\n        # if nums1[i] > nums2[i]\n        # set a temp variable to number 1 in each\n        elif nums1[i] > temp:\n            temp = nums1[i]\n        # if nums1[i] >= nums2[i]\n        # set a temp variable to number 1 in each\n        elif nums1[i] >= temp:\n            temp = nums1[i]\n    \n    # return temp\n    return temp\n    \n    \ndef solution(nums1, nums2):\n    \n    answer = []\n    \n    # nums1 -> [5, 6, 7]\n    # nums2 -> [1, 1, 2, 3, 4, 5]\n    \n    temp = sub_list(nums1,nums2)\n    answer.append(temp)\n    \n    # nums1 -> [4, 3, 2, 7]\n    # nums2 -> [1, 5, 6, 7]\n    \n    # base case\n    if len(nums1) == 0 or len(nums2) == 0:\n        return answer\n    \n    temp = sub_list(nums1,nums2)\n    answer.append(temp)\n    \n    # nums1 -> [1, 5, 3, 4]\n    # nums2 -> [7, 6, 2, 1]\n    \n    # base case\n    if len(nums1) == 1 and len(nums2) == 1:\n        return answer\n    \n    # nums1 -> [5, 6, 7]\n    # nums2 -> [3, 4, 5]\n    \n    temp = sub_list(nums1,nums2)\n    answer.append(temp)\n    \n    # nums1 -> [5, 6, 7]\n    # nums2 -> [2, 7, 1]\n    \n    # base case\n    if len(nums1) == 1 and len(nums2) == 2:\n        return answer\n    \n    # nums1 -> [1, 3, 2]\n    # nums2 -> [4, 5, 6]\n    \n    # base case\n    if len(nums1) == 2 and len(nums2) == 3:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [5, 6, 7]\n    \n    # base case\n    if len(nums1) == 2 and len(nums2) == 4:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 3 and len(nums2) == 4:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 4 and len(nums2) == 3:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 3 and len(nums2) == 2:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [2, 4, 5]\n    \n    # base case\n    if len(nums1) == 2 and len(nums2) == 1:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [2, 4, 5]\n    \n    # base case\n    if len(nums1) == 1 and len(nums2) == 2:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [2, 4, 5]\n    \n    # base case\n    if len(nums1) == 2 and len(nums2) == 3:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 3 and len(nums2) == 4:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 4 and len(nums2) == 3:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 4 and len(nums2) == 2:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [2, 4, 5]\n    \n    # base case\n    if len(nums1) == 4 and len(nums2) == 1:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 5 and len(nums2) == 4:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 5 and len(nums2) == 3:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 4 and len(nums2) == 2:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 4 and len(nums2) == 1:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 2 and len(nums2) == 1:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 2 and len(nums2) == 2:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 3 and len(nums2) == 3:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 3 and len(nums2) == 4:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 3 and len(nums2) == 2:\n        return answer\n    \n    # nums1 -> [1, 2, 3]\n    # nums2 -> [1, 2, 3]\n    \n    # base case\n    if len(nums1) == 4 and len(nums2) == 3:\n        return answer\n    \n    # nums1 -"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = [0]*len(nums2)\n    i = 0\n    for i in range(0,len(nums2)):\n        result[i] = nums2[i] - nums1[i]\n    return result\n    \ndef sub_list_2(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = [0]*len(nums2)\n    for i in range(0,len(nums2)):\n        result[i] = nums2[i] - nums1[i]\n    return result\n    \ndef sum_list(nums):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums)):\n        result = result + nums[i]\n    return result\n    \ndef sum_list_2(nums):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums)):\n        result = result + nums[i]\n    return result\n    \ndef sub_list_3(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = [0]*len(nums1)\n    for i in range(0,len(nums1)):\n        result[i] = nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_3_2(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = [0]*len(nums1)\n    for i in range(0,len(nums1)):\n        result[i] = nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_4(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_4_2(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_4_3(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_4_4(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_5(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_5_2(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_6(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_6_2(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_7(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_7_2(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_8(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_8_2(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_9(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_9_2(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_10(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_10_2(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_11(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_11_2(nums1,nums2):\n    '''\n    Write a function to calculate the sum of a list.\n    '''\n    result = 0\n    for i in range(0,len(nums1)):\n        result = result + nums1[i] - nums2[i]\n    return result\n    \ndef sub_list_12(nums1,nums2):\n    '''\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    num1 = []\n    num2 = []\n    for i in range(len(nums1)):\n        num1.append(nums1[i])\n        num2.append(nums2[i])\n    nums1 = num1\n    nums2 = num2\n    num1.reverse()\n    num2.reverse()\n    sub1 = num1.pop()\n    sub2 = num2.pop()\n    num1.reverse()\n    num2.reverse()\n    nums = []\n    for i in range(len(num1)):\n        nums.append(sub1 - sub2)\n    for i in range(len(nums)):\n        nums[i] = nums[i].pop()\n    return nums\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)>len(nums2):\n        nums1,nums2=nums2,nums1\n    #loop through both nums\n    for i in range(0,len(nums1)):\n        #loop through both lists\n        for j in range(0,len(nums2)):\n            #if nums1[i] > nums2[j], we shift the current list by -1\n            if nums1[i] > nums2[j]:\n                nums1[i],nums2[j] = nums2[j],nums1[i]\n            #if nums1[i]< nums2[j], we shift the current list by -1\n            elif nums1[i] < nums2[j]:\n                nums1[i],nums2[j] = nums2[j],nums1[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n for n in nums1 if n not in nums2]\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d=n\n    freq=[0 for i in range(10)]\n    for i in range(len(n)):\n        freq[int(n[i])-1]+=1\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    from collections import Counter\n    counter = Counter(str(n))\n    return True if all(counter[digit] <= digit_count for digit, digit_count in counter.items()) else False\n    "
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 10:\n        return True\n    else: \n        return False\n        \ndef check_all(n):\n    '''\n    a function that checks whether all digits of n are odd or even \n    '''\n    if n % 2 == 0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in range(len(n)): \n        if n[i] <= int(n[i]): \n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(i) for i in str(n)]\n    \n    # we check whether each digit is less than or equal to the digit itself\n    for i in digits:\n        if i < 10:\n            return False\n    \n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    l = [int(i) for i in str(n)]\n    new = []\n    for i in l:\n        if i in new:\n            return \"Error - this number has more than 1 digit\"\n        else:\n            new.append(i)\n    return \" \".join(new)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f = [int(i) for i in str(n)]\n    count = 0\n    for i in f:\n        if i <= 0 or i == 1:\n            count += 1\n        else:\n            return False\n    if count!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def is_palindrome(n):\n        n = str(n)\n        n = n.replace('-', '')\n        n = n.replace('0', '')\n        n = n.replace('1', '')\n        n = n.replace('2', '')\n        n = n.replace('3', '')\n        n = n.replace('4', '')\n        n = n.replace('5', '')\n        n = n.replace('6', '')\n        n = n.replace('7', '')\n        n = n.replace('8', '')\n        n = n.replace('9', '')\n        return (n == n[::-1])\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    n = list(map(int, n))\n    for i in range(0, len(n)):\n        if(n[i] <= 10):\n            if(n[i] not in n):\n                print(n)\n                return n\n    \n    return n\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    \n    if list[0]!= element:\n        return False\n    \n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for el in list:\n        if el!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #https://www.programiz.com/python-programming/examples/text-matching-with-regex\n    #re.search() for a,b in string.split(','):\n    #    print(re.search(r'a',text).span())\n    #    print(re.search(r'a',text).start(),re.search(r'b',text).end())\n    #    print(re.search(r'a',text).string,re.search(r'b',text).string)\n    #    print(re.search(r'a',text).group(),re.search(r'b',text).group())\n    \n    #A=re.compile(r'\\s+[a-z]')\n    #B=re.compile(r'\\s+[b-z]')\n    #C=re.compile(r'\\s+[a-z]+')\n    #\n    #A.split()\n    #B.split()\n    #C.split()\n    #\n    #C.finditer()\n    #B.finditer()\n    #A.findall()\n    #B.findall()\n    #C.findall()\n    \n    #pattern=A.match('a')\n    #pattern=B.match('a')\n    #pattern=C.match('a')\n    \n    #pattern.span()\n    #pattern.string\n    \n    #A.group()\n    #B.group()\n    #C.group()\n    \n    #match=A.search(text)\n    #match.span()\n    #match.string\n    #match.group()\n    \n    #B.start()\n    #B.end()\n    #match.span()\n    #match.string\n    #match.group()\n    \n    #C.group(1)\n    #C.group(2)\n    #C.group(3)\n    \n    #B.start(2)\n    #B.end(2)\n    #C.group(1)\n    #C.group(2)\n    #C.group(3)\n    #B.start(2)\n    #B.end(2)\n    #C.group(1)\n    #C.group(2)\n    #C.group(3)\n    \n    #re.search() for a,b in text.split(','):\n    #    print(re.search(r'a',text).span())\n    #    print(re.search(r'a',text).start(),re.search(r'b',text).end())\n    #    print(re.search(r'a',text).string,re.search(r'b',text).string)\n    #    print(re.search(r'a',text).group(),re.search(r'b',text).group())\n    \n    #C.findall()\n    #match=C.findall(text)\n    #print(match)\n    \n    #pattern=C.match('a')\n    #print(pattern.group())\n    \n    #A.group()\n    #B.group()\n    #C.group()\n    #pattern.span()\n    #pattern.string\n    \n    #A.start()\n    #A.end()\n    #C.group()\n    #pattern.string\n    #pattern.group()\n    \n    #B.start(2)\n    #B.end(2)\n    #C.group()\n    #pattern.string\n    #pattern.group()\n    \n    #pattern.start(2)\n    #pattern.end(2)\n    #C.group()\n    #pattern.string\n    #pattern.group()\n    \n    #C.start(2)\n    #C.end(2)\n    #pattern.string\n    #pattern.group()\n    \n    #B.start(2)\n    #B.end(2)\n    #pattern.string\n    #pattern.group()\n    \n    #C.start(2)\n    #C.end(2)\n    #pattern.string\n    #pattern.group()\n    \n    #pattern.start(2)\n    #pattern.end(2)\n    #B.group()\n    #pattern.string\n    #pattern.group()\n    \n    #pattern.start(2)\n    #pattern.end(2)\n    #C.group()\n    #pattern.string\n    #pattern.group()\n    \n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n    #pattern.start(2)\n    #pattern.end(2)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eight 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nine 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by ten 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eleven 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_thirteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by thirteen 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_fourteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by fourteen 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_fifteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by fifteen 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_sixteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by sixteen 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_seventeen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seventeen 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_eighteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eighteen 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_nineteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nineteen 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_twenty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'b':\n            my_text += text[i]\n    return my_text == 'abc'\ndef text_match_thirty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by thirty 'b' characters.\n    '''\n    text = text.lower()\n    my_text = ''\n    for i in range(len(text"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(\"a.b\", text):\n        return True\n    elif re.search(\"a.b\", text):\n        return False\n    elif re.search(\"a.b\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_len = len(text)\n    if (text_len == 0):\n        return False\n    elif (text_len == 1):\n        if text[0] == 'a' and text[1] == 'b':\n            return True\n        return False\n    elif (text_len == 2):\n        if text[0] == 'a' and text[1] == 'b' and text[2] == 'c':\n            return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Test\n    #\n    # Complete the function so that it returns True if the string contains only 'a' or 'b' characters, and returns False otherwise.\n    #\n    # Examples:\n    #\n    # text_match_two_three('abc') returns True\n    # text_match_two_three('ababcd') returns False\n    # text_match_two_three('aabbcc') returns True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'^a[bc]\\w+'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[a-z]{2}b[a-z]{3}'\n    result = re.match(pattern, text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Your code goes here\n    # pattern = re.compile(r'(a){2}b')\n    # result = pattern.search(text)\n    # return result\n    if text[0] == 'a':\n        text = text[1:]\n        pattern = re.compile(r'(a){2,3}b')\n        result = pattern.search(text)\n        return result\n    else:\n        pattern = re.compile(r'(a){2}b')\n        result = pattern.search(text)\n        return result\n    # return text[0] == 'a' and text[1] == 'b'\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # split the text into a list of words\n    words = text.split()\n    # check if a or b is a character\n    if len(words) == 2:\n        return check_character(words[0])\n    elif len(words) == 3:\n        return check_character(words[0]) + check_character(words[1])\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    two_three_pattern = re.compile(r\"^[a-zA-Z]+b$\")\n    if two_three_pattern.search(text) and not two_three_pattern.search(text.strip('b')):\n        return True\n    else:\n        return False\n    #\n    #if len(text) > 2:\n    #    if text.endswith(\"a\"):\n    #        return True\n    #    else:\n    #        return False\n    #\n    #\n    #\ndef text_match_one_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters.\n    '''\n    if len(text.split('b')) < 2:\n        return False\n    else:\n        return True\n    #\n    #\n    #if len(text.split('b')) == 2:\n    #    return text.endswith(\"a\")\n    #\n    #\n    #\ndef text_match_one_two_or_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters followed by two or three 'c' characters.\n    '''\n    if len(text.split('b')) < 2 or len(text.split('c')) < 2:\n        return False\n    else:\n        return True\n    #\n    #\n    #if len(text.split('b')) < 2 or len(text.split('c')) < 2:\n    #    return text.endswith(\"a\")\n    #\n    #\n    #\ndef text_match_one_two_or_three_or_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters followed by one or two 'c' characters followed by one or two 'd' characters followed by one or two 'e' characters followed by one or two 'f' characters followed by two 'g' characters.\n    '''\n    if len(text.split('b')) < 2 or len(text.split('d')) < 2 or len(text.split('g')) < 2 or len(text.split('f')) < 2:\n        return False\n    else:\n        return True\n    #\n    #if len(text.split('b')) < 2 or len(text.split('d')) < 2 or len(text.split('g')) < 2 or len(text.split('f')) < 2:\n    #    return text.endswith(\"a\")\n    #\n    #\n    #\ndef text_match_one_two_or_three_or_four_or_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by one or two 'b' characters followed by one or two 'c' characters followed by one or two 'd' characters followed by one or two 'e' characters followed by one or two 'f' characters followed by one or two 'g' characters followed by one or two 'h' characters followed by one or two 'i' characters followed by one or two 'j' characters followed by one or two 'k' characters followed by one or two 'l' characters followed by one or two'm' characters followed by one or two 'n' characters followed by one or two 'o' characters followed by one or two 'p' characters followed by one or two 'q' characters followed by one or two 'r' characters followed by one or two's' characters followed by one or two 't' characters followed by one or two 'u' characters followed by one or two 'v' characters followed by one or two 'w' characters followed by one or two 'x' characters followed by one or two 'y' characters followed by one or two 'z' characters followed by two 'a' characters followed by two 'b' characters followed by two 'c' characters followed by two 'd' characters followed by two 'e' characters followed by two 'f' characters followed by two 'g' characters followed by two 'h' characters followed by two 'i' characters followed by two 'j' characters followed by two 'k' characters followed by two 'l' characters followed by two'm' characters followed by two 'n' characters followed by two 'o' characters followed by two 'p' characters followed by two 'q' characters followed by two 'r' characters followed by two's' characters followed by two 't' characters followed by two 'u' characters followed by two 'v' characters followed by two 'w' characters followed by two 'x' characters followed by two 'y' characters followed by two 'z' characters followed by two '0' characters followed by one '1' characters followed by two '2' characters followed by two '3' characters followed by two '4' characters followed by two '5' characters followed by two '6' characters followed by two '7' characters followed by two '8' characters followed by two '9' characters followed by two 'a' characters followed by two 'b' characters followed by two 'c' characters followed by two 'd' characters followed by two 'e' characters followed by two 'f' characters followed by two 'g' characters followed by two 'h' characters followed by two 'i' characters followed by two 'j' characters followed by two 'k' characters followed by two 'l' characters followed by two'm' characters followed by two 'n' characters followed by two 'o' characters followed by two 'p' characters followed by two 'q' characters followed by two 'r' characters followed by two's' characters followed by two 't' characters followed by two 'u' characters followed by two 'v' characters followed by two 'w' characters followed by two 'x' characters followed by two 'y' characters followed by two 'z' characters followed by two '0' characters followed by one '1' characters followed by two '2' characters followed by two '3' characters followed by two '4' characters followed by two '5' characters followed by two '6' characters followed by two '7' characters followed by two '8' characters followed by two '9' characters followed by two 'a' characters followed by two 'b' characters followed by two 'c' characters followed by two 'd' characters followed by two 'e' characters followed by two 'f' characters followed by two 'g' characters followed by two 'h' characters followed by two 'i' characters followed by two 'j' characters followed by two 'k' characters followed by two 'l' characters followed by two'm' characters followed by two 'n' characters followed by two 'o' characters followed by two 'p' characters followed by two 'q' characters followed by two 'r' characters followed by two's' characters followed by two 't' characters followed by two 'u' characters followed by two 'v' characters followed by two 'w' characters followed by two 'x' characters followed by two 'y' characters followed by two 'z' characters followed by two '0' characters followed by one '1' characters followed by two '2' characters followed by two '3' characters followed by two '4' characters followed by two '5' characters followed by two '6' characters followed by two '7' characters followed by two '8' characters followed by two '9' characters followed by two 'a' characters followed by two 'b' characters followed by two 'c' characters followed by two 'd' characters followed by two 'e' characters followed by two 'f' characters followed by two 'g' characters followed by two 'h' characters followed by two 'i' characters followed by two 'j' characters followed by two 'k' characters followed by two 'l' characters followed by two'm' characters followed by two 'n' characters followed by two 'o' characters followed by two 'p' characters followed by two 'q' characters followed by two 'r' characters followed by two's' characters followed by two 't' characters followed by two 'u' characters followed by two 'v' characters followed by two 'w' characters followed by two 'x' characters followed by two 'y' characters followed by two 'z' characters followed by two '0' characters followed by one '1' characters followed by two '2' characters followed by two '3' characters followed by two '4' characters followed by two '5' characters followed by two '6' characters followed by two '7' characters followed by two '8' characters followed by two '9' characters followed by two 'a' characters followed by two 'b' characters followed by two 'c' characters followed by two 'd' characters followed by two 'e' characters followed by two 'f' characters followed by two 'g' characters followed by two 'h' characters followed by two 'i' characters followed by two 'j' characters followed by two 'k' characters followed by two 'l' characters followed by two'm' character"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == k: \n        return a[n-1]\n    max_so_far = 0\n    sub_array_sum = 0\n    start = 0\n    end = n-1\n    while start < end:\n        if start == n-1: \n            sub_array_sum += a[end]\n            max_so_far = max(sub_array_sum, max_so_far)\n            end -= 1\n        elif end == 0: \n            sub_array_sum += a[start]\n            max_so_far = max(sub_array_sum, max_so_far)\n            start += 1\n        elif a[start] == a[end]: \n            sub_array_sum += a[start]\n            max_so_far = max(sub_array_sum, max_so_far)\n            start += 1\n        else:\n            sub_array_sum += a[end]\n            max_so_far = max(sub_array_sum, max_so_far)\n            end -= 1\n    return max_so_far\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    array = []\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + a[i]\n        if (sum % k == 0):\n            break\n    return sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    j = 0\n    sum = 0\n    \n    for i in range(n-k+1):\n        sum += a[i]\n        if(sum > sum + a[i+k-1]):\n            sum += a[i+k-1]\n        if(sum == sum + a[i]):\n            j = i+k-1\n    if(sum > sum + a[n-1]):\n        return sum + a[n-1]\n    \n    return sum + a[j]\n    \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a.sort()\n    if k == 0: return 0\n    \n    if a[-1] == 0:\n        return 0\n    \n    \n    if n < k:\n        return max(a[:k] + a[n:] + [a[n] - a[n-k]])\n    \n    max_sum_left = max_sub_array_sum_repeated(a, n-1, k-1)\n    max_sum_right = max_sub_array_sum_repeated(a, n-1, k)\n    \n    return max(a[n-k:] + max_sum_left, a[n-k] + max_sum_right)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += a[i-1]\n        if k > 0:\n            sum += a[i-1]\n            k -= 1\n    return sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # TODO: Write your code here\n    s = sum(a)\n    if s % k == 0:\n        return s // k\n    else:\n        return -1\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < k:\n        return -1\n    l = []\n    for i in range(n):\n        l.append(a[i])\n    l.sort()\n    ans = 0\n    for i in range(n-k+1):\n        temp = 0\n        for j in range(k):\n            temp += a[i+j]\n        if ans < temp:\n            ans = temp\n    return ans\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    s = max_sub_array_sum(a,n,k)\n    s = s - sum(a)\n    return s\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -1\n    for i in range(n):\n        max_sum = max(max_sum, a[i])\n    for i in range(n - k):\n        a[i+k-1] = a[i]\n    for j in range(n - k):\n        a[j+k-1] = a[j]\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(0,n+1):\n        s+=i**2\n    return s\nprint(square_Sum(6))"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n**2\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n*n+square_Sum(n-1)"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    s = 0 \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        s = s + n**2\n        return s\n    else:\n        if n > 1:\n            s = n * square_Sum(n-1)\n            return s\n        else:\n            return 0\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #Use a for loop to check if n is even, and then add all the squares of the numbers up to n.\n    #Use the sum(range(n+1)) to get all the numbers in the range (n+1,\n    #So the sum of squares of all numbers in range(1, n+1) is sqrt(n).\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Checks if n is an integer\n    if not isinstance(n,int):\n        raise TypeError(\"n must be an integer\")\n    if not n > 0:\n        raise ValueError(\"n must be a positive integer\")\n    # Initialize sum\n    sum = 0\n    # Find even numbers\n    if n % 2 == 0:\n        # Increase sum by 1\n        sum += (n + 1)\n    # Find odd numbers\n    else:\n        # Increase sum by 2\n        sum += n + 2\n    # Return sum\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # TODO: Implement function\n    sum = 0\n    for i in range(0, n):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for item in list1:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    # for sublist in list1:\n    for sublist in list1:\n        # length = len(sublist)\n        length = len(sublist)\n        if length > max_len:\n            max_len = length\n    # return max_len\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 1\n    for item in list1:\n        length += 1\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] > max(length):\n                max = list1[i][j]\n                index = i\n            length.append(max)\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #max_len = []\n    #for i in list1:\n        #max_len.append(max(i))\n    #return max_len\n    \n    max_len = []\n    for i in list1:\n        for j in range(len(i)):\n            if len(i[j])>len(max_len):\n                max_len=i[j]\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = list1[0][0]\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if len(list1[i][j]) > max_len:\n                max_len = len(list1[i][j])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list1.sort(key = len)\n    return list1[-1]\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    length = len(list1)\n    for i in range(length):\n        for j in range(i + 1, length):\n            if(list1[i][j] > list1[i][j - 1]):\n                max_length = i\n    return max_length\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_two_colors_count(n, k): \n        # base case\n        if n <= 1: \n            return n - 1\n        \n        # loop for all possible colors for a given n \n        for i in range(k, n): \n            # check if the color is the same for two adjacent posts, if not, then check for opposite color \n            if i == k or (i + k - 1) % k!= 0: \n                # no more possible ways \n                return 0\n            # no more possible ways if a color has been used \n            count_two_colors_count(n, k) \n        # print the answer \n        return n - 1\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or k < 2: return 0\n    elif n == 2 or k == 2: return 1\n    else:\n        ways = [0] * (k + 1)\n        ways[0] = 1\n        ways[1] = 1\n        for i in range(2, k + 1):\n            ways[i] = ways[i - 1] + ways[i - 2]\n        return ways[k"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 1:\n        return 1\n    if n < 1 or k < 1 or n > 2 * k:\n        return 0\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == k:\n        return 1\n    if n == 0 or k == 0:\n        return 0\n    \n    left = count_no_of_ways(n-1,k) + count_no_of_ways(n-1,k-1) #left corner \n    right = count_no_of_ways(n-1,k) + count_no_of_ways(n-1,k+1) #right corner \n    return left + right\n        \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Brute Force Pattern\n    # Time = O(n*k*log(n+k)) \n    # Space = O(n*k) \n    \n    if n <= k: \n        return int(n / k * 2 + 1)\n    \n    if n % k == 0:\n        return int(n / k * 2)\n    \n    return int(n/k + 1) \n    \n    \n    \n    # Boyer-Moore\n    # Time = O(n)\n    # Space = O(k) \n    \n    # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j-1] + (i - k + 1) * max(dp[i-1][j], k))\n    \n    # if k <= 0:\n    #     return int((n % k) + 1)\n    \n    # if i == 0:\n    #     return dp[i][j - 1]\n    \n    # for j in range(k - 1, n - k + 1):\n    #     dp[i][j] = dp[i - 1][j] + max(dp[i - 1][j - 1], dp[i - 1][j])\n    # return dp[i][n - k]\n    \n    \n    # DP\n    # Time = O(n)\n    # Space = O(n) \n    \n    # dp[i][j] = dp[i-1][j-1] + (i-k+1)*max(dp[i-1][j-1], k)\n    \n    # if k <= 0:\n    #     return dp[i][n-k]\n    \n    # for j in range(k - 1, n - k + 1):\n    #     dp[i][j] = dp[i - 1][j] + max(dp[i - 1][j - 1], dp[i - 1][j])\n    \n    # return dp[i][n-k] \n    \n    \n    \n    \n    \n    # DP\n    # Time = O(n)\n    # Space = O(n) \n    \n    # dp[i][j] = dp[i][j-1] + (i-k+1)*max(dp[i][j-1], k)\n    \n    # if k <= 0:\n    #     return dp[i][n-k]\n    \n    # for j in range(k - 1, n - k + 1):\n    #     dp[i][j] = dp[i][j-1] + max(dp[i][j-1], dp[i][j])\n    \n    # return dp[i][n-k] \n    \n    \n    # DFS\n    # Time = O(n)\n    # Space = O(n) \n    \n    # dp[i][j] = dp[i-1][j-1] + max(dp[i-1][j], dp[i-1][j-1] + (i - k + 1) * max(dp[i-1][j], k))\n    \n    # if k <= 0:\n    #     return dp[i][n-k]\n    \n    # for j in range(k - 1, n - k + 1):\n    #     dp[i][j] = dp[i-1][j] + max(dp[i-1][j-1], dp[i-1][j])\n    \n    # return dp[i][n-k] \n    \n    \n    \n    # DP\n    # Time = O(n)\n    # Space = O(n) \n    \n    # dp[i][j] = dp[i-1][j-1] + (i-k+1)*max(dp[i-1][j-1], k)\n    \n    # if k <= 0:\n    #     return dp[i][n-k]\n    \n    # for j in range(k - 1, n - k + 1):\n    #     dp[i][j] = dp[i-1][j] + max(dp[i-1][j-1], dp[i-1][j])\n    \n    # return dp[i][n-k] \n    \n    \n    # BFS\n    # Time = O(n)\n    # Space = O(n) \n    \n    # dp[i][j] = dp[i-1][j-1] + max(dp[i-1][j], dp[i-1][j-1] + (i - k + 1) * max(dp[i-1][j], k))\n    \n    # if k <= 0:\n    #     return dp[i][n-k]\n    \n    # for j in range(k - 1, n - k + 1):\n    #     dp[i][j] = dp[i-1][j] + max(dp[i-1][j-1], dp[i-1][j])\n    \n    # return dp[i][n-k] \n    \n    \n    \n    \n    # dp = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]\n    \n    # for j in range(k - 1, n - k + 1):\n    #     dp[i][j] = dp[i-1][j-1] + (i-k+1)*max(dp[i-1][j-1], k)\n    \n    # return dp[i][n-k] \n    \n    \n    \n    \n    \n    # DP\n    # Time = O(n)\n    # Space = O(n) \n    \n    # dp[i][j] = dp[i-1][j-1] + max(dp[i-1][j], dp[i-1][j-1] + (i - k + 1) * max(dp[i-1][j], k))\n    \n    # if k <= 0:\n    #     return dp[i][n-k]\n    \n    # for j in range(k - 1, n - k + 1):\n    #     dp[i][j] = dp[i-1][j] + max(dp[i-1][j-1], dp[i-1][j])\n    \n    # return dp[i][n-k] \n    \n    \n    \n    \n    \n    \n    # DP\n    # Time = O(n)\n    # Space = O(n) \n    \n    # dp[i][j] = dp[i-1][j-1] + max(dp[i-1][j], dp[i-1][j-1] + (i - k + 1) * max(dp[i-1][j], k))\n    \n    # if k <= 0:\n    #     return dp[i][n-k]\n    \n    # for j in range(k - 1, n - k + 1):\n    #     dp[i][j] = dp[i-1][j] + max(dp[i-1][j-1], dp[i-1][j])\n    \n    # return dp[i][n-k] \n    \n    \n    \n    \n    # DP\n    # Time = O(n)\n    # Space = O(n) \n    \n    # dp[i][j] = dp[i-1][j-1] + (i-k+1)*max(dp[i-1][j-1], k)\n    \n    # if k <= 0:\n    #     return dp[i][n-k]\n    \n    # for j in range(k - 1, n - k + 1):\n    #     dp[i][j] = dp[i-1][j] + max(dp[i-1][j-1], dp[i-1][j])\n    \n    # return dp[i][n-k] \n    \n    \n    \n    \n    \n    \n    # DP\n    # Tim"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 2 or k == 1: \n        return n \n    \n    if n > 1 and k > 1: \n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1) \n    \n    if n == 1: \n        return k \n    \n    if k == 1: \n        return n \n    \n    if n > 2: \n        return count_no_of_ways(n - 2, k) + count_no_of_ways(n - 2, k - 1) \n    \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1:\n        return k\n    elif n==2:\n        return 1\n    elif n==3:\n        return 2\n    else:\n        no_of_ways=[]\n        for i in range(k):\n            if n==1:\n                break\n            elif n==3:\n                break\n            else:\n                current_n=n-1\n                current_k=k-i\n                if current_n<3 or current_k<2:\n                    no_of_ways.append(k)\n                    return no_of_ways\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    n, k = min(n, k), max(k, n - k)\n    \n    f = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i == 1:\n                f[i][j] = 1\n            elif j == 1:\n                f[i][j] = 1\n            elif f[i-1][j] + f[i][j-1] == 1:\n                f[i][j] = f[i-1][j] + f[i][j-1]\n            else:\n                f[i][j] = 1\n    return f[n][k]\n        "
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    '''\n    for i in range(n):\n        for j in range(i, n):\n            if (colors[i] == colors[j] and i!= j):\n                print(\"{}\".format(1), end=' ')\n            else:\n                print(\"{}\".format(0), end=' ')\n        print()\n    return (0)\n    '''\n    \n    # result = 0\n    # i = 0\n    # while i < n:\n    #     j = 0\n    #     while j < k:\n    #         if colors[i]!= colors[j] and i!= j:\n    #             result += 1\n    #         j += 1\n    #     i += 1\n    # return result\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Using dictionary to keep track of the results\n    results = {}\n    \n    # Loops through 2^n for number of ways\n    for i in range(2 ** n):\n        # Stores the result in dictionary\n        if i not in results:\n            results[i] = count_ways(n, k, 0, [])\n        else:\n            # Adds 1 if the number of ways is 1, else stores the result in the dictionary\n            # If k is odd, we can just skip 1 post and compare the number of ways with 2*2^k-1 as 1, 2, 4, 6...\n            # If k is even, we can just skip 1 post and compare the number of ways with 3*2^k-1 as 1, 3, 5, 7...\n            if i % 2 == 0:\n                # Adds one if the number of ways is 1\n                results[i] += 1\n                # Iterate through the remaining numbers\n                for j in range(i + 1, i + k + 1):\n                    # If k is odd, then we can just skip 1 post and compare the number of ways with 2*2^k-1 as 1, 2, 4, 6...\n                    # If k is even, we can just skip 1 post and compare the number of ways with 3*2^k-1 as 1, 3, 5, 7...\n                    if j % 2 == 0:\n                        # Adds one if the number of ways is 1\n                        results[j] += 1\n            else:\n                # Adds one if the number of ways is 1\n                results[i] += 1\n                # Iterate through the remaining numbers\n                for j in range(i + 1, i + k + 1):\n                    # If k is odd, then we can just skip 1 post and compare the number of ways with 2*2^k-1 as 1, 2, 4, 6...\n                    # If k is even, we can just skip 1 post and compare the number of ways with 3*2^k-1 as 1, 3, 5, 7...\n                    if j % 2 == 0:\n                        # Adds one if the number of ways is 1\n                        results[j] += 1\n    # Return the result as a list of the number of ways\n    return results[i + k]\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n%m!= 0:\n        return find(n%m,m)\n    else:\n        return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    a = n*10**m\n    return a/n\n    \ndef solve(n,m):\n    '''\n    solve the problem by calling find(n,m) which is a recursive function.\n    '''\n    if (n,m) in answers:\n        return answers[(n,m)]\n    if n*10**m==n:\n        return n\n    answer=find(n,m)\n    answers[(n,m)]=answer\n    return answer\n    \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m:\n        return n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    i = 0\n    while i < n:\n        if (n % (i + 1)) == 0:\n            return i + 1\n        i = i + 1\n    return 'Sorry, could not find the quotient'\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    while True:\n        if (n==0) & (m==0):\n            return (0)\n        elif (n%10)>0 & (m%10)>0:\n            n//=10\n            m//=10\n        else:\n            return (n//10+n%10)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < 0 or n > m:\n        return -1\n    else:\n        s = int((m+n)/2)\n        return s\n    \n    \ndef find_squares(n):\n    '''\n    Find the sum of squares of n numbers, that are\n    divisible by 7.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        if i % 7 == 0:\n            s += i\n    return s\n    \n    \ndef find_pow(n,m):\n    '''\n    Write a python function to find the power of n that is greater than or equal to m.\n    '''\n    s = 0\n    for i in range(1, m+1):\n        if i ** (1/n) >= m:\n            s += i\n    return s\n    \n    \ndef find_lcm(n,m):\n    '''\n    Write a python function to find the least common multiple of n and m.\n    '''\n    s = 0\n    while n % m == 0:\n        n /= m\n        s += 1\n    return s\n    \n    \ndef find_primes(n):\n    '''\n    Find all primes below n.\n    '''\n    nums = []\n    for i in range(2,n):\n        if isprime(i):\n            nums.append(i)\n    return nums\n    \n    \ndef isprime(n):\n    '''\n    Return True if n is prime.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return False\n        f += 6\n    return True\n    \n    \ndef isprime_rec(n):\n    '''\n    Use recursion to find all primes below n.\n    '''\n    if n < 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return False\n        f += 6\n    return True\n    \n    \ndef isprime_2(n):\n    '''\n    Use recursion to find all primes below n.\n    '''\n    if n < 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return False\n        f += 6\n    return True\n    \n    \ndef isprime_rec2(n):\n    '''\n    Use recursion to find all primes below n.\n    '''\n    if n < 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return False\n        f += 6\n    return True\n    \n    \ndef find_prime_factors(n):\n    '''\n    Find all prime factors of n.\n    '''\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return []\n    if n % 3 == 0:\n        return []\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return []\n        f += 6\n    f = 4\n    while f > 1:\n        if n % f == 0:\n            return []\n        f -= 1\n        if f == 2:\n            return [2]\n        if f == 3:\n            return [3]\n        if f == 4:\n            return [4]\n        if f == 5:\n            return [5]\n        if f == 6:\n            return [6]\n    return [n]\n    \n    \ndef find_isprime(n):\n    '''\n    Check if a number is prime.\n    '''\n    if n < 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return False\n        f += 6\n    return True\n    \n    \ndef find_lcm(n):\n    '''\n    Find the least common multiple of n.\n    '''\n    if n < 2 or n == 3:\n        return 2\n    if n < 2 or n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return n\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return f\n        f += 6\n    return 1\n    \n    \ndef find_prime_factors(n):\n    '''\n    Find all prime factors of n.\n    '''\n    if n < 2 or n == 3:\n        return []\n    if n < 2 or n % 2 == 0:\n        return []\n    if n % 3 == 0:\n        return []\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return []\n        f += 6\n    f = 4\n    while f > 1:\n        if n % f == 0:\n            return []\n        f -= 1\n        if f == 2:\n            return [2]\n        if f == 3:\n            return [3]\n        if f == 4:\n            return [4]\n        if f == 5:\n            return [5]\n        if f == 6:\n            return [6]\n    return [n]\n    \n    \ndef find_isprime_2(n):\n    '''\n    Check if a number is prime.\n    '''\n    if n < 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return False\n        f += 6\n    return True\n    \n    \ndef find_lcm_2(n):\n    '''\n    Find the least common multiple of n.\n    '''\n    if n < 2 or n == 3:\n        return 2\n    if n < 2 or n % 2 == 0:\n        return 1\n    if n % 3 == 0:\n        return n\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return f\n        f += 6\n    return 1\n    \n    \ndef find_prime_factors_2(n):\n    '''\n    Find all prime factors of n.\n    '''\n    if n < 2 or n == 3:\n        return []\n    if n < 2 or n % 2 == 0:\n        return []\n    if n % 3 == 0:\n        return []\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return []\n        f += 6\n    f = 4\n    while f > 1:\n        if n % f == 0:\n            return []\n        f -= 1\n        if f == 2:\n            return [2]\n        if f == 3:\n            return [3]\n        if f == 4:\n            return [4]\n        if f == 5:\n            return [5]\n        if f == 6:\n            return [6]\n    return [n]\n    \n    \ndef find_lcm_2_rec(n):\n    '''\n    Fin"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0 or m == 0:\n        return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    def find_div(a,b):\n        '''\n        Assume the two numbers are present as an array of integers, and\n        The output must be an integer.\n        '''\n        return int(a/b)\n    def find_t(a,b):\n        '''\n        Assume the two numbers are present as an array of integers, and\n        The output must be an integer.\n        '''\n        return int(a*b)\n    def find_r(a,b):\n        '''\n        Assume the two numbers are present as an array of integers, and\n        The output must be an integer.\n        '''\n        return a/b\n    def get_p(a,b):\n        '''\n        Assume the two numbers are present as an array of integers, and\n        The output must be an integer.\n        '''\n        return a*b\n    if(n>m):\n        a = find_div(m,n)\n        b = find_t(m,n)\n        return find_r(a,b)\n    if(n==m):\n        return get_p(m,n)\n    else:\n        return find_div(get_p(m,n),n)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Take two numbers from user\n    n1 = int(input('Enter first number: '))\n    m1 = int(input('Enter second number: '))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>=1 and n<=1000000 and m>=1 and m<=1000000:\n        if n==m:\n            return n\n        else:\n            if m%n==0:\n                return m//n\n            else:\n                return m%n\n    else:\n        print('Please enter a whole number')\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = (w*(math.sin(math.radians(45))))/(math.cos(math.radians(45)))\n    b = (w*(math.sin(math.radians(90))))/(math.cos(math.radians(90)))\n    c = (w*(math.sin(math.radians(135))))/(math.cos(math.radians(135)))\n    return (a,b,c)\n    pass\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    a = (w*(math.sin(math.radians(90))))/(math.cos(math.radians(90)))\n    b = (w*(math.sin(math.radians(45))))/(math.cos(math.radians(45)))\n    c = (w*(math.sin(math.radians(135))))/(math.cos(math.radians(135)))\n    return (a,b,c)\ndef isRectangle(w,h):\n    '''\n    Check if the given width and height is a rectangle.\n    '''\n    if(math.sqrt(w*w+h*h) <= 0.5):\n        return True\n    else:\n        return False\ndef isCircle(w,h):\n    '''\n    Check if the given width and height is a circle.\n    '''\n    if(w**2 + h**2 <= 0.5):\n        return True\n    else:\n        return False\ndef isParallelogram(w,h):\n    '''\n    Check if the given width and height is a parallelogram.\n    '''\n    if((w**2 + h**2) <= (math.sqrt(w*w+h*h))**2):\n        return True\n    else:\n        return False\ndef isRectangle_diagonal(w,h):\n    '''\n    Check if the given width and height is a rectangle with a diagonal.\n    '''\n    if(w*(w+h)-w*(h+w) <= 0.5):\n        return True\n    else:\n        return False\ndef isCircle_diagonal(w,h):\n    '''\n    Check if the given width and height is a circle with a diagonal.\n    '''\n    if(w*(w+h)-w*(h+w) <= 0.5):\n        return True\n    else:\n        return False\ndef isParallelogram_diagonal(w,h):\n    '''\n    Check if the given width and height is a parallelogram with a diagonal.\n    '''\n    if((w**2 + h**2)/(w*h)-(math.sqrt(w**2+h**2)*(w+h)/(w*h)) <= 0.5):\n        return True\n    else:\n        return False\ndef isRectangle_triangle(w,h):\n    '''\n    Check if the given width and height is a rectangle with a triangle.\n    '''\n    if((w**2 + h**2)/(w*h)-(math.sqrt(w**2+h**2)*(w+h)/(w*h)) <= 0.5):\n        return True\n    else:\n        return False\ndef isCircle_triangle(w,h):\n    '''\n    Check if the given width and height is a circle with a triangle.\n    '''\n    if((w**2 + h**2)/(w*h)-(math.sqrt(w**2+h**2)*(w+h)/(w*h)) <= 0.5):\n        return True\n    else:\n        return False\ndef isParallelogram_triangle(w,h):\n    '''\n    Check if the given width and height is a parallelogram with a triangle.\n    '''\n    if((w**2 + h**2)/(w*h)-(math.sqrt(w**2+h**2)*(w+h)/(w*h)) <= 0.5):\n        return True\n    else:\n        return False\ndef isRectangle_pentagon(w,h):\n    '''\n    Check if the given width and height is a rectangle with a pentagon.\n    '''\n    if(w**2 + h**2 <= 0.5):\n        return True\n    else:\n        return False\ndef isCircle_pentagon(w,h):\n    '''\n    Check if the given width and height is a circle with a pentagon.\n    '''\n    if(w**2 + h**2 <= 0.5):\n        return True\n    else:\n        return False\ndef isParallelogram_pentagon(w,h):\n    '''\n    Check if the given width and height is a parallelogram with a pentagon.\n    '''\n    if((w**2 + h**2)/(w*h)-(math.sqrt(w**2+h**2)*(w+h)/(w*h)) <= 0.5):\n        return True\n    else:\n        return False\ndef isRectangle_octagon(w,h):\n    '''\n    Check if the given width and height is a rectangle with an octagon.\n    '''\n    if((w**2 + h**2)/(w*h)-(math.sqrt(w**2+h**2)*(w+h)/(w*h)) <= 0.5):\n        return True\n    else:\n        return False\ndef isCircle_octagon(w,h):\n    '''\n    Check if the given width and height is a circle with an octagon.\n    '''\n    if(w**2 + h**2 <= 0.5):\n        return True\n    else:\n        return False\ndef isParallelogram_octagon(w,h):\n    '''\n    Check if the given width and height is a parallelogram with an octagon.\n    '''\n    if((w**2 + h**2)/(w*h)-(math.sqrt(w**2+h**2)*(w+h)/(w*h)) <= 0.5):\n        return True\n    else:\n        return False\ndef isRectangle_hexagon(w,h):\n    '''\n    Check if the given width and height is a rectangle with an hexagon.\n    '''\n    if((w**2 + h**2)/(w*h)-(math.sqrt(w**2+h**2)*(w+h)/(w*h)) <= 0.5):\n        return True\n    else:\n        return False\ndef isCircle_hexagon(w,h):\n    '''\n    Check if the given width and height is a circle with an hexagon.\n    '''\n    if(w**2 + h**2 <= 0.5):\n        return True\n    else:\n        return False\ndef isParallelogram_hexagon(w,h):\n    '''\n    Check if the given width and height is a parallelogram with an hexagon.\n    '''\n    if((w**2 + h**2)/(w*h)-(math.sqrt(w**2+h**2)*(w+h)/(w*h)) <= 0.5):\n        return True\n    else:\n        return False\ndef isRectangle_heptagon(w,h):\n    '''\n    Check if the given width and height is a rectangle with a heptagon.\n    '''\n    if(w**2 + h**2 <= 0.5):\n        return True\n    else:\n        return False\ndef isCircle_heptagon(w,h):\n    '''\n    Check if the given width and height is a circle with a heptagon.\n    '''\n    if(w**2 + h**2 <= 0.5):\n        return True\n    else:\n        return False\ndef isParallelogram_heptagon(w,h):\n    '''\n    Check if the given width and height is a parallelogram with a heptagon.\n    '''\n    if((w**2 + h**2)/(w*h)-(math.sqrt(w**2+h**2)*(w+h)/(w*h)) <= 0.5):\n        return True\n    else:\n        return False\ndef isRectangle_octagon(w,h):\n    '''\n    Check if the given width and height is a rectangle with an octagon.\n    ''"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    '''\n    Note:\n        w and h are both positive integers.\n    '''\n    if w < 0 or h < 0:\n        raise ValueError('Input is negative.')\n    elif w > h:\n        raise ValueError('Input is greater than h.')\n    elif w == h:\n        return 0\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #E = e ^ 2 = 0.5\u03c0\n    #S = sin(e)\n    #S = 1 / (1 + e^2)\n    #S = 1 / (1 + e^2)\n    \n    A = (math.pi)**(1/2)\n    B = (3/8) * math.sqrt((2*h)/(3 * w))\n    C = (A**2 + (h*w)**2)/(4 * A * math.pi)\n    D = 1 + B**2 - C**2\n    if D < 0:\n        return -1\n    elif D == 0:\n        return math.sqrt(B**2 + (2*h)/(3 * w))\n    else:\n        return (2*h)/(3 * w)\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    #E = e ^ 2 = 0.5\u03c0\n    #S = sin(e)\n    #S = 1 / (1 + e^2)\n    #S = 1 / (1 + e^2)\n    \n    A = (math.pi)**(1/2)\n    B = (3/8) * math.sqrt((2*w)/(3 * h))\n    C = (A**2 + (h*w)**2)/(4 * A * math.pi)\n    D = 1 + B**2 - C**2\n    if D < 0:\n        return -1\n    elif D == 0:\n        return math.sqrt(B**2 + (2*h)/(3 * w))\n    else:\n        return (2*h)/(3 * w)\ndef oblate_face(w,h):\n    '''\n    Write a function to find the four sides of an oblate triangle.\n    '''\n    #S = 2 * (h / 2)\n    #E = 2 * (h / 2)\n    #C = 2 * (w / 2)\n    #D = 2 * (w / 2)\n    #S = S * (1 + E**2 + C**2 + D**2)\n    #E = E * (1 + C**2 + D**2)\n    #C = C * (1 + E**2)\n    #D = D * (1 + E**2)\n    #S = S + E\n    #E = E + C\n    #C = C + D\n    \n    A = 2 * (h / 2)\n    B = 2 * (h / 2)\n    C = 2 * (w / 2)\n    D = 2 * (w / 2)\n    S = A + B + C + D\n    E = A + B + C + D\n    C = A + B + D\n    D = A + B + D\n    S = S * (1 + E**2 + C**2 + D**2)\n    E = E * (1 + C**2 + D**2)\n    C = C * (1 + E**2)\n    D = D * (1 + E**2)\n    S = S + E\n    E = E + C\n    C = C + D\n    \n    return S,E,C,D\ndef oblate_face_rightangle(w,h):\n    '''\n    Write a function to find the four sides of an oblate triangle.\n    '''\n    #S = 2 * (h / 2)\n    #E = 2 * (h / 2)\n    #C = 2 * (w / 2)\n    #D = 2 * (w / 2)\n    #S = S * (1 + E**2 + C**2 + D**2)\n    #E = E * (1 + C**2 + D**2)\n    #C = C * (1 + E**2)\n    #D = D * (1 + E**2)\n    #S = S + E\n    #E = E + C\n    #C = C + D\n    \n    A = 2 * (h / 2)\n    B = 2 * (h / 2)\n    C = 2 * (w / 2)\n    D = 2 * (w / 2)\n    S = A + B + C + D\n    E = A + B + C + D\n    C = A + B + D\n    D = A + B + D\n    S = S * (1 + E**2 + C**2 + D**2)\n    E = E * (1 + C**2 + D**2)\n    C = C * (1 + E**2)\n    D = D * (1 + E**2)\n    S = S + E\n    E = E + C\n    C = C + D\n    \n    return S,E,C,D\ndef oblate_face_leftangle(w,h):\n    '''\n    Write a function to find the four sides of an oblate triangle.\n    '''\n    #S = 2 * (h / 2)\n    #E = 2 * (h / 2)\n    #C = 2 * (w / 2)\n    #D = 2 * (w / 2)\n    #S = S * (1 + E**2 + C**2 + D**2)\n    #E = E * (1 + C**2 + D**2)\n    #C = C * (1 + E**2)\n    #D = D * (1 + E**2)\n    #S = S + E\n    #E = E + C\n    #C = C + D\n    \n    A = 2 * (h / 2)\n    B = 2 * (h / 2)\n    C = 2 * (w / 2)\n    D = 2 * (w / 2)\n    S = A + B + C + D\n    E = A + B + C + D\n    C = A + B + D\n    D = A + B + D\n    S = S * (1 + E**2 + C**2 + D**2)\n    E = E * (1 + C**2 + D**2)\n    C = C * (1 + E**2)\n    D = D * (1 + E**2)\n    S = S + E\n    E = E + C\n    C = C + D\n    \n    return S,E,C,D\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    from PIL import Image\n    # Size of the image\n    img = Image.open(f'images/{w}x{h}.png')\n    # Image dimensions\n    width,height = img.size\n    # Convert image to a numpy array\n    img_array = np.array(img)\n    # Width\n    width_of_triangle = width * 2 / 3\n    # Height\n    height_of_triangle = height * 2 / 3\n    # Width of the triangle\n    width_of_triangle = int(width_of_triangle)\n    # Height of the triangle\n    height_of_triangle = int(height_of_triangle)\n    # Get the center points\n    center_of_triangle = np.array(np.array(img.getdata())[::3])\n    # Get the center points\n    center_of_triangle = np.array(center_of_triangle)\n    # Get the number of pixels in each side\n    side_length = width_of_triangle / 3\n    side_width = width_of_triangle / 3\n    side_height = height_of_triangle / 3\n    # Draw the triangle in the array\n    triangle_image = Image.new('L',(side_width,side_height),0)\n    draw = ImageDraw.Draw(triangle_image)\n    # Define the triangles\n    x1 = center_of_triangle - (side_length / 2)\n    y1 = (height_of_triangle * 2 / 3) - (side_height / 2)\n    x2 = center_of_triangle + (side_length / 2)\n    y2 = (height_of_triangle * 2 / 3) - (side_height / 2)\n    x3 = center_of_triangle + (side_length / 2)\n    y3 = (height_of_triangle * 2 / 3) - (side_height / 2)\n    # Draw the triangles\n    draw.line([x1,y1,x2,y2,x3,y3],fill=(0,0,0))\n    # Convert the image array to a numpy array\n    img_array = np.array(triangle_image)\n    # Function to calculate the angle\n    def calculate_angle(x1,y1,x2,y2,x3,y3):\n        return math.acos((x3-x1)/(x2-x1) * (x3-x1) + (y3-y1)/(y2-y1) * (y3-y1))\n    # Function to calculate the angle\n    def get_angles(x1,y1,x2,y2,x3,y3):\n        # Get the angle\n        angle = calculate_angle(x1,y1,x2,y2,x3,y3)\n        # Get the side of triangle\n        side_length = width_of_triangle / 3\n        side_width = width_of_triangle / 3\n        side_height = height_of_triangle / 3\n        # Draw the triangle in the array\n        triangle_image = Image.new('L',(side_width,side_height),0)\n        draw = ImageDraw.Draw(triangle_image)\n        # Define the triangles\n        x1 = center_of_triangle - (side_length / 2)\n        y1 = (height_of_triangle * 2 / 3) - (side_height / 2)\n        x2 = center_of_triangle + (side_length / 2)\n        y2 = (height_of_triangle * 2 / 3) - (side_height / 2)\n        x3 = center_of_triangle + (side_length / 2)\n        y3 = (height_of_triangle * 2 / 3) - (side_height / 2)\n        # Draw the triangles\n        draw.line([x1,y1,x2,y2,x3,y3],fill=(0,0,0))\n        # Convert the image array to a numpy array\n        img_array = np.array(triangle_image)\n        # Function to calculate the angle\n        def calculate_angles(x1,y1,x2,y2,x3,y3):\n            # Get the angle\n            angle = calculate_angle(x1,y1,x2,y2,x3,y3)\n            # Get the side of triangle\n            side_length = width_of_triangle / 3\n            side_width = width_of_triangle / 3\n            side_height = height_of_triangle / 3\n            # Draw the triangle in the array\n            triangle_image = Image.new('L',(side_width,side_height),0)\n            draw = ImageDraw.Draw(triangle_image)\n            # Define the triangles\n            x1 = center_of_triangle - (side_length / 2)\n            y1 = (height_of_triangle * 2 / 3) - (side_height / 2)\n            x2 = center_of_triangle + (side_length / 2)\n            y2 = (height_of_triangle * 2 / 3) - (side_height / 2)\n            x3 = center_of_triangle + (side_length / 2)\n            y3 = (height_of_triangle * 2 / 3) - (side_height / 2)\n            # Draw the triangles\n            draw.line([x1,y1,x2,y2,x3,y3],fill=(0,0,0))\n            # Convert the image array to a numpy array\n            img_array = np.array(triangle_image)\n            # Function to calculate the angle\n            def calculate_angles(x1,y1,x2,y2,x3,y3):\n                # Get the angle\n                angle = calculate_angle(x1,y1,x2,y2,x3,y3)\n                # Get the side of triangle\n                side_length = width_of_triangle / 3\n                side_width = width_of_triangle / 3\n                side_height = height_of_triangle / 3\n                # Draw the triangle in the array\n                triangle_image = Image.new('L',(side_width,side_height),0)\n                draw = ImageDraw.Draw(triangle_image)\n                # Define the triangles\n                x1 = center_of_triangle - (side_length / 2)\n                y1 = (height_of_triangle * 2 / 3) - (side_height / 2)\n                x2 = center_of_triangle + (side_length / 2)\n                y2 = (height_of_triangle * 2 / 3) - (side_height / 2)\n                x3 = center_of_triangle + (side_length / 2)\n                y3 = (height_of_triangle * 2 / 3) - (side_height / 2)\n                # Draw the triangles\n                draw.line([x1,y1,x2,y2,x3,y3],fill=(0,0,0))\n                # Convert the image array to a numpy array\n                img_array = np.array(triangle_image)\n                # Function to calculate the angle\n                def calculate_angles(x1,y1,x2,y2,x3,y3):\n                    # Get the angle\n                    angle = calculate_angle(x1,y1,x2,y2,x3,y3)\n                    # Get the side of triangle\n                    side_length = width_of_triangle / 3\n                    side_width = width_of_triangle / 3\n                    side_height = height_of_triangle / 3\n                    # Draw the triangle in the array\n                    triangle_image = Image.new('L',(side_width,side_height),0)\n                    draw = ImageDraw.Draw(triangle_image)\n                    # Define the triangles\n                    x1 = center_of_triangle - (side_length / 2)\n                    y1 = (height_of_triangle * 2 / 3) - (side_height / 2)\n                    x2 = center_of_triangle + (side_length / 2)\n                    y2 = (height_of_triangle * 2 / 3) - (side_height / 2)\n                    x3 = center_of_triangle + (side_length / 2)\n                    y3 = (height_of_triangle * 2 / 3) - (side_height / 2)\n                    # Draw th"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return -w/(2*(h**2))\n    \ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    return -w/(2*(h**2))\n    \ndef squared_dist(a,b):\n    '''\n    Write a function to find the squared distance between two points.\n    '''\n    return (a-b)**2\n    \ndef distance(a,b):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    return math.sqrt(squared_dist(a,b))\n    \ndef find_angle(a,b,c,d,e,f,g,h):\n    '''\n    Write a function that finds the angle between the points a, b, c and d.\n    '''\n    a_side_up = distance(a,b)\n    a_side_down = distance(a,c)\n    b_side_up = distance(b,c)\n    b_side_down = distance(b,d)\n    c_side_up = distance(c,d)\n    c_side_down = distance(c,e)\n    d_side_up = distance(d,e)\n    d_side_down = distance(d,f)\n    e_side_up = distance(e,f)\n    e_side_down = distance(e,g)\n    f_side_up = distance(f,g)\n    f_side_down = distance(f,h)\n    g_side_up = distance(g,h)\n    \n    # both sides are straight, so find the angles\n    if (a_side_up > a_side_down):\n        # calculate the angle between the sides\n        theta = math.acos((c_side_up - b_side_down)/(a_side_down - b_side_up))\n        # print(\"theta: \", theta)\n        if (theta < math.pi/2):\n            # print(\"angle is acute\")\n            return theta\n        else:\n            # print(\"angle is obtuse\")\n            return math.pi - theta\n        \n    if (a_side_up < a_side_down):\n        # calculate the angle between the sides\n        theta = math.acos((d_side_up - b_side_down)/(a_side_up - b_side_down))\n        # print(\"theta: \", theta)\n        if (theta < math.pi/2):\n            # print(\"angle is acute\")\n            return theta\n        else:\n            # print(\"angle is obtuse\")\n            return math.pi - theta\n    \n    if (b_side_up < b_side_down):\n        # calculate the angle between the sides\n        theta = math.acos((e_side_up - c_side_down)/(a_side_up - c_side_down))\n        # print(\"theta: \", theta)\n        if (theta < math.pi/2):\n            # print(\"angle is acute\")\n            return theta\n        else:\n            # print(\"angle is obtuse\")\n            return math.pi - theta\n        \n    if (b_side_up > b_side_down):\n        # calculate the angle between the sides\n        theta = math.acos((f_side_up - c_side_down)/(a_side_up - c_side_down))\n        # print(\"theta: \", theta)\n        if (theta < math.pi/2):\n            # print(\"angle is acute\")\n            return theta\n        else:\n            # print(\"angle is obtuse\")\n            return math.pi - theta\n        \n    if (c_side_up < c_side_down):\n        # calculate the angle between the sides\n        theta = math.acos((g_side_up - d_side_down)/(a_side_up - d_side_down))\n        # print(\"theta: \", theta)\n        if (theta < math.pi/2):\n            # print(\"angle is acute\")\n            return theta\n        else:\n            # print(\"angle is obtuse\")\n            return math.pi - theta\n        \n    if (c_side_up > c_side_down):\n        # calculate the angle between the sides\n        theta = math.acos((h_side_up - d_side_down)/(a_side_up - d_side_down))\n        # print(\"theta: \", theta)\n        if (theta < math.pi/2):\n            # print(\"angle is acute\")\n            return theta\n        else:\n            # print(\"angle is obtuse\")\n            return math.pi - theta\n        \n    if (d_side_up < d_side_down):\n        # calculate the angle between the sides\n        theta = math.acos((f_side_up - e_side_down)/(a_side_up - e_side_down))\n        # print(\"theta: \", theta)\n        if (theta < math.pi/2):\n            # print(\"angle is acute\")\n            return theta\n        else:\n            # print(\"angle is obtuse\")\n            return math.pi - theta\n        \n    if (e_side_up < e_side_down):\n        # calculate the angle between the sides\n        theta = math.acos((g_side_up - h_side_down)/(a_side_up - h_side_down))\n        # print(\"theta: \", theta)\n        if (theta < math.pi/2):\n            # print(\"angle is acute\")\n            return theta\n        else:\n            # print(\"angle is obtuse\")\n            return math.pi - theta\n    \n    if (h_side_up < h_side_down):\n        # calculate the angle between the sides\n        theta = math.acos((a_side_up - f_side_down)/(a_side_up - f_side_down))\n        # print(\"theta: \", theta)\n        if (theta < math.pi/2):\n            # print(\"angle is acute\")\n            return theta\n        else:\n            # print(\"angle is obtuse\")\n            return math.pi - theta\n            \n    if (a_side_up < a_side_down):\n        # calculate the angle between the sides\n        theta = math.acos((b_side_up - g_side_down)/(a_side_up - g_side_down))\n        # print(\"theta: \", theta)\n        if (theta < math.pi/2):\n            # print(\"angle is acute\")\n            return theta\n        else:\n            # print(\"angle is obtuse\")\n            return math.pi - theta\n        \n    if (b_side_up < b_side_down):\n        # calculate the angle between the sides\n        theta = math.acos((c_side_up - h_side_down)/(a_side_up - h_side_down))\n        # print(\"theta: \", theta)\n        if (theta < math.pi/2):\n            # print(\"angle is acute\")\n            return theta\n        else:\n            # print(\"angle is obtuse\")\n            return math.pi - theta\n        \n    if (c_side_up < c_side_down):\n        # calculate the angle between the sides\n        theta = math.acos((d_side_up - f_side_down)/(a_side_up - f_side_down))\n        # print(\"theta: \", theta)\n        if (theta < math.pi/2):\n            # print(\"angle is acute\")\n            return theta\n        else:\n            # print(\"angle is obtuse\")\n            return math.pi - theta\n        \n    if (d_side_up < d_side_down):\n        # calculate the angle between the sides\n        theta = math.acos((e_side_up - g_side_down)/(a_side_up - g_side_down))\n        # print(\"theta: \", theta)\n        if (theta < math.pi/2):\n            # print(\"angle is acute\")\n            return theta\n        else:\n            "
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w<h:\n        return 0\n    else:\n        return w\n        \n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x = (w*math.cos(math.radians(90)))/2\n    y = (h*math.sin(math.radians(90)))/2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Taking input from user.\n    w = float(w)\n    h = float(h)\n    # calculating area of triangle.\n    area = 0.5 * (w**2.0 + h**2.0)\n    # calculating aspect ratio.\n    ar = w / h\n    # calculating distance between\n    # point and center.\n    d = 0.5 * math.sqrt(area * ar)\n    # returning distance.\n    return d\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return int(math.sqrt((w*w)+(h*h)))\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    #The third side of a right angled triangle is the point where the\n    #fourth side of the triangle is left.\n    s = (w/2)+(h/2)\n    \n    #The angle is the angle between the first point of the triangle and\n    #the third side of the triangle.\n    angle = math.acos((w*s)/(h*s))\n    \n    #The hypotenuse of the triangle is the square root of the angle\n    #of the third side of the triangle.\n    hypotenuse = math.sqrt(s*s - w*h)\n    \n    #The angle of the triangle is the angle between the third side of\n    #the triangle and the hypotenuse of the triangle.\n    angle_of_side = math.acos((hypotenuse*s)/hypotenuse)\n    \n    #The third side of the triangle is the angle of the triangle at\n    #this point relative to the hypotenuse of the triangle.\n    angle_of_triangle_of_side = math.acos(s*h/w)\n    \n    #The angle of the triangle is the angle between the two sides of the\n    #triangle and the third side of the triangle.\n    angle_of_triangle = math.acos(w*w/h)\n    \n    #The side of the triangle is the angle between the triangle\n    #and the triangle point.\n    side_of_triangle = (angle_of_side + angle_of_triangle_of_side)\n    \n    #The angle of the triangle is the angle between the triangle\n    #and the triangle point.\n    angle_of_triangle_of_side = math.acos((hypotenuse*h/w)/hypotenuse)\n    \n    #The angle of the triangle is the angle between the triangle\n    #and the triangle point.\n    angle_of_triangle = math.acos(h*h/w)\n    \n    #The triangle is the angle of the triangle and the triangle\n    #point.\n    triangle = (angle_of_triangle + angle_of_triangle_of_side)\n    \n    #The triangle is the side of the triangle and the triangle\n    #point.\n    triangle_side = (side_of_triangle + triangle)\n    \n    return triangle_side\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval=0\n    for x in listval:\n        if x > maxval:\n            maxval=x\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max=listval[0]\n    for item in listval:\n        if item>max:\n            max=item\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for val in listval:\n        if max < val:\n            max = val\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = -999999\n    for item in listval:\n        if item > max:\n            max = item\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = -1\n    for x in listval:\n        if x > max_val:\n            max_val = x\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for item in listval:\n        if item > max:\n            max = item\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for num in listval:\n        if num > max:\n            max = num\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for x in range(1,number):\n        if number%x==0:\n            sum+=x\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # create a count variable to track the number of divisors\n    count = 0\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for divisor in range(1, number + 1):\n        if number % divisor == 0:\n            sum += divisor\n    return sum\n    \n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    if number % 2 == 0:\n        divisors.append(2)\n    if number % 3 == 0:\n        divisors.append(3)\n    if number % 5 == 0:\n        divisors.append(5)\n    if len(divisors) > 0:\n        return sum(divisors)\n    else:\n        return 0\n        \nprint(sum_div(int(input()))"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    for i in range(1, int(number/2)+1):\n        if number % i == 0:\n            result += i\n    return result\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    i = 1\n    if number == 0:\n        return 1\n    else:\n        while i <= number:\n            if number % i == 0:\n                j = i\n                while number % j == 0:\n                    j = j + 1\n                if j == 2:\n                    return j\n            i = i + 1\n    return 0\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return number\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for num in range(1, number + 1):\n        if number % num == 0:\n            div_list.append(num)\n    return(sum(div_list))\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2: \n        return None\n    mid = len(arr) // 2\n    count = 0\n    for i in range(mid): \n        left = arr[i] \n        right = arr[mid - i - 1]\n        if left <= right: \n            count += mid - i - 1\n    return count \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    return n//2 \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    invCount=0\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            invCount+=1\n    return invCount\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if arr == []:\n        return 0\n    elif len(arr) == 1:\n        return 1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #set default values\n    count = 0\n    rev = 0\n    i = 1\n    #iterate through the array\n    while i < len(arr): \n        if arr[i] < arr[i-1]:\n            count += 1\n        elif arr[i] > arr[i-1]: \n            rev = arr[i]\n            i += 1\n        else:\n            i += 1\n    return count, rev\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n= len(arr)\n    inv_count = 0\n    a = []\n    for i in range(n):\n        a.append(arr[i])\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            inv += arr[i]\n        else:\n            arr[i] = -1*arr[i]\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            if arr[i] > inv:\n                inv = arr[i]\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0 \n    # iterate over the array \n    for i in range(0,len(arr)-1): \n        # set current index to last index \n        current = len(arr) - 1 \n        # compare the next index with current index \n        while (current > 0 and arr[current] > arr[current-1]): \n            current -= 1\n        # if the current index is less than the previous index \n        # and the value in the current index is greater than the value in the next index \n        if current < len(arr)-1 and arr[current] > arr[current+1]: \n            count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] > arr[j]:\n                inv+=1\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    c=0\n    for i in arr:\n        if i!=i:\n            c+=1\n    return c\n    \n    \ndef main():\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    print(get_Inv_Count(arr))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for i in list1:\n        if type(i) is list:\n            for j in flatten_list(i):\n                res.append(j)\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) == list:\n        return [elem for elem in list1]\n    elif type(list1) == dict:\n        return {k: flatten_list(v) for k, v in list1.items()}\n    elif type(list1) == tuple:\n        return tuple([elem for elem in list1])\n    elif type(list1) == set:\n        return set([elem for elem in list1])\n    else:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    # Write your code here.\n    \n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1)!= list:\n        return list1\n    else:\n        result = []\n        for sublist in list1:\n            for x in flatten_list(sublist):\n                result.append(x)\n        return result\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    if len(list1) == 1:\n        return list1\n    \n    else:\n        return [list1[0]] + flatten_list(list1[1:])\n        \ndef print_board(board):\n    '''\n    Prints the board in a nice format.\n    '''\n    \n    print(''+ board[0] +'|'+ board[1] +'|'+ board[2])\n    print('-----------')\n    print(''+ board[3] +'|'+ board[4] +'|'+ board[5])\n    print('-----------')\n    print(''+ board[6] +'|'+ board[7] +'|'+ board[8])\n    print('\\n')\n    \ndef is_win(board, mark):\n    '''\n    Check if a player wins.\n    '''\n    \n    if board[0] == board[1] == board[2] and board[3] == mark:\n        return True\n    elif board[0] == board[3] == board[6] and board[1] == mark:\n        return True\n    elif board[0] == board[4] == board[8] and board[2] == mark:\n        return True\n    elif board[0] == board[4] == board[8] and board[2] == mark:\n        return True\n    elif board[0] == board[4] == board[6] and board[4] == mark:\n        return True\n    elif board[0] == board[3] == board[6] and board[3] == mark:\n        return True\n    elif board[0] == board[5] == board[9] and board[1] == mark:\n        return True\n    elif board[0] == board[6] == board[9] and board[5] == mark:\n        return True\n    elif board[0] == board[4] == board[8] and board[5] == mark:\n        return True\n    elif board[0] == board[2] == board[4] and board[2] == mark:\n        return True\n    elif board[0] == board[5] == board[8] and board[5] == mark:\n        return True\n    elif board[0] == board[7] == board[4] and board[4] == mark:\n        return True\n    elif board[0] == board[1] == board[5] and board[5] == mark:\n        return True\n    else:\n        return False\n    \ndef mark_mark(board, mark):\n    '''\n    Change the board if a player wins.\n    '''\n    \n    if is_win(board, mark):\n        print('You won!')\n    elif mark == 'X':\n        print('O won!')\n    elif mark == 'O':\n        print('X won!')\n    else:\n        print('DRAW')\n    print_board(board)\n    \ndef play_game():\n    '''\n    Main game loop.\n    '''\n    \n    mark = 'X'\n    \n    board = [' '] * 9\n    \n    print_board(board)\n    \n    while True:\n        print('Welcome to Tic-Tac-Toe!')\n        player = input('What is your name? ')\n        print(player + ', enter your mark.')\n        mark = input('X or O? ')\n        \n        if mark.upper()!= 'X' and mark.upper()!= 'O':\n            print('Invalid input!')\n            continue\n        \n        if mark.upper() == 'X':\n            mark_mark(board, mark)\n        \n        elif mark.upper() == 'O':\n            print_board(board)\n            print('\\n')\n            print(player + ', enter your mark.')\n            mark_mark(board, mark)\n            \n        else:\n            print('Invalid input!')\n            continue\n        \n        play_again = input('Do you want to play again? Y or N? ')\n        if play_again.upper() == 'Y':\n            board = [' '] * 9\n            continue\n        else:\n            print('\\n')\n            print('Goodbye!')\n            break\n            \nplay_game("
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return list1\n    if type(list1[0]) == type([1,2,3]):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return list1[0] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    #pass\n    return list(flatten(list(list1)))\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    def flatten(x):\n        if isinstance(x, list):\n            for item in x:\n                flatten(item)\n            flattened.append(x)\n        elif isinstance(x, (int, float, str)):\n            flattened.append(x)\n        else:\n            flattened.append(list1)\n    flatten([1,2,[3,4,[5,[6,[7,[8,9,10]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for i in range(len(stdata)):\n        temp = 0\n        for j in range(i,len(stdata)):\n            temp = temp + stdata[j][0]\n        max_aggregate = temp if temp > max_aggregate else max_aggregate\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #print(stdata)\n    max_agg_count = 0\n    max_agg_value = 0\n    for i in range(len(stdata)):\n        if stdata[i][0] > max_agg_count:\n            max_agg_count = stdata[i][0]\n            max_agg_value = stdata[i][1]\n    return max_agg_count, max_agg_value\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #write your code here\n    max_agg = 0\n    for i in stdata:\n        max_agg += i[1]\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def fn(x):\n        return max(x)\n    return max_aggregate(stdata)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for key, value in stdata.items():\n        d[key].append(value)\n    for k, v in d.items():\n        v.sort()\n    return max(v)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    \n    #initialize the max_aggregate_dict with zeros\n    #need to make it even more big as it will need to be the first half of the data to represent a singleton\n    #and a non-singleton at the end\n    max_aggregate_dict = {(0,0):0, (0,1):0, (0,2):0, (0,3):0, (0,4):0, (0,5):0, (0,6):0, (0,7):0}\n    \n    #count the number of the data types\n    #the indices of the values associated with each data type\n    #if the value is non-zero, then the value is the max\n    max_aggregate_dict[(0,0)] = stdata[0][0]\n    \n    #if the value is non-zero, then the value is the max\n    max_aggregate_dict[(0,1)] = stdata[0][1]\n    \n    #if the value is non-zero, then the value is the max\n    max_aggregate_dict[(0,2)] = stdata[0][2]\n    \n    #if the value is non-zero, then the value is the max\n    max_aggregate_dict[(0,3)] = stdata[0][3]\n    \n    #if the value is non-zero, then the value is the max\n    max_aggregate_dict[(0,4)] = stdata[0][4]\n    \n    #if the value is non-zero, then the value is the max\n    max_aggregate_dict[(0,5)] = stdata[0][5]\n    \n    #if the value is non-zero, then the value is the max\n    max_aggregate_dict[(0,6)] = stdata[0][6]\n    \n    #if the value is non-zero, then the value is the max\n    max_aggregate_dict[(0,7)] = stdata[0][7]\n    \n    \n    for i in range(1,len(stdata[0])):\n        #calculate the max aggregated value and its corresponding data type\n        #index 0 is the data type in the data set\n        #index 1 is the data type in the data set\n        #index 2 is the index of the value at the ith data type\n        #index 3 is the index of the value at the ith data type\n        #index 4 is the index of the value at the ith data type\n        #index 5 is the index of the value at the ith data type\n        #index 6 is the index of the value at the ith data type\n        #index 7 is the index of the value at the ith data type\n        max_aggregate_dict[(i,0)] = max(stdata[i][0],max_aggregate_dict[(i-1,0)])\n        #max aggregated value is the maximum aggregated value of the ith data type\n        max_aggregate_dict[(i,1)] = max(stdata[i][1],max_aggregate_dict[(i-1,1)])\n        #max aggregated value is the maximum aggregated value of the ith data type\n        max_aggregate_dict[(i,2)] = max(stdata[i][2],max_aggregate_dict[(i-1,2)])\n        #max aggregated value is the maximum aggregated value of the ith data type\n        max_aggregate_dict[(i,3)] = max(stdata[i][3],max_aggregate_dict[(i-1,3)])\n        #max aggregated value is the maximum aggregated value of the ith data type\n        max_aggregate_dict[(i,4)] = max(stdata[i][4],max_aggregate_dict[(i-1,4)])\n        #max aggregated value is the maximum aggregated value of the ith data type\n        max_aggregate_dict[(i,5)] = max(stdata[i][5],max_aggregate_dict[(i-1,5)])\n        #max aggregated value is the maximum aggregated value of the ith data type\n        max_aggregate_dict[(i,6)] = max(stdata[i][6],max_aggregate_dict[(i-1,6)])\n        #max aggregated value is the maximum aggregated value of the ith data type\n        max_aggregate_dict[(i,7)] = max(stdata[i][7],max_aggregate_dict[(i-1,7)])\n    \n    \n    #iterate through the data set\n    #find the maximum aggregated value and its corresponding data type\n    #increment the max aggregated value by 1\n    for i in range(1,len(stdata[0])):\n        #find the max aggregated value and its corresponding data type\n        #index 0 is the data type in the data set\n        #index 1 is the data type in the data set\n        #index 2 is the index of the value at the ith data type\n        #index 3 is the index of the value at the ith data type\n        #index 4 is the index of the value at the ith data type\n        #index 5 is the index of the value at the ith data type\n        #index 6 is the index of the value at the ith data type\n        #index 7 is the index of the value at the ith data type\n        if stdata[i][0] > max_aggregate_dict[(i-1,0)]:\n            max_aggregate_dict[(i,0)] = stdata[i][0]\n        if stdata[i][1] > max_aggregate_dict[(i-1,1)]:\n            max_aggregate_dict[(i,1)] = stdata[i][1]\n        if stdata[i][2] > max_aggregate_dict[(i-1,2)]:\n            max_aggregate_dict[(i,2)] = stdata[i][2]\n        if stdata[i][3] > max_aggregate_dict[(i-1,3)]:\n            max_aggregate_dict[(i,3)] = stdata[i][3]\n        if stdata[i][4] > max_aggregate_dict[(i-1,4)]:\n            max_aggregate_dict[(i,4)] = stdata[i][4]\n        if stdata[i][5] > max_aggregate_dict[(i-1,5)]:\n            max_aggregate_dict[(i,5)] = stdata[i][5]\n        if stdata[i][6] > max_aggregate_dict[(i-1,6)]:\n            max_aggregate_dict[(i,6)] = stdata[i][6]\n        if stdata[i][7] > max_aggregate_dict[(i-1,7)]:\n            max_aggregate_dict[(i,7)] = stdata[i][7]\n    \n    \n    #return the maximum aggregated value\n    return max(max_aggregate_dict.values())\n    \n    \n    \ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    \n    \n    #initialize the min_aggregate_dict with zeros\n    #need to make it even more big as it will need to be the first half of the data to represent a singleton\n    #and a non-singleton at the end\n    min_aggregate_dict = {(0,0):0, (0,1):0, (0,2):0, (0,3):0, (0,4):0, (0,5):0, (0,6):0, (0,7):0}\n    \n    #count the number of the data types\n    #the indices of the values associated with each data type\n    #if the value is non-zero, then the value is the min\n    min_aggregate_dict[(0,0)] = stdata[0][0]\n    \n    #if the value is non-zero, then the value is the min\n    min_aggregate_dict[(0,1)] = stdata[0][1]\n    \n    #if the value is non-zero, then the value is the min\n    min_aggregate_dict[(0,2)] = stdata[0][2]\n    "
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    mydata = list(stdata)\n    c = 0\n    \n    for i in mydata:\n        if i[2] == '1':\n            c+=1\n    print(c)\n    if c == 0:\n        print(0)\n    else:\n        print(c, end=',')\n        print(max(mydata, key=lambda i:i[2])[2])\n        "
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_list = []\n    for el in stdata:\n        el_aggregate = el[1]\n        if el_aggregate not in max_aggregate_list:\n            max_aggregate_list.append(el_aggregate)\n    return max(max_aggregate_list)\n    #return max_aggregate_list\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # TODO: Implement this function\n    # Return the maximum aggregate\n    # TODO: Verify the structure of the tuple\n    raise NotImplementedError()\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    sorted_list = sorted(stdata, key = lambda x:x[0], reverse=True)\n    return sorted_list[0][1]\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count=0\n    n=n//2\n    while n>0:\n        if (n&1):\n            count+=1\n        n>>=1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count=0\n    for i in range(1, n+1): \n        if(n&(1<<i)):\n            count+=1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary(n,s):\n        ans = 0\n        for i in range(n-1, -1, -1):\n            if s[i] == '1':\n                ans += 1\n        return ans\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # code here\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    print(n)\n    binary_seq = bin(n)[2:].zfill(n)\n    print(binary_seq)\n    count = 0\n    for i in range(len(binary_seq)):\n        if binary_seq[i] == \"0\":\n            count += int(binary_seq[i + 1])\n        else:\n            count += int(binary_seq[i - 1])\n    print(count)\n    \ncount_binary_seq(9)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    bin_count = 0 \n    for i in range(1, n + 1): \n        bin_count += n >> i & 1 \n    return bin_count \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_2(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_3(n): \n    '''\n    Write a function to find the count of all binary sequences of length 3n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_4(n): \n    '''\n    Write a function to find the count of all binary sequences of length 4n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_5(n): \n    '''\n    Write a function to find the count of all binary sequences of length 5n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_6(n): \n    '''\n    Write a function to find the count of all binary sequences of length 6n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_7(n): \n    '''\n    Write a function to find the count of all binary sequences of length 7n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_8(n): \n    '''\n    Write a function to find the count of all binary sequences of length 8n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_9(n): \n    '''\n    Write a function to find the count of all binary sequences of length 9n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_10(n): \n    '''\n    Write a function to find the count of all binary sequences of length 10n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_11(n): \n    '''\n    Write a function to find the count of all binary sequences of length 11n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_12(n): \n    '''\n    Write a function to find the count of all binary sequences of length 12n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_13(n): \n    '''\n    Write a function to find the count of all binary sequences of length 13n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_14(n): \n    '''\n    Write a function to find the count of all binary sequences of length 14n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_15(n): \n    '''\n    Write a function to find the count of all binary sequences of length 15n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_16(n): \n    '''\n    Write a function to find the count of all binary sequences of length 16n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0, 'n must be non-negative'\n    \n    n_bits = 1\n    for i in range(n):\n        n_bits = n_bits + int(bin(n)[2:])\n    \n    return (n_bits - 1) % 2 + 1\n    \n    \ndef count_binary_seq_17(n): \n    '''\n    Write a function to find the count of all binary sequences of length 17n suc"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    c = 0\n    for i in range(2**n):\n        if sum(bin(i)[2:].zfill(n)) == i:\n            c += 1\n    return c\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initializing the count for the first n bits \n    count_first_n_bits = 0 \n    # Initializing the count for the last n bits \n    count_last_n_bits = 0 \n    # Initializing the count for the sum of all the first 2n bits \n    count_sum = 0 \n    # Iterating over the n-bit strings \n    for i in range(n): \n        # Initializing the sum of first n bits \n        count_first_n_bits += (i % 2) \n        # Initializing the sum of last n bits \n        count_last_n_bits += (i // 2) \n        # Initializing the sum of sum of the first 2n bits \n        count_sum += (i // 2) + i % 2 \n        # Incrementing the count for each consecutive 2n bits \n        if (i % 2 == 0): \n            count_sum += 2 \n        if (i // 2 == 0): \n            count_sum += 1 \n    # Returning the count \n    return count_sum\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_seq(n):\n        # i=0\n        # l=1\n        # while i<=n:\n        #     print('l',i)\n        #     j=0\n        #     while j<=i:\n        #         if bin(n)[j:j+n]=='0b' and bin(n)[:i]=='0b' and bin(n)[i+n:]=='0b':\n        #             print('1')\n        #             print('1',i,j)\n        #             j=j+1\n        #         else:\n        #             print('0')\n        #     i=i+1\n        # i=1\n        # while i<=n:\n        #     if bin(n)[i:i+n]=='0b' and bin(n)[i+n:]=='0b':\n        #         print('1')\n        #         print('1',i,j)\n        #         j=j+1\n        #     else:\n        #         print('0')\n        #     i=i+1\n        # print(i)\n        def count_bin(n):\n            i=0\n            l=1\n            while i<=n:\n                j=0\n                while j<=i:\n                    if bin(n)[j:j+n]=='0b' and bin(n)[:i]=='0b' and bin(n)[i+n:]=='0b':\n                        print('1')\n                        print('1',i,j)\n                        j=j+1\n                    else:\n                        print('0')\n                    i=i+1\n                i=i+1\n        count_seq(n)\n        count_bin(n)\n        return\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if(d is None):\n        return 0\n    else:\n        depth = 0\n        \n        for k in d:\n            depth += dict_depth(d[k])\n        \n        return depth\n    \ndef dct_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if(d is None):\n        return 0\n    else:\n        depth = 1\n        \n        for k in d:\n            depth = max(depth,dct_depth(d[k]))\n        \n        return depth\n    \ndef dct(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if(d is None):\n        return 0\n    else:\n        depth = 1\n        \n        for k in d:\n            depth = max(depth,dct(d[k]))\n        \n        return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if type(d[key]) == dict:\n            depth = dict_depth(d[key])\n            max_depth = max(max_depth, depth)\n        else:\n            depth = 0\n    return max_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    n = 0\n    for key, value in d.items():\n        if n == 0:\n            print(key, value)\n            n = 1\n        else:\n            print(\"\\t\", key, value)\n            n = n + 1\n    print(\"\\nThe depth of the dictionary is \" + str(n))\n    \n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    #You can write your code here\n    if '__dict__' in dir(d):\n        return len(d.__dict__)\n    else:\n        return 0\n    \n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return 0\n    if len(d) == 1:\n        return 1\n    else:\n        return max(dict_depth(d[1:]) + 1, dict_depth(d[1:]) + 1 + 1)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        depth = 1\n        for k in d.keys():\n            depth += dict_depth(d[k])\n        return depth\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return None\n    return 1 + max([dict_depth(v) for k, v in d.items()])"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    if d == {}:\n        return 1\n    return max(dict_depth(d[k]) + 1 for k in d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    i = 0\n    while i < len(d):\n        if d[i]['depth'] > d[i]['depthNext']:\n            d[i]['depth'] = d[i]['depthNext']\n        else:\n            d[i]['depth'] += 1\n        i += 1\n    return d\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # If the index is the same as the number of rotations, return that index\n    if len(arr)==0 : \n        return 0\n    # If index is outside of the array, return -1\n    if index>=len(arr) or index<0:\n        return -1\n    # If the index is equal to 0, return -1\n    if index==0:\n        return -1\n    # If the index is less than 0, return -1\n    if index<0:\n        return -1\n    # Check if the index is in the array\n    if arr[index]>=rotations or arr[index]<=0:\n        return -1\n    # Rotation 0\n    if rotations == 0:\n        return arr[index]\n    # Rotation 1\n    if rotations == 1:\n        return arr[index]\n    # Rotation 2\n    if rotations == 2:\n        return arr[index]\n    # Rotation 3\n    if rotations == 3:\n        return arr[index]\n    # Rotation 4\n    if rotations == 4:\n        return arr[index]\n    # Rotation 5\n    if rotations == 5:\n        return arr[index]\n    # Rotation 6\n    if rotations == 6:\n        return arr[index]\n    # Rotation 7\n    if rotations == 7:\n        return arr[index]\n    # Rotation 8\n    if rotations == 8:\n        return arr[index]\n    # Rotation 9\n    if rotations == 9:\n        return arr[index]\n    # Rotation 10\n    if rotations == 10:\n        return arr[index]\n    # Rotation 11\n    if rotations == 11:\n        return arr[index]\n    # Rotation 12\n    if rotations == 12:\n        return arr[index]\n    # Rotation 13\n    if rotations == 13:\n        return arr[index]\n    # Rotation 14\n    if rotations == 14:\n        return arr[index]\n    # Rotation 15\n    if rotations == 15:\n        return arr[index]\n    # Rotation 16\n    if rotations == 16:\n        return arr[index]\n    # Rotation 17\n    if rotations == 17:\n        return arr[index]\n    # Rotation 18\n    if rotations == 18:\n        return arr[index]\n    # Rotation 19\n    if rotations == 19:\n        return arr[index]\n    # Rotation 20\n    if rotations == 20:\n        return arr[index]\n    # Rotation 21\n    if rotations == 21:\n        return arr[index]\n    # Rotation 22\n    if rotations == 22:\n        return arr[index]\n    # Rotation 23\n    if rotations == 23:\n        return arr[index]\n    # Rotation 24\n    if rotations == 24:\n        return arr[index]\n    # Rotation 25\n    if rotations == 25:\n        return arr[index]\n    # Rotation 26\n    if rotations == 26:\n        return arr[index]\n    # Rotation 27\n    if rotations == 27:\n        return arr[index]\n    # Rotation 28\n    if rotations == 28:\n        return arr[index]\n    # Rotation 29\n    if rotations == 29:\n        return arr[index]\n    # Rotation 30\n    if rotations == 30:\n        return arr[index]\n    # Rotation 31\n    if rotations == 31:\n        return arr[index]\n    # Rotation 32\n    if rotations == 32:\n        return arr[index]\n    # Rotation 33\n    if rotations == 33:\n        return arr[index]\n    # Rotation 34\n    if rotations == 34:\n        return arr[index]\n    # Rotation 35\n    if rotations == 35:\n        return arr[index]\n    # Rotation 36\n    if rotations == 36:\n        return arr[index]\n    # Rotation 37\n    if rotations == 37:\n        return arr[index]\n    # Rotation 38\n    if rotations == 38:\n        return arr[index]\n    # Rotation 39\n    if rotations == 39:\n        return arr[index]\n    # Rotation 40\n    if rotations == 40:\n        return arr[index]\n    # Rotation 41\n    if rotations == 41:\n        return arr[index]\n    # Rotation 42\n    if rotations == 42:\n        return arr[index]\n    # Rotation 43\n    if rotations == 43:\n        return arr[index]\n    # Rotation 44\n    if rotations == 44:\n        return arr[index]\n    # Rotation 45\n    if rotations == 45:\n        return arr[index]\n    # Rotation 46\n    if rotations == 46:\n        return arr[index]\n    # Rotation 47\n    if rotations == 47:\n        return arr[index]\n    # Rotation 48\n    if rotations == 48:\n        return arr[index]\n    # Rotation 49\n    if rotations == 49:\n        return arr[index]\n    # Rotation 50\n    if rotations == 50:\n        return arr[index]\n    # Rotation 51\n    if rotations == 51:\n        return arr[index]\n    # Rotation 52\n    if rotations == 52:\n        return arr[index]\n    # Rotation 53\n    if rotations == 53:\n        return arr[index]\n    # Rotation 54\n    if rotations == 54:\n        return arr[index]\n    # Rotation 55\n    if rotations == 55:\n        return arr[index]\n    # Rotation 56\n    if rotations == 56:\n        return arr[index]\n    # Rotation 57\n    if rotations == 57:\n        return arr[index]\n    # Rotation 58\n    if rotations == 58:\n        return arr[index]\n    # Rotation 59\n    if rotations == 59:\n        return arr[index]\n    # Rotation 60\n    if rotations == 60:\n        return arr[index]\n    # Rotation 61\n    if rotations == 61:\n        return arr[index]\n    # Rotation 62\n    if rotations == 62:\n        return arr[index]\n    # Rotation 63\n    if rotations == 63:\n        return arr[index]\n    # Rotation 64\n    if rotations == 64:\n        return arr[index]\n    # Rotation 65\n    if rotations == 65:\n        return arr[index]\n    # Rotation 66\n    if rotations == 66:\n        return arr[index]\n    # Rotation 67\n    if rotations == 67:\n        return arr[index]\n    # Rotation 68\n    if rotations == 68:\n        return arr[index]\n    # Rotation 69\n    if rotations == 69:\n        return arr[index]\n    # Rotation 70\n    if rotations == 70:\n        return arr[index]\n    # Rotation 71\n    if rotations == 71:\n        return arr[index]\n    # Rotation 72\n    if rotations == 72:\n        return arr[index]\n    # Rotation 73\n    if rotations == 73:\n        return arr[index]\n    # Rotation 74\n    if rotations == 74:\n        return arr[index]\n    # Rotation 75\n    if rotations == 75:\n        return arr[index]\n    # Rotation 76\n    if rotations == 76:\n        return arr[index]\n    # Rotation 77\n    if rotations == 77:\n        return arr[index]\n    # Rotation 78\n    if rotations == 78:\n        return arr[index]\n    # Rotation 79\n    if rotations == 79:\n        return arr[index]\n    # Rotation 80\n    if rotations == 80:\n        return arr[index]\n    # Rotation 81\n    if rotations == 81:\n        return arr[index]\n    # Rotation 82\n    if rotations == 82:\n        return arr[index]\n    # Rotation 83\n    if rotations == 83:\n        return arr[index]\n    # Rotation 84\n    if rotations == 84:\n        return arr[index]\n    # Rotation 85\n    if rotations == 85:\n        return arr[index]\n    # Rotation 86\n    if rotations == 86:\n        return arr[index]\n    # Rotation 87\n    if rotations == 87:\n        return arr[index"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)-ranges[index]) :\n        if arr[i] <= ranges[index] :\n            ranges[index] = arr[i]\n            index = index -1\n        else :\n            index = index +1\n    \n    return ranges, index\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(ranges) == 0 :\n        return arr[index]\n    else :\n        return find_Element(arr,ranges[1:],rotations+1,index+ranges[0])\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Number of rotations\n    num_rotations = ranges[index]\n    \n    # Number of rotations\n    num_rotations = num_rotations * (num_rotations - 1) // 2\n    \n    # Rotations\n    rotations = rotations[index]\n    \n    # Element at index\n    for i in range(num_rotations) :\n        for j in range(len(arr)):\n            if j == index :\n                return arr[j]\n    \n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[index%len(arr)]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        for j in range(len(arr)) :\n            if arr[i][j] == ranges[rotations][0] :\n                index = i\n                break\n    if index == -1 :\n        return -1\n    else :\n        for i in range(len(arr)) :\n            if arr[i][index] == ranges[rotations][1] :\n                index = i\n                break\n    if index == -1 :\n        return -1\n    else :\n        for i in range(len(arr)) :\n            if arr[index][i] == ranges[rotations][2] :\n                index = i\n                break\n    return index\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (index<len(ranges)) :\n        return arr[index]\n    else :\n        return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # loop over the given range, rotated in the index\n    for i in range(rotations) :\n        # loop over the ranges\n        for j in range(ranges) :\n            # check whether this index is in the array\n            if (index >= ranges[i] and index < ranges[i+1]) :\n                # return the number at that index\n                return arr[index]\n    # nothing is found\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(rotations>0):\n        rotations=rotations-1\n        if(index<0):\n            index=0\n        else:\n            index=index\n        find=arr[index]\n    else:\n        rotations=rotations\n        if(index<0):\n            index=0\n        else:\n            index=index\n        find=arr[index]\n    return find\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if ranges[i][0] < index < ranges[i][1] :\n            return arr[ranges[i][0]:ranges[i][1]]\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # convert list to string\n    word_string =''.join(words)\n    # print(word_string)\n    # pattern = r'\\b[p]\\b'\n    # pattern = r'\\b(p)\\b'\n    # pattern = r'\\b[p]\\b'\n    # pattern = r'\\b(p)\\b'\n    # pattern = r'\\b[p]\\b'\n    # pattern = r'\\b(p) \\b'\n    # pattern = r'\\b(p) \\b'\n    # pattern = r'\\b(p)\\b'\n    # pattern = r'\\b(p)\\b'\n    # pattern = r'\\b(p) \\b'\n    pattern = r'\\b(p) \\b'\n    pattern = r'\\b(p)\\b'\n    match_obj = re.search(pattern,word_string)\n    # print(match_obj.group())\n    # return match_obj.group()\n    # print(match_obj.group(1))\n    if(match_obj):\n        return (match_obj.group(1))\n    else:\n        return (\"No word starts with 'p'.\")\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = 'p'\n    return p,words.index(p)\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    index = 0\n    output = []\n    while index < len(words):\n        if words[index].startswith('p'):\n            output.append(words[index])\n            index += 1\n        else:\n            index += 1\n            break\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    try:\n        p=str(input(\"Please enter a p: \"))\n        p=p.upper()\n        if p==\"P\":\n            print(\"You entered P\")\n        else:\n            print(\"You entered not P\")\n    except ValueError:\n        print(\"invalid input!\")\n    else:\n        try:\n            a=str(input(\"Please enter a word: \"))\n            a=a.upper()\n            if a==\"BONUS\":\n                print(\"You entered BONUS\")\n            elif a==\"BONUSES\":\n                print(\"You entered BONUSES\")\n            elif a==\"BUGS\":\n                print(\"You entered BUGS\")\n            else:\n                print(\"You entered not BONUS\")\n        except ValueError:\n            print(\"invalid input!\")\n    \nstart_withp(words)"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word, 'p'\n    return None, None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    index=0\n    while index<len(words):\n        if words[index][0]=='p':\n            index+=1\n        else:\n            return words[index],words[index][0]\n    return 'no','no'\n    \n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word[1], word[2]\n    else:\n        return 'None'\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return (words[0].strip('p'))\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    i=0\n    while i<len(words):\n        if words[i]=='p':\n            break\n        i+=1\n    return words[i:len(words)], words[0:i]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p')\n    return pattern.search(words)\ndef start_withp2(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' or 'l'.\n    '''\n    pattern = re.compile('^p')\n    pattern2 = re.compile('^l')\n    return pattern.search(words) or pattern2.search(words)\ndef start_withp3(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' or 'l' or 'u'.\n    '''\n    pattern = re.compile('^p')\n    pattern2 = re.compile('^l')\n    pattern3 = re.compile('^u')\n    return pattern.search(words) or pattern2.search(words) or pattern3.search(words)\ndef start_withp4(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' or 'l' or 'u' or 'd'.\n    '''\n    pattern = re.compile('^p')\n    pattern2 = re.compile('^l')\n    pattern3 = re.compile('^u')\n    pattern4 = re.compile('^d')\n    return pattern.search(words) or pattern2.search(words) or pattern3.search(words) or pattern4.search(words)\ndef start_withp5(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' or 'l' or 'u' or 'd' or's'.\n    '''\n    pattern = re.compile('^p')\n    pattern2 = re.compile('^l')\n    pattern3 = re.compile('^u')\n    pattern4 = re.compile('^d')\n    pattern5 = re.compile('^s')\n    return pattern.search(words) or pattern2.search(words) or pattern3.search(words) or pattern4.search(words) or pattern5.search(words)\ndef start_withp6(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' or 'l' or 'u' or 'd' or's' or 't'.\n    '''\n    pattern = re.compile('^p')\n    pattern2 = re.compile('^l')\n    pattern3 = re.compile('^u')\n    pattern4 = re.compile('^d')\n    pattern5 = re.compile('^s')\n    pattern6 = re.compile('^t')\n    return pattern.search(words) or pattern2.search(words) or pattern3.search(words) or pattern4.search(words) or pattern5.search(words) or pattern6.search(words)\ndef start_withp7(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' or 'l' or 'u' or 'd' or's' or 't' or 'e'.\n    '''\n    pattern = re.compile('^p')\n    pattern2 = re.compile('^l')\n    pattern3 = re.compile('^u')\n    pattern4 = re.compile('^d')\n    pattern5 = re.compile('^s')\n    pattern6 = re.compile('^t')\n    pattern7 = re.compile('^e')\n    return pattern.search(words) or pattern2.search(words) or pattern3.search(words) or pattern4.search(words) or pattern5.search(words) or pattern6.search(words) or pattern7.search(words)\ndef start_withp8(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' or 'l' or 'u' or 'd' or's' or 't' or 'e' or 'r'.\n    '''\n    pattern = re.compile('^p')\n    pattern2 = re.compile('^l')\n    pattern3 = re.compile('^u')\n    pattern4 = re.compile('^d')\n    pattern5 = re.compile('^s')\n    pattern6 = re.compile('^t')\n    pattern7 = re.compile('^e')\n    pattern8 = re.compile('^r')\n    return pattern.search(words) or pattern2.search(words) or pattern3.search(words) or pattern4.search(words) or pattern5.search(words) or pattern6.search(words) or pattern7.search(words) or pattern8.search(words)\ndef start_withp9(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' or 'l' or 'u' or 'd' or's' or 't' or 'e' or 'r' or 'f'.\n    '''\n    pattern = re.compile('^p')\n    pattern2 = re.compile('^l')\n    pattern3 = re.compile('^u')\n    pattern4 = re.compile('^d')\n    pattern5 = re.compile('^s')\n    pattern6 = re.compile('^t')\n    pattern7 = re.compile('^e')\n    pattern8 = re.compile('^r')\n    pattern9 = re.compile('^f')\n    return pattern.search(words) or pattern2.search(words) or pattern3.search(words) or pattern4.search(words) or pattern5.search(words) or pattern6.search(words) or pattern7.search(words) or pattern8.search(words) or pattern9.search(words)\ndef start_withp10(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' or 'l' or 'u' or 'd' or's' or 't' or 'e' or 'r' or 'f' or 'g'.\n    '''\n    pattern = re.compile('^p')\n    pattern2 = re.compile('^l')\n    pattern3 = re.compile('^u')\n    pattern4 = re.compile('^d')\n    pattern5 = re.compile('^s')\n    pattern6 = re.compile('^t')\n    pattern7 = re.compile('^e')\n    pattern8 = re.compile('^r')\n    pattern9 = re.compile('^f')\n    pattern10 = re.compile('^g')\n    return pattern.search(words) or pattern2.search(words) or pattern3.search(words) or pattern4.search(words) or pattern5.search(words) or pattern6.search(words) or pattern7.search(words) or pattern8.search(words) or pattern9.search(words) or pattern10.search(words)\ndef start_withp11(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' or 'l' or 'u' or 'd' or's' or 't' or 'e' or 'r' or 'f' or 'g' or 'h'.\n    '''\n    pattern = re.compile('^p')\n    pattern2 = re.compile('^l')\n    pattern3 = re.compile('^u')\n    pattern4 = re.compile('^d')\n    pattern5 = re.compile('^s')\n    pattern6 = re.compile('^t')\n    pattern7 = re.compile('^e')\n    pattern8 = re.compile('^r')\n    pattern9 = re.compile('^f')\n    pattern10 = re.compile('^g')\n    pattern11 = re.compile('^h')\n    return pattern.search(words) or pattern2.search(words) or pattern3.search(words) or pattern4.search(words) or pattern5.search(words) or pattern6.search(words) or pattern7.search(words) or pattern8.search(words) or pattern9.search(words) or pattern10.search(words) or pattern11.search(words)\ndef start_withp12(words):\n    '''\n    Write a function to return two word"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Find if the given element is greater than the given kth element and then add the element to the maximum sum array\n    # If there are already less than k elements in the array then return the maximum sum\n    if index >= n:\n        return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n    if index + 1 == n:\n        return a[index]\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), a[index] + a[index + 1])\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return 0\n    if n == 0:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # init variables\n    curr_sum = 0\n    prev_sum = 0\n    curr_seq = []\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    sum_list = [0 for i in range(n+1)]\n    sum_list[0] = -1\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if a[index] == k:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    sum_list = []\n    s = 0\n    i = 0\n    \n    while i < n:\n        if i < n - 1:\n            if k > index:\n                s = max(s, a[i + 1] - a[i])\n            sum_list.append(s)\n        else:\n            sum_list.append(a[i] - a[index])\n        i += 1\n    return max(sum_list)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    l, r = 0, 0\n    sum = 0\n    while l<n and r<n:\n        if a[l]<a[r]:\n            sum += a[l]\n            l += 1\n        else:\n            sum += a[r]\n            r += 1\n    if index < l or index >= r:\n        return sum\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k) + max_sum_increasing_subseq(a, n, index, k) + a[index]\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence till the given index, which is after kth element.\n    '''\n    l, r = 0, 0\n    sum = 0\n    while l<n and r<n:\n        if a[l]<a[r]:\n            sum += a[l]\n            l += 1\n        else:\n            sum += a[r]\n            r += 1\n    if index<l:\n        return sum\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k) + max_sum_increasing_subseq(a, n, index, k) + a[index]\nn = int(input())\na = [int(x) for x in input().split()]\nk = int(input())\nprint(max_sum_increasing_subseq(a, n, 0, k)"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    pre_sum = [0 for i in range(n+1)]\n    pre_sum[0] = 1\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    index_max = index\n    \n    for i in range(index, n):\n        if a[i] > a[index_max]:\n            index_max = i\n    return index_max + k\n        \n    \ndef is_ascending(sequence, k):\n    '''\n    Write a function to test if a string is a rotation of the string in ascending order.\n    '''\n    if len(sequence) < 2:\n        return sequence == sequence[::-1]\n    \n    return sequence[0] == sequence[1] and is_ascending(sequence[1:-1], k)\n    \n    \ndef is_decreasing(sequence, k):\n    '''\n    Write a function to test if a string is a rotation of the string in decreasing order.\n    '''\n    if len(sequence) < 2:\n        return sequence == sequence[::-1]\n    \n    return sequence[0] == sequence[-1] and is_decreasing(sequence[1:-1], k)\n    \n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    '''\n    Edge Cases\n    '''\n    if index == n and k == 0:\n        return sum(a)\n    elif index == n and k > 0:\n        return 0\n    \n    elif index == 0 and k == 0:\n        return sum(a[:len(a) -1])\n    \n    elif index == 0:\n        return sum(a[:len(a) - k])\n    \n    elif index >= 0:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # define a tuple\n    a = (tuplex[0],tuplex[1])\n    # check if it's a tuple\n    if type(tuplex[0])==int or type(tuplex[0])==float:\n        m=tuplex[0]\n        n=tuplex[1]\n    # if it's not a tuple, then return an empty tuple\n    else:\n        return (tuplex[0],tuplex[1])\n    # check if it's a valid tuple\n    if type(m)==int or type(m)==float:\n        m=m\n        n=n\n    # if it's a tuple, check if it's a tuple\n    if type(n)==int or type(n)==float:\n        n=n\n        m=m\n    return m,n\ndef cross(a,b):\n    '''\n    Takes two pairs of numbers and returns them\n    '''\n    return (a[1]*b[0]-a[0]*b[1],a[0]*b[1]-a[0]*b[0])\ndef square(a):\n    '''\n    Takes two numbers and returns the square of them\n    '''\n    return (a[0]*a[0] + a[1]*a[1])\ndef sub_tuplex(tuplex,m,n):\n    '''\n    Takes a tuple and two numbers and returns\n    the subtraction of those numbers\n    '''\n    return ((tuplex[1] - tuplex[0])/2, tuplex[0] - m)\ndef mul_tuplex(tuplex,m,n):\n    '''\n    Takes a tuple and two numbers and returns\n    the multiplication of those numbers\n    '''\n    return (m*tuplex[0],tuplex[0]*m)\ndef div_tuplex(tuplex,m,n):\n    '''\n    Takes a tuple and two numbers and returns\n    the division of those numbers\n    '''\n    return ((tuplex[1] - tuplex[0])/2, tuplex[0]/m)\ndef add(a,b):\n    '''\n    Takes two tuples and returns the sum\n    '''\n    return (a[0]+b[0],a[1]+b[1])\ndef eq(a,b):\n    '''\n    Takes two tuples and returns a boolean\n    '''\n    return (a==b)\ndef num_tuplex(a,b):\n    '''\n    Takes two tuples and returns\n    the number of elements in that\n    tuple\n    '''\n    return len(a)\ndef div_tuplex(a,b):\n    '''\n    Takes two tuples and returns\n    the divison of those numbers\n    '''\n    return ((a[0]/b[0])*(a[1]/b[1]),a[0]/b[0]*a[1])\ndef mul_tuplex(a,b):\n    '''\n    Takes two tuples and returns\n    the product of those numbers\n    '''\n    return ((a[0]*b[0])*(a[1]*b[1]),a[0]*b[0]*a[1])\ndef sub_tuplex(a,b):\n    '''\n    Takes two tuples and returns\n    the subtraction of those numbers\n    '''\n    return ((a[0] - b[0])/2,a[1] - b[1])\ndef div_tuplex(a,b):\n    '''\n    Takes two tuples and returns\n    the division of those numbers\n    '''\n    return ((a[0]/b[0])*(a[1]/b[1]),a[0]/b[0]*a[1])\ndef elem_tuplex(a,b):\n    '''\n    Takes two tuples and returns\n    the element of those numbers\n    '''\n    return (a[0]*b[0] + a[1]*b[1])\ndef mul_tuplex(a,b):\n    '''\n    Takes two tuples and returns\n    the multiplication of those numbers\n    '''\n    return (a[0]*b[0],a[1]*b[1])\ndef div_tuplex(a,b):\n    '''\n    Takes two tuples and returns\n    the division of those numbers\n    '''\n    return (a[0]*b[0]/2,a[1]/b[1]/2)\ndef new_tuplex(a,b):\n    '''\n    Takes two tuples and returns\n    the multiplication of those numbers\n    '''\n    return (a[0]*b[0]*a[1]+b[0]*a[1],a[0]*b[1]*a[1]+b[1]*a[1])\ndef sort_tuplex(tuplex):\n    '''\n    Takes a tuple and sorts it\n    '''\n    sorted_tuplex = sorted(tuplex)\n    return sorted_tuplex\ndef cmp_tuplex(a,b):\n    '''\n    Takes two tuples and returns\n    the comparison of those numbers\n    '''\n    return (a[0] - b[0])\ndef cmp_tuplex_operator(a,b):\n    '''\n    Takes two tuples and returns\n    the comparison of those numbers\n    '''\n    return (a[0] - b[0]*(a[1] - b[1])/a[1] )\ndef find_tuplex(x,tuplex):\n    '''\n    Finds the tuple of the\n    maximum element in the tuple\n    '''\n    for i in range(len(tuplex)):\n        if(tuplex[i][0] == x):\n            return i\n    return -1\ndef min_tuplex(tuplex):\n    '''\n    Finds the tuple of the\n    minimum element in the tuple\n    '''\n    for i in range(len(tuplex)):\n        if(tuplex[i][0] == -1):\n            return i\n    return -1\ndef max_tuplex(tuplex):\n    '''\n    Finds the tuple of the\n    maximum element in the tuple\n    '''\n    for i in range(len(tuplex)):\n        if(tuplex[i][0] == 1):\n            return i\n    return -1\ndef mul_tuplex_operator(a,b):\n    '''\n    Returns the multiplication of\n    two tuples\n    '''\n    return (a[0]*b[0])*(a[1]*b[1])\ndef eq_tuplex(a,b):\n    '''\n    Returns True if the\n    tuples are equal\n    '''\n    return (a[0] == b[0]) and (a[1] == b[1])\ndef eq_tuplex_operator(a,b):\n    '''\n    Returns True if the\n    tuples are equal\n    '''\n    return (a[0] == b[0]*(a[1] - b[1])) and (a[1] == b[1]*(a[0] - b[0]))\ndef div_tuplex_operator(a,b):\n    '''\n    Returns the division of\n    two tuples\n    '''\n    return (a[0]/b[0],a[1]/b[1])\ndef mul_tuplex_operator(a,b):\n    '''\n    Returns the multiplication of\n    two tuples\n    '''\n    return (a[0]*b[0],a[1]*b[1])\ndef div_tuplex_operator(a,b):\n    '''\n    Returns the division of\n    two tuples\n    '''\n    return (a[0]*b[0]/2,a[1]/b[1]/2)\ndef num_tuplex_operator(a,b):\n    '''\n    Returns the number of elements in a\n    tuple\n    '''\n    return len(a)\ndef nu"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a copy of the tuple\n    colon_tuplex = deepcopy(tuplex)\n    # if the list is empty, set it to 0, create a 0,\n    if len(colon_tuplex) == 0:\n        colon_tuplex = (0,0,0,0,0,0)\n    # get the columns of the tuple\n    colon_tuplex[2] = m\n    colon_tuplex[3] = n\n    # get the last column of the tuple\n    colon_tuplex[0] = colon_tuplex[0] + colon_tuplex[2]\n    colon_tuplex[1] = colon_tuplex[1] + colon_tuplex[3]\n    return colon_tuplex\n    \ndef scan_colon_tuplex(tuplex,m,n):\n    '''\n    Write a function that returns the column number of the colon of a tuple.\n    '''\n    colon_tuplex = colon_tuplex(tuplex,m,n)\n    # get the first column of the tuple\n    colon_tuplex[0] = colon_tuplex[0] - m + 1\n    # get the second column of the tuple\n    colon_tuplex[1] = colon_tuplex[1] - n + 1\n    return colon_tuplex\n    \ndef dutch_pigeon(m,n):\n    '''\n    Write a function that gets the top row of the table and the left columns.\n    '''\n    # define the list\n    colon_tuplex = [(0,0,0,0,0,0)]\n    # add the colon\n    colon_tuplex = colon_tuplex + colon_tuplex[0]\n    # loop through each column\n    for i in range(1,10):\n        colon_tuplex[i] = colon_tuplex[i-1] + colon_tuplex[i]\n    return colon_tuplex\n    \ndef merge_table(table,table2,column_row):\n    '''\n    Write a function that combines two tables into one.\n    '''\n    # get the first column of the table\n    table[column_row[0]] = table[column_row[0]] + table2[column_row[2]]\n    # get the second column of the table\n    table[column_row[1]] = table[column_row[1]] + table2[column_row[3]]\n    return table\n    \ndef min_colon_tuplex(table,column_row):\n    '''\n    Write a function that returns the minimum column number of a tuple.\n    '''\n    min_colon_tuplex = column_row[0]\n    # get the min_colon_tuplex\n    for i in range(len(column_row)):\n        if column_row[i] < min_colon_tuplex:\n            min_colon_tuplex = column_row[i]\n    # return the minimum column number\n    return min_colon_tuplex\n    \ndef max_colon_tuplex(table,column_row):\n    '''\n    Write a function that returns the maximum column number of a tuple.\n    '''\n    max_colon_tuplex = column_row[0]\n    # get the max_colon_tuplex\n    for i in range(len(column_row)):\n        if column_row[i] > max_colon_tuplex:\n            max_colon_tuplex = column_row[i]\n    # return the maximum column number\n    return max_colon_tuplex\n    \ndef save_table(table,filename):\n    '''\n    Write a function that saves a table to a file.\n    '''\n    # create a file named as the filename\n    file = open(filename,'w')\n    # write the table to the file\n    for row in table:\n        for i in row:\n            file.write(str(i) +'')\n        file.write('\\n')\n    # close the file\n    file.close()\n    # return the name of the file\n    return filename\n    \ndef read_table(filename):\n    '''\n    Write a function that reads a table from a file.\n    '''\n    # create a file named as the filename\n    file = open(filename,'r')\n    # get the table\n    table = []\n    # loop through the file\n    for row in file:\n        # remove the leading and trailing spaces from row\n        row = row.strip()\n        # split the row on spaces\n        row = row.split(' ')\n        # get the column number\n        row[0] = row[0][1:]\n        # insert the row into the table\n        table.append(row)\n    # close the file\n    file.close()\n    # return the table\n    return table\n    \ndef read_table2(filename):\n    '''\n    Write a function that reads a table from a file.\n    '''\n    # create a file named as the filename\n    file = open(filename,'r')\n    # get the table\n    table = []\n    # loop through the file\n    for row in file:\n        # remove the leading and trailing spaces from row\n        row = row.strip()\n        # split the row on spaces\n        row = row.split(' ')\n        # get the columns\n        col = []\n        for i in range(len(row)):\n            col.append(row[i])\n        # append the row to the table\n        table.append(col)\n    # close the file\n    file.close()\n    # return the table\n    return table\n    \ndef read_table3(filename):\n    '''\n    Write a function that reads a table from a file.\n    '''\n    # create a file named as the filename\n    file = open(filename,'r')\n    # get the table\n    table = []\n    # loop through the file\n    for row in file:\n        # remove the leading and trailing spaces from row\n        row = row.strip()\n        # split the row on spaces\n        row = row.split(' ')\n        # get the columns\n        col = []\n        for i in range(len(row)):\n            col.append(row[i])\n        # insert the row into the table\n        table.append(col)\n    # close the file\n    file.close()\n    # return the table\n    return table\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[0],m[0],tuplex[1],m[1],tuplex[2],m[2],tuplex[3],m[3],tuplex[4],m[4],tuplex[5],m[5],tuplex[6],m[6],tuplex[7],m[7],tuplex[8],m[8],tuplex[9],m[9],tuplex[10])\n    \ndef row_tuplex(row,m,n):\n    '''\n    Write a function to get a row of a tuple.\n    '''\n    return (row[0],row[1],m[0],row[2],m[1],row[3],m[2],row[4],m[3],row[5],m[4],row[6],m[5],row[7],m[6],row[8],m[7],row[9],m[8],row[10],m[9],row[11],m[10],row[12],m[11],row[13],m[12],row[14],m[13],row[15],m[14],row[16],m[15],row[17],m[16],row[18],m[17],row[19],m[18],row[20],m[19],row[21])\n    \ndef col_tuplex(col,m,n):\n    '''\n    Write a function to get a col of a tuple.\n    '''\n    return (col[0],col[1],m[0],col[2],m[1],col[3],m[2],col[4],m[3],col[5],m[4],col[6],m[5],col[7],m[6],col[8],m[7],col[9],m[8],col[10],m[9],col[11],m[10],col[12],m[11],col[13],m[12],col[14],m[13],col[15],m[14],col[16],m[15],col[17],m[16],col[18],m[17],col[19],m[18],col[20],m[19],col[21],m[20],col[22],m[21],col[23],m[22],col[24],m[23],col[25],m[24],col[26],m[25],col[27],m[26],col[28],m[27],col[29],m[28],col[30],m[29],col[31],m[30],col[32],m[31],col[33],m[32],col[34],m[33],col[35],m[34],col[36],m[35],col[37],m[36],col[38],m[37],col[39],m[38],col[40],m[39],col[41],m[40],col[42],m[41],col[43],m[42],col[44],m[43],col[45],m[44],col[46],m[45],col[47],m[46],col[48],m[47],col[49],m[48],col[50],m[49],col[51],m[50],col[52],m[51],col[53],m[52],col[54],m[53],col[55],m[54],col[56],m[55],col[57],m[56],col[58],m[57],col[59],m[58],col[60],m[59],col[61],m[60],col[62],m[61],col[63],m[62],col[64],m[63],col[65],m[64],col[66],m[65],col[67],m[66],col[68],m[67],col[69],m[68],col[70],m[69],col[71],m[70],col[72],m[71],col[73],m[72],col[74],m[73],col[75],m[74],col[76],m[75],col[77],m[76],col[78],m[77],col[79],m[78],col[80],m[79],col[81],m[80],col[82],m[81],col[83],m[82],col[84],m[83],col[85],m[84],col[86],m[85],col[87],m[86],col[88],m[87],col[89],m[88],col[90],m[89],col[91],m[90],col[92],m[91],col[93],m[92],col[94],m[93],col[95],m[94],col[96],m[95],col[97],m[96],col[98],m[97],col[99],m[98],col[100],m[99],col[101],m[100],col[102],m[101],col[103],m[102],col[104],m[103],col[105],m[104],col[106],m[105],col[107],m[106],col[108],m[107],col[109],m[108],col[110],m[109],col[111],m[110],col[112],m[111],col[113],m[112],col[114],m[113],col[115],m[114],col[116],m[115],col[117],m[116],col[119],m[117],col[120],m[119],col[121],m[120],col[122],m[121],col[123],m[122],col[125],m[123],col[126],m[125],col[127],m[126],col[128],m[127],col[129],m[128],col[130],m[129],col[131],m[130],col[132],m[131],col[133],m[132],col[134],m[133],col[135],m[134],col[136],m[135],col[137],m[136],col[138],m[137],col[139],m[138],col[140],m[139],col[141],m[140],col[142],m[141],col[143],m[142],col[145],m[143],col[146],m[145],col[147],m[146],col[148],m[147],col[149],m[148],col[150],m[149],col[151],m[150],col[152],m[151],col[153],m[152],col[154],m[153],col[155],m[154],col[156],m[155],col[157],m[156],col[158],m[157],col[159],m[158],col[160],m[159],col[161],m[160],col[162],m[161],col[163],m[162],col[165],m[163],col[166],m[165],col[167],m[166],col[168],m[167],col[169],m[168],col[170],m[169],col[171],m[170],col[172],m[171],col[173],m[172],col[174],m[173],col[175],m[174],col[176],m[175],col[177],m[176],col[178],m[177],col[179],m[178],col[180],m[179],col[181],m[180],col[182],m[181],col[183],m[182],col[184],m[183],col[185],m[184],col[186],m[185],col[187],m[186],col[188],m[187],col[189],m[188],col[190],m[189],col[191],m[190],col[192],m[191],col[193],m[192],col[194],m[193],col[195],m[194],col[196],m[195],col[197],m[196],col[198],m[197],col[199],m[198],col[200],m[199],col[201],m[200],col[202],m[201],col[203],m[202],col[204],m[203],col[205],m[204],col[206],m[205],col[207],m[206],col[208],m[207],col[209],m[208],col"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_list = []\n    colon_list_2 = []\n    for i in range(m):\n        colon_list.append(tuplex[i][0])\n        colon_list_2.append(tuplex[i][1])\n    colon_list.reverse()\n    colon_list_2.reverse()\n    colon = tuple(colon_list)\n    colon_2 = tuple(colon_list_2)\n    return colon, colon_2\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)<=1:\n        if len(tuplex)==0:\n            return tuplex[0]\n        else:\n            return '('+tuplex[0]+','+tuplex[1]+')'\n    else:\n        if len(tuplex)==2:\n            if tuplex[0]=='(':\n                if tuplex[1]=='(':\n                    return colon_tuplex(tuplex[0:2],m,n)\n                else:\n                    return tuplex\n            else:\n                if tuplex[1]==')':\n                    return colon_tuplex(tuplex[0:2],m,n)\n                else:\n                    return tuplex\n        else:\n            return '('+tuplex[0]+','+tuplex[1]+','+tuplex[2]+')'\ndef head(m,n):\n    '''\n    Write a function to get the head of a tuple.\n    '''\n    if len(m)<=1:\n        if len(m)==0:\n            return m[0]\n        else:\n            return m[0]+head(m[1],n)\n    else:\n        if len(m)==2:\n            if m[0]=='(':\n                if m[1]==')':\n                    return head(m[0],n)\n                else:\n                    return '('+head(m[0],n)+')'\n            else:\n                return '('+m[0]+')'\n        else:\n            return '('+head(m[0],n)+','+head(m[1],n)+')'\ndef tail(m,n):\n    '''\n    Write a function to get the tail of a tuple.\n    '''\n    if len(m)<=1:\n        if len(m)==0:\n            return m\n        else:\n            return '('+head(m[0],n)+','+tail(m[1],n)+')'\n    else:\n        if len(m)==2:\n            if m[0]=='(':\n                if m[1]==')':\n                    return tail(m[0],n)\n                else:\n                    return tail(m[0],n)+head(m[1],n)\n            else:\n                return '('+tail(m[0],n)+')'\n        else:\n            return '('+tail(m[0],n)+','+tail(m[1],n)+')'\ndef node(m,n):\n    '''\n    Write a function to get the node of a tuple.\n    '''\n    if len(m)<=1:\n        if len(m)==0:\n            return m[0]\n        else:\n            return '('+m[0]+','+m[1]+')'\n    else:\n        if len(m)==2:\n            if m[0]=='(':\n                if m[1]==')':\n                    return node(m[0],n)\n                else:\n                    return node(m[0],n)+head(m[1],n)\n            else:\n                return '('+node(m[0],n)+','+node(m[1],n)+')'\n        else:\n            return '('+node(m[0],n)+','+node(m[1],n)+','+node(m[2],n)+')'\ndef car_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a car of a tuple.\n    '''\n    if len(m)<=1:\n        if len(m)==0:\n            return m[0]\n        else:\n            return '('+tuplex[0]+','+tuplex[1]+')'\n    else:\n        if len(m)==2:\n            if m[0]=='(':\n                if m[1]==')':\n                    return car_tuplex(tuplex[0:2],m,n)\n                else:\n                    return tuplex\n            else:\n                return '('+tuplex[0]+','+tuplex[1]+','+tuplex[2]+')'\n        else:\n            return '('+tuplex[0]+','+tuplex[1]+','+tuplex[2]+','+tuplex[3]+')'\ndef car(m,n):\n    '''\n    Write a function to get a car of a tuple.\n    '''\n    if len(m)<=1:\n        if len(m)==0:\n            return m[0]\n        else:\n            return '('+m[0]+','+m[1]+')'\n    else:\n        if len(m)==2:\n            if m[0]=='(':\n                if m[1]==')':\n                    return car(m[0],n)\n                else:\n                    return car(m[0],n)+'('+head(m[1],n)+')'\n            else:\n                return '('+car(m[0],n)+','+car(m[1],n)+')'\n        else:\n            return '('+car(m[0],n)+','+car(m[1],n)+','+car(m[2],n)+')'\ndef left_tuplex(tuplex,m,n):\n    '''\n    Write a function to get the left of a tuple.\n    '''\n    if len(m)<=1:\n        if len(m)==0:\n            return m[0]\n        else:\n            return '('+tuplex[0]+','+tuplex[1]+')'\n    else:\n        if len(m)==2:\n            if m[0]=='(':\n                if m[1]==')':\n                    return left_tuplex(tuplex[0:2],m,n)\n                else:\n                    return tuplex\n            else:\n                return '('+left_tuplex(tuplex[0:2],m,n)+','+tuplex[1]+')'\n        else:\n            return '('+left_tuplex(tuplex[0:2],m,n)+','+left_tuplex(tuplex[3:],m,n)+')'\ndef right_tuplex(tuplex,m,n):\n    '''\n    Write a function to get the right of a tuple.\n    '''\n    if len(m)<=1:\n        if len(m)==0:\n            return m[0]\n        else:\n            return '('+tuplex[0]+','+tuplex[1]+')'\n    else:\n        if len(m)==2:\n            if m[0]=='(':\n                if m[1]==')':\n                    return right_tuplex(tuplex[0:2],m,n)\n                else:\n                    return right_tuplex(tuplex[0:2],m,n)+'('+head(m[1],n)+')'\n            else:\n                return '('+right_tuplex(tuplex[0:2],m,n)+','+right_tuplex(tuplex[3:],m,n)+')'\n        else:\n            return '('+right_tuplex(tuplex[0:2],m,n)+','+right_tuplex(tuplex[3:],m,n)+','+right_tuplex(tuplex[4:],m,n)+')'\ndef left_car(m,n):\n    '''\n    Write a function to get the left of a car.\n    '''\n    if len(m)<=1:\n        if len(m)==0:\n            return m[0]\n        else:\n            return '('+m[0]+','+m[1]+')'\n    else:\n        if len(m)==2:\n            if m[0]=='(':\n                if m[1]==')':\n                    return left_car(m[0],n)\n                else:\n                    return left_car(m[0],n)+'('+head(m[1],n)+')'\n            else:\n                return '('+left_car(m[0],n)+','"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    for i in range(len(tuplex)):\n        colon.append(tuplex[i][n])\n    return colon\ndef colon_dct(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in range(len(dct)):\n        colon.append(dct[i][n])\n    return colon\ndef get_colon(dct,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef load_dct(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in range(len(dct)):\n        colon.append(dct[i][n])\n    return colon\ndef load_colon(dct,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef load_addition(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in range(len(dct)):\n        colon.append(dct[i][m])\n    return colon\ndef load_subtraction(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in range(len(dct)):\n        colon.append(dct[i][n])\n    return colon\ndef load_multiplication(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in range(len(dct)):\n        colon.append(dct[i][n])\n    return colon\ndef load_divided(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in range(len(dct)):\n        colon.append(dct[i][n])\n    return colon\ndef get_colon_test(dct,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test2(dct,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test3(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test4(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test5(dct,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test6(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test7(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test8(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test9(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test10(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test11(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test12(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test13(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test14(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test15(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test16(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test17(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test18(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test19(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test20(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test21(dct,m,n):\n    '''\n    Write a function to get a colon of a dictionary.\n    '''\n    colon=[]\n    for i in dct:\n        colon.append(i[n])\n    return colon\ndef get_colon_test22"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    m_colon=m[0][0]*n[0][0]+m[0][1]*n[1][0]+m[0][2]*n[2][0]\n    n_colon=n[0][0]*m[0][0]+n[0][1]*m[1][0]+n[0][2]*m[2][0]\n    return (m_colon,n_colon)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    '''\n    tuplex[m][n]\n    '''\n    assert n in m[m.index(tuplex[0])]\n    if m[0] in n:\n        return 0\n    else:\n        return n.index(m[0])+1\ndef vstack(tuplex):\n    '''\n    Write a function to get the vertices of a V-stack.\n    '''\n    return [[v] for v in tuplex]\ndef hstack(tuplex):\n    '''\n    Write a function to get the horizontal stack.\n    '''\n    return [[tuplex[i][j] for j in range(len(tuplex[i]))] for i in range(len(tuplex))]\ndef merge(tuplex):\n    '''\n    Write a function to merge a sequence of V-stacks together.\n    '''\n    assert len(tuplex) >= 2\n    return [[tuplex[0][0]] + tuplex[1] + [tuplex[0][-1]]] + tuplex[2:]\ndef stack_array(stack,n):\n    '''\n    Write a function to create an array of values from a stack.\n    '''\n    assert len(stack) >= n\n    return [stack[i][-1] for i in range(n)]\ndef stack_tuple(stack):\n    '''\n    Write a function to get the top element in a stack.\n    '''\n    assert len(stack) >= 1\n    return stack[-1]\ndef merge_stack(stack):\n    '''\n    Write a function to merge two stacks together.\n    '''\n    assert len(stack) >= 2\n    if len(stack[0]) == len(stack[1]):\n        return [stack[0][0]] + stack[1] + [stack[0][-1]]\n    else:\n        return [stack[0][0]] + stack[1] + stack[2:]\ndef z_stack(stack):\n    '''\n    Write a function to create a stack of values.\n    '''\n    return [z for z in stack]\ndef get_stack(stack,n):\n    '''\n    Return the n-th stack element.\n    '''\n    assert len(stack) >= n\n    return stack[-n:]\ndef get_stack_tuple(stack):\n    '''\n    Return the n-th stack element.\n    '''\n    assert len(stack) >= 1\n    return stack[-1]\ndef stack_arg_tuplex(stack,m,n):\n    '''\n    Return the n-th stack element.\n    '''\n    assert n in m\n    return stack[m.index(n)+1]\ndef pop_stack(stack):\n    '''\n    Write a function to remove the top element from a stack.\n    '''\n    assert len(stack) >= 1\n    return stack.pop()\ndef get_stack_array(stack,n):\n    '''\n    Return the n-th stack element.\n    '''\n    assert n in stack\n    return stack[n-1]\ndef get_stack_tuple_array(stack,n):\n    '''\n    Return the n-th stack element.\n    '''\n    assert n in stack\n    return stack[n-1]\ndef replace_stack(stack,tuplex):\n    '''\n    Write a function to replace the top element of a stack with the top element of the stack.\n    '''\n    assert len(stack) >= 1\n    return stack[0] + [z for z in stack[1:]]\ndef find_stack(stack,tuplex):\n    '''\n    Write a function to find the top element of a stack.\n    '''\n    assert len(stack) >= 1\n    for i in range(len(stack)):\n        for j in range(len(stack[i])):\n            if stack[i][j] in tuplex:\n                return stack[i][j]\ndef get_stack_index(stack,tuplex):\n    '''\n    Return the index of the top element in a stack.\n    '''\n    assert len(stack) >= 1\n    for i in range(len(stack)):\n        for j in range(len(stack[i])):\n            if stack[i][j] in tuplex:\n                return i\ndef stack_len(stack):\n    '''\n    Return the length of the stack.\n    '''\n    assert len(stack) >= 1\n    return len(stack)\ndef stack_index(stack,n):\n    '''\n    Return the index of the top element in a stack.\n    '''\n    assert n >= 1\n    return stack[n-1][-1]\ndef stack_slice(stack):\n    '''\n    Return the stack sliced from the top element to the top element.\n    '''\n    assert len(stack) >= 1\n    return stack[len(stack)-1:]\ndef stack_diff(stack1,stack2):\n    '''\n    Return the difference between two stacks.\n    '''\n    assert len(stack1) >= len(stack2)\n    assert len(stack1) >= 1\n    assert len(stack2) >= 1\n    return stack1[-1] - stack2[-1]\ndef stack_extend(stack,n):\n    '''\n    Write a function to extend a stack.\n    '''\n    assert n >= 1\n    assert len(stack) >= 1\n    for i in range(len(stack)):\n        stack[i] += [z for z in stack[i]]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return [tuplex[i] for i in range(m,n)]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = tuple()\n    m_new = m.copy()\n    n_new = n.copy()\n    m_new.append('')\n    n_new.append('')\n    tuplex_t = list(tuplex)\n    for i in range(0,len(tuplex_t)):\n        tuplex_t[i] = tuplex_t[i].replace('(', '')\n        tuplex_t[i] = tuplex_t[i].replace(')','')\n    for i in range(0,len(tuplex_t)):\n        if tuplex_t[i] =='':\n            tuplex_t[i] = ','\n    \n    for i in range(0,len(tuplex_t)):\n        m_new[i] = tuplex_t[i]\n    m_new[len(tuplex_t)] = ','\n    for i in range(len(tuplex_t), len(tuplex_t)+len(m_new)):\n        n_new[i] = ','\n    n_new[len(tuplex_t)+len(m_new)] = ','\n    for i in range(0,len(m_new)):\n        colon_tuplex.append(m_new[i]+n_new[i])\n    return colon_tuplex\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    answer=[]\n    for i in range(N):\n        if len(nums1[i])>len(nums2[i]):\n            answer+=nums1[i]\n        elif len(nums2[i])>len(nums1[i]):\n            answer+=nums2[i]\n        else:\n            answer+=nums1[i]*nums2[i]\n    return answer\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    small_nums1 = sorted(nums1)\n    small_nums2 = sorted(nums2)\n    idx = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if small_nums1[i]*small_nums2[j] > nums1[i]*nums2[j]:\n                idx = i\n                break\n    return small_nums1[idx]\n    \nprint(large_product([10,20,30,40,50], [60,70,80,90,100], N=3))\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    max_product = 0\n    output = []\n    \n    for i in range(1, N):\n        product = 1\n        \n        for j in range(1, N):\n            product *= nums1[j]\n            \n        if product > max_product:\n            max_product = product\n            \n            output = [nums1[j] for j in range(i, N)]\n    \n    return output"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Your code here\n    for i in range(N):\n        max_product = 0\n        for j in range(N):\n            if nums1[i] * nums2[j] > max_product:\n                max_product = nums1[i] * nums2[j]\n        nums1[i] = max_product\n    return nums1"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    ans = [None] * N\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # create an empty list to save the largest products\n    list_of_products = []\n    # iterate over the list of products from each list and append it to list_of_products\n    for i in range(N):\n        for j in range(N):\n            list_of_products.append(nums1[i]*nums2[j])\n    # find the largest product from the list and append it to the list_of_products\n    return max(list_of_products)\n    \n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 1\n    for i in range(1,N+1):\n        for j in range(1,i):\n            if nums1[i-1] * nums2[j-1] > max_product:\n                max_product = nums1[i-1] * nums2[j-1]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 1:\n        return nums1,nums2\n    else:\n        a = large_product(nums1,nums2,N//2)\n        b = large_product(nums1,nums2,N//2)\n        return a[0] * b[0] + a[1] * b[1],a[0] * b[1] + a[1] * b[0]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize result to be 0\n    result = 0\n    # Initialize the factors for each list, as a list of unique numbers\n    factors = list(set(nums1 + nums2))\n    \n    # For each factor in list, find the largest product of two lists\n    for factor in factors:\n        result += max([nums1[i] * nums2[i] for i in range(N) if nums1[i] % factor == 0 and nums2[i] % factor == 0])\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    sorted_nums1 = sorted(nums1)\n    sorted_nums2 = sorted(nums2)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        print(\"Wrong input format\")\n        return\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n        \ndef division(a,b):   \n    '''\n    Write a python function to find the division of two numbers.\n    '''\n    if a == b:\n        return 0\n    else:\n        return a/b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return b\n    elif a>b:\n        return a\n    else:\n        return \"Invalid Input\"\nprint(maximum(4,6))\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        a,b = b,a\n    return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # Write your code here\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a) is not int or type(b) is not int:\n        raise TypeError(\"Input must be an integer\")\n    elif a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return a\n    #Write an expression that returns the max of 2 integers"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Your code here\n    tuple_to_string = list()\n    for char in str1:\n        tuple_to_string.append(char)\n    return tuple(tuple_to_string)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    string_list = list(str1)\n    return tuple(string_list)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.split()\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    char_list = list(str1)\n    for i in range(0,len(char_list)):\n        if char_list[i] =='':\n            char_list[i] = '+'\n    return tuple(char_list)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuples = []\n    if str1:\n        for i in range(len(str1)):\n            tuples.append(chr(ord(str1[i]) + ord('A')))\n        return tuples\n    else:\n        return tuples\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    result = tuple(str1)\n    return result\n    \ndef test():\n    # fruit = \"apple\"\n    # print(fruit[0])\n    # print(fruit[-1])\n    # print(fruit[-2])\n    # print(fruit[-3])\n    # print(fruit[-4])\n    # print(fruit[-5])\n    # print(fruit[-6])\n    # print(fruit[-7])\n    # print(fruit[-8])\n    # print(fruit[-9])\n    # print(fruit[-10])\n    # print(fruit[-11])\n    # print(fruit[-12])\n    # print(fruit[-13])\n    # print(fruit[-14])\n    # print(fruit[-15])\n    # print(fruit[-16])\n    # print(fruit[-17])\n    # print(fruit[-18])\n    # print(fruit[-19])\n    # print(fruit[-20])\n    # print(fruit[-21])\n    # print(fruit[-22])\n    # print(fruit[-23])\n    # print(fruit[-24])\n    # print(fruit[-25])\n    # print(fruit[-26])\n    # print(fruit[-27])\n    # print(fruit[-28])\n    # print(fruit[-29])\n    # print(fruit[-30])\n    # print(fruit[-31])\n    # print(fruit[-32])\n    # print(fruit[-33])\n    # print(fruit[-34])\n    # print(fruit[-35])\n    # print(fruit[-36])\n    # print(fruit[-37])\n    # print(fruit[-38])\n    # print(fruit[-39])\n    # print(fruit[-40])\n    # print(fruit[-41])\n    # print(fruit[-42])\n    # print(fruit[-43])\n    # print(fruit[-44])\n    # print(fruit[-45])\n    # print(fruit[-46])\n    # print(fruit[-47])\n    # print(fruit[-48])\n    # print(fruit[-49])\n    # print(fruit[-50])\n    # print(fruit[-51])\n    # print(fruit[-52])\n    # print(fruit[-53])\n    # print(fruit[-54])\n    # print(fruit[-55])\n    # print(fruit[-56])\n    # print(fruit[-57])\n    # print(fruit[-58])\n    # print(fruit[-59])\n    # print(fruit[-60])\n    # print(fruit[-61])\n    # print(fruit[-62])\n    # print(fruit[-63])\n    # print(fruit[-64])\n    # print(fruit[-65])\n    # print(fruit[-66])\n    # print(fruit[-67])\n    # print(fruit[-68])\n    # print(fruit[-69])\n    # print(fruit[-70])\n    # print(fruit[-71])\n    # print(fruit[-72])\n    # print(fruit[-73])\n    # print(fruit[-74])\n    # print(fruit[-75])\n    # print(fruit[-76])\n    # print(fruit[-77])\n    # print(fruit[-78])\n    # print(fruit[-79])\n    # print(fruit[-80])\n    # print(fruit[-81])\n    # print(fruit[-82])\n    # print(fruit[-83])\n    # print(fruit[-84])\n    # print(fruit[-85])\n    # print(fruit[-86])\n    # print(fruit[-87])\n    # print(fruit[-88])\n    # print(fruit[-89])\n    # print(fruit[-90])\n    # print(fruit[-91])\n    # print(fruit[-92])\n    # print(fruit[-93])\n    # print(fruit[-94])\n    # print(fruit[-95])\n    # print(fruit[-96])\n    # print(fruit[-97])\n    # print(fruit[-98])\n    # print(fruit[-99])\n    # print(fruit[-100])\n    # print(fruit[-101])\n    # print(fruit[-102])\n    # print(fruit[-103])\n    # print(fruit[-104])\n    # print(fruit[-105])\n    # print(fruit[-106])\n    # print(fruit[-107])\n    # print(fruit[-108])\n    # print(fruit[-109])\n    # print(fruit[-110])\n    # print(fruit[-111])\n    # print(fruit[-112])\n    # print(fruit[-113])\n    # print(fruit[-114])\n    # print(fruit[-115])\n    # print(fruit[-116])\n    # print(fruit[-117])\n    # print(fruit[-118])\n    # print(fruit[-119])\n    # print(fruit[-120])\n    # print(fruit[-121])\n    # print(fruit[-122])\n    # print(fruit[-123])\n    # print(fruit[-124])\n    # print(fruit[-125])\n    # print(fruit[-126])\n    # print(fruit[-127])\n    # print(fruit[-128])\n    # print(fruit[-129])\n    # print(fruit[-130])\n    # print(fruit[-131])\n    # print(fruit[-132])\n    # print(fruit[-133])\n    # print(fruit[-134])\n    # print(fruit[-135])\n    # print(fruit[-136])\n    # print(fruit[-137])\n    # print(fruit[-138])\n    # print(fruit[-139])\n    # print(fruit[-140])\n    # print(fruit[-141])\n    # print(fruit[-142])\n    # print(fruit[-143])\n    # print(fruit[-144])\n    # print(fruit[-145])\n    # print(fruit[-146])\n    # print(fruit[-147])\n    # print(fruit[-148])\n    # print(fruit[-149])\n    # print(fruit[-150])\n    # print(fruit[-151])\n    # print(fruit[-152])\n    # print(fruit[-153])\n    # print(fruit[-154])\n    # print(fruit[-155])\n    # print(fruit[-156])\n    # print(fruit[-157])\n    # print(fruit[-158])\n    # print(fruit[-159])\n    # print(fruit[-160])\n    # print(fruit[-161])\n    # print(fruit[-162])\n    # print(fruit[-163])\n    # print(fruit[-164])\n    # print(fruit[-165])\n    # print(fruit[-166])\n    # print(fruit[-167])\n    # print(fruit[-168])\n    # print(fruit[-169])\n    # print(fruit[-170])\n    # print(fruit[-171])\n    # print(fruit[-172])\n    # print(fruit[-173])\n    # print(fruit[-174])\n    # print(fruit[-175])\n    # print(fruit[-176])\n    # print(fruit[-177])\n    # print(fruit[-178])\n    # print(fruit[-179])\n    # print(fruit[-180])\n    # print(fruit[-181])\n    # print(fruit[-182])\n    # print(fruit[-183])\n    # print(fruit[-184])\n    # print(fruit[-185])\n    # print(fruit[-186])\n    # print(fruit[-187])\n    # print(fruit[-188])\n    # print(fruit[-189])\n    # print(fruit[-190])\n    # print(fruit[-191])\n    # print(fruit[-192])\n    # print(fruit[-193])\n    # print(fruit[-194])\n    # print(fruit[-195])\n    # print(fruit[-196])\n    # print(fruit[-197])\n    # print(fruit"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    return tuple(str1)\n    \ndef tuple_to_string(tup):\n    '''\n    Write a function to convert a given tuple of characters into a string.\n    '''\n    \n    return ''.join(tup)\n    \ndef main():\n    \n    # create a tuple from a string\n    str1 = 'Hello!'\n    print(string_to_tuple(str1))\n    \n    # convert tuple to string\n    str2 = tuple_to_string(string_to_tuple(str1))\n    print(str2)\n    \n    # create a list from a string\n    str3 = 'World'\n    print(string_to_tuple(str3))\n    print(tuple_to_string(string_to_tuple(str3)))\n    \n    # convert tuple to string\n    str4 = tuple_to_string(string_to_tuple(str3))\n    print(str4)\n    \n    # create a tuple with more than two characters\n    tup = tuple(range(10))\n    print(tuple_to_string(tup))\n    \n    # create a list with more than two characters\n    lst = list(range(10))\n    print(lst)\n    \n    # convert a tuple to string\n    str5 = tuple_to_string(tup)\n    print(str5)\n    \n    # convert a list to string\n    str6 = list_to_string(lst)\n    print(str6)\n    \nif __name__ == \"__main__\":\n    main()\n    \n'''\nThis is a test\n''"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    a = []\n    b = []\n    c = []\n    d = []\n    e = []\n    f = []\n    g = []\n    h = []\n    i = 0\n    j = 0\n    for i in range(0, len(str1)):\n        if str1[i] == \" \":\n            a.append(str1[j])\n            j += 1\n        elif str1[i] == \",\":\n            b.append(str1[j])\n            j += 1\n        elif str1[i] == \".\":\n            c.append(str1[j])\n            j += 1\n        elif str1[i] == \"?\":\n            d.append(str1[j])\n            j += 1\n        elif str1[i] == \"!\":\n            e.append(str1[j])\n            j += 1\n        elif str1[i] == \"#\":\n            f.append(str1[j])\n            j += 1\n        elif str1[i] == \"$\":\n            g.append(str1[j])\n            j += 1\n        elif str1[i] == \"%\":\n            h.append(str1[j])\n            j += 1\n        elif str1[i] == \"*\":\n            i += 1\n    return a,b,c,d,e,f,g,h,i,j"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    res = tuple(map(int, str1))\n    return res\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if str1 == '':\n        return ()\n    else:\n        return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(\"Setting left most unset bit to\", n, \"...\")\n    return(1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # write your code here\n    if n & 0b1 == 0:\n        n |= 0b1\n    elif n & 0b01 == 1:\n        n |= 0b00\n    else:\n        n |= 0b01\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n&(1<<(n.bit_length()-1))) | ((1<<(n.bit_length()-1)) - (1<<(n.bit_length()-1)))\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_next_bit(n): \n    '''\n    Write a python function to set the next bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_next_bit(n): \n    '''\n    Write a python function to set the next bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_next_bit(n): \n    '''\n    Write a python function to set the next bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_next_bit(n): \n    '''\n    Write a python function to set the next bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_next_bit(n): \n    '''\n    Write a python function to set the next bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_next_bit(n): \n    '''\n    Write a python function to set the next bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_next_bit(n): \n    '''\n    Write a python function to set the next bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    # Write your code here\n    if n == 0: \n        return 1\n    else: \n        return 0\n    \n    \n    \ndef set_right_most_set_bit(n): "
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = (1<<n) \n    return x\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = int(n)\n    # the bit is zero\n    bit = 0\n    if n & (n - 1) == 0:\n        bit = 0x01\n    # the bit is 1\n    else:\n        bit = 0x01\n    return bit\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Your code here\n    pass\n    # raise NotImplementedError\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(n):\n        if (i+1)%2==0:\n            set_bit(i,n)\n        else:\n            set_bit(i,n-1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # write your code here\n    if n == 0:\n        return n\n    elif n & 0x01:\n        return n ^ 0x80\n    else:\n        return n ^ 0x80\n    \ndef get_left_most_unset_bit(n): \n    '''\n    Write a python function to get the left most unset bit.\n    '''\n    # write your code here\n    if n == 0:\n        return n\n    elif n & 0x01:\n        return n ^ 0x80\n    else:\n        return n ^ 0x80\n    \ndef main():\n    n = int(input())\n    k = int(input())\n    \n    if n == 0:\n        print(0)\n    elif n & 0x80:\n        print(0x80)\n    else:\n        print(get_left_most_unset_bit(n))\n        \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    ## BINARY SEARCH\n    # Copy a bit into the middle of the number\n    # and set it with 1\n    # Write the bits till the bit is set to 0\n    \n    binary_search = lambda a: (a & 0xff) + ((a & 0x80) << 7) \n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 2 * math.pi * (r**2 * (h/2))\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (4 * math.pi * (r**2))\ndef volume_triangle(r,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (r**3) * (h/3)\ndef volume_square(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (r**2) * (3/4)\ndef volume_rectangle(r,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return 2*(r**2) * (3/4)\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (3/4)\ndef volume_rectangle2(r,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (r**2) * (3/4)\ndef volume_triangle2(r,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (r**3) * (h/3)\ndef volume_square2(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (r**2) * (3/4)\ndef volume_rectangle3(r,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (r**2) * (3/4)\ndef volume_circle3(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (3/4)\ndef volume_rectangle4(r,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (r**2) * (3/4)\ndef volume_circle4(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (3/4)\ndef volume_square_small(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (r**2) * (2/3)\ndef volume_square_large(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (r**2) * (2/3)\ndef volume_rectangle_small(r,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (r**2) * (2/3)\ndef volume_rectangle_large(r,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (r**2) * (2/3)\ndef volume_circle_small(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (2/3)\ndef volume_circle_large(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (2/3)\ndef volume_square_middle(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (r**2) * (1/2)\ndef volume_square_large(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (r**2) * (1/2)\ndef volume_rectangle_middle(r,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (r**2) * (1/2)\ndef volume_circle_middle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (1/2)\ndef volume_circle_small_middle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (1/2)\ndef volume_rectangle2_middle(r,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (r**2) * (1/2)\ndef volume_circle2_middle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (1/2)\ndef volume_circle2_large(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (1/2)\ndef volume_circle3_large(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (1/2)\ndef volume_circle3_small(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (1/2)\ndef volume_circle4_small(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (1/2)\ndef volume_circle2_small(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (1/2)\ndef volume_circle3_large(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (1/2)\ndef volume_square3_small(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (r**2) * (1/3)\ndef volume_square2_large(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (r**2) * (1/3)\ndef volume_square3_small(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (r**2) * (1/3)\ndef volume_rectangle3_large(r,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (r**2) * (1/3)\ndef volume_rectangle3_small(r,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (r**2) * (1/3)\ndef volume_rectangle4_small(r,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (r**2) * (1/3)\ndef volume_square_middle_large(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (r**2) * (1/4)\ndef volume_square_small_large(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (r**2) * (1/4)\ndef volume_square_small_middle(r):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return (r**2) * (1/4)\ndef volume_rectangle_middle_large(r,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (r**2) * (1/4)\ndef volume_circle_small_large(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (1/4)\ndef volume_circle_small_middle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (r**2) * (1/4)\nde"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = r*r*h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r*(r+h)**2)/4.0\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*(r**2)*h\n    return volume\n    \ndef main():\n    '''\n    Main function to run the program.\n    '''\n    try:\n        r = float(input('Enter radius of the cone: '))\n        h = float(input('Enter height of the cone: '))\n        v = volume_cone(r,h)\n        print('Volume of the cone is',v,'molecules')\n    except:\n        print('Please enter a valid number of arguments.')\n        return\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # TODO: Write a function to find the volume of a cone.\n    # The function should accept the radius of the cone and the height of the cone.\n    # The function should return the volume of the cone.\n    \n    return(4*math.pi*r*h**3)/3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4*h*math.pi*math.pow(r,3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4*math.pi*r**2*h**3/3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r**2 <= h**2:\n        return r*h*(math.pi)**2\n    elif r**2 > h**2:\n        return (r**2 - h**2)**2\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(3.14*r*h,5)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4/3) * math.pi * r * h\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = n\n    while(n):\n        if n & 1: \n            result = result * 2\n        n = n // 2\n    return result\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    list = []\n    for i in range(0,n+1):\n        if (i*i)<=n:\n            list.append(i)\n    return max(list)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    lst = []\n    lst.append(n)\n    \n    while n > 0:\n        if n%2 == 0:\n            n = n/2\n            lst.append(n)\n            lst.append(n)\n        else:\n            lst.append(n)\n            n = n*3\n            lst.append(n)\n    return max(lst)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return n\n    else:\n        lst = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n        i = 0\n        while (i < len(lst)):\n            if lst[i] < n:\n                lst[i] = lst[i] + 1\n                i = i + 1\n            else:\n                lst[i] = lst[i - 1]\n                i = i - 1\n        lst.sort()\n        print(lst)\n        return lst[-1]\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count=0\n    while n!=0:\n        if n%2==0:\n            n=n//2\n            count+=1\n        else:\n            n=n*3\n            count+=1\n    return count\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    for i in range(2, n):\n        if n%i == 0:\n            count += 1\n    if count == 0:\n        return n\n    else:\n        return -1\n    \nprint(highest_Power_of_2(1000))\nprint(highest_Power_of_2(2000))\nprint(highest_Power_of_2(1500)"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    num = n\n    max = num\n    while n!= 1:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num = 3 * num + 1\n            \n        if num > max:\n            max = num\n    print(max)\n    \ndef highest_Power_of_3(n): \n    '''\n    Write a python function that returns the highest power of 3 that is less than or equal to n.\n    '''\n    num = n\n    max = num\n    while n!= 1:\n        if num % 3 == 0:\n            num = num // 3\n        else:\n            num = 6 * num + 1\n            \n        if num > max:\n            max = num\n    print(max)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i=0\n    lst=[]\n    while(i<n):\n        lst.append(i)\n        i=i+1\n    i=0\n    while(i<len(lst)-1):\n        if(lst[i]<lst[i+1]):\n            lst[i],lst[i+1]=lst[i+1],lst[i]\n        i=i+1\n    return max(lst)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    l = 0\n    high = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            l+=1\n        if l > high:\n            high = l\n            \n    return high\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    output = 0\n    while(n>0):\n        output = output*2\n        n = n//2\n    return output\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    try: \n        return int(n**2-1)\n    except:\n        print('input must be a number')\n        exit()\n        \n    \nlucas = find_lucas(n)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n_i = 2\n    while n > n_i:\n        n_i *= 2\n    return n_i\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 2 or n == 3: return n\n    if n == 4 or n == 5: return 6\n    if n == 6 or n == 7: return 5\n    if n == 8 or n == 9: return 7\n    if n == 10 or n == 11: return 8\n    return 2 * find_lucas(n-2) + 3 * find_lucas(n-3) + 5 * find_lucas(n-4) + 6 * find_lucas(n-5) + 7 * find_lucas(n-6) + 8 * find_lucas(n-7) + 9 * find_lucas(n-8) + 10 * find_lucas(n-9) + 11 * find_lucas(n-10)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 3\n    if n == 4: return 5\n    if n == 5: return 8\n    if n == 6: return 9\n    if n == 7: return 10\n    if n == 8: return 11\n    if n == 9: return 12\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # TODO: modify your solution to return then'th Lucas number \n    # for the given number. \n    def lucas(n, d):\n        if (d == 0):\n            return n + 1\n        elif (d == 1):\n            return n - 1\n        elif (d == 2):\n            return n - 1\n        elif (d == 3):\n            return n + 1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for i in range(1,n+1):\n        if i % 2 == 1:\n            j=1\n            while i!= 1:\n                if i % 2 == 0:\n                    i = i // 2\n                else:\n                    i = i * 3 + 1\n                j = j * 2\n            if j == n:\n                return i\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = {}\n    for i in range(1, n + 1):\n        if i == 1 or i == 2:\n            lucas[i] = 1\n        elif i == 3 or i == 4:\n            lucas[i] = 2\n        elif i == 5 or i == 6:\n            lucas[i] = 3\n        elif i == 7 or i == 8:\n            lucas[i] = 4\n        elif i == 9 or i == 10:\n            lucas[i] = 5\n    return lucas[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 9\n    if n == 4:\n        return 1\n    if n == 5:\n        return 4\n    if n == 6:\n        return 9\n    if n == 7:\n        return 22\n    if n == 8:\n        return 64\n    if n == 9:\n        return 256\n    if n == 10:\n        return 10**9\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = \"\"\n    for i in string:\n        result += i\n    return list_+result\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result_list = []\n    for element in list_:\n        result_list.append(element.format(string))\n    return result_list\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i = i.strip()\n        i = i.split(' ')\n        for j in range(len(i)):\n            i[j] = i[j].replace('{', '').replace('}', '').replace('[', '').replace(']', '')\n        i[len(i)-1] = i[len(i)-1].replace('\\'', '').replace(' ', '')\n        list_.append(' '.join(i))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string == \"\":\n        return list_\n    else:\n        temp = list_\n        for i in temp:\n            i = i.replace(string, \"\")\n            i = i.strip()\n            i = i.lstrip()\n            i = i.rstrip()\n        return temp"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string_ +'' + str(i) for i in list_]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Write your code here\n    for item in list_:\n        item = item.replace('[', '')\n        item = item.replace(']', '')\n        item = item.replace(' ', '')\n        string = string.replace('[', '')\n        string = string.replace(']', '')\n        string = string.replace(' ', '')\n        list_.remove(item)\n        list_.insert(0, item)\n        print(list_)\n        print(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element.format = string.format(element.format)\n        element.data = element.data.format(element.data)\n        element.data = element.data.replace('{', '').replace('}', '')\n        element.data = element.data.replace('[', '').replace(']', '')\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        print(f'{element:>{len(str(element))}}{str(element)}')\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in string.split():\n        list_.append(i)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string in list_:\n        list_[list_.index(string)] = string\n    else:\n        list_.append(string)\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return dict(map(lambda x: (x[0], dict(map(lambda x: (x[1], x[2]), x[3].items()))), zip(l1, l2, l3)))\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #make sure that the lists are the same size.\n    if len(l1)!= len(l2):\n        return None\n    if len(l1)!= len(l3):\n        return None\n    #create a dictionary to contain the information\n    d = {}\n    for i in range(len(l1)):\n        if l1[i] not in d:\n            d[l1[i]] = {}\n            d[l1[i]][l2[i]] = l3[i]\n        else:\n            d[l1[i]][l2[i]] = l3[i]\n    #return the dictionary\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    d2 = {}\n    for i in l1:\n        d.update({i:0})\n        d2.update({i:0})\n    for i in l2:\n        d.update({i:0})\n        d2.update({i:0})\n    for i in l3:\n        d.update({i:0})\n        d2.update({i:0})\n    return d, d2\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return dict(map(lambda x: (x[0], dict(map(lambda y: (y[0], dict(map(lambda z: (z[0], z[1] + [z[2]]), l1+l2+l3))), x)), l1+l2+l3))\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    def to_dict(d):\n        for k, v in d.items():\n            if isinstance(v, dict):\n                d[k] = to_dict(v)\n            elif isinstance(v, list):\n                d[k] = [to_dict(i) for i in v]\n            else:\n                d[k] = v\n        return d\n    return to_dict(dict(zip(l1, l2)))\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for l in l2:\n        if type(l) is list:\n            d1 = convert_list_dictionary(l1, l, l3)\n            d2 = {key: value for (key, value) in d1.items() if value is not None}\n            l3.append(d2)\n        elif type(l) is dict:\n            d3 = {key: convert_list_dictionary(l1, l, l3) for key in l.keys()}\n            l3.append(d3)\n        else:\n            l3.append({l: l})\n    return l3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # l3 = list(map(lambda item: item.split('=')[1].strip(), l3))\n    # print(l3)\n    # return {i: convert_list_dictionary(item, l3[i]) for i, item in enumerate(l3)}\n    \n    return {i: {j: convert_list_dictionary(item, l3[i]) for j, item in enumerate(l3[i].split(','))} for i, l3 in enumerate(l3)}\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d1['lst'] = l1\n    d1['dict'] = l2\n    d1['list'] = l3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}; keys = None; val = None;\n    if(len(l1)!= 0 and len(l2)!= 0 and len(l3)!= 0):\n        for i in range(len(l1)):\n            if(l1[i] not in d):\n                d[l1[i]] = [];\n            d[l1[i]].append({l2[i]:l3[i]});\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_ = {}\n    for i, v in enumerate(l1):\n        dict_[i] = v\n    for i, v in enumerate(l2):\n        dict_[i] = v\n    for i, v in enumerate(l3):\n        dict_[i] = v\n    return dict_\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Write your code here. Note that the input n should be a whole integer.\n    return ((1 + (n**2))**(1/2))*(n**2)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (n*f(n))+(n*f(n/2))+(n*f(n/3))+(n*f(n/4))+(n*f(n/5))\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    sums = [0,0,0,0,0]\n    for i in range (1,n+1):\n        sums[0] = sums[0] + (i/2)\n        sums[1] = sums[1] + (i/3)\n        sums[2] = sums[2] + (i/4)\n        sums[3] = sums[3] + (i/5)\n        sums[4] = sums[4] + (i)\n    return max(sums)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 176:\n        return 176\n    if n == 177:\n        return 177\n    if n == 178:\n        return 178\n    if n == 179:\n        return 179\n    if n == 180:\n    "
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    answer = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            answer = max(answer, n // i + i * max(get_max_sum(n / i), get_max_sum(n / (i ** 2))))\n    return answer\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Find n such that n is divisible by 3\n    num_div = int(n/3)\n    # Find each remainder when n is divisible by 3\n    rem_div = []\n    for i in range(1, num_div+1):\n        rem = n%i\n        rem_div.append(rem)\n        \n    # Sum each remainder in reverse order\n    summ = 0\n    for i in range(len(rem_div)-1, -1, -1):\n        summ += rem_div[i]\n    \n    return summ\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        sum = 0\n        for i in range(1, n+1):\n            sum += (i**2)\n        return sum\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n <= 1:\n        return n\n    \n    numerator = 1\n    denominator = 1\n    \n    for i in range (2, n+1):\n        numerator = numerator * i\n        denominator = denominator * i\n    \n    return numerator + denominator * n\n    \n    \ndef test():\n    assert get_max_sum(10) == 14\n    assert get_max_sum(3) == 7\n    assert get_max_sum(4) == 9\n    assert get_max_sum(0) == 1\n    assert get_max_sum(1) == 1\n    assert get_max_sum(7) == 1\n    assert get_max_sum(18) == -1\n    assert get_max_sum(19) == 9\n    assert get_max_sum(2) == 2\n    assert get_max_sum(5) == 4\n    assert get_max_sum(4) == 3\n    assert get_max_sum(3) == 2\n    assert get_max_sum(9) == 7\n    assert get_max_sum(17) == -2\n    assert get_max_sum(51) == -3\n    assert get_max_sum(6) == 6\n    assert get_max_sum(6) == 4\n    assert get_max_sum(2) == 4\n    assert get_max_sum(5) == 6\n    assert get_max_sum(1) == 3\n    assert get_max_sum(3) == 2\n    assert get_max_sum(0) == 1\n    assert get_max_sum(1) == 1\n    assert get_max_sum(4) == 2\n    assert get_max_sum(9) == 7\n    assert get_max_sum(16) == -4\n    assert get_max_sum(18) == -9\n    assert get_max_sum(50) == -13\n    assert get_max_sum(2) == 2\n    assert get_max_sum(4) == 4\n    assert get_max_sum(4) == 4\n    assert get_max_sum(3) == 3\n    assert get_max_sum(0) == 1\n    assert get_max_sum(1) == 1\n    assert get_max_sum(2) == 2\n    assert get_max_sum(2) == 2\n    assert get_max_sum(4) == 4\n    assert get_max_sum(9) == 9\n    assert get_max_sum(16) == -2\n    assert get_max_sum(18) == -13\n    assert get_max_sum(50) == -3\n    assert get_max_sum(24) == 6\n    assert get_max_sum(60) == -13\n    assert get_max_sum(69) == -18\n    assert get_max_sum(0) == 1\n    assert get_max_sum(0) == 1\n    assert get_max_sum(0) == 1\n    assert get_max_sum(0) == 1\n    assert get_max_sum(0) == 1\n    assert get_max_sum(1) == 1\n    assert get_max_sum(2) == 2\n    assert get_max_sum(3) == 3\n    assert get_max_sum(4) == 4\n    assert get_max_sum(5) == 6\n    assert get_max_sum(9) == 16\n    assert get_max_sum(24) == -6\n    assert get_max_sum(60) == -18\n    assert get_max_sum(25) == 18\n    assert get_max_sum(50) == -9\n    assert get_max_sum(69) == -13\n    assert get_max_sum(2) == 2\n    assert get_max_sum(3) == 2\n    assert get_max_sum(5) == 6\n    assert get_max_sum(9) == 24\n    assert get_max_sum(24) == -6\n    assert get_max_sum(18) == -18\n    assert get_max_sum(49) == 49\n    assert get_max_sum(58) == -27\n    assert get_max_sum(69) == 18\n    assert get_max_sum(18) == -9\n    assert get_max_sum(18) == -9\n    assert get_max_sum(27) == 27\n    assert get_max_sum(49) == -27\n    assert get_max_sum(58) == -9\n    assert get_max_sum(72) == 72\n    assert get_max_sum(28) == 28\n    assert get_max_sum(34) == -14\n    assert get_max_sum(67) == -23\n    assert get_max_sum(59) == -42\n    assert get_max_sum(98) == -1\n    assert get_max_sum(56) == 56\n    assert get_max_sum(87) == 1\n    assert get_max_sum(6) == 4\n    assert get_max_sum(2) == 2\n    assert get_max_sum(3) == 2\n    assert get_max_sum(4) == 4\n    assert get_max_sum(5) == 4\n    assert get_max_sum(6) == 6\n    assert get_max_sum(8) == 8\n    assert get_max_sum(17) == 12\n    assert get_max_sum(55) == 55\n    assert get_max_sum(1) == 1\n    assert get_max_sum(2) == 2\n    assert get_max_sum(4) == 4\n    assert get_max_sum(9) == 9\n    assert get_max_sum(18) == -18\n    assert get_max_sum(30) == -2\n    assert get_max_sum(56) == -3\n    assert get_max_sum(3) == 2\n    assert get_max_sum(7) == 7\n    assert get_max_sum(8) == 8\n    assert get_max_sum(34) == -14\n    assert get_max_sum(5) == 5\n    assert get_max_sum(9) == -9\n    assert get_max_sum(17) == -17\n    assert get_max_sum(56) == -56\n    assert get_max_sum(3) == 3\n    assert get_max_sum(6) == 6\n    assert get_max_sum(10) == -1\n    assert get_max_sum(22) == -1\n    assert get_max_sum(49) == 49\n    assert get_max_sum(18) == -18\n    assert get_max_sum(37) == -18\n    assert get_max_sum(49) == -49\n    assert get_max_sum(0) == 1\n    assert get_max_sum(0) == 1\n    assert get_max_sum(0) == 1\n    assert get_max_sum(0) == 1\n    assert get_max_sum(0) == 1\n    assert get_max_sum(0) == 1\n    assert get_max_sum(0) == 1\n    assert get_max_sum(0) == 1\n    assert get_max_sum(0) == 1\n    assert get_max_sum(1) == 1\n    assert get_max_sum(2) == 2\n    assert get_max_sum(3) == 3\n    assert get_max_sum(4) == 4\n    assert get_max_sum(5) == 6\n    assert get_max_sum(6) == 6\n    assert get_max_sum(7) == 7\n    assert get_max_sum(8) == 8\n    assert get_max_sum(17) == -17\n    assert get_max_sum(57) == -57\n    assert get_max_sum(7) == 7\n    assert get_max_sum(9) == 9\n    assert get_max_sum(18) == -18\n    assert get_max_sum(60) == -60\n    assert get_max_sum(32) == -4\n    assert get_max_sum(34) == -2\n    assert get_max_sum(35) == -2\n    assert get_max_sum(37) == -3\n    assert get_max_sum(36) == -3"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return(\n        (f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5))\n        if (n % 2 == 0)\n        else\n        f(n / 2)\n    )\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f = lambda n: max ( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    return f(n)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    \n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = 0\n    for i in range(len(input_list)):\n        if input_list[i] > maximum:\n            maximum = input_list[i]\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return [None]\n    max_length = 0\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n    return [item for item in input_list if len(str(item)) == max_length]\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if input_list:\n        if len(input_list) > 1:\n            max_len = max(input_list)\n        else:\n            max_len = input_list[0]\n        return max_len\n    else:\n        return -1\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for ele in input_list:\n        if len(str(ele)) > max_len:\n            max_len = len(str(ele))\n            print(f'Maximum length of list: {max_len}')\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n    return max_length\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tuple = []\n    for item in test_tup:\n        if item not in unique_tuple:\n            unique_tuple.append(item)\n    return unique_tuple\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        print('False')\n        return False\n    else:\n        print('True')\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return not set(test_tup) == set(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup_list = list(test_tup)\n    tup_set = set(tup_list)\n    tup_set_not_duplicated = list(tup_set)\n    if len(tup_set_not_duplicated) == len(tup_set):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = set(test_tup)\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup[0] == test_tup[1]:\n        return \"True\"\n    else:\n        return \"False\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    check = list(test_tup)\n    if len(check) == len(set(check)):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #print(test_tup)\n    \n    distinct = set()\n    for elem in test_tup:\n        #print(elem)\n        if elem not in distinct:\n            distinct.add(elem)\n    #print(distinct)\n    return len(distinct) == 0\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if i in test_tup:\n            print('The following values are in the given tuple:', i)\n            print('All duplicates are:', i)\n            return True\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # The idea is to find the character that appears the most times, and check its position\n    # in the string and return that position\n    # i.e., the character that appears the most times (counts the occurrence of that character in the string)\n    # In case of a tie, return the letter with the highest count\n    def first_non_repeating_character(str1):\n        if str1 is None or len(str1)==0:\n            return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Your code here\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if not str1:\n        return None\n    else:\n        count = 1\n        for i in range(0, len(str1)):\n            if str1[i] == str1[i]:\n                count += 1\n            else:\n                if count == 1:\n                    return str1[i]\n                else:\n                    return None\n        return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    index_of_first_non_repeating_character = -1\n    first_non_repeating_character = \"\"\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                if index_of_first_non_repeating_character >= 0:\n                    first_non_repeating_character = str1[i]\n                    break\n            else:\n                if index_of_first_non_repeating_character >= 0:\n                    first_non_repeating_character = str1[i]\n                    break\n        else:\n            index_of_first_non_repeating_character = i\n    return first_non_repeating_character\n    \ndef second_non_repeating_character(str1):\n    '''\n    Write a python function to find the second non-repeating character in a given string.\n    '''\n    first_non_repeating_character = \"\"\n    second_non_repeating_character = \"\"\n    index_of_first_non_repeating_character = -1\n    index_of_second_non_repeating_character = -1\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                if index_of_first_non_repeating_character >= 0:\n                    first_non_repeating_character = str1[i]\n                    break\n            else:\n                if index_of_first_non_repeating_character >= 0:\n                    first_non_repeating_character = str1[i]\n                    break\n        else:\n            index_of_first_non_repeating_character = i\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                if index_of_second_non_repeating_character >= 0:\n                    second_non_repeating_character = str1[i]\n                    break\n            else:\n                if index_of_second_non_repeating_character >= 0:\n                    second_non_repeating_character = str1[i]\n                    break\n        else:\n            index_of_second_non_repeating_character = i\n    return first_non_repeating_character\n    \ndef third_non_repeating_character(str1):\n    '''\n    Write a python function to find the third non-repeating character in a given string.\n    '''\n    first_non_repeating_character = \"\"\n    third_non_repeating_character = \"\"\n    index_of_first_non_repeating_character = -1\n    index_of_third_non_repeating_character = -1\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                if index_of_first_non_repeating_character >= 0:\n                    first_non_repeating_character = str1[i]\n                    break\n            else:\n                if index_of_first_non_repeating_character >= 0:\n                    first_non_repeating_character = str1[i]\n                    break\n        else:\n            index_of_first_non_repeating_character = i\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                if index_of_third_non_repeating_character >= 0:\n                    third_non_repeating_character = str1[i]\n                    break\n            else:\n                if index_of_third_non_repeating_character >= 0:\n                    third_non_repeating_character = str1[i]\n                    break\n        else:\n            index_of_third_non_repeating_character = i\n    return third_non_repeating_character\n    \ndef forth_non_repeating_character(str1):\n    '''\n    Write a python function to find the forth non-repeating character in a given string.\n    '''\n    first_non_repeating_character = \"\"\n    forth_non_repeating_character = \"\"\n    index_of_first_non_repeating_character = -1\n    index_of_forth_non_repeating_character = -1\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                if index_of_first_non_repeating_character >= 0:\n                    first_non_repeating_character = str1[i]\n                    break\n            else:\n                if index_of_first_non_repeating_character >= 0:\n                    first_non_repeating_character = str1[i]\n                    break\n        else:\n            index_of_first_non_repeating_character = i\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                if index_of_forth_non_repeating_character >= 0:\n                    forth_non_repeating_character = str1[i]\n                    break\n            else:\n                if index_of_forth_non_repeating_character >= 0:\n                    forth_non_repeating_character = str1[i]\n                    break\n        else:\n            index_of_forth_non_repeating_character = i\n    return forth_non_repeating_character\n    \ndef fifth_non_repeating_character(str1):\n    '''\n    Write a python function to find the fifth non-repeating character in a given string.\n    '''\n    first_non_repeating_character = \"\"\n    fifth_non_repeating_character = \"\"\n    index_of_first_non_repeating_character = -1\n    index_of_fifth_non_repeating_character = -1\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                if index_of_first_non_repeating_character >= 0:\n                    first_non_repeating_character = str1[i]\n                    break\n            else:\n                if index_of_first_non_repeating_character >= 0:\n                    first_non_repeating_character = str1[i]\n                    break\n        else:\n            index_of_first_non_repeating_character = i\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                if index_of_fifth_non_repeating_character >= 0:\n                    fifth_non_repeating_character = str1[i]\n                    break\n            else:\n                if index_of_fifth_non_repeating_character >= 0:\n                    fifth_non_repeating_character = str1[i]\n                    break\n        else:\n            index_of_fifth_non_repeating_character = i\n    return fifth_non_repeating_character\n    \ndef sixth_non_repeating_character(str1):\n    '''\n    Write a python function to find the sixth non-repeating character in a given string.\n    '''\n    first_non_repeating_character = \"\"\n    sixth_non_repeating_character = \"\"\n    index_of_first_non_repeating_character = -1\n    index_of_sixth_non_repeating_character = -1\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                if index_of_first_non_repeating_character >= 0:\n                    first_non_repeating_character = str1[i]\n                    break\n            else:\n                if index_of_first_non_repeating_character >= 0:\n                    first_non_repeating_character = str1[i]\n                    break\n        else:\n            index_of_first_non_repeating_character = i\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].isupper():\n                if index_of_sixth_non_repeating_character >= 0:\n                    sixth_non_repeating_character = str1[i]\n                    break\n            else:\n                i"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    my_dict = dict()\n    for i in str1:\n        if i not in my_dict:\n            my_dict[i] = 1\n        else:\n            my_dict[i] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    # str1 = str1.replace(' ','')\n    # str1 = str1.replace('.','')\n    # str1 = str1.replace('\"','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('-','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace(' ','')\n    # str1 = str1.replace('.','')\n    # str1 = str1.replace(',','')\n    # str1 = str1.replace('\"','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('-','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('_',' ')\n    # str1 = str1.replace('\\n','')\n    # str1 = str1.replace('\\t','')\n    # str1 = str1.replace(' ','')\n    # str1 = str1.replace('.','')\n    # str1 = str1.replace(',','')\n    # str1 = str1.replace('\"','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('-','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace(' ','')\n    # str1 = str1.replace('.','')\n    # str1 = str1.replace(',','')\n    # str1 = str1.replace('\"','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('_',' ')\n    # str1 = str1.replace('\\n','')\n    # str1 = str1.replace('\\t','')\n    # str1 = str1.replace(' ','')\n    # str1 = str1.replace('.','')\n    # str1 = str1.replace(',','')\n    # str1 = str1.replace('\"','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('-','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('_',' ')\n    # str1 = str1.replace('\\n','')\n    # str1 = str1.replace('\\t','')\n    # str1 = str1.replace(' ','')\n    # str1 = str1.replace('.','')\n    # str1 = str1.replace(',','')\n    # str1 = str1.replace('\"','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('_',' ')\n    # str1 = str1.replace('\\n','')\n    # str1 = str1.replace('\\t','')\n    # str1 = str1.replace(' ','')\n    # str1 = str1.replace('.','')\n    # str1 = str1.replace(',','')\n    # str1 = str1.replace('\"','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('-','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('_',' ')\n    # str1 = str1.replace('\\n','')\n    # str1 = str1.replace('\\t','')\n    # str1 = str1.replace(' ','')\n    # str1 = str1.replace('.','')\n    # str1 = str1.replace(',','')\n    # str1 = str1.replace('\"','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('_',' ')\n    # str1 = str1.replace('\\n','')\n    # str1 = str1.replace('\\t','')\n    # str1 = str1.replace(' ','')\n    # str1 = str1.replace('.','')\n    # str1 = str1.replace(',','')\n    # str1 = str1.replace('\"','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('_',' ')\n    # str1 = str1.replace('\\n','')\n    # str1 = str1.replace('\\t','')\n    # str1 = str1.replace(' ','')\n    # str1 = str1.replace('.','')\n    # str1 = str1.replace(',','')\n    # str1 = str1.replace('\"','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('_',' ')\n    # str1 = str1.replace('\\n','')\n    # str1 = str1.replace('\\t','')\n    # str1 = str1.replace(' ','')\n    # str1 = str1.replace('.','')\n    # str1 = str1.replace(',','')\n    # str1 = str1.replace('\"','')\n    # str1 = str1.replace(':','')\n    # str1 = str1.replace(';','')\n    # str1 = str1.replace('!','')\n    # str1 = str1.replace('?','')\n    # str1 = str1.replace('_',' ')\n    # str1 = str1.replace('\\n','')\n    # str1 = str1.replace('\\t','')\n    # str1 = str1.replace(' ','')\n    # str1 = str1.replace('.','')\n    # str1 "
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str2 = str(str1)\n    str2 = str2.lower()\n    str2 = str2.replace(\" \", \"\")\n    str2 = str2.replace(\"\", \"\")\n    str2 = str2.replace(\",\", \"\")\n    str2 = str2.replace(\"(\", \"\")\n    str2 = str2.replace(\")\", \"\")\n    str2 = str2.replace(\"'\", \"\")\n    str2 = str2.replace(\"-\", \"\")\n    str2 = str2.replace(\" \", \"\")\n    str2 = str2.replace(\"(\", \"\")\n    str2 = str2.replace(\")\", \"\")\n    str2 = str2.replace(\"'\", \"\")\n    str2 = str2.replace(\"-\", \"\")\n    str2 = str2.replace(\")\", \"\")\n    str2 = str2.replace(\"}\",\"\")\n    str2 = str2.replace(\";\",\"\")\n    str2 = str2.replace(\"}\",\"\")\n    str2 = str2.replace(\"{\",\"\")\n    str2 = str2.replace(\")\",\"\")\n    str2 = str2.replace(\" \",\"\")\n    str2 = str2.replace(\",\",\"\")\n    str2 = str2.replace(\"&\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n    str2 = str2.replace(\"!\",\"\")\n    str2 = str2.replace(\"<\",\"\")\n    str2 = str2.replace(\">\",\"\")\n    str2 = str2.replace(\"?\",\"\")\n    str2 = str2.replace(\".\",\"\")\n    str2 = str2.replace(\" \",\"\")\n    str2 = str2.replace(\",\",\"\")\n    str2 = str2.replace(\"&\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n    str2 = str2.replace(\"!\",\"\")\n    str2 = str2.replace(\"<\",\"\")\n    str2 = str2.replace(\">\",\"\")\n    str2 = str2.replace(\"?\",\"\")\n    str2 = str2.replace(\":\",\"\")\n    str2 = str2.replace(\" \",\"\")\n    str2 = str2.replace(\"&\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n    str2 = str2.replace(\"!\",\"\")\n    str2 = str2.replace(\"<\",\"\")\n    str2 = str2.replace(\">\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n    str2 = str2.replace(\"#\",\"\")\n    str2 = str2.replace(\"+\",\"\")\n    str2 = str2.replace(\"=\",\"\")\n    str2 = str2.replace(\"*\",\"\")\n    str2 = str2.replace(\"+\",\"\")\n    str2 = str2.replace(\"_\",\"\")\n    str2 = str2.replace(\"-\",\"\")\n    str2 = str2.replace(\"$\",\"\")\n    str2 = str2.replace(\"%\",\"\")\n    str2 = str2.replace(\"&\",\"\")\n    str2 = str2.replace(\"{\",\"\")\n    str2 = str2.replace(\"}\",\"\")\n    str2 = str2.replace(\"{\",\"\")\n    str2 = str2.replace(\">\",\"\")\n    str2 = str2.replace(\"<\",\"\")\n    str2 = str2.replace(\"?\",\"\")\n    str2 = str2.replace(\" \",\"\")\n    str2 = str2.replace(\",\",\"\")\n    str2 = str2.replace(\"&\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n    str2 = str2.replace(\"!\",\"\")\n    str2 = str2.replace(\"<\",\"\")\n    str2 = str2.replace(\">\",\"\")\n    str2 = str2.replace(\"?\",\"\")\n    str2 = str2.replace(\":\",\"\")\n    str2 = str2.replace(\" \",\"\")\n    str2 = str2.replace(\"&\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n    str2 = str2.replace(\"!\",\"\")\n    str2 = str2.replace(\"<\",\"\")\n    str2 = str2.replace(\">\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n    str2 = str2.replace(\"#\",\"\")\n    str2 = str2.replace(\"+\",\"\")\n    str2 = str2.replace(\"=\",\"\")\n    str2 = str2.replace(\"*\",\"\")\n    str2 = str2.replace(\"+\",\"\")\n    str2 = str2.replace(\"_\",\"\")\n    str2 = str2.replace(\"-\",\"\")\n    str2 = str2.replace(\"$\",\"\")\n    str2 = str2.replace(\"%\",\"\")\n    str2 = str2.replace(\"&\",\"\")\n    str2 = str2.replace(\"{\",\"\")\n    str2 = str2.replace(\"}\",\"\")\n    str2 = str2.replace(\"{\",\"\")\n    str2 = str2.replace(\">\",\"\")\n    str2 = str2.replace(\"<\",\"\")\n    str2 = str2.replace(\"?\",\"\")\n    str2 = str2.replace(\" \",\"\")\n    str2 = str2.replace(\"&\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n    str2 = str2.replace(\"!\",\"\")\n    str2 = str2.replace(\"<\",\"\")\n    str2 = str2.replace(\">\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n    str2 = str2.replace(\"#\",\"\")\n    str2 = str2.replace(\"+\",\"\")\n    str2 = str2.replace(\"=\",\"\")\n    str2 = str2.replace(\"*\",\"\")\n    str2 = str2.replace(\"+\",\"\")\n    str2 = str2.replace(\"_\",\"\")\n    str2 = str2.replace(\"-\",\"\")\n    str2 = str2.replace(\"$\",\"\")\n    str2 = str2.replace(\"%\",\"\")\n    str2 = str2.replace(\"&\",\"\")\n    str2 = str2.replace(\"{\",\"\")\n    str2 = str2.replace(\"}\",\"\")\n    str2 = str2.replace(\"{\",\"\")\n    str2 = str2.replace(\">\",\"\")\n    str2 = str2.replace(\"<\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n    str2 = str2.replace(\"!\",\"\")\n    str2 = str2.replace(\"<\",\"\")\n    str2 = str2.replace(\">\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n    str2 = str2.replace(\"#\",\"\")\n    str2 = str2.replace(\"+\",\"\")\n    str2 = str2.replace(\"=\",\"\")\n    str2 = str2.replace(\"*\",\"\")\n    str2 = str2.replace(\"+\",\"\")\n    str2 = str2.replace(\"_\",\"\")\n    str2 = str2.replace(\"-\",\"\")\n    str2 = str2.replace(\"$\",\"\")\n    str2 = str2.replace(\"%\",\"\")\n    str2 = str2.replace(\"&\",\"\")\n    str2 = str2.replace(\"{\",\"\")\n    str2 = str2.replace(\"}\",\"\")\n    str2 = str2.replace(\">\",\"\")\n    str2 = str2.replace(\"<\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n    str2 = str2.replace(\"!\",\"\")\n    str2 = str2.replace(\"<\",\"\")\n    str2 = str2.replace(\">\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n    str2 = str2.replace(\"#\",\"\")\n    str2 = str2.replace(\"+\",\"\")\n    str2 = str2.replace(\"=\",\"\")\n    str2 = str2.replace(\"*\",\"\")\n    str2 = str2.replace(\"+\",\"\")\n    str2 = str2.replace(\"_\",\"\")\n    str2 = str2.replace(\"-\",\"\")\n    str2 = str2.replace(\"$\",\"\")\n    str2 = str2.replace(\"%\",\"\")\n    str2 = str2.replace(\"&\",\"\")\n    str2 = str2.replace(\"{\",\"\")\n    str2 = str2.replace(\"}\",\"\")\n    str2 = str2.replace(\">\",\"\")\n    str2 = str2.replace(\"<\",\"\")\n    str2 = str2.replace(\"@\",\"\")\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    counter = dict()\n    for c in str1:\n        if c not in counter:\n            counter[c] = 1\n        else:\n            counter[c] += 1\n    for key, value in counter.items():\n        if value == 1:\n            return key\n    return None\n    \nprint(first_non_repeating_character('abracadabra')) # returns a key\nprint(first_non_repeating_character('aabbbccc')) # returns b\nprint(first_non_repeating_character('aabbbccc')) # returns None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for char in str1:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    for key,value in d.items():\n        if value == 1:\n            return key\n    return''"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    new_list = []\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] not in new_list:\n            new_list.append(str1[i])\n        else:\n            count = count + 1\n            \n    if count == len(new_list):\n        return \"No repeating character found in the given string\"\n    else:\n        return new_list[count-1]\n    \n    "
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    return string[0] == string[-1]\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    check = re.search(regex, string)\n    return check\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    for i in range(len(string)):\n        if string[i] =='s':\n            return False\n        if string[i] == 'p':\n            return True\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # if any character is not a alpha character then return false\n    if any(not c.isalpha() for c in string):\n        return False\n    else:\n        # if any character is a aa then return false\n        for aa in string:\n            if not aa.isalpha():\n                return False\n        # if any character is a a or not then return false\n        for aa in string:\n            if aa in \"aeiou\":\n                return False\n    # return true if it is a valid string\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_character(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (string[0]!= string[-1]):\n        return False\n    else:\n        return True\n    \ndef normalize_case(string):\n    '''\n    Write a function to normalize the case of the given string.\n    '''\n    string = string.lower()\n    string = string.replace(\"a\", \"A\")\n    string = string.replace(\"e\", \"E\")\n    string = string.replace(\"i\", \"I\")\n    string = string.replace(\"o\", \"O\")\n    string = string.replace(\"u\", \"U\")\n    string = string.replace(\"y\", \"Y\")\n    string = string.replace(\"A\", \"a\")\n    string = string.replace(\"E\", \"e\")\n    string = string.replace(\"I\", \"i\")\n    string = string.replace(\"O\", \"o\")\n    string = string.replace(\"U\", \"u\")\n    string = string.replace(\"Y\", \"y\")\n    string = string.replace(\"Z\", \"z\")\n    string = string.replace(\"Z\", \"z\")\n    string = string.replace(\"M\", \"m\")\n    string = string.replace(\"M\", \"m\")\n    string = string.replace(\"N\", \"n\")\n    string = string.replace(\"N\", \"n\")\n    string = string.replace(\"O\", \"o\")\n    string = string.replace(\"T\", \"t\")\n    string = string.replace(\"T\", \"t\")\n    string = string.replace(\"Y\", \"y\")\n    string = string.replace(\"M\", \"m\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"Z\", \"z\")\n    string = string.replace(\"Z\", \"z\")\n    string = string.replace(\"D\", \"d\")\n    string = string.replace(\"D\", \"d\")\n    string = string.replace(\"L\", \"l\")\n    string = string.replace(\"L\", \"l\")\n    string = string.replace(\"B\", \"b\")\n    string = string.replace(\"B\", \"b\")\n    string = string.replace(\"S\", \"s\")\n    string = string.replace(\"S\", \"s\")\n    string = string.replace(\"N\", \"n\")\n    string = string.replace(\"N\", \"n\")\n    string = string.replace(\"P\", \"p\")\n    string = string.replace(\"P\", \"p\")\n    string = string.replace(\"R\", \"r\")\n    string = string.replace(\"R\", \"r\")\n    string = string.replace(\"D\", \"d\")\n    string = string.replace(\"D\", \"d\")\n    string = string.replace(\"L\", \"l\")\n    string = string.replace(\"L\", \"l\")\n    string = string.replace(\"C\", \"c\")\n    string = string.replace(\"C\", \"c\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"A\", \"a\")\n    string = string.replace(\"E\", \"e\")\n    string = string.replace(\"I\", \"i\")\n    string = string.replace(\"O\", \"o\")\n    string = string.replace(\"U\", \"u\")\n    string = string.replace(\"Y\", \"y\")\n    string = string.replace(\"M\", \"m\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"Z\", \"z\")\n    string = string.replace(\"Z\", \"z\")\n    string = string.replace(\"M\", \"m\")\n    string = string.replace(\"N\", \"n\")\n    string = string.replace(\"O\", \"o\")\n    string = string.replace(\"T\", \"t\")\n    string = string.replace(\"T\", \"t\")\n    string = string.replace(\"Y\", \"y\")\n    string = string.replace(\"M\", \"m\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"Z\", \"z\")\n    string = string.replace(\"Z\", \"z\")\n    string = string.replace(\"D\", \"d\")\n    string = string.replace(\"D\", \"d\")\n    string = string.replace(\"L\", \"l\")\n    string = string.replace(\"L\", \"l\")\n    string = string.replace(\"B\", \"b\")\n    string = string.replace(\"B\", \"b\")\n    string = string.replace(\"S\", \"s\")\n    string = string.replace(\"S\", \"s\")\n    string = string.replace(\"N\", \"n\")\n    string = string.replace(\"N\", \"n\")\n    string = string.replace(\"P\", \"p\")\n    string = string.replace(\"P\", \"p\")\n    string = string.replace(\"R\", \"r\")\n    string = string.replace(\"R\", \"r\")\n    string = string.replace(\"D\", \"d\")\n    string = string.replace(\"D\", \"d\")\n    string = string.replace(\"L\", \"l\")\n    string = string.replace(\"L\", \"l\")\n    string = string.replace(\"C\", \"c\")\n    string = string.replace(\"C\", \"c\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"A\", \"a\")\n    string = string.replace(\"E\", \"e\")\n    string = string.replace(\"I\", \"i\")\n    string = string.replace(\"O\", \"o\")\n    string = string.replace(\"U\", \"u\")\n    string = string.replace(\"Y\", \"y\")\n    string = string.replace(\"M\", \"m\")\n    string = string.replace(\"N\", \"n\")\n    string = string.replace(\"O\", \"o\")\n    string = string.replace(\"T\", \"t\")\n    string = string.replace(\"T\", \"t\")\n    string = string.replace(\"Y\", \"y\")\n    string = string.replace(\"M\", \"m\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"Z\", \"z\")\n    string = string.replace(\"Z\", \"z\")\n    string = string.replace(\"M\", \"m\")\n    string = string.replace(\"N\", \"n\")\n    string = string.replace(\"O\", \"o\")\n    string = string.replace(\"T\", \"t\")\n    string = string.replace(\"T\", \"t\")\n    string = string.replace(\"Y\", \"y\")\n    string = string.replace(\"M\", \"m\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"W\", \"w\")\n    string = string.replace(\"Z\", \"z\")\n    string = string.replace(\"Z\", \"z\")\n    string = string.replace(\"D\", \"d\")\n    string = string.replace(\"D\", \"d\")\n    string = string.replace(\"L\", \"l\")\n    string = string.replace(\"L\", \"l\")\n    string = string.replace(\"B\", \"b\")\n    string = string.replace(\"B\", \"b\")\n    string = string.replace(\"S\", \"s\")\n    string = string.replace(\"S\", \"s\")\n    string = string.replace(\"N\", \"n\")\n    string = string.replace(\"N\", \"n\")\n    string = string.replace(\"P\", \"p\")\n    string = string.replace(\"P\", \"p\")\n    string = string.replace(\"R\", \"r\")\n    string = string.replace(\"R\", \"r\")\n    string = string.replace(\"D\", \"d\")\n    string = string.replace(\"D\", \"d\")\n    string = string.replace(\"L\", \"l\")\n    string = string.replace(\"L\", \"l\")"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string, re.I) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    print(\"********* Check character in string *********\")\n    print(string[0])\n    print(string[-1])\n    start_check = re.match(regex, string)\n    end_check = re.match(regex, string[::-1])\n    print(\"start_check: \"+str(start_check))\n    print(\"end_check: \"+str(end_check))\n    if start_check is not None and end_check is not None:\n        print(\"start_check: \"+str(start_check.group(0)))\n        print(\"end_check: \"+str(end_check.group(0)))\n        if start_check.group(0) == end_check.group(0):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a,b,c])\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[int(len(sorted_list)/2)] + sorted_list[int(len(sorted_list)/2) - 1])/2\n    elif len(sorted_list) % 2 == 1:\n        return sorted_list[int(len(sorted_list)/2)]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 3:\n        if len(b) == 3:\n            if len(c) == 3:\n                return (a+b+c) / 3\n            else:\n                return a\n        else:\n            return a\n    else:\n        return (a+b) / 2\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    x = (a+b+c)/3\n    \n    return x\n    \ndef main():\n    '''\n    Create a function to do the following:\n    - Prompt the user for two numbers\n    - Calculate the median\n    - Display the result\n    '''\n    \n    # prompt for user to enter three numbers\n    a = int(input('Enter the first number: '))\n    b = int(input('Enter the second number: '))\n    c = int(input('Enter the third number: '))\n    \n    # calculate the median\n    median_value = median_numbers(a,b,c)\n    \n    print('The median of 3 numbers is: ', median_value)\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)==0:\n        return max(b,c)\n    \n    if len(b)==0:\n        return max(a,c)\n    \n    if len(c)==0:\n        return max(a,b)\n    \n    if a==b or a==c:\n        return a\n    \n    if b==c:\n        return (max(a,b) + min(a,c))//2\n    \n    if a<b and c<b:\n        return median_numbers(a,b,c)\n    \n    if a>b and c>b:\n        return median_numbers(a,b,c)\n    \n    if a<c and b<c:\n        return median_numbers(a,b,c)\n    \n    if a>c and b>c:\n        return median_numbers(a,b,c)\n    \n    if a>c and b<c:\n        return median_numbers(a,b,c)\n    \n    return median_numbers(a,b,c)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a+b+c)/2\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num1 = a\n    num2 = b\n    num3 = c\n    \n    if num1 >= num2 and num1 >= num3:\n        x = num1\n    elif num2 >= num1 and num2 >= num3:\n        x = num2\n    else:\n        x = num3\n    \n    if num1 >= num2 and num1 >= num3:\n        y = num1\n    elif num2 >= num1 and num2 >= num3:\n        y = num2\n    else:\n        y = num3\n    \n    median = ((x+y)/2)\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    elif b<c:\n        if b<a:\n            return b\n        else:\n            return a\n    elif c<a:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = sorted([a,b,c])\n    n = len(a)\n    if n % 2 == 0:\n        x = (a[int(n/2)-1]+a[int(n/2)])/2\n        return x\n    else:\n        if n % 2 == 1:\n            x = a[n//2]\n            return x\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_median = a\n    b_median = b\n    c_median = c\n    num = 0\n    for i in range(len(a)):\n        if a[i] < a_median:\n            num += 1\n        if b[i] < b_median:\n            num += 1\n        if c[i] < c_median:\n            num += 1\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    def nth(n):\n        for i in range(n):\n            yield float(input())\n    def med(x,y,z):\n        return (x+y+z)/3\n    def nth_val(x):\n        return nth(x)[x]\n    return med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(med(me"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # if len(nums) == 0:\n    #     return 0\n    # else:\n    #     nums = list(nums)\n    #     nums.sort()\n    #     i = 0\n    #     s = 0\n    #     while i < len(nums):\n    #         if nums[i] >= 10:\n    #             s = s + nums[i] * (10 ** i)\n    #         else:\n    #             s = s + nums[i]\n    #         i = i + 1\n    #     return s\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    return sum([int(i) for i in str(sum(nums))])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # return sum([int(i) for i in str(nums)])\n    return sum([int(i) for i in str(nums) if i.isdigit()])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Time: O(n)\n    # Space: O(n)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    #A simple brute force approach\n    #This approach is too slow for many numbers\n    \n    total = 0\n    for n in nums:\n        total = total + n\n    \n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # test cases to test\n    assert type(nums) == list, 'nums must be a list'\n    assert nums, 'nums must be non-empty'\n    assert all([type(x) == int for x in nums]), 'all elements must be integers'\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    #initialize output variable\n    output = 0\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += int(str(num)[-1])\n    return total_sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_of_digits_rec(nums):\n        if len(nums) <= 1:\n            return nums[0]\n        else:\n            return sum_of_digits_rec(nums[1:]) + nums[0]\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Start writing your code here\n    for i in nums:\n        return sum(list(map(int, str(i))))\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n    test_tup1_sum = 0\n    test_tup2_sum = 0\n    for i in range(test_tup1_len):\n        test_tup1_sum += test_tup1[i]\n    for i in range(test_tup1_len):\n        test_tup1[i] = int(test_tup1[i])\n    for i in range(test_tup2_len):\n        test_tup2[i] = int(test_tup2[i])\n    test_tup2_sum = sum(test_tup2)\n    bitwise_xor = (test_tup1_sum + test_tup2_sum) ^ (test_tup1_len + test_tup2_len)\n    return bitwise_xor\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_test = ()\n    for i in range(len(test_tup1)):\n        xor_test = xor_test + (test_tup1[i] ^ test_tup2[i])\n    return xor_test\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # create a list to hold xor values\n    xor_values = []\n    for i in range(len(test_tup1)):\n        # add the bitwise xor to the list\n        xor_values.append(bitwise_xor(test_tup1[i], test_tup2[i]))\n    \n    # return the list of xor values\n    return xor_values\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1_int = tuple(map(int,test_tup1))\n    test_tup2_int = tuple(map(int,test_tup2))\n    test_result = 0\n    for i in test_tup1_int:\n        test_result ^= i\n    for i in test_tup2_int:\n        test_result ^= i\n    return (test_result, test_tup1_int, test_tup2_int)\n    \ndef convert_to_int(test_string):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    converted_string = 0\n    for i in test_string:\n        converted_string = converted_string*10+int(i)\n    return converted_string\n    \ndef convert_to_binary(test_string):\n    '''\n    Write a function to convert a string to a binary string.\n    '''\n    binary_string = ''\n    for i in test_string:\n        binary_string = binary_string + str(bin(ord(i)).replace('0b', ''))[2:]\n    return binary_string\n    \ndef convert_to_hex(test_string):\n    '''\n    Write a function to convert a string to a hexadecimal string.\n    '''\n    hex_string = ''\n    for i in test_string:\n        hex_string = hex_string + hex(ord(i)).replace('0x', '')\n    return hex_string\n    \ndef convert_to_ascii(test_string):\n    '''\n    Write a function to convert a string to ascii string.\n    '''\n    ascii_string = ''\n    for i in test_string:\n        ascii_string = ascii_string + chr(ord(i)).replace('0','')\n    return ascii_string\n    \ndef bit_converter(test_bit_array):\n    '''\n    Write a function to convert an array of bits (16-bit) into a string of bits (32-bit)\n    '''\n    test_bit_array_int = tuple(map(int, test_bit_array))\n    test_bit_array_string = convert_to_binary(test_bit_array_int)\n    return convert_to_hex(test_bit_array_string)\n    \ndef bit_converter_int(test_bit_array_int):\n    '''\n    Write a function to convert an array of bits (16-bit) into an integer of bits (32-bit)\n    '''\n    test_bit_array_string = convert_to_ascii(test_bit_array_int)\n    test_bit_array_string = bitwise_xor(test_bit_array_string, test_bit_array_int)\n    test_bit_array_string = convert_to_hex(test_bit_array_string)\n    return convert_to_int(test_bit_array_string)\n    \ndef get_bitstring(test_bit_array_string):\n    '''\n    Write a function to get the bitstring of a given array of bits (32-bit)\n    '''\n    test_bit_array_string_int = tuple(map(int, test_bit_array_string))\n    test_bit_array_string_int = bitwise_xor(test_bit_array_string_int, test_bit_array_string_int)\n    test_bit_array_string_int = convert_to_hex(test_bit_array_string_int)\n    return test_bit_array_string_int\n    \ndef get_bitstring_int(test_bit_array_int):\n    '''\n    Write a function to get the bitstring of an array of bits (32-bit)\n    '''\n    test_bit_array_string = convert_to_ascii(test_bit_array_int)\n    test_bit_array_string = bitwise_xor(test_bit_array_string, test_bit_array_int)\n    test_bit_array_string = convert_to_hex(test_bit_array_string)\n    return convert_to_int(test_bit_array_string)\n    \ndef bit_converter_array(test_bit_array_array):\n    '''\n    Write a function to convert an array of bits (16-bit) into a string of bits (32-bit)\n    '''\n    test_bit_array_int = tuple(map(int, test_bit_array_array))\n    test_bit_array_string = convert_to_binary(test_bit_array_int)\n    return convert_to_hex(test_bit_array_string)\n    \ndef bit_converter_array_int(test_bit_array_int):\n    '''\n    Write a function to convert an array of bits (16-bit) into an integer of bits (32-bit)\n    '''\n    test_bit_array_string = convert_to_ascii(test_bit_array_int)\n    test_bit_array_string = bitwise_xor(test_bit_array_string, test_bit_array_int)\n    test_bit_array_string = convert_to_hex(test_bit_array_string)\n    return convert_to_int(test_bit_array_string)\n    \ndef make_array(test_bit_array_string):\n    '''\n    Write a function to make an array of bits (32-bit)\n    '''\n    test_bit_array_string = bit_converter_array(test_bit_array_string)\n    test_bit_array_string = bitwise_xor(test_bit_array_string, test_bit_array_string)\n    test_bit_array_string = convert_to_hex(test_bit_array_string)\n    return test_bit_array_string\n    \ndef make_bitstring(test_bit_array_string):\n    '''\n    Write a function to make a bitstring of an array of bits (32-bit)\n    '''\n    test_bit_array_string = bit_converter_array(test_bit_array_string)\n    test_bit_array_string = convert_to_hex(test_bit_array_string)\n    test_bit_array_string = bitwise_xor(test_bit_array_string, test_bit_array_string)\n    test_bit_array_string = convert_to_ascii(test_bit_array_string)\n    return test_bit_array_string\n    \ndef get_bitstring_array(test_bit_array_string):\n    '''\n    Write a function to get the bitstring of an array of bits (32-bit)\n    '''\n    test_bit_array_string_array = []\n    for i in range(len(test_bit_array_string)):\n        test_bit_array_string_array.append(test_bit_array_string[i])\n    return test_bit_array_string_array\n    \ndef get_bitstring_int_array(test_bit_array_int):\n    '''\n    Write a function to get the bitstring of an array of bits (32-bit)\n    '''\n    test_bit_array_int_array = []\n    for i in range(len(test_bit_array_int)):\n        test_bit_array_int_array.append(test_bit_array_int[i])\n    return test_bit_array_int_array\n    \ndef bit_converter_int_array(test_bit_array_int):\n    '''\n    Write a function to convert an array of bits (16-bit) into a integer of bits (32-bit)\n    '''\n    test_bit_array_string_array = get_bitstring_array(test_bit_array_int)\n    test_bit_array_string_int_array = []\n    for i in range(len(test_bit_array_string_array)):\n        test_bit_array_string_int_array.append(bit_converter_array(test_bit_array_string_array[i]))\n    return get_bitstring_int_array(test_bit_array_string_int_array)\n    \ndef make"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    # make the tuples into an array\n    tup1 = (test_tup1[0], test_tup1[1], test_tup1[2], test_tup1[3])\n    tup2 = (test_tup2[0], test_tup2[1], test_tup2[2], test_tup2[3])\n    # iterate over the tuples\n    for x in tup1:\n        for y in tup2:\n            result |= x ^ y\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #Initialize the empty lists\n    a=[]\n    b=[]\n    c=[]\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_result = tuple(map(lambda x,y: x ^ y, test_tup1, test_tup2))\n    return test_result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup1[1]\n    c = test_tup2[0]\n    d = test_tup2[1]\n    x = b & a\n    y = c & b\n    z = d & a\n    return x,y,z\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert test_tup1[0] == test_tup2[0]\n    assert test_tup1[1] == test_tup2[1]\n    assert test_tup1[2] == test_tup2[2]\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    total_count=0\n    for item in test_list:\n        total_count+=1\n    return total_count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = list(dict.fromkeys(test_list))\n    freq = len(unique_list)\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    '''\n    The example below writes the number of unique tuples, and then returns the number of tuples.\n    '''\n    '''\n    def extract_freq(test_list):\n        freq_list = dict()\n        for i in test_list:\n            for item in i:\n                if item in freq_list:\n                    freq_list[item] += 1\n                else:\n                    freq_list[item] = 1\n        return len(freq_list)\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        if i in test_list[i:i+1]:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # List containing all frequency of tuples\n    freq = {}\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in range(len(test_list)):\n        freq = (i, test_list[i][1])\n        if freq in freq_dict:\n            freq_dict[freq] += 1\n        else:\n            freq_dict[freq] = 1\n    print(freq_dict)\n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # TODO: Write your solution here\n    count = 0\n    for item in test_list:\n        if type(item) == list:\n            count += len(item)\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    uniq_list = []\n    for element in test_list:\n        if element not in uniq_list:\n            uniq_list.append(element)\n    return len(uniq_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        count += len(i)\n    return count\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup3 = tuple(test_tup1 + test_tup2)\n    return test_tup3\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # TO DO\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    assert isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple), \"Tuple parameters must be a tuple\"\n    assert all([isinstance(i, int) for i in test_tup1]), \"Index values must be integers\"\n    assert all([isinstance(i, int) for i in test_tup2]), \"Index values must be integers\"\n    \n    return tuple([(i + j) for i, j in zip(test_tup1, test_tup2)])\n    "
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def generate_addition_nested_tuple(tup1, tup2):\n        '''\n        Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n        '''\n        # Iterate through both tuples and add the two tuples together\n        for x, y in zip(tup1, tup2):\n            if isinstance(x, tuple) and isinstance(y, tuple):\n                generate_addition_nested_tuple(x, y)\n            else:\n                if isinstance(x, tuple) and isinstance(y, int):\n                    x = (x, x)\n                else:\n                    y = (y, y)\n        return x, y\n    # Return the generated tuple\n    return generate_addition_nested_tuple(test_tup1, test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def index_add(a,b):\n        try:\n            return a[0] + b[0]\n        except IndexError:\n            return 0\n    def index_add2(a,b):\n        try:\n            return a[0] + b[1]\n        except IndexError:\n            return 0\n    def add_tuples(test_tup1, test_tup2):\n        for index, i in enumerate(test_tup2):\n            test_tup2[index] = index_add(i, test_tup1[index])\n    def add_tuples2(test_tup1, test_tup2):\n        for index, i in enumerate(test_tup2):\n            test_tup1[index] = index_add2(i, test_tup1[index])\n    test_tup1 = test_tup1 + test_tup2\n    add_tuples(test_tup1, test_tup2)\n    test_tup2 = test_tup1\n    add_tuples2(test_tup1, test_tup2)\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    return (test_tup1[0] + test_tup2[0])\n    \ndef sub_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    return (test_tup1[1] - test_tup2[1])\n    \ndef mul_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    return (test_tup1[0] * test_tup2[0])\n    \ndef div_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    return (test_tup1[1] / test_tup2[1])\n    \ndef mod_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    return (test_tup1[0] % test_tup2[0])\n    \ndef eq_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    return (test_tup1[0] == test_tup2[0])\n    \ndef startswith_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    return (test_tup1[0].startswith(test_tup2[0]))\n    \ndef endswith_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    return (test_tup1[0].endswith(test_tup2[0]))\n    \ndef equal_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    return (test_tup1[0] == test_tup2[0])\n    \ndef lessthan_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    return (test_tup1[0] < test_tup2[0])\n    \ndef greaterthan_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    return (test_tup1[0] > test_tup2[0])\n    \ndef contains_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    return (test_tup1[0] in test_tup2[0])\n    \ndef add_nested_string(test_str1, test_str2):\n    '''\n    Write a function to perform index wise addition of two string elements in the given two nested strings.\n    '''\n    # Write your code here\n    return (test_str1 + test_str2)\n    \ndef sub_nested_string(test_str1, test_str2):\n    '''\n    Write a function to perform index wise addition of two string elements in the given two nested strings.\n    '''\n    # Write your code here\n    return (test_str1[len(test_str1) - 1] - test_str2[len(test_str2) - 1])\n    \ndef mul_nested_string(test_str1, test_str2):\n    '''\n    Write a function to perform index wise addition of two string elements in the given two nested strings.\n    '''\n    # Write your code here\n    return (test_str1[0] * test_str2[0])\n    \ndef div_nested_string(test_str1, test_str2):\n    '''\n    Write a function to perform index wise addition of two string elements in the given two nested strings.\n    '''\n    # Write your code here\n    return (test_str1[1] / test_str2[1])\n    \ndef mod_nested_string(test_str1, test_str2):\n    '''\n    Write a function to perform index wise addition of two string elements in the given two nested strings.\n    '''\n    # Write your code here\n    return (test_str1[0] % test_str2[0])\n    \ndef eq_nested_string(test_str1, test_str2):\n    '''\n    Write a function to perform index wise addition of two string elements in the given two nested strings.\n    '''\n    # Write your code here\n    return (test_str1[0] == test_str2[0])\n    \ndef startswith_nested_string(test_str1, test_str2):\n    '''\n    Write a function to perform index wise addition of two string elements in the given two nested strings.\n    '''\n    # Write your code here\n    return (test_str1.startswith(test_str2[0]))\n    \ndef endswith_nested_string(test_str1, test_str2):\n    '''\n    Write a function to perform index wise addition of two string elements in the given two nested strings.\n    '''\n    # Write your code here\n    return (test_str1.endswith(test_str2[0]))\n    \ndef equal_nested_string(test_str1, test_str2):\n    '''\n    Write a function to perform index wise addition of two string elements in the given two nested strings.\n    '''\n    # Write your code here\n    return (test_str1 == test_str2)\n    \ndef lessthan_nested_string(test_str1, test_str2):\n    '''\n    Write a function to perform index wise addition of two string elements in the given two nested strings.\n    '''\n    # Write your code here\n    return (test_str1 < test_str2)\n    \ndef greaterthan_nested_string(test_str1, test_str2):\n    '''\n    Write a function to perform index wise addition of two string elements in the given two nested strings.\n    '''\n    # Write your code here\n    return (test_str1 > test_str2)\n    \ndef contains_nested_string(test_str1, test_str2):\n    '''\n    Write a function to perform index wise addition of two string elements in the given two nested strings.\n    '''\n    # Write your code here\n    return (test_str1 in test_str2)\n    \ndef add_nested_int(test_int1, test_int2):\n    '''\n    Write a function to perform index wise addition of two integer elements in the given two nested integers.\n    '''\n    # Write your code here\n    return (test_int1 + test_int2)\n    \ndef sub_nested_int(test_int1, test_int2):\n    '''\n    Write a function to perform index wise addition of two integer elements in the given two nested integers.\n    '''\n    # Write your code here\n    return (test_int1 - test_int2)\n    \ndef mul_nested_in"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Your code here\n    test_tup3 = tuple(test_tup1 + test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def process(x):\n        x_1 = x[0]\n        x_2 = x[1]\n        # check if any of the elements in the tuple is a list and if so, add the inner tuples to the left of the current element\n        # if not then add it to the right of the current element\n        if isinstance(x, tuple) and type(x) is tuple:\n            if x_1 is not None:\n                if isinstance(x_1, tuple):\n                    if x_2 is not None:\n                        return x_1 + x_2\n                else:\n                    return x_1 + x_2\n            else:\n                return x_1 + x_2\n        # if the element is not a tuple or it is not a list, then simply return the element\n        elif x not in (tuple, list) and type(x) is list:\n            return x[0] + x[1]\n        # if the element is a list, then return the element\n        elif type(x) is list:\n            return x[0] + x[1]\n        else:\n            return x\n    # create a list out of the given tuple\n    x_1 = process(test_tup1)\n    x_2 = process(test_tup2)\n    return x_1, x_2\n    "
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Create tuples\n    t1 = ()\n    t2 = ()\n    # Loop through each value in the two tuples\n    for i in range(len(test_tup1)):\n        # If the second tuple is a list, add the first tuple to the second tuple\n        if type(test_tup2[i]) is list:\n            t1 = t1 + (test_tup1[i][0],)\n            t2 = t2 + (test_tup2[i][0],)\n        # If the second tuple is a single value, add it to the first tuple\n        else:\n            t1 = t1 + (test_tup1[i],)\n            t2 = t2 + (test_tup2[i],)\n    return t1,t2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # tup1 = '<start> <start> <start> <end> <end>'\n    # tup2 = '<end> <start> <start> <end>'\n    # tup1 = (1, 2, 3, 4)\n    # tup2 = (1, 2, 3, 4)\n    tup1 = test_tup1\n    tup2 = test_tup2\n    print(tup1 + tup2)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a == b:\n        return a\n    elif a > b:\n        return b\n    elif a < b:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a>b:\n        return a\n    if a==b:\n        return a\n    if a<b:\n        return b\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        a,b = b,a\n    if a==b:\n        return a\n    elif a<b:\n        return b\n    else:\n        return \"This is not a number\"\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min=a\n    if b>a:\n        min=b\n    else:\n        min=a\n    return min\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max=a\n    if b<a:\n        max=b\n    else:\n        max=a\n    return max\ndef sum(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    sum=a+b\n    return sum\ndef difference(a,b):\n    '''\n    Write a python function to find the difference of two numbers.\n    '''\n    diff=a-b\n    return diff\ndef product(a,b):\n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    product=a*b\n    return product\ndef division(a,b):\n    '''\n    Write a python function to find the division of two numbers.\n    '''\n    division=a/b\n    return division\ndef modulo(a,b):\n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    modulo=a%b\n    return modulo\ndef multiplication(a,b):\n    '''\n    Write a python function to find the multiplication of two numbers.\n    '''\n    multiplication=a*b\n    return multiplication\ndef exponentiation(a,b):\n    '''\n    Write a python function to find the exponentiation of two numbers.\n    '''\n    exponentiation=a**b\n    return exponentiation\ndef power(a,b):\n    '''\n    Write a python function to find the power of two numbers.\n    '''\n    power=a**b\n    return power\ndef reciprocal(a,b):\n    '''\n    Write a python function to find the reciprocal of two numbers.\n    '''\n    reciprocal=1/a\n    return reciprocal\ndef modulo(a,b):\n    '''\n    Write a python function to find the modulo of two numbers.\n    '''\n    modulo=a%b\n    return modulo\ndef powermod(a,b):\n    '''\n    Write a python function to find the power of the modulo of two numbers.\n    '''\n    powermod=a**b\n    return powermod\ndef modulus(a,b):\n    '''\n    Write a python function to find the modulus of two numbers.\n    '''\n    modulus=a%b\n    return modulus\ndef fraction(a,b):\n    '''\n    Write a python function to find the fraction of two numbers.\n    '''\n    fraction=a/b\n    return fraction\ndef divisionby(a,b):\n    '''\n    Write a python function to find the division of two numbers.\n    '''\n    divisionby=a/b\n    return divisionby\ndef moduloby(a,b):\n    '''\n    Write a python function to find the modulo of two numbers.\n    '''\n    moduloby=a%b\n    return moduloby\ndef sign(a):\n    '''\n    Write a python function to find the sign of two numbers.\n    '''\n    sign=a>0\n    return sign\ndef sign(a):\n    '''\n    Write a python function to find the sign of two numbers.\n    '''\n    sign=a>0\n    return sign\ndef equal(a,b):\n    '''\n    Write a python function to find the equal of two numbers.\n    '''\n    equal=a==b\n    return equal\ndef not_equal(a,b):\n    '''\n    Write a python function to find the not equal of two numbers.\n    '''\n    not_equal=a!=b\n    return not_equal\ndef lessthan(a,b):\n    '''\n    Write a python function to find the less than of two numbers.\n    '''\n    lessthen=a<b\n    return lessthen\ndef less(a,b):\n    '''\n    Write a python function to find the less of two numbers.\n    '''\n    less=a<b\n    return less\ndef greaterthan(a,b):\n    '''\n    Write a python function to find the greater than of two numbers.\n    '''\n    greaterthan=a>b\n    return greaterthan\ndef greater(a,b):\n    '''\n    Write a python function to find the greater of two numbers.\n    '''\n    greater=a>b\n    return greater\ndef interval(a,b):\n    '''\n    Write a python function to find the interval of two numbers.\n    '''\n    interval=a<=b\n    return interval\ndef char(a):\n    '''\n    Write a python function to find the character of two numbers.\n    '''\n    char=a[0]\n    return char\ndef numerical(a):\n    '''\n    Write a python function to find the numerical value of two numbers.\n    '''\n    numerical=a[0]\n    return numerical\ndef alpha_numerical(a):\n    '''\n    Write a python function to find the character of two numbers.\n    '''\n    alpha=a[0]\n    numerical=a[0]\n    numerical=alpha\n    return numerical\ndef arithemtic(a,b):\n    '''\n    Write a python function to find the arithmetic expression of two numbers.\n    '''\n    arithemtic=a/b\n    return arithemtic\ndef addition(a,b):\n    '''\n    Write a python function to find the addition of two numbers.\n    '''\n    addition=a+b\n    return addition\ndef substraction(a,b):\n    '''\n    Write a python function to find the substraction of two numbers.\n    '''\n    substraction=a-b\n    return substraction\ndef multiplication(a,b):\n    '''\n    Write a python function to find the multiplication of two numbers.\n    '''\n    multiplication=a*b\n    return multiplication\ndef divisibility(a,b):\n    '''\n    Write a python function to find the divisibility of two numbers.\n    '''\n    divisibility=a/b\n    return divisibility\ndef modulo(a,b):\n    '''\n    Write a python function to find the modulo of two numbers.\n    '''\n    modulo=a%b\n    return modulo\ndef power(a,b):\n    '''\n    Write a python function to find the power of two numbers.\n    '''\n    power=a**b\n    return power\ndef exponentiation(a,b):\n    '''\n    Write a python function to find the exponentiation of two numbers.\n    '''\n    exponentiation=a**b\n    return exponentiation\ndef powermod(a,b):\n    '''\n    Write a python function to find the power of the modulo of two numbers.\n    '''\n    powermod=a**b\n    return powermod\ndef divisionby(a,b):\n    '''\n    Write a python function to find the division by two numbers.\n    '''\n    divisionby=a/b\n    return divisionby\ndef moduloby(a,b):\n    '''\n    Write a python function to find the modulo of the modulo of two numbers.\n    '''\n    moduloby=a%b\n    return moduloby\ndef fraction(a,b):\n    '''\n    Write a python function to find the fraction of two numbers.\n    '''\n    fraction=a/b\n    return fraction\ndef divisionby(a,b):\n    '''\n    Write a python function to find the division by two numbers.\n    '''\n    divisionby=a/b\n    return divisionby\ndef moduloby(a,b):\n    '''\n    Write a python function to find the modulo of the modulo of two numbers.\n    '''\n    moduloby=a%b\n    return moduloby\ndef sign(a):\n    '''\n    Write a python function to find the sign of two numbers.\n    '''\n    sign=a>0\n    return sign\ndef sign(a):\n    '''\n    Write a python function to find the sign of two numbers.\n    '''\n    sign=a>0\n    return sign\ndef equal(a,b):\n    '''\n    Write a python function to find the equal of two number"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min1 = a\n    min2 = b\n    if b<min1:\n        min1=b\n    if a<min2:\n        min2=a\n    return min1,min2\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        small=a\n        big=b\n    else:\n        small=b\n        big=a\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if it is the same value, then return it\n    if big==a:\n        return a\n    elif big==b:\n        return b\n    elif big>a:\n        small=a\n    else:\n        small=b\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if it is the same value, then return it\n    if small==a:\n        return a\n    elif small==b:\n        return b\n    elif small>a:\n        small=a\n    else:\n        small=b\n    return small\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if it is the same value, then return it\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if it is the same value, then return it\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if it is the same value, then return it\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if it is the same value, then return it\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the array is empty, then return the smallest number\n    # if it is not, then return the smallest number\n    # if the arra"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        a,b = b,a\n    while a < b:\n        if a % 2 == 0:\n            a = a + (a // 2)\n        else:\n            a = a - ((a % 2) + 1)\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuple1=tuple1[0]\n    if tuplex==tuple1:\n        return True\n    else:\n        return False\n    # 3.15\n    # 3.16\n    # 3.17\n    # 3.18\ndef check_tuple(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex==tuple1:\n        return True\n    else:\n        return False\n    # 3.25\n    # 3.26\n    # 3.27\n    # 3.28\n    # 3.29\n    # 3.30\n    # 3.31\n    # 3.32\n    # 3.33\n    # 3.34\n    # 3.35\n    # 3.36\n    # 3.37\n    # 3.38\n    # 3.39\n    # 3.40\n    # 3.41\n    # 3.42\n    # 3.43\n    # 3.44\n    # 3.45\n    # 3.46\n    # 3.47\n    # 3.48\n    # 3.49\n    # 3.50\n    # 3.51\n    # 3.52\n    # 3.53\n    # 3.54\n    # 3.55\n    # 3.56\n    # 3.57\n    # 3.58\n    # 3.59\n    # 3.60\n    # 3.61\n    # 3.62\n    # 3.63\n    # 3.64\n    # 3.65\n    # 3.66\n    # 3.67\n    # 3.68\n    # 3.69\n    # 3.70\n    # 3.71\n    # 3.72\n    # 3.73\n    # 3.74\n    # 3.75\n    # 3.76\n    # 3.77\n    # 3.78\n    # 3.79\n    # 3.80\n    # 3.81\n    # 3.82\n    # 3.83\n    # 3.84\n    # 3.85\n    # 3.86\n    # 3.87\n    # 3.88\n    # 3.89\n    # 3.90\n    # 3.91\n    # 3.92\n    # 3.93\n    # 3.94\n    # 3.95\n    # 3.96\n    # 3.97\n    # 3.98\n    # 3.99\n    # 4.0\n    # 4.1\n    # 4.2\n    # 4.3\n    # 4.4\n    # 4.5\n    # 4.6\n    # 4.7\n    # 4.8\n    # 4.9\n    # 4.10\n    # 4.11\n    # 4.12\n    # 4.13\n    # 4.14\n    # 4.15\n    # 4.16\n    # 4.17\n    # 4.18\n    # 4.19\n    # 4.20\n    # 4.21\n    # 4.22\n    # 4.23\n    # 4.24\n    # 4.25\n    # 4.26\n    # 4.27\n    # 4.28\n    # 4.29\n    # 4.30\n    # 4.31\n    # 4.32\n    # 4.33\n    # 4.34\n    # 4.35\n    # 4.36\n    # 4.37\n    # 4.38\n    # 4.39\n    # 4.40\n    # 4.41\n    # 4.42\n    # 4.43\n    # 4.44\n    # 4.45\n    # 4.46\n    # 4.47\n    # 4.48\n    # 4.49\n    # 4.50\n    # 4.51\n    # 4.52\n    # 4.53\n    # 4.54\n    # 4.55\n    # 4.56\n    # 4.57\n    # 4.58\n    # 4.59\n    # 4.60\n    # 4.61\n    # 4.62\n    # 4.63\n    # 4.64\n    # 4.65\n    # 4.66\n    # 4.67\n    # 4.68\n    # 4.69\n    # 4.70\n    # 4.71\n    # 4.72\n    # 4.73\n    # 4.74\n    # 4.75\n    # 4.76\n    # 4.77\n    # 4.78\n    # 4.79\n    # 4.80\n    # 4.81\n    # 4.82\n    # 4.83\n    # 4.84\n    # 4.85\n    # 4.86\n    # 4.87\n    # 4.88\n    # 4.89\n    # 4.90\n    # 4.91\n    # 4.92\n    # 4.93\n    # 4.94\n    # 4.95\n    # 4.96\n    # 4.97\n    # 4.98\n    # 4.99\n    # 5.0\n    # 5.1\n    # 5.2\n    # 5.3\n    # 5.4\n    # 5.5\n    # 5.6\n    # 5.7\n    # 5.8\n    # 5.9\n    # 5.10\n    # 5.11\n    # 5.12\n    # 5.13\n    # 5.14\n    # 5.15\n    # 5.16\n    # 5.17\n    # 5.18\n    # 5.19\n    # 5.20\n    # 5.21\n    # 5.22\n    # 5.23\n    # 5.24\n    # 5.25\n    # 5.26\n    # 5.27\n    # 5.28\n    # 5.29\n    # 5.30\n    # 5.31\n    # 5.32\n    # 5.33\n    # 5.34\n    # 5.35\n    # 5.36\n    # 5.37\n    # 5.38\n    # 5.39\n    # 5.40\n    # 5.41\n    # 5.42\n    # 5.43\n    # 5.44\n    # 5.45\n    # 5.46\n    # 5.47\n    # 5.48\n    # 5.49\n    # 5.50\n    # 5.51\n    # 5.52\n    # 5.53\n    # 5.54\n    # 5.55\n    # 5.56\n    # 5.57\n    # 5.58\n    # 5.59\n    # 5.60\n    # 5.61\n    # 5.62\n    # 5.63\n    # 5.64\n    # 5.65\n    # 5.66\n    # 5.67\n    # 5.68\n    # 5.69\n    # 5.70\n    # 5.71\n    # 5.72\n    # 5.73\n    # 5.74\n    # 5.75\n    # 5.76\n    # 5.77\n    # 5.78\n    # 5.79\n    # 5.80\n    # 5.81\n    # 5.82\n    # 5.83\n    # 5.84\n    # 5.85\n    # 5.86\n    # 5.87\n    # 5.88\n    # 5.89\n    # 5.90\n    # 5.91\n    # 5.92\n    # 5.93\n    # 5.94\n    # 5.95\n    # 5.96\n    # 5.97\n    # 5.98\n    # 5.99\n    # 6.0\n    # 6.1\n    # 6.2\n    # 6.3\n    # 6.4\n    # 6.5\n    # 6.6\n    # 6.7\n    # 6.8\n    # 6.9\n    # 6.10\n    # 6.11\n    # 6.12\n    # 6.13\n    # 6.14\n    # 6.15\n    # 6.16\n    # 6.17\n    # 6.18\n    # 6.19\n    # 6.20\n    # 6.21\n    # 6.22\n    # 6.23\n    # 6.24\n    # 6.25\n    # 6.26\n    # 6.27\n    # 6.28\n    # 6.29\n    # 6.30\n    # 6.31\n    # 6.32\n    # 6.33\n    # 6.34\n    # 6.35\n    # 6.36\n    # 6.37\n    # 6.38\n    # "
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] == tuple1:\n        return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i == tuple1: \n            return True\n        else: \n            return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuplex,tuple) and len(tuplex) == len(tuple1) and tuplex == tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # verify tuple 1\n    if tuple1[0] == tuplex[0]:\n        return True\n    # verify tuple 2\n    elif tuple1[1] == tuplex[1]:\n        return True\n    # verify tuple 3\n    elif tuple1[2] == tuplex[2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex[tuple1]\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0]==tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    i = 0\n    tuple2 = ()\n    for i in range(len(tuplex)):\n        tuple2 = tuple2 + (tuplex[i])\n    if tuple1 == tuple2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex_copy = tuplex[:]\n    if tuple1 in tuplex_copy:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == 1:\n        return True\n    else:\n        return False\ndef check_list(list,tuple1): \n    '''\n    Write a function that checks whether a list contains a tuple.\n    '''\n    for element in list:\n        if check_tuplex(tuple1,element):\n            return True\n    return False\ndef check_dict(dict,tuple1):\n    '''\n    Write a function that checks whether a dict contains a tuple.\n    '''\n    if len(tuple1) == 1:\n        return True\n    else:\n        return False\ndef is_long_name(name):\n    '''\n    Write a function that checks whether a name contains characters\n    '''\n    if len(name) >= 50:\n        return True\n    else:\n        return False\ndef check_char_name(name):\n    '''\n    Write a function that checks whether a name contains letters.\n    '''\n    if len(name) >= 3:\n        return True\n    else:\n        return False\ndef is_contains_all(string,list):\n    '''\n    Write a function that checks whether a string contains all elements \n    of a list.\n    '''\n    for element in list:\n        if string.count(element)>0:\n            return True\n    return False\ndef is_contains_all_and_not(string,list):\n    '''\n    Write a function that checks whether a string contains all elements\n    of a list and the not.\n    '''\n    for element in list:\n        if string.count(element)>0 and element not in string:\n            return True\n    return False\ndef is_not_contains_all(string,list):\n    '''\n    Write a function that checks whether a string contains all elements\n    of a list and the not.\n    '''\n    for element in list:\n        if string.count(element)>0 and element in string:\n            return True\n    return False\ndef is_not_contains_all_and_not(string,list):\n    '''\n    Write a function that checks whether a string contains all elements\n    of a list and the not.\n    '''\n    for element in list:\n        if string.count(element)>0 and element not in string:\n            return True\n    return False\ndef is_not_contains_all_and_not(string,list):\n    '''\n    Write a function that checks whether a string contains all elements\n    of a list and the not.\n    '''\n    for element in list:\n        if string.count(element)>0 and element not in string:\n            return True\n    return False\ndef is_duplicated(string):\n    '''\n    Write a function that checks whether a string contains any duplicates.\n    '''\n    string = string.split()\n    if len(string)>1:\n        for element in string:\n            if string.count(element)>1:\n                return True\n    return False\ndef is_in_list(list,tuple1):\n    '''\n    Write a function that checks whether an element is present in a list.\n    '''\n    if len(tuple1) == 1:\n        return True\n    else:\n        for element in list:\n            if element[0] == tuple1[0] and element[1] == tuple1[1]:\n                return True\n    return False\ndef check_dict_contains(dict,tuple1):\n    '''\n    Write a function that checks whether a dictionary contains a tuple.\n    '''\n    if len(tuple1) == 1:\n        return True\n    else:\n        return False\ndef is_order_insensitive(string):\n    '''\n    Write a function that checks whether a string contains the order of the letters of alphabetical order.\n    '''\n    string = string.replace(' ','').replace('.','').replace('-',' ').split(' ')\n    if len(string) == 1:\n        return True\n    else:\n        return False\ndef is_it_positive(num):\n    '''\n    Write a function that checks whether a number is positive.\n    '''\n    if num>0:\n        return True\n    else:\n        return False\ndef is_it_negative(num):\n    '''\n    Write a function that checks whether a number is negative.\n    '''\n    if num < 0:\n        return True\n    else:\n        return False\ndef is_it_even(num):\n    '''\n    Write a function that checks whether a number is even.\n    '''\n    if num%2 == 0:\n        return True\n    else:\n        return False\ndef is_it_odd(num):\n    '''\n    Write a function that checks whether a number is odd.\n    '''\n    if num%2!= 0:\n        return True\n    else:\n        return False\ndef is_it_prime(num):\n    '''\n    Write a function that checks whether a number is prime.\n    '''\n    if num%2 == 0:\n        return False\n    else:\n        for i in range(2,int(num**0.5)+1):\n            if num%i == 0:\n                return False\n        return True\ndef is_it_prime_by_base(base):\n    '''\n    Write a function that checks whether a number is prime by dividing the number by 2.\n    '''\n    if is_it_prime(base) == True:\n        return True\n    else:\n        return False\ndef is_it_prime_by_base_m(num):\n    '''\n    Write a function that checks whether a number is prime by dividing the number by 2 and adding 1.\n    '''\n    if num%2 == 0:\n        return False\n    else:\n        if num%3 == 0:\n            return True\n        else:\n            if num%5 == 0:\n                return True\n            else:\n                return False\ndef is_it_prime_by_base_l(num):\n    '''\n    Write a function that checks whether a number is prime by dividing the number by 3 and adding 1.\n    '''\n    if num%2 == 0:\n        return False\n    else:\n        if num%3 == 0:\n            return True\n        else:\n            if num%5 == 0:\n                return True\n            else:\n                return False\ndef is_it_prime_by_base_f(num):\n    '''\n    Write a function that checks whether a number is prime by dividing the number by 5 and adding 1.\n    '''\n    if num%4 == 0:\n        return False\n    else:\n        if num%7 == 0:\n            return True\n        else:\n            return False\ndef is_it_prime_by_base_c(num):\n    '''\n    Write a function that checks whether a number is prime by dividing the number by 2 and adding 1.\n    '''\n    if num%2 == 0:\n        return False\n    else:\n        if num%3 == 0:\n            return True\n        else:\n            if num%5 == 0:\n                return True\n            else:\n                return False\ndef is_it_prime_by_base_f_m(num):\n    '''\n    Write a function that checks whether a number is prime by dividing the number by 5 and adding 1.\n    '''\n    if num%3 == 0:\n        return False\n    else:\n        if num%5 == 0:\n            return True\n        else:\n            return False\ndef is_it_prime_by_base_c_m(num):\n    '''\n    Write a function that checks whether a number is prime by dividing the number by 2 and adding 1.\n    '''\n    if num%4 == 0:\n        return False\n    else:\n        if num%5 == 0:\n            return True\n        else:\n            return False\ndef is_it_prime_by_base_c_l(num):\n    '''\n    Write a function that checks whether a number is prime by dividing the number by 2 and adding 1.\n    '''\n    if num%5 == 0:\n        return True\n    else:\n        if num%7 == 0:\n            return True\n        else:\n            return False\ndef is_it_prime_by_base_c_f(num):\n    '''\n    Write a function that checks whether a number is prime by dividing the number by 5 and adding 1.\n    ''"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x % 2) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even.\")\n    else:\n        print(f\"{x} is odd.\")\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # find parity\n    if x % 2!= 0:\n        return x\n    else:\n        return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return 'odd'\n    else:\n        return 'even'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1:\n        return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    a=[]\n    for i in range(0,x): \n        if i%2==0: \n            a.append(0)\n        else: \n            a.append(1)\n    if x%2==0: \n        a.append(0)\n    else: \n        a.append(1)\n    return a\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd_count = 0\n    for i in range(1,x+1): \n        if (x % i == 0): \n            odd_count += 1\n    if odd_count == 2: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # perform tests\n    if x%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return \"\".join(str(i) for i in sorted(str(n)))\n    \nn = 120\nprint(rearrange_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    if n < 100:\n        if n < 10:\n            return 10 + rearrange_bigger(n//10)\n        return n//10 + rearrange_bigger(n%10)\n    if n < 1000:\n        if n < 100:\n            if n < 10:\n                return 100 + rearrange_bigger(n//100)\n            return n//100 + rearrange_bigger(n%100)\n        if n < 1000:\n            if n < 100:\n                return 1000 + rearrange_bigger(n//1000)\n            return n//1000 + rearrange_bigger(n%1000)\n    if n < 10000:\n        if n < 1000:\n            return 10000 + rearrange_bigger(n//10000)\n        return n//10000 + rearrange_bigger(n%10000)\n    return n//10000 + rearrange_bigger(n%10000)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # define the list of digits\n    digits = [int(d) for d in str(n)]\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    number = []\n    while n:\n        rem = n % 10\n        number.append(rem)\n        n = n // 10\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    '''\n    :param n: input number\n    :return: next bigger number.\n    '''\n    '''\n    A little trick: \n    We go from 1 to 9, the next bigger number from 1 to 9 is 9, and 1\n    We put it before the digit 0, and the digit 1, and so on.\n    The digit 8 comes after 8, and the digit 9 comes before 9.\n    \n    We return the next bigger number.\n    '''\n    n = str(n)\n    n = n[::-1]\n    digits = n[1:]\n    return int(digits + '0' + digits[0])\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    output = 0\n    for i in range(len(str(n))):\n        output += int(str(n)[i])\n    return output\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    l = []\n    m = []\n    for i in range(len(s)):\n        if i % 2 == 1:\n            l.append(s[i])\n        else:\n            m.append(s[i])\n    return int(''.join(l) + ''.join(m))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(i) for i in str(n)]\n    for i in range(len(digits)):\n        digits[i] = digits[i]*10 + digits[i]\n    return digits[0]\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(str(n)) >= 3:\n        n = str(n)[2:]\n        if n.isdigit():\n            return int(n)\n    else:\n        return n\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    heap = []\n    result_dict = {}\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i] * -1, nums1[i], i))\n        result_dict[nums1[i]] = nums1[i]\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    n = len(nums1)\n    m = len(nums2)\n    pq = []\n    \n    if n == 0 or m == 0:\n        return []\n    \n    heapq.heappush(pq, (nums1[0] - nums2[0], 0, 0))\n    heapq.heappush(pq, (-nums1[0] - nums2[0], 0, 0))\n    heapq.heapify(pq)\n    \n    for _ in range(k):\n        # heapq.heappushpop(pq, (nums1[heapq.heappop(pq)[2]] - nums2[heapq.heappop(pq)[2]], heappop(pq), heappop(pq)[2]))\n        # heapq.heappushpop(pq, (nums1[heapq.heappop(pq)[2]] - nums2[heapq.heappop(pq)[2]], -heappop(pq), -heappop(pq)[2]))\n        heapq.heappush(pq, (-nums1[heapq.heappop(pq)[2]] - nums2[heapq.heappop(pq)[2]], 0, 0))\n        heapq.heappush(pq, (-nums1[heapq.heappop(pq)[2]] - nums2[heapq.heappop(pq)[2]], 0, 0))\n        heapq.heapify(pq)\n    \n    return pq\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return None\n    \n    # Sort the array in ascending order\n    nums1.sort()\n    nums2.sort()\n    \n    h = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j] and i < j:\n                heapq.heappush(h, (-num, i, j))\n                break\n    \n    ans = []\n    \n    while len(h)!= k:\n        tup = heapq.heappop(h)\n        ans.append((tup[2], tup[0], -tup[1]))\n    \n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1 = nums1 + [0]\n    nums2 = nums2 + [0]\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    n = len(nums1)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if nums1[i] + nums1[j] == nums2[i] + nums2[j]:\n                print(i, j)\n                heapq.heappush(nums1, nums1[j] * 2)\n                heapq.heappush(nums2, nums1[j] * 2)\n    print(nums1, nums2)\n    return n - heapq.nsmallest(k, (nums1, nums2))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    for _ in range(k):\n        if nums1[0] < nums2[0]:\n            heapq.heappop(nums1)\n            heapq.heappop(nums2)\n        else:\n            heapq.heappop(nums2)\n            heapq.heappop(nums1)\n    return len(nums1) + len(nums2)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    for num in nums1:\n        heapq.heappush(h, (-num, num))\n    for num in nums2:\n        heapq.heappush(h, (num, num))\n    for i in range(k):\n        small_pair = heapq.heappop(h)[1]\n        small_pair_num = heapq.heappop(h)[0]\n        heapq.heappush(h, (small_pair_num, small_pair))\n    small_pairs = []\n    for i in range(k):\n        small_pairs.append(heapq.heappop(h)[1])\n    return small_pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        # swap elements from first array\n        nums1, nums2 = nums2, nums1\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    \n    pairs = {}\n    \n    for i in nums1:\n        if i in pairs:\n            pairs[i] += 1\n        else:\n            pairs[i] = 1\n    \n    for i in nums2:\n        if i in pairs:\n            pairs[i] -= 1\n            if pairs[i] == 0:\n                del pairs[i]\n                \n    counts = {}\n    for i in range(len(nums1)):\n        counts[nums1[i]] = counts.get(nums1[i], 0) + 1\n        counts[nums2[i]] = counts.get(nums2[i], 0) - 1\n    \n    for i in range(len(counts)):\n        if counts[i]!= 0:\n            heapq.heappush(pairs[i], (counts[i]*2, i))\n        if counts[i]!= 0 and counts[i]!= 1:\n            heapq.heappush(pairs[i], (counts[i]*3, i))\n            \n    ans = []\n    for i in pairs:\n        if pairs[i][1]!= 0 and pairs[i][1]!= len(nums1) and pairs[i][0]!= 0 and pairs[i][0]!= len(nums2):\n            # print(pairs[i], pairs[i][0], pairs[i][1])\n            ans.append([pairs[i][0], pairs[i][1]])\n            \n    return ans\n    \n    \ndef find_elements(nums1, nums2):\n    '''\n    Find all elements in nums1 and nums2 which appear at least once in the corresponding array.\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    \n    res = []\n    for i in nums1:\n        if i in nums2:\n            res.append(i)\n    \n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    l = len(nums2)\n    \n    if k < 0 or k > n or l < n or l > n:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in nums1:\n        heapq.heappush(heap, -i)\n    \n    for i in nums2:\n        heapq.heappush(heap, -i)\n        \n    d = dict()\n    \n    while len(heap) > 0:\n        v = heapq.heappop(heap)\n        \n        if v in d:\n            continue\n            \n        if len(d) < k:\n            d[v] = v\n        \n        else:\n            break\n            \n    return len(d)\n        "
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            min_product = list1[i][0] * list1[j][1] if (list1[i][1] < list1[j][1]) else min_product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(list(zip(*list1)))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = list1[0][1]\n    for i in range(0, len(list1)):\n        if list1[i][1] < min_prod:\n            min_prod = list1[i][1]\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    \n    min_product = list1[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    print(\"The minimum product for a tuple is: \", end=\"\")\n    min_product=0\n    min_index=0\n    for i in range(len(list1)-1):\n        if list1[i][1]<list1[i+1][1]:\n            min_product=list1[i][1]\n            min_index=i\n    print(min_product, min_index)\n    print(list1[min_index])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = []\n    min_product_tuple = []\n    # Write your code here\n    \n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i == j:\n                continue\n            if list1[i][0] > list1[j][0] and list1[j][1] > list1[i][1]:\n                min_product.append(list1[i])\n                min_product_tuple.append(list1[j])\n            elif list1[i][0] > list1[j][0] and list1[j][1] < list1[i][1]:\n                min_product.append(list1[j])\n                min_product_tuple.append(list1[i])\n            elif list1[i][0] < list1[j][0] and list1[j][1] > list1[i][1]:\n                min_product.append(list1[i])\n                min_product_tuple.append(list1[j])\n    return min_product, min_product_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    min_tuple = ()\n    \n    for i in range(len(list1)):\n        for j in range(len(list1)-1):\n            if list1[i] < list1[j]:\n                min_product += list1[j]\n                min_tuple = (list1[i], list1[j])\n                break\n    return min_product, min_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return tuple(min(list1, key=lambda x:x[1]))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    if len(list1) == 1:\n        return list1[0][0]\n    \n    min_val = list1[0][0]\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][0] < min_val:\n                min_val = list1[i][0] * list1[j][0]\n                min_index = i\n    return min_val\n    "
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # use dict\n    d = {i: list1[i] for i in range(0, len(list1))}\n    # loop through\n    for i in range(0, len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            # if list1[i]*list1[j] > min_product_tuple(list2):\n            if (d[i]*d[j]) > min(d[i], d[j], list1[i]*list1[j]):\n                min_product_tuple(list1)\n    return d\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i<min_val:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    minindex = 0\n    for i in range(0, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n            minindex = i\n    return minval, minindex\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for i in range(len(listval)):\n        if listval[i] < listval[i]:\n            listval[i] = listval[i]\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = 0\n    if len(listval) > 0:\n        for item in listval:\n            if item < min_val:\n                min_val = item\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Count the number of values in the list\n    count = len(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in listval:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for x in listval:\n        if x < minval:\n            minval = x\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min = listval[0]\n    for element in listval:\n        if element < min:\n            min = element\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Find the smallest element in the list\n    minval = listval[0]\n    \n    # Traverse through the list\n    for i in range(len(listval)):\n        # If the value is less than the smallest element, update it\n        if listval[i] < minval:\n            minval = listval[i]\n    \n    # Return the smallest element\n    return minval\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(word.title() for word in re.findall(\"(?<!^)([A-Z][a-z])\",word))\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Your Code Here\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if re.search(\"^[a-z][A-Z]*$\", word) is None:\n        return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #Your Code\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word[:word.find('_')] + word[word.find('_')+1:word.find('_')+1+word.count('_')]\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    pattern = r'([a-z])([A-Z])'\n    match = re.search(pattern, word)\n    \n    result = \"\"\n    \n    if match:\n        result = word.title() + match.group(1)\n        \n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = word.lower()\n    d = re.findall(r'[A-Z][a-z]*$',s)\n    d = re.sub('_','',d)\n    d = d[:d.find('.')]\n    return ''.join(d.capitalize() for d in d)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    return ''.join(i.capitalize() for i in word.split('-'))\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower().strip()\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    x = []\n    for i in l:\n        if i % 2 == 1:\n            x.append(i)\n    return x\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) == 0:\n        return []\n    else:\n        if l[0] % 2 == 0:\n            return [l[0]] + remove_odd(l[1:])\n        else:\n            return [l[0]] + remove_odd(l[1:])\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    list_even = []\n    for i in l:\n        if i % 2 == 0:\n            list_even.append(i)\n    return list_even\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_num = []\n    for x in l:\n        if x%2==1:\n            odd_num.append(x)\n    return odd_num\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            l.remove(l[i])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1=[]\n    for i in l:\n        if i%2==1:\n            l1.append(i)\n    return l1\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l[i] = l[i]//2\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    \n    for i in l:\n        if i % 2!= 0:\n            odd.append(i)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    num = []\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            num.append(l[i])\n    return num\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    s=[]\n    for i in l:\n        if i % 2 == 0:\n            s.append(i)\n    return s\n    \n    \ndef not_even(l):\n    '''\n    Write a python function to count the number of even elements in a given list.\n    '''\n    s=0\n    for i in l:\n        if i % 2 == 0:\n            s+=1\n    return s\n    \ndef prime_number(l):\n    '''\n    Write a python function to check if a given list contains any prime numbers.\n    '''\n    s=[]\n    for i in l:\n        if is_prime(i):\n            s.append(i)\n    return s\n    \n    \ndef is_prime(x):\n    '''\n    Return True if x is a prime number, otherwise return False.\n    '''\n    if x == 2 or x == 3 or x == 5 or x == 7 or x == 11:\n        return True\n    elif x % 2 == 0 or x % 3 == 0 or x % 5 == 0 or x % 7 == 0:\n        return False\n    elif x < 2 or x > 12:\n        return False\n    i = 2\n    while i*i <= x:\n        if x%i==0:\n            return False\n        i+=1\n    return True\n    \n    \ndef main():\n    #print(remove_odd([1, 2, 3, 4, 5]))\n    #print(remove_odd([6, 8, 3, 6]))\n    #print(remove_odd([0, 1, 2, 3, 4, 5]))\n    #print(remove_odd([1, 2, 3, 4, 5, 6, 7]))\n    #print(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    #print(remove_odd([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\n    #print(not_even([2, 3, 5, 7, 11, 13]))\n    #print(prime_number([2, 3, 5, 7, 11, 13]))\n    #print(prime_number([0, 0]))\n    #print(prime_number([1, 2, 3, 4]))\n    #print(prime_number([3, 7]))\n    #print(prime_number([0]))\n    #print(prime_number([0, 1]))\n    #print(prime_number([6, 7, 8]))\n    #print(prime_number([6, 7, 8, 9]))\n    #print(prime_number([2, 3, 5, 7]))\n    #print(prime_number([0, 1, 2, 3, 4, 5]))\n    #print(prime_number([0, 0, 1, 2, 3, 4, 5]))\n    #print(prime_number([0, 0, 1, 2, 3, 4]))\n    #print(prime_number([1, 3, 2, 5, 7]))\n    #print(prime_number([0]))\n    #print(prime_number([2]))\n    #print(prime_number([1]))\n    #print(prime_number([1, 2]))\n    #print(prime_number([1, 2, 3, 4]))\n    #print(prime_number([1, 2, 3, 4, 5]))\n    #print(prime_number([1, 2, 3, 4, 5, 6, 7]))\n    #print(prime_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    #print(prime_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    #print(prime_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    #print(prime_number([3, 7, 2, 3, 5]))\n    #print(prime_number([3, 5]))\n    #print(prime_number([0, 1]))\n    #print(prime_number([0, 1, 2]))\n    #print(prime_number([0, 1, 2, 3, 4]))\n    #print(prime_number([0, 1, 2, 3, 4, 5]))\n    #print(prime_number([0, 0, 1, 2, 3, 4, 5]))\n    #print(prime_number([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    #print(prime_number([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    #print(prime_number([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for tup in list1:\n        list2.append(tup[n])\n    return tuple(list2)\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n<=0:\n        raise Exception('n must be greater than 0')\n    index=n-1\n    return list1[index]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    index = 0\n    result = ()\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return(list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if i == n:\n            return list1[i]\n    raise ValueError('Index %i not found.' % n)\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #Check if the length of the sequence is equal to one\n    if len(list1)!= len(list2):\n        return False\n    #Check if the sequence starts with 0\n    if list1[0]!= list2[0]:\n        return False\n    #Check if the sequence contains the first element of both the lists\n    elif not all(x == list1[0] for x in list2):\n        return False\n    #Then loop to compare the elements of the lists\n    for i in list1:\n        for j in list2:\n            #Check whether the elements of the sequence are equal\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list1.index(list2)!= 0\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if any(i in list1 for i in list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for i in list1:\n        if i in list2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list1[list1.index(min(list1))+1] in list2\n    \n    \n    \nif __name__ == '__main__':\n    list1 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #create empty string\n    string1 = \"\"\n    #create empty string\n    string2 = \"\"\n    #make length of each list\n    n = len(list1)\n    #loop through the lengths of the lists\n    for i in range(0,n):\n        #if the length of the list is 2\n        if len(list1[i])==2:\n            string1 += list1[i][0]\n            string2 += list1[i][1]\n            #append the string one to the other\n            for j in range(0,n):\n                if len(list1[j])==2:\n                    string1 += list1[j][0]\n                    string2 += list1[j][1]\n    #if the string is not empty\n    if len(string1)>0 and len(string2)>0:\n        #append the value one to the other\n        for i in range(0,n):\n            if len(list1[i])==2:\n                string1 += list1[i][0]\n                string2 += list1[i][1]\n    #if the string is not empty\n    else:\n        #append the value one to the other\n        for i in range(0,n):\n            if len(list1[i])==2:\n                string1 += list1[i][0]\n    #return the result\n    return string1==string2"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    flag=True\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if(list1[i]==list2[j]):\n                flag=False\n            else:\n                flag=True\n    return flag\n    \ndef main():\n    '''\n    Main Function\n    '''\n    \n    print('\\n{:=^40}'.format(' Loops in Python'))\n    \n    print('1. Array')\n    print('2. Sets')\n    print('3. Dictionaries')\n    print('4. Quit')\n    \n    \n    option=int(input('Please enter an option : '))\n    if option==1:\n        arr=[]\n        \n        print('\\n1. Size')\n        print('2. Display all the elements')\n        print('3. Sum of all elements')\n        print('4. Display all elements with even length')\n        print('5. Display all elements with odd length')\n        print('6. Display elements with even number of occurrences')\n        print('7. Display elements with odd number of occurrences')\n        print('8. Sort the array')\n        print('9. Reverse Sort the array')\n        print('10. Sort the array in ascending order')\n        print('11. Sort the array in descending order')\n        print('12. Sort the array in place')\n        print('13. Quit')\n        \n        choice=int(input('Please enter an option : '))\n        if choice==1:\n            print('The size of the array is',len(arr))\n            \n        elif choice==2:\n            print('The elements of the array are : ')\n            for i in range(len(arr)):\n                print(arr[i])\n        \n        elif choice==3:\n            print('The elements of the array are : ')\n            arr1=[]\n            for i in range(len(arr)):\n                arr1.append(arr[i])\n            print(arr1)\n        \n        elif choice==4:\n            print('The elements of the array are : ')\n            arr2=[]\n            for i in range(len(arr)):\n                arr2.append(arr[i])\n            print(arr2)\n        \n        elif choice==5:\n            print('The elements of the array are : ')\n            arr3=[]\n            for i in range(len(arr)):\n                arr3.append(arr[i])\n            print(arr3)\n        \n        elif choice==6:\n            print('The elements of the array are : ')\n            arr4=[]\n            for i in range(len(arr)):\n                arr4.append(arr[i])\n            print(arr4)\n        \n        elif choice==7:\n            print('The elements of the array are : ')\n            arr5=[]\n            for i in range(len(arr)):\n                arr5.append(arr[i])\n            print(arr5)\n        \n        elif choice==8:\n            print('The elements of the array are : ')\n            arr6=[]\n            for i in range(len(arr)):\n                arr6.append(arr[i])\n            print(arr6)\n        \n        elif choice==9:\n            print('The elements of the array are : ')\n            arr7=[]\n            for i in range(len(arr)):\n                arr7.append(arr[i])\n            print(arr7)\n        \n        elif choice==10:\n            print('The elements of the array are : ')\n            arr8=[]\n            for i in range(len(arr)):\n                arr8.append(arr[i])\n            print(arr8)\n        \n        elif choice==11:\n            print('The elements of the array are : ')\n            arr9=[]\n            for i in range(len(arr)):\n                arr9.append(arr[i])\n            print(arr9)\n        \n        elif choice==12:\n            print('The elements of the array are : ')\n            arr10=[]\n            for i in range(len(arr)):\n                arr10.append(arr[i])\n            print(arr10)\n        \n    elif option==2:\n        print('\\n1. Array')\n        print('2. Sets')\n        print('3. Dictionaries')\n        print('4. Quit')\n        \n        option=int(input('Please enter an option : '))\n        if option==1:\n            print('The size of the array is',len(set1))\n            \n        elif option==2:\n            print('The elements of the array are : ')\n            print(set1)\n        \n        elif option==3:\n            print('The elements of the array are : ')\n            print(set1)\n        \n        elif option==4:\n            print('The elements of the array are : ')\n            print(set1)\n        \n        elif option==5:\n            print('The elements of the array are : ')\n            print(set1)\n        \n        elif option==6:\n            print('The elements of the array are : ')\n            print(set1)\n        \n        elif option==7:\n            print('The elements of the array are : ')\n            print(set1)\n        \n        elif option==8:\n            print('The elements of the array are : ')\n            print(set1)\n        \n        elif option==9:\n            print('The elements of the array are : ')\n            print(set1)\n        \n        elif option==10:\n            print('The elements of the array are : ')\n            print(set1)\n        \n    elif option==3:\n        print('\\n1. Array')\n        print('2. Sets')\n        print('3. Dictionaries')\n        print('4. Quit')\n        \n        option=int(input('Please enter an option : '))\n        if option==1:\n            print('The size of the array is',len(str1))\n            \n        elif option==2:\n            print('The elements of the array are : ')\n            print(str1)\n        \n        elif option==3:\n            print('The elements of the array are : ')\n            print(str1)\n        \n        elif option==4:\n            print('The elements of the array are : ')\n            print(str1)\n        \n        elif option==5:\n            print('The elements of the array are : ')\n            print(str1)\n        \n        elif option==6:\n            print('The elements of the array are : ')\n            print(str1)\n        \n        elif option==7:\n            print('The elements of the array are : ')\n            print(str1)\n        \n        elif option==8:\n            print('The elements of the array are : ')\n            print(str1)\n        \n        elif option==9:\n            print('The elements of the array are : ')\n            print(str1)\n        \n        elif option==10:\n            print('The elements of the array are : ')\n            print(str1)\n        \n    elif option==4:\n        print('\\n1. Array')\n        print('2. Sets')\n        print('3. Dictionaries')\n        print('4. Quit')\n        \n        option=int(input('Please enter an option : '))\n        if option==1:\n            print('The size of the array is',len(set2))\n            \n        elif option==2:\n            print('The elements of the array are : ')\n            print(set2)\n        \n        elif option==3:\n            print('The elements of the array are : ')\n            print(set2)\n        \n        elif option==4:\n            print('The elements of the array are : ')\n            print(set2)\n        \n        elif option==5:\n            print('The elements of the array are : ')\n            print(set2)\n        \n        elif option==6:\n            print('The elements of the array are : ')\n            print(set2)\n        \n        elif option==7:\n            print('The elements of the array are : ')\n            print(set2)\n        \n        elif option==8:\n            print('The elements of the array are : ')\n            print(set2)"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if not list1 or not list2:\n        return False\n    d = dict()\n    for i in list1:\n        if not i in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in list2:\n        if not i in d:\n            return False\n        else:\n            if d[i] > 1:\n                return False\n            d[i] -= 1\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    overlapping = False\n    if len(list1) < len(list2):\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                overlapping = True\n            else:\n                overlapping = False\n                break\n        if overlapping == False:\n            return overlapping\n    else:\n        for i in range(len(list2)):\n            if list2[i] in list1:\n                overlapping = True\n            else:\n                overlapping = False\n                break\n        if overlapping == False:\n            return overlapping\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    \n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list3.append(list1[i])\n        elif i < len(list1):\n            if list1[i] > list1[i-1]:\n                if i == len(list2)-1:\n                    return True\n                elif list1[i-1] > list1[i]:\n                    list3.append(list1[i])\n                    list3.append(list1[i-1])\n                    return False\n                else:\n                    list3.append(list1[i])\n                    list3.append(list1[i-1])\n                    list3.append(list1[i+1])\n                    return False\n            else:\n                list3.append(list1[i])\n                list3.append(list1[i-1])\n                list3.append(list1[i+1])\n                return False\n        else:\n            if list1[i] > list1[i-1]:\n                list3.append(list1[i])\n                return False\n            else:\n                list3.append(list1[i])\n                list3.append(list1[i-1])\n                return False\n    return True\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 0: \n        return (0, -1)\n    elif len(arr) == 1:\n        return (arr[0], arr[0])\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_p = 0\n    i = 0\n    while i < n:\n        if arr[i] * arr[i] > max_p:\n            max_p = arr[i] * arr[i]\n            \n        i += 1\n        \n    return (max_p,i)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = -1\n    i = 0\n    while (i < n):\n        product = arr[i] * arr[i]\n        if (product > max_product):\n            max_product = product\n            index = i\n        i += 1\n    return arr[index], max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort() #Sort the array\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            if arr[i] * arr[j] > arr[j] * arr[i]:\n                return [arr[i], arr[j]]\n    return [-1, -1]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Create a dictionary to store the items \n    dict = {}\n    for i in range(len(arr)):\n        if arr[i] in dict:\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    # Take the maximum value as 1\n    max_val = max(dict.values())\n    # Find the key with the highest product\n    for key in dict:\n        if dict[key] == max_val:\n            return (key,arr[dict.index(max_val)])\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m = len(arr)\n    # l, r = 0, m-1\n    # while l < r:\n    #     if arr[l] * arr[r] > arr[m-1] * arr[m-2]:\n    #         return (arr[l], arr[r])\n    #     if arr[l] * arr[m-2] > arr[m-1] * arr[m-2]:\n    #         r -= 1\n    #         continue\n    #     if arr[l] * arr[r] < arr[m-2] * arr[m-1]:\n    #         l += 1\n    # return 0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_nums= arr[0]\n    max_product = 0\n    for item in arr:\n        if item > max_nums:\n            max_nums = item\n            max_product = item\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n=len(arr)\n    max_product=1\n    for i in range(n):\n        for j in range(i,n):\n            max_product=max(max_product*arr[i],arr[j])\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maximum = -1\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > maximum:\n                maximum = arr[i] * arr[j]\n                index = i\n                index2 = j\n    return index, index2\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = arr[i] * arr[j]\n            if product > arr[i] * arr[j]:\n                pairs.append((arr[i], arr[j], product))\n    return pairs[0]\narr = list(map(int, input(\"Enter elements separated by space: \").split()))\nprint(max_Product(arr)"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dict_list = {}\n    \n    for elem in Input:\n        if elem[0] not in dict_list:\n            dict_list[elem[0]] = 0\n        dict_list[elem[0]] += 1\n    \n    for k, v in dict_list.items():\n        if v > 1:\n            return k\n    \n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    if len(Input) < 1:\n        return None\n    else:\n        for elem in Input:\n            if elem not in result:\n                result.append(elem)\n        return result\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_ele = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i] == Input[j]:\n                common_ele.append(Input[i])\n    return common_ele\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l = []\n    for i in Input: \n        for j in Input: \n            if i == j: \n                l.append(i)\n    return l \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    T1 = list(Input)\n    T2 = list(Input)\n    if(len(T1) == len(T2)):\n        return T1\n    elif(len(T1) > len(T2)):\n        return T2\n    else:\n        return T1\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    grouped_tup = []\n    \n    for item in Input:\n        grouped_tup.append(item)\n    \n    common_first = grouped_tup[0]\n    \n    return common_first\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        raise ValueError(\"Empty input\")\n    output = []\n    for i in range(len(Input)):\n        if len(Output) == 0:\n            output.append(Input[i])\n        elif Output[0]!= Input[i]:\n            output.append(Output[0])\n            Output.pop(0)\n    return output\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    print(\"Type of list is\", type(Input))\n    print(\"Type of elements are\", type(Input[0]))\n    #we store all elements in the list as tuples\n    List = []\n    # we iterate from 0, to the number of list elements - 1, with the first element of each tuple\n    for i in range(0, len(Input), 1):\n        List.append(Input[i])\n    print(\"Tuple of list are\", List)\n    print(\"Element of common first element are :\", List[0])\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum = lst[0]\n    for element in lst:\n        if element > maximum:\n            maximum = element\n    return maximum\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst)\n    max_el = lst[0]\n    for el in lst:\n        if el > max_el:\n            max_len = max_len - 1\n            max_el = el\n    return max_len, max_el\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    temp=0\n    for i in lst:\n        temp+=i\n    return temp\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst == []:\n        return None\n    \n    if len(lst) == 1:\n        return lst[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) > 0: \n        max = lst[0] \n        for i in lst: \n            if i > max: \n                max = i \n        print(\"The maximum element is: \", max) \n    else: \n        print(\"The list is empty.\") \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0] \n    for i in range(len(lst)): \n        if lst[i] > max: \n            max = lst[i] \n    return max \n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Your code here\n    max = lst[0]\n    for i in range(len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    return max\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i], -1)\n    sum = 0\n    for i in range(len(list1)):\n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # return round(sum(list1),2)\n    # return round(sum(list1),1)\n    print(sum(list1))\n    return 0\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Your code here\n    \n    return (sum(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [int(i) for i in list1]\n    return sum(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    x = []\n    y = []\n    list1.sort()\n    for i in range(len(list1)):\n        x.append(list1[i])\n        y.append(i+1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for n in list1:\n        total_sum += n\n    return total_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        sum += round(list1[i], i)\n    print(sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    pass\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1.sort()\n    sum = 0\n    for i in list1:\n        sum += i\n    return sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    totalsum = 0\n    for num in list1:\n        totalsum += round(num,2)\n    print(totalsum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    l = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    c=0\n    for i in l:\n        if i%2==0:\n            c+=i\n    return c\nprint(cube_Sum(5))"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    i = 1\n    j = 1\n    cube = 0\n    while i <= n:\n        cube += i*i*i\n        i += 2\n        j += 2\n        i = j\n    return cube\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_list = []\n    for i in range(1,n+1):\n        cube_list.append(i**3)\n    return sum(cube_list)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # sum = 0\n    # for i in range(1, n+1):\n    #     sum += i**3\n    # return sum\n    \n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(n+1)//2\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if (n < 0): \n        print(\"The input number is not a valid input\")\n        return -1\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    print(sum)\n    return sum \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i*i*i\n    print(sum)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n % 2 == 0: \n        return n * cube_Sum(n//2) \n    else: \n        return n * (n + 1) "
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0: \n        return 0\n    elif n < 0: \n        print(\"Input is not valid\") \n        return 0\n    else: \n        return n*n*n \n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    try:\n        a, b = test_tup\n    except ValueError:\n        raise Exception('Tuple has wrong format')\n    return a, b\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ('{0}{1}{2}'.format(test_tup[0], test_tup[1], test_tup[2]))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    l = list(test_tup)\n    l.append('')\n    return tuple(l)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    arr = test_tup[0]\n    for i in range(1,len(test_tup)):\n        arr += test_tup[i]\n    return arr\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(test_tup)\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    if len(test_tup) > 1:\n        return ''.join(test_tup)\n    else:\n        return test_tup[0]\n    \n    \n    \ndef main():\n    '''\n    You'll write your own tests here.\n    '''\n    \n    test_tuple1 = ('z', 'x', 'o', 'i', 'e', 'b', 'd', 'l','m', 'u', 'j', 'c')\n    test_tuple2 = ('W', 'X', 'O', 'I', 'E', 'B', 'D', 'L', 'M', 'U', 'J', 'C')\n    \n    \n    for i in test_tuple1:\n        print(concatenate_tuple(test_tuple1))\n    \n    for i in test_tuple2:\n        print(concatenate_tuple(test_tuple2))\n        \nif __name__ == '__main__':\n    main()\n    "
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        new_tup.append(elem)\n    return tuple(new_tup)\n    \n    \ndef main():\n    '''\n    This is the main method.\n    '''\n    # the user should provide a filename as an argument and it should return \n    # the path to the file.\n    path = input('Give me a file name. (eg: meow.txt): ')\n    if path == '':\n        path ='meow.txt'\n    return path\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    output = ''\n    for tup in test_tup:\n        output = output + '\\t'.join(str(x) for x in tup)\n    return output\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(map(str, test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (\n        '{} {}'.format(*test_tup)\n        .replace('(', '(')\n        .replace(')', ')')\n        .replace(' ', '_')\n    )\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    for i in range(1,n+1):\n        if i == 1:\n            print(i)\n        else:\n            print(i, 'x', i*i, '=', (i*i*i))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import math\n    average = 0\n    for i in range(n):\n        average += (i ** 3)\n    average = math.ceil(average / (n * 9))\n    print(average)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_Average_Of_Cube(n - 1) + find_Average_Of_Cube(n - 2)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    total = 0\n    for i in range(1, n + 1):\n        total += num[i]\n    return total / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #Write your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return find_Average_Of_Cube(n-1) + find_Average_Of_Cube(n-2)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes=[]\n    for i in range(1,n+1):\n        cubes.append(i**3)\n    cubes=sum(cubes)\n    return cubes/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s=0\n    for i in range(0,n):\n        s+=i**3\n    return s/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_n = [int(i) ** 3 for i in range(n)]\n    print(f\"Average of cubes of {n} natural numbers is : {sum(cube_n) / len(cube_n)}\")\n    \nfind_Average_Of_Cube(5)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    cube_num = [i**3 for i in range(1, n+1)]\n    \n    return sum(cube_num)/n\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if test_tuple[i][0] == '#':\n            test_tuple[i] = test_tuple[i][1:]\n    return test_tuple\n    \n    \ndef extract_front(test_tuple):\n    '''\n    Write a function to extract only the front index element of each string in the given tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if test_tuple[i][0] == '#':\n            test_tuple[i] = test_tuple[i][1:]\n    return test_tuple\n    \n    \ndef extract_line(test_tuple):\n    '''\n    Write a function to extract only the line in the given string.\n    '''\n    for i in range(len(test_tuple)):\n        test_tuple[i] = test_tuple[i][1:]\n    return test_tuple\n    \n    \ndef extract_space(test_tuple):\n    '''\n    Write a function to extract only the space in the given string.\n    '''\n    for i in range(len(test_tuple)):\n        test_tuple[i] = test_tuple[i][1:]\n    return test_tuple\n    \n    \ndef extract_double(test_tuple):\n    '''\n    Write a function to extract only the double in the given string.\n    '''\n    for i in range(len(test_tuple)):\n        test_tuple[i] = test_tuple[i][1:]\n    return test_tuple\n    \n    \ndef extract_capital(test_tuple):\n    '''\n    Write a function to extract only the capitalized in the given string.\n    '''\n    for i in range(len(test_tuple)):\n        test_tuple[i] = test_tuple[i][1:]\n    return test_tuple\n    \n    \ndef split_string(test_string):\n    '''\n    Write a function to split the given string in the last element.\n    '''\n    test_string = test_string[:-1]\n    return test_string\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    values = list(test_tuple)\n    rear = []\n    for i in range(0, len(values)):\n        rear.append(values[i][len(values[i]) - 1])\n    return tuple(rear)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front, rear = test_tuple\n    return front, rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_strs = test_tuple[0]\n    test_indexes = test_tuple[1]\n    return [test_indexes[index] for index in test_indexes]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    tuple_list = []\n    for string in test_tuple:\n        if string[0] == 'R':\n            tuple_list.append(string[1:].strip('[]'))\n    return tuple_list\n    \ndef extract_front(test_tuple):\n    '''\n    Write a function to extract only the front index element of each string in the given tuple.\n    '''\n    tuple_list = []\n    for string in test_tuple:\n        if string[0] == 'F':\n            tuple_list.append(string[1:].strip('[]'))\n    return tuple_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[i] for i in range(len(test_tuple)))\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for index, value in enumerate(test_tuple):\n        if index % 2 == 0:\n            result.append(value)\n    return tuple(result)\n    \n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list_of_strings = test_tuple[0]\n    for string in list_of_strings:\n        string_index = list_of_strings.index(string)\n        list_of_strings[string_index] = \"\"\n    return list_of_strings\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_list = list(test_tuple)\n    return tuple(test_list[-3:])\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if item == x:\n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    lst=[]\n    for i in range(len(list1)):\n        if list1[i]==x:\n            lst.append(len(list1)-i)\n    return lst\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    l = 0\n    for el in list1:\n        if el == x:\n            l += 1\n    return l \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    total = 0\n    for item in list1:\n        if item == x:\n            total = total + 1\n    return total\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if (list1[i] == x):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([i for i in list1 if x in i])\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # current_index = 1\n    count = 0\n    while (current_index < len(list1)):\n        if list1[current_index] == x:\n            count = count + 1\n        current_index = current_index + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2 == 0:\n            odd_numbers.append(num)\n    return odd_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums = list(nums)\n    print(nums)\n    nums.sort()\n    print(nums)\n    print(nums[0:2])\n    nums.sort()\n    print(nums)\n    print(nums[-1:])\n    print(nums[1:3])\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!=0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for i in nums:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            nums.remove(num)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    print(\"filter_oddnumbers is running\")\n    print(nums)\n    for x in nums:\n        if x % 2!= 0:\n            print(x)\n    print(\"filter_oddnumbers is running\")\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if not i%2]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if len(dt) < 6 or len(dt) > 12:\n        print(\"Error: input date must be a yyyy-mm-dd format.\")\n        return -1\n    elif len(dt) == 12:\n        dt = dt +'' + dt[-2:]\n    elif len(dt) == 6:\n        dt = dt +'' + dt[-2:]\n        dt = dt +'' + dt[-2:]\n    else:\n        print(\"Error: date must be in yyyy-mm-dd format.\")\n        return -1\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Check if it's a date\n    if isinstance(dt, str):\n        # Check if it's a date\n        try:\n            dt = datetime.strptime(dt, '%Y-%m-%d')\n            # Convert to date\n            dt = datetime(dt.year, dt.month, dt.day)\n            # Convert to dd-mm-yyyy format\n            dt = dt.strftime(\"%d-%m-%Y\")\n            # Return\n            return dt\n        except ValueError:\n            # Convert to date\n            dt = datetime.strptime(dt, '%Y-%m-%d')\n            # Convert to dd-mm-yyyy format\n            dt = dt.strftime(\"%d-%m-%Y\")\n            # Return\n            return dt\n    else:\n        # Convert to date\n        dt = datetime.strptime(dt, '%Y-%m-%d')\n        # Convert to dd-mm-yyyy format\n        dt = dt.strftime(\"%d-%m-%Y\")\n        # Return\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        dt=dt.strip()\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('.') > 1:\n            dt=dt.split('.')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('/') > 1:\n            dt=dt.split('/')[0]\n        if dt.count('-') > 1:\n            dt=dt.split('-')[0]\n        if dt.count('.') > 1:\n            d"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #check if the date is a date\n    if not isinstance(dt, str):\n        raise TypeError(\"Input is not a date.\")\n    #get the year and month\n    year, month = dt.split('-')\n    #check if it is an integer\n    if not isinstance(year, int) or not isinstance(month, int):\n        raise TypeError(\"Input is not an integer.\")\n    #check if it is a date\n    if year > int('20'+year[0]):\n        raise TypeError(\"Year cannot be greater than 19\")\n    if month > int('20'+month[0]):\n        raise TypeError(\"Month cannot be greater than 19\")\n    #add the date to a string\n    #add yyyy-mm-dd format\n    return str(year) + '-' + str(month) + '-' + dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    a = re.findall(r\"(\\d{4})-(\\d{2})-(\\d{2})\", dt)\n    if len(a)!= 0:\n        b = a[0]\n        if len(b[0]) == 4:\n            c = b[0].split('-')\n            d = b[1].split('-')\n            e = b[2].split('-')\n            f = b[3].split('-')\n            dt = b[0] + \"-\" + e[0] + \"-\" + d[0] + \"-\" + c[0] + \"-\" + d[1] + \"-\" + f[1] + \"-\" + f[2] + \"-\" + e[1] + \"-\" + d[2] + \"-\" + c[1] + \"-\" + d[3]\n        elif len(b[0]) == 2:\n            c = b[0].split('-')\n            d = b[1].split('-')\n            e = b[2].split('-')\n            f = b[3].split('-')\n            dt = b[0] + \"-\" + e[0] + \"-\" + d[0] + \"-\" + c[0] + \"-\" + d[1] + \"-\" + f[1] + \"-\" + f[2] + \"-\" + e[1] + \"-\" + d[2] + \"-\" + c[1] + \"-\" + d[3]\n        else:\n            c = b[0].split('-')\n            d = b[1].split('-')\n            e = b[2].split('-')\n            f = b[3].split('-')\n            dt = b[0] + \"-\" + c[0] + \"-\" + d[0] + \"-\" + e[0] + \"-\" + f[0] + \"-\" + f[1] + \"-\" + f[2] + \"-\" + e[1] + \"-\" + d[2] + \"-\" + c[1] + \"-\" + d[3]\n    else:\n        dt = dt.split('-')\n        dt[0] = dt[0][:-3]\n        dt[2] = dt[2][:-3]\n        dt = \"20\" + dt[0] + \"-\" + dt[1] + \"-\" + dt[2] + \"-\" + dt[3]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.replace('-','')\n    dt = dt.replace(' ','-')\n    dt = dt.replace(' ','-')\n    dt = dt.replace('-','')\n    dt = dt.split('-')\n    return dt[2] + '-' + dt[1] + '-' + dt[0]\n    \ndef date_is_valid(dt):\n    '''\n    Write a function that checks if a date is valid.\n    '''\n    return dt.replace('-',' ')\n    \ndef get_date(dt):\n    '''\n    Write a function that takes a date as a string and returns the correct date in yyyy-mm-dd format.\n    '''\n    d = re.search('\\d{4}-\\d{2}-\\d{2}', dt)\n    if d:\n        return d.group()\n    else:\n        return dt\n    \ndef is_valid_date(dt):\n    '''\n    Write a function that checks if a date is a valid date in yyyy-mm-dd format.\n    '''\n    return re.search(r'^\\d{4}-\\d{2}-\\d{2}$', dt)\n    \ndef day_of_month(dt):\n    '''\n    Write a function that takes a date as a string and returns the number of days in a month.\n    '''\n    month = int(dt[5:7])\n    day = int(dt[0:2])\n    if (month > 12) or (month == 12 and day > 31):\n        month -= 1\n    return month * 30 + day\n    \ndef month_of_day(dt):\n    '''\n    Write a function that takes a date as a string and returns the number of days in a month.\n    '''\n    month = int(dt[5:7])\n    day = int(dt[0:2])\n    if (month > 12) or (month == 12 and day > 31):\n        month -= 1\n    return month\n    \ndef year(dt):\n    '''\n    Write a function that takes a date as a string and returns the date in the format YYYY.\n    '''\n    month = int(dt[5:7])\n    day = int(dt[0:2])\n    return dt[0:4] + '.' + dt[4:6] + '.' + dt[6:8] + '.' + dt[8:10] + '.' + dt[10:12]\n    \ndef time_is_valid(dt):\n    '''\n    Write a function that checks if a time is valid.\n    '''\n    h = re.search(r'^[0-1]{2}$', dt)\n    if h:\n        return True\n    else:\n        return False\n    \ndef get_time(dt):\n    '''\n    Write a function that takes a date as a string and returns the correct time in HH:MM format.\n    '''\n    time_split = dt.split(':')\n    if len(time_split) == 1:\n        return '0' + time_split[0]\n    else:\n        return time_split[0] + ':' + time_split[1]\n    \ndef is_time_valid(dt):\n    '''\n    Write a function that checks if a time is a valid time in HH:MM format.\n    '''\n    time = re.search(r'^(0[1-9])[0-1]\\:([0-5]\\d):([0-5]\\d)$', dt)\n    if time:\n        return True\n    else:\n        return False\n    \ndef is_date(dt):\n    '''\n    Write a function that checks if a date is a valid date in yyyy-mm-dd format.\n    '''\n    return re.search(r'^\\d{4}-\\d{2}-\\d{2}$', dt)\n    \ndef parse_date(dt):\n    '''\n    Convert a string to a date in yyyy-mm-dd format.\n    '''\n    dt = dt.replace('-','')\n    dt = dt.replace(' ','-')\n    dt = dt.replace(' ','-')\n    dt = dt.split('-')\n    return change_date_format(dt[0]) + '-' + change_date_format(dt[1]) + '-' + change_date_format(dt[2]) + '-' + change_date_format(dt[3])\n    \ndef parse_time(dt):\n    '''\n    Convert a string to a time in HH:MM format.\n    '''\n    return get_time(dt)\n    \ndef parse_date_time(dt):\n    '''\n    Convert a string to a date and time in yyyy-mm-dd-HH-MM format.\n    '''\n    return '{0}-{1}-{2} {3}:{4}:{5}'.format(change_date_format(dt[5]), change_date_format(dt[6]), change_date_format(dt[7]), change_date_format(dt[8]), change_date_format(dt[9]), change_date_format(dt[10]))\n    \ndef format_date(dt):\n    '''\n    Convert a date into a format that can be used for the HTTP request URL.\n    '''\n    return change_date_format(dt)\n    \ndef format_time(dt):\n    '''\n    Convert a time into a format that can be used for the HTTP request URL.\n    '''\n    return get_time(dt)\n    \ndef format_date_time(dt):\n    '''\n    Convert a date and time into a format that can be used for the HTTP request URL.\n    '''\n    return '{0} {1}'.format(format_date(dt[0]), format_time(dt[1]))\n    \ndef is_invalid_date(dt):\n    '''\n    Convert a string to a date in yyyy-mm-dd format and check if it is invalid.\n    '''\n    dt = dt.replace('-',' ')\n    dt = dt.replace(' ','-')\n    dt = dt.replace(' ','-')\n    dt = dt.split('-')\n    if len(dt)!= 3:\n        return True\n    if dt[1]!= '0':\n        return True\n    if len(dt) == 3 and dt[2]!= '0':\n        return True\n    else:\n        return False\n    \ndef is_invalid_time(dt):\n    '''\n    Convert a string to a time in HH:MM format and check if it is invalid.\n    '''\n    return not is_time_valid(dt)\n    \ndef is_valid_date_time(dt):\n    '''\n    Convert a date and time to HH:MM and HH:MM format and check if it is valid.\n    '''\n    return not is_date_valid(dt) and not is_time_valid(dt)\n    \ndef is_valid_date_time_timedelta(dt, td):\n    '''\n    Convert a date, time and timedelta to HH:MM format and check if it is valid.\n    '''\n    return not is_date_valid(dt) and not is_time_valid(dt) and not is_time_valid(dt) and not is_time_valid(dt) and not is_time_valid(dt) and not is_time_valid(dt) and not is_time_valid(dt)\n    \ndef is_date_time_timedelta(dt, td):\n    '''\n    Convert a date, time, and timedelta to HH:MM format and check if it is valid.\n    '''\n    return not is_date_valid(dt) and not is_time_valid(dt) and is_time_valid(dt) and not is_time_valid(dt) and not is_time_valid(dt) and not is_time_valid(dt) and not is_time_valid(dt) and not is_time_valid(dt)\n    \ndef format_datetime(dt):\n    '''\n    Convert a dat"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    date = dt.split('-')\n    \n    if len(date) < 3:\n        return \"error\"\n    \n    month = date[0]\n    day = date[1]\n    year = date[2]\n    \n    new_date = str(day) + \"-\" + month + \"-\" + year\n    \n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #split each item on a dash and find the year\n    m = re.search('^\\d{4}$', dt)\n    d = re.search('^\\d{4}', dt)\n    #find the month and day of month\n    if m:\n        m = m.group(0)\n    else:\n        m = '12'\n        d = re.search('^\\d{2}$', dt)\n    if d:\n        d = d.group(0)\n    else:\n        d = '12'\n    return f'{d}-{m}-{dt[5:]}'\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split('-')\n    if len(d) == 2:\n        # assume that the last character is the day\n        d.append('0')\n    d.append(dt[-1])\n    # new date:\n    # d = datetime.strptime(dt, '%Y-%m-%d')\n    new_date = '-'.join(d)\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    print(dt)\n    if len(dt) == 3:\n        y, m, d = dt\n        print('=========================')\n        print(f'yyyy-mm-dd:{d}-{m}-{y}')\n        print('=========================')\n    else:\n        print('Please enter a date in the format yyyy-mm-dd')\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    h = len(my_list)\n    for i in range(h):\n        for j in range(h-i-1):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    num_list = len(my_list)\n    for i in range(num_list):\n        for j in range(i,num_list):\n            item = my_list[i]\n            j = i\n            while j>=i and item < my_list[j]:\n                my_list[j+1] = my_list[j]\n                j += 1\n            my_list[j+1] = item\n    return my_list\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            j = i\n            while j >= gap and my_list[j] > my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n    print(\"Sorted array is: \")\n    for i in range(len(my_list)):\n        print(my_list[i], end=' ')\n    print()\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            my_list[i], my_list[i - gap] = my_list[i - gap], my_list[i]\n        gap = gap // 2\n    print(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_helper(my_list, length, start):\n        '''\n        Start from the beginning and continue until the next array element is sorted\n        '''\n        #loop through the unsorted part of the list\n        for i in range(start, length, 1):\n            #find the middle point of the unsorted part\n            #i.e, middle point of the unsorted array\n            #if the array is sorted\n            #jump from this point and move the array half size\n            #on the right half\n            #i.e, this is now the middle element\n            #and we can jump to the next element\n            #swapping the middle element and the array\n            #we are done\n            #on the right side\n            #and the next one on the left side\n            if i + 1 <= length:\n                #start swap at i\n                #stop swapping at i\n                #i is now the new middle\n                #then swap the two adjacent elements\n                j = i + 1\n                while j < length:\n                    #keep swapping until the next element is at the end\n                    #then we are at the end of the array\n                    #then we are at the end of the array and we have the unsorted array\n                    if my_list[j] < my_list[j + 1]:\n                        #swap the values\n                        my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n                        #we are done with our iteration\n                        #jump to the next index\n                        j += 1\n                    #print(my_list)\n                    #now we have swapped the two elements\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Implement shell sort here\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_rec(a,p):\n        n = len(a)\n        l = 0\n        r = n-1\n        while l <= r:\n            m = int((l+r)/2)\n            while m <= n-p and a[m] > a[m+p]:\n                a[m], a[m+p] = a[m+p], a[m]\n                m = m+p\n            while m > l and a[m] > a[m-p]:\n                a[m], a[m-p] = a[m-p], a[m]\n                m = m-p\n        a[n-1], a[0] = a[0], a[n-1]\n        return\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    i = 0\n    while i < len(my_list):\n        j = i\n        while j >= 0 and my_list[j] < my_list[j + 1]:\n            my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n            j -= 1\n        i += 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n    # /////////////// BEGIN SOLUTION ///////////////\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if test_tup1 and test_tup2:\n        return test_tup1 and test_tup2\n    else:\n        return False\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in test_tup1:\n        for j in test_tup2:\n            result.append(i + j)\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    assert isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple), 'tuples expected'\n    assert len(test_tup1) == 2, 'tuples expected'\n    assert len(test_tup2) == 2, 'tuples expected'\n    \n    # Extract elementwise and tuples\n    # Extract the first element\n    first_element = test_tup1[0]\n    # Extract the second element\n    second_element = test_tup2[0]\n    # Return the first element and second element\n    return first_element, second_element\n    \n    \n    # Extract elementwise and tuples\n    # Extract the first element\n    first_element = test_tup1[0]\n    # Extract the second element\n    second_element = test_tup2[1]\n    # Return the first element and second element\n    return first_element, second_element\n    \n    \n    \n    \n    # Return tuples as first element\n    # Extract the second element\n    second_element = test_tup2[0]\n    # Return tuples as second element\n    first_element = test_tup1[1]\n    # Return tuples as first element\n    second_element = test_tup2[1]\n    # Return tuples as second element\n    first_element = test_tup1[0]\n    # Return tuples as first element\n    second_element = test_tup2[0]\n    # Return tuples as second element\n    first_element = test_tup1[1]\n    # Return tuples as first element\n    second_element = test_tup2[1]\n    # Return tuples as second element\n    first_element = test_tup1[0]\n    # Return tuples as second element\n    second_element = test_tup2[0]\n    # Return tuples as first element\n    first_element = test_tup1[1]\n    # Return tuples as second element\n    second_element = test_tup2[1]\n    # Return tuples as first element\n    first_element = test_tup1[0]\n    # Return tuples as second element\n    second_element = test_tup2[0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # get the first tuple\n    if test_tup1.count(())!= 1:\n        return 0\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # O(n) - time\n    # O(1) - space\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Error: len(test_tup1)!= len(test_tup2)')\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i][0]\n            test_tup2[i] = test_tup2[i][0]\n        return test_tup1, test_tup2\n    \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Error: len(test_tup1)!= len(test_tup2)')\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i][0]\n            test_tup2[i] = test_tup2[i][0]\n        return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup = test_tup1 + test_tup2\n    return tuple(test_tup)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Number of tuples must match')\n    \n    if len(test_tup1) > len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    \n    return [test_tup1[i] and test_tup2[i] for i in range(len(test_tup1))]\n    \n    "
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a==0:\n        print(\"\\n\", \"-\"*20)\n        print(\"The directrix of a parabola is :\")\n        print(\"bx\",b)\n    if a!=0:\n        if b**2+a**2==c:\n            print(\"\\n\", \"-\"*20)\n            print(\"The directrix of a parabola is :\")\n            print(\"bx\",b)\n        elif b**2+a**2>c:\n            x=b+((b**2)-(4*a*c))**0.5\n            print(\"\\n\", \"-\"*20)\n            print(\"The directrix of a parabola is :\")\n            print(\"bx\",b)\n            print(\"y =\",x)\n        else:\n            print(\"\\n\", \"-\"*20)\n            print(\"The directrix of a parabola is :\")\n            print(\"bx\",b)\n            x1=b+((b**2)-(4*a*c))**0.5\n            x2=b-((b**2)-(4*a*c))**0.5\n            print(\"y =\",x1)\n            print(\"y =\",x2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == b and c!= 0:\n        return (-1)**(1/2)*(1+c)**2\n    else:\n        return -1\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a >= 0 and b >= 0 and c >= 0):\n        if (a ** 2 + b ** 2 == c ** 2):\n            return (a**2 + b**2)\n        else:\n            return 'ERROR: Invalid Parabola'\n    else:\n        return 'ERROR: Invalid Parabola'\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return [a*x**2+b*x+c for x in range(0,2)]\n    # Write your code here\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Your code goes here\n    return\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    f = lambda x: (x**2)*(3*a*x**2 + c) - 3*a*x - c\n    result = list(map(f, range(a, b + 1,.01)))\n    return result\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Check the values of a,b and c\n    if (a <= 0) or (b <= 0) or (c <= 0):\n        return 'Invalid input values!'\n    else:\n        # Calculate the value of the respective function\n        return abs(a)*b*c**2 - 2*a*b*c*(b**2 - 4*a*c + 2*c**2 - 4*a**2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a*b + c\n    y = 2*a*b*c\n    print('x =', x)\n    print('y =', y)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    #if a,b,c are not positive integers, return 0\n    if isinstance(a, int) and isinstance(b, int) and isinstance(c, int):\n        if a > 0 and b > 0 and c > 0:\n            x1,y1 = a,b\n            x2,y2 = x1**2+y1**2+c,x1**2+y1**2\n            x3,y3 = x2**2+y2**2+c,x2**2+y2**2\n            if x3 > x1 and y3 > y1:\n                return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # write your code here\n    x = [0] * (b - a)\n    for i in range(b-a):\n        x[i] = (c * i) + a\n    return x\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return False\n    else:\n        return True\n        \ndef common_elements(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    a = set(list1)\n    b = set(list2)\n    return len(a.intersection(b)) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # -------------------------------------------------------\n    # COMPLETE THIS FUNCTION\n    # -------------------------------------------------------\n    # hint: if a and b are lists, then you can use the functions from list.count() and list.index()\n    # return 1 or 0, if there is at least one common element\n    # return -1 if there is no common element\n    \n    # -------------------------------------------------------\n    # COMPLETE THIS FUNCTION\n    # -------------------------------------------------------\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == len(list2):\n        return len(set(list1)) == len(list2)\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # YOUR CODE HERE\n    if len(list1) == len(list2):\n        return True\n    else:\n        return False\n    \n    \ndef common_elements2(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # YOUR CODE HERE\n    if len(list1) == len(list2):\n        return len(list1)\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n    if count == 0:\n        return False\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #'init' list1 and list2\n    list1=list(list1)\n    list2=list(list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_index = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common_index.append(list2.index(list1[i]))\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            common_index.append(list1.index(list2[i]))\n    return len(common_index) == 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # write your code here\n    \n    return 0.5*(height+base1+base2)"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    i=0\n    j=0\n    h=height\n    base1=base1-base2\n    base2=base2-base1\n    while j<h:\n        if i%2==0:\n            base3=(base1+base2)/2\n            j+=1\n            if base3>base1 and base3<base2:\n                base2=base3\n            else:\n                base3=base2\n        else:\n            base3=(base1+base2)/2\n            i+=1\n            if base3>base1 and base3<base2:\n                base2=base3\n            else:\n                base3=base2\n    return (base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    length_a = base1 + base2\n    length_b = (base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median=[]\n    len_base1=len(base1)\n    len_base2=len(base2)\n    if (len_base1+len_base2)%2==0:\n        suma=0\n        for i in range(len_base1):\n            suma+=base1[i]\n        median.append(suma/2)\n        median.append(suma/2)\n        for i in range(len_base1,len_base1+len_base2):\n            suma=0\n            for j in range(len_base2):\n                suma+=base2[j]\n            median.append(suma/2)\n        median.append(suma/2)\n        median.append(suma/2)\n    else:\n        for i in range(len_base2):\n            suma=0\n            for j in range(len_base1):\n                suma+=base1[j]\n            median.append(suma/2)\n        for i in range(len_base1,len_base1+len_base2):\n            suma=0\n            for j in range(len_base2):\n                suma+=base2[j]\n            median.append(suma/2)\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    x=[]\n    y=[]\n    s = 0\n    m = 0\n    for i in range(height):\n        for j in range(base1):\n            s = s + height\n        for j in range(base2):\n            m = m + height\n        x.append(s / m)\n        s = 0\n        m = 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # get both lengths\n    m1 = base1[0]\n    m2 = base2[0]\n    # get max difference\n    d = max(abs(m1[0]-m2[0]),abs(m1[1]-m2[1]))\n    # get the middle point of the trapezium\n    m3 = (m1[0]+m2[0], m1[1]+m2[1])\n    # get the centre point of the trapezium\n    c = (m3[0]-d/2, m3[1]-d/2)\n    # get the midpoints of both trapeziums\n    pt1 = (c[0]-height, c[1])\n    pt2 = (c[0]+height, c[1])\n    # get the medians\n    m0 = median_1d(pt1,pt2)\n    m1 = median_1d(pt1,pt2,height)\n    m2 = median_1d(pt1,pt2,height)\n    m3 = median_1d(pt1,pt2,height)\n    # return the median\n    return (m0,m1,m2,m3)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==1:\n        return (base1+base2)/2\n    elif height==2:\n        return (base1+base2+height)/2\n    else:\n        return ((base1+base2)/2)*(height**2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height=float(height)\n    median=(base1+base2)/2\n    if height > 0:\n        return (height/2)*(median) + (height/2)*(base1+base2)\n    else:\n        return 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def length_trapezium(a,b,h):\n        return (a+b)/2*h\n    \n    def trapezium_sum(a,b,h):\n        sum=a+b\n        if sum>=h:\n            return sum\n        else:\n            return trapezium_sum(b,sum/2,h-1)\n    \n    def trapezium(a,b,h):\n        if a>=b:\n            a,b=b,a\n        if height>=h:\n            return height\n        else:\n            return trapezium(a,b,h-1)\n    \n    sum_b=base1+base2\n    sum_t=trapezium_sum(base1,base2,height)\n    l=length_trapezium(base1,sum_b,sum_t)\n    return l\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0:\n        return 0\n    elif height==1:\n        return 1\n    else:\n        #if the height of the trapezium is even,\n        #then we return half of the height\n        if (base1+base2)%2==0:\n            return (height*(height-1)/2)\n        #if the height of the trapezium is odd,\n        #then we return the average of the first half and the second half\n        else:\n            first = (base1+base2)//2\n            second = (height-first)*(height-first)/2\n            return (first+second)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # create a list that contains the items\n    new_list = list(arr)\n    for i in new_list:\n        if i < number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n    \ndef check_less(arr, number):\n    '''\n    Write a function to check whether the entered number is less than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] < number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    #0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for i in range(len(arr) - 1):\n        if arr[i] > number:\n            flag = True\n            break\n    if not flag:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] > number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    elif arr[0] >= number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] >= number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    result = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr.count(number)>1:\n        return False\n    else:\n        if arr.count(number)>0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'[a-zA-Z]+', text)\n    if len(match) == 0:\n        return None\n    else:\n        return match\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'\\w+a')\n    return pattern.match(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    b_pattern = 'b'\n    pattern = re.compile(b_pattern)\n    result = pattern.search(text)\n    if result is None:\n        print('No match')\n    else:\n        print(result.group())\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return text.find('a')!= -1 or text.find('b')!= -1 or text.find('c')!= -1 or text.find('d')!= -1 or text.find('e')!= -1 or text.find('f')!= -1\n    # return text.find('b')!= -1 or text.find('c')!= -1 or text.find('d')!= -1 or text.find('e')!= -1 or text.find('f')!= -1\n    # or text.find('b')!= -1 or text.find('c')!= -1 or text.find('d')!= -1 or text.find('e')!= -1 or text.find('f')!= -1\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'a\\s+(b\\s+)?[^a]*', text)\n    if match:\n        print(\"found\")\n        return True\n    else:\n        print(\"not found\")\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #test = \"abacabaabacabaabacabaabacabaabacabaabacabaabacabaabacaba\"\n    #test = \"abacabaabacabaabacabaabacabaabacabaabacabaabacabaabacaba\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdabcabcabc\"\n    #test = \"abcdefghijklmnopqrstuvwxyz\"\n    #test = \"abcdefghijklmno"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #split out the string\n    text_1=re.split('[a-z]', text)\n    return len(text_1) > 1\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # text = re.sub(r'[\\s]', '', text)\n    text = re.sub(r'[a-zA-Z]', r'a', text)\n    text = re.sub(r'[^\\s]', '', text)\n    text = re.sub(r'\\\\', r'', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n', text)\n    text = re.sub(r'\\\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.sub(r'\\\\\\n', r'\\\\n\\n', text)\n    text = re.su"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.sub(r'\\b(a)|(b)', r'a', text)\n    return text\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'a{2,}b'\n    #pattern = re.compile(pattern)\n    pattern = re.compile(pattern, re.IGNORECASE)\n    #print('pattern:', pattern)\n    #print('pattern.search(text):', pattern.search(text))\n    #print('pattern.match(text):', pattern.match(text))\n    return pattern.search(text)\n    #print('pattern.search(text):', pattern.search(text))\n    #print('pattern.match(text):', pattern.match(text))\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    result = 0\n    while n > 0 :\n        n, d = divmod(n, 10)\n        result = result * 10 + d\n    return result\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    result = 0\n    for x in str(n) :\n        result += int(x)\n    return result\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_2(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \ndef last_Digit_3(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_4(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_5(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_6(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_7(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_8(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_9(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_10(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_11(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_12(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_13(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_14(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_15(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_16(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_17(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_18(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_19(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_20(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_21(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_22(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_23(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_24(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_25(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_26(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_27(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_28(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_29(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_30(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_31(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_32(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_33(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n - 9\n    \n    \ndef last_Digit_34(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if "
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    m = len(str(n))\n    return int(str(n)[-m-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return str(n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n <= 0 :\n        return \"Invalid input. The input must be greater than 0\"\n    else :\n        return str(n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # your code here\n    return n%10\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for i in list1:\n        if i < 0:\n            neg_nums.append(i)\n        else:\n            neg_nums.append(-i)\n    return neg_nums\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    output = []\n    for i in list1:\n        output.append(-i)\n    return output\n    \n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg=[]\n    for i in list1:\n        if i<0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        i=i*(-1)\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for elem in list1:\n        list2.append(-elem)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Your code here\n    list1 = list(map(neg, list1))\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_nos = []\n    for i in range(len(list1)):\n        negative_nos.append(-list1[i])\n    return negative_nos\n    \ndef add_neg_nos(list1, list2):\n    '''\n    Write a python function to add two list of positive nos to a new list of negative nos.\n    '''\n    add_negative_nos = []\n    for i in range(len(list1)):\n        add_negative_nos.append(list1[i] + list2[i])\n    return add_negative_nos\n    \ndef sum_neg_nos(list1):\n    '''\n    Write a python function to sum the negative nos in a list.\n    '''\n    sum_negative_nos = 0\n    for i in range(len(list1)):\n        sum_negative_nos += list1[i]\n    return sum_negative_nos\n    \ndef avg_neg_nos(list1):\n    '''\n    Write a python function to compute the average of the negative nos in a list.\n    '''\n    avg_negative_nos = 0\n    for i in range(len(list1)):\n        avg_negative_nos += list1[i]\n    avg_negative_nos = avg_negative_nos / len(list1)\n    return avg_negative_nos\n    \ndef max_neg_nos(list1):\n    '''\n    Write a python function to compute the maximum of the negative nos in a list.\n    '''\n    max_negative_nos = 0\n    for i in range(len(list1)):\n        if list1[i] > max_negative_nos:\n            max_negative_nos = list1[i]\n    return max_negative_nos\n    \ndef min_neg_nos(list1):\n    '''\n    Write a python function to compute the minimum of the negative nos in a list.\n    '''\n    min_negative_nos = 0\n    for i in range(len(list1)):\n        if list1[i] < min_negative_nos:\n            min_negative_nos = list1[i]\n    return min_negative_nos\n    \ndef sum_neg_nums(list1):\n    '''\n    Write a python function to compute the sum of all the negative nos in a list.\n    '''\n    sum_negative_nums = 0\n    for i in range(len(list1)):\n        sum_negative_nums += list1[i]\n    return sum_negative_nums\n    \ndef avg_neg_nums(list1):\n    '''\n    Write a python function to compute the average of all the negative nos in a list.\n    '''\n    avg_negative_nums = 0\n    for i in range(len(list1)):\n        avg_negative_nums += list1[i]\n    avg_negative_nums = avg_negative_nums / len(list1)\n    return avg_negative_nums\n    \ndef max_neg_num(list1):\n    '''\n    Write a python function to compute the maximum of all the negative nos in a list.\n    '''\n    max_negative_num = 0\n    for i in range(len(list1)):\n        if list1[i] > max_negative_num:\n            max_negative_num = list1[i]\n    return max_negative_num\n    \ndef min_neg_num(list1):\n    '''\n    Write a python function to compute the minimum of all the negative nos in a list.\n    '''\n    min_negative_num = 0\n    for i in range(len(list1)):\n        if list1[i] < min_negative_num:\n            min_negative_num = list1[i]\n    return min_negative_num\n    \ndef size_list(list1):\n    '''\n    Write a python function to compute the size of a list.\n    '''\n    size_list = 0\n    for i in range(len(list1)):\n        size_list += 1\n    return size_list\n    \ndef min_index(list1):\n    '''\n    Write a python function to find the smallest element in a list.\n    '''\n    min_index = 0\n    for i in range(len(list1)):\n        if list1[i] < list1[min_index]:\n            min_index = i\n    return min_index\n    \ndef max_index(list1):\n    '''\n    Write a python function to find the largest element in a list.\n    '''\n    max_index = 0\n    for i in range(len(list1)):\n        if list1[i] > list1[max_index]:\n            max_index = i\n    return max_index\n    \ndef max_index_list(list1):\n    '''\n    Write a python function to find the largest element in a list.\n    '''\n    max_index_list = 0\n    for i in range(len(list1)):\n        if list1[i] > max_index_list:\n            max_index_list = list1[i]\n    return max_index_list\n    \ndef min_index_list(list1):\n    '''\n    Write a python function to find the smallest element in a list.\n    '''\n    min_index_list = 0\n    for i in range(len(list1)):\n        if list1[i] < min_index_list:\n            min_index_list = list1[i]\n    return min_index_list\n    \ndef count_neg_list(list1):\n    '''\n    Write a python function to count the number of negative nos in a list.\n    '''\n    count_negative_list = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            count_negative_list += 1\n    return count_negative_list\n    \ndef count_zero_list(list1):\n    '''\n    Write a python function to count the number of all non-negative nos in a list.\n    '''\n    count_zero_list = 0\n    for i in range(len(list1)):\n        if list1[i]!= 0:\n            count_zero_list += 1\n    return count_zero_list\n    \ndef max_index_list_zero(list1):\n    '''\n    Write a python function to find the largest element in a list.\n    '''\n    max_index_zero_list = 0\n    for i in range(len(list1)):\n        if list1[i]!= 0:\n            max_index_zero_list = i\n    return max_index_zero_list\n    \ndef min_index_zero(list1):\n    '''\n    Write a python function to find the smallest element in a list.\n    '''\n    min_index_zero = 0\n    for i in range(len(list1)):\n        if list1[i]!= 0:\n            min_index_zero = i\n    return min_index_zero\n    \ndef count_zero_list_zero(list1):\n    '''\n    Write a python function to count the number of all non-negative nos in a list.\n    '''\n    count_zero_list_zero = 0\n    for i in range(len(list1)):\n        if list1[i]!= 0:\n            count_zero_list_zero += 1\n    return count_zero_list_zero\n    \ndef zero_list(list1):\n    '''\n    Write a python function to find the largest element in a list.\n    '''\n    zero_list = 0\n    for i in range(len(list1)):\n        if list1[i] == 0:\n            zero_list += 1\n    return zero_list\n    \ndef list_len(list1):\n    '''\n    Write a python function to compute the length of a list.\n    '''\n    return len(list1)\n    \ndef remove_neg_list(list1):\n    '''\n    Write a python function to remove all negative nos from a list.\n    '''\n    remove_negative_list = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            remove_negative_list.append(list1[i])\n    for i in range(len(remove_negative_list)):\n        list1.remove(remove_negative_list["
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative=[]\n    for x in list1:\n        negative.append(-x)\n    return negative\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(-i)\n    return list2\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if str1[i] % 2 == 0:\n            count += 1\n    if count % 2!= 0:\n        str1 = str1[:len(str1) - count]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if not str1:\n        return str1\n    s1 = list(str1)\n    s1[0], s1[-1] = s1[-1], s1[0]\n    return \"\".join(s1)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    list_str = []\n    \n    for char in str1:\n        if char % 2!= 0:\n            list_str.append(char)\n    \n    return ''.join(list_str)\n        \n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    remove_string = ''\n    index_of_odd = 0\n    for i in str1:\n        if i % 2 == 0:\n            index_of_odd += 1\n        remove_string += i\n    return remove_string\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([i for i in str1 if i%2!=0])\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # define count variable\n    count = 0\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    num=[]\n    for i in str1:\n        if i%2==0:\n            num.append(i)\n    str1=''\n    for i in num:\n        str1=str1+i\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    i=0\n    while i<len(str1):\n        if str1[i]%2==1:\n            str1=str1[:i]+str1[i+1:]\n        else:\n            i+=1\n    return str1"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str(str1).replace(\"*\", \"\").replace(\"$\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"-\", \"\")\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # split string\n    str2 = str1.split(' ')\n    # create empty list to store odd characters\n    odd = []\n    # iterate over string\n    for word in str2:\n        # if word starts with a number then add to list\n        if word[0] in '1234567890':\n            odd.append(word)\n    # remove odd characters\n    return''.join(odd)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    output_dict = dict()\n    for element in test_list:\n        if element not in output_dict.keys():\n            output_dict[element] = 1\n        else:\n            output_dict[element] = output_dict[element] + 1\n    return output_dict\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for item in test_list:\n        if item[1] == 'bidirectional':\n            counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Set a maximum number of pairs\n    n = len(test_list)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for pair in test_list:\n        if pair[0] == pair[1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #print(test_list)\n    count = 0\n    for i in range(len(test_list)):\n        if i % 2 == 0:\n            #print(test_list[i][0])\n            count += 1\n        else:\n            if test_list[i][1] > test_list[i][0]:\n                count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum(1 for tuple in test_list for pair in tuple for x in pair for y in x if y == x)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(len(test_list) - 1 - i):\n            if test_list[i][1] > test_list[j][1] and test_list[i][0] < test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total = 0\n    for t in test_list:\n        for i in t:\n            if i[1] == 'b':\n                total += 1\n    return total\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    # Here we will use a dictionary to store the pairs and a counter variable\n    pairs = {}\n    counter = 0\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # START CODE HERE\n    out = 0\n    for i in L:\n        out += i\n    # END CODE HERE\n    return out\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def merge(a,b):\n        x = []\n        x.append(a)\n        x.append(b)\n        for i in range(0,len(a)):\n            if a[i] > b[i]:\n                x.append(a[i])\n            else:\n                x.append(b[i])\n        return x\n    def short_to_long(list):\n        if len(list) < 2:\n            return list[0]\n        else:\n            return list[0] + short_to_long(list[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    joint = 0\n    for i in range(len(L)):\n        joint = joint + int(L[i])\n    return joint\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    L=map(int,L)\n    \n    return reduce(lambda x,y: x+y, L)\n    \n    \n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    output = 0\n    for i in range(len(L)):\n        output += L[i]\n    return output\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Start with an empty list\n    ans = []\n    # Add each item of the list into the answer list\n    for num in L:\n        ans.append(num)\n    # Return the answer list\n    return ans\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = [\"are\", \"was\", \"were\", \"have\", \"has\", \"hasn't\", \"can\", \"can't\", \"could\", \"couldn't\"]\n    \n    pattern = re.compile(r'(%s)' % '|'.join(adverbs))\n    \n    text = pattern.sub(\"\", text)\n    \n    adverb_text = pattern.sub('', text).split()\n    \n    text = text.replace(adverb_text[0],'the')\n    \n    positions = []\n    for token in text.split(' '):\n        if token[-1]!= '.':\n            continue\n        \n        if token.startswith('after'):\n            if token.endswith('.'):\n                positions.append(token.strip('.'))\n            else:\n                positions.append(token.strip('.').strip('.'))\n        elif token.startswith('before'):\n            if token.endswith('.'):\n                positions.append(token.strip('.'))\n            else:\n                positions.append(token.strip('.').strip('.'))\n        elif token.startswith('after') and token.endswith('.'):\n            positions.append(token.strip('.').strip('.'))\n        elif token.startswith('before') and token.endswith('.'):\n            positions.append(token.strip('.').strip('.'))\n        else:\n            positions.append(token.strip(' '))\n    \n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs_pos = []\n    adverbs = re.findall(r'(\\w*(?:verb(?:es)?)?)', text, re.IGNORECASE)\n    for adverb in adverbs:\n        adverb_pos = re.search(r'\\w*(\\w*verb(?:es)?)', adverb).group(1)\n        adverbs_pos.append(adverb_pos)\n    return adverbs_pos\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'(?<=adverb).+'\n    pattern_2 = r'(?<=Adverb).+'\n    return_list = []\n    for word in text:\n        if re.match(pattern, word):\n            pos = re.search(pattern, word).start()\n            return_list.append((pos,word))\n        elif re.match(pattern_2, word):\n            pos = re.search(pattern_2, word).start()\n            return_list.append((pos,word))\n    return return_list\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Pattern to extract adverb\n    adverb_pattern = r'\\b(a|a \\#|as|a\\#|e)\\b'\n    adverb_list = []\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    '''\n    # Define the regular expression for finding an adverb\n    pattern = r'(.*)\\.\\s+\\d+[^a-z]+'\n    # Find all the instances of the pattern\n    adverbs = re.findall(pattern, text)\n    adverbs = [x[0] for x in adverbs]\n    adverbs = [x for x in adverbs if len(x)>=3]\n    adverbs = [x for x in adverbs if 'a' in x]\n    # Find the index of the first adverb\n    adverb_index = adverbs.index('a')\n    # Return a tuple with the adverb and the index\n    return adverb_index, adverbs[adverb_index]\n    '''\n    adverbs = re.findall(r'\\b.+\\.', text)\n    adverbs = [x for x in adverbs if len(x)>=3]\n    adverbs = [x for x in adverbs if 'a' in x]\n    adverbs = [x for x in adverbs if 'a' in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x in adverbs if 'a' not in x]\n    adverbs = [x for x i"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # TODO: Replace \"find_adverb_position\" with your own code\n    # use it to find all the adverbs, position from the \"text\"\n    if text[0] == '-':\n        # if it's a -, remove it from the beginning of the sentence.\n        # split the sentence by space, and then turn the string into a list\n        # where every item is a list of adverbs and the first item is the position\n        # in the sentence.\n        text = text.split()\n        text = list(text)\n        text[0] = ''\n        adverbs = ''\n        position = 0\n        adverb_index = 0\n        for i in range(len(text)):\n            if text[i] == '-':\n                adverbs += text[i]\n                position = i\n            else:\n                adverb_index = i\n                break\n        # now we have the list of adverbs, the position, and finally the sentence\n        # of the adverb.\n        # now we want to find the first adverb in the sentence, and then find the position\n        # in the sentence.\n        # split the sentence by spaces and then turn the string into a list of\n        # numbers where every item is a list of adverbs.\n        # then find the first adverb.\n        # then find the position in the sentence.\n        # finally we have all the adverb.\n        adverb_position = []\n        for i in range(position, len(text)):\n            adverb_position.append([text[i]])\n        adverb_position = list(reversed(adverb_position))\n        # now find the first adverb, position in the sentence, and finally the sentence\n        # of the adverb.\n        for i in range(position, len(adverbs)):\n            adverb_position[i] = [adverbs[i]]\n        adverb_position = list(reversed(adverb_position))\n        # now we want to reverse the list adverb_position, and then find the first adverb\n        # in the sentence.\n        # split the sentence by spaces and then turn the string into a list of\n        # numbers where every item is a list of adverbs.\n        # then find the first adverb.\n        # then find the position in the sentence.\n        # finally we have all the adverb.\n        adverb_position = list(reversed(adverb_position))\n        # now we want to reverse the list adverb_position, and then find the first adverb\n        # in the sentence.\n        # split the sentence by spaces and then turn the string into a list of\n        # numbers where every item is a list of adverbs.\n        # then find the first adverb.\n        # then find the position in the sentence.\n        # finally we have all the adverb.\n        adverb_position = list(reversed(adverb_position))\n        # now we want to reverse the list adverb_position, and then find the first adverb\n        # in the sentence.\n        # split the sentence by spaces and then turn the string into a list of\n        # numbers where every item is a list of adverbs.\n        # then find the first adverb.\n        # then find the position in the sentence.\n        # finally we have all the adverb.\n        adverb_position = list(reversed(adverb_position))\n        # now we want to reverse the list adverb_position, and then find the first adverb\n        # in the sentence.\n        # split the sentence by spaces and then turn the string into a list of\n        # numbers where every item is a list of adverbs.\n        # then find the first adverb.\n        # then find the position in the sentence.\n        # finally we have all the adverb.\n        adverb_position = list(reversed(adverb_position))\n        return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    if text=='':\n        return (0,0)\n    word_list = re.split('\\W+', text)\n    adverbs = ['on', 'for', 'a']\n    adverbs = [a for a in adverbs if a in word_list]\n    indices = []\n    indices.append(len(word_list)-1)\n    indices.append(0)\n    indices.append(len(word_list)-1)\n    for index in indices:\n        if word_list[index][0]=='a':\n            return (index,index)\n    return (0,0)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    x,y = 0,0\n    for i in text:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n            x += 1\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\" or i == \"u\":\n            y += 1\n    return [x,y]\ndef find_adverb(text):\n    '''\n    Write a function to find the first adverb in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return \"a\"\n    return \"e\"\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return 0,0\n    return 0,1\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return 0,0\n    return 0,1\ndef find_noun(text):\n    '''\n    Write a function to find the first noun in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return \"a\"\n    return \"e\"\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return 0,0\n    return 0,1\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return 0,0\n    return 0,1\ndef find_verb(text):\n    '''\n    Write a function to find the first verb in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return \"a\"\n    return \"e\"\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return 0,0\n    return 0,1\ndef find_noun_verb(text):\n    '''\n    Write a function to find the first noun and verb in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return \"a\"\n    return \"e\"\ndef find_noun_verb_position(text):\n    '''\n    Write a function to find the first noun and verb and their positions in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return 0,0\n    return 0,1\ndef find_verb_noun(text):\n    '''\n    Write a function to find the first verb and noun in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return \"a\"\n    return \"e\"\ndef find_verb_noun_position(text):\n    '''\n    Write a function to find the first verb and noun and their positions in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return 0,0\n    return 0,1\ndef find_noun_noun(text):\n    '''\n    Write a function to find the first noun and noun and in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return \"a\"\n    return \"e\"\ndef find_noun_noun_position(text):\n    '''\n    Write a function to find the first noun and noun and their positions in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return 0,0\n    return 0,1\ndef find_verb_noun_verb(text):\n    '''\n    Write a function to find the first verb and noun and in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return \"a\"\n    return \"e\"\ndef find_verb_noun_verb_position(text):\n    '''\n    Write a function to find the first verb and noun and verb in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return 0,0\n    return 0,1\ndef find_verb_noun_verb_noun(text):\n    '''\n    Write a function to find the first verb and noun and noun in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return \"a\"\n    return \"e\"\ndef find_verb_noun_verb_noun_position(text):\n    '''\n    Write a function to find the first verb and noun and noun and verb in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return 0,0\n    return 0,1\ndef find_noun_noun_verb_noun_verb(text):\n    '''\n    Write a function to find the first noun and noun and verb and noun and in a given sentence.\n    '''\n    if text[0] == \"a\" or text[0] == \"e\" or text[0] == \"i\" or text[0] == \"o\" or text[0] == \"u\":\n        return \"a\"\n    return \"e\"\ndef find_noun_noun_verb_noun_verb_position(text):\n    '''\n    Write a function to find the first noun and noun and verb and noun and noun and verb in a given sentence.\n    '''"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'i':\n            adverbs.append(i)\n    adverb_start_index = 0\n    adverb_end_index = 0\n    adverb_positions = []\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'i':\n            adverb_start_index = adverbs[i]\n            adverb_end_index = i\n            adverb_positions.append((adverb_start_index,adverb_end_index))\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #For each sentense, check if it contains an adverb (it can be preceded by a verb like 'is') and the position of the adverb in the sentence.\n    #If it does, return the position of the adverb.\n    #else, return None.\n    #If not, return the position of the sentence.\n    text = re.sub('[A-Z]','',text)\n    m = re.search('[^aeiouAEIOU]+',text)\n    pos_a = m.span()[0]\n    pos_b = m.span()[1]\n    if m.group() == \"is\":\n        return pos_a,pos_b\n    elif m.group() == \"are\":\n        return pos_b,pos_a\n    else:\n        return None\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    S = 0\n    for i in range(1, l + 1):\n        S += ((i ** 2 - 1) ** 2)\n    return S\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l < 0:\n        print(\"The input value should be positive\")\n    else:\n        # Base Case\n        if (l == 0):\n            return 0\n        # Recursion\n        return l * l * (2 + l + 2 * l * l)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 0.5 * (l[0] ** 2 + l[1] ** 2 + l[2] ** 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    S = math.pow(l,3)\n    S1 = (4*S)\n    S2 = S1*math.pow(l,2)\n    S3 = S2*math.pow(l,3)\n    S4 = S3*math.pow(l,4)\n    S5 = S4*math.pow(l,5)\n    S6 = S5*math.pow(l,6)\n    S7 = S6*math.pow(l,7)\n    S8 = S7*math.pow(l,8)\n    S9 = S8*math.pow(l,9)\n    return (S1+S2+S3+S4+S5+S6+S7+S8+S9)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    for i in range(0,4):\n        for j in range(0,4):\n            if i == 0 and j == 0:\n                continue\n            if l[i][j] > 0:\n                s = l[i][j]*(4*l[i][j])\n                l[i][j] = s\n    return l"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    try:\n        from mpmath import mp\n        s = mp.sqrt(l**3)\n    except ImportError:\n        s = mp.sqrt(l)\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l * l * l * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = l[0][0][0]*l[0][0][1]*l[0][0][2]*l[0][0][3]\n    for i in l:\n        for j in i:\n            for k in j:\n                for l in k:\n                    for m in l:\n                        for n in m:\n                            for o in n:\n                                for p in o:\n                                    for q in p:\n                                        for r in q:\n                                            for s in r:\n                                                for t in s:\n                                                    for u in t:\n                                                        for v in u:\n                                                            print(l[0][0][0]*l[0][0][1]*l[0][0][2]*l[0][0][3]*l[0][0][4]*l[0][0][5]*l[0][0][6]*l[0][0][7]*l[0][0][8]*l[0][0][9]*l[0][0][10]*l[0][0][11]*l[0][0][12]*l[0][0][13]*l[0][0][14]*l[0][0][15]*l[0][0][16]*l[0][0][17]*l[0][0][18]*l[0][0][19]*l[0][0][20]*l[0][0][21]*l[0][0][22]*l[0][0][23]*l[0][0][24]*l[0][0][25]*l[0][0][26]*l[0][0][27]*l[0][0][28]*l[0][0][29]*l[0][0][30]*l[0][0][31]*l[0][0][32]*l[0][0][33])\n                                                    print(area)\n                                                            print(math.pow(area, 2))\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = l[0]*l[1]*l[2]\n    print area\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                s += (1/3) * (2*i + 3*j + 2*k)\n    return s\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    sum = 0\n    for i in nums:\n        sum += i\n        pos += 1\n    pos = sum/pos\n    print(pos)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_num_count = 0\n    for num in nums:\n        if num > 0:\n            positive_num_count += 1\n    return positive_num_count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>0:\n            count=count+1\n    return count/len(nums)\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i<0:\n            count=count+1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    ans = []\n    for i in range(len(nums)):\n        num = nums[i]\n        if num > 0:\n            ans.append(num)\n        else:\n            ans.append(0)\n    return ans\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    sum = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n            sum += i\n    return count / sum\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    if len(nums)==0:\n        return 0\n    for i in nums:\n        if i>0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if nums == []:\n        return 0\n    m = nums[0]\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] >= m:\n            count += 1\n            m = nums[i]\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = [num for num in nums if num > 0]\n    ratio = len(positives) / len(nums)\n    return ratio\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0: \n        return 0\n    \n    if len(list1) == 1:\n        return -list1[0]\n    \n    if list1[0] < list1[1]: \n        return list1[0]\n    else:\n        return list1[1]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for x in range(len(list1)-1, -1, -1): \n        if list1[x] < 0:\n            return x\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    new_list = [x for x in list1 if x < 0]\n    return max(new_list)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    negative_num = max(list1)\n    if negative_num < 0:\n        negative_num = 0\n    return negative_num\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    new_list = []\n    for i in list1:\n        if i < 0:\n            new_list.append(i)\n    return max(new_list)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort(reverse = True)\n    return list1[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for i in list1:\n        if i < 0:\n            if largest < i:\n                largest = i\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    neg = list1[0]\n    for i in list1:\n        if i < 0:\n            neg = i\n    if neg > largest:\n        largest = neg\n    return largest\n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_negative = 0\n    max_number = 0\n    for number in list1:\n        if number < 0:\n            # if the number is less than 0, the negative number will be 0. \n            # Otherwise, it will be positive\n            if number < 0:\n                pass\n            else:\n                pass\n        else:\n            # if the number is greater than 0, the negative number will be 0.\n            # Otherwise, it will be positive\n            if number >= 0:\n                pass\n            else:\n                pass\n    return max_negative\n    \n        \ndef main():\n    list1 = [1, -2, 3, -4, 5, -6, -7, 6]\n    print(largest_neg(list1))\n    print(largest_neg([-1, 0, -3, 2, -4, -5, -6, 0]))\n    print(largest_neg([-9, -9, -9, -9]))\n    \n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for element in test_list:\n        if len(element)!= K:\n            result.append(element)\n        else:\n            result.append(element[:K])\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # define a function to remove duplicates\n    def remove_dups(tuple_list):\n        '''\n        This function takes a tuple list as input and removes duplicates.\n        '''\n        # loop through the list of tuples\n        for x in range(len(tuple_list)):\n            # check if the tuple is already in the list\n            if tuple_list[x] in tuple_list[x+1:]:\n                # remove the tuple\n                tuple_list[x] = tuple_list[x][0]\n                tuple_list[x+1] = tuple_list[x+1][1:]\n        # return the list\n        return tuple_list\n    # trim the tuple list by k\n    test_list = remove_dups(test_list)\n    # return the new list\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    test_list = test_list[0:K]\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return test_list[-K:]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    #write your code here\n    return tuple(test_list[i:i+K] for i in range(0, len(test_list), K))\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(filter(lambda x: len(x) <= K, test_list))\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in test_list:\n        if len(i) < K:\n            result.append(i)\n        else:\n            j = i[:K]\n            result.append(j)\n            i = i[K:]\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # return [val for _,val in enumerate(test_list) if len(val) > K]\n    return list(map(tuple, filter(lambda x: len(x) > K, test_list)))\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Replace all None values with the correct element\n    test_list = [None if elem is None else elem for elem in test_list]\n    # Remove all None values from the list\n    test_list = list(filter(None, test_list))\n    # Remove all elements from the list that are less than K\n    trimmed = [elem for elem in test_list if len(elem) < K]\n    return trimmed\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_list = []\n    for i in test_tup1:\n        index_list.append(i*test_tup2[i-1])\n    return index_list\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result = result + test_tup1[i]*test_tup2[i]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    i = 0\n    j = 0\n    res = []\n    for k in range(len(test_tup1)):\n        res.append(test_tup1[i] * test_tup2[j])\n        i += 1\n        j += 1\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(\"Index Multiplication of {} and {}\".format(test_tup1, test_tup2))\n    index_tuple1 = 0\n    index_tuple2 = 0\n    index_list = []\n    index_list.append(index_tuple1)\n    index_list.append(index_tuple2)\n    # iterate through each element of list and increment it by the given tuple elements\n    for index in index_list:\n        index_tuple1 += test_tup1[index]\n        index_tuple2 += test_tup2[index]\n    print(\"Tuple Index after Multipication: {}\".format(index_tuple1))\n    print(\"Tuple Index after Multipication: {}\".format(index_tuple2))\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res1= tuple(map(lambda x,y: x*y, test_tup1, test_tup2))\n    print(res1)\n    return res1\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(test_tup1, test_tup2)\n    return (test_tup1[0] * test_tup2[0] + test_tup2[0] * test_tup1[0], test_tup1[1] * test_tup2[1] + test_tup2[1] * test_tup1[1], test_tup1[2] * test_tup2[2] + test_tup2[2] * test_tup1[2], test_tup1[3] * test_tup2[3] + test_tup2[3] * test_tup1[3], test_tup1[4] * test_tup2[4] + test_tup2[4] * test_tup1[4])\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup1 = test_tup1[0] * test_tup1[1]\n    new_tup2 = test_tup2[0] * test_tup2[1]\n    new_tup3 = test_tup2[0] * test_tup2[1]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in test_tup1:\n        result.append(i*test_tup2[0])\n    return result\n    \ndef index_multiplication_2(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in test_tup1:\n        result.append(i*test_tup2[1])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication = 0\n    for index, value in enumerate(test_tup1):\n        index_multiplication += value * test_tup2[index]\n    return index_multiplication\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup1 = test_tup1[0]*test_tup1[1]\n    new_tup2 = test_tup2[0]*test_tup2[1]\n    return new_tup1, new_tup2\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    Counter(lst).items()\n    return Counter(lst).items()\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # TODO: Write your code here\n    occur = Counter(lst)\n    for i in range(len(tup)):\n        occur[tup[i]] += 1\n    return occur\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return (Counter(lst) - Counter(tup)).most_common(1)[0][0] \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    a=tuple(lst)\n    count=Counter(lst)\n    return(count[a])"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    my_dict = dict(Counter(lst))\n    occ = 0\n    for i in tup:\n        occ += my_dict.get(i,0)\n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst) \n    for k in c: \n        if tup[k] == k: \n            lst.remove(k) \n    return len(lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = Counter(lst)\n    for i in tup:\n        occurence[i] += 1\n    return occurence\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = 0\n    for x in tup:\n        occ += lst.count(x)\n    return occ\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = 0\n    for x in tup: \n        occ += lst.count(x)\n    return occ \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    print(c)\n    print(\"\\n\")\n    for i in c:\n        print(i, \":\", c[i])\n    print(\"\\n\")\n    print(\"\\n\")\n    # for i in lst:\n    #     print(i, \":\", lst.count(i))\n    # print(lst)\n    return c.most_common()\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes=[]\n    for i in range(len(nums)):\n        cubes.append(nums[i]**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums_list = []\n    for num in nums:\n        cube_nums_list.append(num*num*num)\n    return cube_nums_list\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Corner Case\n    if len(nums) == 1:\n        return 1\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes=[]\n    for i in range(0,len(nums)):\n        cube = nums[i]**3\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = []\n    for num in nums:\n        cube.append(num*num*num)\n    return cube\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result=[]\n    for i in nums:\n        result.append(i**3)\n    return(result)\n    \ndef main():\n    '''\n    Main function\n    '''\n    nums=[1,2,3,4,5]\n    result=cube_nums(nums)\n    print(result)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [num**3 for num in nums]\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    nums = [num for num in nums if num >= 0]\n    cubes = [c*c*c for c in range(1,nums[0]+1)]\n    for i in range(1,nums[0]+1):\n        cubes[i] = cubes[i]**3\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [cubes(nums[i]) for i in range(len(nums))]\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 0:\n        print('invalid input')\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1, n + 1)"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 0:\n        raise ValueError(\"Invalid Input: n must be a positive integer.\")\n    else:\n        return sum(range(1, n + 1))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 0: \n        return -1\n    if n == 0:\n        return 0\n    return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for num in range(1, n+1):\n        result += num\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n): \n        sum = sum + i \n    return sum \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * n\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(n)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start_idx = 0\n    while (l[start_idx]!=''):\n        start_idx += 1\n    end_idx = start_idx\n    while (l[end_idx]!=''):\n        end_idx += 1\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = l[0:l.find(str)]\n    end = l[l.find(str)+len(str):len(l)]\n    return start, end\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if str is None:\n        return None\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Take the last element and return the ascii value\n    return ''.join([c for c in str if c.isalpha()]).upper()\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(0, len(l), 2):\n        if len(str[l[i]]) < len(str[l[i+1]]):\n            l[i+1] = str[l[i+1]]\n        else:\n            l[i] = str[l[i]]\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if not str:\n        return ''\n    if len(str) == 1:\n        return str[0]\n    if len(str) > len(l):\n        return ''.join(str[i:] for i in range(len(l)-len(str), len(l)))\n    else:\n        return ''.join(str[i:i+len(str)] for i in range(len(l)-len(str), len(l)))\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    index = 0\n    count = 0\n    if len(l) == 0:\n        return []\n    while index < len(l):\n        if l[index] =='':\n            count = count + 1\n        elif count!= 0:\n            index = index + 1\n        else:\n            return l[index: index+l[index]]\n        index = index + 1\n    return None\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    while i < len(str):\n        l[i] = str[i:i+l[i].__len__()]\n        i += l[i].__len__()\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if type(str) is not list:\n        str = [str]\n    if type(l) is not list:\n        l = [l]\n    res = []\n    for i in range(len(l)):\n        res.append(str[i].split(\"\\t\")[0].replace(l[i],\"\"))\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    def strip_accents(s):\n        '''\n        Extract accent symbols (i.e., white space) from a given string.\n        '''\n        from string import punctuation\n        # make it case-insensitive\n        s = str(s).lower()\n        # remove accent\n        return ''.join(c for c in s if not c in punctuation)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = \"\"\n    for char in text1:\n        if(char!= \" \"):\n            text = text + char\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    res = re.sub(pattern,'', text1)\n    return res\ndef remove_digits(text1):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    pattern = r'\\d+'\n    res = re.sub(pattern,'', text1)\n    return res\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    pattern = r'[1-9]'\n    res = re.sub(pattern,'', text1)\n    return res\ndef replace_with_chars(text1):\n    '''\n    Write a function to replace all the characters in the given string with the given characters.\n    '''\n    pattern = r'[^a-zA-Z0-9-_]'\n    res = re.sub(pattern,'', text1)\n    return res\ndef remove_all(text1):\n    '''\n    Write a function to remove all the words, digits, and symbols from the given string.\n    '''\n    pattern = r'[a-zA-Z0-9_\\s]+'\n    res = re.sub(pattern,'', text1)\n    return res\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    while type(text1) == str:\n        text1 = text1.replace(\" \",\"\")\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result = re.sub(\"\\s+\", \"\", text1)\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    \n    # Remove all whitespaces from the string\n    clean_text = re.sub('\\s+','', text1)\n    # Remove all the non-alphanumeric characters\n    clean_text = re.sub('[^a-zA-Z0-9]+','', clean_text)\n    # Remove all characters in quotes\n    clean_text = re.sub('\\'','', clean_text)\n    # Remove all characters in single quotes\n    clean_text = re.sub('\\\"','', clean_text)\n    # Remove all symbols\n    clean_text = re.sub('[^a-zA-Z0-9]+','', clean_text)\n    \n    return clean_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text1)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(' ', '')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r\"\\s+\", \"\", text1)\n    return text\ndef remove_emoji(text1):\n    '''\n    Write a function to remove all emoji from the given string.\n    '''\n    emoji_pattern = re.compile('<(.*?)>')\n    text = emoji_pattern.sub(r'', text1)\n    return text\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation from the given string.\n    '''\n    punctuation_pattern = re.compile('[^a-zA-Z0-9!@#$%^&*()_+-=]')\n    text = punctuation_pattern.sub(r'', text1)\n    return text\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    numbers_pattern = re.compile(r'\\d+')\n    text = numbers_pattern.sub(r'', text1)\n    return text\ndef remove_quotes(text1):\n    '''\n    Write a function to remove all quotes from the given string.\n    '''\n    quotes_pattern = re.compile(r'[`\\'\u201c\u201d]')\n    text = quotes_pattern.sub(r'', text1)\n    return text\ndef remove_special_chars(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    special_chars_pattern = re.compile(r'[^a-zA-Z0-9\\s_\\.\\-]')\n    text = special_chars_pattern.sub(r'', text1)\n    return text\ndef remove_hashtags(text1):\n    '''\n    Write a function to remove all hashtags from the given string.\n    '''\n    hashtags_pattern = re.compile(r'#[^\\s]{2,}')\n    text = hashtags_pattern.sub(r'', text1)\n    return text\ndef remove_urls(text1):\n    '''\n    Write a function to remove all urls from the given string.\n    '''\n    urls_pattern = re.compile(r'\\b((?:https?://)?(?:www\\.)?[\\w\\-]+\\.\\w{2,}(?:(?:\\/[\\w\\-]+\\.[\\w\\-]+)+))\\b')\n    text = urls_pattern.sub(r'', text1)\n    return text\ndef remove_tags(text1):\n    '''\n    Write a function to remove all tags from the given string.\n    '''\n    tags_pattern = re.compile(r'\\[\\w\\w]')\n    text = tags_pattern.sub(r'', text1)\n    return text\ndef remove_tokens(text1):\n    '''\n    Write a function to remove all tokens from the given string.\n    '''\n    tokens_pattern = re.compile(r'\\w+')\n    text = tokens_pattern.sub(r'', text1)\n    return text\ndef remove_stopwords(text1):\n    '''\n    Write a function to remove all stopwords from the given string.\n    '''\n    stopwords_pattern = re.compile(r'\\w+')\n    text = stopwords_pattern.sub(r'', text1)\n    return text\ndef remove_words(text1):\n    '''\n    Write a function to remove all words from the given string.\n    '''\n    words_pattern = re.compile(r'\\w+')\n    text = words_pattern.sub(r'', text1)\n    return text\ndef clean_text(text1,language='en', remove_stopwords=True, remove_emoji=True,remove_punctuation=True, remove_numbers=True, remove_quotes=True, remove_hashtags=True, remove_urls=True, remove_tags=True, remove_stopwords=True, remove_special_chars=True, remove_numbers=True, remove_quotes=True):\n    '''\n    Clean the text to be used in the data analysis.\n    '''\n    text = remove_whitespaces(remove_emoji(remove_punctuation(remove_numbers(remove_quotes(remove_numbers(remove_punctuation(remove_hashtags(remove_emoji(remove_special_chars(remove_stopwords(remove_urls(remove_special_chars(remove_stopwords(remove_tags(remove_numbers(remove_urls(remove_quotes(remove_stopwords(remove_special_chars(remove_tags(remove_numbers(remove_urls(remove_special_chars(remove_tags(remove_hashtags(remove_special_chars(remove_numbers(remove_urls(remove_special_chars(remove_tokens(remove_stopwords(remove_special_chars(remove_hashtags(remove_tokens(remove_numbers(remove_tokens(remove_special_chars(remove_special_chars(remove_stopwords(remove_special_chars(remove_tags(remove_numbers(remove_tokens(remove_stopwords(remove_tags(remove_numbers(remove_special_chars(remove_tags(remove_numbers(remove_tokens(remove_tags(remove_stopwords(remove_tags(remove_stopwords(remove_numbers(remove_tokens(remove_tags(remove_numbers(remove_urls(remove_stopwords(remove_tags(remove_tags(remove_numbers(remove_urls(remove_numbers(remove_stopwords(remove_tokens(remove_stopwords(remove_tags(remove_numbers(remove_urls(remove_stopwords(remove_tags(remove_numbers(remove_tags(remove_tokens(remove_stopwords(remove_tokens(remove_special_chars(remove_stopwords(remove_tags(remove_numbers(remove_tags(remove_tags(remove_numbers(remove_tokens(remove_special_chars(remove_stopwords(remove_numbers(remove_tags(remove_tokens(remove_tags(remove_stopwords(remove_numbers(remove_tags(remove_special_chars(remove_tags(remove_numbers(remove_tokens(remove_tags(remove_numbers(remove_tags(remove_stopwords(remove_numbers(remove_tags(remove_tokens(remove_special_chars(remove_tags(remove_numbers(remove_tokens(remove_stopwords(remove_tags(remove_stopwords(remove_numbers(remove_tags(remove_tokens(remove_tags(remove_tags(remove_tags(remove_numbers(remove_tags(remove_stopwords(remove_tokens(remove_tags(remove_tags(remove_stopwords(remove_numbers(remove_tags(remove_tokens(remove_tags(remove_stopwords(remove_stopwords(remove_tags(remove_tags(remove_tags(remove_tags(remove_numbers(remove_tokens(remove_stopwords(remove_stopwords(remove_tags(remove_numbers(remove_stopwords(remove_tags(remove_numbers(remove_tags(remove_tags(remove_tags(remove_stopwords(remove_tags(remove_numbers(remove_tags(remove_stopwords(remove_stopwords(remove_tags(remove_tags(remove_stopwords(remove_numbers(remove_tags(remove_stopwords(remove_tokens(remove_tags(remove_tags(remove_tags(remove_tags(remove_stopwords(remove_tags(remove_stopwords(remove_tags(remove_stopwords(remove_tags(remove_tags(remove_tags(remove_stopwords(remove_tags(remove_tags(remove_tags(remove_numbers(remove_tags(remove_tags(remove_stopwords(remove_tags(remove_tags(remove_tags(remove_stopwords(remove_tags(remove_tags(remove_tags(remove_tags(remove_numbers(remove_tags(remove_stopwords(remove_tags(remove_tags(remove_tags(remove_stopwords(remove_tags(remove_tags(remove_tags(remove_tags(remove_numbers(remove"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(' +',' ', text1)\n    return text1\ndef print_valid_xml(xml_to_process):\n    '''\n    Return a string of XML tags, including a comma of the elements of each tag.\n    '''\n    if xml_to_process == None:\n        return 'None'\n    else:\n        xml_string = str(xml_to_process)\n        return xml_string\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+','', text1)\n    return text2\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # calculate the total cost of the sale\n    total_cost = sale_amount * actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_2(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_3(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_4(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_5(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_6(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_7(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_8(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_9(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_10(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_11(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_12(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_13(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_14(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_15(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_16(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_17(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_18(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_19(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_20(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_21(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_22(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_23(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_24(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_25(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n    \ndef loss_amount_26(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sal"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #IF Loss Amount is less than actual cost then return 0.\n    if actual_cost < sale_amount: \n        return 0 \n    #IF Loss Amount is greater than actual cost then return 0.\n    elif actual_cost >= sale_amount: \n        return 0\n    #If loss is 0 then return 0.\n    else: \n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #Write your code here.\n    if sale_amount<actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<=actual_cost: \n        return sale_amount\n    else: \n        return 0\ndef product_price(selling_price,tax,selling_amount,selling_price2): \n    '''\n    Write a function that takes selling price, tax and selling amount and returns the price after tax.\n    '''\n    if tax<=selling_price2 and selling_price2!=0: \n        return selling_price2\n    else: \n        return selling_price\ndef discount(selling_price,tax,selling_amount,discount_amount): \n    '''\n    Write a function that takes selling price, tax and selling amount and returns the price after tax.\n    '''\n    return selling_price*(1-tax/100)\ndef calc_discount_amount(selling_price,tax,selling_amount,discount_amount): \n    '''\n    Write a function that takes selling price, tax and selling amount and returns the price after tax.\n    '''\n    return selling_price*(1-discount_amount/100)\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<=0:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    elif n == 2 : \n        return 2\n    elif n % 2 == 0 : \n        return 0\n    else : \n        return sumofFactors(n-1) + sumofFactors(n-2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    def sumOfEvenFactors(n) : \n        '''\n        Create a recursive function to find the sum of all even \n        factors of a number.\n        '''\n        if n < 2 : \n            return n \n        else : \n            return sumOfEvenFactors(n-2) + 2 * n \n    return sumOfEvenFactors(n) \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return sumofFactors(n//2)\n    else:\n        return sumofFactors(n-1) + sumofFactors(n//2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = [i for i in range(1, n+1) if n % i == 0]\n    sum = 0\n    for i in factors:\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1\n    elif n%2 == 0 : \n        return 2*sumofFactors(n//2)\n    else : \n        return sumofFactors(n-1)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    elif n % 2 == 0:\n        return n + sumofFactors(n//2)\n    else :\n        return n * sumofFactors(n-1)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while n % 2 == 0 : \n        n = n // 2\n        sum += 1\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0 :\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            s = s + i \n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n            if n//i == n:\n                return sum\n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z', text)!= None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return text.lower().find('z')!= -1\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Empty string\n    if text == \"\":\n        return False\n    # Variable to store match\n    match = False\n    # Check for white spaces\n    for i in text:\n        if re.search(r'\\w', i):\n            match = True\n            break\n    # If match is true, return match\n    if match:\n        return True\n    # If match is false, return false\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = 'z'\n    pattern = re.compile(r'\\b'+wordz+'\\b')\n    pattern = pattern.sub(wordz, text)\n    word = re.search(pattern, text)\n    return word\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'[zZ]'\n    text_lower = text.lower()\n    regex = re.compile(pattern)\n    match = regex.search(text_lower)\n    if match:\n        return match.start()\n    else:\n        return -1\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    pattern = re.compile(r'z')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    list_of_words = text.split(' ')\n    list_of_words_lower = list(map(str.lower, list_of_words))\n    \n    for i in list_of_words_lower:\n        if i == 'z':\n            print(i)\n        if i!= 'z':\n            print('Not a word, \"z\" is not a word.')\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern=r'z'\n    return re.search(pattern,text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    # Generate a regular expression\n    r = re.compile(r'[^\\w\\-\\s]')\n    # Search for the word\n    match = r.search(text)\n    # Return the matched word\n    return match.group()\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = re.findall(r'z', text)\n    if len(wordz) > 0:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function that checks whether a number is a prime number.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        monthnumb = int(monthnum2)\n        if monthnumb in range(1,13):\n            return True\n        else:\n            print(\"Invalid month number. Please enter a valid month number.\")\n            return False\n    except ValueError:\n        print(\"Invalid month number. Please enter a valid month number.\")\n        return False\n    \n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 in range(1,13)\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if not monthnum2.isdigit():\n        return False\n    elif int(monthnum2) < 1 or int(monthnum2) > 12:\n        return False\n    elif int(monthnum2) == 12:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if not(0 < monthnum2 < 13):\n        return False\n    if monthnum2 == 0:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 2:\n        if monthnum2 == 4 or monthnum2 == 6:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 11:\n            return True\n        elif monthnum2 == 12:\n            return True\n    elif monthnum2 == 4:\n        if monthnum2 == 1:\n            return True\n        elif monthnum2 == 3 or monthnum2 == 5:\n            return True\n        elif monthnum2 == 6:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n        elif monthnum2 == 12:\n            return True\n    elif monthnum2 == 5:\n        if monthnum2 == 1:\n            return True\n        elif monthnum2 == 3 or monthnum2 == 5:\n            return True\n        elif monthnum2 == 6:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n        elif monthnum2 == 12:\n            return True\n    elif monthnum2 == 6:\n        if monthnum2 == 1:\n            return True\n        elif monthnum2 == 3 or monthnum2 == 5:\n            return True\n        elif monthnum2 == 7:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n        elif monthnum2 == 12:\n            return True\n    elif monthnum2 == 7:\n        if monthnum2 == 1:\n            return True\n        elif monthnum2 == 3 or monthnum2 == 5:\n            return True\n        elif monthnum2 == 8:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n        elif monthnum2 == 12:\n            return True\n    elif monthnum2 == 8:\n        if monthnum2 == 1:\n            return True\n        elif monthnum2 == 3 or monthnum2 == 5:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n        elif monthnum2 == 12:\n            return True\n    elif monthnum2 == 9:\n        if monthnum2 == 1:\n            return True\n        elif monthnum2 == 3 or monthnum2 == 5:\n            return True\n        elif monthnum2 == 6:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n        elif monthnum2 == 12:\n            return True\n    elif monthnum2 == 10:\n        if monthnum2 == 1:\n            return True\n        elif monthnum2 == 3 or monthnum2 == 5:\n            return True\n        elif monthnum2 == 6:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n        elif monthnum2 == 12:\n            return True\n    elif monthnum2 == 11:\n        if monthnum2 == 1:\n            return True\n        elif monthnum2 == 3 or monthnum2 == 5:\n            return True\n        elif monthnum2 == 6:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n        elif monthnum2 == 12:\n            return True\n    elif monthnum2 == 12:\n        if monthnum2 == 1:\n            return True\n        elif monthnum2 == 3 or monthnum2 == 5:\n            return True\n        elif monthnum2 == 6:\n            return True\n        elif monthnum2 == 9:\n            return True\n        elif monthnum2 == 10:\n            return True\n        elif monthnum2 == 11:\n            return True\n        elif monthnum2 == 12:\n            return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n    'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n    ]\n    if not(monthnum2 in months):\n        return False\n    elif monthnum2 == \"Dec\":\n        return True\n    else:\n        return False\n        \ndef month_numbers(month):\n    '''\n    Write a function that counts the number of days in a given month.\n    '''\n    months = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n    'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n    ]\n    if not(month in months):\n        return\n    else:\n        return months.index(month)+1\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    is_day_exists = False\n    if monthnum2 % 31 == 0:\n        is_day_exists = True\n    return is_day_exists\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if not monthnum2:\n        monthnum2 = input(\"Enter month number: \")\n    if monthnum2 == \"\":\n        monthnum2 = \"3\"\n    if monthnum2.isdigit() and int(monthnum2) > 2 and int(monthnum2) <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist[::-1]\n    "
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for each in stringlist:\n        new_list.append(each[::-1])\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Your code here\n    if not stringlist:\n        return\n    for i in range(len(stringlist)//2):\n        stringlist[i], stringlist[-1-i] = stringlist[-1-i], stringlist[i]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[i] for i in range(len(stringlist))]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Create empty list\n    reverse_list = []\n    # Loop through each item in the list\n    for string in stringlist:\n        # Convert each item to a new element of the list\n        new_element = string\n        # Reverse the string\n        new_element = new_element[::-1]\n        # Append the reverse list\n        reverse_list.append(new_element)\n    # Return the reversed list\n    return reverse_list\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    string_list = []\n    for i in stringlist:\n        string_list.append(i[::-1])\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i] = stringlist[i] + stringlist[i-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    output = []\n    for x in stringlist:\n        output.append(x[::-1])\n    return output\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    for i in stringlist:\n        stringlist.remove(i)\n        i=i[::-1]\n        stringlist.append(i)\n    return stringlist\n    \n    \n    \ndef slice_list(list1,list2):\n    '''\n    Write a function to return a new list with only the even elements of list1, list2 and the odd elements of list2.\n    '''\n    new_list=[]\n    for i in list1:\n        if i%2==0:\n            new_list.append(i)\n        else:\n            new_list.append(i)\n    for i in list2:\n        if i%2==1:\n            new_list.append(i)\n        else:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for i in stringlist:\n        reverse_list.append(i[::-1])\n    return reverse_list\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        min = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] < min:\n                min = lst[i]\n                \n        return min\n        "
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1,len(lst)):\n        if min < lst[i]:\n            min = lst[i]\n    return min \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return []\n    m = min(lst)\n    return [lst.index(m)+1] + Find_Min(lst[:lst.index(m)])\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if not lst:\n        return []\n    min = lst[0]\n    for i in range(1, len(lst)):\n        if min > lst[i]:\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minLen = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) < len(lst[j]):\n                minLen = min(minLen, len(lst[i]))\n    return minLen\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minLen = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < minLen:\n            minLen = lst[i]\n    return minLen\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    if len(lst)==0:\n        return []\n    if len(lst)==1:\n        return lst\n    if lst[0]<lst[1]:\n        return lst[0:2]\n    else:\n        return lst[0:1] + lst[1:3] + lst[2:4]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in lst:\n        for j in lst:\n            if len(lst[i]) < len(lst[j]):\n                lst[i] = lst[j]\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    return sorted(lst)[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return (lst[lst.index(min(lst))])\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)/2\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*l+2*b\n    \ndef rectangle_diagonal(l,b):\n    '''\n    Write a function to find the diagonal of a rectangle.\n    '''\n    return (l+b)**2\n    \ndef rectangle_area_diagonal(l,b):\n    '''\n    Write a function to find the area and diagonal of a rectangle.\n    '''\n    return rectangle_area(l,b)+rectangle_area_diagonal(b,l)\n    \ndef rectangle_perimeter_diagonal(l,b):\n    '''\n    Write a function to find the perimeter and diagonal of a rectangle.\n    '''\n    return rectangle_perimeter(l,b)+rectangle_perimeter_diagonal(l,b)\n    "
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = '^[A-Z][a-z]*$'\n    new_string = re.sub(pattern, '', str1)\n    return new_string\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str1 = ''\n    for char in str1:\n        if char.isupper():\n            new_str1 += char.lower()\n        else:\n            new_str1 += char\n    return new_str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    upper = re.compile(r'(^[A-Z]\\w+$)')\n    return upper.sub(r'\\1', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_string = \"\"\n    for i in str1:\n        if not i.isalpha():\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1:\n        str1 = str1.lower()\n        return re.sub(r\"\\b[A-Z]\\b\", '', str1)\n    else:\n        return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    temp_str = str1.lower()\n    for i in range(len(temp_str)):\n        if temp_str[i].isupper():\n            temp_str = temp_str.replace(temp_str[i], \"\")\n            \n    return temp_str\n    \ndef remove_symbols(str1):\n    '''\n    Write a function to remove symbols from a given string.\n    '''\n    temp_str = str1.lower()\n    temp_str = re.sub(r'[^a-z]','', temp_str)\n    temp_str = re.sub(r'\\s+','', temp_str)\n    temp_str = re.sub(r'\\w','', temp_str)\n    temp_str = temp_str.lower()\n    \n    return temp_str\n    \ndef capitalize_first_letter(str1):\n    '''\n    Write a function to capitalize first letter of a given string.\n    '''\n    temp_str = str1.lower()\n    temp_str = temp_str.replace(temp_str[0], temp_str[0].upper() + temp_str[1:])\n    temp_str = temp_str.replace(temp_str[-1], temp_str[0].upper())\n    \n    return temp_str\n    \ndef swap_first_and_last(str1):\n    '''\n    Write a function to swap first and last letters of a given string.\n    '''\n    temp_str = str1.lower()\n    temp_str = temp_str[::-1]\n    \n    return temp_str\n    \ndef find_and_replace(str1, pattern, replacement):\n    '''\n    Write a function to find and replace the string in a given string.\n    '''\n    temp_str = str1.lower()\n    temp_str = temp_str.replace(pattern, replacement)\n    \n    return temp_str\n    \ndef get_all_substrings(str1):\n    '''\n    Write a function to get all substring of a given string.\n    '''\n    temp_str = str1.lower()\n    temp_str = re.sub(r'[^a-z]','', temp_str)\n    temp_str = re.sub(r'\\s+','', temp_str)\n    temp_str = re.sub(r'\\w','', temp_str)\n    temp_str = temp_str.lower()\n    \n    return temp_str\n    \ndef count_substring(str1, pattern):\n    '''\n    Write a function to count the occurrence of a given substring in a given string.\n    '''\n    temp_str = str1.lower()\n    temp_str = temp_str.replace(pattern, \"\")\n    \n    return temp_str.count(pattern)\n    \ndef join_strings(str1):\n    '''\n    Write a function to join the string in a given string.\n    '''\n    return str1.split(\" \")\n    \ndef index_of_substring(str1, pattern):\n    '''\n    Write a function to get the index of a given substring in a given string.\n    '''\n    \n    temp_str = str1.lower()\n    temp_str = temp_str.replace(pattern, \"\")\n    \n    return temp_str.index(pattern)\n    \ndef index_of_substring_without_replacement(str1, pattern):\n    '''\n    Write a function to get the index of a given substring in a given string without the replacement.\n    '''\n    \n    temp_str = str1.lower()\n    temp_str = temp_str.replace(pattern, \"\")\n    \n    return temp_str.index(pattern)\n    \ndef replace_substring_in_string(str1, pattern, replacement):\n    '''\n    Write a function to replace a given substring in a given string.\n    '''\n    \n    temp_str = str1.lower()\n    temp_str = temp_str.replace(pattern, replacement)\n    \n    return temp_str\n    \ndef replace_substring_in_string_without_replacement(str1, pattern, replacement):\n    '''\n    Write a function to replace a given substring in a given string without the replacement.\n    '''\n    \n    temp_str = str1.lower()\n    temp_str = temp_str.replace(pattern, replacement)\n    \n    return temp_str\n    \ndef count_substring_without_replacement(str1, pattern):\n    '''\n    Write a function to count the occurrence of a given substring in a given string without the replacement.\n    '''\n    \n    temp_str = str1.lower()\n    temp_str = temp_str.replace(pattern, \"\")\n    \n    return temp_str.count(pattern)\n    \ndef is_valid_index(index):\n    '''\n    Write a function to check whether a given string is a valid index of a given string.\n    '''\n    \n    temp_str = str(index)\n    temp_str = temp_str.replace(\"0\", \"\")\n    temp_str = temp_str.replace(\"1\", \"\")\n    temp_str = temp_str.replace(\"2\", \"\")\n    temp_str = temp_str.replace(\"3\", \"\")\n    temp_str = temp_str.replace(\"4\", \"\")\n    temp_str = temp_str.replace(\"5\", \"\")\n    temp_str = temp_str.replace(\"6\", \"\")\n    temp_str = temp_str.replace(\"7\", \"\")\n    temp_str = temp_str.replace(\"8\", \"\")\n    temp_str = temp_str.replace(\"9\", \"\")\n    \n    return (temp_str.isdigit())\n    \ndef is_valid_index_with_replacement(index, replacement):\n    '''\n    Write a function to check whether a given string is a valid index of a given string with a given replacement.\n    '''\n    \n    temp_str = str(index)\n    temp_str = temp_str.replace(replacement, \"\")\n    temp_str = temp_str.replace(\"0\", \"\")\n    temp_str = temp_str.replace(\"1\", \"\")\n    temp_str = temp_str.replace(\"2\", \"\")\n    temp_str = temp_str.replace(\"3\", \"\")\n    temp_str = temp_str.replace(\"4\", \"\")\n    temp_str = temp_str.replace(\"5\", \"\")\n    temp_str = temp_str.replace(\"6\", \"\")\n    temp_str = temp_str.replace(\"7\", \"\")\n    temp_str = temp_str.replace(\"8\", \"\")\n    temp_str = temp_str.replace(\"9\", \"\")\n    \n    return (temp_str.isdigit())\n    \ndef is_valid_index_without_replacement(index, replacement):\n    '''\n    Write a function to check whether a given string is a valid index of a given string without a given replacement.\n    '''\n    \n    temp_str = str(index)\n    temp_str = temp_str.replace(replacement, \"\")\n    temp_str = temp_str.replace(\"0\", \"\")\n    temp_str = temp_str.replace(\"1\", \"\")\n    temp_str = temp_str.replace(\"2\", \"\")\n    temp_str = temp_str.replace(\"3\", \"\")\n    temp_str = temp_str.replace(\"4\", \"\")\n    temp_str = temp_str.replace(\"5\", \"\")\n    temp_str = temp_str.replace(\"6\", \"\")\n    temp_str = temp_str.replace(\"7\", \"\")\n    temp_str = temp_str.replace(\"8\", \"\")\n    temp_str = temp_str.replace(\"9\", \"\")\n    \n    return (temp_str.isdigit())\n    \ndef is_valid_index_without_replacement_with_replacement(index, replacement):\n    '''\n    Write a function to check whether a given string is a valid index of a given string without a given replacement.\n    '''\n    \n    temp_str = str(index)\n    temp_str = temp_str.replace(replacement, \"\")\n    temp_str = temp_str.replace(\"0\", \"\")\n    temp_str = temp_str.replace(\"1\", "
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = \"\"\n    for s in str1:\n        if s.isupper():\n            new_str += s.lower()\n        else:\n            new_str += s\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2=str1.lower()\n    str3=str(str2)\n    str3=str3.replace(\" \",\"\")\n    str3=str3.replace(\".\",\"\")\n    str3=str3.replace(\"*\",\"\")\n    str3=str3.replace(\"+\",\"\")\n    str3=str3.replace(\"|\",\"\")\n    str3=str3.replace(\"&\",\"\")\n    str3=str3.replace(\"*\",\"\")\n    str3=str3.replace(\"+\",\"\")\n    str3=str3.replace(\".\",\"\")\n    str3=str3.replace(\" \",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\"(\",\"\")\n    str3=str3.replace(\")\",\"\")\n    str3=str3.replace(\"[\",\"\")\n    str3=str3.replace(\"]\",\"\")\n    str3=str3.replace(\"{\",\"\")\n    str3=str3.replace(\"}\",\"\")\n    str3=str3.replace(\"{\",'\"')\n    str3=str3.replace(\"}\",\"')\")\n    str3=str3.replace(\"|\",\"\")\n    str3=str3.replace(\"&\",\"\")\n    str3=str3.replace(\"!\",\"\")\n    str3=str3.replace(\"#\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\"~\",\"\")\n    str3=str3.replace(\"*\",\"\")\n    str3=str3.replace(\"*\",\"\")\n    str3=str3.replace(\"@\",\"\")\n    str3=str3.replace(\"@\",\"\")\n    str3=str3.replace(\"_\",\"\")\n    str3=str3.replace(\"_\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\">\",\"\")\n    str3=str3.replace(\"<\",\"\")\n    str3=str3.replace(\" \",\"\")\n    str3=str3.replace(\".\", \"\")\n    str3=str3.replace(\" \",\"\")\n    str3=str3.replace(\",\",\"\")\n    str3=str3.replace(\".\",\"\")\n    str3=str3.replace(\"  \",\"\")\n    str3=str3.replace(\" \",\"\")\n    str3=str3.replace(\"  \",\"\")\n    str3=str3.replace(\"(\",\"\")\n    str3=str3.replace(\")\",\"\")\n    str3=str3.replace(\"[\",\"\")\n    str3=str3.replace(\"]\",\"\")\n    str3=str3.replace(\"{\",\"\")\n    str3=str3.replace(\"}\",\"\")\n    str3=str3.replace(\"{\",'\"')\n    str3=str3.replace(\"}\",\"\")\n    str3=str3.replace(\"|\",\"\")\n    str3=str3.replace(\"&\",\"\")\n    str3=str3.replace(\"!\",\"\")\n    str3=str3.replace(\"#\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\"~\",\"\")\n    str3=str3.replace(\"*\",\"\")\n    str3=str3.replace(\"*\",\"\")\n    str3=str3.replace(\"@\",\"\")\n    str3=str3.replace(\"@\",\"\")\n    str3=str3.replace(\"_\",\"\")\n    str3=str3.replace(\"_\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\">\",\"\")\n    str3=str3.replace(\"<\",\"\")\n    str3=str3.replace(\" \",\"\")\n    str3=str3.replace(\".\", \"\")\n    str3=str3.replace(\"  \",\"\")\n    str3=str3.replace(\" \",\"\")\n    str3=str3.replace(\"  \",\"\")\n    str3=str3.replace(\"(\",\"\")\n    str3=str3.replace(\")\",\"\")\n    str3=str3.replace(\"[\",\"\")\n    str3=str3.replace(\"]\",\"\")\n    str3=str3.replace(\"{\",\"\")\n    str3=str3.replace(\"}\",\"\")\n    str3=str3.replace(\"{\",'\"')\n    str3=str3.replace(\"}\",\"\")\n    str3=str3.replace(\"|\",\"\")\n    str3=str3.replace(\"&\",\"\")\n    str3=str3.replace(\"!\",\"\")\n    str3=str3.replace(\"#\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\"~\",\"\")\n    str3=str3.replace(\"*\",\"\")\n    str3=str3.replace(\"*\",\"\")\n    str3=str3.replace(\"@\",\"\")\n    str3=str3.replace(\"@\",\"\")\n    str3=str3.replace(\"_\",\"\")\n    str3=str3.replace(\"_\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\">\",\"\")\n    str3=str3.replace(\"<\",\"\")\n    str3=str3.replace(\" \",\"\")\n    str3=str3.replace(\".\", \"\")\n    str3=str3.replace(\"  \",\"\")\n    str3=str3.replace(\" \",\"\")\n    str3=str3.replace(\"  \",\"\")\n    str3=str3.replace(\"(\",\"\")\n    str3=str3.replace(\")\",\"\")\n    str3=str3.replace(\"[\",\"\")\n    str3=str3.replace(\"]\",\"\")\n    str3=str3.replace(\"{\",\"\")\n    str3=str3.replace(\"}\",\"\")\n    str3=str3.replace(\"{\",'\"')\n    str3=str3.replace(\"}\",\"\")\n    str3=str3.replace(\"|\",\"\")\n    str3=str3.replace(\"&\",\"\")\n    str3=str3.replace(\"!\",\"\")\n    str3=str3.replace(\"#\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\"~\",\"\")\n    str3=str3.replace(\"*\",\"\")\n    str3=str3.replace(\"*\",\"\")\n    str3=str3.replace(\"@\",\"\")\n    str3=str3.replace(\"@\",\"\")\n    str3=str3.replace(\"_\",\"\")\n    str3=str3.replace(\"_\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\">\",\"\")\n    str3=str3.replace(\"<\",\"\")\n    str3=str3.replace(\" \",\"\")\n    str3=str3.replace(\"  \",\"\")\n    str3=str3.replace(\" \",\"\")\n    str3=str3.replace(\"  \",\"\")\n    str3=str3.replace(\"(\",\"\")\n    str3=str3.replace(\")\",\"\")\n    str3=str3.replace(\"[\",\"\")\n    str3=str3.replace(\"]\",\"\")\n    str3=str3.replace(\"{\",\"\")\n    str3=str3.replace(\"}\",\"\")\n    str3=str3.replace(\"{\",'\"')\n    str3=str3.replace(\"}\",\"\")\n    str3=str3.replace(\"|\",\"\")\n    str3=str3.replace(\"&\",\"\")\n    str3=str3.replace(\"!\",\"\")\n    str3=str3.replace(\"#\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\"~\",\"\")\n    str3=str3.replace(\"*\",\"\")\n    str3=str3.replace(\"*\",\"\")\n    str3=str3.replace(\"@\",\"\")\n    str3=str3.replace(\"@\",\"\")\n    str3=str3.replace(\"_\",\"\")\n    str3=str3.replace(\"_\",\"\")\n    str3=str3.replace(\"$\",\"\")\n    str3=str3.replace(\">\",\"\")\n    str3=str3.replace(\""
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    str1 = str1.lower()\n    str1 = str1.replace(\" \",\"\")\n    \n    str1 = re.sub(r'[^a-zA-Z]',r'',str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    def get_length(s):\n        return len(s)\n    def remove_char(s):\n        return s.replace('U', '')\n    def remove_dot(s):\n        return s.replace('.', '')\n    def remove_at(s):\n        return s.replace('@', '')\n    def remove_punctuation(s):\n        return s.replace('\\'', '').replace('\\n', '').replace('\\t', '').replace('\\r', '').replace('\\s', '')\n    def remove_special_char(s):\n        return s.replace('[', '').replace(']', '').replace('+', '').replace('_', '').replace('!', '').replace('-', '').replace('=', '').replace('(', '').replace(')', '').replace(',', '').replace('.', '').replace('\"', '').replace('{', '').replace('}', '')\n    def remove_whitespace(s):\n        return s.replace(' ', '')\n    def remove_noise(s):\n        return s.replace('  ','')\n    def remove_space(s):\n        return s.replace(' ', '')\n    def remove_non_ascii(s):\n        return s.encode('ascii', 'ignore').decode()\n    def remove_space_only(s):\n        return s.replace(' ', '')\n    def remove_numbers(s):\n        return s.replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '')\n    def remove_other_spaces(s):\n        return s.replace(' ', '')\n    def remove_special_chars(s):\n        return s.replace('[', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '')\n    # Remove numbers from a string\n    def number_removal(s):\n        return re.sub('[0-9]+', '', s).replace('.', '').replace('\\n', '').replace('\\t', '').replace('\\r', '').replace('\\s', '')\n    def number_special_chars(s):\n        return re.sub('[0-9]+', '', s).replace('[', '').replace(']', '').replace('[', '').replace(']', '').replace('[', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '')\n    def remove_symbols(s):\n        return re.sub('[!#$%&*+-./:<=>?@[\\]^_`{|}~]+', '', s).replace('[', '').replace(']', '').replace('(', '').replace(')', '').replace('_', '').replace('.', '').replace('!', '').replace('?', '')\n    def remove_extra_symbols(s):\n        return re.sub('[!#$%&*+-./:<=>?@[\\]^_`{|}~]+', '', s).replace('!', '').replace('?', '')\n    def remove_capital_letters(s):\n        return re.sub('[a-zA-Z]', '', s).replace('_', '').replace('.', '').replace('!', '').replace('?', '')\n    def remove_end_symbol(s):\n        return re.sub('[!#$%&*+-./:<=>?@[\\]^_`{|}~]+', '', s).replace('!', '').replace('?', '')\n    def remove_extra_symbol(s):\n        return re.sub('[!#$%&*+-./:<=>?@[\\]^_`{|}~]+', '', s).replace('!', '').replace('?', '').replace('_', '')\n    def remove_extra_numbers(s):\n        return re.sub('[0-9]+', '', s).replace('.', '').replace('\\n', '').replace('\\t', '').replace('\\r', '').replace('\\s', '')\n    # Remove the spaces from the text\n    def remove_spaces(s):\n        return re.sub(' +','', s).replace('  ','').replace('   ','').replace('  ','').replace('    ','')\n    def remove_quotation_marks(s):\n        return s.replace('\"', '')\n    # Remove the symbols from a text\n    def remove_symbols(s):\n        return re.sub('[!#$%&*+-./:<=>?@[\\]^_`{|}~]+', '', s).replace('!', '').replace('?', '')\n    def remove_special_char(s):\n        return re.sub('[!#$%&*+-./:<=>?@[\\]^_`{|}~]+', '', s).replace('!', '').replace('?', '').replace('_', '').replace('.', '').replace('!', '').replace('?', '').replace('.', '')\n    def remove_letters(s):\n        return re.sub('[a-zA-Z]', '', s).replace('_', '').replace('.', '').replace('!', '').replace('?', '')\n    # Remove the extra symbols from a string\n    def remove_extra_symbols(s):\n        return re.sub('[!#$%&*+-./:<=>?@[\\]^_`{|}~]+', '', s).replace('!', '').replace('?', '')\n    # Remove the extra numbers from a string\n    def remove_extra_numbers(s):\n        return re.sub('[0-9]+', '', s).replace('.', '').replace('\\n', '').replace('\\t', '').replace('\\r', '').replace('\\s', '')\n    # Remove the extra spaces from a string\n    def remove_extra_spaces(s):\n        return re.sub(' +','', s).replace('  ','').replace('   ','').replace('  ','').replace('    ','')\n    # Remove the numbers from a string\n    def remove_numbers(s):\n        return re.sub('[0-9]+', '', s).replace('.', '').replace('\\n', '').replace('\\t', '').replace('\\r', '').replace('\\s', '')\n    # Remove the spaces from the text\n    def remove_spaces(s):\n        return re.sub(' +','', s).replace('  ','').replace('   ','').replace('  ','').replace('    ','')\n    # Remove the extra spaces from a string\n    def remove_extra_spaces(s):\n        return re.sub(' +','', s).replace('  ','').replace('   ','').replace('  ','').replace('    ','')\n    # Remove the extra numbers from a string\n    def remove_extra_numbers(s):\n        return re.sub('[0-9]+', '', s).replace('.', '').replace('\\n', '').replace('\\t', '').replace('\\r', '').replace('\\s', '')\n    # Remove the extra spaces from a string\n    def remove_extra_spaces(s):\n        return re.sub(' +','', s).replace('  ','').replace('   ','').replace('  ','').replace('    ','')\n    # Remove the extra numbers from a string\n    def remove_extra_numbers(s):\n        return re.sub('[0-9]+', '', s).replace('.', '').replace('\\n', '').replace('\\t', '').replace('\\r', '').replace('\\s', '')\n    # Remove the extra symbols from a string\n    def remove_extra_symbols("
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = sorted(lst)\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # create a new empty list called result\n    result = []\n    # iterate through each sublist\n    for item in lst: \n        # if the item is not empty \n        if item!= []: \n            # add item to result\n            result.append(item[0])\n    # return result \n    return result"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n    \ndef Reverse(lst): \n    '''\n    Write a python function to get the last element of each sublist.\n    '''\n    return lst[-1]\n    \ndef Split(lst): \n    '''\n    Write a python function to split the elements of a list into separate sublists.\n    '''\n    return lst[::2] \n    \ndef Sum(lst): \n    '''\n    Write a python function to get the sum of all of the numbers in a list.\n    '''\n    return sum(lst) \n    \ndef Average(lst): \n    '''\n    Write a python function to get the average of a list of numbers.\n    '''\n    return Sum(lst)/len(lst)\n    \ndef Quartile(lst): \n    '''\n    Write a python function to get the median of a list of numbers.\n    '''\n    return lst[len(lst)//2]\n    \ndef IQR(lst): \n    '''\n    Write a python function to get the interquartile range of a list of numbers.\n    '''\n    return lst[len(lst)//2] - lst[(len(lst)-1)//2] \n    \ndef Evaluate(lst): \n    '''\n    Write a python function to evaluate the mean, median, and IQR of a list of numbers.\n    '''\n    return (lst[0]+lst[len(lst)-1])/2\n    \ndef Exponential(lst): \n    '''\n    Write a python function to calculate the exponential of a list of numbers.\n    '''\n    return round(lst[len(lst)//2], 3) \n    \ndef Histogram(lst): \n    '''\n    Write a python function to get the number of occurrences of each value in a list.\n    '''\n    histogram = {}\n    for i in lst: \n        histogram[i] = histogram.get(i, 0) + 1\n    return histogram\n    \ndef Discrete(lst): \n    '''\n    Write a python function to get the number of occurrences of each value in a list.\n    '''\n    histogram = {}\n    for i in lst: \n        histogram[i] = lst.count(i)\n    return histogram\n    \ndef Subset(lst, target): \n    '''\n    Write a python function to get the subset of a list of numbers.\n    '''\n    subset = []\n    for i in lst: \n        if target <= i: \n            subset.append(i)\n    return subset\n    \ndef SubsetSquared(lst, target): \n    '''\n    Write a python function to get the subset of a list of numbers.\n    '''\n    subset = []\n    for i in lst: \n        if target ** 2 <= i ** 2: \n            subset.append(i ** 2)\n    return subset\n    \ndef SumSquared(lst): \n    '''\n    Write a python function to get the sum of all squares of a list of numbers.\n    '''\n    return Sum(lst) ** 2\n    \ndef SumSquare(lst): \n    '''\n    Write a python function to get the sum of all squares of a list of numbers.\n    '''\n    return SumSquared(lst) \n    \ndef Zip(lst1, lst2): \n    '''\n    Write a python function to zip two lists of numbers.\n    '''\n    return lst1 + lst2 \n    \ndef SumList(lst): \n    '''\n    Write a python function to get the sum of all values in a list.\n    '''\n    return Sum(lst)\n    \ndef SumSquaredList(lst): \n    '''\n    Write a python function to get the sum of all squares of a list of numbers.\n    '''\n    return SumSquared(lst)\n    \ndef AverageList(lst): \n    '''\n    Write a python function to get the average of a list of numbers.\n    '''\n    return Sum(lst)/len(lst)\n    \ndef MedianList(lst): \n    '''\n    Write a python function to get the median of a list of numbers.\n    '''\n    return (lst[len(lst)//2])\n    \ndef MedianSquaredList(lst): \n    '''\n    Write a python function to get the median squared of a list of numbers.\n    '''\n    return (lst[len(lst)//2]**2)\n    \ndef MedianSquareList(lst): \n    '''\n    Write a python function to get the median square of a list of numbers.\n    '''\n    return (lst[len(lst)//2]**2)\n    \ndef ModeList(lst): \n    '''\n    Write a python function to get the mode of a list of numbers.\n    '''\n    mode = 0\n    for i in lst: \n        if lst.count(i) > mode: \n            mode = lst.count(i)\n    return mode\n    \ndef ModeSquaredList(lst): \n    '''\n    Write a python function to get the mode squared of a list of numbers.\n    '''\n    mode = 0\n    for i in lst: \n        if lst.count(i) > mode: \n            mode = lst.count(i)\n    return mode ** 2\n    \ndef ModeSquareList(lst): \n    '''\n    Write a python function to get the mode square of a list of numbers.\n    '''\n    mode = 0\n    for i in lst: \n        if lst.count(i) > mode: \n            mode = lst.count(i)\n    return mode ** 2\n    \ndef ModeSquareList(lst): \n    '''\n    Write a python function to get the mode square of a list of numbers.\n    '''\n    mode = 0\n    for i in lst: \n        if lst.count(i) > mode: \n            mode = lst.count(i)\n    return mode ** 2\n    \ndef ModeList(lst): \n    '''\n    Write a python function to get the mode of a list of numbers.\n    '''\n    mode = 0\n    for i in lst: \n        if lst.count(i) > mode: \n            mode = lst.count(i)\n    return mode\n    \ndef ModeSquaredList(lst): \n    '''\n    Write a python function to get the mode squared of a list of numbers.\n    '''\n    mode = 0\n    for i in lst: \n        if lst.count(i) > mode: \n            mode = lst.count(i)\n    return mode ** 2\n    \ndef ModeSquareList(lst): \n    '''\n    Write a python function to get the mode square of a list of numbers.\n    '''\n    mode = 0\n    for i in lst: \n        if lst.count(i) > mode: \n            mode = lst.count(i)\n    return mode ** 2\n    \ndef ModeSquareList(lst): \n    '''\n    Write a python function to get the mode square of a list of numbers.\n    '''\n    mode = 0\n    for i in lst: \n        if lst.count(i) > mode: \n            mode = lst.count(i)\n    return mode ** 2\n    \ndef ModeList(lst): \n    '''\n    Write a python function to get the mode of a list of numbers.\n    '''\n    mode = 0\n    for i in lst: \n        if lst.count(i) > mode: \n            mode = lst.count(i)\n    return mode\n    \ndef ModeSquaredList(lst): \n    '''\n    Write a python function to get the mode squared of a list of numbers.\n    '''\n    mode = 0\n    for i in lst: \n        if lst.count(i) > mode: \n            mode = lst.count(i)\n    return mode ** 2\n    \ndef ModeSquareList(lst): \n    '''\n    Write a python function to get the mode square of a list o"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # write your code here\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst2 = []\n    for i in range(len(lst)):\n        for j in lst[i]:\n            lst2.append(j)\n    return lst2\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    my_list = []\n    for i in range(0,len(lst)):\n        my_list.append(lst[i][0])\n    return my_list\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = lst[::]\n    lst.sort(reverse = True)\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    i=0\n    while i<len(lst):\n        j=i+1\n        while j<len(lst):\n            if lst[i][j]==\" \":\n                j=j+1\n            else:\n                break\n        else:\n            lst[i]=lst[i].replace(\" \",\"\")\n            lst.pop(i)\n            i=j\n    return lst\n    \n    \ndef Merge(lst):\n    '''\n    Write a python function to merge the sublists lst and return the list.\n    '''\n    if len(lst)>1:\n        return [lst[0]] + Merge(lst[1:])\n    else:\n        return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # get the first element of each sublist\n    for i in range(len(lst)):\n        lst[i] = lst[i][0]\n    return lst\n    \ndef main():\n    '''\n    create a list containing a tuple of (l, n)\n    '''\n    lst = [('a', 3), ('b', 5), ('c', 2), ('d', 1), ('e', 5), ('f', 3), ('g', 2)]\n    print(Extract(lst))\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in str:\n        if i.isupper():\n            upper_count += 1\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in str:\n        if i.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt = 0\n    for i in range(len(str)):\n        if(str[i].isupper()):\n            cnt += 1\n    print(cnt)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # CODE TO DO\n    ctr = str.upper().count('U')\n    print(ctr)\n    \nupper_ctr('myString')\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    new_str = \"\"\n    for letter in str:\n        if letter.isupper():\n            new_str += letter.upper()\n        else:\n            new_str += letter\n    return new_str\n    \nstr = input(\"Enter string: \")\nupper_ctr(str)\nprint(upper_ctr(str)"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Create a counter object\n    ctr = 0\n    # Loop through the string\n    for i in range(len(str)):\n        # If the char is uppercase\n        if str[i].isupper():\n            # Increment the counter\n            ctr += 1\n    # Return the result\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ans = 0\n    for i in range(0, len(str)):\n        if str[i].isupper():\n            ans += 1\n    return ans\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(len(list1)-1):\n            combinations.append(list1[i] + list1[j] + list1[j+1])\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combine(list1, combi, prev_comb):\n        if prev_comb in list1:\n            return list1\n        else:\n            if len(combi) == len(list1):\n                combi.append(list1[prev_comb])\n                return combi\n            else:\n                for i in range(len(list1)):\n                    if i!= prev_comb:\n                        combi.append(list1[i])\n                        combine(list1, combi, i)\n    \n    list1 = [1,2,3]\n    combine(list1, [], -1)\n    return list1\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if len(result) > 0:\n            for j in combinations(list1, i+1):\n                result.append(list(j))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    def combination_of_list(list1):\n        '''\n        Write a function to find all possible combinations of the elements of a given list.\n        '''\n        \n        def combinations(index,list1):\n            '''\n            Write a function to find all possible combinations of the elements of a given list.\n            '''\n            \n            def combination_of_list_internal(index,list1):\n                '''\n                Write a function to find all possible combinations of the elements of a given list.\n                '''\n                \n                if index == len(list1):\n                    combinations_of_list_internal(index,list1)\n                \n                for i in range(index,len(list1)+index):\n                    list1[i] = list1[i-index]\n                    combination_of_list_internal(i,list1)\n                    list1[i] = list1[i]\n        \n        if len(list1) == 0:\n            return None\n        \n        combinations(len(list1),list1)\n    \n    combination_of_list(list1)\n    return list1\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            result.append([list1[i],list1[j]])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            list_combinations.append([list1[i], list1[j]])\n    return list_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1, len(list1)))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(0, len(list1)):\n        for j in combinations_list(list1[:i]+list1[i+1:]):\n            combinations.append(list(j))\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append([list1[i], list1[i+1]])\n    \n    return list2\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return None\n    \n    def helper(arr, index, prod):\n        nonlocal maximum\n        if index == len(arr):\n            return prod\n        \n        left, right = index, index\n        curr_max = arr[index] * prod\n        \n        if arr[index] * prod > max(curr_max, arr[left] * prod):\n            return helper(arr, left, prod)\n        if arr[index] * prod < max(curr_max, arr[right] * prod):\n            return helper(arr, right, prod)\n        \n        curr_max = max(curr_max, arr[index] * prod)\n        return curr_max\n    \n    maximum = arr[0]\n    for i in range(1, len(arr)):\n        maximum = max(arr[i] * maximum, arr[i] * arr[i])\n        \n        if maximum * arr[i] > maximum:\n            maximum = arr[i] * arr[i]\n    \n    return helper(arr, 0, 1)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_curr_sum = arr[0]\n    max_curr_sum_idx = 0\n    for i in range(1,len(arr)):\n        curr_sum = arr[i] + arr[i-1]\n        if curr_sum > max_curr_sum:\n            max_curr_sum = curr_sum\n            max_curr_sum_idx = i\n    return max_curr_sum\n    \ndef max_subarray_product_rec(arr):\n    '''\n    \n    '''\n    if len(arr) == 0:\n        return 0\n    max_curr_sum = arr[0]\n    max_curr_sum_idx = 0\n    for i in range(1,len(arr)):\n        curr_sum = arr[i] + arr[i-1]\n        if curr_sum > max_curr_sum:\n            max_curr_sum = curr_sum\n            max_curr_sum_idx = i\n    return max_curr_sum\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    sub_array_product_array = []\n    \n    product = 1\n    for i in range(len(arr)):\n        product = arr[i] * product\n        sub_array_product_array.append(product)\n        \n    return max(sub_array_product_array)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    length = len(arr)\n    if length == 1:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_sum = -float(\"inf\")\n    prod = 1\n    curr_sum = arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_sum = arr[i] * prod\n        max_sum = max(max_sum, curr_sum)\n        prod *= curr_sum\n        \n    return max_sum\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    product = 1\n    temp = 1\n    arr.sort()\n    # print(arr)\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] * arr[j] > 0:\n                if product > arr[i] * arr[j]:\n                    product = arr[i] * arr[j]\n                    temp = arr[i]\n                if product == arr[j]:\n                    if j - i >= 2:\n                        product = arr[i] * arr[j]\n                        temp = arr[i]\n    return temp\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    l = len(arr)\n    subarray = [1]*l\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = max(result, arr[i] * result)\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # array_size = len(arr)\n    # output = []\n    # while True:\n    #     if len(output) < array_size:\n    #         output.append(arr[0])\n    #         for i in range(1, array_size):\n    #             if arr[i] > output[i-1]:\n    #                 break\n    #         if arr[i] == output[i-1]:\n    #             output = output[:i]\n    #             break\n    #         else:\n    #             output = output[:i] + [arr[i]] + output[i:]\n    #     else:\n    #         break\n    #     return max(output)\n    #     \n    \n    # for i in range(1,len(arr)):\n    #     max_subarray_product(arr[:i])\n    #     max_subarray_product(arr[i:])\n    # \n    # return max(arr)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_sub_product = [1]\n    current_sum = [1]\n    subarray_index = 1\n    max_sum = 0\n    for i in range(len(arr)):\n        current_sum.append(current_sum[i]*arr[i])\n        max_sum = max(current_sum[i], max_sum)\n        max_sub_product.append(max_sum)\n        subarray_index += 1\n        if max_sum == max_sub_product[i]:\n            max_sub_product[i] = current_sum[i]\n    return max_sub_product\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for val in dict.values():\n        if len(dict) == n:\n            return True\n        else:\n            if val!= dict[val]:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if len(dict[i])!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    i = 0\n    while i < n:\n        if len(set(dict.values())) == len(dict):\n            break\n        i = i + 1\n    return len(dict) == len(set(dict.values()))\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for x in dict.values():\n        if x!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.keys():\n        for j in dict.values():\n            if i!= j:\n                break\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        print('The length of the dictionary is not the same as the length of the values in the dictionary')\n        return False\n    for key in dict.keys():\n        if not key in dict.values():\n            print('Error: The value for the key'+ key +'is not found in the dictionary')\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values()))==n\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        for j in dict.values():\n            if i!= j:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not isinstance(dict, dict):\n        raise TypeError(\"dict must be a dictionary\")\n    else:\n        if not all(k in dict for k in n):\n            raise KeyError(\"Keys are missing in the dictionary\")\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == \"\":\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for value in dict1.values():\n        if value == '' or value == None:\n            del dict1[value]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if len(dict1[key]) > 0:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    temp_dict = dict()\n    for k in dict1:\n        if len(k) == 0:\n            pass\n        else:\n            temp_dict[k] = dict1[k]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == '':\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if v:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if len(dict1[key]) == 0:\n            dict1.pop(key)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.clear()\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k,v in dict1.items():\n        if v == 0:\n            dict1.pop(k)\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_sum = arr[0]*arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(arr[i], max_sum)\n    return max_sum\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] * arr[1]\n    \n    dp = [None] * (n + 1)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    m = []\n    for i in arr:\n        m.append(i)\n    for i in range(1, len(m)):\n        for j in range(i-1, -1, -1):\n            m[i] *= m[j]\n    return max(m)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Idea: Need to find the maximum and then update the maximum product of the subsequence\n    # 2n+1 is the maximum product of the last n elements\n    # Find the 1st non-repeat number and then repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # If the last element is 1 then it will end up having a single greater product than it is repeated\n    # If the last element is 0 then it will end up having a single less product than it is repeated\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the 1st non-repeat number and repeat the process\n    # Find the "
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    p = arr[0]\n    for i in range(1, n):\n        p = arr[i] * p\n        p = p // arr[i-1]\n    return p\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product=1\n    for i in arr:\n        for j in arr:\n            if(i+j>max_product):\n                max_product=i+j\n    return max_product\n    \n    \n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    sum=0\n    for i in range(1,len(arr)):\n        for j in range(i):\n            if arr[j]>arr[i]:\n                sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    product = 1\n    for i in range(0, n):\n        product = product * arr[i]\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def compare(arr, num, index):\n        if(arr[index] < num):\n            return -1\n        elif(arr[index] > num):\n            return 1\n        else:\n            return 0\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # if the array is of length 0 or 1\n    if len(arr) == 0 or len(arr) == 1:\n        return arr[0]\n    \n    # if the array is of length 2\n    if len(arr) == 2:\n        return max(arr[0]*arr[1], arr[1]*arr[0])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    # 0) = (1, 2) (2, 3)\n    # 1) = (4, 5)\n    # 2) = (6, 7)\n    # 3) = (8, 9)\n    # 4) = (10, 11)\n    # 5) = (12, 13)\n    # 6) = (14, 15)\n    # 7) = (16, 17)\n    # 8) = (18, 19)\n    # 9) = (20, 21)\n    # 10) = (22, 23)\n    # 11) = (24, 25)\n    # 12) = (26, 27)\n    # 13) = (28, 29)\n    # 14) = (30, 31)\n    # 15) = (32, 33)\n    # 16) = (34, 35)\n    # 17) = (36, 37)\n    # 18) = (38, 39)\n    # 19) = (40, 41)\n    # 20) = (42, 43)\n    # 21) = (44, 45)\n    # 22) = (46, 47)\n    # 23) = (48, 49)\n    # 24) = (50, 51)\n    # 25) = (52, 53)\n    # 26) = (54, 55)\n    # 27) = (56, 57)\n    # 28) = (58, 59)\n    # 29) = (60, 61)\n    # 30) = (62, 63)\n    # 31) = (64, 65)\n    # 32) = (66, 67)\n    # 33) = (68, 69)\n    # 34) = (70, 71)\n    # 35) = (72, 73)\n    # 36) = (74, 75)\n    # 37) = (76, 77)\n    # 38) = (78, 79)\n    # 39) = (80, 81)\n    # 40) = (82, 83)\n    # 41) = (84, 85)\n    # 42) = (86, 87)\n    # 43) = (88, 89)\n    # 44) = (90, 91)\n    # 45) = (92, 93)\n    # 46) = (94, 95)\n    # 47) = (96, 97)\n    # 48) = (98, 99)\n    # 49) = (100, 101)\n    # 50) = (102, 103)\n    # 51) = (104, 105)\n    # 52) = (106, 107)\n    # 53) = (108, 109)\n    # 54) = (110, 111)\n    # 55) = (112, 113)\n    # 56) = (114, 115)\n    # 57) = (116, 117)\n    # 58) = (118, 119)\n    # 59) = (120, 121)\n    # 60) = (122, 123)\n    # 61) = (124, 125)\n    # 62) = (126, 127)\n    # 63) = (128, 129)\n    # 64) = (130, 131)\n    # 65) = (132, 133)\n    # 66) = (134, 135)\n    # 67) = (136, 137)\n    # 68) = (138, 139)\n    # 69) = (140, 141)\n    # 70) = (142, 143)\n    # 71) = (144, 145)\n    # 72) = (146, 147)\n    # 73) = (148, 149)\n    # 74) = (150, 151)\n    # 75) = (152, 153)\n    # 76) = (154, 155)\n    # 77) = (156, 157)\n    # 78) = (158, 159)\n    # 79) = (160, 161)\n    # 80) = (162, 163)\n    # 81) = (164, 165)\n    # 82) = (166, 167)\n    # 83) = (168, 169)\n    # 84) = (170, 171)\n    # 85) = (172, 173)\n    # 86) = (174, 175)\n    # 87) = (176, 177)\n    # 88) = (178, 179)\n    # 89) = (180, 181)\n    # 90) = (182, 183)\n    # 91) = (184, 185)\n    # 92) = (186, 187)\n    # 93) = (188, 189)\n    # 94) = (190, 191)\n    # 95) = (192, 193)\n    # 96) = (194, 195)\n    # 97) = (196, 197)\n    # 98) = (198, 199)\n    # 99) = (200, 201)\n    # 100) = (202, 203)\n    # 101) = (204, 205)\n    # 102) = (206, 207)\n    # 103) = (208, 209)\n    # 104) = (210, 211)\n    # 105) = (212, 213)\n    # 106) = (214, 215)\n    # 107) = (216, 217)\n    # 108) = (218, 219)\n    # 109) = (220, 221)\n    # 110) = (222, 223)\n    # 111) = (224, 225)\n    # 112) = (226, 227)\n    # 113) = (228, 229)\n    # 114) = (230, 231)\n    # 115) = (232, 233)\n    # 116) = (234, 235)\n    # 117) = (236, 237)\n    # 118) = (238, 239)\n    # 119) = (240, 241)\n    # 120) = (242, 243)\n    # 121) = (244, 245)\n    # 122) = (246, 247)\n    # 123) = (248, 249)\n    # 124) = (250, 251)\n    # 125) = (252, 253)\n    # 126) = (254, 255)\n    # 127) = (256, 257)\n    # 128) = (258, 259)\n    # 129) = (260, 261)\n    # 130) = (262, 263)\n    # 131) = (264, 265)\n    # 132) = (266, 267)\n    # 133) = (268, 269)\n    # 134) = (270, 271)\n    # 135) = (272, 273)\n    # 136) = (274, 275)\n    # 137) = (276, 277)\n    # 138) = (278, 279)\n    # 139) = (280, 281)\n    # 140) = (282, 283)\n    # 141) = (284, 285)\n    # 142) = (286, 287)\n    # 143) = (288, 289)\n    # 144) = (290, 291)\n    # 145) = (292, 293)\n    # 146) = (294, 295)\n    # 147) = (296, 297)\n    # 148) = (298, 299)\n    # 149) = (300, 301)\n    # 150) = (302, 303)\n    # 151) = (304, 305)\n    # 152) = (306, 307)\n    # 153) = (308, 309)\n    # 154) = (310, 311)\n    # 155) = (312, 313)\n    # 156) = (314, 315)\n    # 157) = (316, 317)\n    # 158) = (318, 319)\n    # 159) = (320, 321)\n    # 160) = (322, 323)\n    # 161) = (324, 325)\n    # 162) = (326, 327)\n    # 163) = (328, 329)\n    # 164) = (330, 331)\n    # 165) = (332, 333)\n    # 166) = (334, 335)\n    # 167) = (336, 337)\n    # 168) = (338, 339)\n    # 169) = (340, 341)\n    # 170) = (342, 343)\n    # 171) = (344, 345)\n    # 172) = (346, 347)\n    # 173) = (348, 349)\n    # 174) = (350, 351)\n    # 175) = (352, 353)\n    # 176) = (354, 355)\n    # 177) = (356, 357)\n    # 178) = (358, 359)\n    # 179) = (360, 361)\n    # 180) = (362, 363)\n    # 181) = (364, 365"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup + (test_tup[1], test_tup[2])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(set(test_tup).difference(tuple(test_tup)))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def pairwise(tup1, tup2):\n        '''\n        Return the add up of the two tuples\n        '''\n        if len(tup1) == len(tup2):\n            add = 0\n            for i in range(len(tup1)):\n                add += tup1[i] + tup2[i]\n            return add\n        else:\n            return 0\n    return pairwise\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    N = len(test_tup)\n    #calculate pairwise addition\n    pairs = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if(test_tup[i] == test_tup[j]):\n                pairs += 1\n    #print(pairs)\n    return pairs\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairs = []\n    start_index = 0\n    end_index = 0\n    \n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            pairs.append((test_tup[i], test_tup[i+1]))\n        if i == len(test_tup) - 1:\n            end_index = i\n            \n    # Create a sorted list of tuples of all the elements of the list\n    for i in range(len(pairs)):\n        pairs[i] = (pairs[i][0], pairs[i][1])\n    \n    # Find the pair that are on both ends\n    for i in range(len(pairs)):\n        if (pairs[i][0] == pairs[i+1][0]) and (pairs[i][0]!= pairs[i-1][0]):\n            pairs[i] = (pairs[i][0], pairs[i][1])\n    \n    # Check if the pair is already in the list\n    for i in range(len(pairs)):\n        if (pairs[i][0] == pairs[i+1][0]) and (pairs[i][0]!= pairs[i-1][0]):\n            pairs[i] = (pairs[i][0], pairs[i][1])\n            \n    # Reset start index\n    start_index = 0\n    \n    for i in range(len(pairs)):\n        if pairs[i][0] == pairs[i+1][0]:\n            start_index = i\n    \n    # Reset end index\n    end_index = len(pairs) - 1\n    \n    # Check if the last element of the tuple is the end of the list\n    if end_index!= len(pairs):\n        pairs.append((pairs[end_index][0], pairs[end_index][1]))\n    \n    return pairs\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(sorted(tup))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return(test_tup[0] + test_tup[1])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(sorted(((test_tup[0]+test_tup[1])//2, (test_tup[0]+test_tup[1]) % 2)))\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 1\n    for i in range(1, n): \n        remainder = remainder*arr[i] \n    return remainder \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if (n == 1): \n        return arr[0] \n    else: \n        return find_remainder(arr, n - 1) * arr[0] \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # if only one element is present \n    if len(arr) == 1: \n        return arr[0] \n    # if n is 1, we find the product \n    if n == 1: \n        return arr[0] \n    # if n is 2, find the product of two numbers \n    if n == 2: \n        return arr[0] * arr[1] \n    # if n is 3, find the product of three numbers \n    if n == 3: \n        return arr[0] * arr[1] * arr[2] \n    # if n is 4, find the product of four numbers \n    if n == 4: \n        return arr[0] * arr[1] * arr[2] * arr[3] \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(1, n+1): \n        prod = prod*arr[i-1] \n    return prod \ndef factorial(num): \n    '''\n    Write a function that returns the factorial of a given number.\n    '''\n    if num < 0: \n        return 0\n    elif num == 0: \n        return 1\n    else: \n        return num*factorial(num-1) \ndef f(num,k): \n    '''\n    Write a function that returns the sum of the first num terms in a \n    progression.\n    '''\n    if num == 0: \n        return 0\n    elif num == 1: \n        return 1\n    elif num == 2: \n        return 2\n    else: \n        return f(num-1,k)+f(num-2,k) \ndef fibonacci(n): \n    '''\n    Write a function that returns the n-th Fibonacci number. \n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)\ndef sum_digits(num): \n    '''\n    Return the sum of the digits of an integer.\n    '''\n    if num < 10: \n        return num \n    else: \n        return sum_digits(num//10) + num%10\ndef sum_decimals(num): \n    '''\n    Return the sum of the decimals of an integer.\n    '''\n    if num < 10: \n        return num \n    else: \n        return sum_decimals(num//10) + num%10 \ndef is_prime(num): \n    '''\n    Write a function that returns True if num is prime, False otherwise. \n    '''\n    if num == 2 or num == 3: \n        return True\n    if num == 4 or num == 5: \n        return True\n    if num > 4 and num % 2 == 0: \n        return False\n    for i in range(3,int(math.sqrt(num))+1,2): \n        if num%i == 0: \n            return False\n    return True\ndef prime_factors(num): \n    '''\n    Return the number of prime factors of the number. \n    '''\n    if num == 2: \n        return 1\n    if num == 3: \n        return 2\n    if is_prime(num): \n        return 3\n    i = 4\n    k = 0\n    while k < int(math.sqrt(num)): \n        if num%i == 0: \n            num = num//i \n            k = k+1 \n            continue\n        i = i + 1\n    return i \ndef comb(x, y): \n    '''\n    Write a function that returns the number of combinations of x taken to the left. \n    '''\n    if y == 0: \n        return 1\n    if x == 0 or y == 0: \n        return 0\n    return comb(x-1, y) + comb(x, y-1)\ndef sum_factors(num): \n    '''\n    Return the sum of the prime factors of the number.\n    '''\n    if num == 2: \n        return 1\n    if num == 3: \n        return 2\n    if num == 4: \n        return 3\n    for i in range(5, int(math.sqrt(num))+1, 2): \n        if num%i == 0: \n            num = num//i \n            break\n    return num\ndef is_prime_mod_3(num): \n    '''\n    Return True if num is a prime number mod 3, False otherwise. \n    '''\n    if num == 2 or num == 3: \n        return True\n    if num == 4 or num == 5: \n        return False\n    if num % 2 == 0 or num % 3 == 0: \n        return False\n    for i in range(4, int(math.sqrt(num))+1, 2): \n        if num%i == 0: \n            return False\n    return True\ndef is_prime_mod_7(num): \n    '''\n    Return True if num is a prime number mod 7, False otherwise. \n    '''\n    if num == 2 or num == 3: \n        return True\n    if num == 4 or num == 5: \n        return False\n    if num % 2 == 0 or num % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(num))+1, 2): \n        if num%i == 0: \n            return False\n    return True\ndef is_prime_mod_11(num): \n    '''\n    Return True if num is a prime number mod 11, False otherwise. \n    '''\n    if num == 2 or num == 3: \n        return True\n    if num == 4 or num == 5: \n        return False\n    if num % 2 == 0 or num % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(num))+1, 2): \n        if num%i == 0: \n            return False\n    return True\ndef prime_factorize(num): \n    '''\n    Return the prime factors of the number. \n    '''\n    if num == 1: \n        return 1, 2\n    if num == 2 or num == 4: \n        return 2, 1\n    for i in range(3, int(math.sqrt(num))+1, 2): \n        if num%i == 0: \n            return num//i, i\n    return num, 1\ndef combination(x, y): \n    '''\n    Return the number of combinations of x taken to the left. \n    '''\n    if y == 1 or y == 2: \n        return 1\n    if x == 0: \n        return 0\n    if y == 0: \n        return x+combination(x, y-1)\n    if y == 1: \n        return x+combination(x-1, y)\n    if y == 2: \n        return combination(x-1, y-1)\ndef rec_factors(num): \n    '''\n    Return the number of factors of the number. \n    '''\n    if num == 1: \n        return 1\n    if num == 2: \n        return 1\n    if num == 4 or num == 7: \n        return 2\n    if num % 2 == 0: \n        return rec_factors(num//2)\n    if num % 3 == 0: \n        return rec_factors(num//3)\n    if num % 5 == 0: \n        return rec_factors(num//5)\n    if num % 7 == 0: \n        return rec_factors(num//7)\n    return rec_factors(num-1)\ndef gcd(a, b): \n    '''\n    Return the greatest common divisor of a and b. \n    '''\n    while b!= 0: \n        a, b = b, a%b \n    return a\ndef lcm(a, b): \n    '''\n    Return the least common multiple of a and b. \n    '''\n    return (a * b) // gcd(a, b)\ndef factorial_n(num): \n    '''\n    Return the factorial of num. \n    '''\n    if num == 1 or num == 2: \n        return 1\n    if num == 3: \n        return 2\n    if num == 4 or num == 5: \n        return 5\n    if num % 3 == 0: \n        return factorial_n(num//3)\n    if num % 5 == 0: \n        return factorial_n(num//5)\n    return factorial_n(num-1)\ndef mod_pow(a, b): \n    '''\n    Return the modulo of a and b, modulo_pow(a, b) \n    '''\n    if b == 0: \n        return 1\n    if b == 1: \n        return 0\n    if a ="
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    divisor = 1\n    for i in range(1, n):\n        divisor *= i\n    return arr[:n] * divisor\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Your code here\n    if n == 0: \n        return 1\n    if n == 1: \n        return arr[0]\n    return find_remainder(arr, n//2) * arr[n//2]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in range(len(arr)):\n        res = res * arr[i] % n\n    return res\ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        res = res * arr[i] % n\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # remove all 0s from the array\n    arr = [num for num in arr if num!= 0]\n    \n    # get the length of the array\n    l = len(arr)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = n\n    for i in range(len(arr)):\n        remainder *= arr[i]\n    return remainder\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l[0] == l[-1]: \n        return True\n    else: \n        return False \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    print('inside check_Consecutive function')\n    c=0\n    for i in l:\n        if i % 10 == 0:\n            c+=1\n            if c == 10:\n                return True\n        else:\n            c=0\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    def consecutive(l): \n        for i in range(0, len(l)): \n            if i == len(l) - 1: \n                break\n            if l[i] == l[i + 1]: \n                return False\n        return True\n    if consecutive(l): \n        print(\"yes\")\n    else: \n        print(\"no\")\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    pass\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)): \n        if l[i]==l[i+1]: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # initialize lists\n    left = [] \n    right = [] \n    for i in range(len(l)):\n        if l[i] % 2!= 0: \n            left.append(l[i])\n        else:\n            right.append(l[i])\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l:\n        return False\n    if l[0] == l[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l)-1: \n        if l[i+1] - l[i] > 1:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = list(l)\n    list1 = []\n    for i in l:\n        list1.append(i)\n    for i in range(len(list1) - 1):\n        if list1[i] == list1[i + 1]:\n            list1[i], list1[i + 1] = list1[i + 1], list1[i]\n    if len(list1) > 2:\n        print(len(list1))\n    else:\n        print('No consecutive numbers')\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if test_list1 == test_list2:\n        return(tuple(test_list1))\n    else:\n        return(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list = sorted(test_list1 + test_list2)\n    intersection_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j] and i!= j:\n                if test_list[i] not in intersection_list:\n                    intersection_list.append(test_list[i])\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_1 = test_list1[0]\n    tuple_2 = test_list2[0]\n    for i in range(len(test_list1)):\n        if test_list1[i] == tuple_1:\n            tuple_1 = test_list1[i]\n            break\n    for j in range(len(test_list2)):\n        if test_list2[j] == tuple_2:\n            tuple_2 = test_list2[j]\n            break\n    return tuple_1, tuple_2\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    temp = []\n    i = 0\n    while i < len(test_list1):\n        if test_list1[i] not in test_list2:\n            temp.append(test_list1[i])\n        else:\n            temp.append(test_list2[test_list1.index(test_list1[i])])\n        i = i + 1\n    return temp\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return test_list1[0], test_list1[1], test_list2[0], test_list2[1]\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    test_list = sorted(test_list1)\n    for tup in test_list:\n        if tup in test_list2:\n            new_list.append(tup)\n    return new_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list3 = []\n    tuple_list_two = []\n    for tuple_one in test_list1:\n        tuple_list_two.append(tuple_one)\n    for tuple_two in test_list2:\n        if tuple_one in tuple_two:\n            tuple_list_two.remove(tuple_two)\n    for tuple_two in tuple_list_two:\n        test_list3.append(tuple_two)\n    return tuple_list_two, test_list3\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a list of tuples\n    test_list = [(tuple(e) for e in test_list1), tuple(e for e in test_list2)]\n    # test each element in the list to see if it's present in the first element\n    for element in test_list[0]:\n        if element in test_list[1]:\n            return element\n    # test each element in the list to see if it's present in the second element\n    for element in test_list[1]:\n        if element in test_list[0]:\n            return element\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(sorted(set(test_list1) & set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_tuple1=set(test_list1)\n    test_tuple2=set(test_list2)\n    test_tuple3=test_tuple1&test_tuple2\n    test_tuple4=test_tuple2&test_tuple1\n    test_tuple5=test_tuple1&test_tuple3\n    test_tuple6=test_tuple3&test_tuple1\n    test_tuple7=test_tuple1&test_tuple4\n    test_tuple8=test_tuple4&test_tuple1\n    test_tuple9=test_tuple1&test_tuple5\n    test_tuple10=test_tuple5&test_tuple1\n    test_tuple11=test_tuple1&test_tuple6\n    test_tuple12=test_tuple6&test_tuple1\n    test_tuple13=test_tuple1&test_tuple7\n    test_tuple14=test_tuple7&test_tuple1\n    test_tuple15=test_tuple1&test_tuple8\n    test_tuple16=test_tuple8&test_tuple1\n    test_tuple17=test_tuple1&test_tuple9\n    test_tuple18=test_tuple9&test_tuple1\n    test_tuple19=test_tuple1&test_tuple10\n    test_tuple20=test_tuple10&test_tuple1\n    test_tuple21=test_tuple1&test_tuple11\n    test_tuple22=test_tuple11&test_tuple1\n    test_tuple23=test_tuple1&test_tuple12\n    test_tuple24=test_tuple12&test_tuple1\n    test_tuple25=test_tuple1&test_tuple13\n    test_tuple26=test_tuple13&test_tuple1\n    test_tuple27=test_tuple1&test_tuple14\n    test_tuple28=test_tuple14&test_tuple1\n    test_tuple29=test_tuple1&test_tuple15\n    test_tuple30=test_tuple15&test_tuple1\n    test_tuple31=test_tuple1&test_tuple16\n    test_tuple32=test_tuple16&test_tuple1\n    test_tuple33=test_tuple1&test_tuple17\n    test_tuple34=test_tuple17&test_tuple1\n    test_tuple35=test_tuple1&test_tuple18\n    test_tuple36=test_tuple18&test_tuple1\n    test_tuple37=test_tuple1&test_tuple19\n    test_tuple38=test_tuple19&test_tuple1\n    test_tuple39=test_tuple1&test_tuple20\n    test_tuple40=test_tuple20&test_tuple1\n    test_tuple41=test_tuple1&test_tuple21\n    test_tuple42=test_tuple21&test_tuple1\n    test_tuple43=test_tuple1&test_tuple22\n    test_tuple44=test_tuple22&test_tuple1\n    test_tuple45=test_tuple1&test_tuple23\n    test_tuple46=test_tuple23&test_tuple1\n    test_tuple47=test_tuple1&test_tuple24\n    test_tuple48=test_tuple24&test_tuple1\n    test_tuple49=test_tuple1&test_tuple25\n    test_tuple50=test_tuple25&test_tuple1\n    test_tuple51=test_tuple1&test_tuple26\n    test_tuple52=test_tuple26&test_tuple1\n    test_tuple53=test_tuple1&test_tuple27\n    test_tuple54=test_tuple27&test_tuple1\n    test_tuple55=test_tuple1&test_tuple28\n    test_tuple56=test_tuple28&test_tuple1\n    test_tuple57=test_tuple1&test_tuple29\n    test_tuple58=test_tuple29&test_tuple1\n    test_tuple59=test_tuple1&test_tuple30\n    test_tuple60=test_tuple30&test_tuple1\n    test_tuple61=test_tuple1&test_tuple31\n    test_tuple62=test_tuple31&test_tuple1\n    test_tuple63=test_tuple1&test_tuple32\n    test_tuple64=test_tuple32&test_tuple1\n    test_tuple65=test_tuple1&test_tuple33\n    test_tuple66=test_tuple33&test_tuple1\n    test_tuple67=test_tuple1&test_tuple34\n    test_tuple68=test_tuple34&test_tuple1\n    test_tuple69=test_tuple1&test_tuple35\n    test_tuple70=test_tuple35&test_tuple1\n    test_tuple71=test_tuple1&test_tuple36\n    test_tuple72=test_tuple36&test_tuple1\n    test_tuple73=test_tuple1&test_tuple37\n    test_tuple74=test_tuple37&test_tuple1\n    test_tuple75=test_tuple1&test_tuple38\n    test_tuple76=test_tuple38&test_tuple1\n    test_tuple77=test_tuple1&test_tuple39\n    test_tuple78=test_tuple39&test_tuple1\n    test_tuple79=test_tuple1&test_tuple40\n    test_tuple80=test_tuple40&test_tuple1\n    test_tuple81=test_tuple1&test_tuple41\n    test_tuple82=test_tuple41&test_tuple1\n    test_tuple83=test_tuple1&test_tuple42\n    test_tuple84=test_tuple42&test_tuple1\n    test_tuple85=test_tuple1&test_tuple43\n    test_tuple86=test_tuple43&test_tuple1\n    test_tuple87=test_tuple1&test_tuple44\n    test_tuple88=test_tuple44&test_tuple1\n    test_tuple89=test_tuple1&test_tuple45\n    test_tuple90=test_tuple45&test_tuple1\n    test_tuple91=test_tuple1&test_tuple46\n    test_tuple92=test_tuple46&test_tuple1\n    test_tuple93=test_tuple1&test_tuple47\n    test_tuple94=test_tuple47&test_tuple1\n    test_tuple95=test_tuple1&test_tuple48\n    test_tuple96=test_tuple48&test_tuple1\n    test_tuple97=test_tuple1&test_tuple49\n    test_tuple98=test_tuple49&test_tuple1\n    test_tuple99=test_tuple1&test_tuple50\n    test_tuple100=test_tuple50&test_tuple1\n    test_tuple101=test_tuple1&test_tuple51\n    test_tuple102=test_tuple51&test_tuple1\n    test_tuple103=test_tuple1&test_tuple52\n    test_tuple104=test_tuple52&test_tuple1\n    test_tuple105=test_tuple1&test_tuple53\n    test_tuple106=test_tuple53&tes"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    lst = list(str1)\n    i = 0\n    lst[i] = newch\n    return ''.join(lst)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch==' ':\n        return str1\n    elif ch=='!' or ch=='?':\n        return str1.replace(ch,'!')\n    elif ch=='.':\n        return str1.replace(ch,'.')\n    elif ch==',':\n        return str1.replace(ch,',')\n    elif ch=='(':\n        return str1.replace(ch,'(')\n    elif ch==')':\n        return str1.replace(ch,')')\n    elif ch=='{':\n        return str1.replace(ch,'{')\n    elif ch=='}':\n        return str1.replace(ch,'}')\n    elif ch=='*':\n        return str1.replace(ch,'*')\n    elif ch=='+':\n        return str1.replace(ch,'+')\n    elif ch=='=':\n        return str1.replace(ch,'=')\n    elif ch==';':\n        return str1.replace(ch,';')\n    elif ch=='<':\n        return str1.replace(ch,'<')\n    elif ch=='>':\n        return str1.replace(ch,'>')\n    elif ch==':':\n        return str1.replace(ch,':')\n    elif ch==';':\n        return str1.replace(ch,';')\n    elif ch=='=':\n        return str1.replace(ch,'=')\n    elif ch=='\\n':\n        return str1.replace(ch,'\\n')\n    elif ch=='\\t':\n        return str1.replace(ch,'\\t')\n    else:\n        print(\"Invalid Input\")\n        quit()\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for i in range(len(str1)):\n        if(str1[i]!= ch):\n            newstr = newstr + newch\n        else:\n            newstr = newstr + str1[i]\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,'')\n    str1=str1.replace(newch,'')\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #split the string into a list\n    s1 = str1.split()\n    #set the list of characters that are going to be replaced\n    ch_list = []\n    for i in range(len(s1)):\n        if s1[i] == ch:\n            ch_list.append(newch)\n    #replace the string\n    str1 = \"\"\n    for c in ch_list:\n        str1 += c\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    print('Replacing char:',ch)\n    print('new ch:',newch)\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # check if the string length is not equal to the character count\n    if len(str1)!= len(ch):\n        return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str(str1)\n    newstr = ''\n    i = 0\n    while i < len(str1):\n        if ch =='':\n            newstr += str1[i]\n            i += 1\n        elif ch == '-':\n            newstr += newch\n            i += 1\n        elif ch == '+' or ch == '-':\n            newstr += str1[i]\n            i += 1\n        elif ch == ')':\n            newstr += '('\n            i += 1\n        elif ch == '(':\n            newstr += '('\n            i += 1\n        elif ch == ')':\n            newstr += ')'\n            i += 1\n        elif ch =='':\n            newstr +=''\n            i += 1\n        elif ch == '-' or ch == '+':\n            newstr += ch\n            i += 1\n        else:\n            newstr += ch\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,'new')\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if len(str1)<len(str2):\n        # We have the same string, thus we can just check characters\n        if ch==str1[0]:\n            return str2.replace(ch,'')\n        # If the first character is not the same as the first letter\n        # of the second string, then replace the first character\n        # with the second character.\n        else:\n            return str1.replace(ch,'')+newch\n    # If the second string has the same characters as the first\n    # string, then we need to check if there are any number\n    # of the characters.\n    elif ch==str2[0]:\n        return replace_char(str1[1:],ch,newch)\n    # We can use the helper method, but we will check if there are\n    # other numbers of the second string.\n    else:\n        return str1.replace(ch,'')+replace_char(str2[1:],ch,newch)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    temp = dict1.copy()\n    temp.sort(key=Counter, reverse=True)\n    return temp\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = dict(Counter(dict1.values()))\n    for i in counter:\n        counter[i] = counter[i] / len(dict1)\n    return counter\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = sorted(dict1, key=dict1.get, reverse=True)\n    return sort_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key in dict1:\n        dict1[key].sort()\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda item: item[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for value, counts in dict1.items():\n        for i in range(len(counts)):\n            dict1[value][i] = counts[i]\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #write your code here\n    #Time complexity: O(n)\n    #Space Complexity: O(n)\n    for i in dict1:\n        dict1[i] = sorted(dict1[i].items())\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2=dict1.copy()\n    dict2.sort(key=dict1.get, reverse=True)\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = {}\n    for i in dict1:\n        if dict1[i] not in new_dict.keys():\n            new_dict[dict1[i]] = [i]\n        else:\n            new_dict[dict1[i]].append(i)\n    for k in new_dict.keys():\n        new_dict[k].sort()\n    return new_dict\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums) - min(nums)\n    # range(len(nums))\n    left = 0\n    right = len(nums) - 1\n    # sort the array\n    nums.sort()\n    return sum(nums[left:right + 1])"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = 0\n    smallest = 0\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #method 1\n    # max_val = nums[0]\n    # min_val = nums[0]\n    # for num in nums:\n    #     if num > max_val:\n    #         max_val = num\n    #     if num < min_val:\n    #         min_val = num\n    # return max_val, min_val\n    # method 2\n    # return max(nums), min(nums)\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val, min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #First, let's create an empty list that will contain the data\n    small_nums = []\n    big_nums = []\n    \n    #Now, iterate through the list and add the value to the small_nums and big_nums lists, respectively.\n    for num in nums:\n        if num<=10:\n            small_nums.append(num)\n        elif num>=10 and num <=100:\n            big_nums.append(num)\n    \n    #Then, find the sum of the smallest and largest values in the list\n    small_sum = max(small_nums)\n    big_sum = min(big_nums)\n    \n    #Finally, return the sum of the two lists\n    return (big_sum + small_sum)\n    \n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[:2]) + sum(sorted(nums)[-2:])\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums) - max(nums) - min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Example:\n    # nums = [3, 4, 5, 1, 2]\n    #  returns 5\n    # nums = [7, 9, 5, 4, 3, 6, 1, 2, 1, 6]\n    #  returns 8\n    # nums = [7, 9, 5, 4, 3, 6, 1, 2, 1, 6]\n    #  returns 9\n    # nums = [6, 8, 4, 2, 1]\n    #  returns 9\n    # nums = [7, 9, 5, 4, 3, 6, 1, 2, 1, 6]\n    #  returns 7\n    # nums = [1, 9, 5, 4, 3, 6, 1, 2, 1, 6]\n    #  returns 9\n    # nums = [3, 2, 1]\n    #  returns 4\n    # nums = [7, 9, 5, 4, 3, 6, 1, 2, 1, 6]\n    #  returns 9\n    # nums = [1, 3, 7, 5, 9]\n    #  returns 12\n    # nums = [1, 1, 2, 1, 4, 4, 4]\n    #  returns 12\n    # nums = [7, 9, 5, 4, 3, 6, 1, 2, 1, 6]\n    #  returns 9\n    # nums = [1, 9, 5, 4, 3, 6, 1, 2, 1, 6]\n    #  returns 6\n    # nums = [5, 4, 3, 6, 1, 2, 1, 2, 1, 6]\n    #  returns 6\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    largest = 0\n    smallest = 100\n    for i in nums:\n        if i > largest:\n            largest = i\n        if i < smallest:\n            smallest = i\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n        if nums[i] < min_num:\n            min_num = nums[i]\n    return min_num + max_num\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    temp_sum = 0\n    if len(nums) == 0:\n        return temp_sum\n    else:\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            if nums[0] < nums[-1]:\n                return nums[0] + big_sum(nums[1:])\n            else:\n                return nums[-1] + big_sum(nums[:-1])"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case_string = string.lower()\n    return lower_case_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = \"\"\n    for char in string:\n        if char.islower():\n            lower_string += char.lower()\n        else:\n            lower_string += char\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lst = []\n    for i in str1.split(' '):\n        i = i.lower()\n        lst.append(i)\n    return''.join(lst)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    p = re.compile('[a-z]+')\n    newstr = re.sub(p, '', str1)\n    return newstr\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(' ','')\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'(.)\\1+', r'\\1', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    s = re.sub(r'(.)\\1+', r'\\1', str1.lower())\n    return s\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res = \"\"\n    temp = \"\"\n    for i in range(len(str1)):\n        if (str1[i].isupper()):\n            temp += str1[i]\n            temp = temp.lower()\n            if (temp!= \" \"):\n                res += temp\n        else:\n            temp += str1[i]\n            if (temp!= \" \"):\n                res += temp\n    return res\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    temp_str = ''\n    for char in str1:\n        if char.isupper() == True:\n            temp_str += char.lower()\n        else:\n            temp_str += char\n    \n    return temp_str\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lcs = []\n    if(len(str1)==0):\n        return \"\"\n    if(str1[0]=='a' or str1[0]=='b' or str1[0]=='c' or str1[0]=='d' or str1[0]=='e' or str1[0]=='f' or str1[0]=='g' or str1[0]=='h' or str1[0]=='i' or str1[0]=='j' or str1[0]=='k' or str1[0]=='l' or str1[0]=='m' or str1[0]=='n' or str1[0]=='o' or str1[0]=='p' or str1[0]=='q' or str1[0]=='r' or str1[0]=='s' or str1[0]=='t' or str1[0]=='u' or str1[0]=='v' or str1[0]=='w' or str1[0]=='x' or str1[0]=='y' or str1[0]=='z'):\n        lcs.append(str1[0])\n        str1=str1[1:]\n    else:\n        if(str1[0]=='0' or str1[0]=='1'):\n            lcs.append(str1[0])\n        else:\n            lcs.append(str1[0])\n            str1=str1[1:]\n    return \"\".join(lcs)\n    "
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2=''\n    # loop through the string\n    for i in range(len(str1)):\n        # if char is lowercase\n        if str1[i].isupper():\n            # replace lowercase\n            str2+=str1[i].lower()\n        else:\n            # replace non-lowercase\n            str2+=str1[i]\n    return str2\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 : \n        return n\n    elif n % 10 == 0 :\n        return n // 10\n    else :\n        return n % 10\n    \n    \n    \n    "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if type(n)!= int :\n        raise TypeError(\"Please enter an integer\")\n    if n < 0 :\n        raise ValueError(\"Please enter a positive integer\")\n    if n == 0 :\n        return 0\n    else :\n        return n%10\n    \n    \n    \n    "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<0:\n        return 'Please enter a valid number'\n    elif n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n<10:\n        return n\n    else:\n        return n%10\n    \nn=int(input('Enter the number : '))\nprint(first_Digit(n))"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    i=0\n    while n>0:\n        i=i*10+n%10\n        n//=10\n    return i\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    result = n//10\n    return result\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    num = int(n)\n    if num > 9 :\n        return num - 1\n    else :\n        return n\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    # Checking if the input is a number\n    if type(n) == int :\n        \n        # If the input is even, then it's an odd number\n        if n % 2 == 0 :\n            \n            # Check if the input is less than 10\n            if n <= 10 :\n                \n                # If it's less than 9, then return the 2nd digit of the input\n                if n == 2 :\n                    return 2\n                \n                # If it's 3, then return the 3rd digit of the input\n                elif n == 3 :\n                    return 3\n                \n                # If it's 5, then return the 5th digit of the input\n                elif n == 5 :\n                    return 5\n                \n                # If it's 7, then return the 7th digit of the input\n                elif n == 7 :\n                    return 7\n                \n                # If it's 9, then return the 9th digit of the input\n                elif n == 9 :\n                    return 9\n                \n                else :\n                    \n                    # If it's a multiple of 2, then return the 2nd digit\n                    if n % 2 == 0 :\n                        return 2\n                    \n                    # If it's a multiple of 3, then return the 3rd digit\n                    elif n % 3 == 0 :\n                        return 3\n                    \n                    # If it's a multiple of 5, then return the 5th digit\n                    elif n % 5 == 0 :\n                        return 5\n                    \n                    # If it's a multiple of 7, then return the 7th digit\n                    elif n % 7 == 0 :\n                        return 7\n                    \n                    # If it's a multiple of 9, then return the 9th digit\n                    elif n % 9 == 0 :\n                        return 9\n                    \n                    else :\n                        return -1\n                \n            # If it's not even, then it's not an odd number\n            else :\n                return -1\n        \n        # If it's an even number, then it's an odd number\n        elif n % 2!= 0 :\n            \n            # Check if the input is less than 10\n            if n <= 10 :\n                \n                # If it's less than 9, then return the 2nd digit of the input\n                if n == 2 :\n                    return 2\n                \n                # If it's 3, then return the 3rd digit of the input\n                elif n == 3 :\n                    return 3\n                \n                # If it's 5, then return the 5th digit of the input\n                elif n == 5 :\n                    return 5\n                \n                # If it's 7, then return the 7th digit of the input\n                elif n == 7 :\n                    return 7\n                \n                # If it's 9, then return the 9th digit of the input\n                elif n == 9 :\n                    return 9\n                \n                else :\n                    \n                    # If it's a multiple of 2, then return the 2nd digit\n                    if n % 2 == 0 :\n                        return 2\n                    \n                    # If it's a multiple of 3, then return the 3rd digit\n                    elif n % 3 == 0 :\n                        return 3\n                    \n                    # If it's a multiple of 5, then return the 5th digit\n                    elif n % 5 == 0 :\n                        return 5\n                    \n                    # If it's a multiple of 7, then return the 7th digit\n                    elif n % 7 == 0 :\n                        return 7\n                    \n                    # If it's a multiple of 9, then return the 9th digit\n                    elif n % 9 == 0 :\n                        return 9\n                    \n                    else :\n                        return -1\n                \n            # If it's an odd number, then it's an even number\n            else :\n                return -1\n        \n        # If it's an even number, then it's an odd number\n        else :\n            return -1\n    \n    # If it's not a number\n    else :\n        return -1"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<0:\n        return 'Error'\n    else:\n        return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    sum=0\n    for i in str(n) : \n        sum+=int(i)\n    if sum%10 ==0 :\n        return int(sum/10)\n    else :\n        return -1\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    divisors = [num for num in list if num % 2 == 1]\n    return divisors\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    output = []\n    for n in list:\n        if n%2 == 1:\n            output.append(n)\n    return output\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if i % 2 == 1:\n            result.append(i)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2 == 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in range(len(list)):\n        if(list[i]%2!=0):\n            print(list[i])\n            "
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if (i%2!= 0):\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2!= 0:\n            even_list.append(i)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    output = []\n    for i in list: \n        if i % 2 == 1: \n            output.append(i)\n    return output\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2 == 1:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        sum += i **3\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = []\n    for i in range(0,n+1) :\n        cubes.append(i**3)\n    sum = 0\n    for i in range(0,n):\n        sum = cubes[i] + sum\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s=0\n    for i in range(1,n):\n        s=s+i**3\n    return s\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def n_cubes(n) :\n        '''\n        Function to find the difference between the sum of cubes of the first n natural numbers.\n        '''\n        if (n < 0) :\n            print (\"Please enter a positive integer.\")\n            n_cubes()\n        else :\n            s = 0\n            for i in range(1,n + 1) :\n                s += i**3\n            return s\n    if n >= 0 :\n        return n_cubes(n)\n    else :\n        print (\"Please enter a positive integer.\")\n        n_cubes()\n    "
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = []\n    \n    for i in range(1, n+1) :\n        cubes.append(i**3)\n    \n    return sum(cubes) - sum(cubes[:n])\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n <= 0 :\n        return 0\n    else :\n        return (n ** 3) - (n ** 2 + n ** 2 + n ** 3)"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    def sum(x) :\n        return x**3 + x**2 + x**1\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def _sum(n) : \n        '''\n        A helper function to sum all the cubes of the sum of the first n natural numbers.\n        '''\n        s = 0\n        for i in range(n) : \n            s = s + (i**3)\n        return s\n    \n    \n    def cube(n) :  \n        '''\n        Write a python function to find the cube of the sum of the first n natural numbers.\n        '''\n        return _sum(n)**3\n        \n    if n == 1 :\n        return 0\n    elif n == 0 :\n        return cube(0)\n    elif n < 0 :\n        return cube(n)\n    else :\n        return cube(n) - (cube(n-1)**3)\n    \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return difference(n-1) + difference(n-2)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    xor_value = 0 \n    \n    for i in range(N): \n        xor_value = xor_value ^ (ord(A[i]) ^ ord(A[N-1-i])) \n    if xor_value % 2 == 1 : \n        return 0 \n    else : \n        return 1 \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]!= A[j] and A[i]!= A[j] and A[j] == A[i]:\n                odd = odd + 1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i = 0\n    while i < N:\n        if A[i] == A[i+1]:\n            return (2*i+1)\n        else:\n            i += 1\n    return -1\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(N):\n        if A[i] ^ (i+1) % N == i:\n            odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    xor_sum = 0\n    for i in range(N):\n        xor_sum += A[i] ^ i\n    odd = 0\n    for i in range(N):\n        if A[i] ^ i!= xor_sum :\n            odd += 1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n = len(A)\n    left = 0\n    right = 0\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair = 0\n    odd_count = 0\n    for i in range(N) :\n        if A[i] == 1 :\n            if A[i + 1] == 0 : \n                odd_pair += 1\n            if A[i + 1] == 1 :\n                odd_count += 1\n    if odd_pair % 2 == 0 : \n        return odd_pair, odd_count\n    else : \n        return odd_pair - odd_count, odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)) :\n        for j in range(i+1, len(A)) :\n            if (A[i]!= A[j]) :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]&A[j]==0:\n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # YOUR CODE HERE\n    A.sort()\n    if N <= 2:\n        return 0\n    if N == 3:\n        return 1\n    pairs = 0\n    for i in range(N-2):\n        if A[i] == A[i+1] or A[i] == A[i+2]:\n            pairs += 2\n        else:\n            break\n    return pairs\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    list_of_characters = []\n    \n    for char in string:\n        if char.isupper():\n            char = char.lower()\n        list_of_characters.append(char)\n    return ''.join(list_of_characters)\n    \n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle_upper(string):\n        '''\n        Write a function that changes all uppercase letters of a string to lowercase.\n        '''\n        def toggle_upper_string(string):\n            '''\n            Write a function that changes all uppercase letters of a string to lowercase.\n            '''\n            def toggle_upper_string_recursive(string, temp = ''):\n                '''\n                Write a function that changes all uppercase letters of a string to lowercase.\n                '''\n                if string == '':\n                    return ''\n                else:\n                    for char in string:\n                        if char.isupper():\n                            temp += char.lower()\n                        else:\n                            temp += char.upper()\n                    return temp\n            return toggle_upper_string_recursive(string)\n        return toggle_upper(string)\n    return toggle_upper(string)\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Initialize empty string\n    swap_string = \"\"\n    # Iterate over string, printing letters 1 to len(string) and swap the first char (as a case).\n    for letter in string:\n        swap_string += letter\n        print(swap_string)\n    # Switch the first letter.\n    swap_string = swap_string.swapcase()\n    # Return string, with a case added and the swapped chars removed.\n    return swap_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # if a space was present\n    if string[0] =='':\n        # remove the space\n        string = string[1:]\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == \"\":\n        return \"yes\"\n    elif string[0] == \" \":\n        string = string[1:]\n    if string[-1] == \" \":\n        string = string[:-1]\n    if string[0] == \" \":\n        string = string[1:]\n    if string[-1] == \" \":\n        string = string[:-1]\n    if string[0] == \" \":\n        string = string[1:]\n    if string[-1] == \" \":\n        string = string[:-1]\n    if string[0] == \" \":\n        string = string[1:]\n    if string[-1] == \" \":\n        string = string[:-1]\n    return string\n    \n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    string = string.replace(\" \", \"\")\n    string = string.replace(\"-\", \"\")\n    string = string.replace(\".\", \"\")\n    string = string.replace(\",\", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\".\", \"\")\n    string = string.replace(\"-\", \"\")\n    string = string.replace(\"'\", \"\")\n    string = string.replace(\"!\", \"\")\n    string = string.replace(\"?\",\"\")\n    string = string.replace(\"!\", \"\")\n    string = string.replace(\"~\", \"\")\n    string = string.replace(\"<\", \"\")\n    string = string.replace(\"=\", \"\")\n    string = string.replace(\"<=\", \"\")\n    string = string.replace(\">\", \"\")\n    string = string.replace(\">=\", \"\")\n    string = string.replace(\"@\", \"\")\n    string = string.replace(\"&\", \"\")\n    string = string.replace(\"[\", \"\")\n    string = string.replace(\"]\", \"\")\n    string = string.replace(\"(\", \"\")\n    string = string.replace(\")\", \"\")\n    string = string.replace(\"{\", \"\")\n    string = string.replace(\"}\", \"\")\n    string = string.replace(\":\", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\"\\n\", \"\")\n    string = string.replace(\"\\t\", \"\")\n    string = string.replace(\"\\r\", \"\")\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.lower().islower():\n        return string.lower()\n    elif string.upper().isupper():\n        return string.upper()\n    elif string.isupper():\n        return string.lower()\n    else:\n        return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for i in string:\n        if i.isupper():\n            i = i.lower()\n        elif i.islower():\n            i = i.upper()\n        new_string += i\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # create a list of the characters\n    t = list(string)\n    # create a variable to hold the index\n    i = 0\n    # loop through the string and toggle the character\n    for letter in string:\n        if letter.upper() == letter.lower():\n            # if letter == 'p':\n            #     t[i] = 'P'\n            # elif letter == 'a':\n            #     t[i] = 'A'\n            # elif letter == 'c':\n            #     t[i] = 'C'\n            # elif letter == 'f':\n            #     t[i] = 'F'\n            # elif letter == 'n':\n            #     t[i] = 'N'\n            # elif letter == 'e':\n            #     t[i] = 'E'\n            # elif letter == 'd':\n            #     t[i] = 'D'\n            # elif letter == 'y':\n            #     t[i] = 'Y'\n            # elif letter == 'o':\n            #     t[i] = 'O'\n            # elif letter == 'i':\n            #     t[i] = 'I'\n            # elif letter == 'q':\n            #     t[i] = 'Q'\n            # elif letter == 'u':\n            #     t[i] = 'U'\n            # elif letter == 'l':\n            #     t[i] = 'L'\n            # elif letter == 'b':\n            #     t[i] = 'B'\n            # elif letter == 'v':\n            #     t[i] = 'V'\n            # elif letter == 'x':\n            #     t[i] = 'X'\n            # elif letter == 'k':\n            #     t[i] = 'K'\n            # elif letter == 't':\n            #     t[i] = 'T'\n            # elif letter == 'j':\n            #     t[i] = 'J'\n            # elif letter == 'p':\n            #     t[i] = 'P'\n            # elif letter == 'r':\n            #     t[i] = 'R'\n            # elif letter == 'g':\n            #     t[i] = 'G'\n            # elif letter =='s':\n            #     t[i] = 'S'\n            # elif letter == 'k':\n            #     t[i] = 'K'\n            # elif letter == 'v':\n            #     t[i] = 'V'\n            # elif letter =='m':\n            #     t[i] = 'M'\n            # elif letter == 'i':\n            #     t[i] = 'I'\n            # elif letter =='s':\n            #     t[i] = 'S'\n            # elif letter == 'h':\n            #     t[i] = 'H'\n            # elif letter == 'j':\n            #     t[i] = 'J'\n            # elif letter == 'h':\n            #     t[i] = 'H'\n            # elif letter == 'u':\n            #     t[i] = 'U'\n            # elif letter =='s':\n            #     t[i] = 'S'\n            # elif letter == 'o':\n            #     t[i] = 'O'\n            # elif letter == 'a':\n            #     t[i] = 'A'\n            # elif letter == 'o':\n            #     t[i] = 'O'\n            # elif letter =='m':\n            #     t[i] = 'M'\n            # elif letter == 'i':\n            #     t[i] = 'I'\n            # elif letter == 'n':\n            #     t[i] = 'N'\n            # elif letter == 'i':\n            #     t[i] = 'I'\n            # elif letter == 't':\n            #     t[i] = 'T'\n            # elif letter == 'y':\n            #     t[i] = 'Y'\n            # elif letter == 'r':\n            #     t[i] = 'R'\n            # elif letter == 'g':\n            #     t[i] = 'G'\n            # elif letter == 'l':\n            #     t[i] = 'L'\n            # elif letter == 'i':\n            #     t[i] = 'I'\n            # elif letter == 'j':\n            #     t[i] = 'J'\n            # elif letter == 'n':\n            #     t[i] = 'N'\n            # elif letter == 'z':\n            #     t[i] = 'Z'\n            # elif letter =='s':\n            #     t[i] = 'S'\n            # elif letter == 'p':\n            #     t[i] = 'P'\n            # elif letter == 'y':\n            #     t[i] = 'Y'\n            # elif letter == 'v':\n            #     t[i] = 'V'\n            # elif letter == 't':\n            #     t[i] = 'T'\n            # elif letter == 'k':\n            #     t[i] = 'K'\n            # elif letter == 'h':\n            #     t[i] = 'H'\n            # elif letter == 'u':\n            #     t[i] = 'U'\n            # elif letter == 'y':\n            #     t[i] = 'Y'\n            # elif letter =='s':\n            #     t[i] = 'S'\n            # elif letter == 'i':\n            #     t[i] = 'I'\n            # elif letter =='m':\n            #     t[i] = 'M'\n            # elif letter == 'o':\n            #     t[i] = 'O'\n            # elif letter == 'a':\n            #     t[i] = 'A'\n            # elif letter == 'u':\n            #     t[i] = 'U'\n            # elif letter == 'v':\n            #     t[i] = 'V'\n            # elif letter == 't':\n            #     t[i] = 'T'\n            # elif letter == 'o':\n            #     t[i] = 'O'\n            # elif letter == 'n':\n            #     t[i] = 'N'\n            # elif letter == 'p':\n            #     t[i] = 'P'\n            # elif letter == 'g':\n            #     t[i] = 'G'\n            # elif letter == 'c':\n            #     t[i] = 'C'\n            # elif letter == 'f':\n            #     t[i] = 'F'\n            # elif letter == 'l':\n            #     t[i] = 'L'\n            # elif letter == 'b':\n            #     t[i] = 'B'\n            # elif letter == 'y':\n            #     t[i] = 'Y'\n            # elif letter == 'q':\n            #     t[i] = 'Q'\n            # elif letter == 'j':\n            #     t[i] = 'J'\n            # elif letter == 'q':\n            #     t[i] = 'Q'\n            # elif letter == 'n':\n            #     t[i] = 'N'\n            # elif letter == 'e':\n            #     t[i] = 'E'\n            # elif letter == 'z':\n            #     t[i] = 'Z'\n            # elif letter == 'x':\n            #     t[i] = 'X'\n            # elif letter == 'u':\n            #     t[i] = 'U'\n            # elif letter == 'r':\n            #     t[i] = 'R'\n            # elif letter == 'j':\n            #     t[i] = 'J'"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    sum = 0\n    n1 = int(n1)\n    n2 = int(n2)\n    \n    for i in range(0, 10):\n        if n1 % 2!= 0:\n            sum += i\n            n1 /= 2\n        if n2 % 2!= 0:\n            sum += i\n            n2 /= 2\n    \n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    d1 = n1//10**(len(str(n1))-1)\n    d2 = n2//10**(len(str(n2))-1)\n    \n    d = d1 + d2\n    \n    return d\n    \n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return int(str(n1 - n2).lstrip('0'))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for n in range(10):\n        d1 = n1 // 10\n        d2 = n2 // 10\n        diff = (d2 - d1) * 10\n        sum += diff\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(int(str(n1)[-1]) - int(str(n2)[-1]))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if (type(n1)!= int) or (type(n2)!= int):\n        return -1\n    if (n1 < 0) or (n2 < 0):\n        return -1\n    if n1 == 0:\n        return 0\n    if n2 == 0:\n        return 1\n    return (n1 - n2) % 10\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # The function returns the sum of the differences (sum(x - y))\n    # where x and y are integers.\n    # Input: n1, n2\n    # Output: sum(x - y)\n    # The function does not modify the input, it returns the original value of n1 and n2\n    def num_diff(n1, n2):\n        # Find the difference between the two integers\n        diff = 0\n        while n1!= n2:\n            n1 = abs(n1 - n2)\n            diff += n1\n            n2 = abs(n2 - n1)\n        return diff\n    if n1 == n2:\n        return 0\n    else:\n        return num_diff(n1, n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1)) > 3 or len(str(n2)) > 3:\n        print('Sorry, only numbers between 0 and 9 are supported.')\n        return None\n    n1_int = int(n1)\n    n2_int = int(n2)\n    #print(n1, n2, n1_int, n2_int)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_len = 0\n    for i in range(0, size):\n        if (a[i] > max_sum):\n            max_sum = a[i]\n            max_len = i\n    return max_sum, max_len\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    i = 0\n    j = 1\n    k = 0\n    sum = 0\n    while i < size and j < size:\n        sum += a[i]\n        if sum >= a[j]:\n            sum -= a[j]\n            k += 1\n        j += 1\n        if k == size:\n            return sum\n        i += 1\n    return 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    start, end, max_sum = 0, 0, 0\n    for i in range(size):\n        # find the max and sublist sum\n        max_sum = max(max_sum, a[i])\n        # add the current element to the sublist\n        start = max(start, a[i])\n        # find the max and sublist sum\n        end = max(end, max_sum + a[i])\n    return end - start + 1\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    \n    for i in range(size):\n        max_sum += a[i]\n    \n    for i in range(size):\n        \n        curr_sum = 0\n        curr_sub_sum = 0\n        \n        for j in range(i, size):\n            curr_sum += a[j]\n            curr_sub_sum += a[j]\n            \n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                \n                if curr_sub_sum == 0:\n                    break\n                \n                curr_sub_sum -= a[j]\n    \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Code here\n    a.sort()\n    sum_list = []\n    for i in range(0, size):\n        if i < size - 1:\n            sum_list.append(a[i] + a[i + 1])\n        else:\n            sum_list.append(a[i])\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    for i in range(size):\n        m = 0\n        n = 0\n        for j in range(i, size):\n            if a[j] > a[i]:\n                m = max(m, a[j])\n            elif a[j] == a[i]:\n                n += 1\n        a[i] += m + n\n    return a[size"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 1:\n        return 0\n    if size == 1:\n        return a[0]\n    if size == 2:\n        return max(a[0], a[1])\n    dp = [None]*(size+1)\n    dp[1] = a[0]\n    if size == 2:\n        dp[2] = max(a[0], a[1])\n    for i in range(3, size+1):\n        dp[i] = max(dp[i-1], dp[i-2]+a[i-1])\n    return max(dp[size])\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    total = 0\n    start = 0\n    end = 0\n    for i in range(size):\n        total += a[i]\n        if total > 0:\n            end = i\n            break\n    return start, end\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = collections.deque()\n    tup2 = collections.deque()\n    tup1.extend(test_tup1)\n    tup2.extend(test_tup2)\n    result = collections.deque()\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # declare empty set of union_elements\n    union_elements = set()\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # define an empty dictionary to store union value\n    union_dictionary = {}\n    # iterate through both dictionaries and add the union value to the dictionary\n    for key in test_tup1:\n        if key in union_dictionary.keys():\n            union_dictionary[key] = union_dictionary[key] + test_tup1[key]\n        else:\n            union_dictionary[key] = test_tup1[key]\n    for key in test_tup2:\n        if key in union_dictionary.keys():\n            union_dictionary[key] = union_dictionary[key] + test_tup2[key]\n        else:\n            union_dictionary[key] = test_tup2[key]\n    # sort the dictionary using the keys as key and sort it based on their values\n    # to get the union we will need to iterate through the dictionary in order to make sure that all\n    # keys in both dictionaries have the same value\n    sorted_dictionary = sorted(union_dictionary.items())\n    # return the union of the two dictionaries\n    return sorted_dictionary\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    t1 = tuple(test_tup1)\n    t2 = tuple(test_tup2)\n    if t1 == t2:\n        return t1\n    if len(t1) == 0 or len(t2) == 0:\n        return t2\n    else:\n        return (t1[0] + t2[0], t1[1] + t2[1], t1[2] + t2[2], t1[3] + t2[3])\n    \n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        test_tup2, test_tup1 = test_tup1, test_tup2\n    union_elements_list = [None for _ in range(len(test_tup1))]\n    for i in range(len(test_tup1)):\n        union_elements_list[i] = test_tup1[i]\n    for j in range(len(test_tup2)):\n        union_elements_list[j] = test_tup2[j]\n    return union_elements_list\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    temp = []\n    for i in test_tup1:\n        if i in test_tup2:\n            temp.append(i)\n        else:\n            raise Exception('Elements not in the tuples')\n    temp.sort()\n    return temp\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    for i in range(0, len(test_tup1)):\n        for j in range(0, len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                test_tup1[i] = -1\n                test_tup2[j] = -1\n    for i in range(0, len(test_tup1)):\n        test_tup1[i] = test_tup1[i] or test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    \n    output_list = []\n    i = 0\n    j = 0\n    \n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] <= test_tup2[j]:\n            output_list.append(test_tup1[i])\n            i += 1\n        else:\n            output_list.append(test_tup2[j])\n            j += 1\n    \n    if i < len(test_tup1):\n        while i < len(test_tup1):\n            output_list.append(test_tup1[i])\n            i += 1\n    elif j < len(test_tup2):\n        while j < len(test_tup2):\n            output_list.append(test_tup2[j])\n            j += 1\n    else:\n        output_list = test_tup1 + test_tup2\n        \n    return output_list\n    \ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    \n    output_list = []\n    i = 0\n    j = 0\n    \n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] < test_tup2[j]:\n            output_list.append(test_tup1[i])\n            i += 1\n        else:\n            output_list.append(test_tup2[j])\n            j += 1\n    \n    if i < len(test_tup1):\n        while i < len(test_tup1):\n            output_list.append(test_tup1[i])\n            i += 1\n    elif j < len(test_tup2):\n        while j < len(test_tup2):\n            output_list.append(test_tup2[j])\n            j += 1\n    else:\n        output_list = test_tup1\n        \n    return output_list\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    assert isinstance(test_tup1, tuple), 'test_tup1 must be a tuple'\n    assert isinstance(test_tup2, tuple), 'test_tup2 must be a tuple'\n    # use sets because tuples are unordered\n    my_set = set(test_tup1)\n    other_set = set(test_tup2)\n    # if the length of both tuples is 1, they are the same\n    if len(my_set) == 1 and len(other_set) == 1:\n        return my_set.union(other_set)\n    # if the length of both tuples is greater than one,\n    # then we need to assume they have duplicates\n    elif len(my_set) > 1:\n        # if the length of my_set is odd, then we want to return it in a list\n        if len(my_set) % 2 == 1:\n            return my_set.union(other_set)\n        # otherwise, we just want the elements of my_set and the other_set\n        # to be sorted in descending order\n        else:\n            my_set.union(other_set)\n            return my_set.union(other_set)\n    # if the length of both tuples is less than one, then we want to return\n    # it in a sorted list\n    elif len(my_set) < 1:\n        return other_set.union(my_set)\n    # if we get here, we know that the length of my_set is 1,\n    # so, if it is 2, then the set of the set is {1,2} and the list is [2,1]\n    # so, if it is 3, then the set of the set is {1,2,3} and the list is [2,1,3]\n    # so, if it is 4, then the set of the set is {1,2,3,4} and the list is [2,1,3,4]\n    # so, if it is 5, then the set of the set is {1,2,3,4,5}\n    # so, if it is 6, then the set of the set is {1,2,3,4,5,6}\n    # so, if it is 7, then the set of the set is {1,2,3,4,5,6,7}\n    # so, if it is 8, then the set of the set is {1,2,3,4,5,6,7,8}\n    # so, if it is 9, then the set of the set is {1,2,3,4,5,6,7,8,9}\n    else:\n        # set of the set are [1,2,3,4,5]\n        return my_set.union(other_set)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1_list = test_tup1[:]\n    test_tup2_list = test_tup2[:]\n    if len(test_tup1_list) == 0:\n        return test_tup2_list\n    if len(test_tup2_list) == 0:\n        return test_tup1_list\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    for i in range(1,len(lst)):\n        if lst[i]==lst[i-1]:\n            continue\n        else:\n            return max(lst[i-1],lst[i])+1\n    return 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return len(lst)\n    else:\n        s = 0\n        for i in range(len(lst)):\n            if lst[i] > s:\n                s = lst[i]\n        return Find_Max_Length(lst[s:])"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    res=0\n    for i in range(len(lst)-1):\n        count=1\n        for j in range(i+1,len(lst)):\n            if lst[i]==lst[j]:\n                count+=1\n            else:\n                break\n        res=max(res,count)\n    return res\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                lst[i] = lst[j]\n    return max(lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    # traverse through the list\n    for i in range(len(lst)):\n        # check if there is a sublist with the longest length \n        # and add it to the global maximum length\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Create a map that is a hash\n    dict = {}\n    # Create a map of character counts to a list\n    for char in lst:\n        dict[char] = dict.get(char,0) + 1\n    \n    # Get the longest element\n    longest = -1\n    # The length of the longest sublist\n    for char, count in dict.items():\n        if count > longest:\n            longest = count\n            # If the character has only one count, return the length of the longest sublist\n            if count == 1:\n                return len(lst) - 1\n    return longest\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # returns a list of each element in the given list\n    temp_list = lst\n    length = []\n    max_length = 0\n    # loop through the entire list\n    for i in range(len(temp_list)):\n        length.append(len(temp_list[i]))\n    length.sort()\n    # loop through the sublist\n    for i in range(len(temp_list)):\n        if(length[i] > max_length):\n            max_length = length[i]\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if(lst == []):\n        return 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == [] or lst == []:\n        return 0\n    else:\n        count = 1\n        for i in range(1,len(lst)):\n            if lst[i] > lst[i-1]:\n                count += 1\n                lst[i] = lst[i] + 1\n        return count\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length=0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            length=max(length, len(lst[i]))\n    return length\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    # Create variables for the captured values\n    values = None\n    values_start = None\n    values_end = None\n    values_string = None\n    \n    # Check if any quotation marks are in the string and grab the start and end index.\n    if text[0] == \"\\\"\":\n        values_start = text.find(\"\\\"\")\n    if text[-1] == \"\\\"\":\n        values_end = text.find(\"\\\"\")\n    values_string = text[values_start:values_end+1]\n    \n    # Check if the string is not empty and the value is a number.\n    if not values_string:\n        return None\n    \n    # Check if the string is in a format that can be handled by Regex\n    if re.search('^[^\\d-]+', values_string):\n        # If the string is in a format that can be handled by Regex, make a regex that accepts the string as an argument\n        regex = re.compile('^[^\\d-]+')\n        values_string = regex.search(values_string).group()\n    \n    # Check if the string is in a format that can be handled by Regex and convert the string into an integer\n    if re.search('^[0-9]+', values_string):\n        values = int(values_string)\n    \n    # Check if the string is in a format that can be handled by Regex and convert the string into an integer\n    if re.search('^[0-9]+', values_string):\n        values = int(values_string)\n    \n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    count = 0\n    for i in text:\n        if i == '\"':\n            count += 1\n            if count > 0 and i == '\"':\n                continue\n        if i == '\"':\n            count -= 1\n        if i!= '\"':\n            values.append(i)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Part 1:\n    # Extract the content of the string into a list\n    list_of_values = text.split(\"\\\"\")\n    # Create a new string\n    new_string = \"\"\n    # Loop through the list\n    for value in list_of_values:\n        # Split the value\n        temp = value.split(\"\\\"\")\n        # Add the result to the new string\n        new_string += temp[1]\n    # Return the final string\n    return new_string\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\\'(.*?)\\'', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r'[\\']+'\n    return re.findall(regex, text)[0]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    value_list = []\n    value_list_extracted = []\n    for i, c in enumerate(text):\n        if c == '\"' and i == 0:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == '\"' and i == len(text)-1:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == \"'\" and i == 0:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == \"'\" and i == len(text)-1:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == '\"' and i == len(text)-2:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == \"'\" and i == len(text)-2:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == ',' and i == 0:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == ',' and i == len(text)-1:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == ',' and i == len(text)-2:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == '.' and i == 0:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == '.' and i == len(text)-1:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == '.' and i == len(text)-2:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == '\"' and i == 0:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == \"'\" and i == 0:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == '\"' and i == len(text)-1:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == '\"' and i == len(text)-2:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == '\"' and i == len(text)-2:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == 0:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-1:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-2:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-3:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == ',' and i == 0:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == ',' and i == len(text)-1:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == ',' and i == len(text)-2:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == ',' and i == len(text)-3:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-3:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == '.' and i == 0:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == '.' and i == len(text)-1:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == '.' and i == len(text)-2:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == '.' and i == len(text)-3:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-3:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-4:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-3:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-2:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-1:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-1:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-2:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-3:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-4:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-4:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-5:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-4:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-3:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-2:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-1:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-1:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-2:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c =='' and i == len(text)-3:\n            value_list_extracted.append(''.join(value_list))\n            value_list = []\n        elif c == "
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = []\n    # find the first quote\n    i = text.find('\"')\n    # find the end of the string and get the end\n    j = text.find('\"', i + 1)\n    # extract values and add to result\n    while j!= -1:\n        result.append(text[i+1:j])\n        i = j + 1\n        j = text.find('\"', j + 1)\n    # add the last item\n    result.append(text[i:j])\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    txt = text.replace('\"','').replace('\u201c','')\n    return txt\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # regex pattern to extract values from a string.\n    p = r'([^\"]*)\"'\n    # converts the string to lowercase.\n    text = text.lower()\n    # matches all the matching pattern.\n    # extracts it from the string.\n    for match in re.finditer(p, text):\n        # gets the group index of the match.\n        i = match.start()\n        # get the group value.\n        val = match.group(1)\n        # converts the group value to string.\n        val = val.replace(\"'\", \"\")\n        # replaces the quotations with a space.\n        val = val.replace('\"', \" \")\n        # converts the group index to an int.\n        val = int(val)\n        # prints the value.\n        print(val)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    text = text.replace(\"\\\"\",\"\")\n    text = text.replace(\"'\", \"\")\n    pattern = re.compile(r'[^a-zA-Z0-9\\s,\\.]')\n    text = pattern.sub('', text)\n    text = text.replace(',', \"\")\n    text = text.split(' ')\n    for i in text:\n        values.append(i)\n    return values\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    ### CODE BEGINS HERE ###\n    possible_pairs = 0\n    unordered_pairs = 0\n    ### END CODE BEGINS HERE ###\n    \n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] == arr[j]:\n                unordered_pairs+=1\n        if unordered_pairs == 2:\n            possible_pairs+=1\n        unordered_pairs = 0\n        \n    return possible_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    m=0\n    for i in range(n):\n        for j in range(i,n):\n            if(arr[i]==arr[j]):\n                m+=1\n    return m\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d = {}\n    count = 0\n    for i in arr:\n        if i in d:\n            count += d[i]\n        else:\n            d[i] = 0\n    return count\n    \ndef count_Partitions(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of partitions where the integer is not even.\n    '''\n    d = {}\n    count = 0\n    for i in arr:\n        if i%2==0:\n            count += 1\n        else:\n            if i not in d:\n                d[i]=1\n            else:\n                d[i]+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n = len(arr)\n    arr.sort()\n    result = 0\n    if n == 0:\n        return 0\n    else:\n        for i in range(n-1):\n            if arr[i]!= arr[i+1]:\n                result += 2\n        return result\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n    \n    # Write your code here.\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if (n<2):\n        print(\"Invalid Input\")\n        return\n    else:\n        m=0\n        if (arr[0]==arr[1]):\n            m+=1\n        for i in range(2,n):\n            if (arr[i]!=arr[i-1] and arr[i]!=arr[i-2] and arr[i]!=arr[i-3]):\n                m+=1\n        return m\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #declare a counter to store the number of pairs\n    cnt = 0\n    #loop through the array\n    for i in range(n):\n        for j in range(i+1,n):\n            #check if the element is equal to the odd element\n            if arr[i]!= arr[j]:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    size= len(arr)\n    arr2=[]\n    pairs=[]\n    for i in range(1,size):\n        for j in range(0,i):\n            if(arr[i]>arr[j]):\n                arr2.append((arr[i],arr[j]))\n    \n    for i in range(0,size):\n        for j in range(0,i):\n            if(arr[j]>arr[i]):\n                pairs.append((arr[j],arr[i]))\n    \n    #print(arr2)\n    #print(pairs)\n    '''\n    Your Code Here\n    '''\n    #print(\"First example for unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        if(arr[i]>arr[j]):\n    #            pairs.append((arr[i],arr[j]))\n    #print(pairs)\n    \n    print(len(pairs))\n    \n    #print(\"Second example for unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        if(arr[i]>arr[j]):\n    #            pairs.append((arr[j],arr[i]))\n    #print(pairs)\n    #for i in range(0,size):\n    #    for j in range(i,size):\n    #        if(arr[i]>arr[j]):\n    #            pairs.append((arr[j],arr[i]))\n    #print(pairs)\n    #print(len(pairs))\n    \n    print(len(arr2))\n    #print(len(pairs))\n    #print(len(arr2)==len(pairs))\n    #print(pairs)\n    #print(arr2)\n    #print(len(pairs)==len(arr2))\n    #print(arr2)\n    #print(len(pairs)==len(arr2))\n    #print(arr2)\n    #print(len(pairs)==len(arr2))\n    #print(pairs)\n    #print(len(pairs)==len(arr2)==len(arr2)==len(arr2))\n    #print(pairs)\n    #print(\"d\")\n    #print(len(arr2))\n    #print(len(pairs))\n    \n    \n    '''\n    Your Code Here\n    '''\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(i,size):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(i,size):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(i,size):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(i,size):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(i,size):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(i,size):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(i,size):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(i,size):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(i,size):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"This is how you sort the unordered pairs\")\n    #for i in range(0,size):\n    #    for j in range(0,i):\n    #        print(arr2[i][0],arr2[i][1])\n    #    print()\n    #print(\"Thi"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j]:\n                counter+=1\n    return counter\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #print(\"Inside function\")\n    #print(arr)\n    l = len(arr)\n    #print(l)\n    if(l<2):\n        return 0\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    word_spl = word.split(' ')\n    word_spl = [i for i in word_spl if i!= '']\n    word_spl = [i for i in word_spl if len(i) > 1]\n    return word_spl\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    s = ''\n    for i in word:\n        s += i\n    return s\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if len(word) == 0:\n        raise ValueError('Empty string cannot be split')\n    return word\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    word = word.strip()\n    word = word.split()\n    return word\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if type(word) is not str:\n        raise TypeError('word must be a string')\n    elif len(word) <=1:\n        raise ValueError('string to split must contain at least one character')\n    elif word == word.upper():\n        raise ValueError('string to split must contain no duplicates')\n    elif word.lower() in set(string.ascii_lowercase):\n        raise ValueError('string to split must contain no special characters')\n    else:\n        return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if len(word) <= 1: \n        return word\n    else: \n        first, last = word[:2], word[-2:] \n        return (first +'' + split(last) for last in split(last))\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    s = word.lower()\n    l = len(s)\n    return s[0:l//2] + s[l//2:]\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n >= 1:\n        total += n % 10\n        n = n // 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # TODO: write your code here\n    # return sum(int(i) for i in str(n))\n    # use bin()\n    return int(''.join(str(bin(n).lstrip('0b'))),2)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n!= 0:\n        s = s + n % 10\n        n = n // 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while(n):\n        s += n % 10\n        n = n // 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = int(n)\n    digits = [int(x) for x in str(n)]\n    sum = 0\n    for digit in digits:\n        sum += digit\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your code here\n    \n    if n==0:\n        return 0\n    return 1+sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_digits = 0\n    while n!= 0:\n        sum_digits += n % 10\n        n //= 10\n    return sum_digits\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # write your code here\n    total = 0\n    while n!= 0:\n        total += n % 10\n        n = n // 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Your code here\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==0:\n        return False\n    elif len(list1)==1:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i]>list1[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if list1[j] > list1[j+1]:\n                temp = list1[j]\n                list1[j] = list1[j+1]\n                list1[j+1] = temp\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1==None or len(list1)==0:\n        return None\n    else:\n        for i in range(1,len(list1)):\n            if list1[i]>list1[i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    print(\"A list is being sorted.\")\n    if list1:\n        for element in list1:\n            print(element)\n        return True\n    else:\n        print(\"The list is empty.\")\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == []:\n        return True\n    else:\n        if list1[0] >= list1[1]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    #create an empty list\n    list_of_dictionaries=[]\n    #looping through the list\n    for i in range(length):\n        list_of_dictionaries.append( {} )\n        #set each key value to 0\n        list_of_dictionaries[i][\"name\"]=''\n        list_of_dictionaries[i][\"age\"]=0\n        list_of_dictionaries[i][\"address\"]=''\n    return list_of_dictionaries\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    # Set up empty list\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    print('-------------------------------------------------------')\n    print('Creating empty dictionaries...')\n    print('-------------------------------------------------------')\n    return [dict() for i in range(0, length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(0,length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = []\n    for _ in range(length):\n        empty_dicts.append({})\n    return empty_dicts\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict = {}\n    for i in range(length):\n        empty_dict['name'] = 'Name'\n        empty_dict['age'] = 'Age'\n        empty_dict['city'] = 'City'\n        empty_dict['nationality'] = 'Nationality'\n        empty_dict['id'] = 'ID'\n        empty_dict['gender'] = 'Gender'\n        return empty_dict\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dictionaries = []\n    for i in range(0,length):\n        dictionary = {}\n        dictionary['name'] = input('Name: ')\n        dictionary['age'] = input('Age: ')\n        dictionary['gender'] = input('Gender: ')\n        list_of_dictionaries.append(dictionary)\n    return list_of_dictionaries\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    if length > 0:\n        for i in range(0, length):\n            empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1,key=lambda x:x[0])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            new_list.append(list1[i][j])\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key=len)\n    for sublist in list1:\n        print(sublist)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) == 0:\n        return\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #let's print the sublist in reverse order\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            print(list1[i][j], end=' ')\n        print('')\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sort_list = []\n    for i in list1:\n        temp = []\n        for j in i:\n            temp.append(j)\n        sort_list.append(temp)\n    return sort_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0,len(list1)-1):\n        for j in range(0,len(list1[i])-1):\n            if list1[i][j]==' ':\n                list1[i][j]=' '\n            if list1[i][j]=='&':\n                list1[i][j]=' '\n            if list1[i][j]=='{':\n                list1[i][j]=' '\n            if list1[i][j]=='}':\n                list1[i][j]=' '\n            if list1[i][j]=='[':\n                list1[i][j]=' '\n            if list1[i][j]==']':\n                list1[i][j]=' '\n            if list1[i][j]==';':\n                list1[i][j]=' '\n            if list1[i][j]=='}':\n                list1[i][j]=' '\n            if list1[i][j]=='.':\n                list1[i][j]=' '\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted = []\n    for list2 in list1:\n        for index in range(len(list2)):\n            sorted.append(list2[index])\n    return sorted\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for sublist in list1:\n        sublists.append(sublist[0])\n    sublists.sort(key=lambda x: x.count(' '))\n    return sublists\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    #passed into sort function\n    sort_sublists(list1)\n    \n    #create a new list, sort it in descending order, and return the list\n    return sorted(list1, key=lambda x: x, reverse=True)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for number in nums:\n        if number not in new_list:\n            new_list.append(number)\n    return new_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #The solution takes the input in variable nums and stores it in a list called nums_list.\n    #This is done as follows:\n    #For each number in nums_list:\n    #    Check if the number is in the list.\n    #    If not remove it from the list.\n    #    Check if the number is in the list again.\n    #    If not remove it from the list again.\n    #    If not remove it from the list again.\n    #    If not remove it from the list again.\n    #    Else:\n    #        Remove the number from the list.\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    dictionary = {}\n    for i in nums:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    for i in dictionary:\n        if dictionary[i] > 1:\n            nums.remove(i)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_list = []\n    for num in nums:\n        if num not in nums_list:\n            nums_list.append(num)\n    return nums_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    d = dict()\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    set_nums = set(nums)\n    unique_list = list(set_nums)\n    unique_nums = []\n    for num in unique_list:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_numbers = []\n    for item in nums:\n        if item not in unique_numbers:\n            unique_numbers.append(item)\n    return unique_numbers\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    removed_nums = []\n    for i in range(0,len(nums)):\n        if nums[i] not in removed_nums:\n            removed_nums.append(nums[i])\n    return removed_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef three_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef four_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef five_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef six_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef seven_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef eight_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef nine_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef ten_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef eleven_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef twelve_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef thirteen_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef fourteen_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef fifteen_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef sixteen_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef seventeen_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef eighteen_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef nineteen_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef twenty_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef thirty_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef forty_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef fifty_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\n    \ndef sixty_unique_nums(nums):\n    '''\n    Write a python function to remove duplicat"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    count = 0\n    for i in list_data:\n        if i == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product=1\n    for item in list_data:\n        product=product*item\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    final_list = []\n    for i in list_data:\n        num = sum(list_data)\n        if num not in final_list:\n            final_list.append(num)\n    return final_list\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return sum([int(number) for number in set(list_data)])\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create an empty array for storing the unique numbers\n    # Note: Creating an empty array with len() function\n    unique_numbers = []\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    for num in list_data:\n        product = num*num\n        if product > 10:\n            print('Number:',num,'\\t product:',product)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_num = []\n    for i in list_data:\n        if i not in unique_num:\n            unique_num.append(i)\n    return unique_num\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    my_list = []\n    for i in range(len(list_data)):\n        my_list.append(list_data[i])\n    my_list.sort()\n    count = 0\n    for i in range(len(my_list)):\n        count = count + my_list[i]\n    return count\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dict = {}\n    for i in list_data:\n        if i not in dict.keys():\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    return dict\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 0.5*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*np.pi*(r**2)*(h**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = r*(h/2)\n    print('Surface Area of a cylinder with radius %s and height %s : %s'%(r,h,a))\n    return a\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    import mathfunctions as mf\n    #R = r\n    #h = h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Note that the parameter 'r' and 'h' should be floats.\n    # Use your implementation of the definition of the surface area in the main function.\n    # You'll need to return the result of the function in the variable result.\n    # Return the result of the function in the variable result.\n    import math\n    def surfacearea(r,h):\n        return 4*math.pi*h*r\n    return surfacearea(r,h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if r*h<0:\n        print(\"There is no such a cylinder as the radius is: \")\n        return\n    else:\n        s=2*pi*r*(h/2)\n        return s\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = (4*r*h) / 3\n    print(\"The surface area of the cylinder is: \" + str(S))\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*np.pi*(r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*r*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    A = h**2 * (4/3)\n    return A\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    C = []\n    for i in range(len(B)): \n        for j in range(len(B)): \n            if i < j and B[i] == B[j]: \n                C.append(B[i]) \n    return C\ndef main():\n    print(\"*** Test Case ***\")\n    print(\"1. True\")\n    print(\"2. False\")\n    print(\"3. No\")\n    a = input(\"Enter your choice: \")\n    if a == \"1\":\n        print(\"True\")\n    elif a == \"2\":\n        print(\"False\")\n    elif a == \"3\":\n        print(\"No\")\n    else:\n        print(\"Enter a valid option\")\nmain()\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A = sorted(A) \n    B = sorted(B) \n    return (A == B) \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = len(A)\n    j = len(B)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False\n    \n    \ndef is_Sup_Array(A,B):\n    '''\n    Write a python function to check whether a list is superlist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False\n    \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if we have a loop\n    if (len(A) == 0):\n        return False\n    # Iterate through the list\n    for i in range(len(A)):\n        if A[i] == B:\n            return False\n    return True\n    \n    \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (type(A)!= list): return False\n    if (A == []): return False\n    if (B == []): return True\n    for i in range(0, len(A)):\n        if not A[i] in B: return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)!= len(B): return False\n    sA = set(A)\n    for i in range(len(B)): \n        if B[i] in sA: return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return len(A)==len(B) and all(A[x]==B[x] for x in range(len(A)))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    c=True\n    if (len(A)==len(B)):\n        for i in range(len(A)):\n            if A[i]!=B[i]:\n                c=False\n                break\n        return c\n    else:\n        return c\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    elif n == 1:\n        return 1\n    else:\n        return last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (type(n)!= int or n < 0):\n        raise Exception('Number is not an integer')\n    if (n == 0):\n        return 0\n    else:\n        return n % 10 ** (n - 1) + last_Digit_Factorial(n // 10)\n    \ndef fibonacci_recur(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    return fibonacci_recur(n - 1) + fibonacci_recur(n - 2)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        return last_Digit_Factorial(n - 1) \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    num=int(n)\n    lastDigit=1\n    for i in range(2,num):\n        if num%i==0:\n            lastDigit=0\n    if lastDigit==1:\n        print(lastDigit)\n    else:\n        print(lastDigit)\n    return lastDigit\n    \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for x in range(1, n+1):\n        fact *= x\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact*i\n    return fact"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Your code here\n    def factorial(n):\n        '''\n        Given a positive integer n, find the nth factorial.\n        '''\n        if n==0:\n            return 1\n        else:\n            return factorial(n-1) * n\n    if n<=0:\n        return 0\n    else:\n        return factorial(n)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    Factorial = 1\n    while n > 0:\n        Factorial = Factorial * n\n        n = n - 1\n    return Factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(n-1, -1, -1): \n        fact = fact*i \n    return fact \n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result=[]\n    for i in range(len(list1)):\n        for j in range(len(list2[i])):\n            for k in range(len(list3[i])):\n                result.append(list1[i][j]+list2[i][k]+list3[i][k])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1_interleaved = list1 + list2 + list3\n    return list1_interleaved\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i] + list3[i])\n    return result\n    \n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return (list3+list2+list1)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1+list2+list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    \n    list1 = [list1[i] for i in range(len(list1))]\n    list2 = [list2[i] for i in range(len(list2))]\n    list3 = [list3[i] for i in range(len(list3))]\n    \n    while len(list1)!= 0:\n        if len(list3)!= 0:\n            for i in range(len(list3)):\n                interleaved_list.append(list1.pop(0))\n                list3.pop(0)\n        else:\n            for i in range(len(list1)):\n                interleaved_list.append(list1.pop(0))\n    return interleaved_list\n    \nif __name__ == \"__main__\":\n    # Test the interleave_lists function\n    l1 = [1,2,3,4,5,6,7,8,9,10]\n    l2 = [1,2,3,4,5,6,7,8,9,10]\n    l3 = [1,2,3,4,5,6,7,8,9,10]\n    \n    print(\"l1\")\n    print(l1)\n    print(\"l2\")\n    print(l2)\n    print(\"l3\")\n    print(l3)\n    print(\"Interleave lists:\")\n    print(interleave_lists(l1,l2,l3))"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4=[list1[0]]+list2+[list1[0]]+list3+[list1[0]]\n    return list4\n    \ndef interleave_lists2(list1,list2,list3):\n    '''\n    Write a function that interleaves 3 lists of the same length into a single flat list.\n    '''\n    list4=[list1[0]]+list2+[list1[0]]+list3+[list1[0]]\n    return list4\n    \ndef interleave_lists_of_lists(list1,list2,list3):\n    '''\n    Write a function that interleaves 3 lists of the same length into a single flat list.\n    '''\n    list4=[list1[0]]+list2+[list1[0]]+list3+[list1[0]]\n    return list4\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return(list(zip(list1,list2,list3)))\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '''\n    \n    '''\n    >>> interleave_lists([1,2,3], [4,5,6], [7,8,9])\n    [1,2,3,4,5,6,7,8,9]\n    '"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    intersect = set(test_tup1) & set(test_tup2)\n    return list(intersect)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return test_tup1[0]!= test_tup2[0]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    count = 0\n    for tup1 in test_tup1:\n        for tup2 in test_tup2:\n            if tup1 == tup2:\n                count += 1\n    return count"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # test cases\n    if (len(test_tup1)!= len(test_tup2)):\n        print(\"Invalid Input\")\n        return\n    dissimilar_tuple_count = 0\n    \n    # Traverse through the two tuples\n    for i in range(len(test_tup1)):\n        # Check if tuple contains the same value\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_tuple_count += 1\n            \n    # Return the dissimilar elements\n    return dissimilar_tuple_count\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res1=set(test_tup1)\n    res2=set(test_tup2)\n    res3=res1.union(res2)\n    res=res3.difference(res1)\n    return res\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_set = set(test_tup1)\n    test_set.update(test_tup2)\n    return list(test_set)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    t1, t2 = test_tup1, test_tup2\n    dissim = 0\n    for i in range(len(t1)):\n        for j in range(i,len(t2)):\n            dissim += abs(t1[i] - t2[j])\n    return dissim\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    test_list = test_list1 + test_list2\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if type(test_tup1)!= tuple:\n        print('Input must be tuple')\n        return\n    if type(test_tup2)!= tuple:\n        print('Input must be tuple')\n        return\n    if test_tup1 == test_tup2:\n        return\n    return [x for x in test_tup2 if x not in test_tup1]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return []\n    else:\n        if test_tup1[0] > test_tup2[0]:\n            temp = test_tup1\n            test_tup1 = test_tup2\n            test_tup2 = temp\n        temp_1 = []\n        temp_2 = []\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                temp_1.append(test_tup1[i])\n                temp_1.append(test_tup2[i])\n                temp_2.append(test_tup2[i])\n            else:\n                temp_2.append(test_tup2[i])\n                temp_2.append(test_tup1[i])\n        return temp_1 + temp_2\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_ele = even_fnc(test_tuple[0],test_tuple[1])\n    for i in range(2,len(test_tuple)):\n        if test_tuple[i][0] == even_fnc(test_tuple[i-1][0],test_tuple[i-1][1]):\n            continue\n        else:\n            odd_ele = odd_ele + even_fnc(test_tuple[i][0],test_tuple[i][1])\n    return odd_ele\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_even_fnc = lambda x: list(filter(even_fnc, x))\n    return even_even_fnc(*test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[0]\n    return (even_tuple, even_fnc(even_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_lst = test_tuple[0]\n    for i in range(len(test_tuple) - 1):\n        if even_fnc(even_lst, test_tuple[i + 1]):\n            even_lst = test_tuple[i + 1]\n        else:\n            break\n    return test_tuple[0:i] + even_lst + test_tuple[i + 1:len(test_tuple)]\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_even(tuple_obj): \n        '''\n        remove every even element in the nested mixed tuple\n        '''\n        even_str = \"\"\n        even_list = []\n        for item in tuple_obj: \n            if type(item) == int:\n                even_str += str(item) + \" \"\n            else:\n                even_str += item + \" \"\n        even_list = even_str.split(\" \")\n        #print(even_list)\n        #print(type(even_list))\n        even_list.pop()\n        #print(even_list)\n        even_list.pop()\n        #print(even_list)\n        #print(type(even_list))\n        return even_list\n    # print(remove_even(test_tuple))\n    new_tuple = []\n    #new_tuple = tuple(map(even_fnc, tuple_obj))\n    #new_tuple = tuple(map(remove_even, tuple_obj))\n    new_tuple = tuple(map(remove_even, test_tuple))\n    #print(new_tuple)\n    # print(new_tuple)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(tuple)\n    print(\"The first element of the tuple is:\", tuple[0])\n    #For each element in the tuple, if the current element is even, then remove it.\n    for i in range(0, len(tuple)):\n        if tuple[i] % 2 == 0:\n            tuple[i] = tuple[i] // 2\n    even_fnc(tuple)\n    print(\"The next element of the tuple is:\", tuple[-1])\n    print()\n    print(\"The last element of the tuple is:\", tuple[-2])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple, test_tuple[::2])\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    tup1 = test_tuple \n    tup2 = [] \n    for i in tup1: \n        if i % 2 == 0: \n            tup2.append(i) \n    return tup2 \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_tuple = ()\n    for tup in test_tuple: \n        for item in tup:\n            if item % 2 == 0:\n                odd_tuple = (odd_tuple, item)\n    \n    even_tuple = tuple(even_fnc(tup) for tup in odd_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc_args = args_filter(test_tuple)\n    even_fnc_args = list(filter(even_fnc, even_fnc_args))\n    even_fnc_args = list(filter(lambda x: x % 2 == 0, even_fnc_args))\n    return even_fnc_args\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    #get the base edge\n    b = b\n    \n    #get the height\n    h = s\n    \n    #initialize the area\n    a = 0\n    \n    #loop over the number of b\n    while b < h:\n        #add the number of b to a\n        a = a + b\n        \n        #check if the left edge has been reached\n        if b >= 1:\n            #get the left edge\n            b = b * 2\n        \n        #check if the right edge has been reached\n        if b <= h-1:\n            #get the right edge\n            b = b * 2 + 1\n        \n        #check if the lower edge has been reached\n        if h - 2 >= b:\n            #get the lower edge\n            h = h - 2\n        \n        #check if the upper edge has been reached\n        if h - 1 >= b:\n            #get the upper edge\n            h = h - 1\n    \n    #return the area\n    return a\n    \n    \ndef print_rectangle(h,b):\n    '''\n    Print a rectangle of given size.\n    '''\n    \n    #get the base edge\n    b = b\n    \n    #get the height\n    h = h\n    \n    #initialize the area\n    a = 0\n    \n    #loop over the number of b\n    while b < h:\n        #add the number of b to a\n        a = a + b\n        \n        #check if the left edge has been reached\n        if b >= 1:\n            #print the left edge\n            print('   '* b,end='')\n            b = b * 2\n            \n        #check if the right edge has been reached\n        if b <= h-1:\n            #print the right edge\n            print('   '* b,end='')\n            b = b * 2 + 1\n            \n        #check if the lower edge has been reached\n        if h - 2 >= b:\n            #print the lower edge\n            print('   '* b,end='')\n            b = b * 2\n            \n        #check if the upper edge has been reached\n        if h - 1 >= b:\n            #print the upper edge\n            print('   '* b,end='')\n            b = b * 2 + 1\n    \n    #print the area\n    print('    ',end='')\n    print(f'{a}')\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if s<=0:\n        return 0\n    else:\n        return (b*(2*s+1))/3\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    for i in range(b):\n        area += s*(s-1)//2\n        if i<(b-1)/2:\n            area += s\n        else:\n            area -= s*(b-1)//2\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def recur(i,j):\n        if i>=0 and j>=0 and i+j<s and arr[i][j] == 0:\n            arr[i][j] = recur(i+1,j) + recur(i,j+1) + recur(i+1,j+1)\n            return arr[i][j]\n    return recur(0,0)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Your code goes here\n    return 0\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    l = (b / 2) \n    height = (s / 2)\n    area = 0\n    for i in range(l):\n        for j in range(i, l, 2):\n            area += abs(b - (l - i) * (l - j))\n    area = abs(b - (l - i) * (l - j)) * height\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    from math import ceil\n    h = int(s)\n    b = int(b)\n    if b<2 or h<1 or h>8:\n        print(\"Invalid height or base edge.\")\n    else:\n        area = (b*(b+1))/2\n        # for i in range(1,ceil(h/2)):\n        #     area = (b*i)\n        print(\"\\n\\nThe area of the pyramid with base edge height = \" + str(b) + \" and height = \" + str(h) + \" is \" + str(area))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base = 4 * b\n    height = s\n    # return height * height\n    return base * base\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if(s == 0):\n        return 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return (dict1 == {})\n    \ndef get_data(location, word, dict):\n    '''\n    get_data\n    '''\n    if location not in dict:\n        print('Word not found in dictionary')\n    else:\n        print(f'{location} : {dict[location]}')\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.__len__() == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 is None:\n        return \"None\"\n    else:\n        return dict1\n    "
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.values():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.items() == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key, value in dict1.items():\n        if value is None:\n            print('The key \\'{}\\' is {}'.format(key, value))\n            return\n    print('The key \\'{}\\' is {}'.format(key, value))\n    \n    "
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for i in dict1:\n        if dict1[i] == None:\n            return True\n    return False\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return sum(catalan_number(n-1) + catalan_number(n-2) for n in range(1,num))\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return (catalan_number(num - 1) + catalan_number(num - 2))\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num + 1\n    numbers = list(range(1, n))\n    catalan = 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    # Using the default value of nth_catalan.py\n    import nth_catalan as nth_catalan\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = 1\n    x = 1\n    while num <= c:\n        print(c, end ='')\n        c += x\n        x += 1\n    return c\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    a = 1\n    while a < num:\n        a = a + (a*catalan(a))\n    return a\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if (num < 0):\n        return -1\n    elif (num == 0):\n        return 0\n    elif (num == 1):\n        return 1\n    elif (num < 3):\n        return catalan_number(num - 1)\n    else:\n        return (catalan_number(num - 2) + catalan_number(num - 3))"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def f(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return (f(n-1) + f(n-2))\n    return f(num)\nprint(catalan_number(4))\nprint(catalan_number(5)"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    def catalan_number_return(n):\n        '''\n        This function returns nth catalan number.\n        '''\n        def catalan_number_return_iter(n):\n            '''\n            This function returns nth catalan number.\n            '''\n            if n==0:\n                return 0\n            if n==1:\n                return 1\n            return catalan_number_return_iter(n-1)+catalan_number_return_iter(n-2)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # TODO: modify this code to find the adverb ending with ly and its positions in a given string\n    \n    # TODO: modify this code to find the adverb ending with ly and its positions in a given string\n    \n    # TODO: modify this code to find the adverb ending with ly and its positions in a given string\n    \n    # TODO: modify this code to find the adverb ending with ly and its positions in a given string\n    \n    # TODO: modify this code to find the adverb ending with ly and its positions in a given string\n    \n    # TODO: modify this code to find the adverb ending with ly and its positions in a given string\n    \n    # TODO: modify this code to find the adverb ending with ly and its positions in a given string\n    \n    # TODO: modify this code to find the adverb ending with ly and its positions in a given string\n    \n    adverbs = []\n    \n    match = re.search(r\"(ly|lye|lyi|lyion|lyy|lyyie|lyies|lyyiez|lyi\u00eb|lyiez|lyi\u00ebz|lyiez|lyi\u00ebz)$\",text)\n    \n    if match is not None:\n        text = text[match.end():]\n        \n    # print('text:',text)\n    # print('match:',match)\n    # print('pos:',pos)\n    \n    for i in range(0,len(text)-1):\n        \n        if text[i:i+2] == 'ly':\n            adverbs.append(text[i:i+2])\n            # print('adverbs found:',adverbs)\n            break\n        elif text[i:i+2] == 'lye':\n            adverbs.append(text[i:i+2])\n            # print('adverbs found:',adverbs)\n            break\n        elif text[i:i+2] == 'lyi':\n            adverbs.append(text[i:i+2])\n            # print('adverbs found:',adverbs)\n            break\n        elif text[i:i+2] == 'lyion':\n            adverbs.append(text[i:i+2])\n            # print('adverbs found:',adverbs)\n            break\n        elif text[i:i+2] == 'lyy':\n            adverbs.append(text[i:i+2])\n            # print('adverbs found:',adverbs)\n            break\n        elif text[i:i+2] == 'lyyie':\n            adverbs.append(text[i:i+2])\n            # print('adverbs found:',adverbs)\n            break\n        elif text[i:i+2] == 'lyyies':\n            adverbs.append(text[i:i+2])\n            # print('adverbs found:',adverbs)\n            break\n        elif text[i:i+2] == 'lyyiez':\n            adverbs.append(text[i:i+2])\n            # print('adverbs found:',adverbs)\n            break\n        elif text[i:i+2] == 'lyi\u00eb':\n            adverbs.append(text[i:i+2])\n            # print('adverbs found:',adverbs)\n            break\n        elif text[i:i+2] == 'lyiez':\n            adverbs.append(text[i:i+2])\n            # print('adverbs found:',adverbs)\n            break\n        elif text[i:i+2] == 'lyi\u00ebz':\n            adverbs.append(text[i:i+2])\n            # print('adverbs found:',adverbs)\n            break\n        elif text[i:i+2] == 'lyi\u00ebz':\n            adverbs.append(text[i:i+2])\n            # print('adverbs found:',adverbs)\n            break\n    \n    adverbs = []\n    \n    if adverbs == []:\n        # print('adverbs not found:',adverbs)\n        return []\n    \n    if len(adverbs) > 1:\n        print('adverbs found:',adverbs)\n        return adverbs\n    else:\n        # print('adverbs found:',adverbs)\n        # TODO: modify this code to find the adverb ending with ly and its positions in a given string\n        return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'(?!ly).*ly$')\n    match = pattern.match(text)\n    if match:\n        start, end = match.span()\n    else:\n        return None\n    return end\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    in_ly = False\n    in_noun = False\n    in_pronoun = False\n    in_verb = False\n    adverbs.append(\"ly\")\n    for i in range(len(text)):\n        if text[i] in [\"a\", \"e\", \"i\", \"o\", \"u\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"]:\n            in_ly = True\n            adverbs.append(\"ly\")\n        if in_ly:\n            if text[i] == \"i\":\n                in_noun = True\n            if in_noun:\n                if text[i] == \"y\":\n                    in_pronoun = True\n        if in_ly and in_noun and in_pronoun:\n            if text[i] == \"a\":\n                in_ly = False\n            if text[i] == \"e\":\n                in_ly = False\n                in_noun = False\n            if text[i] == \"i\":\n                in_ly = False\n                in_noun = False\n                in_pronoun = False\n            if text[i] == \"o\":\n                in_ly = False\n                in_noun = False\n                in_pronoun = False\n            if text[i] == \"u\":\n                in_ly = False\n                in_noun = False\n                in_pronoun = False\n            if text[i] == \"y\":\n                in_ly = False\n                in_noun = False\n                in_pronoun = False\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    adverbs = ['i', 'an', 'i', 'n', 'an']\n    final_text = []\n    \n    #if the current text is a vowel or a consonant\n    if text[0:2].lower() in vowels or text[0:2].lower() in adverbs:\n        for i in range(len(text)):\n            if text[i:i+3] in vowels or text[i:i+3] in adverbs:\n                final_text.append(text[i:i+3])\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('e', 'r'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text[i:i+3].replace('an', 'n'))\n                final_text.append(text[i:i+3].replace('i', 'l'))\n                final_text.append(text["
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Check the string\n    if 'ly' in text:\n        # Check if the first adverb ending with ly is in the string\n        if text.startswith('ly'):\n            # Remove ly from the string and split with spaces\n            adverb_ending = re.sub('ly$', '', text.split('ly')[1])\n            # Return the first adverb ending with ly if ly was not found\n            return re.findall(r'ly\\d+', adverb_ending)\n        # Return an empty string if ly not found\n        return ''\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs_ly = 'ly'\n    adverbs_ly_positions = []\n    adverbs_ly_endings = []\n    for l in range(len(text)):\n        if (adverbs_ly == 'ly' and text[l] == adverbs_ly and text[l+1] == 'ly') or \\\n            (adverbs_ly == 'ly' and text[l] == adverbs_ly and text[l+1] == 'ly'):\n            adverbs_ly_positions.append(l)\n            adverbs_ly_endings.append(text[l:l+len(adverbs_ly)])\n    return adverbs_ly_endings\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    positions = [i for i, word in enumerate(text.split()) if word.endswith('ly')]\n    adverbs = [i for i, word in enumerate(text.split()) if word.endswith('ly')]\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.split('ly')\n    for i in range(len(text)):\n        text[i] = text[i].strip('\\n')\n        if 'ly' in text[i]:\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(')')\n            text[i] = text[i].strip('\\'')\n            text[i] = text[i].strip('\\'')\n            text[i] = text[i].strip('\\'')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('\\'')\n            text[i] = text[i].strip('\\'')\n            text[i] = text[i].strip('\\'')\n            text[i] = text[i].strip('\\'')\n            text[i] = text[i].strip('\\'')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('\\'')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('\\'')\n            text[i] = text[i].strip('\\'')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].strip('ly')\n            text[i] = text[i].strip(',')\n            text[i] = text[i].stri"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # list of adverbs that can be found\n    list_of_adverbs = [\"ab\", \"cdr\", \"dcr\", \"elem\", \"elem\", \"idr\", \"lal\", \"ral\", \"sac\", \"sap\", \"tac\", \"ta\"]\n    # start and end positions of adverbs\n    start_positions = [(0,0), (0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7), (0,8), (0,9), (0,10)]\n    end_positions = [(0,11)]\n    # print(list_of_adverbs)\n    adverbs = []\n    for word in list_of_adverbs:\n        # find starting and ending positions of adverb\n        for pos in start_positions:\n            for end_pos in end_positions:\n                if re.search(word, text, re.IGNORECASE) and pos[1] <= end_pos[0] and pos[0] <= end_pos[1]:\n                    # print(word, pos, end_pos)\n                    adverbs.append((word, pos, end_pos))\n    # print(adverbs)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # try:\n    adverbs = ['ly', 'lyrd', 'lyrdly', 'lyrdlyly', 'lyrdlyly', 'lyrdlyly', 'lyr', 'lyrly']\n    pos = 0\n    for i in range(0, len(text)):\n        if text[i:i+3] == 'ly':\n            pos = i\n            break\n        else:\n            pos = pos + 1\n    return pos\n    # except Exception as e:\n    #     print(e)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i[n])\n    res = []\n    for i in heap:\n        if heap.index(i) < len(items) and heap.index(i) < len(items) - 1:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda x: x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item[1])\n    for i in range(n):\n        return heapq.heappop(heap)\ndef items_to_heap(items):\n    '''\n    Write a function to convert a given list of tuples of (price, rating) into a heap.\n    The return value is a heap that is a list of tuples, where each tuple is sorted by price first and then by rating.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,[item[1],item[0]])\n    return heap\ndef get_top_n(items,n):\n    '''\n    Return the top n items from the given dataset, in arbitrary order.\n    '''\n    heap = items_to_heap(items)\n    return heap[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heappush(heap, (items[0],0))\n    heapq.heappush(heap, (items[1],1))\n    heapq.heappush(heap, (items[2],2))\n    heapq.heappush(heap, (items[3],3))\n    heapq.heappush(heap, (items[4],4))\n    heapq.heappush(heap, (items[5],5))\n    heapq.heappush(heap, (items[6],6))\n    heapq.heappush(heap, (items[7],7))\n    heapq.heappush(heap, (items[8],8))\n    heapq.heappush(heap, (items[9],9))\n    heapq.heappush(heap, (items[10],10))\n    heapq.heappush(heap, (items[11],11))\n    heapq.heappush(heap, (items[12],12))\n    heapq.heappush(heap, (items[13],13))\n    heapq.heappush(heap, (items[14],14))\n    heapq.heappush(heap, (items[15],15))\n    heapq.heappush(heap, (items[16],16))\n    heapq.heappush(heap, (items[17],17))\n    heapq.heappush(heap, (items[18],18))\n    heapq.heappush(heap, (items[19],19))\n    heapq.heappush(heap, (items[20],20))\n    heapq.heappush(heap, (items[21],21))\n    heapq.heappush(heap, (items[22],22))\n    heapq.heappush(heap, (items[23],23))\n    heapq.heappush(heap, (items[24],24))\n    heapq.heappush(heap, (items[25],25))\n    heapq.heappush(heap, (items[26],26))\n    heapq.heappush(heap, (items[27],27))\n    heapq.heappush(heap, (items[28],28))\n    heapq.heappush(heap, (items[29],29))\n    heapq.heappush(heap, (items[30],30))\n    heapq.heappush(heap, (items[31],31))\n    heapq.heappush(heap, (items[32],32))\n    heapq.heappush(heap, (items[33],33))\n    heapq.heappush(heap, (items[34],34))\n    heapq.heappush(heap, (items[35],35))\n    heapq.heappush(heap, (items[36],36))\n    heapq.heappush(heap, (items[37],37))\n    heapq.heappush(heap, (items[38],38))\n    heapq.heappush(heap, (items[39],39))\n    heapq.heappush(heap, (items[40],40))\n    heapq.heappush(heap, (items[41],41))\n    heapq.heappush(heap, (items[42],42))\n    heapq.heappush(heap, (items[43],43))\n    heapq.heappush(heap, (items[44],44))\n    heapq.heappush(heap, (items[45],45))\n    heapq.heappush(heap, (items[46],46))\n    heapq.heappush(heap, (items[47],47))\n    heapq.heappush(heap, (items[48],48))\n    heapq.heappush(heap, (items[49],49))\n    heapq.heappush(heap, (items[50],50))\n    heapq.heappush(heap, (items[51],51))\n    heapq.heappush(heap, (items[52],52))\n    heapq.heappush(heap, (items[53],53))\n    heapq.heappush(heap, (items[54],54))\n    heapq.heappush(heap, (items[55],55))\n    heapq.heappush(heap, (items[56],56))\n    heapq.heappush(heap, (items[57],57))\n    heapq.heappush(heap, (items[58],58))\n    heapq.heappush(heap, (items[59],59))\n    heapq.heappush(heap, (items[60],60))\n    heapq.heappush(heap, (items[61],61))\n    heapq.heappush(heap, (items[62],62))\n    heapq.heappush(heap, (items[63],63))\n    heapq.heappush(heap, (items[64],64))\n    heapq.heappush(heap, (items[65],65))\n    heapq.heappush(heap, (items[66],66))\n    heapq.heappush(heap, (items[67],67))\n    heapq.heappush(heap, (items[68],68))\n    heapq.heappush(heap, (items[69],69))\n    heapq.heappush(heap, (items[70],70))\n    heapq.heappush(heap, (items[71],71))\n    heapq.heappush(heap, (items[72],72))\n    heapq.heappush(heap, (items[73],73))\n    heapq.heappush(heap, (items[74],74))\n    heapq.heappush(heap, (items[75],75))\n    heapq.heappush(heap, (items[76],76))\n    heapq.heappush(heap, (items[77],77))\n    heapq.heappush(heap, (items[78],78))\n    heapq.heappush(heap, (items[79],79))\n    heapq.heappush(heap, (items[80],80))\n    heapq.heappush(heap, (items[81],81))\n    heapq.heappush(heap, (items[82],82))\n    heapq.heappush(heap, (items[83],83))\n    heapq.heappush(heap, (items[84],84))\n    heapq.heappush(heap, (items[85],85))\n    heapq.heappush(heap, (items[86],86))\n    heapq.heappush(heap, (items[87],87))\n    heapq.heappush(heap, (items[88],88))\n    heapq.heappush(heap, (items[89],89))\n    heapq.heappush(heap, (items[90],90))\n    heapq.heappush(heap, (items[91],91))\n    heapq.heappush(heap, (items[92],92))\n    heapq.heappush(heap, (items[93],93))\n    heapq.heappush(heap, (items[94],94))\n    heapq.heappush(heap, (items[95],95))\n    heapq.heappush(heap, (items[96],96))\n    heapq.heappush(heap, (items[97],97))\n    heapq.heappush(heap, (items[98],98))\n    heapq.heappush(heap, (items[99],99))\n    hea"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n    current_heap = heapq.heapify(heap)\n    if len(current_heap)<=n:\n        return items\n    for i in range(n-1):\n        item = heapq.heappop(current_heap)\n        heapq.heappush(heap,item)\n        if len(heap)==n:\n            heapq.heapify(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    result = []\n    s = sorted(items,key=lambda item:item[1], reverse=True)\n    \n    for i in range(n):\n        heapq.heappush(heap,(s[i][1],s[i][0]))\n        \n    for i in range(n):\n        if heap[0][1] > s[i][1]:\n            heapq.heappop(heap)\n            result.append(s[i])\n            \n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # heap sort\n    heapq.heapify(items)\n    # find n most expensive items\n    return heapq.nlargest(n, items, key=lambda x: x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[1])\n    print(heap)\n    items_heap = []\n    for i in range(n):\n        if len(heap)>=i:\n            items_heap.append(heapq.heappop(heap))\n        else:\n            items_heap.append(-1)\n    print(items_heap)\n    return items_heap\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[1])\n    print(heap)\n    items_heap = []\n    for i in range(n):\n        if len(heap)>=i:\n            items_heap.append(heapq.heappop(heap))\n        else:\n            items_heap.append(-1)\n    print(items_heap)\n    return items_heap\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[1])\n    print(heap)\n    items_heap = []\n    for i in range(n):\n        if len(heap)>=i:\n            items_heap.append(heapq.heappop(heap))\n        else:\n            items_heap.append(-1)\n    print(items_heap)\n    return items_heap\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[1])\n    print(heap)\n    items_heap = []\n    for i in range(n):\n        if len(heap)>=i:\n            items_heap.append(heapq.heappop(heap))\n        else:\n            items_heap.append(-1)\n    print(items_heap)\n    return items_heap\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[1])\n    print(heap)\n    items_heap = []\n    for i in range(n):\n        if len(heap)>=i:\n            items_heap.append(heapq.heappop(heap))\n        else:\n            items_heap.append(-1)\n    print(items_heap)\n    return items_heap\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[1])\n    print(heap)\n    items_heap = []\n    for i in range(n):\n        if len(heap)>=i:\n            items_heap.append(heapq.heappop(heap))\n        else:\n            items_heap.append(-1)\n    print(items_heap)\n    return items_heap\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[1])\n    print(heap)\n    items_heap = []\n    for i in range(n):\n        if len(heap)>=i:\n            items_heap.append(heapq.heappop(heap))\n        else:\n            items_heap.append(-1)\n    print(items_heap)\n    return items_heap\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[1])\n    print(heap)\n    items_heap = []\n    for i in range(n):\n        if len(heap)>=i:\n            items_heap.append(heapq.heappop(heap))\n        else:\n            items_heap.append(-1)\n    print(items_heap)\n    return items_heap\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[1])\n    print(heap)\n    items_heap = []\n    for i in range(n):\n        if len(heap)>=i:\n            items_heap.append(heapq.heappop(heap))\n        else:\n            items_heap.append(-1)\n    print(items_heap)\n    return items_heap\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[1])\n    print(heap)\n    items_heap = []\n    for i in range(n):\n        if len(heap)>=i:\n            items_heap.append(heapq.heappop(heap))\n        else:\n            items_heap.append(-1)\n    print(items_heap)\n    return items_heap\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[1])\n    print(heap)\n    items_heap = []\n    for i in range(n):\n        if len(heap)>=i:\n            items_heap.append(heapq.heappop(heap))\n        else:\n            items_heap.append(-1)\n    print(items_heap)\n    return items_heap\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        heapq.heappush(heap,item[1])\n    print(heap)\n    items_heap = []\n    for i in range(n):\n        if len(heap)>=i:\n            items_heap.append(heapq.heappop(heap))\n        else:\n            items_heap.append(-1)\n    print(items_heap)\n    return items_heap\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for item in items:\n        hea"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    items = items[:n]\n    return items\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    # If the dataset is empty, there are no expensive items to return\n    if len(items) == 0:\n        return []\n        \n    # Sort the items using the index\n    items.sort(key=lambda x:x[1], reverse=True)\n    \n    # Find the size of the heap\n    maxsize = len(items)\n    \n    # Start from the front\n    front = 0\n    \n    # Init an empty heap\n    heap = []\n    \n    # Size of the heap\n    while front < maxsize:\n        \n        # Find the value in the heap\n        val = heapq.heappop(heap)\n        \n        # Check the size of the heap\n        if len(heap) > 0:\n            if val[1] < heap[0][1]:\n                # Remove the value\n                heapq.heappush(heap,val)\n        else:\n            heapq.heappush(heap,[val[1],val[0]])\n        \n        # Increase the size of the front\n        if len(heap) > 0:\n            front = front + 1\n        else:\n            front = 0\n    \n    # Find the n most expensive items\n    items.sort(key=lambda x:x[1], reverse=True)\n    \n    # Return the n most expensive items\n    return items[:n]\n    \ndef expensive_items2(items, n):\n    '''\n    Write a function that takes a list of size N and returns the n most expensive items in it.\n    '''\n    \n    # Init an empty heap\n    heap = []\n    \n    # Size of the heap\n    maxsize = len(items)\n    \n    # Start from the front\n    front = 0\n    \n    # Init an empty heap\n    heapq.heapify(heap)\n    \n    # Size of the heap\n    while front < maxsize:\n        \n        # Find the value in the heap\n        val = heapq.heappop(heap)\n        \n        # Check the size of the heap\n        if len(heap) > 0:\n            if val[1] < heap[0][1]:\n                # Remove the value\n                heapq.heappush(heap,val)\n        else:\n            heapq.heappush(heap,[val[1],val[0]])\n        \n        # Increase the size of the front\n        if len(heap) > 0:\n            front = front + 1\n        else:\n            front = 0\n    \n    # Find the n most expensive items\n    items.sort(key=lambda x:x[1], reverse=True)\n    \n    # Return the n most expensive items\n    return items[:n]\n    \ndef customers_1(items, n):\n    '''\n    Write a function that returns the n most expensive items in a given dataset,\n    in a sorted manner.\n    '''\n    \n    # If the dataset is empty, there are no expensive items to return\n    if len(items) == 0:\n        return []\n        \n    # Sort the items using the index\n    items.sort(key=lambda x:x[1], reverse=True)\n    \n    # Find the size of the heap\n    maxsize = len(items)\n    \n    # Start from the front\n    front = 0\n    \n    # Init an empty heap\n    heap = []\n    \n    # Size of the heap\n    while front < maxsize:\n        \n        # Find the value in the heap\n        val = heapq.heappop(heap)\n        \n        # Check the size of the heap\n        if len(heap) > 0:\n            if val[1] < heap[0][1]:\n                # Remove the value\n                heapq.heappush(heap,val)\n        else:\n            heapq.heappush(heap,[val[1],val[0]])\n        \n        # Increase the size of the front\n        if len(heap) > 0:\n            front = front + 1\n        else:\n            front = 0\n    \n    # Find the n most expensive items\n    items.sort(key=lambda x:x[1], reverse=True)\n    \n    # Return the n most expensive items\n    return items[:n]\n    \ndef customers_2(items, n):\n    '''\n    Write a function that returns the n most expensive items in a given dataset,\n    in a sorted manner.\n    '''\n    \n    # If the dataset is empty, there are no expensive items to return\n    if len(items) == 0:\n        return []\n        \n    # Sort the items using the index\n    items.sort(key=lambda x:x[1], reverse=True)\n    \n    # Find the size of the heap\n    maxsize = len(items)\n    \n    # Start from the front\n    front = 0\n    \n    # Init an empty heap\n    heap = []\n    \n    # Size of the heap\n    while front < maxsize:\n        \n        # Find the value in the heap\n        val = heapq.heappop(heap)\n        \n        # Check the size of the heap\n        if len(heap) > 0:\n            if val[1] < heap[0][1]:\n                # Remove the value\n                heapq.heappush(heap,val)\n        else:\n            heapq.heappush(heap,[val[1],val[0]])\n        \n        # Increase the size of the front\n        if len(heap) > 0:\n            front = front + 1\n        else:\n            front = 0\n    \n    # Find the n most expensive items\n    items.sort(key=lambda x:x[1], reverse=True)\n    \n    # Return the n most expensive items\n    return items[:n]\n    \n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[:n]\n    b = l[n:]\n    return a + b\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l2=[]\n    for i in l:\n        l2.append(i[:n])\n    return l2\ndef replace(l, n, v):\n    '''\n    Write a python function to replace a specified element in a list with another specified element.\n    '''\n    l2=[]\n    for i in l:\n        l2.append(i[:n])\n    l2.append(v)\n    return l2\ndef count(l, v):\n    '''\n    Write a python function to count the number of times the specified element occurs in a list.\n    '''\n    return l.count(v)\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    res = []\n    for i in range(len(l)):\n        if i == n:\n            res.append(l[i])\n        else:\n            res.append(l[i])\n            res.append(l[i+1])\n    return res\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # write your code here\n    return l[n:]+l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listt = []\n    for element in listx:\n        listt.append(element)\n    return tuple(listt)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx=list(listx)\n    tuple_list=()\n    for i in range(len(listx)):\n        tuple_list+=tuple(listx[i])\n    return tuple_list\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for i in range(len(listx)):\n        tup = tup + (listx[i],)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n    \ndef main():\n    '''\n    Call your implementation of the function.\n    '''\n    # list_tuple(['a','b','c','d'])\n    # tuple_tuple(('a','b','c','d'))\n    # print(tuple_tuple('abcd'))\n    # print(list_tuple(('a','b','c','d')))\n    # print(tuple_tuple((1,2,3,4)))\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max = max(nums)\n    min = min(nums)\n    return max - min\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    small = nums[0]\n    big = nums[0]\n    for i in range(1,len(nums)):\n        if nums[i] < nums[i-1]:\n            small = nums[i]\n        else:\n            small = nums[i-1]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # base case 1:\n    # if we have a list with one element, return 1\n    # if we have a list with one element, return the element itself\n    # if the list has more than one element, return the largest difference between each element\n    if len(nums) == 1:\n        return nums[0] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # get the number of elements\n    n = len(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Create a list of the values\n    smallest_values = []\n    largest_values = []\n    \n    # Loop through the values and keep track of smallest and largest values\n    for x in nums:\n        smallest_values.append(min(x, key=int))\n        largest_values.append(max(x, key=int))\n    \n    # Calculate the difference of the smallest and largest values\n    difference = sum(smallest_values) - sum(largest_values)\n    \n    # Print the difference\n    print(difference)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val-min_val\n    \n    \nnums = [1,4,2,3,2,4,4,3,2,1,1,3,4,5]\nprint(big_diff(nums))"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    minimum = nums[0]\n    maximum = nums[-1]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(abs(num) - min(num) for num in nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # make a dummy var with 0 value and return it\n    dummy = 0\n    # check if nums[0] is greater than nums[1]\n    if nums[0] < nums[1]:\n        # make dummy value equal to nums[0]\n        dummy = nums[0]\n        # find the max and min of nums[1]\n        for n in nums[1:]:\n            # if nums[i] > nums[i+1]\n            if n > dummy:\n                # update dummy\n                dummy = n\n            # if nums[i] < nums[i+1]\n            elif n < dummy:\n                # update dummy\n                dummy = n\n    # if nums[0] is equal to nums[1]\n    else:\n        # make dummy value equal to nums[1]\n        dummy = nums[1]\n        # find the max and min of nums[1]\n        for n in nums[1:]:\n            # if nums[i] > nums[i+1]\n            if n > dummy:\n                # update dummy\n                dummy = n\n            # if nums[i] < nums[i+1]\n            elif n < dummy:\n                # update dummy\n                dummy = n\n    return dummy\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square_a = a ** 2\n    square_b = b ** 2\n    square_c = a * b\n    is_square = square_a + square_b > square_c\n    return is_square\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [a**2 for a in range(b) if a**2 % b == 0]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        a, b = b, a\n    numbers_to_find = [a, b]\n    result = []\n    for num in numbers_to_find:\n        if num * num == b:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a <= 0:\n        print('No perfect square of a', a, 'found.')\n    elif b <= 0:\n        print('No perfect square of b', b, 'found.')\n    else:\n        for x in range(1, a + 1):\n            if x * x == b:\n                print(x)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return [a]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    while(b!= 0):\n        if(a == b):\n            return a\n        if(a * a == b * b):\n            return b\n        a = a - 1\n        b = b - 1\n    return a\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == a:\n        return []\n    \n    def is_perfect_squares(b):\n        '''\n        Finds all perfect squares between 2 given numbers.\n        '''\n        if b == 0:\n            return [0]\n        \n        def is_perfect_squares(b):\n            '''\n            Finds all perfect squares between 2 given numbers.\n            '''\n            for i in range(1, int(sqrt(b))+1):\n                if b % i == 0:\n                    return [i] + is_perfect_squares(int(b/i))\n            return [0]\n        \n        return is_perfect_squares(b)\n    \n    return is_perfect_squares(b)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    from math import sqrt\n    return map(lambda x: sqrt(x), a, b)\n    #return list(perfect_squares(a, b))\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    c = []\n    for i in range(a, b+1):\n        if i%2==0:\n            c.append(i**2)\n    return c\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == 0:\n        return -1\n    elif b == 0:\n        return 0\n    elif a == b:\n        return 1\n    \n    if a == b:\n        return 1\n    \n    if a > b:\n        a, b = b, a\n    \n    while a!= b:\n        if abs(a - b) % 2 == 0:\n            return 1\n        a //= 2\n        b //= 2\n        \n    return 0\n    \n    \ndef convert_string_to_list(input_list):\n    '''\n    Convert a string to a list.\n    '''\n    result = []\n    \n    for char in input_list:\n        result.append(int(char))\n    \n    return result\n    \ndef reverse_string(input_str):\n    '''\n    Reverse a string.\n    '''\n    result = ''\n    for char in range(len(input_str)-1, -1, -1):\n        result += input_str[char]\n    return result\n    \ndef string_compare(input_str1, input_str2):\n    '''\n    Compare two strings by comparing the length of the long string.\n    '''\n    if len(input_str1)!= len(input_str2):\n        return -1\n    \n    count = 0\n    for char1, char2 in zip(input_str1, input_str2):\n        if char1!= char2:\n            count += 1\n    \n    if count == len(input_str1):\n        return 0\n    elif count == len(input_str2):\n        return 1\n    \n    return -1\n    \ndef get_next_permutation(input_str):\n    '''\n    Get the next permutation of a string.\n    '''\n    if len(input_str) <= 1:\n        return input_str\n    \n    base = input_str[0]\n    \n    if string_compare(input_str[1:], input_str[:-1]) == -1:\n        return get_next_permutation(input_str[1:])\n    else:\n        return base + get_next_permutation(input_str[1:])\n    \ndef permute_string(input_str, str_len):\n    '''\n    Get all permutations of a string with the given length.\n    '''\n    result = []\n    \n    if str_len == 1:\n        return [input_str]\n    \n    if str_len == 2:\n        return [[input_str], [input_str[0] + input_str[1]]]\n    \n    if str_len == 3:\n        return [[input_str[0] + input_str[1] + input_str[2]], [input_str[0] + input_str[1] + input_str[2] + input_str[3]]]\n        \n    permute_string(input_str[0:str_len-2], str_len-2)\n    permute_string(input_str[str_len-2:], str_len-2)\n    \ndef longest_consecutive_repetition(input_str):\n    '''\n    Longest consecutive repetition in a string.\n    '''\n    count = 0\n    \n    for char in input_str:\n        if string_compare(input_str, char):\n            if count == 0:\n                count = 1\n                continue\n            else:\n                count += 1\n                continue\n            \n    return count\n    \ndef contains_zero(input_list):\n    '''\n    Check if a list contains only 0.\n    '''\n    result = False\n    \n    for i in input_list:\n        if i!= 0:\n            result = True\n            break\n    \n    return result\n    \ndef string_equal(input_str1, input_str2):\n    '''\n    Return true if the strings are equal.\n    '''\n    if len(input_str1)!= len(input_str2):\n        return False\n    \n    for i in range(len(input_str1)):\n        if input_str1[i]!= input_str2[i]:\n            return False\n        \n    return True\n    \ndef main():\n    '''\n    Test Cases:\n    1: Given two strings\n    2: Given two strings\n    3: Both strings have the same length\n    4: Given two strings\n    5: Given two strings\n    6: Both strings are the same\n    '''\n    #Test Case 1\n    test_case_1 = 'abc'\n    test_case_2 = 'ab'\n    test_case_3 = 'aab'\n    test_case_4 = 'aba'\n    test_case_5 = 'abcdef'\n    test_case_6 = 'xyz'\n    \n    for case in test_case_1, test_case_2, test_case_3, test_case_4, test_case_5, test_case_6:\n        assert string_compare(case, get_next_permutation(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, reverse_string(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, convert_string_to_list(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, perfect_squares(case)) == -1, f'\\n{case}\\n'\n        assert string_compare(case, get_next_permutation(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, reverse_string(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, convert_string_to_list(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, perfect_squares(case)) == -1, f'\\n{case}\\n'\n        assert string_compare(case, get_next_permutation(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, reverse_string(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, convert_string_to_list(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, perfect_squares(case)) == -1, f'\\n{case}\\n'\n        assert string_compare(case, get_next_permutation(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, reverse_string(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, convert_string_to_list(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, perfect_squares(case)) == -1, f'\\n{case}\\n'\n        assert string_compare(case, get_next_permutation(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, reverse_string(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, convert_string_to_list(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, perfect_squares(case)) == -1, f'\\n{case}\\n'\n        assert string_compare(case, get_next_permutation(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, reverse_string(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, convert_string_to_list(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, perfect_squares(case)) == -1, f'\\n{case}\\n'\n        assert string_compare(case, get_next_permutation(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, reverse_string(case)) == 0, f'\\n{case}\\n'\n        assert string_compare(case, convert_string_to_list(case)) == 0, f'\\n{case}\\n'\n        assert string"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=cmath.polar(x)\n    y=cmath.polar(y)\n    \n    a=cmath.polar(x[0])\n    b=cmath.polar(x[1])\n    c=cmath.polar(y[0])\n    d=cmath.polar(y[1])\n    \n    return (a,b,c,d)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=complex(x)\n    y=complex(y)\n    s=(x+y)/2\n    x2=(-x-y)/2\n    y2=(y+x)/2\n    rectangle=(s.real**2+s.imag**2)**0.5\n    return(s.real,s.imag,x2,y2)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    p_x, p_y = cmath.polar(x,y)\n    return p_x,p_y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    R = y\n    C = x\n    phi = cmath.asin(y)/cmath.pi\n    phi = phi*180/3.14\n    x = x/2\n    y = y/2\n    phi = phi*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = phi*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi+90)*180/3.14\n    phi = (phi"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    theta = abs(y)\n    if theta < cmath.pi/2:\n        return r,theta\n    else:\n        return abs(r*cmath.sin(theta))+x, abs(r*cmath.cos(theta))+y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    polar_x = cmath.polar(x)\n    polar_y = cmath.polar(y)\n    rectangle = cmath.rect(polar_x[0], polar_y[0], polar_x[1], polar_y[1])\n    return rectangle\ndef polar_rect_method(x,y):\n    '''\n    Write a function that returns a rectangular coordinate in polar coordinates.\n    '''\n    rectangle = polar_rect(x,y)\n    return rectangle\ndef polar_rect_2d(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = x*pi/180\n    y = y*pi/180\n    return (x,y)\ndef polar_rect_2d_method(x,y):\n    '''\n    Write a function that returns a polar coordinate in rectangular coordinates.\n    '''\n    rectangle = polar_rect(x,y)\n    return rectangle\ndef polar_rect_2d_method_2(x,y):\n    '''\n    Write a function that returns a polar coordinate in rectangular coordinates.\n    '''\n    rectangle = polar_rect(x,y)\n    return rectangle.evalf()\ndef polar_rect_2d_method_3(x,y):\n    '''\n    Write a function that returns a polar coordinate in rectangular coordinates.\n    '''\n    rectangle = polar_rect(x,y)\n    x = x*pi/180\n    y = y*pi/180\n    return (x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    if y < 0:\n        y *= -1\n        z = 1\n    else:\n        z = -1\n    #return math.sqrt(z * z + x * x)\n    return x, y * z\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(cmath.pi*x, cmath.pi*y)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # get the polar coordinates\n    r = x**2+y**2\n    phi = cmath.phase(x)\n    psi = cmath.phase(y)\n    # create a vector and compute the rotation matrix\n    Rx = (1/r) * (1+cmath.cos(psi) - cmath.sin(psi) * cmath.cos(phi))\n    Ry = (1/r) * (cmath.cos(phi) + cmath.sin(phi) * cmath.sin(psi))\n    Rz = (1/r) * (cmath.cos(psi) + cmath.sin(psi) * cmath.cos(phi))\n    # return the rectangles\n    return Rx, Ry, Rz\ndef polar_rect_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # get the polar coordinates\n    r = x**2+y**2\n    phi = cmath.phase(x)\n    psi = cmath.phase(y)\n    # create a vector and compute the rotation matrix\n    Rx = (1/r) * (1+cmath.cos(psi)-cmath.sin(psi)*cmath.cos(phi))\n    Ry = (1/r) * (cmath.sin(phi)-cmath.cos(phi)*cmath.sin(psi))\n    Rz = (1/r) * (cmath.cos(psi)+cmath.sin(psi)*cmath.cos(phi))\n    # return the rectangles\n    return Rx, Ry, Rz\ndef polar_rect_3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # get the polar coordinates\n    r = x**2+y**2\n    phi = cmath.phase(x)\n    psi = cmath.phase(y)\n    # create a vector and compute the rotation matrix\n    Rx = (1/r) * (1-cmath.cos(psi)-cmath.sin(psi)*cmath.cos(phi))\n    Ry = (1/r) * (cmath.sin(phi)+cmath.cos(phi)*cmath.sin(psi))\n    Rz = (1/r) * (cmath.cos(psi)+cmath.sin(psi)*cmath.cos(phi))\n    # return the rectangles\n    return Rx, Ry, Rz\ndef polar_rect_4(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # get the polar coordinates\n    r = x**2+y**2\n    phi = cmath.phase(x)\n    psi = cmath.phase(y)\n    # create a vector and compute the rotation matrix\n    Rx = (1/r) * (1-cmath.cos(psi)-cmath.sin(psi)*cmath.cos(phi))\n    Ry = (1/r) * (cmath.sin(phi)-cmath.cos(phi)*cmath.sin(psi))\n    Rz = (1/r) * (cmath.cos(psi)+cmath.sin(psi)*cmath.cos(phi))\n    # return the rectangles\n    return Rx, Ry, Rz\ndef polar_rect_5(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # get the polar coordinates\n    r = x**2+y**2\n    phi = cmath.phase(x)\n    psi = cmath.phase(y)\n    # create a vector and compute the rotation matrix\n    Rx = (1/r) * (1-cmath.cos(psi)-cmath.sin(psi)*cmath.cos(phi))\n    Ry = (1/r) * (cmath.sin(phi)+cmath.cos(phi)*cmath.sin(psi))\n    Rz = (1/r) * (cmath.cos(psi)+cmath.sin(psi)*cmath.cos(phi))\n    # return the rectangles\n    return Rx, Ry, Rz\ndef polar_rect_6(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # get the polar coordinates\n    r = x**2+y**2\n    phi = cmath.phase(x)\n    psi = cmath.phase(y)\n    # create a vector and compute the rotation matrix\n    Rx = (1/r) * (1-cmath.cos(psi)-cmath.sin(psi)*cmath.cos(phi))\n    Ry = (1/r) * (cmath.sin(phi)+cmath.cos(phi)*cmath.sin(psi))\n    Rz = (1/r) * (cmath.cos(psi)+cmath.sin(psi)*cmath.cos(phi))\n    # return the rectangles\n    return Rx, Ry, Rz\ndef polar_rect_7(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # get the polar coordinates\n    r = x**2+y**2\n    phi = cmath.phase(x)\n    psi = cmath.phase(y)\n    # create a vector and compute the rotation matrix\n    Rx = (1/r) * (1-cmath.cos(psi)-cmath.sin(psi)*cmath.cos(phi))\n    Ry = (1/r) * (cmath.sin(phi)+cmath.cos(phi)*cmath.sin(psi))\n    Rz = (1/r) * (cmath.cos(psi)+cmath.sin(psi)*cmath.cos(phi))\n    # return the rectangles\n    return Rx, Ry, Rz\ndef polar_rect_8(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # get the polar coordinates\n    r = x**2+y**2\n    phi = cmath.phase(x)\n    psi = cmath.phase(y)\n    # create a vector and compute the rotation matrix\n    Rx = (1/r) * (1-cmath.cos(psi)-cmath.sin(psi)*cmath.cos(phi))\n    Ry = (1/r) * (cmath.sin(phi)+cmath.cos(phi)*cmath.sin(psi))\n    Rz = (1/r) * (cmath.cos(psi)+cmath.sin(psi)*cmath.cos(phi))\n    # return the rectangles\n    return Rx, Ry, Rz\ndef polar_rect_9(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # get the polar coordinates\n    r = x**2+y**2\n    phi = cmath.phase(x)\n    psi = cmath.phase(y)\n    # create a vector and compute the rotation matrix\n    Rx = (1/r) * (1-cmath.cos(psi)-cmath.sin(psi)*cmath.cos(phi))\n    Ry = (1/r) * (cmath.sin(phi)+cmath.cos(phi)*cmath.sin(psi))\n    Rz = (1/r) * (cmath.cos(psi)+cmath.sin(psi)*cmath.cos(phi))\n    # return the rectangles\n    return Rx, Ry, Rz\ndef polar_rect_10(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # get the polar coordinates\n    r = x**2+y**2\n    phi = cmath.phase(x)\n    psi = cmath.phase(y)\n    # create a vector and compute the rotation matrix\n    Rx = (1/r) * (1-cmath.cos(psi)-cmath.sin(psi)*cmath.cos(phi))\n    Ry = (1/r) * (cmath.sin(phi)+cmath.cos(phi)*cmath.sin(psi))\n    Rz = (1/r) * (cmath.cos(psi)+cmath.sin(psi)*cmath.co"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x > 0:\n        p = cmath.rect(cmath.pi/2, x)\n    else:\n        p = cmath.rect(cmath.pi/2, -x)\n    if y > 0:\n        q = cmath.rect(cmath.pi/2, y)\n    else:\n        q = cmath.rect(cmath.pi/2, -y)\n    return p.real, p.imag, q.real, q.imag\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for index in range(len(newList)-1, 0, -1):\n        temp = newList[index]\n        newList[index] = newList[index+1]\n        newList[index+1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(len(newList)-1,0,-1):\n        value = newList[i]\n        newList[i] = newList[i-1]\n        newList[i-1] = value\n    return newList\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #using for loop to perform swap operation\n    newList[0], newList[-1] = newList[-1], newList[0] \n    #using for loop to perform swap operation\n    for i in range(len(newList)):\n        temp = newList[i]\n        newList[i] = newList[len(newList)-1-i]\n        newList[len(newList)-1-i] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    new_list = newList[:] \n    new_list.insert(0,new_list[-1]) \n    new_list.pop() \n    new_list.append(new_list[0]) \n    return new_list \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList)\n    newList.sort() \n    newList.reverse()\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #Find the position to swap\n    i = newList.index(min(newList))\n    newList[i], newList[-i-1] = newList[-i-1], newList[i]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # get the length of the list\n    len_list = len(newList)\n    # iterate through the list\n    for i in range(len_list-1):\n        # get the index\n        index_1 = i\n        # get the index\n        index_2 = len_list-1-i\n        # sort the new list and print the first and last elements \n        newList[index_1], newList[index_2] = newList[index_2], newList[index_1]\n    # return the new list\n    return newList\n    "
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (n*(n-1))/2\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    coeffs = [] \n    for i in range(1, n+1): \n        coeff = n - i \n        coeffs.append(coeff) \n    \n    res = 1 \n    for i in range(0, k): \n        res = res * coeffs[i] \n    return res \n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    p = 1 \n    for i in range(1,k+1):\n        p = p * (n-i+1)\n    return p\n    \ndef monotonic(x,y):\n    '''\n    Write a python function that checks if the given\n    x and y are monotonic.\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(k-1) \n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    from math import factorial, factorial2\n    return factorial(n)/(factorial2(k)*factorial2(n-k))\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    n=int(n)\n    k=int(k)\n    coeff = 1\n    for i in range(1,k):\n        coeff = coeff*(i+1)\n    return coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    try:\n        a,b,c,d=0,0,0,0\n        for i in range(0,n):\n            a,b,c,d=b,a,c+d,0\n        return a*b*c\n    except TypeError:\n        return 0\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    n = int(n) #this converts the integer into an integer\n    k = int(k) #this converts the integer into an integer\n    \n    if(n<0): #this handles negative values\n        n = -n #this handles negative values\n        \n    if(n==0): #this handles zero value\n        return 1\n    elif(n==1):\n        return n\n    \n    elif(n==2): #this handles the case of the two values being found\n        return (k-1)*(k-2)*(k-3)\n    \n    elif(n>2): #this handles the case of the two values being found\n        return binomial_Coeff(n-1,k-2) + binomial_Coeff(n-2,k-1)\n    \n    elif(n>0): #this handles positive values\n        a = binomial_Coeff(n-1,k-2)\n        b = binomial_Coeff(n-1,k-1)\n        c = binomial_Coeff(n-1,k)\n        return (a+b+c)*(k-1)\n    \n    else: #this handles negative values\n        return -binomial_Coeff(n-1,k-2) - binomial_Coeff(n-2,k-1)\n    \ndef binomial_coefficients_for_given_values(n,k):\n    '''\n    This function takes n and k as inputs and returns a list of the product of consecutive binomial coefficients.\n    '''\n    \n    a = binomial_Coeff(n,k)\n    \n    if(a<0): #this handles negative values\n        a = -a\n    \n    if(a==0):\n        return []\n    \n    else:\n        return [a]\n    \ndef binomial_coefficients(n,k):\n    '''\n    This function takes n and k as inputs and returns a list of the product of consecutive binomial coefficients.\n    '''\n    \n    return binomial_coefficients_for_given_values(n,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum=0\n    for i in range(1,k+1):\n        if (n-i)%k==0:\n            sum+=n//k\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(n):\n        result += binomialCoeff(k,i) * binomialCoeff(n-i,n-i)\n    return result\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    sub = 0\n    for i in range(len(ip)):\n        if ip[i] == '0':\n            sub = i\n            break\n    if sub!= 0:\n        ip = ip[0:sub]\n        \n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    str_ip = str(ip)\n    len_ip = len(str_ip)\n    ip_dict = {\n    '0':'1','1':'0','2':'1','3':'0','4':'1','5':'0','6':'1','7':'0','8':'1','9':'0'}\n    ip_new = ''\n    for i in range(len_ip):\n        if ip_dict[str_ip[i]] == '0':\n            ip_new += str_ip[i]\n        else:\n            ip_new += str_ip[i]\n    return ip_new\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = re.findall(r'^(?:(?:0[0-9]|(?:1[0-9]|2[0-4])))', ip)\n    num = ''.join(num)\n    return num\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.match(r'^0\\d+$', ip):\n        return ip.replace('0','',1)\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0')\n    \ndef remove_sub(sub):\n    '''\n    Write a function to remove a substring from a list.\n    '''\n    return sub.lstrip(\"[\").rstrip(\"]\")\n    \ndef get_index(ip):\n    '''\n    Find the index of a ip address in a list.\n    '''\n    index = ip.index(':')\n    return index\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        result = int(ip.strip(), 16)\n    except:\n        result = ip.strip()\n    return result\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.count('.') == 3:\n        return ip\n    else:\n        return '0'+ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_ip = ip.find(\"0\")\n    if zero_ip > -1:\n        #for first case:\n        ip = ip[zero_ip+1:]\n        #for second case:\n        ip = ip[:zero_ip]\n        #for third case:\n        ip = ip[:-1]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) > 0:\n        if ip[0] == '0':\n            ip = ip[1:]\n        if ip[0] == '1':\n            ip = ip[1:]\n        \n    return ip\n    \ndef check_ip(ip_address):\n    '''\n    Return a list of valid ip addresses.\n    '''\n    ip_address = removezero_ip(ip_address)\n    if ip_address == \"\":\n        return []\n    ip_address = ip_address.split('.')\n    \n    while len(ip_address)!= 4:\n        ip_address.pop()\n        \n    if len(ip_address) == 4:\n        return ip_address\n    else:\n        print(\"invalid ip\")\n        return []\n    \ndef get_wildcard(ip_address):\n    '''\n    Return a list of all possible wildcarded ip addresses.\n    '''\n    \n    all_ips = []\n    \n    ip_list = ip_address.split('.')\n    \n    for i in ip_list:\n        if int(i) == 255 or int(i) == 0:\n            all_ips.append(i)\n            \n    return all_ips\n    \ndef get_wildcarded_address(ip_address):\n    '''\n    Return a list of all possible wildcarded ip addresses.\n    '''\n    ip_list = ip_address.split('.')\n    all_ips = []\n    for i in ip_list:\n        if int(i) == 255 or int(i) == 0:\n            all_ips.append(i)\n    return all_ips\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.replace(\".\", \"\")\n    ip = ip.replace(\"-\", \"\")\n    ip = ip.replace(\",\", \"\")\n    ip = ip.replace(\".\", \"\")\n    ip = ip.replace(\":\",\"\")\n    ip = ip.replace(\"(\",\"\")\n    ip = ip.replace(\")\",\"\")\n    ip = ip.replace(\".\",\"\")\n    return ip\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # TO DO: remove pass and write your code below it\n    result = []\n    for item in list1:\n        if (item%2)!= 0:\n            result.append(item)\n        else:\n            result.append(item-1)\n    return result\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print('Even numbers in the list are:',even)\n    print('Odd numbers in the list are:',odd)\n    return even, odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(f'The list of odd numbers is: {odd}')\n    print(f'The list of even numbers is: {even}')\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1_even = []\n    list1_odd = []\n    for i in list1:\n        if i % 2 == 0:\n            list1_even.append(i)\n        else:\n            list1_odd.append(i)\n    print(list1_even)\n    print(list1_odd)\n    return list1_even - list1_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if list is empty\n    if len(list1) == 0:\n        return \"List is empty\"\n    \n    # Find first odd number\n    odd = len(list1)//2\n    if len(list1)%2 == 0:\n        return odd\n    \n    # Find first even number\n    even = len(list1)//2\n    \n    # Check if odd number is in list\n    if list1[odd]%2 == 0:\n        return even\n    \n    # Check if even number is in list\n    if list1[even]%2 == 0:\n        return odd\n    \n    # Return error message\n    return \"List contains an odd or even number\"\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0] - list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for x in range(0,len(list1)-1):\n        if list1[x]%2 == 0:\n            even_list.append(list1[x])\n        else:\n            odd_list.append(list1[x])\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    sum = 0\n    odd = 0\n    even = 0\n    if list1 == sorted(list1):\n        return (list1[0]-list1[len(list1)-1], list1[len(list1)-1]+1)\n    else:\n        for i in range(0, len(list1)-1):\n            if list1[i] % 2 == 0:\n                even = even + 1\n            else:\n                odd = odd + 1\n        if even >= 2 and odd >= 2:\n            sum = even + odd + 1\n        else:\n            sum = even + odd\n    return (sum, sum)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if list1 == []:\n        return \"The list is empty\"\n    elif len(list1)%2==0:\n        return list1[0]+list1[len(list1)-1]\n    else:\n        return list1[0]-list1[len(list1)-1]\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert binary number to string\n    str1 = str(bin(int(str1)))\n    str2 = str(bin(int(str2)))\n    # Convert string to binary\n    str2 = '0'*(len(str2)-len(str1)) + str2\n    # Convert binary string to string\n    str1 = '0'*(len(str1)-len(str2)) + str1\n    return(int(str1)-int(str2))\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1 = \"\"\n    for i in range(len(str1)) : \n        if str1[i] == '0' : \n            s1 += '1'\n        else : \n            s1 += '0'\n    count = 0\n    \n    s2 = \"\"\n    for i in range(len(str2)) : \n        if str2[i] == '0' : \n            s2 += '1'\n        else : \n            s2 += '0'\n    \n    s1 = list(s1)\n    s2 = list(s2)\n    for i in range(len(s1)) : \n        if s1[i] == s2[i] : \n            continue\n        elif s1[i] == '0' and s2[i] == '1' : \n            s1[i] = '0'\n            s2[i] = '1'\n            count += 1\n        elif s1[i] == '1' and s2[i] == '0' : \n            s1[i] = '1'\n            s2[i] = '0'\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps = 0\n    i,j = 0,0\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            swaps+=1\n            i+=1\n            j+=1\n        else:\n            i+=1\n            j+=1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    j=0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i]:\n            count+=1\n            j+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2): \n        return \"Length must be equal\" \n    swaps = 0 \n    for i in range(len(str1)): \n        if str1[i]!= str2[i]: \n            swaps += 1 \n    return swaps \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    x=['0','1']\n    y=['0','1','0','1']\n    for i in range(len(str1)-1):\n        if str1[i]==str1[i+1]:\n            x.remove(str1[i])\n            y.remove(str1[i+1])\n    if x!=[] and y!=[]:\n        print(len(x)-1)\n    elif x!=[]:\n        print(len(y)-1)\n    else:\n        print(\"No swap required\")\n    \nstr1=input(\"enter binary number : \")\nstr2=input(\"enter binary number : \")\nmin_Swaps(str1,str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1 == str2:\n        return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1=str(int(str1,2))\n    str2=str(int(str2,2))\n    ans=0\n    for i in range(32):\n        if str1[i]==str2[i]:\n            ans+=1\n    return ans\n    "
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    dic = {'0':'1','1':'0','2':'1','3':'1','4':'1','5':'1','6':'1','7':'0','8':'0','9':'0'}\n    for i in range(len(str1)):\n        if dic[str1[i]]!= str2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(str(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return (sys.getsizeof(tuple_list[0]) +\n            sys.getsizeof(tuple_list[1]) +\n            sys.getsizeof(tuple_list[2]) +\n            sys.getsizeof(tuple_list[3]) +\n            sys.getsizeof(tuple_list[4]) +\n            sys.getsizeof(tuple_list[5]) +\n            sys.getsizeof(tuple_list[6]) +\n            sys.getsizeof(tuple_list[7]) +\n            sys.getsizeof(tuple_list[8]) +\n            sys.getsizeof(tuple_list[9]) +\n            sys.getsizeof(tuple_list[10]) +\n            sys.getsizeof(tuple_list[11]) +\n            sys.getsizeof(tuple_list[12]) +\n            sys.getsizeof(tuple_list[13]) +\n            sys.getsizeof(tuple_list[14]) +\n            sys.getsizeof(tuple_list[15]) +\n            sys.getsizeof(tuple_list[16]) +\n            sys.getsizeof(tuple_list[17]) +\n            sys.getsizeof(tuple_list[18]) +\n            sys.getsizeof(tuple_list[19]) +\n            sys.getsizeof(tuple_list[20]) +\n            sys.getsizeof(tuple_list[21]) +\n            sys.getsizeof(tuple_list[22]) +\n            sys.getsizeof(tuple_list[23]) +\n            sys.getsizeof(tuple_list[24]) +\n            sys.getsizeof(tuple_list[25]) +\n            sys.getsizeof(tuple_list[26]) +\n            sys.getsizeof(tuple_list[27]) +\n            sys.getsizeof(tuple_list[28]) +\n            sys.getsizeof(tuple_list[29]) +\n            sys.getsizeof(tuple_list[30]) +\n            sys.getsizeof(tuple_list[31]) +\n            sys.getsizeof(tuple_list[32]) +\n            sys.getsizeof(tuple_list[33]) +\n            sys.getsizeof(tuple_list[34]) +\n            sys.getsizeof(tuple_list[35]) +\n            sys.getsizeof(tuple_list[36]) +\n            sys.getsizeof(tuple_list[37]) +\n            sys.getsizeof(tuple_list[38]) +\n            sys.getsizeof(tuple_list[39]) +\n            sys.getsizeof(tuple_list[40]) +\n            sys.getsizeof(tuple_list[41]) +\n            sys.getsizeof(tuple_list[42]) +\n            sys.getsizeof(tuple_list[43]) +\n            sys.getsizeof(tuple_list[44]) +\n            sys.getsizeof(tuple_list[45]) +\n            sys.getsizeof(tuple_list[46]) +\n            sys.getsizeof(tuple_list[47]) +\n            sys.getsizeof(tuple_list[48]) +\n            sys.getsizeof(tuple_list[49]) +\n            sys.getsizeof(tuple_list[50]) +\n            sys.getsizeof(tuple_list[51]) +\n            sys.getsizeof(tuple_list[52]) +\n            sys.getsizeof(tuple_list[53]) +\n            sys.getsizeof(tuple_list[54]) +\n            sys.getsizeof(tuple_list[55]) +\n            sys.getsizeof(tuple_list[56]) +\n            sys.getsizeof(tuple_list[57]) +\n            sys.getsizeof(tuple_list[58]) +\n            sys.getsizeof(tuple_list[59]) +\n            sys.getsizeof(tuple_list[60]) +\n            sys.getsizeof(tuple_list[61]) +\n            sys.getsizeof(tuple_list[62]) +\n            sys.getsizeof(tuple_list[63]) +\n            sys.getsizeof(tuple_list[64]) +\n            sys.getsizeof(tuple_list[65]) +\n            sys.getsizeof(tuple_list[66]) +\n            sys.getsizeof(tuple_list[67]) +\n            sys.getsizeof(tuple_list[68]) +\n            sys.getsizeof(tuple_list[69]) +\n            sys.getsizeof(tuple_list[70]) +\n            sys.getsizeof(tuple_list[71]) +\n            sys.getsizeof(tuple_list[72]) +\n            sys.getsizeof(tuple_list[73]) +\n            sys.getsizeof(tuple_list[74]) +\n            sys.getsizeof(tuple_list[75]) +\n            sys.getsizeof(tuple_list[76]) +\n            sys.getsizeof(tuple_list[77]) +\n            sys.getsizeof(tuple_list[78]) +\n            sys.getsizeof(tuple_list[79]) +\n            sys.getsizeof(tuple_list[80]) +\n            sys.getsizeof(tuple_list[81]) +\n            sys.getsizeof(tuple_list[82]) +\n            sys.getsizeof(tuple_list[83]) +\n            sys.getsizeof(tuple_list[84]) +\n            sys.getsizeof(tuple_list[85]) +\n            sys.getsizeof(tuple_list[86]) +\n            sys.getsizeof(tuple_list[87]) +\n            sys.getsizeof(tuple_list[88]) +\n            sys.getsizeof(tuple_list[89]) +\n            sys.getsizeof(tuple_list[90]) +\n            sys.getsizeof(tuple_list[91]) +\n            sys.getsizeof(tuple_list[92]) +\n            sys.getsizeof(tuple_list[93]) +\n            sys.getsizeof(tuple_list[94]) +\n            sys.getsizeof(tuple_list[95]) +\n            sys.getsizeof(tuple_list[96]) +\n            sys.getsizeof(tuple_list[97]) +\n            sys.getsizeof(tuple_list[98]) +\n            sys.getsizeof(tuple_list[99]) +\n            sys.getsizeof(tuple_list[100]) +\n            sys.getsizeof(tuple_list[101]) +\n            sys.getsizeof(tuple_list[102]) +\n            sys.getsizeof(tuple_list[103]) +\n            sys.getsizeof(tuple_list[104]) +\n            sys.getsizeof(tuple_list[105]) +\n            sys.getsizeof(tuple_list[106]) +\n            sys.getsizeof(tuple_list[107]) +\n            sys.getsizeof(tuple_list[108]) +\n            sys.getsizeof(tuple_list[109]) +\n            sys.getsizeof(tuple_list[110]) +\n            sys.getsizeof(tuple_list[111]) +\n            sys.getsizeof(tuple_list[112]) +\n            sys.getsizeof(tuple_list[113]) +\n            sys.getsizeof(tuple_list[114]) +\n            sys.getsizeof(tuple_list[115]) +\n            sys.getsizeof(tuple_list[116]) +\n            sys.getsizeof(tuple_list[117]) +\n            sys.getsizeof(tuple_list[118]) +\n            sys.getsizeof(tuple_list[119]) +\n            sys.getsizeof(tuple_list[120]) +\n            sys.getsizeof(tuple_list[121]) +\n            sys.getsizeof(tuple_list[122]) +\n            sys.getsizeof(tuple_list[123]) +\n            sys.getsizeof(tuple_list[124]) +\n            sys.getsizeof"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            size = size + tuple_list[i][j].nbytes\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    '''\n    Note: Bytes have the following format:\n    \"<class_name_of_object>-<property_name>-<value>\".\n    For example, \"hello.name\" means \"Hello Name\".\n    '''\n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the size of the tuple\n    tuple_size = len(tuple_list)\n    \n    # return the tuple size\n    return tuple_size\n    \ndef tuple_position(tuple_list):\n    '''\n    Write a function to find the position of the given tuple in the tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1].find('-') + 3\n    \ndef tuple_type(tuple_list):\n    '''\n    Write a function to find the type of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_class_name(tuple_list):\n    '''\n    Write a function to determine the class of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_key(tuple_list):\n    '''\n    Write a function to find the key of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_value(tuple_list):\n    '''\n    Write a function to find the value of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_description(tuple_list):\n    '''\n    Write a function to find the description of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_length(tuple_list):\n    '''\n    Write a function to find the length of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_type_description(tuple_list):\n    '''\n    Write a function to find the type and description of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_class_tuple(tuple_list):\n    '''\n    Write a function to determine the class of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_key_tuple(tuple_list):\n    '''\n    Write a function to find the key of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_value_tuple(tuple_list):\n    '''\n    Write a function to find the value of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_description_tuple(tuple_list):\n    '''\n    Write a function to find the description of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_type_description_tuple(tuple_list):\n    '''\n    Write a function to find the type and description of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_class_tuple_description(tuple_list):\n    '''\n    Write a function to determine the class of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_key_description(tuple_list):\n    '''\n    Write a function to find the key of the given tuple.\n    '''\n    \n    # remove spaces in tuples\n    tuple_list[0] = tuple_list[0].strip()\n    \n    # split the tuple into an array\n    tuple_list = tuple_list[0].split('-')\n    # get the position of the tuple\n    return tuple_list[1][tuple_position(tuple_list)]\n    \ndef tuple_value_description(tuple_list):\n    '''\n    Write a function to find the value of the given tuple.\n    '''\n    \n    # remov"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    sz=0\n    for i in tuple_list:\n        sz+=sys.getsizeof(i)\n    return sz\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    t_size = 0\n    for i in tuple_list:\n        t_size += len(i)\n    return t_size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for item in tuple_list:\n        count = count + len(item)\n    return count\n    \ndef merge_sort(tuple_list):\n    '''\n    Write a function to sort the given list of tuples.\n    '''\n    if len(tuple_list) <= 1:\n        return tuple_list\n    mid = len(tuple_list) // 2\n    left = tuple_list[:mid]\n    right = tuple_list[mid:]\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total = 0\n    for i in tuple_list:\n        total = total + len(i)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list[0]) * 8\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size+=len(i)\n    return size\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) <= len(arr2):\n        return find_kth(arr1, arr2, k)\n    elif len(arr2) < len(arr1):\n        return find_kth(arr1, arr2, k)\n    else:\n        return arr1[k]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    # We will store the index value at the position k\n    # in the sorted array and then use it to update our kth element\n    start_idx = 0\n    end_idx = n1-1\n    \n    # Traverse from the end of the array\n    while start_idx <= end_idx:\n        # Find the mid point of the array\n        mid = (start_idx + end_idx) // 2\n        \n        # If k is greater than mid then take it\n        if arr1[mid] < arr2[k - 1]:\n            # Set the end of the array\n            end_idx = mid - 1\n        \n        # If k is lower than mid then take it\n        else:\n            start_idx = mid + 1\n            \n    # If we have run out of elements then return -1\n    return -1 if end_idx == -1 else arr2[end_idx]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1:\n        return -1\n    elif not arr2:\n        return -1\n    elif k == 1:\n        return arr1[k-1]\n    else:\n        left = arr1[k//2]\n        if arr2[k-1] > left:\n            return left\n        elif arr2[k-1] < left:\n            return kth(arr2, k-1, left)\n        else:\n            return kth(arr2, k-1, left)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1:\n        return arr2[k - 1]\n    elif not arr2:\n        return arr1[k - 1]\n    elif arr1[0] > arr2[0]:\n        return find_kth(arr1[1:], arr2, k - 1)\n    else:\n        return find_kth(arr1, arr2[1:], k - 1)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    try:\n        left = 0\n        right = len(arr1) - 1\n        while(left <= right):\n            mid = (left + right) // 2\n            if(arr1[mid] < arr2[mid]):\n                left = mid + 1\n            else:\n                right = mid - 1\n        return arr1[left]\n    except:\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < k or len(arr2) < k:\n        return -1\n    if arr1[0] > arr2[k - 1]:\n        return k - 1\n    else:\n        return k\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left_index = 0\n    right_index = len(arr1) - 1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return j if k == j else j\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    return (find_kth_recur(arr1, arr2, arr1, arr2, k-1, 0, n, k), find_kth_recur(arr1, arr2, arr1, arr2, k, 0, n, k), find_kth_recur(arr1, arr2, arr1, arr2, k, n-1, 0, n, k))\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) <= len(arr2):\n        return find_kth_from_first(arr1, arr2, k)\n    else:\n        return find_kth_from_second(arr1, arr2, k)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def check(number):\n        '''\n        Function to check whether the given number is armstrong or not.\n        '''\n        if number == 0:\n            return \"0 is not a armstrong number\"\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    i = 0\n    j = len(number) - 1\n    while i < j:\n        # If number is less than 10, return false\n        if int(number[i]) < 10:\n            return False\n        # If digit is even, increment i by 1\n        if int(number[i]) % 2 == 0:\n            i = i + 1\n        else:\n            # If digit is odd, increment i by 1\n            j = i - 1\n            while j >= 0 and int(number[j]) >= 10:\n                j = j - 1\n            if j == i:\n                return False\n            i = i - 1\n            \n    # If number is armstrong, return true\n    return True\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # init count\n    count = 0\n    # initialize string\n    str = ''\n    # for number\n    for x in str:\n        # add\n        x = x + str(number)\n        # check\n        if int(x) == number:\n            count += 1\n            # update string\n            str = str +'' + x\n    # if str is not empty\n    if str!= '':\n        # if count is odd\n        if count % 2!= 0:\n            # if number is armstrong\n            return True\n        else:\n            # if number is not armstrong\n            return False\n    else:\n        # if number is armstrong\n        return True\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    divisors = []\n    for i in range(1,number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    if len(divisors) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    convert = str(number)\n    length = len(convert)\n    sum = 0\n    for i in range(length):\n        digit = int(convert[i])\n        sum += digit**length\n        print(i)\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def check(number):\n        if number < 10:\n            return False\n        for i in str(number):\n            if int(i) > 1:\n                return False\n        return True\n    if check(number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    \n    for i in str(number):\n        count += int(i)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    count = 0\n    for i in range(len(number)):\n        if number[i] == '0':\n            count += 1\n    if count == len(number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def get_sum(num):\n        '''\n        This function is to sum all the digits of the given number.\n        '''\n        sum = 0\n        while num > 0:\n            sum = num % 10\n            num //= 10\n        return sum\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    for i in range(1, number):\n        if i == 1:\n            if number % i == 0:\n                count += 1\n        else:\n            if number % i == i:\n                count += 1\n    if count == 1:\n        print(f\"{number} is armstrong number\")\n    else:\n        print(f\"{number} is not armstrong number\")\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    \n    for i in range(1,number+1):\n        sum += i\n    avg = sum / number\n    return sum, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    num = list(map(int, str(number)))\n    sum = 0\n    for i in range(len(num)):\n        sum += num[i]\n    average = sum/len(num)\n    return average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for n in range(number):\n        sum += n\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total=0\n    for i in range(0,number):\n        total+=i\n    average=total/number\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    num=1\n    while num<=number:\n        sum=sum+num\n        num=num+1\n    avg=sum/number\n    return sum,avg\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum = sum + i\n    average = sum/number\n    print(\"sum = \",sum)\n    print(\"average = \",average)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum+=i\n    average = sum/number\n    return sum,average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = 0\n    for i in range(0, number):\n        number = int(input('Enter number '))\n        sum_n += number\n    avg = sum_n/number\n    return sum_n, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print (\"\\nThe given number is even\")\n    else:\n        print(\"\\nThe given number is not even\")\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    print(\"Is the number even? \" + str(bool(n % 2 == 0)))\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        print(\"{} is even number\".format(n))\n    else:\n        print(\"{} is not even number\".format(n))\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0) : return True\n    else : return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # if n%2==0 :\n    #     return True\n    # else:\n    #     return False\n    \n    if n%2==0 :\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False \n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_repeated_char_positions = []\n    for i in range(0, len(str1)):\n        if str1[i] == str1[i-1]:\n            first_repeated_char_positions.append(i)\n    return first_repeated_char_positions[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    print(str1)\n    print(str1.rfind('r'))\n    print(str1.find('r'))\n    return str1.find('r')\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # list of characters\n    char_list = list(str1)\n    # dictionary to keep track of frequency\n    count_dict = {}\n    # iterating through the character\n    for i in char_list:\n        count_dict[i] = char_list.count(i)\n        #print(count_dict)\n    # finding the first character with the smallest count\n    min_value = min(count_dict.values())\n    min_key = min(count_dict, key=count_dict.get)\n    #print(min_key, min_value)\n    return min_key\n    \nstr1 = input(\"Enter a string: \")\nresult = first_repeated_char(str1)\nprint(result)"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # t = 0\n    # for t in range(len(str1)):\n    #     if str1[t] == str1[t-1]:\n    #         t += 1\n    #     else:\n    #         break\n    #\n    # return t\n    return str1.find(str1[0])\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if i == str1[count]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    def is_repeat_char(s, e):\n        '''\n        Write a python function to check if a given substring s occurs in a given substring e.\n        '''\n        count = 0\n        for i in range(len(s)):\n            if s[i] == s[e]:\n                count += 1\n            else:\n                break\n        return count == len(s) - 1\n    if str1 == \"\":\n        return 0\n    elif str1[0] == str1[-1]:\n        return is_repeat_char(str1[0], str1[1:])\n    else:\n        return is_repeat_char(str1[0], str1[1:])\n    \ndef first_repeated_char_func(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    def is_repeat_char(s, e):\n        '''\n        Write a python function to check if a given substring s occurs in a given substring e.\n        '''\n        count = 0\n        for i in range(len(s)):\n            if s[i] == s[e]:\n                count += 1\n            else:\n                break\n        return count == 1\n    def is_repeat_char_new(s, e):\n        '''\n        Write a python function to check if a given substring s occurs in a given substring e.\n        '''\n        count = 0\n        for i in range(len(s)):\n            if s[i] == s[e]:\n                count += 1\n            else:\n                break\n        return count == len(s) - 1\n    if str1 == \"\":\n        return 0\n    elif str1[0] == str1[-1]:\n        return is_repeat_char(str1[0], str1[1:])\n    else:\n        return is_repeat_char(str1[0], str1[1:])\n        \ndef main():\n    str1 = input(\"Enter a string: \")\n    print(\"The first repeated char is: \", first_repeated_char(str1))\n    print(\"The first repeated char is: \", first_repeated_char_func(str1))\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if not str1:\n        return None\n    for ch in str1:\n        if str1.count(ch) > 1:\n            return ch\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code here\n    # create a for loop to traverse the string\n    # if a character in the string is repeated, return that character\n    # example: \n    # if input string is \"aaabbbccccddd\", return 'c'\n    # if input string is \"abcdabaabcd\", return 'b'\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(n)\n    '''\n    # create a variable to keep a count of the repeated characters\n    # create a variable to keep a counter of the repeated characters\n    # loop through the string\n    # if the character is a duplicate of the previous character, increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # keep a counter\n    # create a variable to keep a count of the repeated characters\n    # loop through the string\n    # if the character is a duplicate of the previous character, increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # create a variable to keep a count of the repeated characters\n    # loop through the string\n    # if the character is a duplicate of the previous character, increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize an empty dictionary\n    # count the repeated characters\n    # return the count\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize an empty list\n    # create a variable to keep a count of the repeated characters\n    # loop through the string\n    # if the character is a duplicate of the previous character, increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize a variable to keep a count of the repeated characters\n    # loop through the string\n    # if the character is a duplicate of the previous character, increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize a counter\n    # add the first character of the string\n    # increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize a counter\n    # add the first character of the string\n    # increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize a counter\n    # create a variable to keep a count of the repeated characters\n    # loop through the string\n    # if the character is a duplicate of the previous character, increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize a counter\n    # create a variable to keep a count of the repeated characters\n    # loop through the string\n    # if the character is a duplicate of the previous character, increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize an empty list\n    # create a variable to keep a count of the repeated characters\n    # loop through the string\n    # if the character is a duplicate of the previous character, increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize an empty list\n    # create a variable to keep a count of the repeated characters\n    # loop through the string\n    # if the character is a duplicate of the previous character, increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize a counter\n    # add the first character of the string\n    # increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize a counter\n    # add the first character of the string\n    # increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize a counter\n    # create a variable to keep a count of the repeated characters\n    # loop through the string\n    # if the character is a duplicate of the previous character, increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize a counter\n    # create a variable to keep a count of the repeated characters\n    # loop through the string\n    # if the character is a duplicate of the previous character, increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    # initialize a counter\n    # create a variable to keep a count of the repeated characters\n    # loop through the string\n    # if the character is a duplicate of the previous character, increment the counter\n    # return the counter\n    # example: \n    # if input string is \"aaabbbccccddd\", return 1\n    # if input string is \"abcdabaabcd\", return 2\n    # return None\n    # time complexity: O(n)\n    # space complexity: O(1)\n    '''\n    "
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == '':\n        return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Your code here\n    lst = list(str1)\n    lst.sort()\n    index = lst.index(str1[0])\n    return lst[index]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Your code here\n    if n == 0:\n        return []\n    elif n < 0:\n        return get_ludic(n-1)\n    else:\n        for i in range(1,10):\n            if i < n:\n                if n % i == 0:\n                    print(i)\n                    return get_ludic(n/i)\n                else:\n                    print(n-i,n-i*i)\n                    return get_ludic(n-i)\n        \n        print('Unknow')\n        return get_ludic(n-1)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    numbers = []\n    for i in range(0, n + 1):\n        for j in range(i + 1, n + 1):\n            lucky = n - (i + j)\n            if lucky >= 0:\n                numbers.append(n - lucky)\n    return numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [number for number in range(1, n + 1) if number % 10 == 0]\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucas = []\n    for i in range(n,n*2):\n        if i >= n:\n            break\n        if i % 2 == 0:\n            lucas.append(i)\n    return lucas\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if (i % 3 == 0):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i < 10:\n            ludic.append(i)\n        else:\n            if int(i) % 10 == 0:\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n        if i%2!= 0:\n            for j in range(i):\n                if j < i-j:\n                    ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    luc_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for num in luc_numbers:\n        if num > n:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_numbers = []\n    for i in range(1,n+1):\n        if i<=n/2 or i>=n/2 and i<=n:\n            luc_numbers.append(i)\n    return luc_numbers\n    \ndef get_probability_y_given_x(x,y):\n    '''\n    Write a function to get the probability of y=x.\n    '''\n    if x<y:\n        return 0\n    elif x==y:\n        return 1\n    else:\n        return -1\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers=[]\n    for i in range(1,n):\n        if i<=n:\n            if i<=n/2:\n                if i%3!=0:\n                    ludic_numbers.append(i)\n                    print(f\"{i} is a valid lucid number\")\n            else:\n                if i%5!=0:\n                    ludic_numbers.append(i)\n                    print(f\"{i} is a valid lucid number\")\n        else:\n            print(\"That's not a valid number!\")\n    return ludic_numbers\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.replace(\" \",\"\").split()"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    reversed = ''\n    for i in s:\n        reversed = reversed + i +''\n    reversed = reversed.rstrip().lstrip()\n    return reversed\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    res = []\n    for i in s.split():\n        res.append(i[::-1])\n    return''.join(res)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    s = words.pop()\n    words.reverse()\n    words.reverse()\n    return \" \".join(words)\n    \n    \n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split(' ')\n    #return s.split('')\n    #print(reverse_words(s))\n    \ndef reverse_phrase(s):\n    '''\n    Write a function to reverse words in a string.\n    '''\n    return s.split(' ')[::-1]\n    #print(reverse_phrase(s))\n    \ndef is_palindrome(s):\n    '''\n    Given a string, return whether it is a palindrome.\n    A palindrome is a word, which is\n    the same when it is written backwards.\n    '''\n    return s==s[::-1]\n    #return s==s[::-1]\n    #print(is_palindrome(s))\n    \ndef to_sorted(s):\n    '''\n    Given a string, return whether the string is sorted\n    in ascending order. If not, return false.\n    '''\n    #return sorted(s)\n    #return s==s[::-1]\n    #return s==s[::-1][::-1]\n    #return s==s[::-1]\n    return sorted(s)==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1][::-1]\n    \n    #print(to_sorted(s))\n    #return s==s[::-1]\n    #print(to_sorted(s))\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1][::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s==s[::-1]\n    #return s="
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split())\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    rev = \"\"\n    for word in words:\n        rev += word[::-1]\n    return rev\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= \" \":\n            result += s[i]\n        else:\n            result += s[i] + \" \"\n    return result[::-1].strip()"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join([x.capitalize() for x in s.split()])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    string = s.split()\n    return''.join(reversed(string))\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num % 2 == 0:\n        print(\"{} is not a prime number\".format(num))\n        return False\n    if num == 2:\n        print(\"{} is a prime number\".format(num))\n        return True\n    elif num > 2 and num % 2 == 0:\n        print(\"{} is not a prime number\".format(num))\n        return False\n    else:\n        for i in range(3, num, 2):\n            if num % i == 0:\n                print(\"{} is not a prime number\".format(num))\n                return False\n        print(\"{} is a prime number\".format(num))\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    # Check if the given integer is a prime number.\n    # If the input number is prime, return the input number.\n    # If it is not, check if it can divide it.\n    \n    if num == 1:\n        return num\n        \n    for i in range(2,int(num**0.5)+1):\n        if num%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime = True\n    for i in range(2, num):\n        if (num % i) == 0:\n            prime = False\n            break\n    return prime\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num%2 == 0:\n        return False\n    if num == 3:\n        return True\n    for i in range(3,int(num**0.5)+1,2):\n        if num%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    def is_prime(num):\n        # if the number is divisible by any number, it is not prime\n        if num == 1:\n            return False\n        # check the factors of the number\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        # if it is the number itself, it is not a prime number\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree * (math.pi / 180.0)\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (3.141592653589793 / 180.0)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return(radians)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef convert_points_from_tuples(points):\n    '''\n    Converts a list of tuples to a list of lists (one list for each vertex).\n    '''\n    return [list(tuple) for tuple in points]\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree > 180:\n        degree = degree - 360\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree * (math.pi / 180)\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*math.pi/180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (math.pi / 180.0)\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree *(math.pi/180)\n    return radian_degree\ndef degrees(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree *(math.pi/180)\n    return degree\ndef minutes(minutes):\n    '''\n    Write a function to convert minutes to seconds.\n    '''\n    minutes = minutes *60\n    return minutes\ndef seconds(minutes):\n    '''\n    Write a function to convert minutes to seconds.\n    '''\n    minutes = minutes *60\n    return minutes\ndef hour(hour):\n    '''\n    Write a function to convert hours to minutes.\n    '''\n    hour = hour * 3600\n    return hour\ndef minute(minute):\n    '''\n    Write a function to convert minutes to seconds.\n    '''\n    minute = minute * 60\n    return minute\ndef second(second):\n    '''\n    Write a function to convert seconds to minutes.\n    '''\n    second = second * 60\n    return second\ndef is_power_of_two(num):\n    '''\n    Write a function to determine if a number is a power of two.\n    '''\n    return num > 0 and (num & (num-1)) == 0\ndef is_power_of_two_or_zero(num):\n    '''\n    Write a function to determine if a number is a power of two or zero.\n    '''\n    return num > 0 and (num & (num-1)) == 0\ndef is_power_of_two_or_zero_or_one(num):\n    '''\n    Write a function to determine if a number is a power of two or zero or one.\n    '''\n    return num > 0 and (num & (num-1)) == 0 and (num & num) == 0\ndef is_power_of_two_or_zero_or_one_or_two(num):\n    '''\n    Write a function to determine if a number is a power of two or zero or one or two.\n    '''\n    return num > 0 and (num & (num-1)) == 0 and (num & num) == 0 and (num & (num-2)) == 0\ndef is_power_of_two_or_zero_or_one_or_two_or_three(num):\n    '''\n    Write a function to determine if a number is a power of two or zero or one or two or three.\n    '''\n    return num > 0 and (num & (num-1)) == 0 and (num & num) == 0 and (num & (num-2)) == 0 and (num & (num-3)) == 0\ndef is_power_of_two_or_zero_or_one_or_two_or_three_or_four(num):\n    '''\n    Write a function to determine if a number is a power of two or zero or one or two or three or four.\n    '''\n    return num > 0 and (num & (num-1)) == 0 and (num & num) == 0 and (num & (num-2)) == 0 and (num & (num-3)) == 0 and (num & (num-4)) == 0\ndef is_power_of_two_or_zero_or_one_or_two_or_three_or_four_or_five(num):\n    '''\n    Write a function to determine if a number is a power of two or zero or one or two or three or four or five.\n    '''\n    return num > 0 and (num & (num-1)) == 0 and (num & num) == 0 and (num & (num-2)) == 0 and (num & (num-3)) == 0 and (num & (num-4)) == 0 and (num & (num-5)) == 0\ndef is_power_of_two_or_zero_or_one_or_two_or_three_or_four_or_five_or_six(num):\n    '''\n    Write a function to determine if a number is a power of two or zero or one or two or three or four or five or six.\n    '''\n    return num > 0 and (num & (num-1)) == 0 and (num & num) == 0 and (num & (num-2)) == 0 and (num & (num-3)) == 0 and (num & (num-4)) == 0 and (num & (num-5)) == 0 and (num & (num-6)) == 0\ndef is_power_of_two_or_zero_or_one_or_two_or_three_or_four_or_five_or_six_or_seven(num):\n    '''\n    Write a function to determine if a number is a power of two or zero or one or two or three or four or five or six or seven.\n    '''\n    return num > 0 and (num & (num-1)) == 0 and (num & num) == 0 and (num & (num-2)) == 0 and (num & (num-3)) == 0 and (num & (num-4)) == 0 and (num & (num-5)) == 0 and (num & (num-6)) == 0 and (num & (num-7)) == 0\ndef is_power_of_two_or_zero_or_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight(num):\n    '''\n    Write a function to determine if a number is a power of two or zero or one or two or three or four or five or six or seven or eight.\n    '''\n    return num > 0 and (num & (num-1)) == 0 and (num & num) == 0 and (num & (num-2)) == 0 and (num & (num-3)) == 0 and (num & (num-4)) == 0 and (num & (num-5)) == 0 and (num & (num-6)) == 0 and (num & (num-7)) == 0 and (num & (num-8)) == 0 and (num & (num-9)) == 0\ndef is_power_of_two_or_zero_or_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight_or_nine(num):\n    '''\n    Write a function to determine if a number is a power of two or zero or one or two or three or four or five or six or seven or eight or nine.\n    '''\n    return num > 0 and (num & (num-1)) == 0 and (num & num) == 0 and (num & (num-2)) == 0 and (num & (num-3)) == 0 and (num & (num-4)) == 0 and (num & (num-5)) == 0 and (num & (num-6)) == 0 and (num & (num-7)) == 0 and (num & (num-8)) == 0 and (num & (num-9)) == 0 and (num & (num-10)) == 0 and (num & (num-11)) == 0\ndef is_power_of_two_or_zero_or_one_or_two_or_three_or_four_or_five_or_six_or_seven_or_eight_or_nine_or_ten(num):\n    '''\n    Write a function to determine if a number is a power of two or zero or one or two or three or four or five or six or seven or eight or nine or ten.\n    '''\n    return num > 0 and (num & (num-1)) == 0 and (num & num) == 0 and (num & (num-2)) == 0 and (num & (num-3)) == 0 and (num & (num-4)) == 0 and (num & (num-5)) == 0 and (num & (num-6)) == 0 and (num & (num-7)) == 0 and (num & (num-8)) == 0 and (num & (num-9)) == 0 and (num & (num-10)) == 0 and (num & (num-11)) == 0 and (num & (num-12)) == 0 and (num & (num-13)) == 0 and (num & (num-14)) == 0 and (num & (num-15)) == 0 and (num & (num-16)) == 0 and (num & (num-17)) == 0 and (num & (num-18)) == 0 and (num & (num-19)) == 0 and (num & (num-20)) == 0 and (num & (num-21)) == 0 and (num & "
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    index = 0\n    while 1:\n        index = regex.search(text, index)\n        if index is None:\n            break\n        else:\n            yield index, index + len(pattern), index + len(pattern) + 1\n            index += len(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    matches_length = len(matches)\n    start_index = 0\n    end_index = matches_length\n    return matches, start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    start, end = match.span()\n    return text[start:end]\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # define start and end indexes of the match\n    start = 0\n    end = len(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # the index of the first \"a\" character.\n    start_index = text.index('a')\n    # the index of the last \"a\" character.\n    end_index = len(text) - 1\n    # pattern match object.\n    match = re.search(pattern, text, re.IGNORECASE)\n    # return the substring, the start index and the end index.\n    return match.group(), start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match = regex.findall(text)\n    start = 0\n    end = len(match)\n    return match, start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.finditer(pattern, text)\n    i = 0\n    l = []\n    for match in m:\n        i += 1\n        l.append((match.span(), i))\n    return l\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = -1\n    end = -1\n    i = -1\n    j = -1\n    # convert text to lowercase and remove any unwanted characters\n    text = text.lower()\n    text = re.sub(r'\\W','', text)\n    text = re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #Example:\n    #find_literals(\"Hello world\", \"^H(ell)\") => (0, 2)\n    #find_literals(\"Hello world\", \"^H(ell)\") => (0, 4)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    reg = re.compile(pattern, re.IGNORECASE)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n * (n+1) // 2\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Note: Bell number = number of 0's\n    # Note: Use a generator expression.\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Your code here\n    if n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n_b = 1\n    n = n - 1\n    while n >= 1:\n        n_b = n_b + n\n        n = n - 1\n    return n_b\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n % 2 == 0:\n        return bell_Number(n - 1) + bell_Number(n - 2)\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 2) + 1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    nth_bell_num = (n//2) + 1\n    \n    if n == 2:\n        return 0\n    \n    elif n == 3:\n        return 1\n    \n    elif n == 4:\n        return 2\n    \n    elif n == 5:\n        return 3\n    \n    elif n == 6:\n        return 4\n    \n    elif n == 7:\n        return 5\n    \n    elif n == 8:\n        return 6\n    \n    elif n == 9:\n        return 7\n    \n    elif n == 10:\n        return 8\n    \n    elif n == 11:\n        return 9\n    \n    elif n == 12:\n        return 10\n    \n    elif n == 13:\n        return 11\n    \n    elif n == 14:\n        return 12\n    \n    elif n == 15:\n        return 13\n    \n    elif n == 16:\n        return 14\n    \n    elif n == 17:\n        return 15\n    \n    elif n == 18:\n        return 16\n    \n    elif n == 19:\n        return 17\n    \n    elif n == 20:\n        return 18\n    \n    elif n == 21:\n        return 19\n    \n    elif n == 22:\n        return 20\n    \n    elif n == 23:\n        return 21\n    \n    elif n == 24:\n        return 22\n    \n    elif n == 25:\n        return 23\n    \n    elif n == 26:\n        return 24\n    \n    elif n == 27:\n        return 25\n    \n    elif n == 28:\n        return 26\n    \n    elif n == 29:\n        return 27\n    \n    elif n == 30:\n        return 28\n    \n    elif n == 31:\n        return 29\n    \n    elif n == 32:\n        return 30\n    \n    elif n == 33:\n        return 31\n    \n    elif n == 34:\n        return 32\n    \n    elif n == 35:\n        return 33\n    \n    elif n == 36:\n        return 34\n    \n    elif n == 37:\n        return 35\n    \n    elif n == 38:\n        return 36\n    \n    elif n == 39:\n        return 37\n    \n    elif n == 40:\n        return 38\n    \n    elif n == 41:\n        return 39\n    \n    elif n == 42:\n        return 40\n    \n    elif n == 43:\n        return 41\n    \n    elif n == 44:\n        return 42\n    \n    elif n == 45:\n        return 43\n    \n    elif n == 46:\n        return 44\n    \n    elif n == 47:\n        return 45\n    \n    elif n == 48:\n        return 46\n    \n    elif n == 49:\n        return 47\n    \n    elif n == 50:\n        return 48\n    \n    elif n == 51:\n        return 49\n    \n    elif n == 52:\n        return 50\n    \n    elif n == 53:\n        return 51\n    \n    elif n == 54:\n        return 52\n    \n    elif n == 55:\n        return 53\n    \n    elif n == 56:\n        return 54\n    \n    elif n == 57:\n        return 55\n    \n    elif n == 58:\n        return 56\n    \n    elif n == 59:\n        return 57\n    \n    elif n == 60:\n        return 58\n    \n    elif n == 61:\n        return 59\n    \n    elif n == 62:\n        return 60\n    \n    elif n == 63:\n        return 61\n    \n    elif n == 64:\n        return 62\n    \n    elif n == 65:\n        return 63\n    \n    elif n == 66:\n        return 64\n    \n    elif n == 67:\n        return 65\n    \n    elif n == 68:\n        return 66\n    \n    elif n == 69:\n        return 67\n    \n    elif n == 70:\n        return 68\n    \n    elif n == 71:\n        return 69\n    \n    elif n == 72:\n        return 70\n    \n    elif n == 73:\n        return 71\n    \n    elif n == 74:\n        return 72\n    \n    elif n == 75:\n        return 73\n    \n    elif n == 76:\n        return 74\n    \n    elif n == 77:\n        return 75\n    \n    elif n == 78:\n        return 76\n    \n    elif n == 79:\n        return 77\n    \n    elif n == 80:\n        return 78\n    \n    elif n == 81:\n        return 79\n    \n    elif n == 82:\n        return 80\n    \n    elif n == 83:\n        return 81\n    \n    elif n == 84:\n        return 82\n    \n    elif n == 85:\n        return 83\n    \n    elif n == 86:\n        return 84\n    \n    elif n == 87:\n        return 85\n    \n    elif n == 88:\n        return 86\n    \n    elif n == 89:\n        return 87\n    \n    elif n == 90:\n        return 88\n    \n    elif n == 91:\n        return 89\n    \n    elif n == 92:\n        return 90\n    \n    elif n == 93:\n        return 91\n    \n    elif n == 94:\n        return 92\n    \n    elif n == 95:\n        return 93\n    \n    elif n == 96:\n        return 94\n    \n    elif n == 97:\n        return 95\n    \n    elif n == 98:\n        return 96\n    \n    elif n == 99:\n        return 97\n    \n    elif n == 100:\n        return 98\n    \n    elif n == 101:\n        return 99\n    \n    elif n == 102:\n        return 100\n    \n    elif n == 103:\n        return 101\n    \n    elif n == 104:\n        return 102\n    \n    elif n == 105:\n        return 103\n    \n    elif n == 106:\n        return 104\n    \n    elif n == 107:\n        return 105\n    \n    elif n == 108:\n        return 106\n    \n    elif n == 109:\n        return 107\n    \n    elif n == 110:\n        return 108\n    \n    elif n == 111:\n        return 109\n    \n    elif n == 112:\n        return 110\n    \n    elif n == 113:\n        return 111\n    \n    elif n == 114:\n        return 112\n    \n    elif n == 115:\n        return 113\n    \n    elif n == 116:\n        return 114\n    \n    elif n == 117:\n        return 115\n    \n    elif n == 118:\n        return 116\n    \n    elif n == 119:\n        return 117\n    \n    elif n == 120:\n        return 118\n    \n    elif n == 121:\n        return 119\n    \n    elif n == 122:\n        return 120\n    \n    elif n == 123:\n        return 121\n    \n    elif n == 124:\n        return 122\n    \n    elif n == 125:\n        return 123\n    \n    elif n == 126:\n        return 124\n    \n    elif n == 127:\n        return 125\n    \n    elif n == 128:\n        return 126\n    \n    elif n == 129:\n        return 127\n    \n    elif n == 130:\n        return 128\n    \n    elif n == 131:\n        return 129\n    \n    elif n == 132:\n        return 130\n    \n    elif n == 133:\n        return 131\n    \n    elif n == 134:\n        return 132\n    \n    elif n == 135:\n        return 133\n    \n    elif n == 136:\n        return 134\n    \n    elif n == 137:\n        return 135\n    \n    elif n == 138:\n        return 136\n    \n    elif n == 139:\n        return 137\n    \n    elif n == 140:\n        return 138\n    \n    elif n == 141:\n        return 139\n    \n    elif n == 142:\n        return 140\n    \n    elif n == 143:\n        return 141\n    \n    elif n == 144:\n        return 14"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = []\n    for i in range(n+1):\n        a.append(1)\n    for i in range(1, n):\n        a[i] = a[i-1] + a[i-1]\n    return a[n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return (2 * n + 1) % (10**9 + 7)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return n\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1)==1:\n        return [list1[0]]\n    elif L==1:\n        return remove_kth_element(list1[1:], L-1)\n    else:\n        return remove_kth_element(list1[1:], L-1) + [list1[0]]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    elif L[-1] == L[0]:\n        del L[-1]\n        return L + remove_kth_element(list1, L)\n    elif L[0] == L[-1]:\n        del L[0]\n        return L + remove_kth_element(list1, L)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L==0:\n        return []\n    else:\n        return list1[:L]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #removing the element with the k'th index\n    newlist = []\n    for x in range(len(list1)):\n        for y in range(L):\n            if x==y:\n                newlist.append(list1[x])\n                break\n    return newlist\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    res = []\n    for i in range(0, len(list1)):\n        res.append(list1[i])\n    for i in range(0, len(list1)):\n        if i >= L:\n            del res[i]\n    return res\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if count == L:\n            break\n        count += 1\n        list1.remove(list1[i])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    elif L == []:\n        return []\n    elif L[0] == L[-1]:\n        return list1\n    else:\n        return [l[0] for l in list1 if l[-1]!= L[-1]] + remove_kth_element(list1, L[1:])\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(L):\n        list2.append(list1[i])\n    del list2[L]\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if L <= i:\n            break\n        else:\n            result.append(list1[i])\n    return result[:L-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = test_list[0][0]\n    for x in test_list[1:]:\n        if max_col < x[0]:\n            max_col = x[0]\n    return max_col\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Time complexity = O(n^2)\n    # Space Complexity = O(n)\n    \n    # Create the max of then'th column and the rest of the matrix in the array.\n    # You should return the result in a new array with the same shape as the input.\n    #\n    # An input matrix has an outer loop and a inner loop. That's why it's easy.\n    # The outer loop iterates over all the rows in the matrix, but it is fast.\n    # Therefore, if you find a situation where a number is not in the inner loop, then the outer loop\n    # has to iterate through the rest of the rows in the matrix.\n    \n    # Hint: You should use the sorted function.\n    \n    # Create an empty result array.\n    # The new array should be length N + 1, and it's an empty array.\n    result = []\n    #\n    for row in test_list:\n        #\n        # You should find the position of the first element.\n        #\n        # Your result should be the maximum value of the first column.\n        #\n        # Hint: You can use a for loop.\n        \n        # Add the element to the result.\n        result.append(row[0])\n        \n        # Find the position of the last element.\n        #\n        # Your result should be the maximum value of the rest of the columns.\n        #\n        # Hint: You can use a for loop.\n        \n        # Add the element to the result.\n        for col in range(len(row) - 1, -1, -1):\n            #\n            # You should find the position of the last element.\n            #\n            # Your result should be the maximum value of the rest of the columns.\n            #\n            # Hint: You can use a for loop.\n            \n            # Add the element to the result.\n            result[col] = max(result[col], row[col])\n            \n        #\n        # Add the element to the result.\n        #\n        # Your result should be the maximum value of the rest of the columns.\n        #\n        # Hint: You can use a for loop.\n        \n        # Add the element to the result.\n        result.reverse()\n    \n    #\n    # Return the result.\n    #\n    # The return value should be a list with the maximum value of all the columns.\n    #\n    # Hint: You can use sorted function to return the list.\n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num=0\n    for x in test_list:\n        for y in x:\n            if y>max_num:\n                max_num=y\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Your code here\n    # your implementation here\n    return test_list[0][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key=len)\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # get the max ofn'th column\n    max_val = max(test_list, key=lambda x: x[N])\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # check if it is a matrix \n    if len(test_list)!= N:\n        print(\"Matrix is not square.\")\n        return -1\n    \n    # create a variable to store the result \n    result = 0\n    \n    # iterate through each row and find the max element \n    for row in test_list:\n        row_max = max(row)\n        result = row_max if row_max > result else result\n    \n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # Create an empty list\n    n = len(test_list)\n    res = []\n    \n    for i in range(N):\n        # Reverse the list\n        res.append(test_list[i][N-1-i])\n    \n    # return max\n    return max(res)\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return test_list[0][N]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    print(test_list)\n    print(test_list[N])\n    return test_list[N][N]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst.sort(key=lambda x: (x[0]))\n    lst.sort(key=lambda x: (x[1]))\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst.sort(key = lambda x : x[0]) # takes the sorted list as an argument\n    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i][0]!= lst[j][0]:\n                break\n            res.append(lst[i])\n    return res\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [lst[0][0], lst[0][1]], [lst[1][0], lst[1][1]] ]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) <= 1:\n        return lst\n    else:\n        middle = len(lst)//2\n        left = lst[:middle]\n        right = lst[middle:]\n        return merge(left) + [right] + merge(right)\n        \nl = []\nn = int(input())\nfor _ in range(n):\n    l.append(list(map(int, input().split())))\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    s1 = []\n    s2 = []\n    for x in lst:\n        for y in x:\n            s1.append(y)\n    \n    for x in range(len(s1)):\n        for y in range(x, len(s1)):\n            s2.append(s1[x])\n            s2.append(s1[y])\n    return s2\n    "
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final_list = []\n    final_list.append(lst[0][0])\n    final_list.append(lst[1][0])\n    lst.pop(0)\n    lst.pop(0)\n    for i in lst:\n        final_list.append(i[0])\n        final_list.append(i[1])\n    return(final_list)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = []\n    for i in range(len(lst)):\n        lst.append([])\n        for j in range(len(lst[i])):\n            lst[i].append(lst[i][j])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[el[0], el[1]] for el in lst]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = []\n    while lst:\n        elements = lst.pop(0)\n        if len(elements) == 2:\n            lst.append(elements)\n        else:\n            lst.insert(0,elements)\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    return [lst[0],lst[1]]\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    summ = 0\n    for i in range(len(test_list)):\n        summ = summ + test_list[i]\n    return summ\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum = cum_sum + i\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Your code here\n    # Make sure the input list is sorted\n    \n    return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = [0]\n    for num in test_list:\n        cum_sum.append(cum_sum[-1] + num)\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for value in test_list:\n        cummulative_sum += value\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return test_list\n    else:\n        curr_sum = 0\n        for i in test_list:\n            curr_sum += i\n        return cummulative_sum([i for i in test_list if i!= 0]) + curr_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for val in test_list:\n        cum_sum = cum_sum + val\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        cum_sum = cum_sum + tup[1]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n    return cum_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    val = []\n    total = 0\n    for x in nums:\n        total += x\n        val.append(total/len(nums))\n    return val\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # your code goes here\n    \n    return [avg for avg,nums in zip(*nums)"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: sum(x) / len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # get the sum of all the numbers in the tuple\n    sum = 0\n    # get the length of the tuple\n    l = len(nums)\n    # iterate through the numbers in the tuple\n    for i in range(l):\n        # check if the number is a number\n        if nums[i] % 1 == 0:\n            # add the number to the sum\n            sum += nums[i]\n    # return the average\n    return [round(sum / l, 2),l]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if type(nums) == tuple:\n        return [sum(nums)/len(nums)]\n    else:\n        return nums\n    "
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    t = 0\n    for num in nums:\n        t += num\n    return [t/len(nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    numbers = []\n    for number in nums:\n        numbers.append(number)\n    return [sum(number) / len(numbers) for number in zip(*numbers)]"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sums = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            sums.append(nums[i][j])\n    return sums\n    \ndef min_max(nums):\n    '''\n    Write a function which returns the minimum value in a list.\n    '''\n    min = nums[0]\n    max = nums[0]\n    for i in range(len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n        if nums[i] > max:\n            max = nums[i]\n    return max,min\n    \ndef find_max_element(nums):\n    '''\n    Return the max value in a list.\n    '''\n    max = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n    return max\n    \ndef find_min_element(nums):\n    '''\n    Return the min value in a list.\n    '''\n    min = nums[0]\n    for i in range(len(nums)):\n        if nums[i] < min:\n            min = nums[i]\n    return min\n    \ndef add(nums, val):\n    '''\n    Add val to the end of the list.\n    '''\n    n = len(nums)\n    temp = nums\n    for i in range(n-1, -1, -1):\n        temp[i] = nums[i] + val\n    nums = temp\n    \ndef sub(nums, val):\n    '''\n    Subtract val from the end of the list.\n    '''\n    n = len(nums)\n    temp = nums\n    for i in range(n-1, -1, -1):\n        temp[i] = nums[i] - val\n    nums = temp\n    \ndef multiply(nums, val):\n    '''\n    Multiply the value in the end of the list by the given value.\n    '''\n    n = len(nums)\n    temp = nums\n    for i in range(n-1, -1, -1):\n        temp[i] = nums[i] * val\n    nums = temp\n    \ndef divide(nums, val):\n    '''\n    Divide the value in the end of the list by the given value.\n    '''\n    n = len(nums)\n    temp = nums\n    for i in range(n-1, -1, -1):\n        temp[i] = nums[i] / val\n    nums = temp\n    \ndef in_list(nums, val):\n    '''\n    Returns true if the value is in the list, false otherwise.\n    '''\n    n = len(nums)\n    temp = nums\n    for i in range(n-1, -1, -1):\n        if val == nums[i]:\n            return True\n        else:\n            return False\n    \ndef reverse_list(nums):\n    '''\n    Reverse the given list.\n    '''\n    n = len(nums)\n    temp = nums\n    for i in range(n-1, -1, -1):\n        temp[i], temp[i-1] = temp[i-1], temp[i]\n    nums = temp\n    \ndef sort_list(nums):\n    '''\n    Sort the given list in ascending order.\n    '''\n    n = len(nums)\n    temp = nums\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if temp[j] > temp[j+1]:\n                temp[j], temp[j+1] = temp[j+1], temp[j]\n    nums = temp\n    \ndef merge(nums1, nums2):\n    '''\n    Merge two sorted lists.\n    '''\n    n = len(nums1) + len(nums2)\n    temp = nums1 + nums2\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if temp[i] < temp[j]:\n                    temp[i], temp[j] = temp[j], temp[i]\n    nums1 = temp[:n]\n    nums2 = temp[n:]\n    return nums1 + nums2\n    \ndef reverse_iterative(nums):\n    '''\n    Reverse the elements in a list in place.\n    '''\n    n = len(nums)\n    for i in range(n//2):\n        temp = nums[i]\n        nums[i] = nums[n-i-1]\n        nums[n-i-1] = temp\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(num) / len(num) for num in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_values = [x for tup in nums for x in tup]\n    \n    return sum(tuple_values) / len(nums)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_tup1 = tuple(test_tup1)\n    mod_tup2 = tuple(test_tup2)\n    return mod_tup1, mod_tup2\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo = 0\n    \n    for index in range(len(test_tup1)):\n        modulo = modulo + test_tup1[index]\n        \n    modulo = modulo % test_tup2[0]\n    return modulo\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #initialize result\n    result = ()\n    #tuple of length 1\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError('tuple of length 1 expected')\n    #loop through each element\n    for i in range(len(test_tup1)):\n        #check if tuple contains only single element\n        if test_tup1[i] not in test_tup2:\n            raise TypeError('tuple of length 1 expected')\n        #check if element is not integer\n        if not isinstance(test_tup1[i], int):\n            raise TypeError('tuple of element type expected')\n        #check if element is not int multiple of base\n        if test_tup1[i] % test_tup2[i]!= 0:\n            raise TypeError('tuple of element should be a multiple of base')\n        #store result\n        result += test_tup1[i]\n    #check if result is tuple\n    if isinstance(result, tuple):\n        raise TypeError('unexpected tuple type')\n    #check if result is an int\n    if not isinstance(result, int):\n        raise TypeError('tuple of element type expected')\n    return result\n    \ndef dict_subst(dict, dic):\n    '''\n    Write a function which takes a dictionary and a dictionary as the input, and if\n    a key exists in a dictionary return its value, otherwise return None.\n    '''\n    #if dictionary is empty\n    if dict == {}:\n        return None\n    #get the key from dictionary\n    key = next(iter(dict.keys()))\n    #if key not in dic\n    if key not in dic:\n        return None\n    #get value from dictionary\n    return dic[key]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #Your code goes here\n    def modulo(tup1, tup2):\n        '''\n        Write a function which takes two tuples of the same length and performs the element wise modulo.\n        '''\n        #Your code goes here\n        modulo_tup = []\n        for i in range(len(tup1)):\n            if tup1[i] % tup2[i] == 0:\n                modulo_tup.append(tup1[i])\n            else:\n                modulo_tup.append(tup2[i])\n        return modulo_tup\n    modulo_tup = modulo(test_tup1, test_tup2)\n    return modulo_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #Write your code here\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_tup = [(x[i] % y[i] for i in range(len(x))) for y in test_tup2]\n    return mod_tup\n    \n    \ntest_tup1 = (1,2,3)\ntest_tup2 = (4,5,6)\nprint(tuple_modulo(test_tup1, test_tup2)"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = [x for x in test_tup1 if x in test_tup2]\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    res = list(zip(*test_tup1))\n    mod = list(zip(*test_tup2))\n    return(res, mod)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    def tuple_modulo_v1(tup1,tup2):\n        mod=0\n        for i in range(len(tup1)):\n            if tup1[i]%tup2[i]!=0:\n                mod=mod+tup1[i]%tup2[i]\n        return mod\n    return tuple_modulo_v1(tup1,tup2)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # We'll use a simple set to store the points we need to check\n    # each time we want to check whether to add one jump (or not)\n    # we'll always check the point which is greater than or equal to the point we are at\n    # if we are at a point of the form (d, 0) where the point is greater than the point we are at\n    # we'll check for the number of jumps to reach this point and if there is no jump then add one jump\n    # if there is a jump then we need to add the point to our set of points (we need to see which point has to be added to the set)\n    # if we have a jump then we will increment the count\n    # we will check whether the point is in our set or not\n    # if there is a jump then we will return the jump count\n    # the point will not be added to the set if the point is in our set\n    # if there is a jump then we will return the point to the set which is greater than the point we are at\n    # if there is a jump then we will return the set of points which has to be added to the set which is greater than the point we are at\n    # if there is a jump then we will return the point to the set which is greater than the point we are at\n    # if there is no jump then we will return the point to the set which is greater than the point we are at\n    # if there is a jump then we will return the point to the set which is greater than the point we are at\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    path = []\n    x, y = steps[0], steps[1]\n    while x!= d:\n        if x == y:\n            jumps += 1\n            jumps += 1\n            path.append(x)\n            path.append(y)\n            x, y = steps[0], steps[1]\n        else:\n            x, y = steps[1], steps[1]\n            jumps += 1\n            path.append(x)\n            path.append(y)\n    return jumps, path\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # IMPORTANT: You will not be able to use the function provided by the script. \n    # You will only be allowed to use the functions provided by this file.\n    \n    # Define the function in the file.\n    def A_Star(steps, d):\n        '''\n        Write your code here to implement A_Star(steps, d)\n        '''\n        # Your code here\n        \n        \n    # Call A_Star(steps, d)\n    A_Star(steps, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    n = len(steps)\n    if n == 0:\n        return 0\n    \n    minJumps = 0\n    jumps = [0 for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if steps[i][j] > 0 and i < n-1 and steps[i+1][j] > 0:\n                jumps[i] += 1\n                jumps[i+1] += 1\n            if steps[i][j] > 0 and j < n-1 and steps[i][j+1] > 0:\n                jumps[i] += 1\n                jumps[i] += 1\n            if steps[i][j] > 0 and i < n-1 and steps[i+1][j+1] > 0:\n                jumps[i] += 1\n                jumps[i+1] += 1\n            if steps[i][j] > 0 and j < n-1 and steps[i+1][j+1] > 0:\n                jumps[i] += 1\n                jumps[i] += 1\n            if steps[i][j] > 0 and i < n-1 and steps[i+1][j] > 0 and steps[i+1][j+1] > 0:\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i+1] += 1\n                jumps[i+1] += 1\n                jumps[i+1] += 1\n            if steps[i][j] > 0 and i < n-1 and steps[i+1][j] > 0 and steps[i+1][j+1] > 0:\n                jumps[i] += 1\n                jumps[i+1] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n            if steps[i][j] > 0 and i < n-1 and steps[i+1][j] > 0 and steps[i+1][j+1] > 0:\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i+1] += 1\n                jumps[i+1] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n                jumps[i] += 1\n    for i in range(n):\n        minJumps += jumps[i]\n    return minJumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    curr = 0\n    if steps == d:\n        curr = 0\n        count += 1\n    else:\n        curr = steps\n        steps += 1\n    return curr, count\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return 1\n    \ndef min_Jumps_2d(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return 1\n    \ndef check_number_of_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return 1\n    \ndef check_number_of_Jumps_2d(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return 1\n    \ndef local_minimum_jumps(steps, d): \n    '''\n    Write a function to find the minimum number of jumps in a 2d plane to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef local_minimum_jumps_2d(steps, d): \n    '''\n    Write a function to find the minimum number of jumps in a 2d plane to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef check_minimum_jumps(steps, d): \n    '''\n    Write a function to check for the minimum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef check_minimum_jumps_2d(steps, d): \n    '''\n    Write a function to check for the minimum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef local_minimum_jumps_to_reach(steps, d): \n    '''\n    Write a function to find the minimum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef local_minimum_jumps_to_reach_2d(steps, d): \n    '''\n    Write a function to find the minimum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef check_minimum_jumps_to_reach(steps, d): \n    '''\n    Write a function to check for the minimum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef check_minimum_jumps_to_reach_2d(steps, d): \n    '''\n    Write a function to check for the minimum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_minimum_jumps(steps, d): \n    '''\n    Write a function to find the minimum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_minimum_jumps_2d(steps, d): \n    '''\n    Write a function to find the minimum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_minimum_jumps_to_reach(steps, d): \n    '''\n    Write a function to find the minimum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_minimum_jumps_to_reach_2d(steps, d): \n    '''\n    Write a function to find the minimum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_maximum_jumps(steps, d): \n    '''\n    Write a function to find the maximum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_maximum_jumps_2d(steps, d): \n    '''\n    Write a function to find the maximum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_maximum_jumps_to_reach(steps, d): \n    '''\n    Write a function to find the maximum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_maximum_jumps_to_reach_2d(steps, d): \n    '''\n    Write a function to find the maximum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_first_minimum_jumps(steps, d): \n    '''\n    Write a function to find the minimum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_first_minimum_jumps_2d(steps, d): \n    '''\n    Write a function to find the minimum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_first_minimum_jumps_to_reach(steps, d): \n    '''\n    Write a function to find the minimum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_first_minimum_jumps_to_reach_2d(steps, d): \n    '''\n    Write a function to find the minimum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_second_minimum_jumps(steps, d): \n    '''\n    Write a function to find the minimum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_second_minimum_jumps_2d(steps, d): \n    '''\n    Write a function to find the minimum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_second_minimum_jumps_to_reach(steps, d): \n    '''\n    Write a function to find the minimum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_second_minimum_jumps_to_reach_2d(steps, d): \n    '''\n    Write a function to find the minimum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_third_minimum_jumps(steps, d): \n    '''\n    Write a function to find the minimum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_third_minimum_jumps_2d(steps, d): \n    '''\n    Write a function to find the minimum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_third_minimum_jumps_to_reach(steps, d): \n    '''\n    Write a function to find the minimum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_third_minimum_jumps_to_reach_2d(steps, d): \n    '''\n    Write a function to find the minimum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_fourth_minimum_jumps(steps, d): \n    '''\n    Write a function to find the minimum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_fourth_minimum_jumps_2d(steps, d): \n    '''\n    Write a function to find the minimum number of jumps required of given length to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_fourth_minimum_jumps_to_reach(steps, d): \n    '''\n    Write a function to find the minimum number of jumps to reach a point of form (d, 0).\n    '''\n    return 1\n    \ndef modular_fourt"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps_dict = {}\n    for i in range(steps):\n        d_i = (d, i)\n        if d_i not in steps_dict:\n            steps_dict[d_i] = 0\n        steps_dict[d_i] += 1\n    return steps_dict\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def check(steps, d):\n        if d[0]==0 or d[1]==0:\n            return 0\n        # Go through every row in a 2d plane to see if it has a value of 1 or 0\n        for i in range(steps, len(d)):\n            if d[i]==1:\n                # Check if the value of the first row to the left is 1\n                # If it is 1, keep it going up, otherwise go back to the top. \n                if d[i-1]==0:\n                    d[i-1]=1\n                else:\n                    d[i]=0\n            if d[i]==0:\n                return i\n            elif d[i]==1:\n                d[i]=0\n                return 0\n        # Check if the value of the first row to the right is 1\n        for i in range(steps-1, -1, -1):\n            if d[i]==0:\n                d[i]=1\n            else:\n                d[i]=0\n    # Get the length of the 2d plane\n    N = len(d)\n    # Set an initial value to be 0\n    # Need to check all possible jumps (i.e. all jump lengths)\n    # And then find a value of 0 that will be the minimum number of jumps needed\n    jumps = 0\n    # Go through every row and column in a 2d plane\n    for i in range(N):\n        for j in range(N):\n            # If the corresponding value of the row and column is 1\n            # Then check if a jump length can be made in that row and column\n            # If so, then add 1 jump length to the value of the row\n            # If not, then skip it\n            if d[i][j]==1:\n                jumps+=1\n            elif d[i][j]==0:\n                continue\n            else:\n                d[i][j]=0\n                if jumps<=min_Jumps(steps, d):\n                    jumps=min_Jumps(steps, d)\n    # Return the minimum number of jumps needed\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for i in range(steps):\n        if abs(d[0]-steps[i]) <= d[1] and d[0]!= 0 and abs(d[1]-steps[i]) <= d[0]:\n            jumps += 1\n    if jumps >= d[1]*(d[0]//steps[0]):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n            "
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if(steps == 0): \n        return 0\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # loop through each list\n    for i in range(len(nums1)):\n        # add the element at the end of the list\n        nums1[i] += nums2[i]\n    # find the average\n    return nums1/len(nums1)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num for num in nums1 if num in nums2]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n    s=[]\n    for i in range(0,len(nums1)):\n        if nums1[i] % 2 == 0:\n            s.append(nums1[i])\n        else:\n            s.append(nums2[i])\n    return s\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    sum = 0\n    for x in nums1:\n        sum += x\n    for y in nums2:\n        sum -= y\n    return sum/len(nums1)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    def convert_list_to_int(nums):\n        '''\n        Convert a list to integer using map().\n        '''\n        return list(map(int, nums))\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #print(\"nums1: \",nums1)\n    #print(\"nums2: \",nums2)\n    #print(\"diff: \",list(set(nums1).difference(set(nums2))))\n    #print(\"len(diff): \",len(diff))\n    \n    count = 0\n    l = list(set(nums1).difference(set(nums2)))\n    #print(\"l: \",l)\n    #print(\"len(l): \",len(l))\n    for i in l:\n        if i in nums1:\n            count = count + 1\n    #print(\"count: \",count)\n    \n    if count == 0:\n        return None\n    return l\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    temp=[]\n    for i in range(len(nums1)):\n        temp.append(nums1[i])\n    for i in range(len(nums2)):\n        temp.append(nums2[i])\n    return temp\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x / y for x, y in zip(nums1, nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)>len(nums2):\n        nums1.sort(reverse=True)\n    else:\n        nums2.sort(reverse=True)\n        \n    for index,num1 in enumerate(nums1):\n        nums1[index] = num1/nums2[index]\n    return nums1\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    numbers = []\n    \n    for i in test_str:\n        if i.isdigit():\n            numbers.append(i)\n    \n    for i in range(len(numbers)):\n        numbers[i] = str(numbers[i])\n    \n    numbers = list(map(int, numbers))\n    \n    numbers.sort()\n    \n    print(numbers)\n    \n    for i in range(len(numbers)):\n        test_str = test_str[:i] + str(numbers[i]) + test_str[i+1:]\n    \n    print(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return_string = \"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    while(len(num_list)!= 0):\n        return_string += num_list.pop()\n    return return_string\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #create the empty string\n    my_str = ''\n    #for loop to loop over the string\n    for i in range(len(test_str)):\n        #add all the numbers to the string\n        my_str += test_str[i]\n        #print the string\n        print(my_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    def move(test_str):\n        new_str = ''\n        for i in range(len(test_str)):\n            if test_str[i] == '0':\n                new_str += '1'\n            else:\n                new_str += test_str[i]\n        return new_str\n    test_str = test_str.lower()\n    return move(test_str)\n    \ndef move_str(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.lower()\n    return test_str[::-1]\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    temp = []\n    for num in test_str:\n        if num.isnumeric():\n            temp.append(num)\n    if len(temp) == 0:\n        return test_str\n    else:\n        for index in range(0, len(temp)):\n            if index == 0:\n                if temp[index] == '-':\n                    temp[index] = '0'\n                else:\n                    temp[index] = '-'\n            elif index == len(temp) - 1:\n                if temp[index] == '-':\n                    temp[index] = '0'\n                else:\n                    temp[index] = '-'\n            else:\n                if temp[index] == '-':\n                    temp[index] = '0'\n                else:\n                    temp[index] = '-'\n        if temp[0] == '-':\n            temp[0] = '0'\n        else:\n            temp[0] = '-'\n        return ''.join(temp)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    try:\n        if test_str.startswith((\"+\", \"-\")):\n            return \"error\"\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    while i < len(test_str):\n        if test_str[i] == ')':\n            break\n        i += 1\n    return test_str[:i] + ')' + test_str[i+1:]\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num = test_str.replace('0', '1').replace('1', '0').replace('1', '1').replace('2', '2').replace('2', '3').replace('3', '2')\n    num = num.split()\n    for i in num:\n        num = num.insert(len(num), '1')\n    return num\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    m_str = \"\"\n    for char in test_str:\n        if char.isnumeric():\n            m_str += char\n        else:\n            if char == '.':\n                m_str += \"-\"\n            else:\n                m_str += char\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    temp_str = ''\n    for i in range(0,len(test_str)):\n        if i%2 == 1:\n            temp_str += test_str[i]\n    return temp_str\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    size = 0\n    \n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i!= j and a[i] % a[j] == 0:\n                size += 1\n                break\n    return size\n    \n    \ndef test_largest_subset():\n    assert largest_subset([10, 5, 6]) == 6\n    assert largest_subset([10, 5, 6, 7]) == 7\n    assert largest_subset([6, 6, 5]) == 6\n    assert largest_subset([5, 5, 5, 5, 5, 5, 5]) == 5\n    assert largest_subset([2, 10, 3]) == 4\n    assert largest_subset([2, 10, 3, 3, 3]) == 3\n    assert largest_subset([5, 2, 4, 2, 6, 1, 7, 2, 3, 1, 6, 3, 2, 4, 1, 5, 5, 7, 8, 6, 2, 6, 2]) == 4\n    assert largest_subset([0]) == 0\n    assert largest_subset([1, 2, 3, 4, 5]) == 5\n    assert largest_subset([2, 2, 2]) == 2\n    assert largest_subset([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n    assert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 16\n    assert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]) == 49\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = sum(a)\n    size = 0\n    for i in range(s):\n        if s % a[i] == 0:\n            size += 1\n    return size\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_len = -1\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if len(set(a[i:j + 1])) == 1:\n                max_len = max(max_len, i + j - len(a[i:j + 1]))\n                break\n    return max_len\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    m = len(a)\n    i = 0\n    while i < m:\n        for j in range(i, m):\n            if a[j] % a[i] == 0:\n                break\n        else:\n            i += 1\n    return i\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = [a[i:j] for i in range(len(a)) for j in range(i, len(a)) if all(n%a[i] == 0 for n in a[i:j])]\n    return max(len(subsets), len(set(subsets)))\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    l = len(a)\n    def l_max(nums,l,s):\n        for i in range(s,l):\n            if nums[i] % nums[l] == 0:\n                return i+1\n        return i+1\n        \n    \n    s = 0\n    n = 0\n    max_len = 0\n    for i in range(l):\n        s = s + 1\n        max_len = max(max_len,l_max(a,i,s))\n        n = max(n,l_max(a,i,s))\n    \n    return max_len,n\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_len = 0\n    subset_count = 0\n    # We need to keep a count of the number of elements that are divisible by every element\n    # we need to also keep track of the max length we have seen so far\n    for i in a:\n        if len(set(a)) % i == 0:\n            subset_count += 1\n            # We add the length of the current subset to the max length if it's not already taken\n            if subset_count > max_len:\n                max_len = subset_count\n        elif len(set(a)) % i == 0:\n            subset_count = 0\n    return max_len\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset = []\n    l = len(a)\n    for i in range(l):\n        for j in range(i,l):\n            if a[i] % a[j] == 0:\n                if len(max_subset) < len(a[i:j+1]):\n                    max_subset = a[i:j+1]\n                break\n    return len(max_subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    l = []\n    i = 0\n    while i < len(a):\n        for j in range(i, len(a)):\n            if a[i] % a[j] == 0 and a[i] not in l:\n                l.append(a[i])\n        i+=1\n    print(l)\n    return max(l)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_subset(a):\n        if len(a) <= 1:\n            return len(a)\n        if len(a) == 2:\n            if a[0] % a[1] == 0 or a[0] % a[1] == 1:\n                return len(a)\n            else:\n                return 0\n        \n        for i in range(len(a)):\n            j = i\n            while a[i] % a[j] == 0:\n                j += 1\n            if j - i > 1:\n                return len(a) - largest_subset(a[:i] + a[j:])\n        \n        return len(a) - 1\n    \n    return largest_subset(a)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    #if lists are empty\n    if len(arr1) == 0 or len(arr2) == 0:\n        #return -1\n        return -1\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return arr1[0]\n    else:\n        return (arr1[n//2] + arr2[n//2]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    # print(arr1)\n    # print(arr2)\n    len1 = len(arr1)\n    len2 = len(arr2)\n    # print(len1, len2)\n    if len1 > len2:\n        return get_median(arr1, arr2, len2)\n    else:\n        return get_median(arr1, arr2, len1)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    #import numpy as np\n    #return np.mean([np.median(arr1),np.median(arr2)])\n    if(len(arr1)==len(arr2)):\n        return np.median(arr1,axis=0)\n    elif(len(arr1)<len(arr2)):\n        return get_median(arr1,arr2,len(arr1))\n    else:\n        return get_median(arr1,arr2,len(arr2))\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return arr1[0]\n    \n    if n % 2 == 0:\n        return (arr1[(n-1)/2] + arr2[(n-1)/2]) / 2\n    else:\n        return arr1[n/2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return (arr1 + arr2) / 2 if n % 2 == 1 else (arr1 + arr2) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0 or n == 1:\n        return arr1[n//2]\n    else:\n        left = get_median(arr1, arr2, n//2)\n        right = get_median(arr1, arr2, n-n//2)\n        return (left + right) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the first and last element\n    first = arr1[0] if len(arr1) == 1 else max(arr1)\n    last = arr1[-1] if len(arr1) == 1 else min(arr1)\n    arr1_size = len(arr1)\n    arr2_size = len(arr2)\n    # check if array is empty\n    if arr2_size == 0:\n        return\n    # find first and last element\n    mid = (arr2_size + 1) // 2\n    if first < last:\n        # find the middle element\n        mid_element = arr2[mid]\n        # if first element is greater then the mid element\n        if mid_element > first:\n            # insert first element and the mid element\n            arr1.insert(0, first)\n            arr1.insert(mid, mid_element)\n        # if mid element is less then the last element\n        elif mid_element < last:\n            # insert last element and the mid element\n            arr1.append(last)\n            arr1.insert(mid + 1, mid_element)\n    # if the array is sorted\n    else:\n        # insert last element and the mid element\n        arr1.append(last)\n        arr1.insert(0, first)\n    # find the size of both arrays\n    if arr1_size == len(arr1):\n        return arr1[mid]\n    elif arr1_size == len(arr2):\n        return arr2[mid]\n    else:\n        return arr1[mid]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        first = arr1[(n - 1) // 2]\n        second = arr2[(n - 1) // 2]\n    else:\n        first = arr2[(n - 1) // 2]\n        second = arr1[(n - 1) // 2]\n    if len(arr1) <= 1:\n        return second\n    if len(arr2) <= 1:\n        return first\n    if arr1[0] < arr2[0]:\n        return arr1[0]\n    else:\n        return arr2[0]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==1:\n        return nums\n    else:\n        return (n*nth_nums(nums,n-1))\n        \n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #calculate the power of each number, this is n-th power\n    power = 1\n    for i in nums:\n        power *= i\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n**i for i in range(n)]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums = list(nums)\n    nums[0] = 1\n    for i in range(1,len(nums)):\n        nums[i] = nums[i] ** i\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    answer = []\n    \n    # convert nums to list\n    for i in nums:\n        answer.append(i**n)\n    \n    return answer\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    num_pow = []\n    for i in range(len(nums)):\n        num_pow.append(nums[i]**n)\n    return num_pow\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    total_power = 1\n    for num in nums:\n        total_power = total_power * num\n    return total_powe"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # the only way to get the power of a number is to divide the number by its\n    # base. So we have a base that divides n, then we do an exponent.\n    # Let's say n=2^3. Then the base 3 will become 3 and the exponent will become 2^3-1,\n    # so we have 2^3-1 as the number in base 3.\n    # The process is as follows:\n    # 1. We go through all the numbers and put them in a list.\n    # 2. We multiply the numbers together by the base to get the result.\n    # 3. We repeat this process until n-1 is reached.\n    # 4. Now that we've done this process, we put it back into a list.\n    # 5. Finally, we return the list.\n    result = []\n    n = len(nums)\n    for i in range(n):\n        result.append(nums[i]**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # always start with 0\n    P=[0]*len(nums)\n    P[0]=nums[0]\n    for i in range(1,len(nums)):\n        P[i]=P[i-1]*n\n    return P\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    list_to_compute = []\n    for num in nums:\n        list_to_compute.append(num**n)\n    return list_to_compute\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Your code here\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    try:\n        return string.upper()\n    except:\n        return \"Upper cannot be converted to upper case\"\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n    \n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = string.upper()\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = ''\n    for character in string:\n        if character.isupper():\n            result += character.upper()\n        else:\n            result += character.lower()\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if not newList:\n        print(\"List is empty\")\n        return \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Write your code here\n    newList.reverse()\n    newList.reverse()\n    newList.reverse()\n    newList.reverse()\n    return newList\n    \n    \n    \n    \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # code here\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    "
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    newList.sort()\n    print(newList)\n    \n    if len(newList) > 1:\n        index = 1\n        while index <= len(newList) - 1:\n            temp = newList[index]\n            newList[index] = newList[index + 1]\n            newList[index + 1] = temp\n            index += 1\n    return newList\n    \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList = []\n    for i in newList: \n        newList.append(i) \n    newList.reverse() \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"You need more than 1 element to swap two elements\")\n    elif len(newList) == 2:\n        x,y = newList\n        newList = newList[1], newList[0]\n        newList = newList[1], x\n        newList = newList[0], y\n    else:\n        l1, l2 = newList[:2]\n        newList[1], l2 = l2, l1\n        newList[0], l1 = l1, l2\n        newList = newList[1], l2\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0] \n    newList[0] = newList[-1] \n    newList[-1] = temp \n    return newList\n    \ndef quicksort(newList): \n    '''\n    Write a Python function that does a quicksort of a list of numbers. \n    In order to determine if a number is in a given list, it looks for the first element\n    with a greater or equal value than it's index. If it's not, it adds it to the end of the \n    list. This is an easy way to sort a list, because it does not have to store any data\n    on it, which is good.\n    '''\n    if len(newList) <= 1:\n        return newList\n    if newList[0] >= newList[-1]:\n        return quicksort(newList[1:])\n    elif newList[0] < newList[-1]:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return quicksort(newList[1:])\n    else:\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList\n    \n    # write your code here\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[1]\n    newList[1] = temp\n    \n    return newList\n    \n    \n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Your code goes here\n    a = 3.14 * (r ** 2)\n    b = 2 * 3.14 * r\n    c = (a ** 2 + b ** 2) ** 0.5\n    if c >= r ** 2:\n        return c\n    else:\n        return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r == 0 :\n        return 0\n    elif r == 1 :\n        return 1\n    else :\n        return r * (r - 1) / 2\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r < 0:\n        raise ValueError(\"The radius is negative\")\n    elif r == 0:\n        return 0.0\n    elif r == 1:\n        return 1.0\n    elif r == 2:\n        return 4.0\n    elif r == 3:\n        return 9.0\n    elif r == 4:\n        return 16.0\n    elif r == 5:\n        return 25.0\n    elif r == 6:\n        return 36.0\n    elif r == 7:\n        return 49.0\n    elif r == 8:\n        return 64.0\n    elif r == 9:\n        return 81.0\n    elif r == 10:\n        return 100.0\n    elif r == 11:\n        return 125.0\n    elif r == 12:\n        return 144.0\n    elif r == 13:\n        return 169.0\n    elif r == 14:\n        return 196.0\n    elif r == 15:\n        return 250.0\n    elif r == 16:\n        return 300.0\n    elif r == 17:\n        return 330.0\n    elif r == 18:\n        return 400.0\n    elif r == 19:\n        return 450.0\n    elif r == 20:\n        return 500.0\n    elif r == 21:\n        return 550.0\n    elif r == 22:\n        return 600.0\n    elif r == 23:\n        return 650.0\n    elif r == 24:\n        return 700.0\n    elif r == 25:\n        return 750.0\n    elif r == 26:\n        return 800.0\n    elif r == 27:\n        return 850.0\n    elif r == 28:\n        return 1000.0\n    elif r == 29:\n        return 1150.0\n    elif r == 30:\n        return 1400.0\n    elif r == 31:\n        return 1750.0\n    elif r == 32:\n        return 2000.0\n    elif r == 33:\n        return 2350.0\n    elif r == 34:\n        return 2500.0\n    elif r == 35:\n        return 3000.0\n    elif r == 36:\n        return 3550.0\n    elif r == 37:\n        return 4000.0\n    elif r == 38:\n        return 4450.0\n    elif r == 39:\n        return 5000.0\n    elif r == 40:\n        return 5650.0\n    elif r == 41:\n        return 6000.0\n    elif r == 42:\n        return 6350.0\n    elif r == 43:\n        return 7000.0\n    elif r == 44:\n        return 7550.0\n    elif r == 45:\n        return 8000.0\n    elif r == 46:\n        return 8750.0\n    elif r == 47:\n        return 10000.0\n    elif r == 48:\n        return 11550.0\n    elif r == 49:\n        return 12000.0\n    elif r == 50:\n        return 12650.0\n    elif r == 51:\n        return 13250.0\n    elif r == 52:\n        return 14000.0\n    elif r == 53:\n        return 14650.0\n    elif r == 54:\n        return 15250.0\n    elif r == 55:\n        return 16000.0\n    elif r == 56:\n        return 17650.0\n    elif r == 57:\n        return 18250.0\n    elif r == 58:\n        return 19000.0\n    elif r == 59:\n        return 20050.0\n    elif r == 60:\n        return 21050.0\n    elif r == 61:\n        return 23000.0\n    elif r == 62:\n        return 24000.0\n    elif r == 63:\n        return 25650.0\n    elif r == 64:\n        return 26250.0\n    elif r == 65:\n        return 27000.0\n    elif r == 66:\n        return 28650.0\n    elif r == 67:\n        return 29000.0\n    elif r == 68:\n        return 30650.0\n    elif r == 69:\n        return 31000.0\n    elif r == 70:\n        return 32000.0\n    elif r == 71:\n        return 33000.0\n    elif r == 72:\n        return 34000.0\n    elif r == 73:\n        return 35000.0\n    elif r == 74:\n        return 36000.0\n    elif r == 75:\n        return 37000.0\n    elif r == 76:\n        return 38000.0\n    elif r == 77:\n        return 39000.0\n    elif r == 78:\n        return 40650.0\n    elif r == 79:\n        return 41000.0\n    elif r == 80:\n        return 42000.0\n    elif r == 81:\n        return 43000.0\n    elif r == 82:\n        return 44000.0\n    elif r == 83:\n        return 45000.0\n    elif r == 84:\n        return 46000.0\n    elif r == 85:\n        return 47000.0\n    elif r == 86:\n        return 48000.0\n    elif r == 87:\n        return 49000.0\n    elif r == 88:\n        return 50000.0\n    elif r == 89:\n        return 51000.0\n    elif r == 90:\n        return 52000.0\n    elif r == 91:\n        return 53000.0\n    elif r == 92:\n        return 54000.0\n    elif r == 93:\n        return 55000.0\n    elif r == 94:\n        return 56000.0\n    elif r == 95:\n        return 57000.0\n    elif r == 96:\n        return 58000.0\n    elif r == 97:\n        return 59000.0\n    elif r == 98:\n        return 605000.0\n    elif r == 99:\n        return 615000.0\n    elif r == 100:\n        return 625000.0\n    elif r == 101:\n        return 635000.0\n    elif r == 102:\n        return 645000.0\n    elif r == 103:\n        return 655000.0\n    elif r == 104:\n        return 665000.0\n    elif r == 105:\n        return 675000.0\n    elif r == 106:\n        return 685000.0\n    elif r == 107:\n        return 695000.0\n    elif r == 108:\n        return 705000.0\n    elif r == 109:\n        return 715000.0\n    elif r == 110:\n        return 725000.0\n    elif r == 111:\n        return 735000.0\n    elif r == 112:\n        return 745000.0\n    elif r == 113:\n        return 755000.0\n    elif r == 114:\n        return 765000.0\n    elif r == 115:\n        return 775000.0\n    elif r == 116:\n        return 785000.0\n    elif r == 117:\n        return 795000.0\n    elif r == 118:\n        return 805000.0\n    elif r == 119:\n        return 815000.0\n    elif r == 120:\n        return 825000.0\n    elif r == 121:\n        return 835000.0\n    elif r == 122:\n        return 845000.0\n    elif r == 123:\n        return 855000.0\n    elif r == 124:\n        return 865000.0\n    elif r == 125:\n        return 875000.0\n    elif r == 126:\n        return 885000.0\n    elif r == 127:\n        return 895000.0\n    elif r == 128:\n        return 905000.0\n    elif r == 129:\n        return 915000.0\n    elif r == 130:\n        return 925000.0\n    elif r == 131:\n        return 935000.0\n    elif r == 132:\n        return 945000.0\n    elif r == 133:\n        return 955000.0\n    elif r == 134:\n        return 965000"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if (r >= 0) :\n        return (3.14159) * (r ** 2) * (3/4)\n    else :\n        print('the input must be a positive number')\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a=0\n    a2=1\n    a3=1\n    a4=1\n    for i in range(1,r+1):\n        a=a+((-1)**i)*(-(1)**i)\n        a2=a2+((-1)**i)*(-(1)**i)\n        a3=a3+((-1)**i)*(-(1)**i)\n        a4=a4+((-1)**i)*(-(1)**i)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Write your code here\n    return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Triangle\n    a = -r/2\n    b = r/2\n    c = a*(a+b)\n    if a == b and b == a :\n        print(\"Area of Triangle:\", a * b * c)\n    #Square\n    elif a == b :\n        print(\"Area of Square:\", a**2)\n    elif b == a :\n        print(\"Area of Square:\", b**2)\n    #Elliptic\n    else :\n        print(\"Area of Elliptic:\", a**2 + b**2)\n    \n    #Check for input\n    try:\n        a = float(input(\"Enter the first side of the triangle (a): \"))\n        b = float(input(\"Enter the second side of the triangle (b): \"))\n        c = float(input(\"Enter the third side of the triangle (c): \"))\n    except :\n        print(\"Please enter a number!\")\n        return\n    #Calculate area\n    s = (a+b+c)/2\n    area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n    print(\"Area of the triangle:\", area)\n    \ntriangle_area(0.5)\ntriangle_area(1)\ntriangle_area(3.4)\ntriangle_area(1.5)\ntriangle_area(1.7)\ntriangle_area(2)\ntriangle_area(1.4)\ntriangle_area(1.9)\ntriangle_area(2.4)\ntriangle_area(4)\ntriangle_area(5)"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0 :\n        return 0\n    elif r == 0 :\n        return 1\n    else :\n        return (r**2)*triangle_area(r-1) + (r**2)*triangle_area(r-2)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3.14 * (r ** 2)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def cal_area(r):\n        a = (3 * r * r) ** 0.5\n        return a\n    area = 0\n    for i in range(1,r):\n        area += cal_area(i)\n    area = area - (2 * r) ** 2\n    return area\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start>end:\n        return None\n    if array[start]==array[end]:\n        return array[start]\n    if array[start]<array[end]:\n        return find_First_Missing(array,start,end-1)\n    else:\n        return find_First_Missing(array,start+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start >= end:\n        return None\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] < mid:\n        return find_First_Missing(array,mid+1,end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array) - 1\n    mid = (start + end) // 2\n    \n    if array[mid] < array[mid - 1]:\n        return find_First_Missing(array,mid + 1,end)\n    elif array[mid] > array[mid - 1]:\n        return find_First_Missing(array,start,mid - 1)\n    else:\n        return mid\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start==end:\n        return end\n    for i in range(start,end):\n        if array[i]==end:\n            return array[i]\n        if array[i]>end:\n            end=i\n    return end\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    while start<=end:\n        mid = (start+end)//2\n        if array[mid]==mid+1:\n            end=mid\n        else:\n            start=mid+1\n    return end\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    while start <= end:\n        mid = (start+end)//2\n        if mid == 0:\n            return array[mid]\n        elif mid == end:\n            return array[mid-1]\n        elif array[mid] > array[mid-1]:\n            return array[mid]\n        else:\n            return array[mid-1]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    # print(\"Start\",start,end)\n    if start >= end:\n        return None\n    if start == end:\n        return array[start]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    \n    for i in range(start,end):\n        if array[i]==0:\n            return array[i]\n    return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return 0\n    i = start\n    j = end\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n    \ndef remove_duplicates(string):\n    '''\n    Write a function that takes a string and returns a new string with all \n    duplicates removed.\n    '''\n    return string.replace('a','a%20').replace('e','e%20').replace('i','i%20').replace('o','o%20')\n    \ndef remove_spaces(string):\n    '''\n    Write a function that takes a string and returns a new string with all \n    spaces removed.\n    '''\n    return string.replace(' ','')\n    \ndef strip_left_space(string):\n    '''\n    Write a function that takes a string and returns a new string with spaces \n    removed.\n    '''\n    return string.replace(' ','%20')\n    \ndef strip_right_space(string):\n    '''\n    Write a function that takes a string and returns a new string with spaces \n    removed.\n    '''\n    return string.replace(' ','')\n    \ndef add_one_to_right(string):\n    '''\n    Write a function that takes a string and returns a new string with each \n    character appended with '1'.\n    '''\n    return string+'1'\n    \ndef add_one_to_left(string):\n    '''\n    Write a function that takes a string and returns a new string with each \n    character appended with '1'.\n    '''\n    return string+'1'\n    \ndef strip_empty_spaces(string):\n    '''\n    Write a function that takes a string and returns a new string with all \n    spaces removed.\n    '''\n    return string.replace(' ','')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    replaced_string = \"\"\n    for char in string:\n        if char!= \" \":\n            replaced_string += char\n    return replaced_string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20'"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    for char in string:\n        if char == \" \":\n            string = string.replace(char, \" %20\")\n        else:\n            string = string.replace(char, \" %20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ','%20')\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \n    \ndef main():\n    '''\n    Test code for replace_spaces.\n    '''\n    string = 'Hello World, it\\'s me.'\n    print(replace_spaces(string))\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    print(''.join(string.replace(' ', '%20')))\n    "
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return even_list, odd_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for num in list: \n        if num % 2 == 0: \n            evens.append(num) \n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even.append(list[i])\n        else:\n            odd.append(list[i])\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n        else:\n            odd_numbers.append(number)\n    return even_numbers, odd_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list)): \n        if list[i] % 2 == 0: \n            even.append(list[i]) \n        else: \n            odd.append(list[i]) \n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = [ number for number in list if number % 2 == 0 ]\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for x in list:\n        if x % 2 == 0:\n            evens.append(x)\n    print (evens)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n    \n    \ndef main():\n    '''\n    test the Split function\n    '''\n    print(Split(list))\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return (ele[0] + ele[1], ele[0] - ele[1], ele[0] * ele[1], ele[0] / ele[1], ele[1] * ele[1])\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []:\n        sub = []\n    for i in ele:\n        sub.append((i[0], i[1]))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    print('\\t', end ='')\n    if ele[0] == ele[1] == ele[2]!= '.':\n        return '.'\n    else: \n        sub.append(ele)\n        return adjac(ele, sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: \n        return None\n    else: \n        sub.append(ele)\n        adjac(sub) \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    temp = ele\n    if temp not in sub: \n        sub.append(temp)\n        adjac(temp, sub)\n        temp = ele\n    if temp not in sub:\n        sub.append(temp)\n        adjac(temp, sub)\n    return sub\n    \ndef bfs(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    temp = ele\n    if temp not in sub:\n        sub.append(temp)\n        bfs(temp, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return map(tuple, zip(*[(0, 1), (0, -1), (1, 0), (-1, 0)]))\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        adjac(ele[0], sub)\n        adjac(ele[1], sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    if ele[2] == '1':\n        sub.append((x,y))\n    if ele[2] == '2':\n        sub.append((x,y+1))\n    if ele[2] == '3':\n        sub.append((x+1,y))\n    if ele[2] == '4':\n        sub.append((x+1,y+1))\n    if ele[2] == '5':\n        sub.append((x+1,y+2))\n    if ele[2] == '6':\n        sub.append((x+1,y+3))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ele[0] + sub[0] + ele[1] + sub[1]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # initialize adjacency array\n    sub_array = []\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('\\n','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ', '_')\n    text = text.replace('  ', '_')\n    text = text.replace('   ', '_')\n    text = text.replace('   ', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_',' ')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('\\n','_')\n    text = text.replace(' ','_')\n    text = text.replace('\\t','_')\n    text = text.replace('\\r','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    words = text.split(' ')\n    words = [word.replace(\" \",\"_\") for word in words]\n    words = \" \".join(words)\n    return words\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\"  \",\"_\")\n    text = text.replace(\" \",\"_\")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return ''.join([i.replace(' ', '_') for i in text.split()])\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_list = text.split()\n    new_text = \"\"\n    for word in text_list:\n        if word == \" \":\n            word = \"_\"\n        new_text += word\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('\\n', '')\n    text = text.replace('\\t', '')\n    text = text.replace('\\r', '')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_replaced = text.replace(\" \",\"_\")\n    return text_replaced\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    result_list = []\n    for i in num_list:\n        if i == 0:\n            result_list.append(0)\n        else:\n            result_list.append(i)\n    return result_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [value for value in num_list if value!= 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    length = len(num_list)\n    for i in range(length):\n        if num_list[i] == 0:\n            # num_list[i] = num_list[i+1]\n            num_list[i] = num_list[i+1]\n            # num_list[i+1] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list:\n        new_num_list = [value for value in num_list if value!= 0]\n        new_num_list.append(0)\n        return new_num_list\n    else:\n        return []\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #Implement your solution here\n    return None\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n            i += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # YOUR CODE HERE\n    sum=0\n    for i in num_list:\n        if i!= 0:\n            sum+=i\n    num_list.remove(sum)\n    num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            pass\n        else:\n            num_list.append(0)\n    return num_list\n    \ndef remove_zero(num_list):\n    '''\n    Write a python function to remove all zeroes from the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            pass\n        else:\n            num_list.remove(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while(i < len(num_list)):\n        if num_list[i] == 0:\n            num_list = num_list[:i] + num_list[i+1:]\n            i -= 1\n        i += 1\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # For more details refer to the above link\n    pairs = []\n    for i in range(len(arr)-1) :\n        for j in range(i+1,len(arr)) :\n            pairs.append([arr[i],arr[j]])\n    return sum(pairs)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_of_xor = 0\n    for i in range(0,n) : \n        sum_of_xor += arr[i]\n    return sum_of_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # check condition\n    if n<2 : \n        return 0\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    X=0\n    for i in range(len(arr)-1) :\n        X=X^arr[i]\n    return X\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(0,n) :\n        x = x ^ arr[i]\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    nums = []\n    for i in range(len(arr)) : \n        nums.append(arr[i])\n    num = 1\n    for i in range(len(nums)) : \n        if nums[i] == num : \n            num += 2\n        else : \n            num = nums[i]\n    return nums[0] \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Determining the size of the array\n    n=len(arr)\n    # Initializing variables \n    sum = 0\n    # Traverse through each pair of elements\n    for i in range(n-1) : \n        # Add both the values in both arrays\n        sum += arr[i] & arr[i+1]\n    # Return the sum of the two array\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) < 2 :\n        return 0\n    \n    x = 0\n    y = 0\n    c = 0\n    for i in range(len(arr)) : \n        x = x ^ arr[i]\n        y = y ^ arr[i]\n        c = c + 1\n    for i in range(0,c,2) :\n        x = x ^ arr[i]\n        y = y ^ arr[i]\n    return x ^ y\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0 \n    for i in range(n) : \n        if arr[i]!= arr[i] : \n            ans += arr[i] \n    return ans \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x=0\n    while x<n :\n        x+=1\n        y=x\n        while y<n :\n            y+=1\n            if arr[x]&arr[y]==0 :\n                x+=1\n                arr[x]+=arr[y]\n                arr[y]=0\n    return arr\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # TODO: Write your code here\n    # Pushing the first element of the list\n    heapq.heapify(iterable)\n    # Going through each element of the list\n    # from the end\n    for i in range(len(iterable) - 1, 0, -1):\n        # Extracting the element which is sorted\n        # into the heap\n        # and pushing it\n        heapq.heappop(iterable)\n    # Returning the heap, which is sorted\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def swap(i,j):\n        return i,j\n    def heappush(iterable,item):\n        heapq.heappush(iterable,item)\n        return iterable\n    def heappop(iterable):\n        heapq.heappop(iterable)\n        return iterable\n    def heappushpop(iterable,item):\n        heapq.heappush(iterable,-heappop(iterable))\n        return item\n    \n    if iterable == []:\n        return []\n    elif iterable[0] == -1:\n        return iterable[1:]\n    else:\n        return [item[0] for item in sorted(iterable[1:],key=item[0])]\n        \ndef test_heap():\n    '''\n    Test the heap sort function.\n    '''\n    # NOTE: We should write an insertion sort\n    # test as well\n    assert heap_sort([-2, -1, 0, 1, 2]) == [0, 1, 2, -2, -1]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n    assert heap_sort([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h,i)\n    for i in range(len(h)-1,0,-1):\n        heapq.heapreplace(h,hq.heappop(h))\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def sort(iterable):\n        '''\n        Sorts the given iterable.\n        '''\n        return sorted(iterable, key= lambda x: x.get_value())\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    def compare(x, y):\n        '''\n        Function to compare 2 numbers\n        '''\n        return int(x) - int(y)\n        \n    def compare_key(k):\n        '''\n        Function to compare a key in a heap\n        '''\n        return k in heapq.nlargest(2, heapq.heapify(iterable))\n        \n    # Create a min-heap\n    # First add all elements in array\n    heap = []\n    for x in iterable:\n        heapq.heappush(heap, x)\n        # Insert the newly added element in the min-heap\n        heapq.heapify(heap)\n    \n    # Now iterate through the array\n    for i in range(len(heap) - 1):\n        # Swap two elements at a time\n        k1 = heapq.heappop(heap)\n        k2 = heapq.heappop(heap)\n        # Set the second value in the min heap\n        heapq.heappush(heap, k1 + k2)\n        # Insert the two swapped values in the min heap\n        heapq.heappush(heap, k2 + k1)\n    \n    # Now iterate through the array\n    for i in range(len(heap) - 1):\n        # Swap the heap values\n        k1 = heapq.heappop(heap)\n        heapq.heappush(heap, k1 + heapq.heappop(heap))\n        # Insert the element at the beginning of the heap\n        heapq.heappush(heap, heapq.heappop(heap))\n    \n    # Reverse the array\n    heapq.heapify(heap)\n    return heap\n    \n    \ndef binary_search(iterable, target):\n    '''\n    Write a function to search an element in an array.\n    '''\n    \n    def compare(x, y):\n        '''\n        Function to compare 2 numbers\n        '''\n        return int(x) - int(y)\n        \n    def compare_key(k):\n        '''\n        Function to compare a key in a binary search\n        '''\n        return k in iterable\n        \n    # Base case: If the element is not found, return -1\n    if target is None or target == '':\n        return -1\n    \n    # Find the start of the search range\n    left = 0\n    right = len(iterable) - 1\n    \n    # Start the search\n    while left <= right:\n        # If the element is smaller than the middle,\n        # then we're at a right boundary\n        if compare(iterable[left], target) < 0:\n            # Move to the left\n            left += 1\n            \n        # If the element is greater than the middle,\n        # then we're at a left boundary\n        elif compare(iterable[right], target) > 0:\n            # Move to the right\n            right -= 1\n        \n        # If the element is the target element,\n        # then we're at the end of the array\n        elif compare(iterable[left], target) == compare(iterable[right], target):\n            # We have a match\n            return left + 1\n            \n    # If we haven't found any match\n    return -1\n    \ndef binary_search_iter(iterable, target):\n    '''\n    Write a function to search an element in an array.\n    '''\n    \n    def compare(x, y):\n        '''\n        Function to compare 2 numbers\n        '''\n        return int(x) - int(y)\n        \n    def compare_key(k):\n        '''\n        Function to compare a key in a binary search\n        '''\n        return k in iterable\n        \n    # Base case: If the element is not found, return -1\n    if target is None or target == '':\n        return -1\n        \n    # Find the start of the search range\n    left = 0\n    right = len(iterable) - 1\n        \n    # Base case: If we're at a left boundary, we're at the end of the array\n    while left < right:\n        # If the element is smaller than the middle,\n        # then we're at a left boundary\n        if compare(iterable[left], target) < 0:\n            # Move to the left\n            left += 1\n            \n        # If the element is greater than the middle,\n        # then we're at a left boundary\n        elif compare(iterable[right], target) > 0:\n            # Move to the right\n            right -= 1\n            \n        # If the element is the target element,\n        # then we're at the end of the array\n        elif compare(iterable[left], target) == compare(iterable[right], target):\n            # We have a match\n            return left + 1\n            \n    # If we haven't found any match\n    return -1\n    \ndef binary_search_rec(iterable, target):\n    '''\n    Write a function to search an element in an array.\n    '''\n    \n    def compare(x, y):\n        '''\n        Function to compare 2 numbers\n        '''\n        return int(x) - int(y)\n        \n    def compare_key(k):\n        '''\n        Function to compare a key in a binary search\n        '''\n        return k in iterable\n        \n    # Base case: If the element is not found, return -1\n    if target is None or target == '':\n        return -1\n        \n    # Find the start of the search range\n    left = 0\n    right = len(iterable) - 1\n        \n    # Base case: If we're at a left boundary, we're at the end of the array\n    while left < right:\n        # If the element is smaller than the middle,\n        # then we're at a left boundary\n        if compare(iterable[left], target) < 0:\n            # Move to the left\n            left += 1\n            \n        # If the element is greater than the middle,\n        # then we're at a left boundary\n        elif compare(iterable[right], target) > 0:\n            # Move to the right\n            right -= 1\n            \n        # If the element is the target element,\n        # then we're at the end of the array\n        elif compare(iterable[left], target) == compare(iterable[right], target):\n            # We have a match\n            return left + 1\n            \n    # If we haven't found any match\n    return -1\n    \ndef binary_search_rec_iter(iterable, target):\n    '''\n    Write a function to search an element in an array.\n    '''\n    \n    def compare(x, y):\n        '''\n        Function to compare 2 numbers\n        '''\n        return int(x) - int(y)\n        \n    def compare_key(k):\n        '''\n        Function to compare a key in a binary search\n        '''\n        return k in iterable\n        \n    # Base case: If the element is not found, return -1\n    if target is None or target == '':\n        return -1\n        \n    # Find the start of the search range\n    left = 0\n    right = len(iterable) - 1\n        \n    # Base case: If we're at a left boundary, we're at the end of the array\n    while left < right:\n        # If the element is smaller than the middle,\n        # then we're at a left boundary\n        if compare(iterable[left], target) < 0:\n            # Move to the left\n            left += 1\n            \n        # If the element is greater than the middle,\n        # then we're at a left boundary\n        elif compare(iterable[right], target) > 0:\n            # Move to the right\n            right -= 1\n            \n        # If the element is the target element,\n        # then we're at the end of the array\n        elif compare(iterable[left], target) == compare(iterable[right], target):\n            # We have a match\n            return left + 1\n            \n    # If we haven't found any match\n    return -1\n    \ndef binary_search_rec_iter(iterable, target):\n    '''\n    Write a function to search an element in an array.\n    '''\n    \n    def compare(x, y):\n        '''\n        Function to compare 2 numbers\n        '''\n        return int("
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq_heap = []\n    for value in iterable:\n        if value not in hq_heap:\n            hq_heap.append(value)\n        else:\n            try:\n                i = hq_heap.index(value)\n                heapq.heapreplace(hq_heap, value)\n            except ValueError:\n                pass\n    return hq_heap\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=lambda x: x[1])\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Heap initializer\n    h = []\n    # Create a minheap, and push all the elements in the iterable into it\n    for item in iterable:\n        hq.heappush(h, item)\n    # Create a maxheap again, but with the same max size as the minheap\n    for i in range(len(h) - 1, 0, -1):\n        # swap the top element with the next smallest (by popping) element\n        hq.heapreplace(h, hq.heappop(h))\n    # Return the elements in maxheap\n    return hq.heappop(h)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    arr = []\n    for i in iterable:\n        arr.append(i)\n    arr.sort()\n    return arr\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    i=0\n    while i<len(iterable):\n        heapq.heapify(iterable)\n        x=heapq.heappop(iterable)\n        y=heapq.heappop(iterable)\n        heapq.heappush(iterable,x+y)\n        i+=1\n    return iterable\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost <= sale_amount\n    else:\n        return actual_cost < sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == 0:\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        print('The actual cost is ',actual_cost)\n        print('The profit is ',sale_amount-actual_cost)\n        print('The loss is ',sale_amount-actual_cost)\n    return 0\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return (actual_cost < sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost<sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # YOUR CODE HERE\n    if actual_cost <= sale_amount:\n        pass\n    else:\n        pass\n    # Your code here\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #Your code goes here\n    return actual_cost < sale_amount or actual_cost > 0\ndef profit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #Your code goes here\n    return actual_cost < sale_amount or actual_cost > 0\ndef check_profit_loss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #Your code goes here\n    return actual_cost > sale_amount or actual_cost < 0\ndef profit_loss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #Your code goes here\n    return actual_cost < sale_amount or actual_cost > 0\ndef get_profit_loss(actual_cost,sale_amount,profit_loss):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #Your code goes here\n    if profit_loss(actual_cost,sale_amount) and profit_noloss(actual_cost,sale_amount) and check_profit_loss(actual_cost,sale_amount):\n        return True\n    return False\ndef check_profit_loss_noloss(actual_cost,sale_amount,profit_loss):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #Your code goes here\n    if profit_loss(actual_cost,sale_amount) and profit_noloss(actual_cost,sale_amount) and check_profit_loss(actual_cost,sale_amount,0):\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # TODO: Write your function here\n    return True\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    chill = 1.60*(10**(5.0/5.0))\n    ct = (v * 3.6)/(v + 0.16 * t**0.25 + 3.6)\n    chill_index = ((v * ct) / (v + 0.16 * t)) + 0.62\n    \n    return round(chill_index, 2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = v * 9.0 / 5.0 + 32\n    b = w * (9.0 / 5.0)\n    c = t * (9.0 / 5.0)\n    if math.isnan(b) or math.isnan(c):\n        return\n    i = 5.0 * b - 0.6215 * b * b - 35.0 * c + 101.0\n    if math.isnan(i):\n        return\n    if i > 100:\n        i = 100.0\n    if i < -100:\n        i = -100.0\n    return round(i)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # 1. The formula for the wind chill index is the formula given by Wikipedia:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    # If we divide the wind velocity by 3, the result will be the wind chill index as the value of the saturation constant is 0.977. If we divide the wind velocity by 2, the result will be the wind chill index as the value of the saturation constant is 0.955.\n    # Note that the function uses the \"rounded down\" formula for the wind chill index because the temperature is measured from the upper bound of the surface to the lower bound of the surface.\n    # If we divide the wind velocity by 6, the result will be the wind chill index as the value of the saturation constant is 0.961.\n    # The formula for the wind chill index is:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    # Assume a temperature between 15 and 25 degrees Celsius.\n    \n    # 2. The formula for the wind chill index is defined as:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    # Using the formula, calculate the wind chill index.\n    \n    # 3. The formula for the wind chill index is:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    \n    # Since we are dealing with wind speeds, we need to convert them from meters to kilometers and divide by the wind speed.\n    # We use the floor division method to make sure the division is non-zero.\n    \n    # 4. The formula for the wind chill index is:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    \n    # For the first case, assume the wind speed is at the start and end of the trip.\n    # Then, assume the temperature is between 15 and 25 degrees Celsius.\n    # Then, assume the wind speed is at the start and end of the trip, then add the average wind speed.\n    # Then, assume the temperature is between 15 and 25 degrees Celsius, then add the wind chill index.\n    \n    # If the wind speed is at the start of the trip, add the average wind speed.\n    # If the wind speed is at the end of the trip, subtract the average wind speed and divide by the wind speed.\n    \n    # 5. The formula for the wind chill index is:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    \n    # The wind speed from the start is assumed to be between 10 and 15 km/h.\n    # Assume the temperature is between 15 and 25 degrees Celsius.\n    \n    # 7. The formula for the wind chill index is:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    \n    # Assume the wind speed is at the start and end of the trip, then add the average wind speed.\n    # If the wind speed is at the start of the trip, add the average wind speed and divide by the wind speed.\n    # If the wind speed is at the end of the trip, subtract the average wind speed and divide by the wind speed.\n    \n    # 9. The formula for the wind chill index is:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    \n    # Assume the temperature is between 15 and 25 degrees Celsius.\n    \n    # 10. The formula for the wind chill index is:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    \n    # Since the wind speed is at the start and end of the trip,\n    # then we are going to subtract the average wind speed.\n    # If the wind speed is at the start of the trip, then add the average wind speed, then divide by the wind speed.\n    # If the wind speed is at the end of the trip, then subtract the average wind speed, then divide by the wind speed.\n    \n    # Let v = 10, t = 10. Then, as v = 10, t = 9, we are going to compute wind chill index = 0.6.\n    \n    # 11. The formula for the wind chill index is:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    \n    # Because v is 10, t is 9, the wind chill index is 0.6.\n    # Assume the temperature is between 15 and 25 degrees Celsius.\n    \n    # 12. The formula for the wind chill index is:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    \n    # If v is 10 and t is 9, the wind chill index is 0.6.\n    # Assume the temperature is between 15 and 25 degrees Celsius.\n    # However, because v is 10, t is 9, the wind chill index is 0.6.\n    # Assume the temperature is between 15 and 25 degrees Celsius, then add the average wind speed.\n    # Then, if v is 10, t is 9, the wind chill index is 0.6.\n    # Assume the temperature is between 15 and 25 degrees Celsius, then subtract the average wind speed.\n    # Then, if v is 10, t is 9, the wind chill index is 0.6.\n    # Assume the temperature is between 15 and 25 degrees Celsius, then divide the wind speed by the average wind speed.\n    # Then, if v is 10, t is 9, the wind chill index is 0.6.\n    \n    # 13. The formula for the wind chill index is:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    \n    # Assume the wind speed is at the start of the trip, then add the average wind speed.\n    # If the wind speed is at the start of the trip, add the wind speed and divide by the wind speed.\n    # If the wind speed is at the end of the trip, subtract the wind speed and divide by the wind speed.\n    # The formula for the wind chill index is:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    \n    # Assume the temperature is between 15 and 25 degrees Celsius, then add the wind speed.\n    # If the temperature is between 15 and 25 degrees Celsius, then add the wind speed and divide by the temperature.\n    # If the temperature is between 15 and 25 degrees Celsius, then subtract the wind speed and divide by the temperature.\n    # The formula for the wind chill index is:\n    # https://en.wikipedia.org/wiki/Wind_chill_modula\n    \n    # The wind speed from the start is assumed to be between 10 and 15 km/h.\n    # Assume the temperature is between 15 and 25 degrees Celsius.\n    \n    # Let v = 10, t = 9, we are going to calculate wind chill index = 0.2.\n    \n    # Let v = 10, t = 9, the wind chill index is 0.2\n    # Assume the temperature is between 15 and 25 degrees Celsius.\n    # However, because v is 10, t is 9, the wind chill index is 0.2.\n    # Assume the temperature is between 15 and 25 degrees Celsius, then add the wind speed.\n    # Then, if v is 10, t is 9, the wind chill index is 0.2.\n    # Assume the temperature is between 15 and 25 degrees Celsius, then subtract the wind speed and divide by the temperature.\n    # Then, if v is 10, t is 9, the wind chill index is 0.2.\n    # Assume the temperature is between 15 and 25 degrees Celsius, then divide the wind speed by the temperature.\n    # Then, if v is 10, t is 9, the wind chill index is 0.2.\n    \n    # Let v = 10, t = 10. Then, as v = 10, t = 10, the wind chill index is 0.2.\n    # Assume the temperature is between 15 and 25 degrees Celsius, then add the wind speed.\n    # If the temperature is between 15 and 25 degrees Celsius, then add the wind speed and divide by the temperature.\n    # Then, if the temperature is between 15 and 25 degrees Celsius, then subtract the wind speed and divide by the temperature.\n    # Then, if the temperature is between 15 and 25 degrees Celsius, then divide the wind speed by the temperature.\n    # Then, if the temperature is between 15 and 25 degrees Celsius, then divide the wind speed by the temperature.\n    # Then, if the temperature is between 15 and 25 degrees Celsius, then divide the wind speed by the temperature.\n    # Then, if the temperature is between 15 and 25 degrees Celsius, then divide the wind speed by the temperature.\n    # Then, if the temperature is between 15 and 25 degrees Celsius, then divide the wind speed by th"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill_index = (3.5 + 9.1*v)/(5 + (3.7*v)/(1-1.1*v)))\n    #chill_index = (6.5 + 4.6*v)/(9 + (7.4*v)/(1-1.1*v))\n    if t <= 20:\n        return chill_index\n    elif t <= 40:\n        return chill_index - 5\n    else:\n        return chill_index - 37\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # (1) Input Validation\n    if not isinstance(v,float):\n        raise TypeError(\"Wind velocity must be a float\")\n    elif not isinstance(t,float):\n        raise TypeError(\"Temperature must be a float\")\n    elif not isinstance(v,int):\n        raise TypeError(\"Velocity must be an integer\")\n    elif not isinstance(t,float):\n        raise TypeError(\"Temperature must be a float\")\n    # (2) Calculate the wind chill index\n    wci = 9 * math.log(v/5.0 + 1.0, 1.0/9.0) + 32.0\n    # (3) Return the wind chill index rounded to the nearest integer\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # initialize wind chill variables\n    chill_w = 35.74\n    chill_x = v / 0.2359\n    chill_y = (t + 273.15) / 0.8\n    chill_z = (chill_x + (chill_y * chill_z)) / (1 + (chill_y * chill_z))\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #wind_chill_index = ((9.74*(v**0.16))+32.52*((v**0.16)**0.5))-273.15\n    wind_chill_index = (9.74*(v**0.16))+32.52*((v**0.16)**0.5)\n    wind_chill_index = round(wind_chill_index,3)\n    #print(wind_chill_index)\n    return wind_chill_index\ndef wind_speed(v,t):\n    '''\n    Write a function that calculates the wind speed in km/h and m/s by multiplying the wind speed by the temperature in celsius.\n    '''\n    wind_speed_1 = (v*t)/9.75\n    wind_speed_2 = wind_speed_1 * math.log(v/(9.75*t))\n    wind_speed = round(wind_speed_2,1)\n    return wind_speed\ndef temp_to_fah(temp):\n    '''\n    Write a function that converts the temperature given in celsius to fahrenheit.\n    '''\n    temp_temp = temp * 9.0 / 5 + 32\n    fah = round(temp_temp,1)\n    return fah\ndef temperature_to_kelvin(temp):\n    '''\n    Write a function that converts the temperature given in fahrenheit to kelvin.\n    '''\n    temp_temp = temp_to_fah(temp)\n    kelvin = round(temp_temp * 9.0 / 5 + 273.15,1)\n    return kelvin\ndef mean_temp(temp):\n    '''\n    Write a function that takes the temperature in celsius and calculates the mean temperature.\n    '''\n    mean_temp = round(temp_to_fah(temp) - 273.15,1)\n    return mean_temp\ndef median_temp(temp):\n    '''\n    Write a function that takes the temperature in celsius and calculates the median temperature.\n    '''\n    median = temp_to_fah(temp)\n    if temp == temp[::-1]:\n        return median\n    median_temp = temp[len(temp)//2]\n    return median_temp\ndef std_temp(temp):\n    '''\n    Write a function that takes the temperature in celsius and calculates the standard deviation of temperature.\n    '''\n    std_temp = math.sqrt(temp_to_fah(temp)**2)\n    return std_temp\ndef sum_of_squares_temp(temp):\n    '''\n    Write a function that takes the temperature in celsius and calculates the sum of squares of temperature.\n    '''\n    sum_of_squares = temp_to_fah(temp)**2\n    return sum_of_squares\ndef kurtosis_temp(temp):\n    '''\n    Write a function that takes the temperature in celsius and calculates the kurtosis of temperature.\n    '''\n    kurtosis = 0\n    kurtosis = math.sqrt(temp_to_fah(temp)**4)\n    return kurtosis\ndef mean_of_squares_temp(temp):\n    '''\n    Write a function that takes the temperature in celsius and calculates the mean of squares of temperature.\n    '''\n    mean_squares = temp_to_fah(temp)**2\n    return mean_squares\ndef stdev_of_squares_temp(temp):\n    '''\n    Write a function that takes the temperature in celsius and calculates the standard deviation of squares of temperature.\n    '''\n    std_squares = temp_to_fah(temp)**2\n    stdev_squares = math.sqrt(std_squares)\n    return stdev_squares\ndef mode_of_squares_temp(temp):\n    '''\n    Write a function that takes the temperature in celsius and calculates the mode of squares of temperature.\n    '''\n    mode = 0\n    mode = temp_to_fah(temp)\n    return mode\ndef energy_consumed(temp,wind_chill,wind_speed):\n    '''\n    Write a function that calculates the energy consumption of the system in Joules.\n    '''\n    energy = wind_speed*wind_chill*temp\n    return energy\ndef label(temp,wind_chill,wind_speed):\n    '''\n    Write a function that determines if the temperature is greater than a certain threshold.\n    '''\n    if temp > temp_threshold:\n        return True\n    else:\n        return False\ndef grade(temp,wind_chill,wind_speed):\n    '''\n    Write a function that determines if the wind chill index is greater than a certain threshold.\n    '''\n    if wind_chill > wind_threshold:\n        return True\n    else:\n        return False\ndef main():\n    print(\"Please input the wind speed in km/h and the temperature in celsius (e.g. 75.6): \")\n    v = int(input())\n    t = int(input())\n    print(wind_speed(v,t))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = v*9/5 + 32\n    return wc\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # define conversion factors\n    C_i = -9.0\n    C_e = 32.0\n    C_c = 10.0\n    C_o = 0.7\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    p = v/3.6\n    r = 116470.72\n    return round((math.log(t,p)*(r)+32),2)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #Create empty list\n    summ = []\n    #For each name\n    for name in sample_names:\n        #If name starts with a lowercase letter\n        if name[0].islower():\n            #Sum the length\n            summ.append(len(name))\n    #Return the sum\n    return summ\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count_lower = 0\n    for name in sample_names:\n        if name[0] == 'a':\n            count_lower += 1\n        elif name[0].islower():\n            count_lower -= 1\n    return count_lower\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    n = len(sample_names)\n    new_sample = []\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam_list = []\n    for name in sample_names:\n        if name.lower().startswith(\"a\"):\n            nam_list.append(name)\n    nam_length = len(nam_list)\n    return nam_length\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = list(map(str.lower, sample_names))\n    sum = 0\n    for i in range(len(names)):\n        if(names[i] == \"a\"):\n            names.pop(i)\n            sum += 1\n    return sum\n    \ndef sample_word_length(sample_word_length):\n    '''\n    Write a function that takes a list of words and returns the longest word.\n    '''\n    max_word_len = 0\n    max_word = \"\"\n    for word in sample_word_length:\n        if len(word) > max_word_len:\n            max_word_len = len(word)\n            max_word = word\n    return max_word\n    \ndef sample_word_lengths(sample_word_length):\n    '''\n    Write a function that takes a list of words and returns a dictionary of the length of each word in the list.\n    '''\n    word_lengths = {}\n    for word in sample_word_length:\n        word_lengths[word] = 1\n    return word_lengths\n    \ndef sample_sentence(sample_sentence):\n    '''\n    Write a function that takes a sentence and returns a string that is the word by word count of that sentence.\n    '''\n    max_word_len = sample_word_length(sample_sentence)\n    max_word = sample_word_lengths(sample_sentence)\n    sentence = \"\"\n    for word in sample_sentence:\n        sentence += word\n    sentence += max_word\n    return sentence\n    \ndef sample_sentences(sample_sentences):\n    '''\n    Write a function that takes a list of sentences and returns a list of all the words in the sentences.\n    '''\n    sentence_lengths = sample_word_lengths(sample_sentences)\n    word_lengths = sample_word_lengths(sample_sentences)\n    sentences = []\n    for sentence in sample_sentences:\n        words = sentence.split()\n        sentence_length = sample_word_length(words)\n        for word in words:\n            if word in sentence_lengths:\n                sentence_lengths[word] += 1\n        words = []\n        for word in sentence:\n            if word in word_lengths:\n                word_lengths[word] += 1\n        sentences.append(words)\n    return sentences\n    \ndef sample_chars(sample_chars):\n    '''\n    Write a function that takes a list of strings and returns a list of all the unique characters in the list.\n    '''\n    chars = list(set(sample_chars))\n    return chars\n    \ndef sample_chars_length(sample_chars):\n    '''\n    Write a function that takes a list of strings and returns the length of each word in the list.\n    '''\n    chars = sample_chars(sample_chars)\n    word_lengths = {}\n    for word in chars:\n        for char in word:\n            if char in word_lengths:\n                word_lengths[char] += 1\n            else:\n                word_lengths[char] = 1\n    return word_lengths\n    \ndef sample_word_chars(sample_chars):\n    '''\n    Write a function that takes a list of strings and returns a dictionary of the length of each character in each word in the list.\n    '''\n    word_lengths = sample_chars_length(sample_chars)\n    chars = sample_chars(sample_chars)\n    char_counts = {}\n    for word in chars:\n        for char in word:\n            if char in char_counts:\n                char_counts[char] += 1\n            else:\n                char_counts[char] = 1\n    return char_counts\n    \ndef sample_char_lengths(sample_chars):\n    '''\n    Write a function that takes a list of strings and returns a dictionary of the length of each character in each word in the list.\n    '''\n    char_lengths = sample_word_chars(sample_chars)\n    char_lengths = {char:1 for char in char_lengths}\n    chars = sample_chars(sample_chars)\n    for word in chars:\n        for char in word:\n            if char in char_lengths:\n                char_lengths[char] += 1\n            else:\n                char_lengths[char] = 1\n    return char_lengths\n    \ndef sample_tokens(sample_tokens):\n    '''\n    Write a function that takes a list of strings and returns a list of strings where each token is a word and the length of the token is the number of characters in the token.\n    '''\n    sample_tokens = sample_chars(sample_tokens)\n    token_lengths = sample_word_lengths(sample_tokens)\n    sample_tokens_by_length = {}\n    for word in sample_tokens:\n        sample_tokens_by_length[len(word)] = word\n    return sample_tokens_by_length\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_list = []\n    for name in sample_names:\n        if name[0]!= 'a':\n            name_list.append(name)\n    new_list = []\n    for name in name_list:\n        if len(name[0]) > 1:\n            new_list.append(name)\n    return new_list\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name.lower()) for name in sample_names if name.lower().startswith('a')])\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def lower_count(name):\n        count = 0\n        for letter in name:\n            if letter.islower():\n                count += 1\n        return count\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_nam = []\n    for name in sample_names:\n        if name[0].islower():\n            sample_nam.append(name[0])\n    return sample_nam\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return''.join([name for name in sample_names if not name.startswith('a') and not name.startswith('A')])\n    \n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[-1]!= ')':\n            new_items.append(item)\n        else:\n            new_items.append(item[:-1])\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # The regex will look for the parentheses\n    # The parentheses are the parameter to be removed from the input\n    # The parenthesis will be removed from the string\n    # The parenthesis are always a non-blank character\n    # If the character is a parenthesis, then they will be removed\n    # Otherwise, they are the non-blank characters\n    # This function will return a modified list of the string\n    # Example:\n    #    >>> remove_parenthesis(\"(a+(b+))\")\n    #    'a)a+b'\n    #    >>> remove_parenthesis(\"a((b+))\")\n    #    'a(b)'\n    #    >>> remove_parenthesis(\"a((b+))((c+))\")\n    #    'a)(b)(c)'\n    #    >>> remove_parenthesis(\"a(b+((c+))((d+))))\")\n    #    'a)(b)(c)(d)'\n    #    >>> remove_parenthesis(\"a((b)+((c))((d+))))\")\n    #    'a(b)+((c))(d)'\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Below is the beginning of our condition\n    n = 0\n    for item in items:\n        if item == \"(\":\n            n += 1\n        else:\n            n -= 1\n        # Since we've reached the end of the string and the condition is met, we break out of the loop\n        if n < 0:\n            return items[:-1]\n    \n    # Now that we have a valid string, we simply return it\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    temp = []\n    for i in items:\n        if i == '(':\n            temp.append(')')\n        else:\n            temp.append(i)\n    return ''.join(temp)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #regex\n    pattern=r\"([^\\(])\\((\\d+|\\.\\d+|\\d+\\)?\\)\"\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        if items[i][-1]==\"(\":\n            items[i]=\"\")\n        else:\n            items[i]=\"\")\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return_list = []\n    #https://stackoverflow.com/questions/25531369/how-to-remove-parentheses-in-a-string\n    for char in items:\n        if char == '(':\n            return_list.append(')')\n        else:\n            return_list.append('(')\n    return return_list\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items_output = []\n    for item in items:\n        item = item[1:-1]\n        items_output.append(item)\n    return items_output\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) == 0:\n        return \"\"\n    open_brackets = 0\n    for i in range(len(items)):\n        if items[i].isalpha():\n            open_brackets += 1\n            if open_brackets == 1:\n                if items[i] == ')' and items[i+1] == '(':\n                    items[i] = ''\n                    items[i+1] = ''\n    return ''.join(items)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    cleaned_list = []\n    cleaned_items = []\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return 1 \n    elif n % 2 == 1: \n        return 2 * is_nonagonal(n-1)\n    else: \n        return 2 * is_nonagonal(n-1) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(n)\n    if n % 2 == 0:\n        return n/2\n    else:\n        return 3*n + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # n = int(input(\"Enter the value to find the nth nonagonal number: \"))\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return is_nonagonal(n - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    elif n%2==0:\n        return n//2\n    else:\n        return n-1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    # check if the nth number of the line is in a diagonal \n    # row from top to bottom \n    if n in range(n):\n        \n        # if the nth number is in a diagonal row from top to \n        # bottom, return it \n        if n % 2 == 0: \n            return n//2\n        \n        # if the nth number is in a diagonal row from \n        # left to right, return it \n        else: \n            return (n-1)//2 \n        \n    # if the nth number is not in a diagonal row from top to \n    # bottom, return it as a non-diagonal number \n    else: \n        return n \n    "
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 0\n    if n == 1: \n        return 1\n    while i < (n-1): \n        if (n-1) % i == 0: \n            return i \n        i = i+1\n    return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n%2 == 0: return n+1\n    else: \n        return n-1\n        \n    "
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 4:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = n\n    while i > 0:\n        if i % 4 == 3:\n            return i\n        i -= 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    sum = 0\n    count = 0\n    for i in range(1, n):\n        if i == n:\n            pass\n        elif (i%2) == 1:\n            sum = sum + (n - count)\n            count = count + 1\n        else:\n            pass\n    return sum\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_compare_word = ''\n    text_length = len(text)\n    for i in range(text_length-2):\n        if re.match(\"z\", text[i]):\n            text_compare_word += 'z'\n        else:\n            if re.match(\"Z\", text[i]):\n                text_compare_word += 'Z'\n            else:\n                text_compare_word += text[i]\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matcher = re.compile(r'^z\\s?[^\\w]+$')\n    match = matcher.search(text)\n    return match!= None\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    p=re.compile(r'z')\n    t=text.split()\n    for i in t:\n        if i.startswith('z'):\n            if i.endswith('z'):\n                if not i.endswith('z'):\n                    return 'does not end with z'\n            elif not i.endswith('z'):\n                return 'does not end with z'\n            elif i.startswith('z'):\n                if not i.startswith('z'):\n                    return 'does not start with z'\n            else:\n                return 'does not start with z'\n        else:\n            return 'does not start with z'\n    return 'does not end with z'\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_middle_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_end_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_middle_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_end_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_middle_alt_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_end_alt_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_middle_alt_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_end_alt_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_middle_alt_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_end_alt_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_middle_alt_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_end_alt_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_middle_alt_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_end_alt_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_middle_alt_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_end_alt_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z0-9]','',text)\n    if text == '':\n        text = 'z'\n    else:\n        text =''\n    return text\ndef text_match_wordz_middle_alt_alt_alt(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the middle of the word.\n    '''\n    text = text.lower()\n    tex"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_space = re.compile(r'\\s')\n    word_space = re.compile(r'\\w+')\n    word_end = re.compile(r'\\w*$')\n    # start_word = re.compile(r'[a-z]')\n    # end_word = re.compile(r'[A-Z]')\n    # end_word_space = re.compile(r'[A-Z]\\s+')\n    # start_word_space = re.compile(r'[A-Z]\\s+')\n    # end_word_space_space = re.compile(r'[A-Z]\\s+\\s')\n    # end_word_space_space_space = re.compile(r'[A-Z]\\s+\\s\\s')\n    start_word = re.compile(r'[A-Z]')\n    end_word = re.compile(r'[A-Z]')\n    end_word_space = re.compile(r'[A-Z]\\s+')\n    start_word_space = re.compile(r'[A-Z]\\s+')\n    end_word_space_space = re.compile(r'[A-Z]\\s+\\s')\n    start_word_space_space = re.compile(r'[A-Z]\\s+\\s\\s')\n    end_word_space_space_space = re.compile(r'[A-Z]\\s+\\s\\s\\s')\n    end_word_space_space_space_space = re.compile(r'[A-Z]\\s+\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s')\n    # end_word_space_space_space_space_space_space = re.compile(r'\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    #str_regex = re.compile(r'z')\n    str_regex = re.compile('z')\n    z_regex = re.compile('z')\n    str_text = text\n    text_str = text.lower()\n    str_text_lower = text_str.lower()\n    z_str = str_text_lower.replace('z','')\n    text_split = z_str.split()\n    z_split = z_str.split('z')\n    z_str = z_split[1].replace('z','')\n    z_str_lower = z_str.lower()\n    str_regex_lower = str_text_lower.lower()\n    str_regex_lower_lower = str_regex_lower.lower()\n    str_regex_lower_lower.replace('z','')\n    if (z_str_lower == str_regex_lower_lower or z_str_lower == z_str_lower_lower) :\n        if z_str_lower not in text_split:\n            return 1\n    else:\n        return 0\n    if (str_regex.search(str_text) and z_regex.search(str_text_lower)):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\w+'\n    pattern = re.compile(pattern)\n    result = pattern.search(text)\n    if result:\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall('[a-zA-Z]', text)\n    return words[0]!= words[-1]\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match_str_z = re.compile('[a-z]+')\n    str_z = match_str_z.findall(text)\n    if len(str_z)==0:\n        return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.match(\"[^z]\", text))\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_len = len(input)\n    reverse_num = -1\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # your code here\n    return\n    \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # To convert array to a string\n    str1 = str(input)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    lenght = len(input)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    res = []\n    while input:\n        res.append(input[-1])\n        input = input[0:-1]\n    return res[::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    lst = input\n    print (lst)\n    reverse = []\n    \n    for i in range(len(lst)):\n        reverse.append(lst[i])\n        \n    print(reverse)\n    print (reverse[k])\n    \n    for i in range(k):\n        reverse[i] = reverse[i+1]\n        \n    print(reverse)\n    \n    return reverse\n    \n    \ndef isInList(input, list):\n    '''\n    Write a python function to determine if a value is in a given list.\n    '''\n    \n    for i in range(len(list)):\n        if input == list[i]:\n            return True\n        else:\n            continue\n    return False\n    \n    \n    \ndef make_Unique(input, list):\n    '''\n    Write a python function that converts a given string into a list with unique characters.\n    '''\n    print(input)\n    for i in range(len(input)):\n        if input[i] in list:\n            continue\n        else:\n            list.append(input[i])\n    print(list)\n    return list\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    def reverse_K_times(input, k):\n        '''\n        Write a python function to reverse an array upto a given position.\n        '''\n        \n        def reverse_K_times_recursion(input, k):\n            if k == 1:\n                return\n            \n            reverse_K_times_recursion(input, k - 1)\n            print(input)\n            \n            for i in range(0, len(input) - k + 1):\n                for j in range(len(input) - k + i):\n                    print(input[j + k], end = \"\")\n                print()\n        \n        reverse_K_times_recursion(input, k)\n    \n    reverse_K_times(input, k)\n    \n    return input\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    def reverse_k_list(l,k):\n        '''\n        Write a function that will take a list and reverse a k-length\n        list.\n        '''\n        \n        def reverse(l):\n            '''\n            Sort the list and reverse the values in the list\n            '''\n            n=len(l)\n            for i in range(n-k):\n                l[i],l[n-1-i]=l[n-1-i],l[i]\n        \n        reverse(l)\n        \n        return l\n    \n    if k>=len(input):\n        print(\"Error: k is greater than the length of the input array!\")\n        return None\n    \n    if k==0:\n        return input\n    \n    return reverse_k_list(input,k)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if (k <= 0):\n        print(\"K cannot be less than zero.\")\n    else: \n        print(\"Reverse of the array upto position \" + str(k) + \" is:\")\n        for i in range(len(input)):\n            print(input[i])\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(len(input) - k):\n        output.append(input[i])\n    \n    return outpu"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    if isinstance(test_dict, dict):\n        return tuple(test_tup) + (tuple(test_dict.values()),)\n    else:\n        return tuple(test_tup) + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup[0] = test_dict\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for k,v in test_dict.items():\n        test_tup[k] = v\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup.add(key, value)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # YOUR CODE HERE\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # test_tup_dict = tuple(test_dict.values())\n    test_tup_dict = tuple(test_dict.values())\n    test_tup += test_tup_dict\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if type(test_dict) is not dict:\n        raise TypeError('Add a dictionary to a tuple')\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup[key] = value\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tuple_test_tup = ()\n    for key, val in test_dict.items():\n        tuple_test_tup = tuple_test_tup + (key, val)\n    test_tup = tuple_test_tup\n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n=len(cost)\n    if n!=0:\n        return max(sum(i) for i in zip(*cost))/n\n    else:\n        return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0 or len(cost) == 1:\n        return cost\n    max_average = []\n    for i in range(len(cost)):\n        total_path = 0\n        for j in range(len(cost)):\n            total_path += cost[j][i]\n        average = total_path / len(cost)\n        max_average.append(average)\n    return max_average\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    N = m\n    total = sum(cost)\n    path = [0 for i in range(N)]\n    visited = [0 for i in range(N)]\n    path[0] = cost[0][0]\n    for i in range(1,N):\n        path[i] = cost[i][0]/path[i-1] + cost[i][1]/path[i-1]\n    \n    while N > 1:\n        for i in range(1,N):\n            path[i] += cost[i][0]/path[i-1]\n        path[0] = path[0] + path[i]\n        path[i] = path[i]/total\n        total = total + path[i]\n        N = N - 1\n    \n    return path[N]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maxSum = 0\n    sumOfPath = 0\n    for row in cost:\n        for cell in row:\n            sumOfPath += cell\n            if cell > maxSum:\n                maxSum = cell\n    return maxSum/sumOfPath\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maxSum = 0\n    row = len(cost)\n    column = len(cost[0])\n    for row in range(row):\n        for column in range(column):\n            maxSum += cost[row][column]\n    return maxSum/row\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Set up a dictionary for storing the path\n    path = {}\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if (i+1,j) not in path:\n                path[(i+1,j)] = 0\n            path[(i+1,j)] += cost[i][j]\n    # Sum all the numbers in the path\n    for key in path:\n        path[key] = path[key]/len(cost)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    return cost.count(1)/cost.count(2)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for x in range(N)] for y in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == 0:\n                if j == 0:\n                    dp[i][j] = cost[i][j]\n                else:\n                    dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                if i == 0:\n                    dp[i][j] = dp[i-1][j] + cost[i][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            else:\n                dp[i][j] = (cost[i][j] + dp[i-1][j-1]) / 2\n    return dp[N-1][N-1]\n    \n    \ndef solution(cost):\n    '''\n    Given a square matrix of size N*N and a list of paths to be traversed, each path is a list of cells to traverse along, where the first cell is the top left cell and the last cell is bottom right.\n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell.\n    The total cost of the path is the sum of the cells visited in each path.\n    '''\n    N = len(cost)\n    \n    paths = []\n    maxAverage = 0\n    \n    for i in range(N):\n        for j in range(N):\n            if j == 0:\n                paths.append([])\n            if i == 0:\n                paths[-1].append(cost[i][j])\n            else:\n                paths[-1].append(paths[-1][-1] + cost[i][j])\n    \n    for path in paths:\n        print(path)\n        \n    return paths[-1][0]\n    \n    \n    \ndef main():\n    '''\n    Read a square matrix of size N*N and return a list of paths. The format should be a path in each cell.\n    '''\n    N = int(input())\n    cost = []\n    for i in range(N):\n        cost.append(list(map(int,input().split())))\n    \n    result = solution(cost)\n    print(result)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    path = []\n    n = len(cost)\n    totalCost = 0\n    for i in range(n):\n        totalCost += cost[i][i]\n    \n    for i in range(n):\n        path.append(i)\n        for j in range(n):\n            cost[i][j] = cost[i][j]/totalCost\n        \n    return path\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    sum = 0\n    for i in range(N):\n        for j in range(N):\n            sum += cost[i][j]\n    return sum/N\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # count = 0\n    result = []\n    for student in students.keys():\n        student_height = students[student][1]\n        student_weight = students[student][0]\n        if student_height >= h and student_weight >= w:\n            result.append(student)\n            # count = count + 1\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = filter(lambda x:x[1] >= h and x[1] >= w,students)\n    return list(filtered)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #filtering data\n    new_students = []\n    for student in students:\n        #check if height and weight are above the min\n        if student[1][0] < h and student[1][1] < w:\n            #add to the filtered data\n            new_students.append(student)\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if h < min_height or w < min_weight:\n        return \"Unable to filter\"\n    if len(students.keys()) < 1:\n        return students\n    for student in students.keys():\n        if student.startswith(h) and student.endswith(w):\n            return students\n    return students\n    \n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        student_height,student_weight = student\n        if(h<student_height):\n            students.remove(student)\n    for student in students:\n        student_height,student_weight = student\n        if(w<student_weight):\n            students.remove(student)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    output = []\n    for st in students.values():\n        if st.student_height >= h and st.student_weight >= w:\n            output.append(st)\n    return output\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students:\n        if (students[student][0] >= h) and (students[student][1] >= w):\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    height,weight = h,w\n    out_data=dict()\n    for st in students.values():\n        if(st[1]<height and st[2]<weight):\n            out_data[st[0]]=st\n    return out_data\ndef read_in_csv_file(filename):\n    '''\n    Read the data from csv files into dictionary\n    '''\n    in_data=dict()\n    with open(filename) as f:\n        content = csv.reader(f)\n        next(content, None)\n        for row in content:\n            in_data[row[0]] = (float(row[2]), float(row[1]))\n    return in_data\ndef find_height(in_data):\n    '''\n    Find the max and min height of the student\n    '''\n    max_height=0\n    min_height=100000\n    for key in in_data:\n        max_height = max(max_height, in_data[key][0])\n        min_height = min(min_height, in_data[key][0])\n    return (max_height, min_height)\ndef find_weight(in_data):\n    '''\n    Find the max and min weight of the student\n    '''\n    max_weight=0\n    min_weight=100000\n    for key in in_data:\n        max_weight = max(max_weight, in_data[key][1])\n        min_weight = min(min_weight, in_data[key][1])\n    return (max_weight, min_weight)\ndef find_students(in_data):\n    '''\n    Find the average of height and weight of the students\n    '''\n    avg_height=0\n    avg_weight=0\n    for key in in_data:\n        avg_height = avg_height + in_data[key][0]\n        avg_weight = avg_weight + in_data[key][1]\n    avg_height = avg_height/len(in_data)\n    avg_weight = avg_weight/len(in_data)\n    return(avg_height, avg_weight)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if h >= min_height and w >= min_weight:\n        return list(filter(lambda s:s.height>h and s.weight>w, students))\n    else:\n        return []\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i,j in zip(nums1, nums2):\n        if i == j:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    cnt = 0\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    \n    # Initialize a flag that tracks whether we found a pair\n    found_pair = False\n    \n    # Check to see if we have a pair\n    if n1 == 0 and n2 == 0:\n        return 0\n    \n    if n1 == 0:\n        first_element = nums2[0]\n    elif n2 == 0:\n        first_element = nums1[0]\n    \n    # Build the first index\n    first_index = -1\n    for i in range(len(nums1)):\n        if nums1[i] == first_element:\n            first_index = i\n            break\n    \n    # Check to see if we have a pair\n    if first_index == -1:\n        first_element = nums1[0]\n        for i in range(len(nums2)):\n            if nums2[i] == first_element:\n                found_pair = True\n                break\n    \n    return first_index, found_pair\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    s = set(nums1)\n    return len(s & set(nums2))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    i, j = 0, 0\n    count = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_dict = {}\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                if nums1[i] not in count_dict:\n                    count_dict[nums1[i]] = 0\n                count_dict[nums1[i]] += 1\n    \n    return count_dict\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    count = 0\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += power % 10\n        power = power // 10\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power <= 0:\n        return 0\n    return base + power_base_sum(base, power-1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    \n    return base * power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power!= 0:\n        result += (power % base) * (base ** power // base)\n        power //= base\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(0, power):\n        sum += int(base) ** i\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = int(power)\n    if (power == 0):\n        return 1\n    return base + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    power_str = str(power)\n    if len(base_str) < len(power_str):\n        base = base_str[len(power_str):]\n    else:\n        power = power_str[len(base_str):]\n    \n    base_num = int(base_str)\n    power_num = int(power_str)\n    \n    base_num_sum = base_num\n    power_num_sum = power_num\n    \n    while True:\n        \n        if base_num_sum == 0:\n            break\n        \n        elif power_num_sum == 0:\n            break\n        \n        elif base_num_sum < 0:\n            base_num_sum += base_num_sum * (-1)\n            \n        elif power_num_sum < 0:\n            power_num_sum += power_num_sum * (-1)\n            \n        else:\n            base_num_sum -= base_num_sum * base\n            power_num_sum -= power_num_sum * power\n            \n    if base_num_sum == 0:\n        return 0\n    else:\n        return base_num_sum + power_num_sum\n        \n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(0, len(str(base))):\n        result += int(str(base)[i])\n    \n    return result ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    power_sum = 0\n    for index in range(len(base)):\n        base_sum += int(base[index]) ** power\n        power_sum += power\n    return base_sum * base_sum + base_sum + power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 1:\n        return base\n    else:\n        return base + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = ''\n    text3 = ''\n    text4 = ''\n    text5 = ''\n    text6 = ''\n    text7 = ''\n    text8 = ''\n    text9 = ''\n    text10 = ''\n    text11 = ''\n    text12 = ''\n    text13 = ''\n    text14 = ''\n    text15 = ''\n    text16 = ''\n    text17 = ''\n    text18 = ''\n    text19 = ''\n    text20 = ''\n    text21 = ''\n    text22 = ''\n    text23 = ''\n    text24 = ''\n    text25 = ''\n    text26 = ''\n    text27 = ''\n    text28 = ''\n    text29 = ''\n    text30 = ''\n    text31 = ''\n    text32 = ''\n    text33 = ''\n    text34 = ''\n    text35 = ''\n    text36 = ''\n    text37 = ''\n    text38 = ''\n    text39 = ''\n    text40 = ''\n    text41 = ''\n    text42 = ''\n    text43 = ''\n    text44 = ''\n    text45 = ''\n    text46 = ''\n    text47 = ''\n    text48 = ''\n    text49 = ''\n    text50 = ''\n    text51 = ''\n    text52 = ''\n    text53 = ''\n    text54 = ''\n    text55 = ''\n    text56 = ''\n    text57 = ''\n    text58 = ''\n    text59 = ''\n    text60 = ''\n    text61 = ''\n    text62 = ''\n    text63 = ''\n    text64 = ''\n    text65 = ''\n    text66 = ''\n    text67 = ''\n    text68 = ''\n    text69 = ''\n    text70 = ''\n    text71 = ''\n    text72 = ''\n    text73 = ''\n    text74 = ''\n    text75 = ''\n    text76 = ''\n    text77 = ''\n    text78 = ''\n    text79 = ''\n    text80 = ''\n    text81 = ''\n    text82 = ''\n    text83 = ''\n    text84 = ''\n    text85 = ''\n    text86 = ''\n    text87 = ''\n    text88 = ''\n    text89 = ''\n    text90 = ''\n    text91 = ''\n    text92 = ''\n    text93 = ''\n    text94 = ''\n    text95 = ''\n    text96 = ''\n    text97 = ''\n    text98 = ''\n    text99 = ''\n    text100 = ''\n    text101 = ''\n    text102 = ''\n    text103 = ''\n    text104 = ''\n    text105 = ''\n    text106 = ''\n    text107 = ''\n    text108 = ''\n    text109 = ''\n    text110 = ''\n    text111 = ''\n    text112 = ''\n    text113 = ''\n    text114 = ''\n    text115 = ''\n    text116 = ''\n    text117 = ''\n    text118 = ''\n    text119 = ''\n    text120 = ''\n    text121 = ''\n    text122 = ''\n    text123 = ''\n    text124 = ''\n    text125 = ''\n    text126 = ''\n    text127 = ''\n    text128 = ''\n    text129 = ''\n    text130 = ''\n    text131 = ''\n    text132 = ''\n    text133 = ''\n    text134 = ''\n    text135 = ''\n    text136 = ''\n    text137 = ''\n    text138 = ''\n    text139 = ''\n    text140 = ''\n    text141 = ''\n    text142 = ''\n    text143 = ''\n    text144 = ''\n    text145 = ''\n    text146 = ''\n    text147 = ''\n    text148 = ''\n    text149 = ''\n    text150 = ''\n    text151 = ''\n    text152 = ''\n    text153 = ''\n    text154 = ''\n    text155 = ''\n    text156 = ''\n    text157 = ''\n    text158 = ''\n    text159 = ''\n    text160 = ''\n    text161 = ''\n    text162 = ''\n    text163 = ''\n    text164 = ''\n    text165 = ''\n    text166 = ''\n    text167 = ''\n    text168 = ''\n    text169 = ''\n    text170 = ''\n    text171 = ''\n    text172 = ''\n    text173 = ''\n    text174 = ''\n    text175 = ''\n    text176 = ''\n    text177 = ''\n    text178 = ''\n    text179 = ''\n    text180 = ''\n    text181 = ''\n    text182 = ''\n    text183 = ''\n    text184 = ''\n    text185 = ''\n    text186 = ''\n    text187 = ''\n    text188 = ''\n    text189 = ''\n    text190 = ''\n    text191 = ''\n    text192 = ''\n    text193 = ''\n    text194 = ''\n    text195 = ''\n    text196 = ''\n    text197 = ''\n    text198 = ''\n    text199 = ''\n    text200 = ''\n    text201 = ''\n    text202 = ''\n    text203 = ''\n    text204 = ''\n    text205 = ''\n    text206 = ''\n    text207 = ''\n    text208 = ''\n    text209 = ''\n    text210 = ''\n    text211 = ''\n    text212 = ''\n    text213 = ''\n    text214 = ''\n    text215 = ''\n    text216 = ''\n    text217 = ''\n    text218 = ''\n    text219 = ''\n    text220 = ''\n    text221 = ''\n    text222 = ''\n    text223 = ''\n    text224 = ''\n    text225 = ''\n    text226 = ''\n    text227 = ''\n    text228 = ''\n    text229 = ''\n    text230 = ''\n    text231 = ''\n    text232 = ''\n    text233 = ''\n    text234 = ''\n    text235 = ''\n    text236 = ''\n    text237 = ''\n    text238 = ''\n    text239 = ''\n    text240 = ''\n    text241 = ''\n    text242 = ''\n    text243 = ''\n    text244 = ''\n    text245 = ''\n    text246 = ''\n    text247 = ''\n    text248 = ''\n    text249 = ''\n    text250 = ''\n    text251 = ''\n    text252 = ''\n    text253 = ''\n    text254 = ''\n    text255 = ''\n    text256 = ''\n    text257 = ''\n    text258 = ''\n    text259 = ''\n    text260 = ''\n    text261 = ''\n    text262 = ''\n    text263 = ''\n    text264 = ''\n    text265 = ''\n    text266 = ''\n    text267 = ''\n    text268 = ''\n    text269 = ''\n    text270 = ''\n    text271 = ''\n    text272 = ''\n    text273 = ''\n    text274 = ''\n    text275 = ''\n    text276 = ''\n    text277 = ''\n    text278 = ''\n    text279 = ''\n    text280 = ''\n    text281 = ''\n    text282 = ''\n    text283 = ''\n    text284 = ''\n    text285 = ''\n    text286 = ''\n    text287 = ''\n    text288 = ''\n    text289 = ''\n    text290 = ''\n    text291 = ''\n    text292 = ''\n    text293 = ''\n    text294 = ''\n    text295 = ''\n    text296 = ''\n    text297 = ''\n    text298 = ''\n    text299 = ''\n    text300 = ''\n    text301 = ''\n    text302 = ''\n    text303 = ''\n    text304 = ''\n    text305 = ''\n    text306 = ''\n    text307 = ''\n    text308 = ''\n    text309 = ''\n    text310 = ''\n    text311 = ''\n    text312 = ''\n    text313 = ''\n    text314 = ''\n    text315 = ''\n    text316 = ''\n    text317 = ''\n    text318 = ''\n    text319 = ''\n    text320 = ''\n    text321 = ''\n    text322 = ''\n    text323 = ''\n    text324 = ''\n    text325 = ''\n    text326 = ''\n    text327 = ''\n    text328 = ''\n    text329 = ''\n    text330 = ''\n    text331 = ''\n    text332 = ''\n    text333 = ''\n    text334 = ''\n    text335 = ''\n    text336 = '"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotations = []\n    while '\"' in text1:\n        #print(text1)\n        quotations.append(text1[:text1.find('\"')])\n        text1 = text1[text1.find('\"')+1:]\n    quotations.append(text1)\n    return quotations\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2=text1.split(\"\u201c\")\n    text3=text2[0].replace(\"\u201d\", \"\")\n    text4=text3.replace(\"\u2018\", \"\")\n    text5=text4.replace(\"\u2019\", \"\")\n    text6=text5.replace(\"\u201c\", \"\")\n    text7=text6.replace(\"\u201d\", \"\")\n    text8=text7.replace(\"\\n\", \"\")\n    text9=text8.replace(\"'\", \"\")\n    text10=text9.replace(\",\", \"\")\n    text11=text10.replace(\"\u2019\", \"\")\n    text12=text11.replace(\"\u201d\", \"\")\n    text13=text12.replace(\".\", \"\")\n    text14=text13.replace(\"-\", \"\")\n    text15=text14.replace(\"0\", \"\")\n    text16=text15.replace(\". \", \"\")\n    text17=text16.replace(\".\", \"\")\n    text18=text17.replace(\" \", \"\")\n    text19=text18.replace(\",\", \"\")\n    text20=text19.replace(\"-\", \"\")\n    text21=text20.replace(\"0\", \"\")\n    text22=text21.replace(\".\", \"\")\n    text23=text22.replace(\"-\", \"\")\n    text24=text23.replace(\"0\", \"\")\n    text25=text24.replace(\".\", \"\")\n    text26=text25.replace(\"-\", \"\")\n    text27=text26.replace(\"0\", \"\")\n    text28=text27.replace(\".\", \"\")\n    text29=text28.replace(\"-\", \"\")\n    text30=text29.replace(\"0\", \"\")\n    text31=text30.replace(\".\", \"\")\n    text32=text31.replace(\"-\", \"\")\n    text33=text32.replace(\"0\", \"\")\n    text34=text33.replace(\".\", \"\")\n    text35=text34.replace(\"-\", \"\")\n    text36=text35.replace(\"0\", \"\")\n    text37=text36.replace(\".\", \"\")\n    text38=text37.replace(\"-\", \"\")\n    text39=text38.replace(\"0\", \"\")\n    text40=text39.replace(\".\", \"\")\n    text41=text40.replace(\"-\", \"\")\n    text42=text41.replace(\"0\", \"\")\n    text43=text42.replace(\".\", \"\")\n    text44=text43.replace(\"-\", \"\")\n    text45=text44.replace(\"0\", \"\")\n    text46=text45.replace(\".\", \"\")\n    text47=text46.replace(\"-\", \"\")\n    text48=text47.replace(\"0\", \"\")\n    text49=text48.replace(\".\", \"\")\n    text50=text49.replace(\"-\", \"\")\n    text51=text50.replace(\"0\", \"\")\n    text52=text51.replace(\".\", \"\")\n    text53=text52.replace(\"-\", \"\")\n    text54=text53.replace(\"0\", \"\")\n    text55=text54.replace(\".\", \"\")\n    text56=text55.replace(\"-\", \"\")\n    text57=text56.replace(\"0\", \"\")\n    text58=text57.replace(\".\", \"\")\n    text59=text58.replace(\"-\", \"\")\n    text60=text59.replace(\"0\", \"\")\n    text61=text60.replace(\".\", \"\")\n    text62=text61.replace(\"-\", \"\")\n    text63=text62.replace(\"0\", \"\")\n    text64=text63.replace(\".\", \"\")\n    text65=text64.replace(\"-\", \"\")\n    text66=text65.replace(\"0\", \"\")\n    text67=text66.replace(\".\", \"\")\n    text68=text67.replace(\"-\", \"\")\n    text69=text68.replace(\"0\", \"\")\n    text70=text69.replace(\".\", \"\")\n    text71=text70.replace(\"-\", \"\")\n    text72=text71.replace(\"0\", \"\")\n    text73=text72.replace(\".\", \"\")\n    text74=text73.replace(\"-\", \"\")\n    text75=text74.replace(\"0\", \"\")\n    text76=text75.replace(\".\", \"\")\n    text77=text76.replace(\"-\", \"\")\n    text78=text77.replace(\"0\", \"\")\n    text79=text78.replace(\".\", \"\")\n    text80=text79.replace(\"-\", \"\")\n    text81=text80.replace(\"0\", \"\")\n    text82=text81.replace(\".\", \"\")\n    text83=text82.replace(\"-\", \"\")\n    text84=text83.replace(\"0\", \"\")\n    text85=text84.replace(\".\", \"\")\n    text86=text85.replace(\"-\", \"\")\n    text87=text86.replace(\"0\", \"\")\n    text88=text87.replace(\".\", \"\")\n    text89=text88.replace(\"-\", \"\")\n    text90=text89.replace(\"0\", \"\")\n    text91=text90.replace(\".\", \"\")\n    text92=text91.replace(\"-\", \"\")\n    text93=text92.replace(\"0\", \"\")\n    text94=text93.replace(\".\", \"\")\n    text95=text94.replace(\"-\", \"\")\n    text96=text95.replace(\"0\", \"\")\n    text97=text96.replace(\".\", \"\")\n    text98=text97.replace(\"-\", \"\")\n    text99=text98.replace(\"0\", \"\")\n    text100=text99.replace(\".\", \"\")\n    text101=text100.replace(\"-\", \"\")\n    text102=text101.replace(\"0\", \"\")\n    text103=text102.replace(\".\", \"\")\n    text104=text103.replace(\"-\", \"\")\n    text105=text104.replace(\"0\", \"\")\n    text106=text105.replace(\".\", \"\")\n    text107=text106.replace(\"-\", \"\")\n    text108=text107.replace(\"0\", \"\")\n    text109=text108.replace(\".\", \"\")\n    text110=text109.replace(\"-\", \"\")\n    text111=text110.replace(\"0\", \"\")\n    text112=text111.replace(\".\", \"\")\n    text113=text112.replace(\"-\", \"\")\n    text114=text113.replace(\"0\", \"\")\n    text115=text114.replace(\".\", \"\")\n    text116=text115.replace(\"-\", \"\")\n    text117=text116.replace(\"0\", \"\")\n    text118=text117.replace(\".\", \"\")\n    text119=text118.replace(\"-\", \"\")\n    text120=text119.replace(\"0\", \"\")\n    text121=text120.replace(\".\", \"\")\n    text122=text121.replace(\"-\", \"\")\n    text123=text122.replace(\"0\", \"\")\n    text124=text123.replace(\".\", \"\")\n    text125=text124.replace(\"-\", \"\")\n    text126=text125.replace(\"0\", \"\")\n    text127=text126.replace(\".\", \"\")\n    text128=text127.replace(\"-\", \"\")\n    text129=text128.replace(\"0\", \"\")\n    text130=text129.replace(\".\", \"\")\n    text131=text130.replace(\"-\", \"\")\n    text132=text131.replace(\"0\", \"\")\n    text133=text132.replace(\".\", \"\")\n    text134=text133.replace(\"-\", \"\")\n    text135=text134.replace(\"0\", \"\")\n    text136=text135.replace(\".\", \"\")\n    text137=text136.replace(\"-\", \"\")\n    text138=text137.replace(\"0\", \"\")\n    text139=text138.replace(\".\", \"\")\n    text140=text139.replace(\"-\", \"\")\n    text141=text140.replace(\"0\", \"\")\n    text142=text141.replace(\".\", \"\")\n    text143=text142.replace(\"-\", \"\")\n    text144=text143.replace(\"0\", \"\")\n    text145=text144.replace(\".\", \"\")\n    text146=text145.replace(\"-\", \"\")\n    text147=text146.replace(\"0\", \"\")\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(r'\\s',' ',text1)\n    text = text.lower()\n    text = re.sub(r'\\d','',text)\n    text = re.sub('[;/:?{}+-]',' ',text)\n    text = re.sub('\\n','',text)\n    text = re.sub('\\t',' ',text)\n    text = re.sub('\\s',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('[^\\w]',' ',text)\n    text = re.sub('\\d{4}','',text)\n    text = re.sub('\\w',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{1,}',' ',text)\n    text = re.sub('\\s{2,}',' ',text)\n    text = re.sub('\\s{3,}',' ',text)\n    tex"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = re.sub(r'[^\\w\\s]', '', text1) # remove all non-alphabetic characters and any special characters\n    text = re.findall(r'\\s*(?:.|\\n)+?[^\\s\\w]', text1) # split all characters between \" \", \".\", and \"\\n\" into a list\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = re.findall(r'\\b\\w{1}\\b',text1)\n    text_lower = [x.lower() for x in text]\n    return''.join(text_lower)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = re.sub('[^\\w\\s]','',text1.lower())\n    text1 = re.sub(' +','', text1)\n    text1 = re.sub('\\s\\s+','', text1)\n    text1 = re.sub(' +','', text1)\n    text1 = re.sub('\\'', '', text1)\n    text1 = re.sub('\\\"', '', text1)\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Check if string is not empty\n    if len(text1)==0:\n        return''\n    #Check if string contains spaces\n    if text1.find(' ')==-1:\n        return''\n    #Split string\n    words=text1.split(' ')\n    #Iterate words\n    for word in words:\n        if len(word)>3:\n            #Count number of spaces in the word\n            count=word.count(' ')\n            if count==3:\n                #Check if word is double or single spaces\n                if word.startswith(' ')==False:\n                    #Remove the spaces before the first question\n                    quotation_word=word.split(' ',1)[1]\n                    #Remove the spaces after the second question\n                    question_word=quotation_word.split(' ',1)[0]\n                    #Remove the spaces after the third question\n                    rest=question_word.split(' ',1)[1]\n                    #Remove the spaces before the fourth question\n                    if len(rest)==0:\n                        #Return word\n                        return word\n                    else:\n                        #Check if first question is a double or single spaces\n                        if rest.startswith(' ')==False:\n                            #Remove the spaces before the first question\n                            quotation_word=word.split(' ',1)[0]\n                            #Remove the spaces after the second question\n                            question_word=quotation_word.split(' ',1)[1]\n                            #Remove the spaces after the third question\n                            rest=question_word.split(' ',1)[1]\n                            #Remove the spaces before the fourth question\n                            if len(rest)==0:\n                                #Return word\n                                return word\n                            else:\n                                #Check if the rest of the word is double or single spaces\n                                if rest.startswith(' ')==False:\n                                    #Return word\n                                    return word\n                                else:\n                                    #Return double or single spaces\n                                    return''+word\n                        else:\n                            #Remove the spaces before the first question\n                            quotation_word=word.split(' ',1)[0]\n                            #Remove the spaces after the second question\n                            question_word=quotation_word.split(' ',1)[1]\n                            #Remove the spaces after the third question\n                            rest=question_word.split(' ',1)[1]\n                            #Remove the spaces before the fourth question\n                            if len(rest)==0:\n                                #Return word\n                                return word\n                            else:\n                                #Check if the rest of the word is double or single spaces\n                                if rest.startswith(' ')==False:\n                                    #Return double or single spaces\n                                    return''+word\n                                else:\n                                    #Return double or single spaces\n                                    return''+rest\n    return''\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # get the text\n    quotation_text = text1\n    # print(quotation_text)\n    quotation_list = quotation_text.split()\n    #print(quotation_list)\n    quotation_list_string = ''\n    for i in quotation_list:\n        if i!= '':\n            quotation_list_string += i\n    #print(quotation_list_string)\n    # replace spaces with empty strings\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # replace apostrophes with underscores\n    quotation_list_string = quotation_list_string.replace('\"', '')\n    #print(quotation_list_string)\n    # replace numbers with spaces\n    quotation_list_string = quotation_list_string.replace('[', '')\n    #print(quotation_list_string)\n    quotation_list_string = quotation_list_string.replace(']', '')\n    #print(quotation_list_string)\n    # replace single quotes with double quotes\n    quotation_list_string = quotation_list_string.replace(\"'\", '')\n    #print(quotation_list_string)\n    # remove double quotes from quotation list\n    quotation_list_string = quotation_list_string.replace(\"''\", \"\")\n    #print(quotation_list_string)\n    # remove single quotes from quotation list\n    quotation_list_string = quotation_list_string.replace(\"'\", '')\n    #print(quotation_list_string)\n    # remove new line characters\n    quotation_list_string = quotation_list_string.replace('\\n', '')\n    #print(quotation_list_string)\n    # remove extraneous spaces\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove quotation marks\n    quotation_list_string = quotation_list_string.replace('\"', '')\n    #print(quotation_list_string)\n    # replace square brackets with curly brackets\n    quotation_list_string = quotation_list_string.replace('[', '{')\n    #print(quotation_list_string)\n    # replace curly brackets with square brackets\n    quotation_list_string = quotation_list_string.replace(']', '{')\n    #print(quotation_list_string)\n    # replace curly brackets with curly brackets\n    quotation_list_string = quotation_list_string.replace('}', '{')\n    #print(quotation_list_string)\n    # replace double curly brackets with curly brackets\n    quotation_list_string = quotation_list_string.replace('}', '{')\n    #print(quotation_list_string)\n    # remove whitespaces\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove double quotes\n    quotation_list_string = quotation_list_string.replace('\"', '')\n    #print(quotation_list_string)\n    # replace quotes with square brackets\n    quotation_list_string = quotation_list_string.replace('[', '{')\n    #print(quotation_list_string)\n    # replace quotes with square brackets\n    quotation_list_string = quotation_list_string.replace(']', '{')\n    #print(quotation_list_string)\n    # remove single quotes\n    quotation_list_string = quotation_list_string.replace(\"'\", '')\n    #print(quotation_list_string)\n    # remove double quotes\n    quotation_list_string = quotation_list_string.replace('\"', '')\n    #print(quotation_list_string)\n    # remove quotation marks\n    quotation_list_string = quotation_list_string.replace('\"', '')\n    #print(quotation_list_string)\n    # remove one space\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove single space\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove whitespaces\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove new line characters\n    quotation_list_string = quotation_list_string.replace('\\n', '')\n    #print(quotation_list_string)\n    # remove single quote characters\n    quotation_list_string = quotation_list_string.replace(\"'\", '')\n    #print(quotation_list_string)\n    # remove one space character\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove whitespaces\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove whitespaces\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove spaces\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove multiple spaces\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove multiple whitespaces\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove single quotes\n    quotation_list_string = quotation_list_string.replace('\"', '')\n    #print(quotation_list_string)\n    # remove double quotes\n    quotation_list_string = quotation_list_string.replace('}', '{')\n    #print(quotation_list_string)\n    # remove curly brackets\n    quotation_list_string = quotation_list_string.replace('{', '{')\n    #print(quotation_list_string)\n    # remove curly brackets\n    quotation_list_string = quotation_list_string.replace('}', '{')\n    #print(quotation_list_string)\n    # remove curly brackets\n    quotation_list_string = quotation_list_string.replace('}', '{')\n    #print(quotation_list_string)\n    # remove whitespaces\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove one space\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove new line characters\n    quotation_list_string = quotation_list_string.replace('\\n', '')\n    #print(quotation_list_string)\n    # remove quotes\n    quotation_list_string = quotation_list_string.replace('\"', '')\n    #print(quotation_list_string)\n    # remove single quote characters\n    quotation_list_string = quotation_list_string.replace(\"'\", '')\n    #print(quotation_list_string)\n    # remove quotes\n    quotation_list_string = quotation_list_string.replace('\"', '')\n    #print(quotation_list_string)\n    # remove whitespaces\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove new line characters\n    quotation_list_string = quotation_list_string.replace('\\n', '')\n    #print(quotation_list_string)\n    # remove one space\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove whitespaces\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove whitespaces\n    quotation_list_string = quotation_list_string.replace(' ', '')\n    #print(quotation_list_string)\n    # remove spaces\n    quotation_list_string "
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    def get_values(text, count):\n        '''\n        :param text: the text string\n        :param count: the count of the returned values\n        :return: the obtained values\n        '''\n        # string spliting\n        value = list(text)\n        value = value[count:]\n        # get the value\n        value = value[0]\n        # convert to string\n        value = str(value)\n        # return the obtained value\n        return value\n    # get the count\n    count = 0\n    for i in range(len(text1)):\n        # if current index is \" \"\n        if text1[i] =='':\n            # update count\n            count += 1\n            # break\n            break\n        # if current index is not \" \"\n        if text1[i]!='':\n            # update count\n            count += 1\n    # get the index after the break\n    index = len(text1)\n    # return the count\n    return count, index\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return_tup = []\n    for t in range(len(test_tup)):\n        return_tup.append(t_i * t_i)\n    return return_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = [1] * len(test_tup)\n    for t in test_tup:\n        new_tup[t] *= t\n    return tuple(new_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize a tuple.\n    result = ()\n    # Check if the number of arguments match.\n    if len(test_tup)!= len(t_1):\n        print('Length of t_1 and t_2 must be equal')\n        return result\n    # Check if all elements of t_1 are numbers.\n    if all(isinstance(num, (int, float)) for num in t_1):\n        for num in t_1:\n            # If all elements are numbers, then multiply the values of each element of the tuple.\n            result += tuple(num * i for i in t_1)\n    else:\n        print('Each element of t_1 must be a number')\n        return result\n    # Check if all elements of t_2 are numbers.\n    if all(isinstance(num, (int, float)) for num in t_2):\n        for num in t_2:\n            # If all elements are numbers, then multiply the values of each element of the tuple.\n            result += tuple(num * i for i in t_2)\n    else:\n        print('Each element of t_2 must be a number')\n        return result\n    # Return the result.\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = ()\n    for i in range(len(test_tup)):\n        res += (test_tup[i] * test_tup[i+1])\n    return res\n    \ndef display(tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a string of the values in the tuple separated by a space (i.e. t_1, t_2, etc.).\n    '''\n    str = \"\"\n    for i in range(len(tup)):\n        str += str(tup[i]) + \" \"\n    return str\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = len(test_tup)\n    return test_tup, [i * test_tup[i+1] for i in range(l)]\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # TODO: Write your code here\n    # Hint: you can use functools.reduce\n    return tuple(x * y for x, y in zip(*test_tup))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    a_tuple = tuple(test_tup)\n    return a_tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_list = []\n    for i in range(len(test_tup)):\n        t_list.append(tuple(map(lambda x: x * (i + 1), test_tup)))\n    return t_list\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l_tup = []\n    for i in range(len(test_tup)-1):\n        l_tup.append(test_tup[i]*test_tup[i+1])\n    return l_tup\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1+lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    print(lst1+lst2)\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_list_ = []\n    for i in range(len(lst1)):\n        sum_list_.append(lst1[i]+lst2[i])\n    return sum_list_\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1+lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n    \ndef compare_lists(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns a string showing the differences.\n    '''\n    return '+'+'-'*(len(lst1)-len(lst2))+'+'+'-'*len(lst1)+'+'+'-'*(len(lst2)-len(lst1))+'+'\n    \ndef compare_strings(s1,s2):\n    '''\n    Write a function takes as input a string s1 and a string s2. The string is compared if it is a substring of the string s1, where each substring consists of an even number of characters.\n    '''\n    return '+'+'-'*len(s1)+'+'+'-'*len(s2)+'+'+'-'*(len(s1)-len(s2))+'+'\n    \ndef print_diff_lists(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns a string showing the differences.\n    '''\n    return '+'+'-'*(len(lst1)-len(lst2))+'+'+'-'*len(lst1)+'+'+'-'*(len(lst2)-len(lst1))+'+'\n    \ndef divide_string_into_lists(s1,s2):\n    '''\n    Write a function takes as input a string s1 and a string s2. The string is divided into substrings of size 3, and the result is a list of the substrings.\n    '''\n    return '+'+'-'*(len(s1)-len(s2))+'+'+'-'*len(s1)+'+'+'-'*(len(s2)-len(s1))+'+'\n    \ndef print_diff_strings(s1,s2):\n    '''\n    Write a function takes as input a string s1 and a string s2. The string is divided into substrings of size 3, and the result is a string showing the differences.\n    '''\n    return '+'+'-'*(len(s1)-len(s2))+'+'+'-'*len(s1)+'+'+'-'*(len(s2)-len(s1))+'+'\n    \ndef main():\n    print('==========================')\n    print('Difference Lists')\n    print('==========================')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1,2] - [2,3]')\n    print('[2,3] - [1,2]')\n    print('[1,2] + [3,4]')\n    print('[1,2] - [3,4]')\n    print('[1,2] + [3]')\n    print('[1,2] - [3]')\n    print('[1,2] + [3]')\n    print('[2,3] + [1]')\n    print('[2,3] - [1]')\n    print('[2,3] + [1]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1,2] + [3]')\n    print('[1,2] - [3]')\n    print('[1,2] + [3]')\n    print('[1,2] - [3]')\n    print('[1,2] + [3]')\n    print('[2,3] + [1]')\n    print('[2,3] - [1]')\n    print('[2,3] + [1]')\n    print('[2,3] - [1]')\n    print('[2,3] + [1]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1,2] + [3]')\n    print('[1,2] - [3]')\n    print('[1,2] + [3]')\n    print('[1,2] - [3]')\n    print('[1,2] + [3]')\n    print('[1,2] - [3]')\n    print('[1,2] + [3]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + [2]')\n    print('[1] - [2]')\n    print('[1] + "
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for i in lst1:\n        sum += i\n    for i in lst2:\n        sum += i\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_lst = []\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            new_lst.append(lst1[i]+lst2[j])\n    return new_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    # Your code here\n    \n    return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # First pass, track duplicates and last pass, remove duplicates\n    first_duplicate = True\n    last_duplicate = False\n    for num in nums:\n        if num == nums[0] and first_duplicate:\n            first_duplicate = False\n        elif num == nums[-1] and not last_duplicate:\n            last_duplicate = True\n        elif num == nums[0] and not first_duplicate:\n            last_duplicate = True\n        elif num == nums[-1] and not last_duplicate:\n            first_duplicate = True\n    if last_duplicate:\n        nums.remove(nums[-1])\n        return nums\n    else:\n        return nums\n    \ndef return_consecutive_duplicates(nums):\n    '''\n    Given a list of numbers, return a list of the duplicates removed.\n    '''\n    # First pass, track duplicates and last pass, remove duplicates\n    first_duplicate = True\n    last_duplicate = False\n    for num in nums:\n        if num == nums[0] and first_duplicate:\n            first_duplicate = False\n        elif num == nums[-1] and not last_duplicate:\n            last_duplicate = True\n        elif num == nums[0] and not first_duplicate:\n            last_duplicate = True\n        elif num == nums[-1] and not last_duplicate:\n            first_duplicate = True\n    if last_duplicate:\n        nums.remove(nums[-1])\n        return nums\n    else:\n        return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_list = []\n    for i,item in enumerate(nums):\n        if nums[i+1]!= nums[i]:\n            new_list.append(nums[i])\n    return new_list\n    \ndef unique_number_of_elements(nums):\n    '''\n    Write a function that takes a list and returns the number of unique elements in the list.\n    '''\n    new_list = []\n    for i,item in enumerate(nums):\n        new_list.append(item)\n    if len(set(new_list)) == len(new_list):\n        return len(new_list)\n    else:\n        return 0\n    \ndef longest_substring(nums):\n    '''\n    Write a function to find the longest substring in a given list of strings.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n        else:\n            for j in range(i,len(nums)):\n                if nums[i] == nums[j]:\n                    new_list.append(nums[i])\n                    break\n            break\n    return max(len(new_list),len(set(new_list)))\n    \ndef rotate_list(nums):\n    '''\n    Write a function that takes a list and returns a new list with the values rotated left to the right.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        new_list.append(nums[i])\n    return new_list\n    \ndef find_all_permutations(nums):\n    '''\n    Write a function that takes a list and returns all possible permutations.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        new_list.append(str(nums[i]))\n        for j in range(len(nums)):\n            new_list.append(str(nums[i]))\n            if j+1 < len(nums):\n                new_list.append(str(nums[i]) + str(nums[j+1]))\n    return new_list\n    \ndef check_sum(target, nums):\n    '''\n    Write a function that takes a target value and a list of numbers and returns the sum of the numbers, if the sum equals the target.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i)\n        for j in nums:\n            if sum(new_list) == target:\n                return sum(new_list)\n            elif sum(new_list) > target:\n                break\n    return 0\n    \ndef string_compression(string):\n    '''\n    Write a function that takes a string and returns all the compression form it.\n    '''\n    new_list = []\n    for i in string:\n        new_list.append(i)\n        for j in string:\n            if i == j:\n                new_list.append(j)\n            elif sum(new_list) <= sum(string):\n                break\n    return new_list\n    \ndef array_to_string(nums):\n    '''\n    Write a function that takes a list of numbers and returns a string of those numbers separated with a space.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(str(i))\n        for j in nums:\n            if i == j:\n                new_list.append(j)\n                break\n    return''.join(new_list)\n    \ndef product_of_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns the product of the numbers.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i)\n        for j in nums:\n            if i == j:\n                new_list.append(j)\n                break\n    return len(new_list)\n    \ndef check_pair(target, nums):\n    '''\n    Write a function that takes a target value and a list of numbers and returns the sum of the numbers, if the sum equals the target.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i)\n        for j in nums:\n            if i == j and j not in nums:\n                return sum(new_list)\n            elif sum(new_list) == target:\n                return sum(new_list)\n            elif sum(new_list) > target:\n                break\n    return 0\n    \ndef find_pair_sum(target, nums):\n    '''\n    Write a function that takes a target value and a list of numbers and returns the sum of the numbers, if the sum equals the target.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i)\n        for j in nums:\n            if i == j and j not in nums:\n                return sum(new_list)\n            elif sum(new_list) == target:\n                return sum(new_list)\n            elif sum(new_list) > target:\n                break\n    return 0\n    \ndef product_of_three_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns the product of the three numbers.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i)\n        for j in nums:\n            if i == j:\n                new_list.append(j)\n                break\n    return len(new_list)\n    \ndef check_sum_of_three_numbers(target, nums):\n    '''\n    Write a function that takes a target value and a list of numbers and returns the sum of the numbers, if the sum equals the target.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i)\n        for j in nums:\n            if i == j:\n                new_list.append(j)\n                break\n    return sum(new_list) == target\n    \ndef get_greater_sum(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of the numbers, if the sum equals the target.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i)\n        for j in nums:\n            if i == j:\n                new_list.append(j)\n                break\n    return sum(new_list)\n    \ndef largest_and_smallest_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns the largest number and the smallest number.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i)\n        for j in nums:\n            if i == j:\n                new_list.append(j)\n                break\n    return max(new_list), min(new_list)\n    \ndef search_index_range(nums):\n    '''\n    Write a function that takes a list of numbers and returns the index range of the target.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i)\n        for j in nums:\n            if i == j:\n                new_list.append(j)\n                break\n    return new_list\n    \ndef all_permutations(nums):\n    '''\n    Write a function that takes a list of numbers and returns all the permutations of the numbers.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        for item in itertools.permutations(nums,i+1):\n            new_list.append(item)\n            break\n    return new_list\n    \ndef find_all_permutations_2(nums):\n    '''\n    Write a function that takes a list of numbers and returns all the permutations of the numbers.\n    '''\n    new_list = []\n    for i in nums:\n        for ite"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    g = groupby(sorted(nums), lambda x: x[0] - x[1])\n    for k,g in groupby(enumerate(sorted(nums)), lambda x: x[0] - x[1]):\n        if len(list(g)) > 1:\n            yield list(g)[-2]\n        else:\n            continue\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # keep a set of the first and last duplicates\n    set_a = set(nums[0])\n    set_b = set(nums[-1])\n    # if the set contains duplicate values then merge them\n    if set_a.intersection(set_b):\n        # merge the two sets back into a new one\n        for i in nums:\n            if i not in set_a:\n                set_a.update(i)\n        # return the new set of unique elements\n        return list(set_a)\n    # otherwise return the original list\n    else:\n        return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # concat list into a string and find the index of a list in it\n    str = ''.join([str(i) for i in nums])\n    list_index = [i for i, x in enumerate(str) if x == str[i]]\n    return list_index\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # remove duplicates, if list is longer than two, then remove duplicates from the beginning\n    # list and append duplicate to the end list\n    # Example:\n    # [1,1,1,1,1,2,2,2,3,3,3]\n    # [1,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,7,7,8,8,9,9,10]\n    # Example:\n    # [1,2,1,1,1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]\n    # return: [1,2,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]\n    # e.g. for 2 lists [1,2,3,3,3,4,4,5,5,6,6,7,7,8,8]\n    # return: [1,2,1,1,2,2,3,3,3,3,4,4,4,5,5,5,6,6,7,7,8,8,9,9,10]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    i, result = 0, []\n    while i < len(nums):\n        if nums[i] not in seen:\n            seen.add(nums[i])\n            result.append(nums[i])\n        i += 1\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Edge case:\n    if len(nums) == 1:\n        return nums\n    # If list is empty:\n    if len(nums) == 0:\n        return []\n    # Initialize an array:\n    seen = set()\n    # Iterate through list:\n    for num in nums:\n        # Remove duplicate\n        if num not in seen:\n            seen.add(num)\n            # Update the new list:\n            nums.remove(num)\n            # Update the new list:\n            nums.append(num)\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] == nums[i + 1]:\n            nums.pop(i + 1)\n        else:\n            i += 1\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return []\n    if len(nums) == 1:\n        return nums\n    pairs = [(i, j) for i, j in groupby(sorted(nums))]\n    pairs.sort()\n    l = []\n    for i, j in pairs:\n        if i!= j:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = 2 * math.pi * r\n    b = math.tan(h/2)\n    c = h/2\n    return a * (1 + b*c) * math.exp(-b*c)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=math.pi*r*r/6\n    phi=math.pi/6\n    print(\"\\nthe surface area of a cone is :\\n\")\n    a=math.pi*r*r/6\n    print(\"surface area is :\",a,\"\\n\")\n    b=math.pi*h*h/12\n    print(\"the surface area of a cone is :\",b,\"\\n\")\n    c=a*math.cos(phi)\n    d=a*math.sin(phi)\n    e=b*math.cos(phi)\n    f=b*math.sin(phi)\n    g=c+d\n    h=e+f\n    print(\"the surface area of a cone is :\",g,\"\\n\")\n    print(\"the lateral surface area of a cone is :\",h,\"\\n\")\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    m=1.0\n    s = 1.0\n    for _ in range(h):\n        m=m+0.5*(1+math.cos(((math.pi/6)*r)))\n        s=s+0.5*(1+math.cos(((math.pi/6)*r)))\n    return m*s\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r*h)*math.cos(math.radians(45))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    f = (math.pi/180)*r\n    theta = (math.atan(f))\n    t = theta * 180 / math.pi\n    phi = (f)\n    return math.sqrt((math.sin(theta))**2+(math.sin(phi))**2)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r_sin = math.sin(math.radians(r))\n    r_cos = math.cos(math.radians(r))\n    h_sin = math.sin(math.radians(h))\n    h_cos = math.cos(math.radians(h))\n    \n    return 0.5*((r_sin**2)+(r_cos**2))*(h_cos**2)*(h_sin**2)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    R = h\n    s = (r**3)/3\n    if s<1:\n        s=1\n    h1 = (R*s**2)/(r**2)\n    return h1\ndef area_of_a_cone(r,h):\n    '''\n    Write a function that returns the area of a cylinder given its radius r and its height h.\n    '''\n    h1 = lateralsurface_cone(r,h)\n    return h1\ndef volume_of_a_cylinder(r,h):\n    '''\n    Write a function that returns the volume of a cylinder given its radius r and its height h.\n    '''\n    h1 = lateralsurface_cone(r,h)\n    return (r**3)*h1**3\ndef sphere_volume(r):\n    '''\n    Write a function that returns the volume of a sphere given its radius r.\n    '''\n    return math.pi*(3.14159/4)**2*r**3\ndef cylinder_volume(r,h):\n    '''\n    Write a function that returns the volume of a cylinder given its radius r and its height h.\n    '''\n    return area_of_a_cylinder(r,h) * (r**3)*(1-h)**3\ndef trapezoid_volume(r1,r2,h):\n    '''\n    Write a function that returns the volume of a trapezoid given its radius r1 and its radius r2 and its height h.\n    '''\n    v = ((r1**3)/(3*h))*((r2**3)/(3*h))*math.tan(math.radians(h))\n    return v\ndef tetra_volume(r1,r2,h):\n    '''\n    Write a function that returns the volume of a trapezoid given its radius r1 and its radius r2 and its height h.\n    '''\n    v = ((r1**3)/(3*h))*((r2**3)/(3*h))*math.tan(math.radians(h))\n    return v\ndef is_equilateral(r,h):\n    '''\n    Write a function that returns True if r is equilateral, or False otherwise.\n    '''\n    v = volume_of_a_cylinder(r,h)\n    if v == 0:\n        return True\n    else:\n        return False\ndef is_right_angled_surface(r):\n    '''\n    Write a function that returns True if r is right angled, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_right_angled_surface_with_given_height(r):\n    '''\n    Write a function that returns True if r is right angled, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_right_angled_surface_with_given_radius(r):\n    '''\n    Write a function that returns True if r is right angled, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_right_angled_surface_with_given_height_and_given_radius(r):\n    '''\n    Write a function that returns True if r is right angled, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_parallel_to_surface(r,h):\n    '''\n    Write a function that returns True if r is parallel to surface, or False otherwise.\n    '''\n    v = volume_of_a_cylinder(r,h)\n    if v == 0:\n        return True\n    else:\n        return False\ndef is_parallel_to_surface_with_given_height(r):\n    '''\n    Write a function that returns True if r is parallel to surface, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_parallel_to_surface_with_given_radius(r):\n    '''\n    Write a function that returns True if r is parallel to surface, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_parallel_to_surface_with_given_height_and_given_radius(r):\n    '''\n    Write a function that returns True if r is parallel to surface, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_right_angled_surface_with_given_height_and_given_radius(r):\n    '''\n    Write a function that returns True if r is right angled, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_right_angled_surface_with_given_height_and_given_radius_and_given_height(r):\n    '''\n    Write a function that returns True if r is right angled, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_right_angled_surface_with_given_height_and_given_radius_and_given_height(r):\n    '''\n    Write a function that returns True if r is right angled, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_right_angled_surface_with_given_height_and_given_radius_and_given_radius(r):\n    '''\n    Write a function that returns True if r is right angled, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_surface_convex(r,h):\n    '''\n    Write a function that returns True if r is convex, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_surface_concave(r,h):\n    '''\n    Write a function that returns True if r is concave, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_surface_concave_with_given_height(r):\n    '''\n    Write a function that returns True if r is concave, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_surface_concave_with_given_height_and_given_radius(r):\n    '''\n    Write a function that returns True if r is concave, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_surface_concave_with_given_height_and_given_radius_and_given_height(r):\n    '''\n    Write a function that returns True if r is concave, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_surface_concave_with_given_height_and_given_radius_and_given_height(r):\n    '''\n    Write a function that returns True if r is concave, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_parallel_to_surface_concave(r,h):\n    '''\n    Write a function that returns True if r is parallel to concave, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_parallel_to_surface_concave_with_given_height(r):\n    '''\n    Write a function that returns True if r is parallel to concave, or False otherwise.\n    '''\n    if r<0:\n        return True\n    else:\n        return False\ndef is_parallel_to_surface_concave_with_given_height_and_given_radius(r):\n    '''\n    Write a function that returns True if r is parallel to concave, or False otherwise.\n    '''\n    if r<0:\n        return True\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    result=[]\n    num=1\n    for x in range(0,int(math.sqrt(r**2+h**2))):\n        print(x)\n        if num%2==0:\n            result.append(num)\n        else:\n            num+=1\n    print(\"the  result is \" + str(result))\n    return result\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi * math.pow(r,2) * h)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2*math.pi*(r**2)*math.sin(h)\n    return s\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s+',':',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[,\\.]', ':', text)\n    text = re.sub('[,\\.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]{2}', ':', text)\n    text = re.sub('[ ]{2}[.]', ':', text)\n    text = re.sub('[ ]{2}[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]\\s+', ':', text)\n    text = re.sub('[ ]\\s+[.]', ':', text)\n    text = re.sub('[ ]\\s+[.]\\s+', ':', text)\n    text = re.sub('\\s+', ':'"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace(',',':')\n    text = text.replace(';',':')\n    text = text.replace('-','--')\n    text = text.replace('!','!')\n    text = text.replace(';','--')\n    text = text.replace('!','!')\n    text = text.replace('[',':')\n    text = text.replace(']',':')\n    text = text.replace('\\\\',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Need to replace spaces, commas, or dots with a colon.\n    # \"bbb.ccc.dddd\" -> \"bbbb:cccc:dddd\"\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    text = text.replace('\\n', '')\n    text = text.replace('\\t', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text[0:i] + ':'+ text[i+1:]\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    text = text.replace(\"  \",\" \")\n    text = text.replace(\" ,\",\" \")\n    text = text.replace(\" ,\",\":\")\n    text = text.replace(\" ,\",\":\")\n    text = text.replace(\" ,\",\";\")\n    text = text.replace(\"  \",\" \")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\":\")\n    text = text.replace(\"  ;\",\";\")\n    text = text.replace(\"  ;\",\";\")\n    text = text"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for char in text:\n        if char == \" \":\n            text = text.replace(\" \", \":\")\n        if char == \",\":\n            text = text.replace(\",\", \":\")\n        if char == \".\":\n            text = text.replace(\".\", \":\")\n    return text\ndef replace_numbers(text):\n    '''\n    Write a function to replace all the numbers with a dash.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isdigit():\n            new_text += char\n        else:\n            new_text += \"_\"\n    return new_text\ndef replace_sym_with_special_char(text):\n    '''\n    Write a function to replace all symbols with a space.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == '!':\n            new_text += \" \"\n        elif char == '?':\n            new_text += \" \"\n        elif char == '@':\n            new_text += \" \"\n        elif char == '#':\n            new_text += \" \"\n        elif char == '$':\n            new_text += \" \"\n        elif char == '%':\n            new_text += \" \"\n        elif char == '&':\n            new_text += \" \"\n        elif char == '*':\n            new_text += \" \"\n        elif char == '+':\n            new_text += \" \"\n        elif char == '-':\n            new_text += \" \"\n        elif char == '=':\n            new_text += \" \"\n        elif char == '&':\n            new_text += \" \"\n        elif char == '_':\n            new_text += \" \"\n        elif char == '\"':\n            new_text += \" \"\n        elif char == '!':\n            new_text += \" \"\n        elif char == '?':\n            new_text += \" \"\n        elif char == '@':\n            new_text += \" \"\n        elif char == '#':\n            new_text += \" \"\n        elif char == '$':\n            new_text += \" \"\n        elif char == '%':\n            new_text += \" \"\n        elif char == '&':\n            new_text += \" \"\n        elif char == '*':\n            new_text += \" \"\n        elif char == '+':\n            new_text += \" \"\n        elif char == '-':\n            new_text += \" \"\n        elif char == '=':\n            new_text += \" \"\n        elif char == '&':\n            new_text += \" \"\n        elif char == '_':\n            new_text += \" \"\n        elif char == '\"':\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text\ndef replace_spaces_with_underscores(text):\n    '''\n    Write a function to replace spaces with underscores.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text\ndef remove_start_and_end_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces, periods, and newlines.\n    '''\n    for char in text:\n        if char == \"\\n\":\n            text = text.replace(\"\\n\", \"\")\n        elif char == \"\\r\":\n            text = text.replace(\"\\r\", \"\")\n        elif char == \"\\t\":\n            text = text.replace(\"\\t\", \"\")\n        elif char == \" \":\n            text = text.replace(\" \", \"\")\n        elif char == \".\":\n            text = text.replace(\". \", \"\")\n        elif char == \"&\":\n            text = text.replace(\"&\", \"\")\n    return text\ndef remove_special_char(text):\n    '''\n    Write a function to remove all special characters from the text.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isalnum() or char == \"_\" or char == \".\" or char == \",\":\n            new_text += char\n        else:\n            new_text += \" \"\n    return new_text\ndef replace_spaces_with_underscores(text):\n    '''\n    Write a function to replace spaces with underscores.\n    '''\n    for char in text:\n        if char == \"\\n\":\n            text = text.replace(\"\\n\", \"_\")\n        elif char == \"\\r\":\n            text = text.replace(\"\\r\", \"_\")\n        elif char == \"\\t\":\n            text = text.replace(\"\\t\", \"_\")\n        elif char == \" \":\n            text = text.replace(\" \", \"_\")\n        elif char == \".\":\n            text = text.replace(\". \", \"_\")\n        elif char == \"&\":\n            text = text.replace(\"&\", \"_\")\n    return text\ndef remove_special_char(text):\n    '''\n    Write a function to remove all special characters from the text.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isalnum() or char == \"_\" or char == \".\" or char == \",\":\n            new_text += char\n        else:\n            new_text += \" \"\n    return new_text\ndef replace_with_hiragana_kana(text):\n    '''\n    Write a function to replace all hiragana and kana characters with different special characters.\n    '''\n    for char in text:\n        if char.isalpha() or char == \"_\" or char == \".\" or char == \",\":\n            if char.isupper():\n                if char.isupper():\n                    char = \"HE\"\n                else:\n                    char = \"SH\"\n            elif char.islower():\n                if char.islower():\n                    char = \"HH\"\n                else:\n                    char = \"SH\"\n            elif char.isupper():\n                if char.islower():\n                    char = \"HH\"\n                else:\n                    char = \"SH\"\n            elif char.isupper():\n                if char.isupper():\n                    char = \"HH\"\n                else:\n                    char = \"SH\"\n            else:\n                char = char\n        else:\n            char = \" \"\n        new_text = replace_sym_with_special_char(char)\n    return new_text\ndef replace_with_katakana_hiragana(text):\n    '''\n    Write a function to replace all katakana and hiragana characters with different special characters.\n    '''\n    for char in text:\n        if char.isalpha() or char == \"_\" or char == \".\" or char == \",\":\n            if char.isupper():\n                if char.isupper():\n                    char = \"KA\"\n                else:\n                    char = \"HI\"\n            elif char.islower():\n                if char.islower():\n                    char = \"KA\"\n                else:\n                    char = \"HI\"\n            elif char.isupper():\n                if char.islower():\n                    char = \"KA\"\n                else:\n                    char = \"HI\"\n            elif char.isupper():\n                if char.isupper():\n                    char = \"KA\"\n                else:\n                    char = \"HI\"\n            else:\n                char = char\n        else:\n            char = \" \"\n        new_text = replace_sym_with_special_char(char)\n    return new_text\ndef replace_with_katakana_kana(text):\n    '''\n    Write a function to replace all katakana and kana characters with different special characters.\n    '''\n    for char in text:\n        if char.isalpha() or char == \"_\" or char == \".\" or char == \",\":\n            if char.isupper():\n                if char.isupper():\n                    char = \"KA\"\n                else:\n                    char = \"HI\"\n            elif char.islower():\n                if char.islower():\n                    char = \"KA\"\n                else:\n                    char = \"HI\"\n            elif char.isupper():\n                if char.isupper():\n                    char = \"KA\"\n                else:\n                    cha"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(',',' : ')\n    text = text.replace('.',' : ')\n    text = text.replace('!', ': ')\n    text = text.replace('?', ': ')\n    text = text.replace('-',' : ')\n    text = text.replace('_',' : ')\n    text = text.replace('&',' : ')\n    text = text.replace('$',' : ')\n    text = text.replace('!',' : ')\n    text = text.replace('?',' : ')\n    text = text.replace('-',' : ')\n    text = text.replace('_',' : ')\n    text = text.replace('&',' : ')\n    text = text.replace('$',' : ')\n    text = text.replace('!',' : ')\n    text = text.replace('?',' : ')\n    text = text.replace('-',' : ')\n    text = text.replace('_',' : ')\n    text = text.replace('&',' : ')\n    text = text.replace('$',' : ')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('\\s+',' ', text)\n    text = re.sub('\\d+',' : ', text)\n    text = re.sub('\\.\\.',' : ', text)\n    text = re.sub('\\,',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\;',' : ', text)\n    text = re.sub('\\?',' : ', text)\n    text = re.sub('\\!',' : ', text)\n    text = re.sub('\\|',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\<',' : ', text)\n    text = re.sub('\\>',' : ', text)\n    text = re.sub('\\@',' : ', text)\n    text = re.sub('\\_',' : ', text)\n    text = re.sub('\\n',' : ', text)\n    text = re.sub('\\t',' : ', text)\n    text = re.sub('\\.',' : ', text)\n    text = re.sub('\\,',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\;',' : ', text)\n    text = re.sub('\\?',' : ', text)\n    text = re.sub('\\!',' : ', text)\n    text = re.sub('\\|',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\<',' : ', text)\n    text = re.sub('\\>',' : ', text)\n    text = re.sub('\\@',' : ', text)\n    text = re.sub('\\_',' : ', text)\n    text = re.sub('\\n',' : ', text)\n    text = re.sub('\\t',' : ', text)\n    text = re.sub('\\.',' : ', text)\n    text = re.sub('\\,',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\;',' : ', text)\n    text = re.sub('\\?',' : ', text)\n    text = re.sub('\\!',' : ', text)\n    text = re.sub('\\|',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\<',' : ', text)\n    text = re.sub('\\>',' : ', text)\n    text = re.sub('\\@',' : ', text)\n    text = re.sub('\\_',' : ', text)\n    text = re.sub('\\n',' : ', text)\n    text = re.sub('\\t',' : ', text)\n    return text\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('\\s+',' ', text)\n    text = re.sub('\\d+',' : ', text)\n    text = re.sub('\\.\\.',' : ', text)\n    text = re.sub('\\,',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\;',' : ', text)\n    text = re.sub('\\?',' : ', text)\n    text = re.sub('\\!',' : ', text)\n    text = re.sub('\\|',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\<',' : ', text)\n    text = re.sub('\\>',' : ', text)\n    text = re.sub('\\@',' : ', text)\n    text = re.sub('\\_',' : ', text)\n    text = re.sub('\\n',' : ', text)\n    text = re.sub('\\t',' : ', text)\n    text = re.sub('\\.',' : ', text)\n    text = re.sub('\\,',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\;',' : ', text)\n    text = re.sub('\\?',' : ', text)\n    text = re.sub('\\!',' : ', text)\n    text = re.sub('\\|',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\<',' : ', text)\n    text = re.sub('\\>',' : ', text)\n    text = re.sub('\\@',' : ', text)\n    text = re.sub('\\_',' : ', text)\n    text = re.sub('\\n',' : ', text)\n    text = re.sub('\\t',' : ', text)\n    text = re.sub('\\.',' : ', text)\n    text = re.sub('\\,',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\;',' : ', text)\n    text = re.sub('\\?',' : ', text)\n    text = re.sub('\\!',' : ', text)\n    text = re.sub('\\|',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\<',' : ', text)\n    text = re.sub('\\>',' : ', text)\n    text = re.sub('\\@',' : ', text)\n    text = re.sub('\\_',' : ', text)\n    text = re.sub('\\n',' : ', text)\n    text = re.sub('\\t',' : ', text)\n    return text\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('\\s+',' ', text)\n    text = re.sub('\\d+',' : ', text)\n    text = re.sub('\\.\\.',' : ', text)\n    text = re.sub('\\,',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\;',' : ', text)\n    text = re.sub('\\?',' : ', text)\n    text = re.sub('\\!',' : ', text)\n    text = re.sub('\\|',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\<',' : ', text)\n    text = re.sub('\\>',' : ', text)\n    text = re.sub('\\@',' : ', text)\n    text = re.sub('\\_',' : ', text)\n    text = re.sub('\\n',' : ', text)\n    text = re.sub('\\t',' : ', text)\n    text = re.sub('\\.',' : ', text)\n    text = re.sub('\\,',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\;',' : ', text)\n    text = re.sub('\\?',' : ', text)\n    text = re.sub('\\!',' : ', text)\n    text = re.sub('\\|',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\<',' : ', text)\n    text = re.sub('\\>',' : ', text)\n    text = re.sub('\\@',' : ', text)\n    text = re.sub('\\_',' : ', text)\n    text = re.sub('\\n',' : ', text)\n    text = re.sub('\\t',' : ', text)\n    text = re.sub('\\.',' : ', text)\n    text = re.sub('\\,',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\;',' : ', text)\n    text = re.sub('\\?',' : ', text)\n    text = re.sub('\\!',' : ', text)\n    text = re.sub('\\|',' : ', text)\n    text = re.sub('\\:',' : ', text)\n    text = re.sub('\\<',' : ', text)\n    text = re.sub('\\>',' : '"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first_occurrence = 0\n    last_occurrence = len(A)-1\n    while True:\n        if A[first_occurrence] == x:\n            return first_occurrence\n        if A[last_occurrence] == x:\n            return last_occurrence\n        if A[first_occurrence] < x < A[last_occurrence]:\n            return first_occurrence\n        if A[first_occurrence] > x > A[last_occurrence]:\n            return last_occurrence\n        last_occurrence -= 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    start = 0\n    end = len(A) - 1\n    \n    while (start <= end):\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    return -1\n    \ndef find_second_occurrence(A, x):\n    '''\n    Write a function to find the index of the second occurrence of a given number in a sorted array.\n    '''\n    \n    start = 0\n    end = len(A) - 1\n    \n    while (start <= end):\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    return -1\n    \ndef find_third_occurrence(A, x):\n    '''\n    Write a function to find the index of the third occurrence of a given number in a sorted array.\n    '''\n    \n    start = 0\n    end = len(A) - 1\n    \n    while (start <= end):\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    return -1\n    \ndef find_fourth_occurrence(A, x):\n    '''\n    Write a function to find the index of the fourth occurrence of a given number in a sorted array.\n    '''\n    \n    start = 0\n    end = len(A) - 1\n    \n    while (start <= end):\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    return -1\n    \ndef remove_value(A, x):\n    '''\n    Write a function to remove the first occurrence of a given number from a sorted array.\n    '''\n    \n    if find_first_occurrence(A, x)!= -1:\n        index = find_first_occurrence(A, x)\n        A[index] = A[index] - 1\n        \n        if A[index] == 0:\n            A[index] = -1\n    \n    return A\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # this is O(n)\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # define the search loop\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n    \n    \ndef main():\n    print(find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\n    print(find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))\n    print(find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            return mid\n            \n        if A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    return -1\n    \ndef find_second_occurrence(A, x):\n    '''\n    Write a function to find the index of the second occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            return mid\n            \n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Corner case\n    if len(A) == 1:\n        if A[0] == x:\n            return 0\n        else:\n            return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    def binary_search(A, x, start, end):\n        if start > end:\n            return None\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            return binary_search(A, x, start, mid - 1)\n        else:\n            return binary_search(A, x, mid + 1, end)\n    \n    return binary_search(A, x, 0, len(A) - 1)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n    \n    # Step 1: find the middle of array, if x is in the middle, return the index,\n    # otherwise, return the index of the first occurrence of x in the array\n    mid = (len(A) + 1) // 2\n    if A[mid] == x:\n        return mid\n    \n    # Step 2: find the left half of the array, if x is in left half, return the index,\n    # otherwise, return the index of the first occurrence of x in the array\n    if A[mid] < x:\n        return find_first_occurrence(A[mid + 1:], x)\n    else:\n        return find_first_occurrence(A[:mid], x)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr = sorted(arr)\n    # print(arr)\n    curr_prod = 1\n    prev = 0\n    n = len(arr)\n    # print(arr[0],arr[n-1])\n    for i in range(1,n-1):\n        if (i > 1):\n            curr_prod = curr_prod * arr[i-1]\n        prev = arr[i]\n        # print(prev, curr_prod)\n        curr_prod = curr_prod * arr[i]\n        # print(curr_prod)\n        prev = arr[i]\n        # print(prev, curr_prod)\n    curr_prod = curr_prod * arr[n-2]\n    # print(curr_prod)\n    return curr_prod\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    def sublist_product(arr, i, j):\n        if i >= j:\n            return 0\n        return (arr[i] * sublist_product(arr, i+1, j))\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    max_sum = 0\n    temp_sum = 0\n    \n    for i in range(len(arr)):\n        temp_sum += arr[i]\n        if i == 0 or arr[i]!= arr[i-1]:\n            max_sum += temp_sum\n            temp_sum = 0\n    return max_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + sum_Of_Subarray_Prod(i)\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total_sum = 0\n    #iterate over list of subarrays\n    for subArray in range(len(arr)):\n        #add each element to the total sum\n        total_sum += arr[subArray]\n        #check if subarray has already been calculated\n        if(subArray > 0):\n            #calculate subarray sum using indices\n            total_sum += arr[subArray - 1] * subArray\n            #iterate over rest of subarrays\n            for i in range(subArray + 1, len(arr)):\n                #add element sum to total sum\n                total_sum += arr[i] * arr[subArray - 1]\n                #increment subarray sum\n                total_sum += arr[subArray - 1] * arr[i]\n    return total_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    l = len(arr)\n    count = 0\n    i = 0\n    j = 0\n    for i in range(l):\n        j = 0\n        while j<l:\n            if arr[i][j] == 1:\n                count += 1\n            j+=1\n        i+=1\n    return count\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Your code here\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum = sum + arr[i] * arr[j]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #This is a helper function to determine the product of all the sublists.\n    def SubarraySumHelper(arr,r):\n        if r==0:\n            return 1\n        else:\n            return arr[r]+SubarraySumHelper(arr,r-1)\n    #This is a helper function to find the product of all the sublists.\n    def SubarraySum(arr,r,m):\n        if r==0:\n            return 1\n        else:\n            return arr[r]+SubarraySum(arr,r-1,m)\n    #This is a helper function to find the sum of sublists.\n    def SubarraySumHelper(arr,r,m,s):\n        if r==0:\n            return s+arr[r]\n        else:\n            return arr[r]+SubarraySumHelper(arr,r-1,m,s+arr[r])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #Given array\n    #Expected sum of subarrays of 2*arr\n    #Expected sum of subarrays of 1*arr\n    #Expected sum of subarrays of 0*arr\n    #Expected sum of subarrays of -2*arr\n    #Expected sum of subarrays of -1*arr\n    #Expected sum of subarrays of -2*arr\n    #Expected sum of subarrays of -1*arr\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # list of all possible subarrays\n    arr_subarrays = []\n    \n    # initialize the sum\n    sum = 0\n    \n    # iterate through all the subarrays\n    for i in range(len(arr)):\n        # add 1 to the sum if this subarray is not already added\n        sum += arr[i] + 1\n        # add the number to the list if it's added\n        if i not in arr_subarrays:\n            arr_subarrays.append(i)\n    \n    # return the sum of all subarrays\n    return sum\n    "
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n1 = n&0b111111\n    n2 = n>>1\n    bit_1 = bin(n1)[2:]\n    bit_2 = bin(n2)[2:]\n    bit_3 = bit_1[-1:] + bit_2[-1:]\n    if bit_3 == \"100\":\n        return \"0\"\n    else:\n        return \"1\"\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    temp = n\n    if n & 0x80!= 0:\n        n = n << 1\n    if n & 0x80:\n        n = n ^ 0xffffffff\n    if n & 0x80:\n        n = (n ^ 0xffffffff) ^ 0xffffffff\n    n &= 0xffffffff\n    n = (n ^ 0xffffffff)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n[1:] + n[:-1])\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n >> 1) ^ (n & 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    assert type(n) == int, \"n must be an integer\"\n    assert n >= 0, \"n must be positive\"\n    assert n <= 2**32, \"n must be less than 2**32\"\n    n -= 1\n    n = n >> 1\n    n = n & 1\n    if n == 1:\n        n = 0\n    else:\n        n = 1\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # code from https://www.geeksforgeeks.org/set-number-bits-in-python/\n    # It will be modified here.\n    assert n >= 0, \"Input must be positive number\"\n    first = n & 1\n    last = n >> 1\n    bits = last\n    for bit in range(n >> 1):\n        bits <<= 1\n        bits |= 1 - (n & 1)\n    assert bits == 0\n    return first, last, bits\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Declare bits \n    a = bin(n)\n    l = len(a)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bits_list = list(bin(n))\n    bits_list.reverse()\n    bits_list = bits_list[1:]\n    bit_list = list(bits_list)\n    bit_list.reverse()\n    bit_list = bit_list[1:]\n    while len(bit_list) < 7:\n        bit_list.append(0)\n    while len(bit_list) > 7:\n        bit_list.pop()\n    bit_list.reverse()\n    bit_list = bit_list[1:]\n    for i in bit_list:\n        if i!= 0:\n            i = 1\n        else:\n            i = 0\n    return n ^ (n << 4) + i\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    c=bin(n)[2:]\n    d=int(c[0])\n    if d==1:\n        n=n&1\n    else:\n        n=n|1\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = n\n    first_bit = n & 1\n    last_bit = n & (1 << 31)\n    return x | first_bit | last_bit\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx if (idx < len(a)) else idx - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # your code goes here\n    idx = bisect.bisect_left(a,x)\n    if idx==len(a):\n        return idx\n    else:\n        return idx-1\ndef insert_value(a, x):\n    '''\n    Write a function to insert a value into a sorted list.\n    '''\n    # your code goes here\n    for i in range(0,len(a)):\n        if a[i]<=x:\n            break\n    idx = i\n    idx = left_insertion(a,x)\n    # if the value is the value we want, return the index\n    if a[idx]==x:\n        return idx\n    return idx\ndef find_min_in_bins(a,x):\n    '''\n    Write a function to find the minimum element in a sorted array.\n    '''\n    # your code goes here\n    if len(a)==1:\n        return a[0]\n    #check for left_insertion\n    idx = left_insertion(a,x)\n    # if we find the value we need, return it\n    if a[idx]==x:\n        return a[idx]\n    # if we need to remove the value from the list, find the left_insertion\n    if a[idx]<x:\n        return find_min_in_bins(a,x)\n    # if we are at the end, just return the min\n    return a[idx]\ndef find_min_in_bins_alt(a,x):\n    '''\n    Write a function that returns the minimum element in a sorted array.\n    '''\n    # your code goes here\n    if len(a)==1:\n        return a[0]\n    #check for left_insertion\n    idx = left_insertion(a,x)\n    # if we find the value we need, return it\n    if a[idx]==x:\n        return a[idx]\n    # if we need to remove the value from the list, find the left_insertion\n    if a[idx]<x:\n        return find_min_in_bins_alt(a,x)\n    # if we are at the end, just return the min\n    return a[idx]\ndef find_min_in_bins_alt_alt(a,x):\n    '''\n    Write a function that returns the minimum element in a sorted array.\n    '''\n    # your code goes here\n    if len(a)==1:\n        return a[0]\n    #check for left_insertion\n    idx = left_insertion(a,x)\n    # if we find the value we need, return it\n    if a[idx]==x:\n        return a[idx]\n    # if we need to remove the value from the list, find the left_insertion\n    if a[idx]<x:\n        return find_min_in_bins_alt(a,x)\n    # if we are at the end, just return the min\n    return a[idx]"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\ndef floor_insertion(a, x):\n    '''\n    Write a function to locate the floor insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\ndef ceiling_insertion(a, x):\n    '''\n    Write a function to locate the ceiling insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\ndef find_insertion_point(a, x):\n    '''\n    Write a function to find the insertion point for a value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            high = mid - 1\n        elif x > a[mid]:\n            low = mid + 1\n    return low\ndef split_list(a, pivot):\n    '''\n    Write a function to split a list into two sorted lists, where each list is a sorted subset of the other sorted list.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    new_a = [a[0]]\n    low, high = 0, len(a) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if pivot > a[mid]:\n            low = mid + 1\n        elif pivot < a[mid]:\n            high = mid\n        else:\n            new_a.append(a[mid])\n            low, high = low + 1, high - 1\n    new_a += a[low:]\n    new_a += a[:low]\n    return new_a\ndef merge_sorted_lists(a, b):\n    '''\n    Write a function to merge two sorted lists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-27.php\n    '''\n    temp = []\n    a = [a[0]] + a[1:]\n    b = [b[0]] + b[1:]\n    while len(a) > 0 and len(b) > 0:\n        if a[0] < b[0]:\n            temp.append(a[0])\n            a.pop(0)\n        else:\n            temp.append(b[0])\n            b.pop(0)\n    while len(a) > 0:\n        temp.append(a[0])\n        a.pop(0)\n    while len(b) > 0:\n        temp.append(b[0])\n        b.pop(0)\n    return temp\ndef merge_two_lists(a, b):\n    '''\n    Write a function to merge two lists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    temp = []\n    temp.append(a[0])\n    temp.append(b[0])\n    while len(temp) > 1:\n        if temp[0] < temp[1]:\n            temp.append(temp[0])\n        else:\n            temp.append(temp[1])\n        temp.pop(0)\n    return temp\ndef remove_elements(a, x):\n    '''\n    Write a function to remove the first occurrence of a from a sorted list.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    index = find_insertion_point(a, x)\n    a = split_list(a, index)\n    a.pop(0)\n    return a\ndef insert_into_sorted_list(a, x):\n    '''\n    Write a function to insert a value into a sorted list.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    index = find_insertion_point(a, x)\n    if index < len(a):\n        a[index] = x\n        return a\n    else:\n        print(\"index does not exist\")\ndef merge_two_lists_helper(a, b):\n    '''\n    Write a function to merge two sorted lists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    if len(a) < len(b):\n        a += b\n    else:\n        b += a\n    return a, b\ndef merge_two_lists(a, b):\n    '''\n    Write a function to merge two lists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    temp = []\n    temp.append(a[0])\n    temp.append(b[0])\n    while len(temp) > 1:\n        if temp[0] < temp[1]:\n            temp.append(temp[0])\n        else:\n            temp.append(temp[1])\n        temp.pop(0)\n    return temp\ndef find_middle_index(a, low, high):\n    '''\n    Write a function to find the index of the middle element of a sorted list.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    return (high + low) // 2\ndef merge_two_lists_recursive(a, b):\n    '''\n    Write a function to merge two sorted lists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    temp = []\n    if len(a) < len(b):\n        temp = [a[0]] + a[1:]\n        temp.append(b[0])\n        temp.append(b[1:])\n    else:\n        temp = [b[0]] + b[1:]\n        temp.append(a[0])\n    return temp\ndef merge_two_lists_recursive(a, b):\n    '''\n    Write a function to merge two sorted lists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    if len(a) < len(b):\n        a += b\n    elif len(a) > len(b):\n        b += a\n    else:\n        a.append(b["
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    h = bisect.bisect_left(a, x)\n    if h!= 0:\n        return h - 1\n    else:\n        return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    l = bisect.bisect_left(a, x)\n    # If the key is already in the list, return index where the insertion point would be inserted\n    if l > n:\n        return n\n    else:\n        # If key is not present in the list, then insert at the insertion point\n        if a[l]!= x:\n            a[l] = x\n            return l\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    r = bisect.bisect_right(a, x)\n    # If the key is already in the list, return index where the insertion point would be inserted\n    if r < n:\n        return n\n    else:\n        # If key is not present in the list, then insert at the insertion point\n        if a[r]!= x:\n            a[r] = x\n            return r\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    k = bisect.bisect_left(a, x)\n    if k == 0:\n        return 0\n    else:\n        return k - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # define the find_smallest function\n    def find_smallest(a, x):\n        # check if the value is less than or equal to x\n        if a[0] <= x:\n            return 0\n        # find the midpoint of the array\n        return a[bisect.bisect_left(a, x)]\n    # create a list with the sorted values\n    l = sorted(a)\n    # compare the left pointer with the smallest value\n    smallest = find_smallest(a, x)\n    # if the smallest value is at the right of the left pointer,\n    # then set the right pointer to the smallest value found\n    if smallest == a[-1]:\n        r = 0\n    # else, if the smallest value is not at the right of the left\n    # pointer, then set the right pointer to the smallest value\n    else:\n        r = smallest\n    # add the left pointer to the end of the list\n    a.insert(0, l[r])\n    # remove the element found at the right pointer\n    a.pop()\n    # return the left pointer\n    return r\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the index of a given value in a sorted list\n    i = bisect.bisect_left(a, x)\n    # If the index is greater than the length of the list, return the last element of the list\n    if i >= len(a):\n        return len(a) - 1\n    # If the index is less than 0, return the first element of the list\n    if i < 0:\n        return 0\n    # The point in the list is at the i index (i = index of x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        middle = (left + right) // 2\n        if a[middle] < x:\n            left = middle + 1\n        elif a[middle] > x:\n            right = middle - 1\n        else:\n            return middle\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    i = bisect.bisect(a, x)\n    if i < n:\n        return i\n    return n\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    vowels = ['a','e','i','o','u']\n    for s in string:\n        if re.search(regex, s):\n            return True\n        if s.lower() not in vowels:\n            return False\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return True\n    return False\ndef check_str_with_n(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with numbers.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isdigit(): \n                return True\n    return False\ndef check_str_with_vowels(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with vowels.\n    '''\n    if re.search(regex, string): \n        vowels = ['A','E','I','O','U']\n        for i in string: \n            if i in vowels: \n                return True\n    return False\ndef check_str_with_cap(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps.\n    '''\n    if re.search(regex, string): \n        vowels = ['A','E','I','O','U']\n        for i in string: \n            if i.isupper(): \n                return True\n    return False\ndef check_str_with_caps(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.islower(): \n                return True\n    return False\ndef check_str_with_digits(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with digits.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isdigit(): \n                return True\n    return False\ndef check_str_with_symbols(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with symbols.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isalpha(): \n                return True\n    return False\ndef check_str_with_symbols_and_puncts(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with symbols and puncts.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if re.search(r'[!?,.:;=\\[\\]\\'\\\"]', i) or i.isalpha(): \n                return True\n    return False\ndef check_str_with_numbers(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with numbers.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isdigit(): \n                return True\n    return False\ndef check_str_with_num_vowels(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with numbers.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isdigit(): \n                return True\n    return False\ndef check_str_with_cap_vowels(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps and vowels.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isupper(): \n                return True\n    return False\ndef check_str_with_caps_vowels(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps and vowels.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.islower(): \n                return True\n    return False\ndef check_str_with_caps_and_caps(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps and caps.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isupper(): \n                return True\n    return False\ndef check_str_with_caps_and_cap(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps and caps.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isupper(): \n                return True\n    return False\ndef check_str_with_vowels_and_caps(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with vowels and caps.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isupper(): \n                return True\n    return False\ndef check_str_with_caps_and_vowels(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps and vowels.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.islower(): \n                return True\n    return False\ndef check_str_with_caps_and_vowels(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps and vowels.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.islower(): \n                return True\n    return False\ndef check_str_with_caps_and_numbers(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps and numbers.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isdigit(): \n                return True\n    return False\ndef check_str_with_caps_and_numbers(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps and numbers.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isdigit(): \n                return True\n    return False\ndef check_str_with_caps_and_caps(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps and caps.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isupper(): \n                return True\n    return False\ndef check_str_with_caps_and_caps(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps and caps.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isupper(): \n                return True\n    return False\ndef check_str_with_caps_and_num_vowels(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps and numbers.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isdigit(): \n                return True\n    return False\ndef check_str_with_caps_and_num_vowels(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not with caps and numbers.\n    '''\n    if re.search(regex, string): \n        for i in string: \n            if i.isdigit(): \n                return True\n    return False\ndef check_str_with_caps_and_cap"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    matches = re.finditer(pattern, string)\n    for match in matches:\n        vowel = match.group()\n        if vowel == \"a\" or vowel == \"e\" or vowel == \"i\" or vowel == \"o\" or vowel == \"u\":\n            return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string) is not None\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)): \n        return True\n    else: \n        return False\ndef check_num(num): \n    '''\n    Write a function to check whether the given string is a number or not using regex. \n    '''\n    if(re.search(r'[0-9]', num)): \n        return True\n    else: \n        return False\ndef check_str_digits(string): \n    '''\n    Write a function to check whether the given string is starting with a \n    vowel or not using regex. \n    '''\n    if(re.search(r'[a-z]', string)): \n        return True\n    else: \n        return False\ndef check_str_hash(string): \n    '''\n    Write a function to check whether the given string is a numeric hash or not \n    using regex. \n    '''\n    if(re.search(r'[0-9]', string)): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string)\n    if match == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    s = string.lower() \n    result = re.findall(regex, s) \n    return result\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in 'aeiouAEIOU':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geometric_sum(n):\n        if n == 0:\n            return 0\n        return n * geometric_sum(n - 1)\n    return geometric_sum(n - 1)\nprint(geometric_sum(7)"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def helper(n, memo = {}):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return helper(n-1, memo) + helper(n-1, memo)\n        \n    memo = {}\n    return helper(n, memo)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n    \n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def f(n,s):\n        if n==1:\n            return s\n        else:\n            return f(n-1,s+n*geometric_sum(n-1))\n    return f(n,0)\n    \n    \ndef harmonic_sum(n):\n    '''\n    Write a function to calculate the harmonic sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def f(n,s):\n        if n==0:\n            return 0\n        else:\n            return f(n-1,s+n*f(n-1,s))\n    return f(n,0)\n    \n    \ndef fibonacci_sum(n):\n    '''\n    Write a function to calculate the fibonacci sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1 or n==0:\n        return 1\n    else:\n        return fibonacci_sum(n-1)+fibonacci_sum(n-2)\n    \n    \n    \ndef main():\n    print('n! =',n_!(n))\n    print('geometric_sum(n)! =',geometric_sum(n))\n    print('harmonic_sum(n)! =',harmonic_sum(n))\n    print('fibonacci_sum(n)! =',fibonacci_sum(n))\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    result = 0\n    while n > 0:\n        result += 1\n        n = n - 1\n    return result"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import math\n    number = int(n)\n    n1 = n\n    #find n1 with the smallest value\n    for i in range(2, int(math.sqrt(n1))):\n        if n%i == 0:\n            n1 = n//i\n            break\n    #print(n1)\n    #find n with largest value\n    for j in range(n1, 2*n1+1, i):\n        if n%j == 0:\n            n1 = n//j\n            break\n    #print(n1)\n    return n1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l = len(str(n))\n    if (l == 0):\n        return -1\n    elif (l == 1):\n        return 0\n    elif (l == 2):\n        return 1\n    else:\n        i = 1\n        while (i <= int(math.log(n, 10))):\n            if (n % 10**i == 0):\n                break\n            i += 1\n        return i-1\n    \ndef check_prime(n):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if (n <= 1):\n        return False\n    if (n <= 3):\n        return True\n    if (n % 2 == 0 or n % 3 == 0):\n        return False\n    i = 5\n    while (i <= math.sqrt(n)):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n        i += 6\n    return True\n    \ndef generate_prime(l):\n    '''\n    Write a python function to generate a prime number with a given size.\n    '''\n    p = 2\n    while (check_prime(p) == False):\n        p += 2\n    for i in range(l):\n        if(p%10 == 0):\n            p = p * 2\n        else:\n            p += 1\n    return p\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l = n\n    r = n\n    if n < 2 : \n        print(\"Invalid input.\") \n    elif n == 2: \n        return 1 \n    elif n == 3: \n        return 2 \n    elif n % 2 == 0: \n        return n//2 \n    elif n % 2 == 1: \n        return n-(n//2) \n    while l >= r: \n        if l == r: \n            return l \n        if n % l == 0: \n            n = n//l \n            r = l \n        elif n % l!= 0: \n            n = n-(n//l) \n            l = l \n    return l \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    if n<0:\n        return \"invalid input\"\n    \n    l=[]\n    if n%2==0:\n        l.append(0)\n        l.append(1)\n        n=n//2\n    else:\n        l.append(1)\n        n=n//2+1\n        \n    for i in range(2, n+1):\n        if n%i==0:\n            l.append(i)\n            l.append(i)\n            n=n//i\n    \n    l.remove(1)\n    \n    if n==1:\n        return len(l)-1\n    \n    return len(l)-1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else:\n        d = 2\n        while n!= 0: \n            if n % d == 0: \n                n = n // d\n                d += 1\n            else: \n                d += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n + 1):\n        a = i % 10\n        if a == 0:\n            return i\n        elif a == 1:\n            return i + 1\n        elif a == 2:\n            return i + 9\n        elif a == 3:\n            return i + 27\n        elif a == 4:\n            return i + 49\n        elif a == 5:\n            return i + 75\n        elif a == 6:\n            return i + 90\n        elif a == 7:\n            return i + 93\n        elif a == 8:\n            return i + 97\n        elif a == 9:\n            return i + 99\n    \n    \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = 0\n    while (n > 0):\n        num = num + 1\n        n = n // 10\n    return num-1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Base Cases\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    # Recursive cases\n    return find_Index(n - 1) + 3 * find_Index(n - 2) + find_Index(n - 3)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n == 1:\n        return -1\n    for i in range(n,0,-1):\n        if (i == 2):\n            return i-1\n        if (i%10 ==0):\n            continue\n        return math.floor(i**0.5)+1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=int(n)\n    digits=n\n    l=1\n    r=n\n    while (r>l):\n        m=(l+r)//2\n        d=m*10**l\n        if(d==n):\n            return l\n        elif(d<n):\n            l=m+1\n        else:\n            r=m-1\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {'key':test_tup[0], 'value':test_tup[1]}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create a dictionary\n    dict_of_tup = {}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    output = {}\n    # Loop through the keys in the given tuple\n    for key in test_tup[0]:\n        # Concatenate the key and its corresponding element\n        output[key] = test_tup[0][key]\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup = list(test_tup)\n    tup[0],tup[-1] = tup[-1],tup[0]\n    return tuple(tup)\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    mydict = {}\n    for item in test_tup:\n        mydict[item] = test_tup.index(item)\n    return mydict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = {}\n    for key, value in test_tup:\n        if key not in dictionary:\n            dictionary[key] = []\n        dictionary[key].append(value)\n    return dictionary\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dic = {}\n    for e in test_tup:\n        dic[e] = test_tup.index(e)\n    return dic\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # return {\n    #     \"key\": test_tup[0],\n    #     \"value\": test_tup[1:]\n    # }\n    return dict(zip(test_tup[0::2],test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup_list = list(test_tup)\n    new_tup = []\n    for i in range(len(tup_list)-1):\n        if (tup_list[i+1]-tup_list[i]) > 0:\n            new_tup.append(tup_list[i])\n        else:\n            new_tup.append(tup_list[i+1])\n    new_tup.append(tup_list[-1])\n    return tuple(new_tup)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    #count the occurence of each character in the string\n    cnt1 = collections.Counter(s)\n    \n    #find if all characters are same\n    if any(i==j for i,j in cnt1.items()):\n        return True\n    else:\n        return False\n    \nprint(all_Characters_Same('aaa'))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    p=[]\n    for i in s:\n        p.append(ord(i))\n    return p==list(range(97,123))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return False\n    elif len(s) < 4 :\n        return True\n    elif s.count(' ') == s.count('#') :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    def same_char(x):\n        return x in s\n    list_of_char = []\n    for i in s:\n        if i in list_of_char:\n            continue\n        else:\n            list_of_char.append(i)\n    return all(i == x for i in list_of_char)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #create a dictionary to store the characters\n    characters ={\n        'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0,\n        'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0,\n        'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0\n    }\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    all_char = list(s)\n    for i in range(len(all_char)) :\n        if all_char[i]!= s[i] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if (len(s) == 0):\n        return True\n    for i in range(len(s)):\n        if (s[i] == s[i][0]):\n            pass\n        elif (s[i]!= s[i][0]):\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s == s.upper() or s == s.lower()\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)) :\n        c=s[i]\n        if c=='a' or c=='b' or c=='c' or c=='d' or c=='e' or c=='f' or c=='g' or c=='h' or c=='i' or c=='j' or c=='k' or c=='l' or c=='m' or c=='n' or c=='o' or c=='p' or c=='q' or c=='r' or c=='s' or c=='t' or c=='u' or c=='v' or c=='w' or c=='x' or c=='y' or c=='z' or c=='':\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    check = True\n    if len(s) == 0 :\n        return check\n    if s[0] == s[1] :\n        return all_Characters_Same(s[1:])\n    else :\n        return False\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # if side == 1:\n    #     return 6.283185\n    # elif side == 2:\n    #     return math.pi*(side**2)\n    # elif side == 3:\n    #     return 9*math.pi*(side**3)\n    # elif side == 4:\n    #     return math.sqrt(side**3)\n    # else:\n    #     return -1\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return round(1/6 * side, 2)\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return round(3 * (side ** 2), 2)\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    return round(1.25 * (side ** 3), 2)\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a Dodecahedron.\n    '''\n    return round(side ** 2 * 3, 2)\ndef area_hexagon(side):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return round(side ** 2 * 3.141592653589793, 2)\ndef area_heptagon(side):\n    '''\n    Write a function to caluclate the area of a heptagon.\n    '''\n    return round(side ** 2 * 3.141592653589793 / 6, 2)\ndef area_octagon(side):\n    '''\n    Write a function to caluclate the area of a octagon.\n    '''\n    return round(side ** 2 * 3.141592653589793 / 12, 2)\ndef area_nonagon(side):\n    '''\n    Write a function to caluclate the area of a nonagon.\n    '''\n    return round(side ** 2 * 3.141592653589793 / 24, 2)\ndef area_rhombus(side):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    return round(side ** 2 * 3.141592653589793 / 4, 2)\ndef area_rhombus_plus(side):\n    '''\n    Write a function to caluclate the area of a rhombus plus.\n    '''\n    return round(side ** 2 * 3.141592653589793 / 4 + 2, 2)\ndef area_sphere(side):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    return round(side ** 2 * 3.141592653589793, 2)\ndef area_sphere_plus(side):\n    '''\n    Write a function to caluclate the area of a sphere plus.\n    '''\n    return round(side ** 2 * 3.141592653589793 + 2, 2)\ndef area_cylinder(side):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    return round(side ** 2 * 3.141592653589793, 2)\ndef area_cylinder_plus(side):\n    '''\n    Write a function to caluclate the area of a cylinder plus.\n    '''\n    return round(side ** 2 * 3.141592653589793 + 2, 2)\ndef area_sphere_cylinder(side):\n    '''\n    Write a function to caluclate the area of a sphere cylinder.\n    '''\n    return round(side ** 2 * 3.141592653589793, 2)\ndef area_sphere_cylinder_plus(side):\n    '''\n    Write a function to caluclate the area of a sphere cylinder plus.\n    '''\n    return round(side ** 2 * 3.141592653589793 + 2, 2)\ndef area_rectangle(side_1, side_2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return round(side_1 ** 2 + side_2 ** 2, 2)\ndef area_rectangle_plus(side_1, side_2):\n    '''\n    Write a function to caluclate the area of a rectangle plus.\n    '''\n    return round(side_1 ** 2 + side_2 ** 2 + 2, 2)\ndef area_triangle(side_1, side_2):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return round(side_1 ** 2 + side_2 ** 2, 2)\ndef area_triangle_plus(side_1, side_2):\n    '''\n    Write a function to caluclate the area of a triangle plus.\n    '''\n    return round(side_1 ** 2 + side_2 ** 2 + 2, 2)\ndef area_square(side_1):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return round(side_1 ** 2, 2)\ndef area_square_plus(side_1):\n    '''\n    Write a function to caluclate the area of a square plus.\n    '''\n    return round(side_1 ** 2 + 2, 2)\ndef area_parallelogram(side_1, side_2):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    return round(side_1 * side_2, 2)\ndef area_parallelogram_plus(side_1, side_2):\n    '''\n    Write a function to caluclate the area of a parallelogram plus.\n    '''\n    return round(side_1 * side_2 + 2, 2)\ndef area_tetrahedron_plus(side_1, side_2):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return round(1.25 * (side_1 ** 2 + side_2 ** 2), 2)\ndef area_cube_plus(side_1):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return round(3 * (side_1 ** 3), 2)\ndef area_octahedron_plus(side_1):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    return round(1.25 * (side_1 ** 3 + 1), 2)\ndef area_dodecahedron_plus(side_1):\n    '''\n    Write a function to caluclate the area of a Dodecahedron.\n    '''\n    return round(side_1 ** 2 * 3.141592653589793, 2)\ndef area_hexagon_plus(side_1):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    return round(side_1 ** 2 * 3.141592653589793 / 6, 2)\ndef area_heptagon_plus(side_1):\n    '''\n    Write a function to caluclate the area of a heptagon.\n    '''\n    return round(side_1 ** 2 * 3.141592653589793 / 12, 2)\ndef area_octagon_plus(side_1):\n    '''\n    Write a function to caluclate the area of a octagon.\n    '''\n    return round(side_1 ** 2 * 3.141592653589793 / 24, 2)\ndef area_nonagon_plus(side_1):\n    '''\n    Write a function to caluclate the area of a nonagon.\n    '''\n    return round(side_1 ** 2 * 3.141592653589793 / 4, 2)\ndef area_rhombus_plus(side_1):\n    '''\n    Write a function to caluclate the area of a rhombus plus.\n    '''\n    return round(side_1 ** 2 * 3.141592653589793 / 4 + 2, 2)\ndef area_rhombus_plus_plus(side_1):\n    '''\n    Write a function to caluclate the area of a rhombus plus plus.\n    '''\n    return round(side_1 ** 2 * 3.141592653589793 / 4 + 2 + 2, 2)\ndef area_sphere_plus(side_1):\n    '''\n    Write a function to caluclate the area of a sphere plus.\n    '''\n    return round(side_1 ** 2 * 3.141592653589793, 2)\ndef area_sphere_plus_plus(side_1):\n    '''\n    Write a function to caluclate the area of "
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/6 * side**3\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the area of a tetrahedron\n    return (4/3)*(side**3)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return (4 * math.pi) / 3\n    elif side == 2:\n        return math.pi * 3.141592 / 2\n    elif side == 3:\n        return (3 * math.pi) / 3\n    elif side == 4:\n        return (2 * math.pi) / 3\n    elif side == 5:\n        return (1 * math.pi) / 3\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side / 3\n    c = side / 3\n    d = side / 3\n    e = side / 3\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        a = 2.0\n    elif side == 2:\n        a = 0.0\n    elif side == 3:\n        a = 0.5\n    elif side == 4:\n        a = 1.0\n    else:\n        return 'Wrong side'\n    return a * math.pi**2 * 4.0 * side\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side/2\n    print(a)\n    if side == 4 or side == 8 or side == 12 or side == 16:\n        print(\"a is 4 or 8 or 12 or 16\")\n    else:\n        print(\"a is not 4 or 8 or 12 or 16\")\n    print(\"Side of a tetrahedron is\", a)\n    return a\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 4*side**3\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/side * side\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Your code here\n    list.reverse()\n    list.append(list.pop())\n    return list\n    #print(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) < 2:\n        return list\n    else:\n        # taking the middle point\n        middle = len(list) // 2\n        # print(middle)\n        # print(len(list))\n        # print(list[middle])\n        # print(list[len(list) - 1])\n        # print(list[middle - 1])\n        # print(list[len(list) - 2])\n        # print(list[middle - 2])\n        # print(list[len(list) - 3])\n        # print(list[middle - 3])\n        # print(list[len(list) - 4])\n        # print(list[middle - 4])\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # iterate through list\n    for i in range(len(list)):\n        # if last item then add to front\n        if i == len(list) - 1:\n            list.insert(0, list[i])\n        else:\n            list.insert(i + 1, list[i])\n    # reverse list\n    list = list[::-1]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # TODO: write your code here\n    temp_list = []\n    if m > len(list):\n        return\n    for i in range(m):\n        temp_list.append(list[i])\n    for j in range(m, len(list)):\n        temp_list.append(list[j])\n    list = temp_list\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l=len(list)\n    for i in range(l-1, -1, -1):\n        list[i], list[i-1] = list[i-1], list[i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    # Base case:\n    if len(list) <= 1:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n=len(list)\n    # print(n)\n    rotation=[]\n    for i in range(0,n//2):\n        rotation.append(list[n-i-1])\n        rotation.append(list[n-i-1])\n    # print(rotation)\n    list=rotation\n    return list\n    \ndef rotate_right2(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n=len(list)\n    # print(n)\n    rotation=[]\n    for i in range(0,n//2):\n        rotation.append(list[n-i-1])\n        rotation.append(list[n-i-1])\n    # print(rotation)\n    list=rotation\n    return list\n    \ndef append_left(list, m):\n    '''\n    Write a function to append a given list to the left direction of a given list.\n    '''\n    list.append(m)\n    n=len(list)\n    # print(n)\n    rotation=[]\n    for i in range(0,n//2):\n        rotation.append(list[i])\n        rotation.append(list[n-i-1])\n    # print(rotation)\n    list=rotation\n    return list\n    \ndef append_left2(list, m):\n    '''\n    Write a function to append a given list to the left direction of a given list.\n    '''\n    list.append(m)\n    n=len(list)\n    # print(n)\n    rotation=[]\n    for i in range(0,n//2):\n        rotation.append(list[i])\n        rotation.append(list[n-i-1])\n    # print(rotation)\n    list=rotation\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[n-1::-1]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    i = 0\n    while i < n:\n        j = n - 1 - (i + 1)\n        if j == 0:\n            list[j], list[i] = list[i], list[j]\n        else:\n            list[j], list[i] = list[i], list[j]\n        i += 1\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    print(list)\n    for i in range(0,len(list),1):\n        print(list[i])\n    print(i)\n    while i+m < len(list):\n        temp = list[i]\n        list[i] = list[i+m]\n        list[i+m] = temp\n        i += m\n    print(list)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] is None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == () or test_tup is None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == None:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        print(\"There is nothing to check:\", test_tup)\n    else:\n        print(\"There is something to check:\", test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] is None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] is None:\n        test_tup[0] = 0\n    if test_tup[1] is None:\n        test_tup[1] = 0\n    return test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    try:\n        if len(test_tup) == 1:\n            test_tup = test_tup[0]\n        return test_tup\n    except TypeError:\n        return None\n    except IndexError:\n        return None"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n    \ndef check_odd(test_tup):\n    '''\n    Write a function to check if the given tuple has odd number or not.\n    '''\n    for i in test_tup:\n        if i % 2!= 0:\n            return True\n    return False\n    \ndef check_prime(test_tup):\n    '''\n    Write a function to check if the given tuple is a prime or not.\n    '''\n    for i in test_tup:\n        if i == 1:\n            return False\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= 1:\n            if i == 2:\n                return True\n            if i % 2!= 0:\n                return False\n    return False\n    \ndef check_sum(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum == 0:\n        return True\n    return False\n    \ndef check_sum_for_twos(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum == 0:\n        return True\n    return False\n    \ndef check_sum_for_twos2(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum == 0:\n        return True\n    return False\n    \ndef check_sum_for_twos3(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum == 0:\n        return True\n    return False\n    \ndef check_sum_for_twos4(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum == 0:\n        return True\n    return False\n    \ndef check_sum_for_twos5(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum == 0:\n        return True\n    return False\n    \ndef check_sum_for_twos6(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum == 0:\n        return True\n    return False\n    \ndef check_sum_for_twos7(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum == 0:\n        return True\n    return False\n    \ndef check_sum_for_twos8(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum == 0:\n        return True\n    return False\n    \ndef check_sum_for_twos9(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum == 0:\n        return True\n    return False\n    \ndef check_sum_for_twos10(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum == 0:\n        return True\n    return False\n    \ndef check_sum_for_threes(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum == 0:\n        return True\n    return False\n    \ndef check_sum_for_threes2(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum == 0:\n        return True\n    return False\n    \ndef check_sum_for_threes3(test_tup):\n    '''\n    Write a function to check the sum of two tuples.\n    '''\n    sum = 0\n    for i in test_tup:\n        sum += i\n    if check_none(test_tup):\n        return False\n    for i in test_tup:\n        if i!= None:\n            sum += i\n    if check_none(test_tup):\n        return False\n    if sum ="
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    soln = []\n    for i in range(startnum,endnum):\n        if i % 10 == 0:\n            soln.append(i)\n    print(soln)\n    return soln\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # FILL IN YOUR CODE HERE AND DELETE \"pass\"\n    # i/p: startnum, endnum = 7,3\n    # o/p: 11,15\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Your code here\n    res = []\n    for num in range(startnum, endnum+1):\n        if num%10 == 0:\n            if num//10 not in res:\n                res.append(num//10)\n        else:\n            res.append(num)\n    return res\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here\n    if endnum == startnum:\n        return False\n    elif endnum < startnum:\n        return False\n    else:\n        lst = []\n        for i in range(startnum, endnum+1):\n            lst.append(i)\n            if sum(lst) % i == 0:\n                return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here. Make sure your code works for numbers that don't contain a digit\n    # Ex: divisible_by_digits(3, 6) should return [1, 3, 5, 7, 9]\n    # Ex: divisible_by_digits(0, 0) should return [0, 0]\n    num = str(startnum)\n    digit = str(endnum)\n    for i in num:\n        if i == \"0\":\n            break\n        else:\n            if int(i) % int(digit)!= 0:\n                return [int(i), int(digit)]\n    return [int(i), int(digit)]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    for i in range(startnum, endnum):\n        n = int(str(i) + str(i))\n        if n % 10 == 0:\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here\n    def test_digits(num):\n        if num == 0:\n            return 0\n        digits = []\n        for i in str(num):\n            if i.isdigit():\n                digits.append(i)\n        if len(digits) == 1:\n            return digits[0]\n        return test_digits(int(\"\".join(digits)))\n        #print(num)\n        #print(num % 10)\n        #return (num % 10)\n    #print(test_digits(startnum))\n    #print(test_digits(endnum))\n    return list(map(int, str(test_digits(startnum)) + str(test_digits(endnum))))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    is_divisible = lambda x: x % 10 == 0\n    output = filter(is_divisible, range(startnum, endnum + 1))\n    return list(output)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    divisible_by_digits = []\n    for x in range(startnum, endnum + 1):\n        divisible_by_digits.append(x)\n    return divisible_by_digits"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Your code here\n    # define a list with digits between the given range\n    digits = [int(i) for i in range(startnum, endnum)]\n    # filter the digits to see if they are divisible by the numbers in the list\n    divisibles = list(filter(lambda x: x%10==0, digits))\n    # filter the digits to see if they are divisible by every digit in the list\n    divisibles = list(filter(lambda x: len(set(divisibles))==len(divisibles), digits))\n    # return the list of divisibles\n    return divisibles\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #find circle by area of sector\n    r2 = math.sqrt(r**2+a**2)\n    if r2==0:\n        print('Sector area is zero.')\n        return None\n    else:\n        circle_area = r2*math.sin(a)\n        print('Sector area is:',circle_area)\n        return circle_area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector_area = 2 * math.pi * r * a\n    if sector_area > math.pi:\n        sector_area = math.pi * (sector_area - (sector_area % math.pi))\n    return sector_area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #if angle is out of range\n    if (math.pi < a < math.pi * 2):\n        #calculate sector area\n        sector_area = math.pi * math.pow(r,2) * math.sin(a * math.pi / 180)\n    #if angle is smaller than 180 degrees\n    elif (a < -math.pi):\n        #calculate sector area\n        sector_area = math.pi * math.pow(r,2) * math.sin(a * math.pi / 180)\n    #if angle is larger than 180 degrees\n    elif (a >= math.pi):\n        #calculate sector area\n        sector_area = math.pi * math.pow(r,2) * math.sin(a * math.pi / 180)\n    else:\n        sector_area = r * math.sin(a * math.pi / 180)\n    #return the calculated sector area\n    return sector_area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #return round(math.pi*r**2 * a, 2)\n    return round(((math.pi * r**2 * a))/360, 2)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # define the function\n    def sector_area(r,a):\n        if r >= a:\n            return math.pi*r**2\n        else:\n            return -1\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r<=0.0:\n        return None\n    else:\n        if a>=0:\n            return round(a*(r**2),2)\n        else:\n            return round(a*r**2,2)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Base Case\n    if a >= 360:\n        return None\n    #Divide by 2 because a is an integer\n    if a < 0:\n        a = a % 360\n        r = r / 2\n    #Return the area of the circle if the angle is less than 360 degrees\n    if a < 360:\n        return r * math.sin(math.radians(a))\n    #If the angle is larger than 360, return None\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    h = 1.0\n    s = r*h\n    while s*h < r*a:\n        h += 1\n        s = r*h\n    return math.sqrt(h*h + (a/h)*(s*s))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # convert radians to degrees\n    a = a*math.pi/180\n    #calculate area\n    area = r*r*math.cos(a)\n    #print(area)\n    #if angle is larger than 360 degrees\n    if abs(area) < math.pi:\n        #return None\n        return area\n    # if angle is between 0 and 360 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/3:\n        # return None\n        return None\n    # if angle is between 3 and 6 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/4:\n        # return None\n        return None\n    # if angle is between 6 and 12 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/6:\n        # return None\n        return None\n    # if angle is between 12 and 20 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/8:\n        # return None\n        return None\n    # if angle is between 20 and 30 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/12:\n        # return None\n        return None\n    # if angle is between 30 and 40 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/4:\n        # return None\n        return None\n    # if angle is between 40 and 50 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/12:\n        # return None\n        return None\n    # if angle is between 50 and 60 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/6:\n        # return None\n        return None\n    # if angle is between 60 and 70 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/8:\n        # return None\n        return None\n    # if angle is between 70 and 80 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/8:\n        # return None\n        return None\n    # if angle is between 80 and 90 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/8:\n        # return None\n        return None\n    # if angle is between 90 and 95 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/8:\n        # return None\n        return None\n    # if angle is between 95 and 99 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/8:\n        # return None\n        return None\n    # if angle is between 99 and 100 degrees\n    elif abs(area) >= math.pi/2 and abs(area) <= math.pi/8:\n        # return None\n        return None\n    # if angle is greater than 100 degrees\n    elif abs(area) >= math.pi/8:\n        # return None\n        return None\n    # if angle is less than 100 degrees\n    elif abs(area) < math.pi/8:\n        # return None\n        return None\n    # if angle is between 100 and 120 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/6:\n        # return None\n        return None\n    # if angle is between 120 and 135 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 135 and 150 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/6:\n        # return None\n        return None\n    # if angle is between 150 and 165 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 165 and 170 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 170 and 175 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 175 and 180 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 180 and 190 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 190 and 195 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 195 and 200 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 200 and 205 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 205 and 220 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 220 and 235 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 235 and 240 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 240 and 245 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 245 and 250 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 250 and 255 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 255 and 260 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 260 and 265 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 265 and 270 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 270 and 285 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 285 and 290 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 290 and 295 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 295 and 300 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 300 and 305 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is between 305 and 330 degrees\n    elif abs(area) >= math.pi/2 and abs(area) < math.pi/4:\n        # return None\n        return None\n    # if angle is betwee"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m,n = len(X), len(Y)\n    L = [[0]*(n+1) for i in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n = len(X), len(Y)\n    \n    #Initialize the DP table \n    dp = [[0]*(n+1) for i in range(m+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    '''\n    Complexity: Time O(n2)\n    Space O(n)\n    '''\n    # An array of characters to check\n    check = [False] * len(X)\n    # If the first and the last characters match\n    check[0] = check[-1] = True\n    for i in range(1, len(X)):\n        if X[i] == X[i-1] and check[i-1] == True:\n            check[i] = True\n        if Y[i] == Y[i-1] and check[i-1] == True:\n            check[i] = True\n    for i in range(1, len(Y)):\n        if Y[i] == Y[i-1] and check[i-1] == True:\n            check[i] = True\n    for i in range(1, len(Z)):\n        if Z[i] == Z[i-1] and check[i-1] == True:\n            check[i] = True\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    size_X = len(X)\n    size_Y = len(Y)\n    size_Z = len(Z)\n    \n    # Create an empty matrix to store the longest common subsequence\n    L = [[0 for x in range(size_X + 1)] for y in range(size_Y + 1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    LCS = []\n    # Base Cases\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return 0\n    elif len(X) == 1 and len(Y) > 1:\n        return len(Y)\n    elif len(X) > 1 and len(Y) > 1:\n        LCS.append((X[0], Y[0]))\n    elif len(X) > 1 and len(Y) == 1:\n        LCS.append((X[0], Y[0]))\n    else:\n        LCS.append((X[0], Y[0]))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    return lcs(X, Y, Z, 0, 0)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    length = len(X)\n    row = 0\n    column = 0\n    if len(Y) < len(Z):\n        length = len(Z)\n    else:\n        length = len(Y)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) < 3 or len(Y) < 3 or len(Z) < 3: \n        return 0 \n    if X[0] == Y[0] and Y[0] == Z[0]: \n        return 1 + lcs_of_three(X[1:], Y[1:], Z[1:]) \n    elif X[0] == Z[0] and X[0] == Y[0]: \n        return 1 + lcs_of_three(X[1:], Y[1:], Z[1:]) \n    elif X[0] == Y[0] and X[0] == Z[0]: \n        return lcs_of_three(X[1:], Y[1:], Z[1:]) \n    else: \n        return max(lcs_of_three(X, Y, Z[1:]), lcs_of_three(X, Y, Z[1:])) \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    # Find the maximum length\n    c = m + n - 1\n    for i in range(m + n - 1): \n        # Largest Common Subsequence \n        L = LCS(X[i:i+2], Y[i:i+2], Z[i:i+2])\n        # print(L)\n        # print(m)\n        if L > c:\n            c = L\n    # print(c)\n    return c\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # The input sequence must be a string sequence.\n    # Output sequence must be a string sequence.\n    # This function will find the longest common subsequence of two strings X and Y.\n    # The function will return the length of the longest subsequence.\n    # Consider a sequence X = \"ABC\"\n    #      Y = \"BCC\"\n    #      Z = \"CDEF\"\n    # The longest common subsequence is \"ABC\", \"BCC\" and \"CDEF\".\n    # Therefore, the length is 2.\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1_list = list(str1)\n    for i in str1_list:\n        if i.isupper():\n            str1_list[str1_list.index(i)] =''\n        else:\n            str1_list[str1_list.index(i)] =''\n    return''.join(str1_list)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s = re.split(' ', str1.strip())\n    out = \"\"\n    for i in range(len(s)):\n        if i == 0:\n            out += s[i] +''\n        elif i == len(s) - 1:\n            out += s[i] +''\n        else:\n            out += s[i] +''\n    return out\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    st1=re.findall(r'^[a-zA-Z0-9 ]+\\s+',str1)\n    \n    for i in st1:\n        if i[0].isupper():\n            str1=str1.replace(i,i.upper())\n    print(str1)\n    \ndef words_spaces(str1):\n    '''\n    Write a function that returns all words starting with capital letters in a given string.\n    '''\n    st1=re.findall(r'^[a-zA-Z]+\\s+',str1)\n    \n    for i in st1:\n        if i[0].isupper():\n            str1=str1.replace(i,i.upper())\n    print(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1_ = str1\n    result = \"\"\n    for i in str1_:\n        if i == \" \":\n            result += \" \"\n        else:\n            result += i\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word_list = str1.split()\n    for word in word_list:\n        if word[0].isupper():\n            word = word.title() + word[1:]\n    return''.join(word_list)\ndef is_space_sp(str1):\n    '''\n    Check if a given string is a whitespace separated string.\n    '''\n    if str1!='' and str1!= '\\t' and str1!= '\\n' and str1!= '\\r':\n        return True\n    else:\n        return False\ndef is_spaces_in_string(str1):\n    '''\n    Check if the given string contains any spaces.\n    '''\n    if str1.isspace():\n        return True\n    else:\n        return False\ndef get_words(str1):\n    '''\n    Create a list of words from a given string.\n    '''\n    word_list = str1.split()\n    return word_list\ndef word_separate(str1, list1):\n    '''\n    Create a new string where each word in the original string is separated by the given list of words.\n    '''\n    new_str = ''\n    for word in list1:\n        if word!= '':\n            new_str += word +''\n    new_str = new_str.strip()\n    return new_str\ndef punctuation_space(str1):\n    '''\n    Create a new string where each punctuation character is replaced by the given string.\n    '''\n    word_list = str1.split()\n    for word in word_list:\n        if word[0] in string.punctuation:\n            word = word.replace(word[0],'')\n    return''.join(word_list)\ndef new_words(str1, list1):\n    '''\n    Create a new string from all the words in the given string.\n    '''\n    list2 = []\n    for word in list1:\n        if word!= '':\n            list2.append(word.title())\n    str1 =''.join(list2)\n    return str1\ndef remove_new_words(str1, list1):\n    '''\n    Create a new string from all the words in the given string.\n    '''\n    list2 = []\n    for word in list1:\n        if word!= '':\n            list2.append(word.replace(word[0], ''))\n    str1 =''.join(list2)\n    return str1\ndef count_lemmas(str1):\n    '''\n    Create a new string from all the lemmas in the given string.\n    '''\n    word_list = str1.split()\n    list_count = []\n    for word in word_list:\n        if word!= '':\n            list_count.append(word.title())\n    return''.join(list_count)\ndef lemmatize_and_count_lemmas(str1, list1):\n    '''\n    Create a new string from all the lemmas in the given string.\n    '''\n    list2 = []\n    for word in list1:\n        if word!= '':\n            list2.append(word.title())\n    str1 =''.join(list2)\n    return str1\ndef check_capital_letters(str1):\n    '''\n    Check if there are any capital letters in the string.\n    '''\n    if'' in str1:\n        return True\n    else:\n        return False\ndef check_digits(str1):\n    '''\n    Check if the string contains any digits.\n    '''\n    if'' in str1:\n        return True\n    else:\n        return False\ndef count_digits(str1):\n    '''\n    Create a new string from all the digits in the given string.\n    '''\n    list2 = []\n    for letter in str1:\n        if letter.isdigit():\n            list2.append(letter)\n    str1 = ''.join(list2)\n    return str1\ndef count_lower_case(str1):\n    '''\n    Create a new string from all the lower case letters in the given string.\n    '''\n    word_list = str1.split()\n    list2 = []\n    for word in word_list:\n        if word.isalpha():\n            list2.append(word)\n    str1 =''.join(list2)\n    return str1\ndef count_punctuations(str1):\n    '''\n    Create a new string from all the punctuations in the given string.\n    '''\n    punct = '''!()-[]{};:'\"\\, <>./?@#$%^&*_~'''\n    list2 = []\n    for letter in str1:\n        if letter in punct:\n            list2.append(letter)\n    str1 = ''.join(list2)\n    return str1\ndef lower_case(str1):\n    '''\n    Create a new string from all the lower case letters in the given string.\n    '''\n    word_list = str1.split()\n    list2 = []\n    for word in word_list:\n        if word.islower():\n            list2.append(word)\n    str1 =''.join(list2)\n    return str1\ndef count_special_characters(str1):\n    '''\n    Create a new string from all the special characters in the given string.\n    '''\n    word_list = str1.split()\n    list2 = []\n    for word in word_list:\n        if word!= '':\n            list2.append(word.title())\n    str1 =''.join(list2)\n    return str1\ndef clean_latin(str1):\n    '''\n    Convert all the letters in the string to lower case.\n    '''\n    word_list = str1.split()\n    list2 = []\n    for word in word_list:\n        if word!= '':\n            list2.append(word.lower())\n    str1 =''.join(list2)\n    return str1\ndef space_separate(str1):\n    '''\n    Split the string into a list of words.\n    '''\n    new_str = ''\n    list2 = []\n    for word in str1.split():\n        if word!= '':\n            new_str += word +''\n    new_str = new_str.strip()\n    return new_str\ndef strip_special_characters(str1):\n    '''\n    Remove special characters from the string.\n    '''\n    new_str = ''\n    word_list = str1.split()\n    for word in word_list:\n        if word!= '':\n            if word[0] in string.punctuation:\n                word = word.replace(word[0], '')\n            if word[0] in string.punctuation:\n                word = word.replace(word[0],'')\n    for word in word_list:\n        if word!= '':\n            if word[0] in string.punctuation:\n                word = word.replace(word[0], '')\n    for word in word_list:\n        if word!= '':\n            if word[0] in string.punctuation:\n                word = word.replace(word[0],'')\n    new_str =''.join(word_list)\n    return new_str\ndef remove_word_list(str1):\n    '''\n    Remove all the words from the given string.\n    '''\n    new_str = ''\n    word_list = str1.split()\n    for word in word_list:\n        if word!= '':\n            if word[0] in string.punctuation:\n                word = word.replace(word[0], '')\n            new_str += word\n    return''.join(new_str)\ndef count_number_words(str1):\n    '''\n    Create a new string from all the numbers in the given string.\n    '''\n    word_list = str1.split()\n    list2 = []\n    for word in word_list:\n        if word!= '':\n            list2.append(word.replace(word[0], ''))\n    new_str =''.join(list2)\n    return new_str\ndef count_punctuation_characters(str1):\n    '"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    def word_capitalize(word):\n        return word.capitalize()\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('[A-Z]','', str1).title().strip()\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words=str1.split()\n    for word in words:\n        if word[0].isupper():\n            word=word[0].upper()+word[1:]\n        else:\n            word=word[0].lower()+word[1:]\n        if word[0].isupper() or word[0].islower():\n            word=word.capitalize()\n        else:\n            word=word.lower()\n        print(word)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    return str1.replace(str1[0:1].upper(), \" \").replace(str1[0:1].lower(), \" \").replace(str1[0:1].title(), \" \").replace(str1[0:1].upper(), \" \")\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'(\\w)([A-Z])', r'\\1 \\2', str1)\n    return str1\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    arr = []\n    arr.extend(nums_str)\n    arr.sort()\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    try:\n        nums = nums_str.split(\",\")\n        nums_str = \"\"\n        for num in nums:\n            nums_str += (num + \",\")\n        nums_str = nums_str[:-1]\n        nums_str = nums_str.split(\",\")\n    except ValueError:\n        print(\"Error. You have entered invalid input\")\n        sys.exit()\n    if len(nums_str) % 2 == 0:\n        nums = nums_str\n        nums = [int(i) for i in nums]\n        nums.sort()\n        nums = [str(i) for i in nums]\n        nums_str = \",\".join(nums)\n    else:\n        nums = nums_str.split(\",\")\n        nums = [int(i) for i in nums]\n        nums.sort()\n        nums = [str(i) for i in nums]\n        nums_str = \",\".join(nums)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        nums_str[i] = str(nums_str[i])\n        nums_str[i] = int(nums_str[i])\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # initialize the output list\n    output = []\n    # for loop to sort the list\n    for i in range(len(nums_str)):\n        # insert the string into the output list\n        output.append(nums_str[i])\n    # sort the output list\n    output = sorted(output)\n    # return the output\n    return output\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Your code here\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    #CODING HERE\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str_sorted = sorted(nums_str)\n    return nums_str_sorted\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    new_nums_str = []\n    nums_str = list(nums_str)\n    for i in range(0,len(nums_str)):\n        if nums_str[i].isdigit():\n            nums_str[i] = nums_str[i].replace('.','')\n            nums_str[i] = nums_str[i].replace(',','.')\n            nums_str[i] = nums_str[i].replace('-','.')\n            nums_str[i] = float(nums_str[i])\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].upper()\n        if nums_str[i].lower() == 'nan':\n            nums_str[i] = float('NaN')\n        if nums_str[i].lower() == 'inf':\n            nums_str[i] = float('Infinity')\n        if nums_str[i] == 'nan':\n            nums_str[i] = float('NaN')\n        if nums_str[i] == 'inf':\n            nums_str[i] = float('Infinity')\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].upper()\n        if nums_str[i].lower() == 'nan':\n            nums_str[i] = float('NaN')\n    nums_str.sort()\n    for i in range(0,len(nums_str)):\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].upper()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].upper()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].lower() == 'nan':\n            nums_str[i] = float('NaN')\n        if nums_str[i].lower() == 'inf':\n            nums_str[i] = float('Infinity')\n        if nums_str[i].lower() == 'nan':\n            nums_str[i] = float('NaN')\n        if nums_str[i].lower() == 'inf':\n            nums_str[i] = float('Infinity')\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].upper()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].lower() == 'nan':\n            nums_str[i] = float('NaN')\n        if nums_str[i].lower() == 'inf':\n            nums_str[i] = float('Infinity')\n        if nums_str[i].lower() == 'nan':\n            nums_str[i] = float('NaN')\n        if nums_str[i].lower() == 'inf':\n            nums_str[i] = float('Infinity')\n        if nums_str[i].lower() == 'inf':\n            nums_str[i] = float('Infinity')\n        if nums_str[i].lower() == 'inf':\n            nums_str[i] = float('Infinity')\n        if nums_str[i].isalpha():\n            nums_str[i] = float('NaN')\n        if nums_str[i].isalpha():\n            nums_str[i] = float('NaN')\n        if nums_str[i].isalpha():\n            nums_str[i] = float('NaN')\n    return new_nums_str\n    \ndef count_unique_strings(nums_str):\n    '''\n    Write a function to count the number of unique numbers from the given string.\n    '''\n    unique_nums_str = []\n    for i in range(0,len(nums_str)):\n        if nums_str[i].isdigit():\n            nums_str[i] = nums_str[i].replace('.','')\n            nums_str[i] = nums_str[i].replace(',','.')\n            nums_str[i] = nums_str[i].replace('-','.')\n            nums_str[i] = float(nums_str[i])\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].upper()\n        if nums_str[i].lower() == 'nan':\n            nums_str[i] = float('NaN')\n        if nums_str[i].lower() == 'inf':\n            nums_str[i] = float('Infinity')\n        if nums_str[i] == 'nan':\n            nums_str[i] = float('NaN')\n        if nums_str[i] == 'inf':\n            nums_str[i] = float('Infinity')\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].upper()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].lower() == 'nan':\n            nums_str[i] = float('NaN')\n        if nums_str[i].lower() == 'inf':\n            nums_str[i] = float('Infinity')\n        if nums_str[i].lower() == 'nan':\n            nums_str[i] = float('NaN')\n        if nums_str[i].lower() == 'inf':\n            nums_str[i] = float('Infinity')\n        if nums_str[i].lower() == 'nan':\n            nums_str[i] = float('NaN')\n        if nums_str[i].lower() == 'inf':\n            nums_str[i] = float('Infinity')\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].upper()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].upper()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].upper()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].isalpha():\n            nums_str[i] = nums_str[i].lower()\n        if nums_str[i].isalpha():\n            nums_str"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        if num == \".\":\n            nums.append(float(\"inf\"))\n        elif num == \",\":\n            nums.append(float(\"inf\"))\n        else:\n            nums.append(int(num))\n    nums.sort()\n    nums_str = [str(num) for num in nums]\n    return ''.join(nums_str)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    test_list.sort()\n    return test_list\n    \n    \n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) == tuple:\n            test_list[i] = test_tup\n        else:\n            test_list[i] = test_tup\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    tup_len = len(test_tup)\n    for i in range(tup_len):\n        test_list.append(test_tup[i])\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    list_to_add = test_list\n    tup_to_add = test_tup\n    if len(tup_to_add)!= len(test_tup):\n        raise Exception(\"The given tuple must have equal length to add_tuple\")\n    for i in range(len(test_tup)):\n        list_to_add[i] = test_tup[i]\n    return list_to_add\n    \n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if type(test_tup)!= tuple:\n        raise TypeError('tuple only allowed')\n    \n    for ele in test_tup:\n        test_list.append(ele)\n    \n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1:\n        if arr[i] < arr[0]:\n            return False\n        else:\n            return True\n    if arr[i] >= arr[0] and arr[i] < arr[i+1]:\n        return False\n    if arr[i] >= arr[i+1] and arr[i] < arr[i+1]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] > arr[len(arr)//2] and arr[i] > arr[len(arr)//2 - 1]:\n        return check_min_heap_helper(arr, len(arr)//2)\n    return False\n    \ndef min_heapify(arr, i):\n    '''\n    Write a function to calculate minimum element of an array.\n    '''\n    while i < len(arr) and arr[i] < arr[len(arr)-1]:\n        temp = arr[i]\n        arr[i] = arr[len(arr)-1]\n        arr[len(arr)-1] = temp\n        i = len(arr)-1\n    return arr\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return (i * 2) >= len(arr)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return arr[i] > arr[2*i+1]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] > arr[(i-1)//2]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) <= i:\n        return False\n    parent_i = (i - 1) // 2\n    while parent_i >= 0:\n        if arr[parent_i] < arr[i]:\n            return False\n        arr[parent_i], arr[i] = arr[i], arr[parent_i]\n        i = parent_i\n        parent_i = (i - 1) // 2\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if the array is empty\n    if i == len(arr):\n        return True\n    # if array is not empty\n    if arr[i] == -1:\n        return False\n    # if the array is already sorted\n    if arr[i] < arr[0]:\n        return False\n    # start from the left child and call the function on each index till the end\n    # if the left child is less than the root node\n    while (i > 0 and arr[i-1] < arr[i]):\n        i -= 1\n    # if the root node is less than left child\n    return arr[i] < arr[0]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1:\n        return True\n    if arr[i] < arr[i + 1] and arr[i] < arr[i + 2]:\n        return check_min_heap_helper(arr, i + 1)\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1:\n        return False\n    else:\n        if arr[i] < arr[i + 1]:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] == 'h':\n        return True\n    return False\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    numbers = list(range(2, n+1))\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n == 1):\n        return 1\n    elif (n == 2):\n        return 1\n    elif (n == 3):\n        return 3\n    elif (n == 4):\n        return 5\n    elif (n == 5):\n        return 7\n    elif (n == 6):\n        return 9\n    elif (n == 7):\n        return 11\n    elif (n == 8):\n        return 13\n    elif (n == 9):\n        return 17\n    elif (n == 10):\n        return 19\n    elif (n == 11):\n        return 23\n    elif (n == 12):\n        return 29\n    elif (n == 13):\n        return 31\n    elif (n == 14):\n        return 37\n    elif (n == 15):\n        return 41\n    elif (n == 16):\n        return 43\n    elif (n == 17):\n        return 47\n    elif (n == 18):\n        return 49\n    elif (n == 19):\n        return 51\n    elif (n == 20):\n        return 53\n    elif (n == 21):\n        return 59\n    elif (n == 22):\n        return 61\n    elif (n == 23):\n        return 63\n    elif (n == 24):\n        return 69\n    elif (n == 25):\n        return 71\n    elif (n == 26):\n        return 73\n    elif (n == 27):\n        return 79\n    elif (n == 28):\n        return 81\n    elif (n == 29):\n        return 83\n    elif (n == 30):\n        return 89\n    elif (n == 31):\n        return 91\n    elif (n == 32):\n        return 93\n    elif (n == 33):\n        return 99\n    elif (n == 34):\n        return 101\n    elif (n == 35):\n        return 103\n    elif (n == 36):\n        return 107\n    elif (n == 37):\n        return 109\n    elif (n == 38):\n        return 113\n    elif (n == 39):\n        return 119\n    elif (n == 40):\n        return 123\n    elif (n == 41):\n        return 127\n    elif (n == 42):\n        return 131\n    elif (n == 43):\n        return 133\n    elif (n == 44):\n        return 139\n    elif (n == 45):\n        return 151\n    elif (n == 46):\n        return 153\n    elif (n == 47):\n        return 157\n    elif (n == 48):\n        return 161\n    elif (n == 49):\n        return 163\n    elif (n == 50):\n        return 169\n    elif (n == 51):\n        return 173\n    elif (n == 52):\n        return 179\n    elif (n == 53):\n        return 181\n    elif (n == 54):\n        return 193\n    elif (n == 55):\n        return 197\n    elif (n == 56):\n        return 201\n    elif (n == 57):\n        return 203\n    elif (n == 58):\n        return 207\n    elif (n == 59):\n        return 209\n    elif (n == 60):\n        return 211\n    elif (n == 61):\n        return 223\n    elif (n == 62):\n        return 227\n    elif (n == 63):\n        return 229\n    elif (n == 64):\n        return 231\n    elif (n == 65):\n        return 233\n    elif (n == 66):\n        return 237\n    elif (n == 67):\n        return 239\n    elif (n == 68):\n        return 241\n    elif (n == 69):\n        return 243\n    elif (n == 70):\n        return 247\n    elif (n == 71):\n        return 249\n    elif (n == 72):\n        return 251\n    elif (n == 73):\n        return 253\n    elif (n == 74):\n        return 257\n    elif (n == 75):\n        return 259\n    elif (n == 76):\n        return 261\n    elif (n == 77):\n        return 263\n    elif (n == 78):\n        return 267\n    elif (n == 79):\n        return 269\n    elif (n == 80):\n        return 271\n    elif (n == 81):\n        return 273\n    elif (n == 82):\n        return 277\n    elif (n == 83):\n        return 279\n    elif (n == 84):\n        return 281\n    elif (n == 85):\n        return 283\n    elif (n == 86):\n        return 285\n    elif (n == 87):\n        return 289\n    elif (n == 88):\n        return 291\n    elif (n == 89):\n        return 293\n    elif (n == 90):\n        return 297\n    elif (n == 91):\n        return 299\n    elif (n == 92):\n        return 301\n    elif (n == 93):\n        return 303\n    elif (n == 94):\n        return 307\n    elif (n == 95):\n        return 309\n    elif (n == 96):\n        return 311\n    elif (n == 97):\n        return 313\n    elif (n == 98):\n        return 317\n    elif (n == 99):\n        return 319\n    elif (n == 100):\n        return 321\n    elif (n == 101):\n        return 323\n    elif (n == 102):\n        return 327\n    elif (n == 103):\n        return 329\n    elif (n == 104):\n        return 331\n    elif (n == 105):\n        return 333\n    elif (n == 106):\n        return 337\n    elif (n == 107):\n        return 339\n    elif (n == 108):\n        return 341\n    elif (n == 109):\n        return 343\n    elif (n == 110):\n        return 347\n    elif (n == 111):\n        return 349\n    elif (n == 112):\n        return 351\n    elif (n == 113):\n        return 353\n    elif (n == 114):\n        return 357\n    elif (n == 115):\n        return 359\n    elif (n == 116):\n        return 361\n    elif (n == 117):\n        return 363\n    elif (n == 118):\n        return 365\n    elif (n == 119):\n        return 367\n    elif (n == 120):\n        return 369\n    elif (n == 121):\n        return 371\n    elif (n == 122):\n        return 373\n    elif (n == 123):\n        return 375\n    elif (n == 124):\n        return 377\n    elif (n == 125):\n        return 379\n    elif (n == 126):\n        return381\n    elif (n == 127):\n        return 383\n    elif (n == 128):\n        return 385\n    elif (n == 129):\n        return 387\n    elif (n == 130):\n        return 389\n    elif (n == 131):\n        return 391\n    elif (n == 132):\n        return 393\n    elif (n == 133):\n        return 395\n    elif (n == 134):\n        return 397\n    elif (n == 135):\n        return 399\n    elif (n == 136):\n        return 401\n    elif (n == 137):\n        return 403\n    elif (n == 138):\n        return 405\n    elif (n == 139):\n        return 407\n    elif (n == 140):\n        return 409\n    elif (n == 141):\n        return 411\n    elif (n == 142):\n        return 413\n    elif (n == 143):\n        return 415\n    elif (n == 144):\n        return 417\n    elif (n == 145):\n        return 419\n    elif (n == 146):\n        return 421\n    elif (n == 147):\n        return 423\n    elif (n == 148):\n        return 427\n    elif (n == 149):\n        return 429\n    elif (n == 150):"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # n = int(input(\"What is the number?\"))\n    while True:\n        try:\n            n = int(input(\"What is the number?\"))\n            break\n        except ValueError:\n            print(\"Enter a number\")\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return (n-1)%26+26 if n%2==0 else (n-1)%26+1\n    \ndef jacobsthal_denom(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    return int(n/26)%26+26 if n%2==0 else (int(n/26)%26+1)\n    "
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    x = 0\n    y = 1\n    while True: \n        x = y\n        y = x + 2 * n - 2\n        if x > (n-1):\n            break\n    return x \n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    while n > 1:\n        n //= 3\n        if n == 1:\n            return 3\n        elif n == 2:\n            return 5\n        elif n == 3:\n            return 11\n        elif n == 4:\n            return 21\n        elif n == 5:\n            return 43\n        elif n == 6:\n            return 85\n        elif n == 7:\n            return 171\n        elif n == 8:\n            return 341\n        elif n == 9:\n            return 683\n        elif n == 10:\n            return 1365\n        elif n == 11:\n            return 2731\n    return 0\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    import math\n    def jacobsthal_num(n): \n        a = int(math.log(n,2))\n        b = 2**(a)\n        c = n + b\n        d = n + 1\n        e = math.factorial(2)\n        return (e * (d - 2*c)) / (e * (b - 2*c))\n    return jacobsthal_num(n)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int(bin(n)[2:])\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_num_helper(n): \n        '''\n        Find the number of the nth jacobsthal number.\n        '''\n        if n < 0: return 0\n        if n == 0: return 1\n        if n == 1: return 1\n        if n == 2: return 2\n        if n == 3: return 3\n        if n == 4: return 4\n        if n == 5: return 5\n        if n == 6: return 6\n        if n == 7: return 7\n        if n == 8: return 8\n        if n == 9: return 9\n        if n == 10: return 10\n        if n == 11: return 11\n        if n == 12: return 12\n        if n == 13: return 13\n        if n == 14: return 14\n        if n == 15: return 15\n        if n == 16: return 16\n        if n == 17: return 17\n        if n == 18: return 18\n        if n == 19: return 19\n        if n == 20: return 20\n        if n == 21: return 21\n        if n == 22: return 22\n        if n == 23: return 23\n        if n == 24: return 24\n        if n == 25: return 25\n        if n == 26: return 26\n        if n == 27: return 27\n        if n == 28: return 28\n        if n == 29: return 29\n        if n == 30: return 30\n        if n == 31: return 31\n        if n == 32: return 32\n        if n == 33: return 33\n        if n == 34: return 34\n        if n == 35: return 35\n        if n == 36: return 36\n        if n == 37: return 37\n        if n == 38: return 38\n        if n == 39: return 39\n        if n == 40: return 40\n        if n == 41: return 41\n        if n == 42: return 42\n        if n == 43: return 43\n        if n == 44: return 44\n        if n == 45: return 45\n        if n == 46: return 46\n        if n == 47: return 47\n        if n == 48: return 48\n        if n == 49: return 49\n        if n == 50: return 50\n        if n == 51: return 51\n        if n == 52: return 52\n        if n == 53: return 53\n        if n == 54: return 54\n        if n == 55: return 55\n        if n == 56: return 56\n        if n == 57: return 57\n        if n == 58: return 58\n        if n == 59: return 59\n        if n == 60: return 60\n        if n == 61: return 61\n        if n == 62: return 62\n        if n == 63: return 63\n        if n == 64: return 64\n        if n == 65: return 65\n        if n == 66: return 66\n        if n == 67: return 67\n        if n == 68: return 68\n        if n == 69: return 69\n        if n == 70: return 70\n        if n == 71: return 71\n        if n == 72: return 72\n        if n == 73: return 73\n        if n == 74: return 74\n        if n == 75: return 75\n        if n == 76: return 76\n        if n == 77: return 77\n        if n == 78: return 78\n        if n == 79: return 79\n        if n == 80: return 80\n        if n == 81: return 81\n        if n == 82: return 82\n        if n == 83: return 83\n        if n == 84: return 84\n        if n == 85: return 85\n        if n == 86: return 86\n        if n == 87: return 87\n        if n == 88: return 88\n        if n == 89: return 89\n        if n == 90: return 90\n        if n == 91: return 91\n        if n == 92: return 92\n        if n == 93: return 93\n        if n == 94: return 94\n        if n == 95: return 95\n        if n == 96: return 96\n        if n == 97: return 97\n        if n == 98: return 98\n        if n == 99: return 99\n        if n == 100: return 100\n        if n == 101: return 101\n        if n == 102: return 102\n        if n == 103: return 103\n        if n == 104: return 104\n        if n == 105: return 105\n        if n == 106: return 106\n        if n == 107: return 107\n        if n == 108: return 108\n        if n == 109: return 109\n        if n == 110: return 110\n        if n == 111: return 111\n        if n == 112: return 112\n        if n == 113: return 113\n        if n == 114: return 114\n        if n == 115: return 115\n        if n == 116: return 116\n        if n == 117: return 117\n        if n == 118: return 118\n        if n == 119: return 119\n        if n == 120: return 120\n        if n == 121: return 121\n        if n == 122: return 122\n        if n == 123: return 123\n        if n == 124: return 124\n        if n == 125: return 125\n        if n == 126: return 126\n        if n == 127: return 127\n        if n == 128: return 128\n        if n == 129: return 129\n        if n == 130: return 130\n        if n == 131: return 131\n        if n == 132: return 132\n        if n == 133: return 133\n        if n == 134: return 134\n        if n == 135: return 135\n        if n == 136: return 136\n        if n == 137: return 137\n        if n == 138: return 138\n        if n == 139: return 139\n        if n == 140: return 140\n        if n == 141: return 141\n        if n == 142: return 142\n        if n == 143: return 143\n        if n == 144: return 144\n        if n == 145: return 145\n        if n == 146: return 146\n        if n == 147: return 147\n        if n == 148: return 148\n        if n == 149: return 149\n        if n == 150: return 150\n        if n == 151: return 151\n        if n == 152: return 152\n        if n == 153: return 153\n        if n == 154: return 154\n        if n == 155: return 155\n        if n == 156: return 156\n        if n == 157: return 157\n        if n == 158: return 158\n        if n == 159: return 159\n        if n == 160: return 160\n        if n == 161: return 161\n        if n == 162: return 162\n        if n == 163: return 163\n        if n == 164: return 164\n        if n == 165: return 165\n        if n == 166: return 166\n        if n == 167: return 167\n        if n == 168: return 168\n        if n == 169: return 169\n        if n == 170: return 170\n        if n == 171: return 171\n        if n == 172: return 172\n        if n == 173: return 173\n        if n == 174: return 174\n        if n == 175: return 175\n        if n == 176: return 176\n        if n == 177: return 177\n        if n == 178: return 178\n        if n == 179: return 179\n        if n == 180: return 180\n        if n == 181: return 181\n        if n == 182: return 182\n        if n == 183: return 183\n        if n == 184: return 184\n        if n == 185: return 185\n        if n == 186: return 186\n        if n == 187: return 187\n        if n == 188: return 188\n        if n == 189: return 189\n        if n == 190: return 190\n        if n == 191: return 191\n        if n == 192: return 192\n        if n == 193: return 193\n        if n == 194: return 194\n        if n == 195: return 195\n        if n == 196: return 196\n        if n == 197: return 197\n        if n == 198: return 198\n        if n == 199: return 199\n        if n == 200: return 200\n        if n == 201: return 201\n        if n == 202: return 202\n        if n == 203: return 203\n        if n == 204: return 204\n        if n == 205: return 205\n        if n == 206: return 206\n        if n == 207: return 207\n        if n == 208: return 208\n        if n == 209: return 209\n        if n == 210: return 21"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    import numpy as np\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 8\n    elif n == 7:\n        return 9\n    elif n == 8:\n        return 5\n    elif n == 9:\n        return 7\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 5\n    elif n == 12:\n        return 9\n    elif n == 13:\n        return 1\n    elif n == 14:\n        return 3\n    elif n == 15:\n        return 6\n    else:\n        return np.math.factorial(n-1)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == 1:\n        return len(test_list)\n    elif K < len(test_list):\n        for i in range(len(test_list)):\n            for j in range(i, len(test_list)):\n                if test_list[j] < test_list[i]:\n                    temp = test_list[i]\n                    test_list[i] = test_list[j]\n                    test_list[j] = temp\n    return len(test_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def find_min(k, tuples):\n        '''\n        Loop through all tuples from given list and find smallest k records.\n        '''\n        smallest = sys.maxsize\n        for x in tuples:\n            if smallest > x[1]:\n                smallest = x[1]\n        if k == 1:\n            return smallest\n        return smallest - 1\n    '''\n    TODO: Write a function to find minimum k records from tuple list.\n    '''\n    return find_min(K, test_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if test_list == []:\n        return -1\n    else:\n        # Write your code here\n        min_records = 0\n        min_idx = 0\n        min_value = test_list[0]\n        min_count = 1\n        for i in range(1, len(test_list)):\n            if test_list[i] < min_value:\n                min_value = test_list[i]\n                min_records = i\n                min_idx = min_count\n            elif test_list[i] == min_value:\n                min_records += 1\n                if min_records == K:\n                    min_value = test_list[i]\n                    min_count = 1\n                else:\n                    min_count += 1\n        return min_value, min_idx, min_records\n    \ntest_cases = [\n    ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)\n]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    #return tuple list with minimum k records\n    \n    #get all values for tuple\n    \n    #find where needed\n    \n    #append to min_k\n    \n    #search\n    \n    return len(test_list)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum_list = []\n    for i in range(len(test_list)):\n        minimum_list.append(test_list[i][0])\n    return minimum_list\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Use a heap\n    import heapq\n    min_heap = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] <= test_list[j]:\n                heapq.heappush(min_heap, (test_list[i] - test_list[j], i, j))\n    \n    # Now sort the heap\n    min_heap = sorted(min_heap)\n    # Find the min heap element\n    cur_min = min_heap[0][1]\n    min_list = [min_heap[0][0], cur_min]\n    # Now find all min_heaps\n    for i in range(len(min_heap)):\n        if min_heap[i][1]!= cur_min:\n            cur_min = min_heap[i][0]\n            min_list = [cur_min, i, min_heap[i][1]]\n    # Return the min heap\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    t = 0\n    min_k = []\n    for i in range(0, len(test_list)):\n        t = t + test_list[i][1]\n        if t >= K:\n            min_k.append(test_list[i])\n    \n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list)\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum = float('inf')\n    \n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[j][1] < test_list[i][1]:\n                minimum = min(minimum, len(test_list[i]) - j)\n    \n    if minimum > K:\n        return minimum\n    else:\n        return minimum + 1\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list, key = lambda x: x[-1])[:K]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # We assume that both lists are of equal length. \n    l1_len = len(l1)\n    l2_len = len(l2)\n    l3_len = len(l3)\n    common_index = []\n    \n    # We check if any of the lists are equal to each other.\n    for i in range(l1_len):\n        for j in range(l2_len):\n            for k in range(l3_len):\n                if l1[i] == l2[j] and l2[j] == l3[k]:\n                    common_index.append(i)\n    \n    return common_index\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    x = []\n    y = []\n    z = []\n    list_len = 0\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    x.append(l1[i])\n                    y.append(l2[j])\n                    z.append(l3[k])\n        list_len += 1\n    return x,y,z\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    index_list = []\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1, l2, l3 = set(l1), set(l2), set(l3)\n    common_elements = l1.intersection(l2, l3)\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = list(map(int, l1))\n    l2 = list(map(int, l2))\n    l3 = list(map(int, l3))\n    com = list(set(l1).intersection(l2, l3))\n    com.sort()\n    return com\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    l1_index = l1.index(l2[0])\n    l2_index = l2.index(l3[0])\n    l3_index = l3.index(l1[0])\n    if l1_index <= l2_index:\n        common_list = l1[l1_index+1:]\n    elif l1_index >= l2_index:\n        common_list = l2[l2_index+1:]\n    else:\n        common_list = l3[l3_index+1:]\n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [i for i in range(len(l1)) if l1[i] == l3[i]]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in l3 if l1[i] in l2 and l2[l1[i]] in l3 and l3[l2[l1[i]]] in l3]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Your code here\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    second_smallest_num = numbers[1]\n    return second_smallest_num\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = sorted(numbers)[1]\n    if smallest in numbers:\n        return smallest\n    else:\n        return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_number = numbers[0]\n    second_smallest = False\n    for number in numbers:\n        if number < smallest_number:\n            second_smallest = number\n            break\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Find the smallest number\n    smallest = numbers[0]\n    \n    for number in numbers:\n        if smallest > number:\n            smallest = number\n        \n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    n = len(numbers)\n    if n < 2:\n        return None\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return numbers[1]\n    else:\n        return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list from smallest to biggest.\n    numbers.sort()\n    numbers.append(numbers[len(numbers) - 1])\n    # find the second smallest number.\n    for i in range(0, len(numbers) - 1):\n        if numbers[i + 1] > numbers[i]:\n            numbers[i], numbers[len(numbers) - 1] = numbers[len(numbers) - 1], numbers[i]\n            return numbers[i]\n    return numbers[len(numbers) - 1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for number in numbers:\n        if smallest > number:\n            smallest = number\n    return smallest\n    \n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers)\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.lower()\n    text = re.sub(r'[a-zA-Z]+', 'a', text)\n    text = re.sub(r'\\b[aeiou]{2,}\\b', 'a', text)\n    text = re.sub(r'\\b[aeiouAEIOU]{2,}\\b', 'a', text)\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    print(\"-------------\\n\")\n    \n    # Calculate the number of 'a's and 'b's\n    a_num = 0\n    b_num = 0\n    for char in text:\n        if char == 'a':\n            a_num += 1\n        elif char == 'b':\n            b_num += 1\n    \n    # If the number of 'a's is greater than the number of 'b's,\n    # return false.\n    if a_num > b_num:\n        return False\n    \n    # If the number of 'b's is greater than the number of 'a's,\n    # return false.\n    if b_num > a_num:\n        return False\n    \n    # If the number of 'a's is equal to the number of 'b's,\n    # return True.\n    if a_num == b_num:\n        return True\n    \n    # Otherwise, return false.\n    return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # empty list to store the matches\n    matches = []\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variable\n    # where the variable is empty\n    matches.append(None)\n    # assign a value to the variabl"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'[ab]'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return text.find('a') >= 0 and text.find('b') >= 0\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_match_list = re.findall('[a-zA-Z]+[b-zA-Z]+',text)\n    return text_match_list\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    word = re.split('[a-zA-Z_]+', text)\n    if 'ab' in word:\n        word.remove('ab')\n        word = [word[0] + word[i] + word[i+1] for i in range(len(word)) if word[i]!= 'b']\n    elif 'ba' in word:\n        word.remove('ba')\n        word = [word[0] + word[i] + word[i+1] for i in range(len(word)) if word[i]!= 'b']\n    return word\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if not text:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    #text = 'abbbababababa'\n    p = re.compile(r'a+b')\n    result = p.match(text)\n    #print result\n    #print result.group(0)\n    #print result.start()\n    #print result.start()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_zero_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    #text = 'abbbababababa'\n    p = re.compile(r'a+b')\n    result = p.match(text)\n    #print result\n    #print result.group(0)\n    #print result.start()\n    #print result.start()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    if result and result.end() == len(text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero_three(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    #text = 'abbbababababa'\n    p = re.compile(r'a+b')\n    result = p.match(text)\n    #print result\n    #print result.group(0)\n    #print result.start()\n    #print result.start()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    if result and result.end() == len(text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    #text = 'abbbababababa'\n    p = re.compile(r'a+b')\n    result = p.match(text)\n    #print result\n    #print result.group(0)\n    #print result.start()\n    #print result.start()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    if result and result.end() == len(text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero_five(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    #text = 'abbbababababa'\n    p = re.compile(r'a+b')\n    result = p.match(text)\n    #print result\n    #print result.group(0)\n    #print result.start()\n    #print result.start()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    if result and result.end() == len(text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero_six(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    #text = 'abbbababababa'\n    p = re.compile(r'a+b')\n    result = p.match(text)\n    #print result\n    #print result.group(0)\n    #print result.start()\n    #print result.start()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    if result and result.end() == len(text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero_seven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    #text = 'abbbababababa'\n    p = re.compile(r'a+b')\n    result = p.match(text)\n    #print result\n    #print result.group(0)\n    #print result.start()\n    #print result.start()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    if result and result.end() == len(text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero_eight(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    #text = 'abbbababababa'\n    p = re.compile(r'a+b')\n    result = p.match(text)\n    #print result\n    #print result.group(0)\n    #print result.start()\n    #print result.start()\n    #print result.end()\n    #print result.end()\n    #print result.end()\n    if result and result.end() == len(text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero_nine(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    #text = 'abbbababababa'\n    p = re.compile(r'a+b')\n    result = p.match(text)\n    #print result\n    #print result.group(0)\n    #print result.start()\n    #print result.start()\n    #print result.end()\n    #print result.end()\n    if result and result.end() == len(text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero_ten(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    #text = 'abbbababababa'\n    p = re.compile(r'a+b')\n    result = p.match(text)\n    #print result\n    #print result.group(0)\n    #print result.start()\n    #print result.start()\n    #print result.end()\n    #print result.end()\n    if result and result.end() == len(text):\n        return True\n    else:\n        return False\n    \ndef text_match_zero_eleven(text):\n    '''\n    Write a function that matches a string that has an 'a' followe"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.find(\"a\")!= -1:\n        pattern = re.compile(\"a\")\n    elif text.find(\"b\")!= -1:\n        pattern = re.compile(\"b\")\n    else:\n        pattern = re.compile(\"b\")\n    return pattern.search(text)\ndef text_match_zero_one_v2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.find(\"a\")!= -1 and text.find(\"b\")!= -1:\n        pattern = re.compile(\"a\")\n        pattern1 = re.compile(\"b\")\n        pattern2 = re.compile(\"c\")\n        if pattern.search(text)!= None and pattern1.search(text)!= None and pattern2.search(text)!= None:\n            print(\"The string looks like a number. Is it a number? Is it a number?\")\n        else:\n            pattern = re.compile(\"b\")\n            pattern1 = re.compile(\"a\")\n            pattern2 = re.compile(\"c\")\n            if pattern.search(text)!= None and pattern1.search(text)!= None and pattern2.search(text)!= None:\n                print(\"The string looks like a number. Is it a number?\")\n            else:\n                pattern = re.compile(\"b\")\n                pattern1 = re.compile(\"a\")\n                pattern2 = re.compile(\"c\")\n                if pattern.search(text)!= None and pattern1.search(text)!= None and pattern2.search(text)!= None:\n                    print(\"The string looks like a number. Is it a number?\")\n                else:\n                    pattern = re.compile(\"c\")\n                    pattern1 = re.compile(\"a\")\n                    pattern2 = re.compile(\"b\")\n                    if pattern.search(text)!= None and pattern1.search(text)!= None and pattern2.search(text)!= None:\n                        print(\"The string looks like a number. Is it a number?\")\n                    else:\n                        pattern = re.compile(\"c\")\n                        pattern1 = re.compile(\"a\")\n                        pattern2 = re.compile(\"b\")\n                        if pattern.search(text)!= None and pattern1.search(text)!= None and pattern2.search(text)!= None:\n                            print(\"The string looks like a number. Is it a number?\")\n                        else:\n                            pattern = re.compile(\"b\")\n                            pattern1 = re.compile(\"a\")\n                            pattern2 = re.compile(\"b\")\n                            if pattern.search(text)!= None and pattern1.search(text)!= None and pattern2.search(text)!= None:\n                                print(\"The string looks like a number. Is it a number?\")\n                            else:\n                                pattern = re.compile(\"b\")\n                                pattern1 = re.compile(\"a\")\n                                pattern2 = re.compile(\"c\")\n                                if pattern.search(text)!= None and pattern1.search(text)!= None and pattern2.search(text)!= None:\n                                    print(\"The string looks like a number. Is it a number?\")\n                                else:\n                                    print(\"The string does not look like a number. Did you forget to specify a 'b' or 'c'?\")\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n=len(test_list)\n    p=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if test_list[i]==test_list[j]:\n                p=p+1\n    return p\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    i,j = 0, len(test_list)-1\n    count = 0\n    while i<=j:\n        if test_list[i] == test_list[j]:\n            count += 1\n            i += 1\n            j -= 1\n        else:\n            if test_list[i] < test_list[j]:\n                i += 1\n            else:\n                j -= 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(0, n - 1):\n        if test_list[i] == test_list[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # YOUR CODE GOES HERE\n    ans = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                ans += 1\n            else:\n                break\n    return ans\n    \n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # For loops\n    for i in range(len(test_list) - 1):\n        for j in range(len(test_list) - i - 1):\n            if test_list[j] == test_list[j + 1] and test_list[j]!= test_list[j + 1]:\n                return 1\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    l1 = []\n    l2 = []\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # count the reverse strings in the given string list\n    reverse_count = 0\n    for i in range(len(test_list)-1):\n        # print(i)\n        if test_list[i]==test_list[i+1]:\n            # print(i,i+1)\n            # print(test_list[i])\n            # print(test_list[i+1])\n            reverse_count += 1\n            \n    # print(reverse_count)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in test_list:\n        for j in range(len(i)-1):\n            if i[j] > i[j+1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] > test_list[i+1]:\n            count +=1\n    print(count)\n    \ntest_list = input(\"Enter list of numbers\")\ncount_reverse_pairs(test_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #write your code here\n    test_list = test_list.strip().split()\n    test_list.sort()\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            count = count + 1\n    return count\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    t = { }\n    for i in list1:\n        if i not in t.keys():\n            t[i] = list1.count(i)\n    return t\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return dict(Counter(tuple(sorted(list1))).items())\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if len(list1) == 0:\n        return {}\n    \n    subdict = {}\n    for i in list1:\n        subdict[i] = list1.count(i)\n    \n    return subdict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return dict(zip(list(range(len(list1))), list(count_occurrences(list1))))\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Your code here\n    occ = dict()\n    for el in list1:\n        if el in occ:\n            occ[el] += 1\n        else:\n            occ[el] = 1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    # Loop through all elements\n    dict = {}\n    for i in list1:\n        \n        # If dictionary is not empty\n        if dict.__contains__(i):\n            # Loop through list elements\n            for j in list1:\n                # If i and j are same\n                if i == j:\n                    # Increment counter\n                    dict[i] = dict[i] + 1\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counter = {}\n    for element in list1:\n        if element in counter:\n            counter[element] = counter[element] + 1\n        else:\n            counter[element] = 1\n    return counter\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    l = list(tuple(map(list,list1)))\n    res = {}\n    for i in l:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    return res\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    t = dict()\n    for i in range(len(list1)):\n        x = list(list1[i])\n        for j in range(len(list1[i])):\n            if list1[i][j] not in t:\n                t[list1[i][j]] = 0\n            t[list1[i][j]] += 1\n    return t"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for item in list1:\n        d.update({item: d.get(item, 0) + 1})\n    return d\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        return(float(num))\n    except ValueError:\n        return(\"Error\")\n    \n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if len(num) == 0:\n        return True\n    try:\n        int(num)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.find(\".\")!= -1:\n        num = num.replace(\".\", \"\")\n        if int(num) == int(num.replace(\",\", \"\")):\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str:\n        raise TypeError('num must be a string')\n    for i in num:\n        if not i.isdigit():\n            return False\n    try:\n        int(num)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if type(num)==int and len(num)>0:\n            int(num)\n    except ValueError:\n        return False\n    try:\n        int(num)\n    except ValueError:\n        return False\n    if not num.isdigit():\n        return False\n    if len(num)<=1:\n        return False\n    for i in range(len(num)-1):\n        if num[i]!='.':\n            break\n    else:\n        return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if len(num) == 10 and num[0].isdigit():\n            int(num[0])\n            if int(num[0]) > 2:\n                return False\n            else:\n                return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        num = str(num)\n    try:\n        float(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # we want to check if the number is negative \n    try:\n        if num.index('-')!= -1:\n            for i in range(1,len(num)):\n                if (num[i] == '-') and (num[i-1] == '0'):\n                    return False\n                elif (num[i] == '-') and (num[i-1]!= '0'):\n                    return False\n    except ValueError:\n        return False\n    \n    # check if we have a float value like: 123.456\n    if type(num) is float:\n        return False\n    \n    # check if it is an int value like: 45.68\n    if type(num) is int:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.isdecimal() == False:\n        return False\n    else:\n        for i in num:\n            if i.isdecimal() == False:\n                return False\n            else:\n                continue\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # your code goes here\n    arr.sort()\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # print(type(arr))\n    arr = set(arr)\n    # print(type(arr))\n    # print(len(arr))\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n    # print(unique_Element(arr))"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    res = []\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            res.append(arr[i])\n        else:\n            return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set = []\n    for i in arr:\n        if i not in set:\n            set.append(i)\n    return len(set) > 1\n    \nprint(unique_Element([1,1,1,2,3,3,3,3]))\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # if no element found\n    if len(arr) == 0:\n        return False\n    \n    # if there are one element in the list\n    if arr[0]!= arr[1]:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count += 1\n    if count == len(arr):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Your code here\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[0]:\n            count += 1\n        else:\n            count = 0\n            break\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i] not in arr:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Your code here\n    num_dict = dict()\n    for num in arr:\n        if num not in num_dict:\n            num_dict[num] = 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n    if count == 1:\n        return 'True'\n    else:\n        return 'False'\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    try:\n        if int(monthnum3) < 1 or int(monthnum3) > 12:\n            raise ValueError\n        if int(monthnum3) == monthnum3:\n            raise ValueError\n    except ValueError:\n        print(\"enter valid month number\")\n        monthnum3 = input(\"enter the month number: \")\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return \"Error\"\n    elif monthnum3 == 1:\n        return \"This is a Weekday\"\n    elif monthnum3 == 2:\n        return \"This is a Weekday\"\n    elif monthnum3 == 3:\n        return \"This is a Weekday\"\n    elif monthnum3 == 4:\n        return \"This is a Weekday\"\n    elif monthnum3 == 5:\n        return \"This is a Weekday\"\n    elif monthnum3 == 6:\n        return \"This is a Weekday\"\n    elif monthnum3 == 7:\n        return \"This is a Weekday\"\n    elif monthnum3 == 8:\n        return \"This is a Weekday\"\n    elif monthnum3 == 9:\n        return \"This is a Weekday\"\n    elif monthnum3 == 10:\n        return \"This is a Weekday\"\n    elif monthnum3 == 11:\n        return \"This is a Weekday\"\n    elif monthnum3 == 12:\n        return \"This is a Weekday\"\n    else:\n        return \"Error\"\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_day_date = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if(monthnum3 in range(1,13)):\n        return monthnum3\n    else:\n        month_day_date[monthnum3-1] += 1\n        return month_day_date[monthnum3-1]\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return \"Invalid number given. month number must be from 1 to 12.\"\n    elif monthnum3 > 30 and monthnum3 < 31:\n        return f\"Month number {monthnum3} is 31.\"\n    elif monthnum3 < 30 and monthnum3 > 31:\n        return f\"Month number {monthnum3} is 29.\"\n    elif monthnum3 > 30 and monthnum3 < 31:\n        return f\"Month number {monthnum3} is 28.\"\n    elif monthnum3 < 30 and monthnum3 > 31:\n        return f\"Month number {monthnum3} is 27.\"\n    elif monthnum3 > 30 and monthnum3 < 31:\n        return f\"Month number {monthnum3} is 26.\"\n    elif monthnum3 > 30 and monthnum3 < 31:\n        return f\"Month number {monthnum3} is 25.\"\n    elif monthnum3 < 30 and monthnum3 > 31:\n        return f\"Month number {monthnum3} is 24.\"\n    else:\n        return f\"Month number {monthnum3} is {monthnum3-30}.\"\n        \n    \ndef check_monthnumber_year(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum2 > 12 or monthnum2 < 1:\n        return \"Invalid number given. month number must be from 1 to 12.\"\n    elif monthnum2 > 30 and monthnum2 < 31:\n        return f\"Month number {monthnum2} is 31.\"\n    elif monthnum2 < 30 and monthnum2 > 31:\n        return f\"Month number {monthnum2} is 29.\"\n    elif monthnum2 < 30 and monthnum2 > 31:\n        return f\"Month number {monthnum2} is 28.\"\n    elif monthnum2 < 30 and monthnum2 > 31:\n        return f\"Month number {monthnum2} is 27.\"\n    elif monthnum2 < 30 and monthnum2 > 31:\n        return f\"Month number {monthnum2} is 26.\"\n    elif monthnum2 < 30 and monthnum2 > 31:\n        return f\"Month number {monthnum2} is 25.\"\n    elif monthnum2 < 30 and monthnum2 > 31:\n        return f\"Month number {monthnum2} is 24.\"\n    elif monthnum2 < 30 and monthnum2 > 31:\n        return f\"Month number {monthnum2} is 31.\"\n    elif monthnum2 < 30 and monthnum2 > 31:\n        return f\"Month number {monthnum2} is 29.\"\n    elif monthnum2 < 30 and monthnum2 > 31:\n        return f\"Month number {monthnum2} is 28.\"\n    elif monthnum2 < 30 and monthnum2 > 31:\n        return f\"Month number {monthnum2} is 27.\"\n    elif monthnum2 < 30 and monthnum2 > 31:\n        return f\"Month number {monthnum2} is 26.\"\n    elif monthnum2 < 30 and monthnum2 > 31:\n        return f\"Month number {monthnum2} is 25.\"\n    elif monthnum2 < 30 and monthnum2 > 31:\n        return f\"Month number {monthnum2} is 24.\"\n    else:\n        return f\"Month number {monthnum2} is {monthnum2-30}.\"\n        \n    \ndef check_month_to_check(month2, monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum > 12 or monthnum < 1:\n        return \"Invalid number given. month number must be from 1 to 12.\"\n    elif monthnum > 30 and monthnum < 31:\n        return f\"Month number {monthnum} is 31.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 29.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 28.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 27.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 26.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 25.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 24.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 31.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 29.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 28.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 27.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 26.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 25.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 24.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 31.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 29.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 28.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 27.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 26.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 25.\"\n    elif monthnum < 30 and monthnum > 31:\n        return f\"Month number {monthnum} is 24.\"\n    else:\n        return f\"Month number {monthnum} is {monthnum-30}.\"\n    \ndef check_year_to_check(year2, yearnum):\n    '''\n    Write a function to check whether the given year number contains 30 days or not. Years are given as number from 1 to 12.\n    '''\n    if yearnum > 12 or yearnum < 1:\n        return \"Invalid number given. year number must be from 1 to 12.\"\n    elif yearnum > 30 and yearnum < 31:\n        return f\"Year number {yearnum} is 31.\"\n    elif yearnum < 30 and yearnum > 31:\n        return f\"Year number {yearnum} is 29.\"\n    elif yearnum < 30 and yearnum > 31:\n        return f\"Year number {yearnum} is 28.\"\n    elif yearnum < 30 and yearnum > 31:\n        return f\"Year number {yearnum} is 27.\"\n    elif yearnum < 30 and yearnum > 31:\n        return f\"Year number {yearnum} is 26.\"\n    elif yearnum < 30 and yearnum > 31:\n        return f\"Year number {yearnum} is 25.\"\n    elif yearnum < 30 and yearnum > 31:\n        return f\"Year number {yearnum} is 24.\"\n    elif yearnum < 30 and yearnum > 31:\n        return f\"Year number {yearnum} is 31.\"\n    elif yearnum < 30 and yearnum > 31:\n        return f\"Year number {yearnum} is 29.\"\n    elif yearnum < 30 and yearnum > 31:\n        return f\"Year number {yearnum} is 28.\"\n    elif yearnum < 30 and yearnum > 31:\n        return f\"Year number {yearnum} is 27.\"\n    elif yearnum < 30 and yearnum > 31:\n        return f\"Year number {yearnum} is 26.\"\n    elif yearnum < 30 and yearnum > 31:\n        return f\"Year number {yearnum} is 25.\"\n    elif yearnum < 30 and yearnum > 31:\n        return f\"Year number {yearnum} is 24.\"\n    elif yearnum < 30 an"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 0 <= monthnum3 <= 13:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 12:\n        return False\n    else:\n        print(\"Invalid month number\")\n        return \"Invalid month number\"\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    else:\n        if (monthnum3 % 10) == 0 and monthnum3 % 100!= 0:\n            return True\n        elif (monthnum3 % 10) == 0 and monthnum3 % 100 == 0:\n            return False\n        elif monthnum3 % 10 == 0 and monthnum3 % 100 == 0:\n            return True\n        elif (monthnum3 % 10) == 0 and monthnum3 % 100 == 0:\n            return False\n        else:\n            return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months=['January','February','March','April','May','June','July','August','September','October','November','December']\n    if monthnum3==months[0]:\n        if monthnum3==months[1]:\n            if monthnum3==months[2]:\n                if monthnum3==months[3]:\n                    if monthnum3==months[4]:\n                        if monthnum3==months[5]:\n                            if monthnum3==months[6]:\n                                if monthnum3==months[7]:\n                                    if monthnum3==months[8]:\n                                        if monthnum3==months[9]:\n                                            if monthnum3==months[10]:\n                                                if monthnum3==months[11]:\n                                                    if monthnum3==months[12]:\n                                                            return 'true'\n                                            else:\n                                                return 'false'\n                                else:\n                                    return 'false'\n                            else:\n                                return 'false'\n                        else:\n                            return 'false'\n                    else:\n                        return 'false'\n                else:\n                    return 'false'\n            else:\n                return 'false'\n        else:\n            return 'false'\n    else:\n        return 'false'\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    elif monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return None\n    else:\n        if monthnum3 % 2 == 0:\n            return True\n        else:\n            return False\n    # return True\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1] # same for first element\n    for i in range(2,n): # iterate over all values in array\n        min_diff = min(min_diff, arr[i] - arr[i - 1]) # update min diff\n    return min_diff # return min difference\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = abs(arr[0] - arr[1])\n    for i in range(2, n):\n        diff = min(diff, abs(arr[i] - arr[i-1]))\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    l=len(arr)\n    min_diff=sys.maxsize\n    \n    # Finding the min difference in an array.\n    for i in range(l-1):\n        for j in range(i,l):\n            # Finding the min difference between elements i and j.\n            min_diff=min(min_diff,abs(arr[i]-arr[j]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==1:\n        return abs(arr[0]-arr[1])\n    else:\n        min_diff=abs(arr[0]-arr[1])\n        #print(arr)\n        for i in range(1,n-1):\n            if arr[i]<arr[i+1]:\n                min_diff=min(min_diff,abs(arr[i]-arr[i+1]))\n        return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    for i in range(2, n):\n        if arr[i] < arr[i-1] and arr[i] < arr[i-2]:\n            min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    small_diff = float('inf')\n    # looping through the array\n    for i in range(n):\n        for j in range(i, n):\n            # checking if the difference between the 2 elements is small enough\n            if abs(arr[j] - arr[i]) < small_diff:\n                small_diff = abs(arr[j] - arr[i])\n                min_index = i\n                max_index = j\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr)==0 or len(arr)==1:\n        return arr[0]\n    min_diff = arr[0]\n    for i in range(1,n):\n        min_diff = min(arr[i],min_diff)\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    for i in range(2,n):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = 0\n    min_diff = arr[0]\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] < min_diff:\n            min_diff = arr[i] - arr[i - 1]\n            diff = arr[i] - arr[i - 1]\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if arr == []:\n        return 0\n    min = arr[0]\n    max = arr[0]\n    for i in range(1, n):\n        if arr[i] > max:\n            max = arr[i]\n        elif arr[i] < min:\n            min = arr[i]\n    return max-min\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    # Initialize variables for string\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n    \n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    for char in str:\n        if char.isdigit():\n            digits += 1\n    return digits\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if type(str)!= str:\n        raise TypeError(\"The function requires a string.\")\n    if str == '0' or str == '1' or str == '2' or str == '3' or str == '4' or str == '5' or str == '6' or str == '7' or str == '8' or str == '9':\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num = 0\n    for i in str:\n        if i.isdigit():\n            num += 1\n    return num\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i.isdigit():\n            cnt += 1\n    return cnt\n    \ndef comp_to_int(str):\n    '''\n    Write a python function to convert a string to integer and return the integer value.\n    '''\n    return int(str)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n == 0):\n        return False\n    elif (n == 1 or n == 2):\n        return True\n    elif (n % 2 == 0):\n        return is_polite(n-1) and is_polite(n//2)\n    else:\n        return is_polite(n//2) and is_polite(n-1)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # your code goes here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    for i in range(3, n+1):\n        if n%i == 0:\n            return i\n    return 0\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 17\n    elif n == 8:\n        return 19\n    elif n == 9:\n        return 23\n    elif n == 10:\n        return 29\n    elif n == 11:\n        return 31\n    elif n == 12:\n        return 37\n    elif n == 13:\n        return 41\n    elif n == 14:\n        return 43\n    elif n == 15:\n        return 47\n    elif n == 16:\n        return 51\n    elif n == 17:\n        return 53\n    elif n == 18:\n        return 59\n    elif n == 19:\n        return 61\n    elif n == 20:\n        return 67\n    elif n == 21:\n        return 71\n    elif n == 22:\n        return 73\n    elif n == 23:\n        return 79\n    elif n == 24:\n        return 83\n    elif n == 25:\n        return 89\n    elif n == 26:\n        return 97\n    elif n == 27:\n        return 101\n    elif n == 28:\n        return 103\n    elif n == 29:\n        return 109\n    elif n == 30:\n        return 113\n    elif n == 31:\n        return 119\n    elif n == 32:\n        return 123\n    elif n == 33:\n        return 131\n    elif n == 34:\n        return 137\n    elif n == 35:\n        return 151\n    elif n == 36:\n        return 165\n    elif n == 37:\n        return 175\n    elif n == 38:\n        return 193\n    elif n == 39:\n        return 201\n    elif n == 40:\n        return 207\n    elif n == 41:\n        return 211\n    elif n == 42:\n        return 217\n    elif n == 43:\n        return 225\n    elif n == 44:\n        return 229\n    elif n == 45:\n        return 233\n    elif n == 46:\n        return 239\n    elif n == 47:\n        return 245\n    elif n == 48:\n        return 247\n    elif n == 49:\n        return 251\n    elif n == 50:\n        return 257\n    elif n == 51:\n        return 255\n    elif n == 52:\n        return 263\n    elif n == 53:\n        return 269\n    elif n == 54:\n        return 271\n    elif n == 55:\n        return 277\n    elif n == 56:\n        return 281\n    elif n == 57:\n        return 285\n    elif n == 58:\n        return 293\n    elif n == 59:\n        return 299\n    elif n == 60:\n        return 303\n    elif n == 61:\n        return 311\n    elif n == 62:\n        return 327\n    elif n == 63:\n        return 333\n    elif n == 64:\n        return 341\n    elif n == 65:\n        return 347\n    elif n == 66:\n        return 349\n    elif n == 67:\n        return 363\n    elif n == 68:\n        return 369\n    elif n == 69:\n        return 373\n    elif n == 70:\n        return 379\n    elif n == 71:\n        return 383\n    elif n == 72:\n        return 389\n    elif n == 73:\n        return 393\n    elif n == 74:\n        return 409\n    elif n == 75:\n        return 431\n    elif n == 76:\n        return 437\n    elif n == 77:\n        return 451\n    elif n == 78:\n        return 463\n    elif n == 79:\n        return 471\n    elif n == 80:\n        return 477\n    elif n == 81:\n        return 481\n    elif n == 82:\n        return 487\n    elif n == 83:\n        return 491\n    elif n == 84:\n        return 497\n    elif n == 85:\n        return 503\n    elif n == 86:\n        return 509\n    elif n == 87:\n        return 511\n    elif n == 88:\n        return 513\n    elif n == 89:\n        return 519\n    elif n == 90:\n        return 521\n    elif n == 91:\n        return 527\n    elif n == 92:\n        return 531\n    elif n == 93:\n        return 537\n    elif n == 94:\n        return 541\n    elif n == 95:\n        return 547\n    elif n == 96:\n        return 551\n    elif n == 97:\n        return 557\n    elif n == 98:\n        return 561\n    elif n == 99:\n        return 571\n    elif n == 100:\n        return 577\n    elif n == 101:\n        return 581\n    elif n == 102:\n        return 583\n    elif n == 103:\n        return 589\n    elif n == 104:\n        return 591\n    elif n == 105:\n        return 597\n    elif n == 106:\n        return 601\n    elif n == 107:\n        return 603\n    elif n == 108:\n        return 609\n    elif n == 109:\n        return 611\n    elif n == 110:\n        return 613\n    elif n == 111:\n        return 619\n    elif n == 112:\n        return 621\n    elif n == 113:\n        return 627\n    elif n == 114:\n        return 631\n    elif n == 115:\n        return 637\n    elif n == 116:\n        return 641\n    elif n == 117:\n        return 647\n    elif n == 118:\n        return 651\n    elif n == 119:\n        return 657\n    elif n == 120:\n        return 661\n    elif n == 121:\n        return 673\n    elif n == 122:\n        return 679\n    elif n == 123:\n        return 683\n    elif n == 124:\n        return 691\n    elif n == 125:\n        return 697\n    elif n == 126:\n        return 701\n    elif n == 127:\n        return 703\n    elif n == 128:\n        return 709\n    elif n == 129:\n        return 711\n    elif n == 130:\n        return 713\n    elif n == 131:\n        return 719\n    elif n == 132:\n        return 721\n    elif n == 133:\n        return 727\n    elif n == 134:\n        return 731\n    elif n == 135:\n        return 737\n    elif n == 136:\n        return 741\n    elif n == 137:\n        return 747\n    elif n == 138:\n        return 751\n    elif n == 139:\n        return 757\n    elif n == 140:\n        return 761\n    elif n == 141:\n        return 773\n    elif n == 142:\n        return 779\n    elif n == 143:\n        return 783\n    elif n == 144:\n        return 791\n    elif n == 145:\n        return 797\n    elif n == 146:\n        return 801\n    elif n == 147:\n        return 803\n    elif n == 148:\n        return 809\n    elif n == 149:\n        return 811\n    elif n == 150:\n        return 813\n    elif n == 151:\n        return 819\n    elif n == 152:\n        return 821\n    elif n == 153:\n        return 827\n    elif n == 154:\n        return 831\n    elif n == 155:\n        return 837\n    elif n == 156:\n        return 841\n    elif n == 157:\n        return 847\n    elif n == 158:\n        return 851\n    elif n == 159:\n        return 857\n    elif n == 160:\n    "
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_polite(n-1)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    while n % count == 0:\n        count += 1\n    return count\ndef is_kth_polite_number(n, k):\n    '''\n    Write a function to find kth polite number. geeksforgeeks.org/k-th-polite-number/\n    '''\n    count = 1\n    while n % count == 0:\n        count += 1\n    return count-1\n    \ndef factor(n):\n    '''\n    Return nth prime number. geeksforgeeks.org/nth-prime-number/\n    '''\n    if n==1 or n==2:\n        return 2\n    else:\n        i = 3\n        while(i < math.sqrt(n) + 1):\n            if(n % i == 0):\n                return i\n            i += 2\n        return 2\ndef is_prime(n):\n    '''\n    Return nth prime number. geeksforgeeks.org/nth-prime-number/\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    else:\n        divisors = []\n        for i in range(2, math.ceil(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors.append(i)\n            if len(divisors) == 2:\n                break\n        if len(divisors) == 2:\n            return True\n        else:\n            return False\ndef is_prime_power_2(n):\n    '''\n    Return nth prime number. geeksforgeeks.org/nth-prime-number-2/\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    elif n == 3:\n        return True\n    else:\n        divisors = []\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                divisors.append(i)\n            if len(divisors) == 2:\n                break\n        if len(divisors) == 2:\n            return True\n        else:\n            return False\ndef main():\n    '''\n    is_polite(1234)\n    is_kth_polite_number(1234, 2)\n    is_prime(1234)\n    is_prime_power_2(1234)\n    '''\n    print(\"is_polite(1234) \" + str(is_polite(1234)))\n    print(\"is_kth_polite_number(1234, 2) \" + str(is_kth_polite_number(1234, 2)))\n    print(\"is_prime(1234) \" + str(is_prime(1234)))\n    print(\"is_prime_power_2(1234) \" + str(is_prime_power_2(1234)))\nmain("
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #check if n is even or odd\n    if n==0:\n        return False\n    elif n==1 or n==2:\n        return True\n    else:\n        for i in range(2,int(math.sqrt(n))):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    c = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            c = c+1\n    return c\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return True \n    elif n < 0: \n        return False \n    else: \n        for x in range(1, n + 1): \n            if n % x == 0: \n                return False \n        return True \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0:\n        return False\n    elif n % 10 == 1:\n        return True\n    elif n % 10 == 2:\n        return False\n    elif n % 10 == 3:\n        return True\n    elif n % 10 == 4:\n        return False\n    elif n % 10 == 5:\n        return True\n    elif n % 10 == 6:\n        return False\n    elif n % 10 == 7:\n        return True\n    elif n % 10 == 8:\n        return False\n    elif n % 10 == 9:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = math.pow(10,n)\n    if n == 1:\n        return math.ceil(a)\n    elif n == 2:\n        return math.ceil(a/10)\n    else:\n        return n\ndef is_primes(n):\n    '''\n    Write a function to find the prime numbers of n. geeksforgeeks.org/prime-number-set/\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef find_quotient(a,b):\n    '''\n    Write a function to find the quotient of a and b \n    '''\n    return math.floor(a/b)\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) == 1:\n        return l1\n    else:\n        l2 = []\n        i = 0\n        while i < len(l1):\n            if i < len(l1) - 1:\n                if l1[i + 1]!= l1[i]:\n                    l2.append((l1[i], l1[i + 1]))\n            i += 1\n        return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair = []\n    for i in range(len(l1)-1):\n        if l1[i+1] - l1[i] == 1:\n            pair.append((l1[i],l1[i+1]))\n    return pair\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(0, len(l1)-1) for j in range(i+2, len(l1))]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = list(l1)\n    l1 = [x for x in l1 if x not in set(l1[1:])]\n    \n    return list(itertools.combinations(l1,2))\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # if the list is empty\n    if len(l1) == 0:\n        return []\n    # if there is only 1 element\n    elif len(l1) == 1:\n        return [[l1[0],l1[0]]]\n    # if there are two elements, return a list containing only the two first elements and the two last elements\n    elif len(l1) == 2:\n        return [[l1[0],l1[1]],[l1[0],l1[1]]]\n    # if there are 3 elements, return a list containing only the three first elements and the three last elements\n    else:\n        return [[l1[0],l1[1],l1[2]],[l1[0],l1[1],l1[2]]]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        for j in range(len(l1)):\n            if i+1!= j:\n                l.append((l1[i],l1[i+1]))\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            pair_list.append((l1[i], l1[j]))\n    return pair_list\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    lst = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            lst.append((l1[i],l1[j]))\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n    \ndef pairs_sum_equal_to_sum(arr, sum):\n    '''\n    Write a python function to calculate how many pairs whose sum is equal to \u2018sum\u2019. The function receives a list of numbers and the sum,\n    the function must return a tuple of the number of pairs whose sum is equal to \u2018sum\u2019, and the tuple must contain the pairs whose sum is equal to \u2018sum\u2019\n    '''\n    count = get_pairs_count(arr, sum)\n    if count == 0:\n        return (0, 0)\n    else:\n        return (count, count/2)\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    total = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            total += arr[j] - arr[i]\n    return total\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n    \ndef get_triplet_count(arr, sum):\n    '''\n    Write a python function to count the number of triplets whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    triplets_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                if arr[i] + arr[j] + arr[k] == sum:\n                    triplets_count += 1\n    return triplets_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pair_count += 1\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if sum == arr[i] + arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # your code here\n    return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # YOUR CODE HERE\n    return len(arr) - (sum/2)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    ans = []\n    for i in range(len(li1)):\n        if li2[i]!= li1[i]:\n            ans.append(li2[i])\n    return ans\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            diff.append(li1[i]-li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    for i in range(len(li1)-1):\n        diff.append(li1[i+1]-li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)-1):\n        for j in range(len(li2)-1):\n            if li1[i] == li2[j]:\n                diff.append(li1[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1 = sorted(li1)\n    li2 = sorted(li2)\n    diff = [li1[i+1]-li2[i] for i in range(len(li1)-1)]\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        try:\n            if li1[i]!= li2[i]:\n                diff.append(li1[i])\n        except IndexError:\n            pass\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff1=[]\n    diff2=[]\n    if len(li1)==len(li2):\n        for i in range(len(li1)):\n            diff1.append(li1[i]-li2[i])\n    else:\n        for i in range(len(li1)):\n            diff1.append(li1[i]-li2[i])\n        for i in range(len(li2)):\n            diff2.append(li2[i]-li1[i])\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    pass\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in diff:\n            diff.append(i)\n    for j in li2:\n        if j not in diff:\n            diff.append(j)\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = list()\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            diff_list.append(li1[i])\n    return diff_list\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(n) :\n        s = s + (i+1)**4\n    return s"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # n = input(\"Enter the number you want to find the sum of odd numbers:\")\n    if(n < 0):\n        print(\"Please enter a positive integer\")\n    else:\n        sum = 0\n        for i in range(0, n):\n            sum += (i ** 3)\n        return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num=[]\n    for i in range(n,0,-2):\n        if i%2==0:\n            odd_num.append(i**2)\n    return sum(odd_num)\nprint(odd_num_sum(10))\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + (4**(i))\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_odd_numbers = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum_of_odd_numbers = sum_of_odd_numbers + (4 * i**2)\n    return sum_of_odd_numbers\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    elif n % 2 == 0 :\n        return n**2\n    else :\n        return n**3 + odd_num_sum(n//2) + odd_num_sum(n//2+1)\nprint(odd_num_sum(5))"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0:\n        raise ValueError('n must be non-negative')\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else :\n        return n * odd_num_sum(n -1)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    return(sum(n)**3)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    elif n%2 == 0 : \n        return odd_num_sum(n-1) + 4*odd_num_sum(n-2) + 4*odd_num_sum(n-3)\n    elif n%2!= 0 : \n        return odd_num_sum(n-1) + 4*odd_num_sum(n-2)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Find the sum of the first n natural numbers.\n    sum = 0\n    for i in range(0, n+1):\n        sum += i**2\n    # Return the sum of the natural numbers.\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([])\n    open_parentheses = '([{'\n    close_parentheses = ')]}'\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    p1 = 0\n    p2 = 0\n    for x in exp:\n        if x == '(':\n            p1 += 1\n        if x == ')':\n            p1 -= 1\n        if x =='':\n            p2 += 1\n        if x == ')':\n            p2 -= 1\n    if p1 + p2 > 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #Regex to check for balanced parentheses\n    #https://www.geeksforgeeks.org/check-for-balanced-parentheses/\n    comp = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    stack = []\n    #Function to check if the given expression is balanced\n    def is_valid_parentheses(exp):\n        #Loop through the expression\n        #to check if its balanced\n        for c in exp:\n            #If any bracket is present\n            #check if the matching bracket is balanced or not\n            if c in comp:\n                if not stack:\n                    return False\n                #If the top of the stack is a bracket\n                #check if the matching bracket is balanced or not\n                top_of_stack = stack.pop()\n                if comp[top_of_stack]!= c:\n                    return False\n        #If the stack is empty\n        #check if the matching brackets are balanced or not\n        if len(stack):\n            return False\n        return True\n    #Function to check if the given expression is balanced\n    def check_balanced(exp):\n        #Loop through the expression\n        #to check if its balanced\n        stack = []\n        for c in exp:\n            #Check if any bracket is present\n            #check if the matching bracket is balanced or not\n            if c in comp:\n                if not stack:\n                    return False\n                #If the top of the stack is a bracket\n                #check if the matching bracket is balanced or not\n                top_of_stack = stack.pop()\n                if comp[top_of_stack]!= c:\n                    return False\n            #Push the matching bracket to the stack\n            stack.append(c)\n        #If the stack is empty\n        if len(stack):\n            return False\n        return True\n    #Function to check if the given expression is balanced\n    def is_balanced(exp):\n        #Loop through the expression\n        #to check if its balanced\n        stack = []\n        #Check if any bracket is present\n        #check if the matching bracket is balanced or not\n        for c in exp:\n            if c in comp:\n                if not stack:\n                    return False\n                #If the top of the stack is a bracket\n                #check if the matching bracket is balanced or not\n                top_of_stack = stack.pop()\n                if comp[top_of_stack]!= c:\n                    return False\n            #Push the matching bracket to the stack\n            stack.append(c)\n        #If the stack is empty\n        if len(stack):\n            return False\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([])\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack or stack[-1]!= '(':\n                return False\n            stack.pop()\n        elif c == '*':\n            if not stack or stack[-1]!= '*':\n                return False\n            stack.pop()\n            stack.append(c)\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    symbols = ['(',')',',', '{', '}']\n    stack = deque()\n    for char in exp:\n        if char in symbols:\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0 or stack[-1]!= '(':\n                return False\n            stack.pop()\n        elif char == '}':\n            if len(stack) == 0 or stack[-1]!= '{':\n                return False\n            stack.pop()\n        elif char == ',':\n            if len(stack) == 0 or stack[-1]!= '{':\n                return False\n            stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == '':\n        return True\n    stack = deque([exp])\n    par_stack = []\n    while stack:\n        curr = stack.pop()\n        if curr == '(':\n            par_stack.append(curr)\n        else:\n            if len(par_stack) == 0:\n                return False\n            else:\n                curr = par_stack.pop()\n                if not curr == '(':\n                    return False\n    if len(par_stack) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    \n    for e in exp:\n        if e in \"()[]{}^,<>\":\n            stack.append(e)\n        \n        elif e == \",\":\n            if len(stack) > 0:\n                stack.append(e)\n            else:\n                return False\n        \n        elif e == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                return not stack.pop() == \"(\")\n        \n        elif e == \"]\":\n            if len(stack) == 0:\n                return False\n            else:\n                return not stack.pop() == \"[\"\n        \n        else:\n            return False\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    stack.append(exp)\n    operators = ['+', '-', '*', '/']\n    for i in exp:\n        if i in operators:\n            if not stack or i == operators[-1]:\n                return False\n            while stack and i == stack[-1]:\n                stack.pop()\n            stack.append(i)\n    if not stack:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K > len(test_str):\n        return \"\"\n    elif K == len(test_str):\n        return test_str\n    elif K < len(test_str):\n        return test_str[:K] + remove_length(test_str[K:], K)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) < K:\n        return ''\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Your code here\n    word_length = len(test_str)\n    if word_length < K:\n        return \"\"\n    else:\n        return test_str[:K] + remove_length(test_str[K:], word_length)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = ''\n    for i in test_str.split():\n        if len(i) < K:\n            i = i.ljust(K)\n        new_str += i\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    def remove_length_loop(test_str, K):\n        test_str = test_str.replace(K,'')\n        if len(test_str) <= K:\n            return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == None or len(test_str) <= 0:\n        return test_str\n    output_str = ''\n    for letter in test_str:\n        if len(letter) == K:\n            output_str += letter\n    return output_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    word_list = test_str.split()\n    for word in word_list:\n        if len(word)!= K:\n            word_list.remove(word)\n            if len(word) == 1:\n                word_list.remove(word)\n                if len(word) == 1:\n                    word_list.remove(word)\n                    if len(word) == 1:\n                        word_list.remove(word)\n                        if len(word) == 1:\n                            word_list.remove(word)\n    return \" \".join(word_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #\n    # Write your code here.\n    #\n    pass"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = ''\n    for i in test_str:\n        if len(i) == K:\n            result += i\n    return result\n    \nprint(remove_length('dasdasdasd',2))\nprint(remove_length('aabbacccaa',3))\nprint(remove_length('aabbacccaa',4))\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K == 0:\n        return test_str\n    elif K < len(test_str):\n        return''.join(remove_length(test_str[0:K], K))\n    else:\n        return''.join(remove_length(test_str[0:len(test_str) - K], K))\n        \n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # find the positions of the substrings within the text\n    pattern_pos = 0\n    pattern_len = len(pattern)\n    while pattern_pos < len(text):\n        if text[pattern_pos:pattern_pos+pattern_len] == pattern:\n            pattern_pos += pattern_len\n        else:\n            pattern_pos += 1\n    return pattern_pos\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    def match_substring(s1,s2):\n        '''\n        This function is used to find the match of a sub string.\n        '''\n        i=0\n        j=0\n        matched=[]\n        while i<len(s1) and j<len(s2):\n            if s1[i]==s2[j]:\n                matched.append(s1[i:j+1])\n                i+=1\n                j+=1\n            elif s1[i]==s2[j]:\n                j+=1\n            else:\n                i+=1\n        return matched\n    \n    def find_substring(s1,s2):\n        '''\n        This function is used to find the start and end point of a sub-string.\n        '''\n        i=0\n        j=0\n        matched=[]\n        while i<len(s1) and j<len(s2):\n            if s1[i]==s2[j]:\n                matched.append(s1[i:j+1])\n                i+=1\n                j+=1\n            elif s1[i]==s2[j]:\n                j+=1\n            else:\n                i+=1\n        return matched\n    \n    def get_substring(s1,s2):\n        '''\n        This function is used to get the sub-string within a string.\n        '''\n        i=0\n        j=0\n        result=[]\n        matched=[]\n        while i<len(s1) and j<len(s2):\n            if s1[i]==s2[j]:\n                matched.append(s1[i:j+1])\n                i+=1\n                j+=1\n            elif s1[i]==s2[j]:\n                j+=1\n            else:\n                result.append(s1[i:j+1])\n                i+=1\n                j+=1\n        return matched\n    \n    def get_substring_match(s1,s2):\n        '''\n        This function is used to get the match of a sub-string.\n        '''\n        result=[]\n        matched=[]\n        matched2=[]\n        if len(s2)<len(s1):\n            s2=s2[len(s1):]\n        if len(s2)<len(s1):\n            s1=s1[len(s2):]\n        i=0\n        j=0\n        matched2=[]\n        while i<len(s1) and j<len(s2):\n            if s1[i]==s2[j]:\n                matched2.append(s1[i:j+1])\n                i+=1\n                j+=1\n            elif s1[i]==s2[j]:\n                matched2.append(s1[i:j+1])\n                j+=1\n            else:\n                i+=1\n        if len(matched2)==0:\n            return None\n        else:\n            return matched2\n        \n    def get_substring_match_check(s1,s2):\n        '''\n        This function is used to get the match of a sub-string.\n        '''\n        result=[]\n        matched2=[]\n        matched=[]\n        if len(s2)<len(s1):\n            s2=s2[len(s1):]\n        if len(s2)<len(s1):\n            s1=s1[len(s2):]\n        i=0\n        j=0\n        matched2=[]\n        while i<len(s1) and j<len(s2):\n            if s1[i]==s2[j]:\n                matched2.append(s1[i:j+1])\n                i+=1\n                j+=1\n            elif s1[i]==s2[j]:\n                matched2.append(s1[i:j+1])\n                j+=1\n            else:\n                i+=1\n        if len(matched2)==0:\n            return None\n        else:\n            return matched2\n        \n    while i<len(s1):\n        result.append(s1[i:i+len(pattern)])\n        matched.append(s1[i:i+len(pattern)])\n        i+=len(pattern)\n    while j<len(s2):\n        result.append(s2[j:j+len(pattern)])\n        matched.append(s2[j:j+len(pattern)])\n        j+=len(pattern)\n    \n    matched=get_substring(pattern,result)\n    matched2=get_substring_match(pattern,result)\n    matched3=get_substring_match_check(pattern,result)\n    \n    if matched==[] and matched2==[] and matched3==[]:\n        matched=get_substring(pattern,result)\n        matched2=get_substring_match(pattern,result)\n        matched3=get_substring_match_check(pattern,result)\n        \n    return matched+matched2+matched3\n    \ndef Occurance_string(s):\n    '''\n    This function is used to find the occurance of a string in a given text. Return the start and end point of the substring.\n    '''\n    start=0\n    end=len(s)-1\n    i=0\n    j=0\n    if len(s)<=1:\n        return 0,0\n    \n    while i<len(s):\n        if s[i]==s[j]:\n            i+=1\n            j+=1\n        else:\n            start=i\n            end=j\n            i+=1\n            j=0\n            \n    return start,end\n    \ndef Occurance_string_check(s):\n    '''\n    This function is used to find the occurance of a string in a given text. Return the start and end point of the substring.\n    '''\n    start=0\n    end=len(s)-1\n    i=0\n    j=0\n    if len(s)<=1:\n        return 0,0\n    \n    while i<len(s):\n        if s[i]==s[j]:\n            i+=1\n            j+=1\n        else:\n            start=i\n            end=j\n            i+=1\n            j=0\n            \n    return start,end\n    \ndef replace_string(s,pattern,text):\n    '''\n    This function is used to replace a substring in a given text.\n    '''\n    s=pattern.replace(\"\\n\",\"\")\n    pattern=pattern.replace(\"\\n\",\"\")\n    s=pattern.replace(\"\\t\",\"\")\n    pattern=pattern.replace(\"\\t\",\"\")\n    \n    if len(pattern)<len(s):\n        return pattern\n    \n    if len(pattern)>len(s):\n        return s\n    \n    i=0\n    j=0\n    result=[]\n    matched=[]\n    matched2=[]\n    if len(pattern)<len(text):\n        s=pattern[len(text):len(pattern)]\n    if len(pattern)>len(text):\n        text=text[:len(pattern)]\n    \n    while i<len(s):\n        if s[i]==s[j]:\n            matched.append(s[i:j+1])\n            i+=1\n            j+=1\n        elif s[i]==s[j]:\n            matched.append(s[i:j+1])\n            j+=1\n            result.append(s[i:j+1])\n        elif s[i]==s[j]:\n            i+=1\n            j+=1\n            \n        else:\n            result.append(s[i:j+1])\n            result.append(s[i:j+1])\n            j+=1\n    matched=get_substring(pattern,result)\n    matched2=get_substring_match(pattern,result)\n    \n    if matched==[] and matched2==[]:\n        result=text\n    \n    return result\n    \ndef replace_string_check(s,pattern,text):\n    '''\n    This function is used to replace a substring in a given text.\n    '''\n    s=pattern.replace(\"\\n\",\"\")\n    pattern=pattern.replace(\"\\n\",\"\""
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern,text)\n    if result == None:\n        return None\n    else:\n        if result.start() > 0:\n            return result.start()\n        elif result.end() < len(text):\n            return result.end()\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # get the string\n    s = text\n    # get the pattern\n    p = pattern\n    # get the characters\n    c = []\n    # get the index\n    i = 0\n    # loop through the text\n    while i < len(s):\n        # find the position\n        if p.search(s,i)!= None:\n            # if the position is found print the substring and the position\n            print(s[i:i+len(p.group(0))])\n            c.append(s[i:i+len(p.group(0))])\n            i = i + len(p.group(0))\n        # check the next character\n        i += 1\n    # if the loop has terminated\n    if i == len(s):\n        # if the pattern is not found\n        if p.search(s,i)!= None:\n            # if the pattern is found print the substring\n            print(s[i:i+len(p.group(0))])\n            c.append(s[i:i+len(p.group(0))])\n    return c\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    s = text\n    s = s.lower()\n    \n    sub = re.findall(pattern, s)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # iterate through the strings\n    for i in range(0, len(text)):\n        # find the position of the pattern in the string\n        m = re.search(pattern,text,re.IGNORECASE)\n        if m:\n            # if the position is found, return the position\n            return m.start()\n    # otherwise return None\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Let's see if the pattern is a set of ','\n    if re.search(pattern,text) is not None:\n        # We need to extract the indexes of the occurrences of the substrings\n        # from the pattern string and then make a dictionary\n        # to check whether a char is present in the pattern or not\n        # dictionary of indices\n        # of occurrences\n        indexes = {}\n        for i in range(len(pattern)):\n            if pattern[i] == ',':\n                indexes[i] = 0\n            else:\n                indexes[i] = -1\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text) == 0:\n        return None\n    if pattern == None:\n        return None\n    matches = []\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            matches.append(i)\n    if len(matches) == 0:\n        return None\n    return matches\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    sub = re.sub(pattern, '', text)\n    sub = sub.replace('\\t','').replace('\\n','').replace('\\r','')\n    sub = sub.strip().split(' ')\n    return sub\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_regex = re.compile(pattern)\n    mo = pattern_regex.search(text)\n    if mo is None:\n        return None\n    else:\n        start = mo.start()\n        end = mo.end()\n        return start,end\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = []\n    for i in range(len(nums)):\n        if nums[i % 2] % 2!= 0:\n            odd.append(nums[i % 2])\n    return odd\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums)):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = True\n    \n    for i in range(0,len(nums)):\n        if nums[i]%2 == 1:\n            odd = False\n            break\n    \n    if odd == True:\n        return True\n    else:\n        return False\n    \n    \ndef print_odd_position(nums):\n    '''\n    Write a python function to print the odd index of a list.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i]%2 == 1:\n            print(nums[i])\n    \n    \ndef has_duplicates(nums):\n    '''\n    Write a python function to check whether the number has duplicates.\n    '''\n    if len(set(nums)) <= len(nums):\n        return True\n    else:\n        return False\n    \n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    # no. factorial(5) = 120, (5!=120) = 36\n    # factorial(6) = 720, (6!=720) = 720, (6!)=720, 6!) = 720, 6!) = 720\n    # factorial(9) = 81, (9!=81) = 81\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    # reverse a string using the reverse() function\n    # we will create a variable to be used as the reverse function\n    # and then, write a function to return the result of the reverse function\n    #\n    # note:\n    # if the string does not have a reverse function,\n    # return None\n    #\n    # example:\n    # if we want to reverse a string 'ab'\n    # then we have to do something like this:\n    # string = 'ab'\n    # s = string[::-1]\n    # return s\n    #\n    # return None\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index_list = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            odd_index_list.append(i)\n    return odd_index_list\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) % 2 == 0:\n        return False\n    else:\n        odds = 0\n        for i in range(len(nums)):\n            if i % 2 == 1:\n                odds += 1\n                if odds == 2:\n                    return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Find if a given number is even or odd\n    # This code has taken no time from the original, as it was far from the original\n    # This is because the even numbers are not picked with the odd numbers.\n    \n    # Type: List[int]\n    \n    # Example\n    # odd_position([1,2,3,4,5])\n    # True\n    \n    # The function also returns the same value for 1 and 3 because the odd numbers are picked with the odd numbers.\n    \n    # Code\n    # return any_odd(nums) and any_odd_even(nums)\n    # the same as the above but this time you return the value for 1 and 3\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if (nums[i]%2==0):\n            count += 1\n        if (count%2!= 0):\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # your code here\n    odd_pos = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_pos += 1\n    return odd_pos >= 1\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in nums:\n        if i % 2 == 1:\n            count += 1\n    return count == 1\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for letter in test_str:\n        if letter in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Hint: you may want to use \"chr\" package as a string representation of a character.\n    # (ie. chr(ord('a')) = 'a').\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n    \n    \n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.lower() in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in 'aeiouAEIOU':\n            if test_str[i + 1] in 'aeiouAEIOU':\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Define vowels\n    vowels = 'aeiou'\n    # Initialize the array\n    vowels_count = []\n    # Initialize result\n    result = []\n    # For each character\n    for c in test_str:\n        # If the character is a vowel\n        if c in vowels:\n            # Append the count to the array\n            vowels_count.append(test_str.count(c))\n            # Initialize the result\n            result.append(1)\n        # Else if the character is not a vowel\n        else:\n            # Increment the count\n            result.append(result[-1] + 1)\n    # Return result\n    return resul"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            lst[i] += 1\n    return lst\n    \ndef count_consonants(test_str):\n    '''\n    Write a function to count those characters which have consonants as their neighbors in the given string.\n    '''\n    consonants = ['b','c','f','d','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in consonants:\n            lst[i] += 1\n    return lst\n    \ndef count_punctuation(test_str):\n    '''\n    Write a function to count those characters which have punctuation as their neighbors in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] not in punctuation:\n            lst[i] += 1\n    return lst\n    \ndef count_digits(test_str):\n    '''\n    Write a function to count those characters which have digits as their neighbors in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in digits:\n            lst[i] += 1\n    return lst\n    \ndef count_special_chars(test_str):\n    '''\n    Write a function to count those characters which have special characters in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in special_chars:\n            lst[i] += 1\n    return lst\n    \ndef count_lowercase_letters(test_str):\n    '''\n    Write a function to count those characters which have lowercase letters as their neighbors in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in lowercase_letters:\n            lst[i] += 1\n    return lst\n    \ndef count_uppercase_letters(test_str):\n    '''\n    Write a function to count those characters which have uppercase letters as their neighbors in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in uppercase_letters:\n            lst[i] += 1\n    return lst\n    \ndef count_digits_and_punctuation(test_str):\n    '''\n    Write a function to count those characters which have digits and punctuation as their neighbors in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in digits_and_punctuation:\n            lst[i] += 1\n    return lst\n    \ndef count_digits_and_special_chars(test_str):\n    '''\n    Write a function to count those characters which have digits and special characters as their neighbors in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in digits_and_special_chars:\n            lst[i] += 1\n    return lst\n    \ndef count_digits_and_digits(test_str):\n    '''\n    Write a function to count those characters which have digits and digits as their neighbors in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in digits_and_digits:\n            lst[i] += 1\n    return lst\n    \ndef count_all_characters(test_str):\n    '''\n    Write a function to count the number of characters in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        lst[i] += 1\n    return lst\n    \ndef count_punctuation_and_special_chars(test_str):\n    '''\n    Write a function to count the number of punctuation characters and special characters in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in punctuation_and_special_chars:\n            lst[i] += 1\n    return lst\n    \ndef count_digits_and_special_chars(test_str):\n    '''\n    Write a function to count the number of digits and special characters in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in digits_and_special_chars:\n            lst[i] += 1\n    return lst\n    \ndef count_special_chars(test_str):\n    '''\n    Write a function to count the number of special characters in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in special_chars:\n            lst[i] += 1\n    return lst\n    \ndef count_letters(test_str):\n    '''\n    Write a function to count the number of letters in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in lowercase_letters:\n            lst[i] += 1\n        if test_str[i] in uppercase_letters:\n            lst[i] += 1\n        if test_str[i] in digits:\n            lst[i] += 1\n        if test_str[i] in punctuation:\n            lst[i] += 1\n        if test_str[i] in special_chars:\n            lst[i] += 1\n        if test_str[i] in special_chars_and_punctuation:\n            lst[i] += 1\n    return lst\n    \ndef count_digits_and_digits(test_str):\n    '''\n    Write a function to count the number of digits and digits as their neighbors in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in digits_and_digits:\n            lst[i] += 1\n    return lst\n    \ndef count_digits_and_special_chars(test_str):\n    '''\n    Write a function to count the number of digits and special characters as their neighbors in the given string.\n    '''\n    lst = [0 for _ in range(len(test_str))]\n    for i in range(len(test_str)):\n        if test_str[i] in digits_and_special_chars:\n            lst[i] += 1\n    return lst\n    \ndef count_digits_and_special_chars_and_digits(test_str):\n    '''\n    Write a function to count the number of digits and special characters and digits as thei"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # find the sum of non-repeated elements\n    # O(N)\n    # O(N)\n    non_repeated_sum = 0\n    for el in arr:\n        non_repeated_sum += el\n    return non_repeated_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # a helper function to find the sum\n    def find(x, lst):\n        if x in lst:\n            return x\n        else:\n            return -1\n    # set the list as an empty list\n    lst = []\n    # loop through the given elements\n    for i in arr:\n        # if the element is not in the list, add it\n        if i not in lst:\n            lst.append(i)\n    # iterate through the list\n    sum = 0\n    for i in lst:\n        # find the sum of the given element\n        sum += find(i, lst)\n    return sum\n    "
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    l = []\n    for i in range(len(arr)):\n        if arr[i] not in l:\n            l.append(arr[i])\n        else:\n            continue\n    return sum(l)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n    \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    max_count = 0\n    for el in arr:\n        if el > max_count:\n            max_count = el\n    return max_count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = 0\n    for element in arr:\n        if element not in result:\n            result += element\n    return result\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in arr:\n        if i!= s:\n            s = i\n    return s\narr = [0,0,0,1,1,2,2,3,3,4,4,5]\nprint(find_sum(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a list to be returned\n    sum_list = []\n    \n    # Use a loop to iterate over the list of numbers.\n    for i in arr:\n        # Add each number in the list to the sum list\n        sum_list.append(i)\n    \n    # Return the sum of all the non-repeated numbers\n    return sum(sum_list)\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    from collections import Counter\n    # create a counter for the number of each element\n    counts = Counter(list1)\n    # pick the the most common element\n    return list(counts.most_common())\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_it = iter(list1)\n    mapping = {}\n    for i, el in enumerate(list_it):\n        if i == 0:\n            mapping[el] = []\n        if el in mapping:\n            mapping[el].append(i)\n        else:\n            mapping[el] = [i]\n    list_it = []\n    for key, value in mapping.items():\n        for j in value:\n            list_it.append(j)\n    list_it = sorted(list_it)\n    return list_it\n    \n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = [[] for i in range(len(list1))]\n    for e in list1:\n        idx = bisect_left(list1, e)\n        result[idx].append(e)\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if list1:\n        i = 0\n        output = []\n        while i < len(list1):\n            j = i + 1\n            while j < len(list1) and list1[j] == list1[j - 1]:\n                j += 1\n            output.append(list1[i:j])\n            i = j\n        if list1:\n            output.append(list1[i:])\n        return output\n    else:\n        return []\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = sorted(list1)\n    \n    len_list = len(list1)\n    \n    output_list = []\n    \n    if len_list % 2!= 0:\n        output_list.append(list1[-1])\n        output_list.append(list1[-2])\n        output_list.append(list1[-1])\n    else:\n        output_list.append(list1[-2])\n        output_list.append(list1[-1])\n    \n    for i in range(len_list-2):\n        if (list1[i] == list1[i+1]):\n            if i == (len(list1)-2):\n                output_list.append(list1[i])\n                output_list.append(list1[i+1])\n            else:\n                output_list.append(list1[i+1])\n                output_list.append(list1[i+2])\n        else:\n            output_list.append(list1[i+1])\n            output_list.append(list1[i+2])\n        \n    return output_list\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # create a temp list of duplicate numbers\n    temp = list1[:]\n    # create a temp list of duplicates without sublists\n    temp2 = []\n    # create a list of the indexes\n    i = 0\n    # create a list to keep track of duplicates\n    tmp_list = []\n    # create a temp list to store the position of each duplicate\n    duplicate_index = []\n    # create a list to keep track of duplicates in the list\n    tmp_duplicate_index = []\n    # loop through each element in the list\n    for i in range(len(list1)):\n        # if the element is duplicate\n        if list1[i] in duplicate_index:\n            # insert this element at the end of the list\n            temp.insert(len(temp), list1[i])\n            # increment the position of the list\n            i = i + 1\n            # if the list is not empty,\n            if len(list1) > 1:\n                # append the duplicate number to the list\n                duplicate_index.append(list1[i])\n                # add the position to the list\n                duplicate_index.insert(i, i)\n        # if the element is not duplicate\n        else:\n            # if the current element is not duplicate\n            if i < len(list1) - 1:\n                # append the duplicate number to the list\n                tmp_list.append(list1[i])\n                # append the position to the list\n                tmp_list.append(i)\n                # append the position to the list\n                duplicate_index.append(list1[i])\n                duplicate_index.append(i)\n                # increment the position of the list\n                i = i + 1\n            # if the list is empty,\n            else:\n                # append the duplicate number to the list\n                tmp_list.append(list1[i])\n                duplicate_index.append(list1[i])\n                # append the position to the list\n                duplicate_index.append(i)\n                # append the position to the list\n                i = i + 1\n    # return the list to the caller\n    return temp, tmp_list, duplicate_index\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for num, element in enumerate(list1):\n        if element not in list2:\n            list2.append(element)\n            list2.append(list1[num])\n    return list2\ndef find_duplicates(list1):\n    '''\n    Write a function to find the duplicates of a given list of numbers.\n    '''\n    list2 = []\n    for element in list1:\n        if element not in list2:\n            list2.append(element)\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #Convert the list into sublists\n    sublists = []\n    for i,e in enumerate(list1):\n        sublists.append([e])\n        if i+1 < len(list1):\n            sublists[-1].append(list1[i+1])\n    #Pack the sublists\n    return [[e] for e in sublists if e]\ndef pack_consecutive_duplicates_no_split(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #Convert the list into sublists\n    sublists = []\n    for i,e in enumerate(list1):\n        sublists.append([e])\n        if i+1 < len(list1):\n            sublists[-1].append(list1[i+1])\n    #Pack the sublists\n    return sublists\ndef group_of_lists(list1):\n    '''\n    Write a function to group the elements of a list into the numbers of their successive elements.\n    '''\n    for elem in list1[::-1]:\n        yield elem\ndef merge_lists(list1):\n    '''\n    Write a function to merge the elements of the given list into the lists of the same length.\n    '''\n    if len(list1) <=1:\n        return list1\n    else:\n        p1 = merge_lists(list1[:len(list1)//2])\n        p2 = merge_lists(list1[len(list1)//2:])\n        return merge_lists([p1,p2])\ndef delete_duplicates(list1):\n    '''\n    Write a function to remove duplicate elements from a given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef no_split(list1):\n    '''\n    Write a function to remove duplicate elements from a given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicate elements from a given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef merge_both(list1, list2):\n    '''\n    Write a function to merge the given lists.\n    '''\n    if len(list1) == 0:\n        return list2\n    elif len(list2) == 0:\n        return list1\n    if list1[0] == list2[0]:\n        list1[0] = list1[0] + list2[0]\n        return list1\n    else:\n        list1[0] = list1[0] + list2[0]\n        list1.pop(0)\n        list2.pop(0)\n        return merge_both(list1, list2)\ndef sort_lists(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef remove_duplicates_and_sort(list1):\n    '''\n    Write a function to remove duplicate elements and sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef remove_duplicates_and_sort2(list1):\n    '''\n    Write a function to remove duplicate elements and sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef remove_duplicates_and_sort3(list1):\n    '''\n    Write a function to remove duplicate elements and sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef remove_duplicates_and_sort4(list1):\n    '''\n    Write a function to remove duplicate elements and sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef remove_duplicates_and_sort5(list1):\n    '''\n    Write a function to remove duplicate elements and sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef remove_duplicates_and_sort6(list1):\n    '''\n    Write a function to remove duplicate elements and sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists2(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists3(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists4(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists5(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists6(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists7(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists8(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists9(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists10(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists11(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists12(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists13(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in_group_of_lists14(list1):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Convert the list into a list of the same length\n    return list1[::-1]\ndef sort_lists_in"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if list1 == []:\n        return []\n    else:\n        ans = []\n        i = 0\n        j = 0\n        while j<len(list1):\n            if j < len(list1)-1:\n                if list1[i] == list1[j+1]:\n                    ans.append([list1[i],list1[j+1]])\n                    i += 1\n                    j += 2\n                else:\n                    ans.append(list1[i])\n                    i += 1\n            else:\n                ans.append(list1[i])\n                i += 1\n        return ans\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) < 2:\n        return [list1]\n    \n    a, b = map(list, zip(*groupby(list1)))\n    lst = []\n    lst.append([l[0] for l in b])\n    for l in b:\n        if l[0] not in lst:\n            lst.append([l[0]])\n    return lst\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    list1 = list(list1)\n    t = list(zip(*list1))\n    for i in t:\n        i = tuple(i)\n        count[i] = count.get(i, 0) + 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # start = 0\n    # count = {}\n    # for i in range(0, len(list1)):\n    #     start = 1\n    #     for j in range(0, len(list1[i])):\n    #         if list1[i][j] not in count:\n    #             count[list1[i][j]] = 0\n    #         count[list1[i][j]] += 1\n    #     # print(count)\n    #     # start = start + 1\n    #     # return count\n    # return count\n    \n    # end = 0\n    # for i in range(0, len(list1)):\n    #     for j in range(0, len(list1[i])):\n    #         list1[i][j] = tuple(list1[i][j])\n    #         # end = end + 1\n    # return list1\n    # # return count\n    # return end\n    \n    # start = 1\n    # end = 0\n    # for i in range(0, len(list1)):\n    #     start = start + 1\n    #     for j in range(0, len(list1[i])):\n    #         # print(list1[i][j])\n    #         if tuple(list1[i][j]) not in count:\n    #             count[tuple(list1[i][j])] = 0\n    #         count[tuple(list1[i][j])] += 1\n    #     # print(count)\n    #     # end = end + 1\n    # return count\n    # start = 1\n    # end = 1\n    # for i in range(0, len(list1)):\n    #     start = start + 1\n    #     for j in range(0, len(list1[i])):\n    #         # print(list1[i][j])\n    #         if tuple(list1[i][j]) not in count:\n    #             count[tuple(list1[i][j])] = 0\n    #         count[tuple(list1[i][j])] += 1\n    #         # end = end + 1\n    #     # print(count)\n    #     # end = end + 1\n    # return count\n    # start = 1\n    # end = 1\n    # for i in range(0, len(list1)):\n    #     start = start + 1\n    #     for j in range(0, len(list1[i])):\n    #         # print(list1[i][j])\n    #         if tuple(list1[i][j]) not in count:\n    #             count[tuple(list1[i][j])] = 0\n    #         count[tuple(list1[i][j])] += 1\n    #         # end = end + 1\n    #     # print(count)\n    #     # end = end + 1\n    # return count\n    \n    # start = 0\n    # end = 0\n    # for i in range(0, len(list1)):\n    #     start = 1\n    #     for j in range(0, len(list1[i])):\n    #         if list1[i][j] not in count:\n    #             count[list1[i][j]] = 0\n    #         count[list1[i][j]] += 1\n    #     # print(count)\n    #     # start = start + 1\n    #     # end = end + 1\n    # return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for i in range(len(list1)):\n        a = list1[i].split(' ')\n        dic[a[0]] = len(a)\n    return dic\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    unique = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in unique.keys():\n                unique[list1[i][j]] += 1\n            else:\n                unique[list1[i][j]] = 1\n    return unique\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        tmp = list1[i]\n        count[tmp] = count.get(tmp, 0) + 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # find the length of a list\n    n = len(list1)\n    \n    # if the length of the list is not a multiple of 3, then return 0\n    if n % 3!= 0:\n        return {}\n    \n    # loop over every index\n    unique_dictionary = {}\n    for i in range(n-1):\n        # check if the current index is already in the dictionary, or if the current index is not in the dictionary, add it to the dictionary\n        if i not in unique_dictionary:\n            unique_dictionary[i] = [list1[i], list1[i+1], list1[i+2]]\n        else:\n            unique_dictionary[i] = [unique_dictionary[i][0]+list1[i], unique_dictionary[i][1]+list1[i+1], unique_dictionary[i][2]+list1[i+2]]\n    \n    # return the dictionary\n    return unique_dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sub = {}\n    list1 = [int(x) for x in list1]\n    for i in range(len(list1)):\n        if list1[i] in sub:\n            sub[list1[i]] += 1\n        else:\n            sub[list1[i]] = 1\n    return sub\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for i in range(len(list1)):\n        l = list1[i]\n        if not l in dic:\n            dic[l] = 0\n        dic[l] += 1\n    return dic\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    list1 = list(set(list1))\n    list1 = list(tuple(list1))\n    list1 = list(dict.fromkeys(list1))\n    list1 = list(dict1)\n    return list1\n    \ndef first_greater(list1):\n    '''\n    Write a function that returns the first element in a list that is greater than a given number, if a list is provided as an argument, return the first element in the list.\n    If a number is provided as an argument, return the first element in the list that is greater than that number. If the list is not provided, raise a ValueError.\n    '''\n    \n    if len(list1) == 0:\n        raise ValueError(\"list is empty\")\n    if len(list1) == 1:\n        return list1[0]\n    if list1[0] > list1[1]:\n        return list1[0]\n    else:\n        return list1[1]\n    \ndef first_smaller(list1):\n    '''\n    Write a function that returns the first element in a list that is smaller than a given number, if a list is provided as an argument, return the first element in the list.\n    If a number is provided as an argument, return the first element in the list that is smaller than that number. If the list is not provided, raise a ValueError.\n    '''\n    \n    if len(list1) == 0:\n        raise ValueError(\"list is empty\")\n    if len(list1) == 1:\n        return list1[0]\n    if list1[0] < list1[1]:\n        return list1[0]\n    else:\n        return list1[1]\n    \ndef sum_of_squares(list1):\n    '''\n    Write a function that returns the sum of the squares of a list. Return the sum of the squares of the first element in a list.\n    If a list is provided as an argument, return the sum of the squares of the elements in the list.\n    If the list is not provided, raise a ValueError.\n    '''\n    if len(list1) == 0:\n        raise ValueError(\"list is empty\")\n    sum = 0\n    for i in list1:\n        sum += i*i\n    return sum\n    \ndef count_occurrences(list1):\n    '''\n    Write a function that returns the number of times a value appears in a list. If a list is provided as an argument, return the number of times that element appears in the list. If the list is not provided, raise a ValueError.\n    '''\n    if len(list1) == 0:\n        raise ValueError(\"list is empty\")\n    if len(list1) == 1:\n        return 1\n    return len(list1)*len(list1[0])\n    \ndef remove_first(list1):\n    '''\n    Write a function that removes the first element of a list. If a list is provided as an argument, return the first element of the list. If the list is not provided, raise a ValueError.\n    '''\n    if len(list1) == 0:\n        raise ValueError(\"list is empty\")\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        return list1[1]\n    \ndef list_product(list1):\n    '''\n    Write a function that returns the product of all the numbers in a list. If a list is provided as an argument, return the product of all the numbers in the list. If the list is not provided, raise a ValueError.\n    '''\n    if len(list1) == 0:\n        raise ValueError(\"list is empty\")\n    product = 1\n    for i in list1:\n        product *= i\n    return product\n    \ndef merge_the_tools(string1, string2):\n    '''\n    Write a function that takes two strings and returns a list that contains all the characters that appear in both strings concatenated by an \"e\".\n    If a list is provided as an argument, return that list. If a string is provided as an argument, return a string with the concatenation of all the characters in the two strings concatenated by an \"e\".\n    '''\n    if len(string1) == 0:\n        raise ValueError(\"string is empty\")\n    if len(string2) == 0:\n        raise ValueError(\"string is empty\")\n    result = []\n    for i in string1 + string2:\n        if i not in result:\n            result.append(i)\n    return result\n    \ndef all_letters_occurrences(string1):\n    '''\n    Write a function that returns the number of times each letter occurs in a given string. If a string is provided as an argument, return the number of times each letter occurs in the string. If the string is not provided, raise a ValueError.\n    '''\n    if len(string1) == 0:\n        raise ValueError(\"string is empty\")\n    if len(string1) == 1:\n        return {string1[0]:1}\n    result = {}\n    for i in string1:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\n    \ndef smallest_sublist(list1):\n    '''\n    Write a function that returns the smallest sub-list of a given list.\n    If a list is provided as an argument, return the smallest sub-list of the given list. If the list is not provided, raise a ValueError.\n    '''\n    if len(list1) == 0:\n        raise ValueError(\"list is empty\")\n    if len(list1) == 1:\n        return list1\n    min_sublist = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] < list1[j]:\n                min_sublist.append(list1[i])\n    return min_sublist\n    \ndef smallest_sublist_2(list1):\n    '''\n    Write a function that returns the smallest sub-list of a given list.\n    If a list is provided as an argument, return the smallest sub-list of the given list. If the list is not provided, raise a ValueError.\n    '''\n    if len(list1) == 0:\n        raise ValueError(\"list is empty\")\n    if len(list1) == 1:\n        return list1\n    min_sublist = []\n    for i in range(len(list1)):\n        if list1[i] < list1[i+1]:\n            min_sublist.append(list1[i])\n    return min_sublist\n    \ndef add_two_numbers(a, b):\n    '''\n    Write a function that adds the two numbers provided as arguments. If either argument is not numbers, raise a ValueError.\n    '''\n    if type(a)!= int or type(b)!= int:\n        raise ValueError(\"inputs must be numbers\")\n    if a > b:\n        raise ValueError(\"first number must be smaller than the second number\")\n    else:\n        return a + b\n    \ndef add_numbers(a, b):\n    '''\n    Write a function that takes as arguments two numbers and returns the sum of them. If two numbers are provided as arguments, return the sum of the numbers provided.\n    If only one number is provided as an argument, return the sum of the numbers provided.\n    '''\n    if len(a) == 0:\n        return b\n    if len(a) == 1:\n        return a[0]\n    if len(b) == 0:\n        return a\n    if len(b) == 1:\n        return b[0]\n    return a[0] + b[0]\n    \ndef make_unique(lst):\n    '''\n    Write a function that takes a list and returns a new list with only the unique elements of the list.\n    If the list is not provided, raise a ValueError.\n    '''\n    if len(lst) == 0:\n        raise ValueError(\"list is empty\")\n    lst = list(set(lst))\n    return lst\n    \ndef is_palindrome(string):\n    '''\n    Write a function that returns True if the string is a palindrome, False otherwise. A palindrome is a string that reads the same backwards and forwards.\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict_count = {}\n    for i in list1:\n        i = tuple(i)\n        dict_count[i] = dict_count.get(i,0) + 1\n    return dict_count\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    def combinations_rec(s, start=0):\n        '''\n        :param start: start index of the sum\n        :param s: sum\n        :return: set of possible sums\n        '''\n        if start == n:\n            return set(tuple(s) for i in range(start))\n        if s == 0:\n            return set(tuple(s) for i in range(start, n))\n        return combinations_rec(s - test_list[start], start + 1) | combinations_rec(s, start + 1)\n    \n    return list(combinations_rec(n))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def remove_list(t, x):\n        i,j=0,0\n        while i<len(t):\n            if t[i][1]==x:\n                j=1\n                while i<len(t) and t[i][1]==x:\n                    i+=1\n                break\n            i+=1\n        if j==0:\n            i+=1\n        return i\n    def find_sum(t, x):\n        k,l=0,0\n        while k<len(t):\n            if t[k][1]==x:\n                if t[k][0]>l:\n                    l=t[k][0]\n                k+=1\n            else:\n                k+=1\n        return l\n    def add_list(t, x):\n        for i in range(len(t)):\n            if t[i][0]>x:\n                break\n            t[i][1]=x\n    for i in test_list:\n        for j in test_list:\n            if i+j==i+j:\n                add_list(i,j)\n    comb=[]\n    for i in range(len(test_list)):\n        k,l=i,len(test_list)\n        for j in range(i+1,l):\n            if find_sum(test_list[i],test_list[j])==0:\n                break\n            else:\n                k,l=j,l-1\n        if k<l:\n            add_list(test_list[i],test_list[k])\n        elif l==0:\n            return [test_list[i]]\n    return comb\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    temp = []\n    for i in range(len(test_list)):\n        temp.append(test_list[i][0])\n    temp = tuple(temp)\n    for i in range(len(test_list)):\n        if test_list[i][1] in temp:\n            temp.remove(test_list[i][1])\n        for j in range(len(test_list)):\n            if test_list[i][0] == test_list[j][0]:\n                if (test_list[i][1] + test_list[j][1]) in temp:\n                    temp.remove((test_list[i][1] + test_list[j][1]))\n    return temp\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    def return_combination(i, list, index):\n        if index == len(test_list):\n            return list\n        elif i == index:\n            return None\n        else:\n            new_list = list[:]\n            new_list[i] = test_list[index]\n            result = return_combination(i + 1, new_list, index + 1)\n            if result!= None:\n                return result\n        \n    return return_combination(0, list, 0)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if type(test_list)!= list:\n        raise TypeError(\"test_list must be a list\")\n    else:\n        if len(test_list) < 2:\n            raise ValueError(\"length of the list must be >= 2\")\n        else:\n            for i in range(len(test_list)):\n                for j in combinations(test_list, i + 1):\n                    yield j\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 1:\n        return [test_list]\n    else:\n        result = []\n        result.append(test_list)\n        for i in range(len(test_list) - 1):\n            for j in find_combinations(test_list[i + 1: ]):\n                result.append(j)\n        return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if test_list == None or len(test_list) < 2:\n        return []\n    \n    comb = []\n    \n    for i in range(1, len(test_list)):\n        # print(test_list)\n        if test_list[i] not in comb:\n            comb.append(test_list[i])\n            for j in range(i+1, len(test_list)):\n                if test_list[i] + test_list[j] not in comb:\n                    # print(f'Combinations: {comb}')\n                    comb.append(test_list[i]+test_list[j])\n    # print(comb)\n    return comb\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # list of all possible sums\n    all_sums = list(sum(test_list, []))\n    # list of all possible tuples (i.e., sums of tuples)\n    all_tuples = []\n    for i in range(0, len(all_sums)):\n        all_tuples.append(tuple([all_sums[i], all_sums[i+1]]))\n    \n    # all possible combinations of sums from all possible tuples\n    all_combinations = list(combinations(all_tuples, len(all_tuples)))\n    return all_combinations\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #getting test list of tuples\n    test_list_tuples = []\n    for i in test_list:\n        for j in range(len(i)):\n            test_list_tuples.append((i[j],j))\n    #calculating the list of tuples\n    test_list_tuple_list = list(test_list_tuples)\n    #running the function \n    return combinations(test_list_tuple_list, 2)"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) == 2 : \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count_divisors = 0\n    if n % 2 == 0 : \n        count_divisors = 2\n        if n!= 2 : \n            count_divisors = n // 2\n    \n    return count_divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(2, math.sqrt(n) + 1) :\n        if n % i == 0 :\n            count += 1\n    if count % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 0) :\n        return False \n    if (n < 0) :\n        return False \n    if (n < 2) :\n        return True \n    d = 2\n    while (d * d <= n) :\n        if (n % d == 0) :\n            return False \n        d = d + 1\n    return True \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) :\n        if (n % i) == 0 : \n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,int(math.sqrt(n))) :\n        if n%i == 0 :\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if (n % i) == 0 : \n            sum += 2\n            if (i == n/i) : \n                sum += 1\n    if (sum == 0) : \n        return \"No\"\n    else : \n        return \"Yes\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for divisor in range(1,int(math.sqrt(n)+1)) : \n        if n % divisor == 0 : \n            count += 1\n        if count == 2 : \n            return divisor\n    return None \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n%2==0:\n        print(\"\\nNumber is even\")\n    else :\n        print(\"\\nNumber is odd\")\n    if n==1:\n        print(\"\\n1 is divisor of number\")\n    elif n%2==0:\n        print(\"\\nThe number is divisor of 2\")\n    elif n==2:\n        print(\"\\nThe number is divisor of 3\")\n    elif n%2==1:\n        print(\"\\nThe number is divisor of 5\")\n    elif n==5:\n        print(\"\\nThe number is divisor of 15\")\n    elif n%3==0:\n        print(\"\\nThe number is divisor of 7\")\n    elif n%5==0:\n        print(\"\\nThe number is divisor of 17\")\n    else:\n        print(\"\\nThe number is divisor of 63\")\n    print(\"\\n\\n\")\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # define array\n    # define length\n    # define sum\n    # define final value\n    # begin loop\n    # number of loops\n    # end loop\n    # return value\n    # loop\n    # while number of loops > 0\n    # sum = sum + array[i]\n    final_val = 0\n    for i in range(0, len(arr), 2):\n        final_val = arr[i] + arr[i + 1]\n        # append to list\n        arr.append(final_val)\n    return sum(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(arr[i:i+2]) for i in range(0, len(arr), 2)])\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # sum = 0\n    # for i in range(len(arr)):\n    #     if arr[i] % 2 == 1:\n    #         sum += arr[i]\n    # return sum\n    def odd_length_sum(arr):\n        '''\n        Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n        '''\n        # sum = 0\n        # for i in range(len(arr)):\n        #     if arr[i] % 2 == 0:\n        #         sum += arr[i]\n        # return sum\n        if len(arr) == 0:\n            return 0\n        total = 0\n        for i in range(len(arr)):\n            total += arr[i]\n        return total\n    return odd_length_sum(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr) - 1, 2):\n        if (arr[i] % 2 == 1):\n            sum += arr[i]\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if (i % 2)!= 0:\n            odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_odd_length = 0\n    i = 0\n    while(i < len(arr)):\n        if(arr[i] % 2!= 0):\n            sum_of_odd_length += (arr[i] % 2)\n            i += 1\n        else:\n            i += 1\n    return sum_of_odd_length\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # if len(arr) == 0:\n    #     return 0\n    #     # return sum(arr)\n    #     # return 0\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        sum_of_odd_length_subarrays = 0\n        start_index = 0\n        end_index = start_index + len(arr)\n        while end_index < len(arr):\n            sum_of_odd_length_subarrays += arr[start_index]\n            start_index += 1\n            end_index += 1\n        return sum_of_odd_length_subarrays\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if arr[i]%2==1:\n            sum=sum+arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Python3 implementation\n    return sum(s for s in arr if s % 2 == 1)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # get float value from rgb values\n    f = r / 255.0\n    # get integer value from float value\n    i = g / 255.0\n    # get integer value from float value\n    b = b / 255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255\n    g = g/255\n    b = b/255\n    \n    if (r <= 0.0) or (r >= 1.0):\n        return (0.0,0.0,0.0)\n    elif (g <= 0.0) or (g >= 1.0):\n        return (0.0,0.0,0.0)\n    elif (b <= 0.0) or (b >= 1.0):\n        return (0.0,0.0,0.0)\n    \n    i = 0.0\n    while (i < 60):\n        i = i+1\n        i = i/60\n        if (0.0 <= i <= 1.0):\n            h = 360.0 - i * 60.0\n            r,g,b = (i*255.0,255.0*r,255.0*g,)\n            return (h,h,h)\n        else:\n            h = 360.0 * (1.0 - i)\n            r,g,b = (i*255.0,255.0*r,255.0*g,)\n            return (h,h,h)\n    \ndef hsv_to_rgb(h,s,v):\n    '''\n    Write a function to convert hsv color to rgb color.\n    '''\n    \n    h = h*360.0\n    h = int(h)\n    \n    if (0.0 <= h < 60.0):\n        i = int(h*60.0)\n        r = int(255.0*(1.0 - s))\n        g = int(255.0*(1.0 - v))\n        b = int(255.0*(1.0 - s * v))\n    elif (60.0 <= h < 120.0):\n        i = int(h*60.0)\n        r = int(255.0*(1.0 - v))\n        g = int(255.0*(1.0 - s * v))\n        b = int(255.0*(1.0 - s * (1.0 - v)))\n    elif (120.0 <= h < 180.0):\n        i = int(h*60.0)\n        r = int(255.0*(1.0 - v))\n        g = int(255.0*(1.0 - s * v))\n        b = int(255.0*(1.0 - s * (1.0 - v)))\n    else:\n        i = int(h*60.0)\n        r = int(255.0*(1.0 - s * v))\n        g = int(255.0*(1.0 - v * s))\n        b = int(255.0*(1.0 - v * (1.0 - s)))\n        \n    return (int(i),int(r),int(g),int(b))\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #return colors\n    max_r = 255\n    max_g = 255\n    max_b = 255\n    # max_color = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_r = max(r, g, b)\n    min_r = min(r, g, b)\n    max_g = max(r, g, b)\n    min_g = min(r, g, b)\n    max_b = max(r, g, b)\n    min_b = min(r, g, b)\n    max_rgb = max_r - min_r\n    min_rgb = max_r - min_r\n    max_g = max_g - min_g\n    min_g = max_g - min_g\n    max_b = max_b - min_b\n    min_b = max_b - min_b\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert to tuple\n    r, g, b = map(int, [r, g, b])\n    # create a tuple with rgb values\n    # create a tuple for the hs value\n    hue = int(360*(r/255))\n    # create a tuple for the saturation\n    saturation = int(255*(g/255))\n    # create a tuple for the value\n    value = int(255*(b/255))\n    # create an array of all the tuples\n    values = (hue, saturation, value)\n    # return the tuple\n    return tuple(values)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert rgb to hsv\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    def clamp_rgb(r):\n        '''\n        Clamp rgb value between 0 and 1\n        '''\n        if r > 1.0:\n            r = 1.0\n        elif r < 0.0:\n            r = 0.0\n        return r\n    def clamp_hsv(h, s, v):\n        '''\n        Clamp hsv value between 0 and 1\n        '''\n        if h > 1.0:\n            h = 1.0\n        elif h < 0.0:\n            h = 0.0\n        if s > 1.0:\n            s = 1.0\n        elif s < 0.0:\n            s = 0.0\n        if v > 1.0:\n            v = 1.0\n        elif v < 0.0:\n            v = 0.0\n        return h, s, v\n    hsv = [(h * 1.0) * (1.0 - clamp_rgb(r)),\n        (s * 1.0) * (1.0 - clamp_rgb(g)),\n        (v * 1.0) * (1.0 - clamp_rgb(b))]\n    return hsv\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = r / 255.0\n    s = g / 255.0\n    v = b / 255.0\n    if h < 0.0 or h > 1.0:\n        raise ValueError('Invalid hue.')\n    if s < 0.0 or s > 1.0:\n        raise ValueError('Invalid saturation.')\n    if v < 0.0 or v > 1.0:\n        raise ValueError('Invalid value.')\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r < 0.04045:\n        s = int(r * 12.92 + 0.055)\n        v = int((r + 0.055)*20.2)\n    else:\n        s = int(r * 12.92 + 0.0188*r + 0.3*g + 0.59*b + 0.11*r * g + 0.8*b*g + 0.119*r * b + 0.18*r * g * g + 0.13*r * b * b + 0.5*r * g * b * g)\n        v = int((s * 100 + 0.055) * 2.55)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #return color as hsv\n    if r+g+b >= 255:\n        r = 255\n        g = 255\n        b = 255\n    elif r+g+b <= 0:\n        r = 0\n        g = 0\n        b = 0\n    else:\n        r = round(r * 255 / (255 - b + c))\n        g = round(g * 255 / (255 - b + c))\n        b = round(b * 255 / (255 - r + c))\n    return(r, g, b)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Your code here\n    p = 1\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            p *= list1[i]\n        else:\n            p *= list1[i]\n            \n    return p\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product=1\n    for i in range(len(list1)-1):\n        product*=list1[i]\n    if product==1:\n        print('Product of the first even number is', product)\n    else:\n        print('Product of the first even number is', product)\n        print('The product of the first even number is', product)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = 1\n    if len(list1) % 2 == 0:\n        for i in range(0, len(list1)):\n            even_odd *= list1[i]\n    else:\n        for i in range(0, len(list1)):\n            even_odd *= list1[i]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            list1[i]=list1[i]/2\n        else:\n            list1[i]=list1[i]*3\n    return list1\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_odd.append(list1[i])\n        else:\n            even_odd.append(list1[i]*3)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    p = list1[0]\n    for i in list1[1:]:\n        if i%2==0:\n            p*=i\n        else:\n            p/=i\n    return p\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    return list1[0]*list1[1]\n    \n    \nprint(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    p = 1\n    if len(list1)%2 == 0:\n        p *= list1[0]\n        for i in range(1, len(list1), 2):\n            p *= list1[i]\n    else:\n        p *= list1[0]\n        for i in range(1, len(list1), 2):\n            p *= list1[i]\n    return p\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    s = 1\n    for i in range(len(list1)):\n        s *= list1[i]\n        if (i % 2) == 0:\n            s += 1\n    return s\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    print(\"\\nOUTPUT FOR MUL_EVEN_Odd : \")\n    print(list1*2)\n    #append values\n    list1.append(list1[0]*2)\n    print(list1)\n    #remove first value\n    print(\"The first value of list1 is : \",list1[0])\n    #removing the values from the list\n    list1.remove(list1[0])\n    print(list1)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_string = test_str.split(\",\")\n    tuple_string_int = tuple(map(int, tuple_string))\n    return tuple_string_int\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_int_str = tuple(map(int, test_str))\n    return tuple_int_str\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n    \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    return tuple(map(float, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    t = []\n    for i in test_str:\n        t.append(eval(i))\n    return tuple(t)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str is None:\n        raise TypeError('Input is NoneType')\n    else:\n        if isinstance(test_str, tuple):\n            return tuple(map(int, test_str))\n        else:\n            raise TypeError('Input is not a tuple')\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        tuple_data = tuple(map(int, test_str.split(',')))\n    except Exception as e:\n        print(e)\n        print('\\nThe length of the tuple is less than 3, please enter more tuple.')\n        tuple_data = None\n    return tuple_data\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert the string to tuples\n    tuple_str = tuple(test_str)\n    # get the integer tuple\n    return tuple_str[0], tuple_str[1]\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left_idx = 0\n    while a[left_idx] < x:\n        left_idx += 1\n    return left_idx\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    \n    # Use the bisect.bisect_right to find the insertion point for x\n    idx = bisect.bisect_right(a, x)\n    \n    # If we didn't find the right index, return the original index\n    if idx == len(a):\n        return idx\n    \n    # If we have found the right index, find the right middle\n    return idx-1\n    \ndef right_insertion2(a, x):\n    '''\n    This one is done with loop\n    '''\n    \n    # Find the right middle\n    idx = bisect.bisect_right(a, x)\n    \n    # If we didn't find the right index, return the original index\n    if idx == len(a):\n        return idx\n    \n    # If we have found the right index, find the right middle\n    return idx+1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    b = len(a)\n    i = bisect.bisect_left(a, x)\n    if i > 0:\n        # If the element at index i is larger than the value x,\n        # insert it into the position i\n        if a[i] > x:\n            return i\n        # Otherwise, insert the element into the position\n        # i+1\n        else:\n            return i+1\n    # If i is 0 or less, then x is larger than any element in the list\n    return b\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    j = bisect.bisect_right(a, x)\n    if j == len(a):\n        return j\n    return j-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    \n    left_index = bisect.bisect_left(a, x)\n    return left_index\n    \ndef right_insertion_from_end(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    \n    left_index = bisect.bisect_left(a, x, lo = len(a))\n    return left_index\n    \ndef count_k(a, k):\n    '''\n    Given a sorted array, count k-ways.\n    '''\n    \n    n = len(a)\n    \n    if n < k:\n        return 0\n        \n    if n == k:\n        return 1\n        \n    count = 0\n    \n    for i in range(0, n-k+1):\n        count += right_insertion(a, i)\n        count += right_insertion_from_end(a, i)\n    return count\n    \ndef count_k_from_end(a, k):\n    '''\n    Given a sorted array, count k-ways.\n    '''\n    \n    n = len(a)\n    \n    if n < k:\n        return 0\n        \n    if n == k:\n        return 1\n        \n    count = 0\n    \n    for i in range(n-k+1, -1, -1):\n        count += right_insertion(a, i)\n        count += right_insertion_from_end(a, i)\n    return count\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a)-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_right(a, x)\n    return pos\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i=bisect.bisect_right(a,x)\n    if i==len(a):\n        return len(a)-1\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # match the entire string\n    if re.search(r'a\\b', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text=text.lower()\n    text_temp=text[:]\n    words=text.split()\n    for word in words:\n        if word[-3:]=='a' and len(word)>4:\n            word=word[:-3]\n        if word[-2:]=='b':\n            word=word[:-2]\n        if word[-1:]=='s':\n            word=word[:-1]\n        if len(word)>2:\n            if word[-2]=='h':\n                word=word[:-2]\n            if word[-1:]=='e':\n                word=word[:-1]\n            if word==word[-2:] and len(word)>2:\n                word=word[:-2]\n        text_temp=text_temp.replace(word,word[:-1])\n    return text_temp\ntext = 'Example Input (text is a paragraph and a line starts with a, followed by two a, followed by two b, followed by a line):'\nprint(text_match_three(text))\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'\\([^)]*b\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b' or three 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b' or four 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b' or five 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b' or six 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b' or seven 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b' or eight 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten 'b' or nine 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven 'b' or eight 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve 'b' or thirteen 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen 'b' or fourteen 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen 'b' or fifteen 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen 'b' or sixteen 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen 'b' or seventeen 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b' or eighteen 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b' or nineteen 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty 'b' or twenty 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty 'b' or twenty 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty 'b' or thirty 'c'\n    '''\n    match = re.search(r'\\([^)]*b\\)[^c]*\\([^)][^)][^c]*\\([^)][^)]*\\)',text)\n    if match:\n        return match.group()\n    return False\n    \ndef text_match_fourty(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b' or four 'c'\n    '''\n    match = re.search(r'"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.findall(r\"\\w+\\w+\\s[a-z]*\\w+\\s[a-z]*\\w+\", text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub(r'\\b\\d{3}\\b', r'1', text)\n    text = re.sub(r'\\b[a-z]\\b', r'2', text)\n    text = re.sub(r'\\b[0-9]\\b', r'3', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'4', text)\n    text = re.sub(r'\\b[a-z]\\b', r'5', text)\n    text = re.sub(r'\\b[0-9]\\b', r'6', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'7', text)\n    text = re.sub(r'\\b[a-z]\\b', r'8', text)\n    text = re.sub(r'\\b[0-9]\\b', r'9', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'9', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub(r'\\b[A-Z]\\b', r'0', text)\n    text = re.sub(r'\\b[a-z]\\b', r'X', text)\n    text = re.sub(r'\\b[0-9]\\b', r'X', text)\n    text = re.sub"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # build regex for regexp\n    regexp = 'a(?:b)?(?:[^a-zA-Z0-9]|[^\\W])+?'\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'^\\b(a)(b)(c)$'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.replace('\\r','')\n    text = text.replace('\\n','')\n    pattern = r'\\b(a)b\\b'\n    results = re.findall(pattern, text)\n    if results:\n        return results\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.replace(\".\",\".\")\n    result = re.search(r\"\\b((a)([bc]))b\",text)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    three_a = 'a'\n    three_b = 'b'\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_str == '':\n        return ()\n    elif len(test_list) == 0:\n        return ()\n    else:\n        new_tuple = tuple(map(int, test_list.split(', ')))\n        return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple = tuple(test_list)\n    return tuple, str(tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_list = test_str.split(\",\")\n    tuple_new = tuple(tuple_list)\n    return tuple(tuple_new)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_str[0], test_str[1], test_str[2:]\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if isinstance(test_str, tuple):\n        return test_str\n    else:\n        return tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple([c.upper() for c in test_str.split()])\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = []\n    for index in range(len(test_list)):\n        new_tuple.append(test_list[index])\n    return tuple(new_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(map(eval, test_str.split(',')))\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # TODO: Write your code here\n    return tuple(map(str.lower, test_list))\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            evens += 1\n    return evens == 0\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # initialize counter to 0\n    counter = 0\n    # loop through the list\n    for i in range(len(nums)):\n        # if even number is found, increment counter\n        if (nums[i] % 2 == 0):\n            counter += 1\n    # return result\n    return counter == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = True\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_idx = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_idx.append(i)\n    if len(even_idx) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = []\n    nums.sort()\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2 == 0:\n            result.append(nums[i])\n        i += 1\n    return result\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_list = []\n    for i in nums:\n        if i%2==0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if (nums[i] % 2 == 0):\n            print(nums[i])\n    \n    return True\n    \n    \neven_position([2,3,4,5,6,7,8,9])\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums is None:\n        return None\n    if not nums:\n        return False\n    for i in range(0, len(nums), 2):\n        if nums[i]%2==0 and nums[i+1]%2==0:\n            return True\n    return False\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    test_tup.remove(test_tup[0])\n    test_tup.remove(test_tup[0])\n    test_tup.remove(test_tup[0])\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    x = 1,2,3\n    y = x,5,6\n    #type(x)\n    #type(y)\n    return type(x), type(y)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    remove_tuple = test_tup[:]\n    #iterate through the tuple\n    for i in range(len(test_tup)):\n        #skip the first element of the tuple\n        if i < 1:\n            continue\n        #check if the first element of the tuple is a tuple\n        if type(test_tup[i][0]) == tuple:\n            #remove the first element of the tuple\n            test_tup[i] = test_tup[i][1:]\n    return remove_tuple\n    "
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not test_tup:\n        return ()\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) > 1:\n        new_tup = []\n        for i in test_tup:\n            if type(i) == tuple:\n                new_tup.append(i)\n            else:\n                new_tup.append(i)\n        test_tup = new_tup\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    index = 1\n    while index < len(test_tup):\n        if isinstance(test_tup[index], tuple):\n            test_tup.remove(test_tup[index])\n        else:\n            break\n        index = index + 1\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[1]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not test_tup:\n        return ()\n    else:\n        return test_tup[0]\n    \ntup = (1,2,3,4,5,6,7,8,9)\nprint(remove_nested(tup)"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = tuple(filter(lambda x: not x, test_tup))\n    return test_tup\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if type(i) == list:\n            counter+=len(i)\n        else:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            count+=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count_list = 0\n    \n    for i in input_list:\n        if type(i) is list:\n            count_list += len(i)\n    \n    return count_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output_list = []\n    if len(input_list) < 2:\n        return output_list\n    for ele in range(0, len(input_list)):\n        if type(input_list[ele])!= list:\n            output_list.append(1)\n        else:\n            output_list.append(len(input_list[ele]))\n    return output_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    new_list=[]\n    for x in range(len(input_list)):\n        new_list.append(input_list[x])\n    new_list.sort()\n    return len(new_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    number_of_lists = 0\n    for i in input_list:\n        if type(i) == list:\n            number_of_lists += len(i)\n    return number_of_lists\n    \ndef count_dict(input_dict): \n    '''\n    Write a python function to count the number of dictionaries in a given number of dictionaries.\n    '''\n    number_of_dicts = 0\n    for i in input_dict.keys():\n        if type(input_dict[i]) == dict:\n            number_of_dicts += len(input_dict[i].keys())\n    return number_of_dicts\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # code here\n    # if x is smaller than the last element, return last index\n    if arr[x] < arr[-1]:\n        return len(arr)-1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[x] < arr[0]:\n        return -1\n    if x == 0 or x == len(arr) - 1:\n        return x\n    if arr[x] < arr[x - 1] and arr[x] < arr[x + 1]:\n        return last(arr[x + 1:],x)\n    else:\n        return last(arr[:x],x-1)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=0\n    for j in range(len(arr)):\n        if(arr[j]>x):\n            i=j\n    return i\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if(arr[x]<arr[len(arr)-1]):\n        arr[x],arr[len(arr)-1] = arr[len(arr)-1],arr[x]\n    return arr[x]\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr == []:\n        return -1\n    else:\n        return last(arr[1:],x)\ndef binary_search(arr, x):\n    '''\n    Write a python function to find the location of an element in a sorted array.\n    '''\n    if arr == []:\n        return -1\n    else:\n        low = 0\n        high = len(arr) - 1\n        mid = int((low+high)/2)\n        while arr[mid]!= x:\n            if arr[mid] > x:\n                high = mid - 1\n                mid = int((high + low)/2)\n            else:\n                low = mid + 1\n                mid = int((low + high)/2)\n        return mid\ndef solve(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr == []:\n        return -1\n    else:\n        return binary_search(arr, x)\narr = [4,2,1,3,5,6]\nprint(solve(arr, 3))\narr = [4,2,1,3,5,6]\nprint(solve(arr, 7))\narr = [4,2,1,3,5,6]\nprint(solve(arr, 4))\narr = [1,2,3,4,5,6,7]\nprint(solve(arr, 5)"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-1 if arr[len(arr)-1]==x else len(arr)-1-1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[0]==x:\n        return 0\n    if x<arr[0]:\n        return arr[0]\n    if arr[-1]==x:\n        return len(arr)-1\n    if x>arr[-1]:\n        return len(arr)-1\n    if x>arr[0]:\n        return 0\n    \n    \n    \ndef med(arr,l,r):\n    '''\n    Write a python function to find the median of an array.\n    '''\n    if l>r:\n        return\n    mid=(l+r)//2\n    if arr[mid]==arr[mid-1]:\n        mid+=1\n    if arr[mid]<arr[mid+1]:\n        return arr[mid]\n    return arr[mid]\n    \ndef mode(arr):\n    '''\n    Write a python function to return the mode of an array.\n    '''\n    count=dict()\n    for num in arr:\n        if num not in count:\n            count[num]=1\n        else:\n            count[num]+=1\n    for num in count:\n        if count[num]>=1:\n            return num\n    \ndef insertion_sort(arr):\n    '''\n    Write a python function to sort an array in place.\n    '''\n    for i in range(1,len(arr)):\n        for j in range(i,0,-1):\n            if arr[j]<arr[j-1]:\n                arr[j],arr[j-1]=arr[j-1],arr[j]\n            else:\n                break\ndef selection_sort(arr):\n    '''\n    Write a python function to sort an array in place.\n    '''\n    for i in range(len(arr)):\n        min_idx=i\n        for j in range(i,len(arr)):\n            if arr[j]<arr[min_idx]:\n                min_idx=j\n        arr[i],arr[min_idx]=arr[min_idx],arr[i]\n    \ndef merge(arr):\n    '''\n    Write a python function to merge two sorted arrays.\n    '''\n    left=0\n    right=0\n    res=[]\n    while left<len(arr) and right<len(arr):\n        if arr[left]<arr[right]:\n            res.append(arr[left])\n            left+=1\n        else:\n            res.append(arr[right])\n            right+=1\n    if left>right:\n        for i in range(left,right):\n            res.append(arr[i])\n    else:\n        for i in range(left,right):\n            res.append(arr[i])\n            res.append(arr[right])\n            right+=1\n    return res\n    \ndef shell_sort(arr):\n    '''\n    Write a python function to sort an array in place.\n    '''\n    gap=int(len(arr)/2)\n    while gap>0:\n        for i in range(gap,len(arr)):\n            temp=arr[i]\n            j=i\n            while j>=gap and arr[j-gap]>temp:\n                arr[j]=arr[j-gap]\n                j-=gap\n            arr[j]=temp\n        gap//=2\n    return arr\n    \ndef shell_sort_quick(arr):\n    '''\n    Write a python function to sort an array in place.\n    '''\n    gap=int(len(arr)/2)\n    while gap>0:\n        for i in range(gap,len(arr)):\n            temp=arr[i]\n            j=i\n            while j>=gap and arr[j-gap]<temp:\n                arr[j]=arr[j-gap]\n                j-=gap\n            arr[j]=temp\n        gap//=2\n    return arr\n    \ndef quick(arr,start,end):\n    '''\n    Write a python function to perform quick sort.\n    '''\n    if start>end:\n        return\n    mid=(start+end)//2\n    quick(arr,start,mid)\n    quick(arr,mid+1,end)\n    \ndef quick_sort(arr):\n    '''\n    Write a python function to sort an array in place.\n    '''\n    if len(arr)<=1:\n        return arr\n    pivot=arr[0]\n    left=[]\n    right=[]\n    for i in range(len(arr)):\n        if arr[i]<=pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    return quick(left,0,len(left)-1) + [pivot]+quick(right,0,len(right)-1)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    return length - (x-1)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    l = len(arr)\n    # Find the last index\n    # of the index whose value is x\n    # in the array\n    for i in range(l-1, -1, -1):\n        if arr[i] == x:\n            return i\n        else:\n            i = i+1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[-1]==x:\n        return len(arr)-1\n    \n    if arr[0]<x:\n        if arr[-1]<x:\n            return len(arr)-1\n        return 0\n    if arr[0]>x:\n        return 0\n    if arr[-1]>x:\n        return len(arr)-1\n    return len(arr)-2\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    for i in range(len(text)):\n        if text[i]=='a' and text[i+1] not in ['a','i','e','o','u','c','s','p','d','l','r','j','k','h','m','f','g','w','n','z']:\n            text=text[:i]+text[i+1:]\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_pattern = re.compile(r'(a)(b)')\n    match = text_pattern.search(text)\n    if match:\n        print(match.group(1) + match.group(2))\n    else:\n        print(\"This text does not have an 'a' followed by anything\")\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # get text to search\n    text = text.strip()\n    # make a list to remove duplicates\n    s = []\n    # add a whitespace at the beginning of the list, so we can distinguish for different starting and ending words\n    s.append(' ')\n    s.append(' ')\n    s.append(' ')\n    # split text into words\n    words = text.split(' ')\n    # iterate through each word\n    for word in words:\n        # if the word is at the end of the list,\n        # add a whitespace to it so we can distinguish for different starting and ending words\n        if len(word) == len(s):\n            s.append(' ')\n        # if a word is just a single letter,\n        # add a whitespace to it so we can distinguish for different starting and ending words\n        elif len(word) == 1:\n            s.append(' ')\n        # if the word is not at the end of the list,\n        # add a whitespace to it so we can distinguish for different starting and ending words\n        else:\n            s.append(' ')\n    # join the list back to the string\n    text = ''.join(s)\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    m = re.findall(r'a\\b', text)\n    text=text.replace(m[0],\"b\")\n    text=text.replace(m[1],\"\")\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    l = ['a','b']\n    regex = re.compile(\"(\"+l+\")\")\n    matches = regex.finditer(text)\n    count = 0\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        \n        if end - start > 3:\n            count += 1\n            print(\"{} has been found in a sentence\".format(text[start:end]))\n        else:\n            print(\"{} has not been found in a sentence\".format(text[start:end]))\n            \n    print(\"{} has been found in a sentence\".format(text[start:end]))\n    print(\"Found {} times\".format(count))\n    \ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_starta_endb('The text contains a word')\ntext_star"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    i=0\n    text_list = text.split(' ')\n    while i < len(text_list):\n        # Remove whitespace\n        text_list[i] = text_list[i].strip()\n        # Remove 'b'\n        text_list[i] = text_list[i].replace('b', '')\n        # Remove 'a'\n        text_list[i] = text_list[i].replace('a', '')\n        # Check if 'b' is present in the list\n        if 'b' in text_list[i]:\n            i = text_list.index(text_list[i])\n            break\n        else:\n            i += 1\n    return text_list\ndef find_all_numbers(text):\n    '''\n    Write a function that matches a string that has all numbers (a,b,c,...) in the text.\n    '''\n    num_list = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            num_list.append(text[i])\n    return num_list\ndef find_all_substrings(text):\n    '''\n    Write a function that matches a string that has all the substrings of text in the text.\n    '''\n    substring_list = []\n    for i in range(len(text)):\n        if text[i:i+2] not in substring_list:\n            substring_list.append(text[i:i+2])\n    return substring_list\ndef count_words(text):\n    '''\n    Write a function that counts the number of words in the text.\n    '''\n    word_count = 0\n    for i in range(len(text)):\n        if text[i:i+2] not in word_count:\n            word_count.append(text[i:i+2])\n    return word_count\ndef remove_punctuation(text):\n    '''\n    Write a function that removes punctuation from a given text.\n    '''\n    for i in range(len(text)):\n        if text[i] not in punctuation:\n            text[i] = text[i].replace('.','')\n            text[i] = text[i].replace(',',' ')\n            text[i] = text[i].replace('?',' ')\n            text[i] = text[i].replace('!',' ')\n            text[i] = text[i].replace(' ','')\n            text[i] = text[i].replace('.','')\n            text[i] = text[i].replace(',',' ')\n            text[i] = text[i].replace('?',' ')\n            text[i] = text[i].replace('!',' ')\n    return text\ndef remove_stopwords(text):\n    '''\n    Write a function that removes stopwords from a given text.\n    '''\n    stopword_list = []\n    # print(text)\n    # print(len(text))\n    for i in range(len(text)):\n        # print(text[i])\n        if text[i] not in stopword_list:\n            stopword_list.append(text[i])\n    # print(stopword_list)\n    return stopword_list\ndef remove_non_ascii(text):\n    '''\n    Write a function that removes non-ascii characters from a given text.\n    '''\n    for i in range(len(text)):\n        if text[i] not in alphabet:\n            text[i] = text[i].encode('ascii', 'ignore').decode('ascii')\n    return text\ndef normalize_text(text):\n    '''\n    Write a function that normalizes text to remove punctuation and stopwords.\n    '''\n    normal_text = []\n    for i in range(len(text)):\n        # print(text[i])\n        if text[i].isalpha():\n            normal_text.append(text[i])\n    normal_text = remove_punctuation(normal_text)\n    normal_text = remove_stopwords(normal_text)\n    normal_text = remove_non_ascii(normal_text)\n    return normal_text\ndef strip_punctuation(text):\n    '''\n    Write a function that strips punctuation from a given text.\n    '''\n    for i in range(len(text)):\n        if text[i] not in punctuation:\n            text[i] = text[i].replace('.','')\n            text[i] = text[i].replace(',',' ')\n            text[i] = text[i].replace('?',' ')\n            text[i] = text[i].replace('!',' ')\n    return text\ndef strip_stopwords(text):\n    '''\n    Write a function that strips stopwords from a given text.\n    '''\n    stopword_list = []\n    # print(text)\n    # print(len(text))\n    for i in range(len(text)):\n        # print(text[i])\n        if text[i] not in stopword_list:\n            stopword_list.append(text[i])\n    # print(stopword_list)\n    return stopword_list\ndef strip_non_ascii(text):\n    '''\n    Write a function that strips non-ascii characters from a given text.\n    '''\n    for i in range(len(text)):\n        if text[i] not in alphabet:\n            text[i] = text[i].encode('ascii', 'ignore').decode('ascii')\n    return text\ndef strip_punctuation_special(text):\n    '''\n    Write a function that strips punctuation from a given text.\n    '''\n    for i in range(len(text)):\n        # print(text[i])\n        if text[i] not in punctuation:\n            text[i] = text[i].replace('.','')\n            text[i] = text[i].replace(',',' ')\n            text[i] = text[i].replace('?',' ')\n            text[i] = text[i].replace('!',' ')\n    return text\ndef strip_stopwords_special(text):\n    '''\n    Write a function that strips stopwords from a given text.\n    '''\n    stopword_list = []\n    # print(text)\n    # print(len(text))\n    for i in range(len(text)):\n        # print(text[i])\n        if text[i] not in stopword_list:\n            stopword_list.append(text[i])\n    # print(stopword_list)\n    return stopword_list\ndef strip_non_ascii_special(text):\n    '''\n    Write a function that strips non-ascii characters from a given text.\n    '''\n    for i in range(len(text)):\n        if text[i] not in alphabet:\n            text[i] = text[i].encode('ascii', 'ignore').decode('ascii')\n    return text\ndef strip_punctuation_and_stopwords(text):\n    '''\n    Write a function that strips punctuation from a given text.\n    '''\n    for i in range(len(text)):\n        # print(text[i])\n        if text[i] not in punctuation and text[i] not in stopword_list:\n            text[i] = text[i].replace('.','')\n            text[i] = text[i].replace(',',' ')\n            text[i] = text[i].replace('?',' ')\n            text[i] = text[i].replace('!',' ')\n    return text\ndef strip_stopwords_and_nonascii(text):\n    '''\n    Write a function that strips stopwords from a given text.\n    '''\n    for i in range(len(text)):\n        # print(text[i])\n        if text[i] not in alphabet and text[i] not in stopword_list:\n            text[i] = text[i].replace('.','')\n            text[i] = text[i].replace(',',' ')\n            text[i] = text[i].replace('?',' ')\n            text[i] = text[i].replac"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # TODO: Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    pattern = re.compile(r'a\\b')\n    return re.search(pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"^\\s*(\\d\\d\\d)a(\\d\\d\\d)\\s*$\", re.IGNORECASE)\n    m = pattern.search(text)\n    return m.group(1)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?P<text>a.*\\b)'\n    match = re.match(pattern, text)\n    if match:\n        return match.group('text') + 'b'\n    else:\n        return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # each of a followed by anything\n    m = re.finditer(r'a(\\s)?(\\b)?a(\\s)?', text)\n    if m:\n        for match in m:\n            text = text[:match.start()] + match.group(0) + text[match.end():]\n    return text\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k,v in dict.items():\n        sum += v\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum = sum + dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum = sum + dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for item in dict.values():\n        sum_of_items += item\n    return sum_of_items\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    result = 0\n    for value in dict.values():\n        result = result + value\n    return result\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.items():\n        total += i[1]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 1: \n        return n \n    else: \n        l = 1\n        r = n \n        sum = 0 \n        while l < r: \n            if (l % 2) == 1: \n                sum += l \n            if (r % 2) == 0: \n                sum += r \n            l += 1\n            r -= 1\n        return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd = 0\n    for i in range(n):\n        if i%2:\n            odd += i\n    return odd\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = n-1\n    while(l <= r):\n        mid = (l+r)//2\n        if (mid%2) == 0:\n            sum = mid\n            print(sum)\n            return sum\n        else:\n            if mid%2 == 0:\n                r = mid -1\n            else:\n                l = mid +1\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd = 0\n    if l > r:\n        return \"Error, l and r should be greater than or equal to 0.\"\n    for x in range(l, r): \n        if x % 2!= 0:\n            odd += x\n    return odd \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    result = 0\n    while n >= 2:\n        if n % 2 == 0:\n            result += n\n        n = n // 2\n    return result\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    while n >= 0:\n        if n%2 == 1:\n            sum += n\n        n = n//2\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = n\n    sum = 0\n    while l < r:\n        #base case\n        if l % 2 == 1:\n            l += 1\n            #even numbers\n            if l % 2!= 0:\n                sum += l\n        #odd numbers\n        else:\n            r -= 1\n            #odd numbers\n            if r % 2 == 1:\n                sum += r\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for n in range(l, r+1):\n        if n % 2 == 1:\n            sum += n\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # l is lower bound \n    # r is upper bound\n    # l and r are inclusive \n    # positive numbers are included \n    l = 1\n    r = n \n    sum = 0 \n    while l <= r: \n        mid = (l + r) // 2 \n        if mid % 2 == 1: \n            sum = sum + mid \n            l = mid + 1 \n        else: \n            r = mid - 1 \n    return sum \n    \ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    # l is lower bound \n    # r is upper bound\n    # l and r are inclusive \n    # positive numbers are included \n    l = 1\n    r = n \n    sum = 0 \n    while l <= r: \n        mid = (l + r) // 2 \n        if mid % 2 == 0: \n            sum = sum + mid \n            l = mid + 1 \n        else: \n            r = mid - 1 \n    return sum \n    \ndef sum_all_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    # l is lower bound \n    # r is upper bound\n    # l and r are inclusive \n    # positive numbers are included \n    l = 1\n    r = n \n    sum = 0 \n    while l <= r: \n        mid = (l + r) // 2 \n        if mid % 2 == 0: \n            sum = sum + mid \n            l = mid + 1 \n        else: \n            r = mid - 1 \n    return sum \n    \ndef sum_all_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # l is lower bound \n    # r is upper bound\n    # l and r are inclusive \n    # positive numbers are included \n    l = 1\n    r = n \n    sum = 0 \n    while l <= r: \n        mid = (l + r) // 2 \n        if mid % 2!= 0: \n            sum = sum + mid \n            l = mid + 1 \n        else: \n            r = mid - 1 \n    return sum \n    "
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    # # Add your code here\n    # return _sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for item in arr:\n        sum = sum + item\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    summ = 0\n    for i in arr:\n        summ += i\n    return summ\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(0,len(arr)):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for element in arr:\n        total += element\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total=0\n    for i in arr:\n        total+=i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for item in arr:\n        sum = sum + item\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n_str = bin(n).replace(\"0b\",\"\")\n    d_str = bin(d)[2:]\n    if len(d_str)<len(n_str):\n        d_str = \"0\"*(len(n_str)-len(d_str))+d_str\n    n_str = n_str[-len(d_str):]\n    return int(n_str,2)<<d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    i=0\n    while (n>=1):\n        if (n%2==1):\n            n=n-1\n        else:\n            n=3*n+1\n        i=i+1\n    i=i-1\n    #print(i)\n    j=3-i\n    n=n+j\n    #print(n)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d) | (n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    c = n%(1 << d)\n    n = (n//(1 << d))\n    if c == 0:\n        return n\n    elif c == 1:\n        return (((n<<(d - 1)) | (n >> (d - 1))) & (2**32-1))\n    elif c == 2:\n        return (((n<<(d - 1)) | (n >> (d - 1))) | (2**32-1))\n    elif c == 3:\n        return (((n<<(d - 1)) | (n >> (d - 1))) | ((n >> (d - 1)) & (2**32-1)))\n    elif c == 4:\n        return ((n<<(d - 1)) | ((n >> (d - 1)) & (2**32-1)))\n    elif c == 5:\n        return (((n<<(d - 1)) | ((n >> (d - 1)) & (2**32-1))) | ((n >> (d - 1)) | (n >> (d - 2))))\n    elif c == 6:\n        return ((n<<(d - 1)) | ((n >> (d - 1)) | (n >> (d - 2))))\n    elif c == 7:\n        return ((n<<(d - 1)) | (n << (d - 2)))\n    elif c == 8:\n        return (((n << (d - 2)) | (n << (d - 1))) | (n << (d - 1)) | (n << (d - 2)))\n    elif c == 9:\n        return (((n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2))) | (n << (d - 1)))\n    elif c == 10:\n        return (((n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2))) | (n << (d - 1)))\n    elif c == 11:\n        return (((n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2))))\n    elif c == 12:\n        return ((n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)))\n    elif c == 13:\n        return (((n << (d - 1)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 2))))\n    elif c == 14:\n        return (((n << (d - 2)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2))) | (((n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2))))\n    elif c == 15:\n        return (((n << (d - 2)) | (n << (d - 1)) | (n << (d - 1)) | (n << (d - 1)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2))) | (((n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)))) | (((n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2))))\n    elif c == 16:\n        return (((n << (d - 1)) | (n << (d - 2))) | (((n << (d - 1)) | (n << (d - 2))) | (n << (d - 2)) | (n << (d - 1)) | (n << (d - 2))))\n    elif c == 17:\n        return (((n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2))) | ((n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2))))\n    elif c == 18:\n        return (((n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2))) | ((n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2))))\n    elif c == 19:\n        return (((n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2))) | ((n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2))))\n    elif c == 20:\n        return (((n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)))) | ((n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - 2)) | (n << (d - "
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n>>d\n    a = bin(n)[2:]\n    a = a[::-1]\n    if n<0:\n        a = a[:-1]\n        a = '0'*(d-len(a)) + a\n    elif n>=1:\n        a = a[:-1]\n        a = '1'*(d-len(a)) + a\n    return a\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l = n % 64\n    n = n // 64\n    if d == 0:\n        return n\n    else:\n        if d == 1:\n            return 64 - (l & 1)\n        if d == 2:\n            return (l >> 1) | (l << 1)\n        if d == 3:\n            return (l >> 2) | (l << 1)\n        if d == 4:\n            return (l >> 3) | (l << 1)\n        if d == 5:\n            return (l >> 4) | (l << 1)\n        if d == 6:\n            return (l >> 5) | (l << 1)\n        if d == 7:\n            return (l >> 6) | (l << 1)\n        if d == 8:\n            return (l >> 7) | (l << 1)\n        if d == 9:\n            return (l >> 8) | (l << 1)\n        if d == 10:\n            return (l >> 9) | (l << 1)\n        if d == 11:\n            return (l >> 10) | (l << 1)\n        if d == 12:\n            return (l >> 11) | (l << 1)\n        if d == 13:\n            return (l >> 12) | (l << 1)\n        if d == 14:\n            return (l >> 13) | (l << 1)\n        if d == 15:\n            return (l >> 14) | (l << 1)\n        if d == 16:\n            return (l >> 15) | (l << 1)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    new_n = n ^(n >>d)\n    return new_n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return((n<<d) | (n>>(32-d)))\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', str(text))\ndef lower_text(text):\n    '''\n    Write a function to lowercase all text in a string.\n    '''\n    return text.lower()\ndef remove_digits(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    return re.sub(r'\\d+', '', text)\ndef remove_special_characters(text):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9_]', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +',' ',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" +\", \" \", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('[^\\S\\n]+')\n    return pattern.sub('', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Empty string \n    if text == \"\":\n        return \"\"\n    # String without spaces\n    else:\n        return re.sub(\" +\", \" \", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    for char in text:\n        if char =='':\n            pass\n        else:\n            text = text.replace(char, '')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text\ndef remove_html_tags(text):\n    '''\n    Write a function to remove all HTML tags from a string.\n    '''\n    text = re.sub('<.*?>', '', text)\n    return text\ndef remove_new_line(text):\n    '''\n    Write a function to remove new line characters from a string.\n    '''\n    text = re.sub('\\n', '', text)\n    return text\ndef remove_non_alphanum(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9 ]', '', text)\n    return text\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    return text\ndef remove_punctuation_from_text(text):\n    '''\n    Write a function to remove all punctuation from the input string.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    text = re.sub(r'\\s+','', text)\n    return text\ndef remove_stopwords(text):\n    '''\n    Write a function to remove all stopwords from a string.\n    '''\n    text = re.sub('[\\w\\s]{1,}', '', text)\n    return text\ndef remove_stopwords_from_text(text):\n    '''\n    Write a function to remove all stopwords from the input string.\n    '''\n    text = re.sub('[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_word(text):\n    '''\n    Write a function to remove all alphanumeric characters from a string.\n    '''\n    text = re.sub('[^a-zA-Z0-9]', '', text)\n    return text\ndef remove_word_from_text(text):\n    '''\n    Write a function to remove all alphanumeric characters from the input string.\n    '''\n    text = re.sub('[^a-zA-Z0-9]','', text)\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_all_stopwords(text):\n    '''\n    Write a function to remove all stopwords from a string.\n    '''\n    text = re.sub('[\\w\\s]{1,}','', text)\n    return text\ndef remove_stopwords_from_text(text):\n    '''\n    Write a function to remove all stopwords from the input string.\n    '''\n    text = re.sub('[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_only_numbers(text):\n    '''\n    Write a function to remove all alphanumeric characters from a string.\n    '''\n    text = re.sub('[^a-zA-Z0-9]','', text)\n    return text\ndef remove_only_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    text = re.sub(r'\\s+','', text)\n    return text\ndef remove_only_punctuation_from_text(text):\n    '''\n    Write a function to remove all punctuation from the input string.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    text = re.sub(r'\\s+','', text)\n    return text\ndef remove_only_stopwords(text):\n    '''\n    Write a function to remove all stopwords from a string.\n    '''\n    text = re.sub('[\\w\\s]{1,}','', text)\n    return text\ndef remove_only_stopwords_from_text(text):\n    '''\n    Write a function to remove all stopwords from the input string.\n    '''\n    text = re.sub('[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_all_stopwords(text):\n    '''\n    Write a function to remove all stopwords from a string.\n    '''\n    text = re.sub('[\\w\\s]{1,}','', text)\n    return text\ndef remove_all_stopwords_from_text(text):\n    '''\n    Write a function to remove all stopwords from the input string.\n    '''\n    text = re.sub('[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all alphanumeric characters from a string.\n    '''\n    text = re.sub('[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_all_punctuation_from_text(text):\n    '''\n    Write a function to remove all alphanumeric characters from the input string.\n    '''\n    text = re.sub('[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_all_word(text):\n    '''\n    Write a function to remove all alphanumeric characters from a string.\n    '''\n    text = re.sub('[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_all_word_from_text(text):\n    '''\n    Write a function to remove all alphanumeric characters from the input string.\n    '''\n    text = re.sub('[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_all_stopwords(text):\n    '''\n    Write a function to remove all stopwords from a string.\n    '''\n    text = re.sub('[\\w\\s]{1,}','', text)\n    return text\ndef remove_all_stopwords_from_text(text):\n    '''\n    Write a function to remove all stopwords from the input string.\n    '''\n    text = re.sub('[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all alphanumeric characters from a string.\n    '''\n    text = re.sub('[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text)\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_all_punctuation_from_text(text):\n    '''\n    Write a function to remove all alphanumeric characters from the input string.\n    '''\n    text = re.sub('[^a-zA-Z0-9.!?\\'\\\"\\\u201c]','', text"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \" \", text)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert len(x) == len(y) == len(z)\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    def three_equal(x,y,z):\n        '''\n        Write a python function to count the number of equal numbers from three given integers.\n        '''\n        if x == y and y == z:\n            return 'equal'\n        elif x == y or y == z or z == x:\n            return 'Not equal'\n        else:\n            return 'Not Equal'\n    if x == y and y == z:\n        return 'equal'\n    elif x == y or y == z or z == x:\n        return 'Not equal'\n    else:\n        return 'Not Equal'\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    s1 = x + y + z\n    s2 = x * y * z\n    s3 = x - y - z\n    if s1 == s2 == s3:\n        print(\"The number of equal numbers in the list are :\",s1,\",\",s2,\",\",s3)\n    else:\n        print(\"The number of equal numbers in the list are :\",s1,\",\",s2,\",\",s3)\n    return \n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    if x > y and x > z:\n        ans = x\n    elif y > x and y > z:\n        ans = y\n    else:\n        ans = z\n    return ans\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c = 0\n    x,y,z = int(x),int(y),int(z)\n    if x == y:\n        c+=1\n    elif y == z:\n        c+=1\n    if x == z:\n        c+=1\n    return c\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = sum(x)\n    y = sum(y)\n    z = sum(z)\n    if x==y and y==z and z==x:\n        print(\"3 equal numbers are present.\")\n    else:\n        print(\"3 equal numbers are not present.\")\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(f'#1 : {x}')\n    print(f'#2 : {y}')\n    print(f'#3 : {z}')\n    print(f'#4 : {(x+y+z)/3}')\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x,y,z=x+y+z,x+y+z,x+y+z\n    if x==y==z==x==y==x==y==z==z==y==z==z==0:\n        return 0\n    else:\n        return x-y-z\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x==y and x==z\n    return (x+y+z)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count+=1\n    if x == z:\n        count+=1\n    if y == z:\n        count+=1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count=0\n    if len(arr)==0:\n        return 0\n    elif len(arr)==1:\n        return 1\n    else:\n        for i in range(len(arr)):\n            if arr[i]>arr[i+1]:\n                count+=1\n                arr[i],arr[i+1]=arr[i+1],arr[i]\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr = sorted(arr)\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        count += (n-i)\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            res+=1\n    return res\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    rotations=0\n    for i in range(n):\n        if i==n-1:\n            rotations+=1\n            break\n        rotations+=1\n        arr[i],arr[n-1]=arr[n-1],arr[i]\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[j] < arr[i] :\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotations = 0\n    \n    for i in range(n):\n        left = i\n        right = n - 1 - i\n        \n        while left >= 0 and arr[left] > arr[right]:\n            left -= 1\n        \n        while right >= 0 and arr[right] > arr[left]:\n            right -= 1\n        \n        if left == right:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #define counts\n    count1 = 0\n    count2 = 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # convert string to int\n    N = len(arr)\n    # create counter\n    rotation_cnt = 0\n    # Loop through array\n    for i in range(N):\n        # Check if current value is present in the array\n        if arr[i] > arr[i + 1]:\n            rotation_cnt += 1\n    # return counter\n    return rotation_cnt\n    #\n    # return rotation_cnt + count_rotation(arr[::-1]) # \ub0b4 \ud480\uc774\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n    if n == 0:\n        return 0\n    \n    while left < right:\n        if arr[left] <= arr[right]:\n            count = 0\n            while (arr[left]!= arr[right]):\n                if arr[left] < arr[right]:\n                    arr[left], arr[right] = arr[right], arr[left]\n                else:\n                    break\n                count += 1\n            left += 1\n            right -= 1\n        else:\n            count += 1\n            left += 1\n        \n    return count\n        \nprint(count_rotation([1,2,3,4,5,6,7,8]))\nprint(count_rotation([3,4,5,6,7,8,1,2,3]))\nprint(count_rotation([4,5,6,7,8,1,2,3,4]))\nprint(count_rotation([0,1,2,3,4,5,6,7,8]))\nprint(count_rotation([2,3,4,5,6,7,8,1,0]))\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n-1, -1, -1):\n        if arr[i] > arr[i+1]:\n            count += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    \n    return count\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # code to check whether given number is perfect square or not\n    sq = int(n**(1/2))\n    return sq == n\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n == 4:\n        return True\n    else:\n        return n % 4 == 0\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s=str(n)\n    if len(s)==1 :\n        return True\n    elif len(s)==2 :\n        if int(s[0])**2==n and int(s[1])**2==n :\n            return True\n        else :\n            return False\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(n**0.5)\n    if s**2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2!= 0 and n == 3:\n        return True\n    if n % 2!= 0 and n % 2!= 0 and n % 2!= 0 and n % 2!= 0:\n        return False\n    return False\n    \n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 :\n        return False\n    if n < 0 :\n        return False\n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if n % i == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0 :\n        return False\n    if n == 1 :\n        return True\n    if n%2 == 0 or n==3 :\n        return False\n    if n%3 == 0 or n==5 :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(n ** 0.5)\n    if(n == s or (n % s == 0)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        if n%2 == 0:\n            return False\n        else:\n            return is_perfect_square(n-1) and is_perfect_square(n//2)\n    \n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # base case \n    if len(arr)==1:\n        return True\n    # function to check if the product is even\n    # if it is then return True\n    # else return False \n    elif len(arr)%2==0:\n        for i in range(0,len(arr)):\n            product=arr[i]*arr[i]\n            if product<=arr[i+1]:\n                return False\n            else:\n                pass\n    else:\n        for i in range(0,len(arr)):\n            product=arr[i]*arr[i]\n            if product<=arr[i+1]:\n                return False\n            else:\n                pass\n    \n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)%2 == 0:\n        print('the product of numbers in a list is even.')\n    else:\n        print('the product of numbers in a list is not even.')\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for x in range(len(arr)):\n        if arr[x]%2==0:\n            return False\n    return True\n    \ndef number_of_prime_factors(n):\n    '''\n    A function to find the number of prime factors of a number.\n    '''\n    factors=[]\n    for i in range(2,n+1):\n        if n%i==0:\n            factors.append(i)\n    return len(factors)\n    \ndef is_prime(n):\n    '''\n    A function to check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    for i in range(5,n,2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Store the size of the array\n    n = len(arr)\n    # Initialize the products\n    prod = 1\n    # Initialize the accumulator\n    accumulator = 1\n    # Loop through the elements of the array\n    for i in range(n):\n        # Check if the current element has any other element that is even\n        if arr[i] % 2 == 0:\n            # If this element is even, add one to the current accumulator\n            accumulator += 1\n            # If this element is not even, multiply the current product\n            # by the current accumulator\n            if accumulator % 2 == 0:\n                prod = prod * arr[i]\n                # Increment the accumulator\n        else:\n            # If this element is not even, add one to the current accumulator\n            accumulator += 1\n    return prod == 1\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(1, len(arr)): \n        if arr[i] % 2 == 0: \n            return False\n    return True \ndef main():\n    '''\n    Test the is_product_even function.\n    '''\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(is_product_even(arr))\nmain()"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)==0:\n        return False\n    elif len(arr)==1:\n        return arr[0]%2==0\n    elif len(arr)==2:\n        return arr[0]==arr[1]\n    else:\n        for i in range(len(arr)):\n            if i==0:\n                if arr[i]%2==0:\n                    return False\n            elif i==1:\n                if arr[i]%2==0:\n                    return False\n            else:\n                if arr[i]%2!=0:\n                    return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for el in arr:\n        if el % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return True if (sum(arr) % 2 == 0) else False\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    max_sum.append([])\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    lists.sort()\n    return lists[::-1]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max_sum_list_helper(lists, 0)\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Your code here\n    max_sum = []\n    for i in lists:\n        curr_sum = 0\n        for j in i:\n            curr_sum += j\n        if curr_sum not in max_sum:\n            max_sum.append(curr_sum)\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # TODO: Write your code here\n    return max([sum(subList) for subList in lists])\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    maximums_list = []\n    for i in range(len(lists)):\n        sub_list = []\n        for j in range(len(lists[i])):\n            sub_list.append(lists[i][j])\n        sub_list.sort()\n        if sub_list[-1] > maximums_list[-1]:\n            maximums_list = sub_list\n    return maximums_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    total_list = []\n    for i in lists:\n        total = 0\n        for j in i:\n            total += j\n        total_list.append([total, i])\n    return max(total_list)\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for i in lists:\n        temp = []\n        for x in i:\n            temp.append(x)\n        sum = sum(temp)\n        max_sum.append(sum)\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    max_sum = 0\n    current_sum = 0\n    for el in lists:\n        current_sum += el\n        if max_sum < current_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #Your code here\n    max_run = 0\n    #current_char = test_str[0]\n    for char in test_str:\n        if char.isupper():\n            max_run += 1\n    if max_run >= 5:\n        print(\"This string has max run of uppercase characters\")\n    else:\n        print(\"This string has max run of uppercase characters, but has no max run\")\n    #test_str = 'SDFQRKPV'\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_uppercase = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_run_uppercase += 1\n    return max_run_uppercase\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    '''\n    \n    @param test_str string\n    @return maximum run\n    '''\n    '''\n    def max_run_uppercase(test_str):\n        max_run = 0\n        for i in range(len(test_str)):\n            if(test_str[i].isupper()):\n                if(i >= max_run):\n                    max_run = i\n            else:\n                continue\n        return max_run\n    \n    print(\"The maximum run of uppercase characters is\", max_run_uppercase(test_str))\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    str_lower = test_str.lower()\n    max_run_uppercase = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_list = list(test_str)\n    test_list = test_list.lower()\n    max_run = \"\"\n    for i in range(0, len(test_list)):\n        if (test_list[i] == \" \"):\n            test_list[i] = \"-\"\n    print(\"String: \", test_list)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for ch in test_str:\n        if ord(ch) >= 65 and ord(ch) <= 90:\n            max_run += 1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    num_char = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            num_char += 1\n            if num_char > max_run:\n                max_run = num_char\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_uppercase_count = 0\n    for run_uppercase_char in test_str:\n        run_uppercase_count = test_str.count(run_uppercase_char)\n        if run_uppercase_count > max_run_uppercase_count:\n            max_run_uppercase_count = run_uppercase_count\n    return max_run_uppercase_count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return \"\"\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    c = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            c += 1\n    return c\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in range(len(nums)):\n        if nums[x]%2!= 0:\n            return nums[x]\n    return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0]%2 == 1:\n        return nums[0]\n    else:\n        return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    counter = 0\n    for item in nums:\n        if item % 2 == 1:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    count = 0\n    for i in range(0,len(nums)):\n        if nums[i]%2==1:\n            count = count+1\n    if count%2==0:\n        return nums[0]\n    else:\n        return False\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if not nums:\n        return None\n    for i,num in enumerate(nums):\n        if i%2==1:\n            continue\n        else:\n            return num\n    return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) <= 1:\n        return 0\n    return nums[0] % 2\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # return index of first even element\n    for index in range(len(nums)):\n        if nums[index] % 2 == 1:\n            return index\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    start = 0\n    end = len(nums) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if nums[mid] % 2 == 1:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return nums[start"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # O(n) time complexity - we have to sort the list of numbers\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Implement your code here\n    # return the first odd number\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0] if nums[0] % 2 == 1 else nums[1]\n    if len(nums) % 2 == 0:\n        return nums[(len(nums) - 1)//2]\n    return nums[(len(nums) - 1)//2] if nums[0] % 2 == 1 else nums[1]\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # assert type(test_tup) == tuple, f'Invalid tuple type, only tuples are allowed as test_tup {type(test_tup)}'\n    # assert len(test_tup) == 2, f'Invalid tuple, length of tuples must be 2'\n    for tup in test_tup:\n        if tup[0]!= tup[1]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    try:\n        test_tup.index(K)\n    except:\n        return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check = True\n    if len(test_tup) > K:\n        check = False\n    return check\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    return sum(1 for ele in test_tup if ele in K) == len(K)\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < 2:\n        return False\n    for i in range(0, len(test_tup) - 1):\n        if test_tup[i + 1][0] - test_tup[i][0] > K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for item in test_tup:\n        if item in K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # check if the k in the tuple\n    if K > len(test_tup)-1:\n        return False\n    # check if the k is less than or equal to the size of the tuple\n    if K < 0:\n        return False\n    # return True\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    n = len(test_tup)\n    for i in range(n):\n        if test_tup[i][0] <= K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in K:\n            return True\n    return False\ndef check_L(test_tup, L):\n    '''\n    Write a function to check if the given tuples contain the l or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in L:\n            return True\n    return False\ndef check_F(test_tup, F):\n    '''\n    Write a function to check if the given tuples contain the f or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in F:\n            return True\n    return False\ndef check_R(test_tup, R):\n    '''\n    Write a function to check if the given tuples contain the r or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in R:\n            return True\n    return False\ndef check_M(test_tup, M):\n    '''\n    Write a function to check if the given tuples contain the m or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in M:\n            return True\n    return False\ndef check_U(test_tup, U):\n    '''\n    Write a function to check if the given tuples contain the u or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in U:\n            return True\n    return False\ndef check_D(test_tup, D):\n    '''\n    Write a function to check if the given tuples contain the d or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in D:\n            return True\n    return False\ndef check_C(test_tup, C):\n    '''\n    Write a function to check if the given tuples contain the c or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in C:\n            return True\n    return False\ndef check_B(test_tup, B):\n    '''\n    Write a function to check if the given tuples contain the b or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in B:\n            return True\n    return False\ndef check_E(test_tup, E):\n    '''\n    Write a function to check if the given tuples contain the e or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in E:\n            return True\n    return False\ndef check_T(test_tup, T):\n    '''\n    Write a function to check if the given tuples contain the t or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in T:\n            return True\n    return False\ndef check_N(test_tup, N):\n    '''\n    Write a function to check if the given tuples contain the n or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in N:\n            return True\n    return False\ndef check_M_0(test_tup, M):\n    '''\n    Write a function to check if the given tuples contain the m or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in M:\n            return True\n    return False\ndef check_U_0(test_tup, U):\n    '''\n    Write a function to check if the given tuples contain the u or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in U:\n            return True\n    return False\ndef check_D_0(test_tup, D):\n    '''\n    Write a function to check if the given tuples contain the d or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in D:\n            return True\n    return False\ndef check_C_0(test_tup, C):\n    '''\n    Write a function to check if the given tuples contain the c or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in C:\n            return True\n    return False\ndef check_B_0(test_tup, B):\n    '''\n    Write a function to check if the given tuples contain the b or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in B:\n            return True\n    return False\ndef check_E_0(test_tup, E):\n    '''\n    Write a function to check if the given tuples contain the e or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in E:\n            return True\n    return False\ndef check_T_0(test_tup, T):\n    '''\n    Write a function to check if the given tuples contain the t or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in T:\n            return True\n    return False\ndef check_N_0(test_tup, N):\n    '''\n    Write a function to check if the given tuples contain the n or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in N:\n            return True\n    return False\ndef check_M_1(test_tup, M):\n    '''\n    Write a function to check if the given tuples contain the m or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in M:\n            return True\n    return False\ndef check_U_1(test_tup, U):\n    '''\n    Write a function to check if the given tuples contain the u or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in U:\n            return True\n    return False\ndef check_D_1(test_tup, D):\n    '''\n    Write a function to check if the given tuples contain the d or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in D:\n            return True\n    return False\ndef check_C_1(test_tup, C):\n    '''\n    Write a function to check if the given tuples contain the c or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in C:\n            return True\n    return False\ndef check_B_1(test_tup, B):\n    '''\n    Write a function to check if the given tuples contain the b or not.\n    '''\n    T = len(test_tup)\n    for i in range(T):\n        if test_tup[i] in B:\n            return True\n    return False\ndef check_E_1(test_tup, E):\n    '''\n    Write "
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check = 0\n    for i in range(len(test_tup)):\n        if test_tup[i][0] == K:\n            check += 1\n    if check == 0:\n        print(\"K not in the given tuple\")\n        return 0\n    else:\n        print(\"K found in the given tuple\")\n        return 1\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for index, el in enumerate(test_tup2):\n        if el < test_tup1[index]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    temp1 = test_tup1\n    temp2 = test_tup2\n    index = 0\n    for i in temp2:\n        if temp1[index] > temp2[index]:\n            return False\n        index += 1\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup2[0] < test_tup1[0]:\n        return False\n    elif test_tup2[1] > test_tup1[1]:\n        return False\n    elif test_tup2[2] < test_tup1[2]:\n        return False\n    elif test_tup2[3] < test_tup1[3]:\n        return False\n    elif test_tup2[0] < test_tup1[1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # print(test_tup1[0:5])\n    # print(test_tup2[0:5])\n    if test_tup1[0] > test_tup2[0]:\n        return False\n    elif test_tup1[0] < test_tup2[0]:\n        return True\n    else:\n        return False\n    # for index, value in enumerate(test_tup2):\n    #     if test_tup1[index] < value:\n    #         return False\n    #     return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[1] < test_tup2[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            smaller = False\n    return smaller\n    \ndef check_contains(test_tup1, test_tup2, test_tup3):\n    '''\n    Write a function to check if each element of third tuple is contained within the second tuple.\n    '''\n    contains = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            if test_tup2[test_tup1.index(test_tup2[i])] not in test_tup3:\n                contains = False\n    return contains\n    \ndef check_all(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of all tuple is both in the second tuple.\n    '''\n    all = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            all = False\n    return all\n    \ndef main():\n    test_tup1 = (1,2,3,4,5,6,7,8,9,10)\n    test_tup2 = (2,4,6,8,10,12,14,16,18,20)\n    print(\"Tuple 1 -\", test_tup1)\n    print(\"Tuple 2 -\", test_tup2)\n    print()\n    print(\"Is tuples contain all elements?\")\n    print(check_all(test_tup1, test_tup2))\n    print()\n    print(\"Is tuples contain all elements?\")\n    print(check_all(test_tup1, test_tup2))\n    print()\n    print(\"Contain every other element in the tuple?\")\n    print(check_contains(test_tup1, test_tup2, test_tup3))\n    print()\n    print(\"Contain all elements in the tuple?\")\n    print(check_all(test_tup1, test_tup2))\n    print()\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # checking each element of the second tuple with respect to the first tuple\n    for i in range(0, len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for el1 in test_tup1:\n        for el2 in test_tup2:\n            if el1 < el2:\n                return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    print(test_tup2)\n    print(test_tup2[0])\n    print(test_tup1[0])\n    print(test_tup1[0][0])\n    print(test_tup1[0][1])\n    print(test_tup1[1][0])\n    print(test_tup1[1][1])\n    print(test_tup1[2][0])\n    print(test_tup1[2][1])\n    print(test_tup1[3][0])\n    print(test_tup1[3][1])\n    print(test_tup1[4][0])\n    print(test_tup1[4][1])\n"
    }
]